
MotoTracer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bbbc  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000774  0800bc78  0800bc78  0001bc78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c3ec  0800c3ec  00020228  2**0
                  CONTENTS
  4 .ARM          00000000  0800c3ec  0800c3ec  00020228  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c3ec  0800c3ec  00020228  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c3ec  0800c3ec  0001c3ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c3f0  0800c3f0  0001c3f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000228  20000000  0800c3f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007c0  20000228  0800c61c  00020228  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200009e8  0800c61c  000209e8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c542  00000000  00000000  00020250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f26  00000000  00000000  0002c792  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000968  00000000  00000000  0002e6b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008a0  00000000  00000000  0002f020  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015f44  00000000  00000000  0002f8c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c126  00000000  00000000  00045804  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008561c  00000000  00000000  0005192a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d6f46  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003964  00000000  00000000  000d6f98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000228 	.word	0x20000228
 80000d8:	00000000 	.word	0x00000000
 80000dc:	0800bc5c 	.word	0x0800bc5c

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	2000022c 	.word	0x2000022c
 80000fc:	0800bc5c 	.word	0x0800bc5c

08000100 <strcmp>:
 8000100:	7802      	ldrb	r2, [r0, #0]
 8000102:	780b      	ldrb	r3, [r1, #0]
 8000104:	2a00      	cmp	r2, #0
 8000106:	d003      	beq.n	8000110 <strcmp+0x10>
 8000108:	3001      	adds	r0, #1
 800010a:	3101      	adds	r1, #1
 800010c:	429a      	cmp	r2, r3
 800010e:	d0f7      	beq.n	8000100 <strcmp>
 8000110:	1ad0      	subs	r0, r2, r3
 8000112:	4770      	bx	lr

08000114 <strlen>:
 8000114:	2300      	movs	r3, #0
 8000116:	5cc2      	ldrb	r2, [r0, r3]
 8000118:	3301      	adds	r3, #1
 800011a:	2a00      	cmp	r2, #0
 800011c:	d1fb      	bne.n	8000116 <strlen+0x2>
 800011e:	1e58      	subs	r0, r3, #1
 8000120:	4770      	bx	lr
	...

08000124 <__gnu_thumb1_case_uqi>:
 8000124:	b402      	push	{r1}
 8000126:	4671      	mov	r1, lr
 8000128:	0849      	lsrs	r1, r1, #1
 800012a:	0049      	lsls	r1, r1, #1
 800012c:	5c09      	ldrb	r1, [r1, r0]
 800012e:	0049      	lsls	r1, r1, #1
 8000130:	448e      	add	lr, r1
 8000132:	bc02      	pop	{r1}
 8000134:	4770      	bx	lr
 8000136:	46c0      	nop			; (mov r8, r8)

08000138 <__gnu_thumb1_case_shi>:
 8000138:	b403      	push	{r0, r1}
 800013a:	4671      	mov	r1, lr
 800013c:	0849      	lsrs	r1, r1, #1
 800013e:	0040      	lsls	r0, r0, #1
 8000140:	0049      	lsls	r1, r1, #1
 8000142:	5e09      	ldrsh	r1, [r1, r0]
 8000144:	0049      	lsls	r1, r1, #1
 8000146:	448e      	add	lr, r1
 8000148:	bc03      	pop	{r0, r1}
 800014a:	4770      	bx	lr

0800014c <__udivsi3>:
 800014c:	2200      	movs	r2, #0
 800014e:	0843      	lsrs	r3, r0, #1
 8000150:	428b      	cmp	r3, r1
 8000152:	d374      	bcc.n	800023e <__udivsi3+0xf2>
 8000154:	0903      	lsrs	r3, r0, #4
 8000156:	428b      	cmp	r3, r1
 8000158:	d35f      	bcc.n	800021a <__udivsi3+0xce>
 800015a:	0a03      	lsrs	r3, r0, #8
 800015c:	428b      	cmp	r3, r1
 800015e:	d344      	bcc.n	80001ea <__udivsi3+0x9e>
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d328      	bcc.n	80001b8 <__udivsi3+0x6c>
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d30d      	bcc.n	8000188 <__udivsi3+0x3c>
 800016c:	22ff      	movs	r2, #255	; 0xff
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	ba12      	rev	r2, r2
 8000172:	0c03      	lsrs	r3, r0, #16
 8000174:	428b      	cmp	r3, r1
 8000176:	d302      	bcc.n	800017e <__udivsi3+0x32>
 8000178:	1212      	asrs	r2, r2, #8
 800017a:	0209      	lsls	r1, r1, #8
 800017c:	d065      	beq.n	800024a <__udivsi3+0xfe>
 800017e:	0b03      	lsrs	r3, r0, #12
 8000180:	428b      	cmp	r3, r1
 8000182:	d319      	bcc.n	80001b8 <__udivsi3+0x6c>
 8000184:	e000      	b.n	8000188 <__udivsi3+0x3c>
 8000186:	0a09      	lsrs	r1, r1, #8
 8000188:	0bc3      	lsrs	r3, r0, #15
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x46>
 800018e:	03cb      	lsls	r3, r1, #15
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b83      	lsrs	r3, r0, #14
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x52>
 800019a:	038b      	lsls	r3, r1, #14
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b43      	lsrs	r3, r0, #13
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x5e>
 80001a6:	034b      	lsls	r3, r1, #13
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0b03      	lsrs	r3, r0, #12
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x6a>
 80001b2:	030b      	lsls	r3, r1, #12
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0ac3      	lsrs	r3, r0, #11
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x76>
 80001be:	02cb      	lsls	r3, r1, #11
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a83      	lsrs	r3, r0, #10
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x82>
 80001ca:	028b      	lsls	r3, r1, #10
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a43      	lsrs	r3, r0, #9
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x8e>
 80001d6:	024b      	lsls	r3, r1, #9
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	0a03      	lsrs	r3, r0, #8
 80001de:	428b      	cmp	r3, r1
 80001e0:	d301      	bcc.n	80001e6 <__udivsi3+0x9a>
 80001e2:	020b      	lsls	r3, r1, #8
 80001e4:	1ac0      	subs	r0, r0, r3
 80001e6:	4152      	adcs	r2, r2
 80001e8:	d2cd      	bcs.n	8000186 <__udivsi3+0x3a>
 80001ea:	09c3      	lsrs	r3, r0, #7
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xa8>
 80001f0:	01cb      	lsls	r3, r1, #7
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0983      	lsrs	r3, r0, #6
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xb4>
 80001fc:	018b      	lsls	r3, r1, #6
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0943      	lsrs	r3, r0, #5
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xc0>
 8000208:	014b      	lsls	r3, r1, #5
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	0903      	lsrs	r3, r0, #4
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xcc>
 8000214:	010b      	lsls	r3, r1, #4
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	08c3      	lsrs	r3, r0, #3
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xd8>
 8000220:	00cb      	lsls	r3, r1, #3
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0883      	lsrs	r3, r0, #2
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xe4>
 800022c:	008b      	lsls	r3, r1, #2
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	0843      	lsrs	r3, r0, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d301      	bcc.n	800023c <__udivsi3+0xf0>
 8000238:	004b      	lsls	r3, r1, #1
 800023a:	1ac0      	subs	r0, r0, r3
 800023c:	4152      	adcs	r2, r2
 800023e:	1a41      	subs	r1, r0, r1
 8000240:	d200      	bcs.n	8000244 <__udivsi3+0xf8>
 8000242:	4601      	mov	r1, r0
 8000244:	4152      	adcs	r2, r2
 8000246:	4610      	mov	r0, r2
 8000248:	4770      	bx	lr
 800024a:	e7ff      	b.n	800024c <__udivsi3+0x100>
 800024c:	b501      	push	{r0, lr}
 800024e:	2000      	movs	r0, #0
 8000250:	f000 f8f0 	bl	8000434 <__aeabi_idiv0>
 8000254:	bd02      	pop	{r1, pc}
 8000256:	46c0      	nop			; (mov r8, r8)

08000258 <__aeabi_uidivmod>:
 8000258:	2900      	cmp	r1, #0
 800025a:	d0f7      	beq.n	800024c <__udivsi3+0x100>
 800025c:	e776      	b.n	800014c <__udivsi3>
 800025e:	4770      	bx	lr

08000260 <__divsi3>:
 8000260:	4603      	mov	r3, r0
 8000262:	430b      	orrs	r3, r1
 8000264:	d47f      	bmi.n	8000366 <__divsi3+0x106>
 8000266:	2200      	movs	r2, #0
 8000268:	0843      	lsrs	r3, r0, #1
 800026a:	428b      	cmp	r3, r1
 800026c:	d374      	bcc.n	8000358 <__divsi3+0xf8>
 800026e:	0903      	lsrs	r3, r0, #4
 8000270:	428b      	cmp	r3, r1
 8000272:	d35f      	bcc.n	8000334 <__divsi3+0xd4>
 8000274:	0a03      	lsrs	r3, r0, #8
 8000276:	428b      	cmp	r3, r1
 8000278:	d344      	bcc.n	8000304 <__divsi3+0xa4>
 800027a:	0b03      	lsrs	r3, r0, #12
 800027c:	428b      	cmp	r3, r1
 800027e:	d328      	bcc.n	80002d2 <__divsi3+0x72>
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d30d      	bcc.n	80002a2 <__divsi3+0x42>
 8000286:	22ff      	movs	r2, #255	; 0xff
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	ba12      	rev	r2, r2
 800028c:	0c03      	lsrs	r3, r0, #16
 800028e:	428b      	cmp	r3, r1
 8000290:	d302      	bcc.n	8000298 <__divsi3+0x38>
 8000292:	1212      	asrs	r2, r2, #8
 8000294:	0209      	lsls	r1, r1, #8
 8000296:	d065      	beq.n	8000364 <__divsi3+0x104>
 8000298:	0b03      	lsrs	r3, r0, #12
 800029a:	428b      	cmp	r3, r1
 800029c:	d319      	bcc.n	80002d2 <__divsi3+0x72>
 800029e:	e000      	b.n	80002a2 <__divsi3+0x42>
 80002a0:	0a09      	lsrs	r1, r1, #8
 80002a2:	0bc3      	lsrs	r3, r0, #15
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x4c>
 80002a8:	03cb      	lsls	r3, r1, #15
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b83      	lsrs	r3, r0, #14
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x58>
 80002b4:	038b      	lsls	r3, r1, #14
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b43      	lsrs	r3, r0, #13
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x64>
 80002c0:	034b      	lsls	r3, r1, #13
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0b03      	lsrs	r3, r0, #12
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x70>
 80002cc:	030b      	lsls	r3, r1, #12
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0ac3      	lsrs	r3, r0, #11
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x7c>
 80002d8:	02cb      	lsls	r3, r1, #11
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a83      	lsrs	r3, r0, #10
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x88>
 80002e4:	028b      	lsls	r3, r1, #10
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a43      	lsrs	r3, r0, #9
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0x94>
 80002f0:	024b      	lsls	r3, r1, #9
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	0a03      	lsrs	r3, r0, #8
 80002f8:	428b      	cmp	r3, r1
 80002fa:	d301      	bcc.n	8000300 <__divsi3+0xa0>
 80002fc:	020b      	lsls	r3, r1, #8
 80002fe:	1ac0      	subs	r0, r0, r3
 8000300:	4152      	adcs	r2, r2
 8000302:	d2cd      	bcs.n	80002a0 <__divsi3+0x40>
 8000304:	09c3      	lsrs	r3, r0, #7
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xae>
 800030a:	01cb      	lsls	r3, r1, #7
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0983      	lsrs	r3, r0, #6
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xba>
 8000316:	018b      	lsls	r3, r1, #6
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0943      	lsrs	r3, r0, #5
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xc6>
 8000322:	014b      	lsls	r3, r1, #5
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	0903      	lsrs	r3, r0, #4
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xd2>
 800032e:	010b      	lsls	r3, r1, #4
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	08c3      	lsrs	r3, r0, #3
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xde>
 800033a:	00cb      	lsls	r3, r1, #3
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0883      	lsrs	r3, r0, #2
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xea>
 8000346:	008b      	lsls	r3, r1, #2
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	0843      	lsrs	r3, r0, #1
 800034e:	428b      	cmp	r3, r1
 8000350:	d301      	bcc.n	8000356 <__divsi3+0xf6>
 8000352:	004b      	lsls	r3, r1, #1
 8000354:	1ac0      	subs	r0, r0, r3
 8000356:	4152      	adcs	r2, r2
 8000358:	1a41      	subs	r1, r0, r1
 800035a:	d200      	bcs.n	800035e <__divsi3+0xfe>
 800035c:	4601      	mov	r1, r0
 800035e:	4152      	adcs	r2, r2
 8000360:	4610      	mov	r0, r2
 8000362:	4770      	bx	lr
 8000364:	e05d      	b.n	8000422 <__divsi3+0x1c2>
 8000366:	0fca      	lsrs	r2, r1, #31
 8000368:	d000      	beq.n	800036c <__divsi3+0x10c>
 800036a:	4249      	negs	r1, r1
 800036c:	1003      	asrs	r3, r0, #32
 800036e:	d300      	bcc.n	8000372 <__divsi3+0x112>
 8000370:	4240      	negs	r0, r0
 8000372:	4053      	eors	r3, r2
 8000374:	2200      	movs	r2, #0
 8000376:	469c      	mov	ip, r3
 8000378:	0903      	lsrs	r3, r0, #4
 800037a:	428b      	cmp	r3, r1
 800037c:	d32d      	bcc.n	80003da <__divsi3+0x17a>
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d312      	bcc.n	80003aa <__divsi3+0x14a>
 8000384:	22fc      	movs	r2, #252	; 0xfc
 8000386:	0189      	lsls	r1, r1, #6
 8000388:	ba12      	rev	r2, r2
 800038a:	0a03      	lsrs	r3, r0, #8
 800038c:	428b      	cmp	r3, r1
 800038e:	d30c      	bcc.n	80003aa <__divsi3+0x14a>
 8000390:	0189      	lsls	r1, r1, #6
 8000392:	1192      	asrs	r2, r2, #6
 8000394:	428b      	cmp	r3, r1
 8000396:	d308      	bcc.n	80003aa <__divsi3+0x14a>
 8000398:	0189      	lsls	r1, r1, #6
 800039a:	1192      	asrs	r2, r2, #6
 800039c:	428b      	cmp	r3, r1
 800039e:	d304      	bcc.n	80003aa <__divsi3+0x14a>
 80003a0:	0189      	lsls	r1, r1, #6
 80003a2:	d03a      	beq.n	800041a <__divsi3+0x1ba>
 80003a4:	1192      	asrs	r2, r2, #6
 80003a6:	e000      	b.n	80003aa <__divsi3+0x14a>
 80003a8:	0989      	lsrs	r1, r1, #6
 80003aa:	09c3      	lsrs	r3, r0, #7
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x154>
 80003b0:	01cb      	lsls	r3, r1, #7
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0983      	lsrs	r3, r0, #6
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x160>
 80003bc:	018b      	lsls	r3, r1, #6
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0943      	lsrs	r3, r0, #5
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x16c>
 80003c8:	014b      	lsls	r3, r1, #5
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	0903      	lsrs	r3, r0, #4
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x178>
 80003d4:	010b      	lsls	r3, r1, #4
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	08c3      	lsrs	r3, r0, #3
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x184>
 80003e0:	00cb      	lsls	r3, r1, #3
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	0883      	lsrs	r3, r0, #2
 80003e8:	428b      	cmp	r3, r1
 80003ea:	d301      	bcc.n	80003f0 <__divsi3+0x190>
 80003ec:	008b      	lsls	r3, r1, #2
 80003ee:	1ac0      	subs	r0, r0, r3
 80003f0:	4152      	adcs	r2, r2
 80003f2:	d2d9      	bcs.n	80003a8 <__divsi3+0x148>
 80003f4:	0843      	lsrs	r3, r0, #1
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d301      	bcc.n	80003fe <__divsi3+0x19e>
 80003fa:	004b      	lsls	r3, r1, #1
 80003fc:	1ac0      	subs	r0, r0, r3
 80003fe:	4152      	adcs	r2, r2
 8000400:	1a41      	subs	r1, r0, r1
 8000402:	d200      	bcs.n	8000406 <__divsi3+0x1a6>
 8000404:	4601      	mov	r1, r0
 8000406:	4663      	mov	r3, ip
 8000408:	4152      	adcs	r2, r2
 800040a:	105b      	asrs	r3, r3, #1
 800040c:	4610      	mov	r0, r2
 800040e:	d301      	bcc.n	8000414 <__divsi3+0x1b4>
 8000410:	4240      	negs	r0, r0
 8000412:	2b00      	cmp	r3, #0
 8000414:	d500      	bpl.n	8000418 <__divsi3+0x1b8>
 8000416:	4249      	negs	r1, r1
 8000418:	4770      	bx	lr
 800041a:	4663      	mov	r3, ip
 800041c:	105b      	asrs	r3, r3, #1
 800041e:	d300      	bcc.n	8000422 <__divsi3+0x1c2>
 8000420:	4240      	negs	r0, r0
 8000422:	b501      	push	{r0, lr}
 8000424:	2000      	movs	r0, #0
 8000426:	f000 f805 	bl	8000434 <__aeabi_idiv0>
 800042a:	bd02      	pop	{r1, pc}

0800042c <__aeabi_idivmod>:
 800042c:	2900      	cmp	r1, #0
 800042e:	d0f8      	beq.n	8000422 <__divsi3+0x1c2>
 8000430:	e716      	b.n	8000260 <__divsi3>
 8000432:	4770      	bx	lr

08000434 <__aeabi_idiv0>:
 8000434:	4770      	bx	lr
 8000436:	46c0      	nop			; (mov r8, r8)

08000438 <__aeabi_cdrcmple>:
 8000438:	4684      	mov	ip, r0
 800043a:	0010      	movs	r0, r2
 800043c:	4662      	mov	r2, ip
 800043e:	468c      	mov	ip, r1
 8000440:	0019      	movs	r1, r3
 8000442:	4663      	mov	r3, ip
 8000444:	e000      	b.n	8000448 <__aeabi_cdcmpeq>
 8000446:	46c0      	nop			; (mov r8, r8)

08000448 <__aeabi_cdcmpeq>:
 8000448:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800044a:	f001 fd39 	bl	8001ec0 <__ledf2>
 800044e:	2800      	cmp	r0, #0
 8000450:	d401      	bmi.n	8000456 <__aeabi_cdcmpeq+0xe>
 8000452:	2100      	movs	r1, #0
 8000454:	42c8      	cmn	r0, r1
 8000456:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000458 <__aeabi_dcmpeq>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 fc89 	bl	8001d70 <__eqdf2>
 800045e:	4240      	negs	r0, r0
 8000460:	3001      	adds	r0, #1
 8000462:	bd10      	pop	{r4, pc}

08000464 <__aeabi_dcmplt>:
 8000464:	b510      	push	{r4, lr}
 8000466:	f001 fd2b 	bl	8001ec0 <__ledf2>
 800046a:	2800      	cmp	r0, #0
 800046c:	db01      	blt.n	8000472 <__aeabi_dcmplt+0xe>
 800046e:	2000      	movs	r0, #0
 8000470:	bd10      	pop	{r4, pc}
 8000472:	2001      	movs	r0, #1
 8000474:	bd10      	pop	{r4, pc}
 8000476:	46c0      	nop			; (mov r8, r8)

08000478 <__aeabi_dcmple>:
 8000478:	b510      	push	{r4, lr}
 800047a:	f001 fd21 	bl	8001ec0 <__ledf2>
 800047e:	2800      	cmp	r0, #0
 8000480:	dd01      	ble.n	8000486 <__aeabi_dcmple+0xe>
 8000482:	2000      	movs	r0, #0
 8000484:	bd10      	pop	{r4, pc}
 8000486:	2001      	movs	r0, #1
 8000488:	bd10      	pop	{r4, pc}
 800048a:	46c0      	nop			; (mov r8, r8)

0800048c <__aeabi_dcmpgt>:
 800048c:	b510      	push	{r4, lr}
 800048e:	f001 fcb1 	bl	8001df4 <__gedf2>
 8000492:	2800      	cmp	r0, #0
 8000494:	dc01      	bgt.n	800049a <__aeabi_dcmpgt+0xe>
 8000496:	2000      	movs	r0, #0
 8000498:	bd10      	pop	{r4, pc}
 800049a:	2001      	movs	r0, #1
 800049c:	bd10      	pop	{r4, pc}
 800049e:	46c0      	nop			; (mov r8, r8)

080004a0 <__aeabi_dcmpge>:
 80004a0:	b510      	push	{r4, lr}
 80004a2:	f001 fca7 	bl	8001df4 <__gedf2>
 80004a6:	2800      	cmp	r0, #0
 80004a8:	da01      	bge.n	80004ae <__aeabi_dcmpge+0xe>
 80004aa:	2000      	movs	r0, #0
 80004ac:	bd10      	pop	{r4, pc}
 80004ae:	2001      	movs	r0, #1
 80004b0:	bd10      	pop	{r4, pc}
 80004b2:	46c0      	nop			; (mov r8, r8)

080004b4 <__aeabi_cfrcmple>:
 80004b4:	4684      	mov	ip, r0
 80004b6:	0008      	movs	r0, r1
 80004b8:	4661      	mov	r1, ip
 80004ba:	e7ff      	b.n	80004bc <__aeabi_cfcmpeq>

080004bc <__aeabi_cfcmpeq>:
 80004bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004be:	f000 fbc5 	bl	8000c4c <__lesf2>
 80004c2:	2800      	cmp	r0, #0
 80004c4:	d401      	bmi.n	80004ca <__aeabi_cfcmpeq+0xe>
 80004c6:	2100      	movs	r1, #0
 80004c8:	42c8      	cmn	r0, r1
 80004ca:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004cc <__aeabi_fcmpeq>:
 80004cc:	b510      	push	{r4, lr}
 80004ce:	f000 fb51 	bl	8000b74 <__eqsf2>
 80004d2:	4240      	negs	r0, r0
 80004d4:	3001      	adds	r0, #1
 80004d6:	bd10      	pop	{r4, pc}

080004d8 <__aeabi_fcmplt>:
 80004d8:	b510      	push	{r4, lr}
 80004da:	f000 fbb7 	bl	8000c4c <__lesf2>
 80004de:	2800      	cmp	r0, #0
 80004e0:	db01      	blt.n	80004e6 <__aeabi_fcmplt+0xe>
 80004e2:	2000      	movs	r0, #0
 80004e4:	bd10      	pop	{r4, pc}
 80004e6:	2001      	movs	r0, #1
 80004e8:	bd10      	pop	{r4, pc}
 80004ea:	46c0      	nop			; (mov r8, r8)

080004ec <__aeabi_fcmple>:
 80004ec:	b510      	push	{r4, lr}
 80004ee:	f000 fbad 	bl	8000c4c <__lesf2>
 80004f2:	2800      	cmp	r0, #0
 80004f4:	dd01      	ble.n	80004fa <__aeabi_fcmple+0xe>
 80004f6:	2000      	movs	r0, #0
 80004f8:	bd10      	pop	{r4, pc}
 80004fa:	2001      	movs	r0, #1
 80004fc:	bd10      	pop	{r4, pc}
 80004fe:	46c0      	nop			; (mov r8, r8)

08000500 <__aeabi_fcmpgt>:
 8000500:	b510      	push	{r4, lr}
 8000502:	f000 fb5d 	bl	8000bc0 <__gesf2>
 8000506:	2800      	cmp	r0, #0
 8000508:	dc01      	bgt.n	800050e <__aeabi_fcmpgt+0xe>
 800050a:	2000      	movs	r0, #0
 800050c:	bd10      	pop	{r4, pc}
 800050e:	2001      	movs	r0, #1
 8000510:	bd10      	pop	{r4, pc}
 8000512:	46c0      	nop			; (mov r8, r8)

08000514 <__aeabi_fcmpge>:
 8000514:	b510      	push	{r4, lr}
 8000516:	f000 fb53 	bl	8000bc0 <__gesf2>
 800051a:	2800      	cmp	r0, #0
 800051c:	da01      	bge.n	8000522 <__aeabi_fcmpge+0xe>
 800051e:	2000      	movs	r0, #0
 8000520:	bd10      	pop	{r4, pc}
 8000522:	2001      	movs	r0, #1
 8000524:	bd10      	pop	{r4, pc}
 8000526:	46c0      	nop			; (mov r8, r8)

08000528 <__aeabi_d2uiz>:
 8000528:	b570      	push	{r4, r5, r6, lr}
 800052a:	2200      	movs	r2, #0
 800052c:	4b0c      	ldr	r3, [pc, #48]	; (8000560 <__aeabi_d2uiz+0x38>)
 800052e:	0004      	movs	r4, r0
 8000530:	000d      	movs	r5, r1
 8000532:	f7ff ffb5 	bl	80004a0 <__aeabi_dcmpge>
 8000536:	2800      	cmp	r0, #0
 8000538:	d104      	bne.n	8000544 <__aeabi_d2uiz+0x1c>
 800053a:	0020      	movs	r0, r4
 800053c:	0029      	movs	r1, r5
 800053e:	f002 fb3f 	bl	8002bc0 <__aeabi_d2iz>
 8000542:	bd70      	pop	{r4, r5, r6, pc}
 8000544:	4b06      	ldr	r3, [pc, #24]	; (8000560 <__aeabi_d2uiz+0x38>)
 8000546:	2200      	movs	r2, #0
 8000548:	0020      	movs	r0, r4
 800054a:	0029      	movs	r1, r5
 800054c:	f001 ff88 	bl	8002460 <__aeabi_dsub>
 8000550:	f002 fb36 	bl	8002bc0 <__aeabi_d2iz>
 8000554:	2380      	movs	r3, #128	; 0x80
 8000556:	061b      	lsls	r3, r3, #24
 8000558:	469c      	mov	ip, r3
 800055a:	4460      	add	r0, ip
 800055c:	e7f1      	b.n	8000542 <__aeabi_d2uiz+0x1a>
 800055e:	46c0      	nop			; (mov r8, r8)
 8000560:	41e00000 	.word	0x41e00000

08000564 <__aeabi_d2lz>:
 8000564:	b570      	push	{r4, r5, r6, lr}
 8000566:	0005      	movs	r5, r0
 8000568:	000c      	movs	r4, r1
 800056a:	2200      	movs	r2, #0
 800056c:	2300      	movs	r3, #0
 800056e:	0028      	movs	r0, r5
 8000570:	0021      	movs	r1, r4
 8000572:	f7ff ff77 	bl	8000464 <__aeabi_dcmplt>
 8000576:	2800      	cmp	r0, #0
 8000578:	d108      	bne.n	800058c <__aeabi_d2lz+0x28>
 800057a:	0028      	movs	r0, r5
 800057c:	0021      	movs	r1, r4
 800057e:	f000 f80f 	bl	80005a0 <__aeabi_d2ulz>
 8000582:	0002      	movs	r2, r0
 8000584:	000b      	movs	r3, r1
 8000586:	0010      	movs	r0, r2
 8000588:	0019      	movs	r1, r3
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	2380      	movs	r3, #128	; 0x80
 800058e:	061b      	lsls	r3, r3, #24
 8000590:	18e1      	adds	r1, r4, r3
 8000592:	0028      	movs	r0, r5
 8000594:	f000 f804 	bl	80005a0 <__aeabi_d2ulz>
 8000598:	2300      	movs	r3, #0
 800059a:	4242      	negs	r2, r0
 800059c:	418b      	sbcs	r3, r1
 800059e:	e7f2      	b.n	8000586 <__aeabi_d2lz+0x22>

080005a0 <__aeabi_d2ulz>:
 80005a0:	b570      	push	{r4, r5, r6, lr}
 80005a2:	2200      	movs	r2, #0
 80005a4:	4b0b      	ldr	r3, [pc, #44]	; (80005d4 <__aeabi_d2ulz+0x34>)
 80005a6:	000d      	movs	r5, r1
 80005a8:	0004      	movs	r4, r0
 80005aa:	f001 fced 	bl	8001f88 <__aeabi_dmul>
 80005ae:	f7ff ffbb 	bl	8000528 <__aeabi_d2uiz>
 80005b2:	0006      	movs	r6, r0
 80005b4:	f002 fb6a 	bl	8002c8c <__aeabi_ui2d>
 80005b8:	2200      	movs	r2, #0
 80005ba:	4b07      	ldr	r3, [pc, #28]	; (80005d8 <__aeabi_d2ulz+0x38>)
 80005bc:	f001 fce4 	bl	8001f88 <__aeabi_dmul>
 80005c0:	0002      	movs	r2, r0
 80005c2:	000b      	movs	r3, r1
 80005c4:	0020      	movs	r0, r4
 80005c6:	0029      	movs	r1, r5
 80005c8:	f001 ff4a 	bl	8002460 <__aeabi_dsub>
 80005cc:	f7ff ffac 	bl	8000528 <__aeabi_d2uiz>
 80005d0:	0031      	movs	r1, r6
 80005d2:	bd70      	pop	{r4, r5, r6, pc}
 80005d4:	3df00000 	.word	0x3df00000
 80005d8:	41f00000 	.word	0x41f00000

080005dc <__aeabi_l2d>:
 80005dc:	b570      	push	{r4, r5, r6, lr}
 80005de:	0006      	movs	r6, r0
 80005e0:	0008      	movs	r0, r1
 80005e2:	f002 fb23 	bl	8002c2c <__aeabi_i2d>
 80005e6:	2200      	movs	r2, #0
 80005e8:	4b06      	ldr	r3, [pc, #24]	; (8000604 <__aeabi_l2d+0x28>)
 80005ea:	f001 fccd 	bl	8001f88 <__aeabi_dmul>
 80005ee:	000d      	movs	r5, r1
 80005f0:	0004      	movs	r4, r0
 80005f2:	0030      	movs	r0, r6
 80005f4:	f002 fb4a 	bl	8002c8c <__aeabi_ui2d>
 80005f8:	002b      	movs	r3, r5
 80005fa:	0022      	movs	r2, r4
 80005fc:	f000 fd86 	bl	800110c <__aeabi_dadd>
 8000600:	bd70      	pop	{r4, r5, r6, pc}
 8000602:	46c0      	nop			; (mov r8, r8)
 8000604:	41f00000 	.word	0x41f00000

08000608 <__aeabi_fadd>:
 8000608:	b5f0      	push	{r4, r5, r6, r7, lr}
 800060a:	46c6      	mov	lr, r8
 800060c:	0243      	lsls	r3, r0, #9
 800060e:	0a5b      	lsrs	r3, r3, #9
 8000610:	024e      	lsls	r6, r1, #9
 8000612:	0045      	lsls	r5, r0, #1
 8000614:	004f      	lsls	r7, r1, #1
 8000616:	00da      	lsls	r2, r3, #3
 8000618:	0fc4      	lsrs	r4, r0, #31
 800061a:	469c      	mov	ip, r3
 800061c:	0a70      	lsrs	r0, r6, #9
 800061e:	4690      	mov	r8, r2
 8000620:	b500      	push	{lr}
 8000622:	0e2d      	lsrs	r5, r5, #24
 8000624:	0e3f      	lsrs	r7, r7, #24
 8000626:	0fc9      	lsrs	r1, r1, #31
 8000628:	09b6      	lsrs	r6, r6, #6
 800062a:	428c      	cmp	r4, r1
 800062c:	d04b      	beq.n	80006c6 <__aeabi_fadd+0xbe>
 800062e:	1bea      	subs	r2, r5, r7
 8000630:	2a00      	cmp	r2, #0
 8000632:	dd36      	ble.n	80006a2 <__aeabi_fadd+0x9a>
 8000634:	2f00      	cmp	r7, #0
 8000636:	d061      	beq.n	80006fc <__aeabi_fadd+0xf4>
 8000638:	2dff      	cmp	r5, #255	; 0xff
 800063a:	d100      	bne.n	800063e <__aeabi_fadd+0x36>
 800063c:	e0ad      	b.n	800079a <__aeabi_fadd+0x192>
 800063e:	2380      	movs	r3, #128	; 0x80
 8000640:	04db      	lsls	r3, r3, #19
 8000642:	431e      	orrs	r6, r3
 8000644:	2a1b      	cmp	r2, #27
 8000646:	dc00      	bgt.n	800064a <__aeabi_fadd+0x42>
 8000648:	e0d3      	b.n	80007f2 <__aeabi_fadd+0x1ea>
 800064a:	2001      	movs	r0, #1
 800064c:	4643      	mov	r3, r8
 800064e:	1a18      	subs	r0, r3, r0
 8000650:	0143      	lsls	r3, r0, #5
 8000652:	d400      	bmi.n	8000656 <__aeabi_fadd+0x4e>
 8000654:	e08c      	b.n	8000770 <__aeabi_fadd+0x168>
 8000656:	0180      	lsls	r0, r0, #6
 8000658:	0987      	lsrs	r7, r0, #6
 800065a:	0038      	movs	r0, r7
 800065c:	f002 fc0c 	bl	8002e78 <__clzsi2>
 8000660:	3805      	subs	r0, #5
 8000662:	4087      	lsls	r7, r0
 8000664:	4285      	cmp	r5, r0
 8000666:	dc00      	bgt.n	800066a <__aeabi_fadd+0x62>
 8000668:	e0b6      	b.n	80007d8 <__aeabi_fadd+0x1d0>
 800066a:	1a2d      	subs	r5, r5, r0
 800066c:	48b3      	ldr	r0, [pc, #716]	; (800093c <__aeabi_fadd+0x334>)
 800066e:	4038      	ands	r0, r7
 8000670:	0743      	lsls	r3, r0, #29
 8000672:	d004      	beq.n	800067e <__aeabi_fadd+0x76>
 8000674:	230f      	movs	r3, #15
 8000676:	4003      	ands	r3, r0
 8000678:	2b04      	cmp	r3, #4
 800067a:	d000      	beq.n	800067e <__aeabi_fadd+0x76>
 800067c:	3004      	adds	r0, #4
 800067e:	0143      	lsls	r3, r0, #5
 8000680:	d400      	bmi.n	8000684 <__aeabi_fadd+0x7c>
 8000682:	e078      	b.n	8000776 <__aeabi_fadd+0x16e>
 8000684:	1c6a      	adds	r2, r5, #1
 8000686:	2dfe      	cmp	r5, #254	; 0xfe
 8000688:	d065      	beq.n	8000756 <__aeabi_fadd+0x14e>
 800068a:	0180      	lsls	r0, r0, #6
 800068c:	0a43      	lsrs	r3, r0, #9
 800068e:	469c      	mov	ip, r3
 8000690:	b2d2      	uxtb	r2, r2
 8000692:	4663      	mov	r3, ip
 8000694:	05d0      	lsls	r0, r2, #23
 8000696:	4318      	orrs	r0, r3
 8000698:	07e4      	lsls	r4, r4, #31
 800069a:	4320      	orrs	r0, r4
 800069c:	bc80      	pop	{r7}
 800069e:	46b8      	mov	r8, r7
 80006a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006a2:	2a00      	cmp	r2, #0
 80006a4:	d035      	beq.n	8000712 <__aeabi_fadd+0x10a>
 80006a6:	1b7a      	subs	r2, r7, r5
 80006a8:	2d00      	cmp	r5, #0
 80006aa:	d000      	beq.n	80006ae <__aeabi_fadd+0xa6>
 80006ac:	e0af      	b.n	800080e <__aeabi_fadd+0x206>
 80006ae:	4643      	mov	r3, r8
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d100      	bne.n	80006b6 <__aeabi_fadd+0xae>
 80006b4:	e0a7      	b.n	8000806 <__aeabi_fadd+0x1fe>
 80006b6:	1e53      	subs	r3, r2, #1
 80006b8:	2a01      	cmp	r2, #1
 80006ba:	d100      	bne.n	80006be <__aeabi_fadd+0xb6>
 80006bc:	e12f      	b.n	800091e <__aeabi_fadd+0x316>
 80006be:	2aff      	cmp	r2, #255	; 0xff
 80006c0:	d069      	beq.n	8000796 <__aeabi_fadd+0x18e>
 80006c2:	001a      	movs	r2, r3
 80006c4:	e0aa      	b.n	800081c <__aeabi_fadd+0x214>
 80006c6:	1be9      	subs	r1, r5, r7
 80006c8:	2900      	cmp	r1, #0
 80006ca:	dd70      	ble.n	80007ae <__aeabi_fadd+0x1a6>
 80006cc:	2f00      	cmp	r7, #0
 80006ce:	d037      	beq.n	8000740 <__aeabi_fadd+0x138>
 80006d0:	2dff      	cmp	r5, #255	; 0xff
 80006d2:	d062      	beq.n	800079a <__aeabi_fadd+0x192>
 80006d4:	2380      	movs	r3, #128	; 0x80
 80006d6:	04db      	lsls	r3, r3, #19
 80006d8:	431e      	orrs	r6, r3
 80006da:	291b      	cmp	r1, #27
 80006dc:	dc00      	bgt.n	80006e0 <__aeabi_fadd+0xd8>
 80006de:	e0b0      	b.n	8000842 <__aeabi_fadd+0x23a>
 80006e0:	2001      	movs	r0, #1
 80006e2:	4440      	add	r0, r8
 80006e4:	0143      	lsls	r3, r0, #5
 80006e6:	d543      	bpl.n	8000770 <__aeabi_fadd+0x168>
 80006e8:	3501      	adds	r5, #1
 80006ea:	2dff      	cmp	r5, #255	; 0xff
 80006ec:	d033      	beq.n	8000756 <__aeabi_fadd+0x14e>
 80006ee:	2301      	movs	r3, #1
 80006f0:	4a93      	ldr	r2, [pc, #588]	; (8000940 <__aeabi_fadd+0x338>)
 80006f2:	4003      	ands	r3, r0
 80006f4:	0840      	lsrs	r0, r0, #1
 80006f6:	4010      	ands	r0, r2
 80006f8:	4318      	orrs	r0, r3
 80006fa:	e7b9      	b.n	8000670 <__aeabi_fadd+0x68>
 80006fc:	2e00      	cmp	r6, #0
 80006fe:	d100      	bne.n	8000702 <__aeabi_fadd+0xfa>
 8000700:	e083      	b.n	800080a <__aeabi_fadd+0x202>
 8000702:	1e51      	subs	r1, r2, #1
 8000704:	2a01      	cmp	r2, #1
 8000706:	d100      	bne.n	800070a <__aeabi_fadd+0x102>
 8000708:	e0d8      	b.n	80008bc <__aeabi_fadd+0x2b4>
 800070a:	2aff      	cmp	r2, #255	; 0xff
 800070c:	d045      	beq.n	800079a <__aeabi_fadd+0x192>
 800070e:	000a      	movs	r2, r1
 8000710:	e798      	b.n	8000644 <__aeabi_fadd+0x3c>
 8000712:	27fe      	movs	r7, #254	; 0xfe
 8000714:	1c6a      	adds	r2, r5, #1
 8000716:	4217      	tst	r7, r2
 8000718:	d000      	beq.n	800071c <__aeabi_fadd+0x114>
 800071a:	e086      	b.n	800082a <__aeabi_fadd+0x222>
 800071c:	2d00      	cmp	r5, #0
 800071e:	d000      	beq.n	8000722 <__aeabi_fadd+0x11a>
 8000720:	e0b7      	b.n	8000892 <__aeabi_fadd+0x28a>
 8000722:	4643      	mov	r3, r8
 8000724:	2b00      	cmp	r3, #0
 8000726:	d100      	bne.n	800072a <__aeabi_fadd+0x122>
 8000728:	e0f3      	b.n	8000912 <__aeabi_fadd+0x30a>
 800072a:	2200      	movs	r2, #0
 800072c:	2e00      	cmp	r6, #0
 800072e:	d0b0      	beq.n	8000692 <__aeabi_fadd+0x8a>
 8000730:	1b98      	subs	r0, r3, r6
 8000732:	0143      	lsls	r3, r0, #5
 8000734:	d400      	bmi.n	8000738 <__aeabi_fadd+0x130>
 8000736:	e0fa      	b.n	800092e <__aeabi_fadd+0x326>
 8000738:	4643      	mov	r3, r8
 800073a:	000c      	movs	r4, r1
 800073c:	1af0      	subs	r0, r6, r3
 800073e:	e797      	b.n	8000670 <__aeabi_fadd+0x68>
 8000740:	2e00      	cmp	r6, #0
 8000742:	d100      	bne.n	8000746 <__aeabi_fadd+0x13e>
 8000744:	e0c8      	b.n	80008d8 <__aeabi_fadd+0x2d0>
 8000746:	1e4a      	subs	r2, r1, #1
 8000748:	2901      	cmp	r1, #1
 800074a:	d100      	bne.n	800074e <__aeabi_fadd+0x146>
 800074c:	e0ae      	b.n	80008ac <__aeabi_fadd+0x2a4>
 800074e:	29ff      	cmp	r1, #255	; 0xff
 8000750:	d023      	beq.n	800079a <__aeabi_fadd+0x192>
 8000752:	0011      	movs	r1, r2
 8000754:	e7c1      	b.n	80006da <__aeabi_fadd+0xd2>
 8000756:	2300      	movs	r3, #0
 8000758:	22ff      	movs	r2, #255	; 0xff
 800075a:	469c      	mov	ip, r3
 800075c:	e799      	b.n	8000692 <__aeabi_fadd+0x8a>
 800075e:	21fe      	movs	r1, #254	; 0xfe
 8000760:	1c6a      	adds	r2, r5, #1
 8000762:	4211      	tst	r1, r2
 8000764:	d077      	beq.n	8000856 <__aeabi_fadd+0x24e>
 8000766:	2aff      	cmp	r2, #255	; 0xff
 8000768:	d0f5      	beq.n	8000756 <__aeabi_fadd+0x14e>
 800076a:	0015      	movs	r5, r2
 800076c:	4446      	add	r6, r8
 800076e:	0870      	lsrs	r0, r6, #1
 8000770:	0743      	lsls	r3, r0, #29
 8000772:	d000      	beq.n	8000776 <__aeabi_fadd+0x16e>
 8000774:	e77e      	b.n	8000674 <__aeabi_fadd+0x6c>
 8000776:	08c3      	lsrs	r3, r0, #3
 8000778:	2dff      	cmp	r5, #255	; 0xff
 800077a:	d00e      	beq.n	800079a <__aeabi_fadd+0x192>
 800077c:	025b      	lsls	r3, r3, #9
 800077e:	0a5b      	lsrs	r3, r3, #9
 8000780:	469c      	mov	ip, r3
 8000782:	b2ea      	uxtb	r2, r5
 8000784:	e785      	b.n	8000692 <__aeabi_fadd+0x8a>
 8000786:	2e00      	cmp	r6, #0
 8000788:	d007      	beq.n	800079a <__aeabi_fadd+0x192>
 800078a:	2280      	movs	r2, #128	; 0x80
 800078c:	03d2      	lsls	r2, r2, #15
 800078e:	4213      	tst	r3, r2
 8000790:	d003      	beq.n	800079a <__aeabi_fadd+0x192>
 8000792:	4210      	tst	r0, r2
 8000794:	d101      	bne.n	800079a <__aeabi_fadd+0x192>
 8000796:	000c      	movs	r4, r1
 8000798:	0003      	movs	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d0db      	beq.n	8000756 <__aeabi_fadd+0x14e>
 800079e:	2080      	movs	r0, #128	; 0x80
 80007a0:	03c0      	lsls	r0, r0, #15
 80007a2:	4318      	orrs	r0, r3
 80007a4:	0240      	lsls	r0, r0, #9
 80007a6:	0a43      	lsrs	r3, r0, #9
 80007a8:	469c      	mov	ip, r3
 80007aa:	22ff      	movs	r2, #255	; 0xff
 80007ac:	e771      	b.n	8000692 <__aeabi_fadd+0x8a>
 80007ae:	2900      	cmp	r1, #0
 80007b0:	d0d5      	beq.n	800075e <__aeabi_fadd+0x156>
 80007b2:	1b7a      	subs	r2, r7, r5
 80007b4:	2d00      	cmp	r5, #0
 80007b6:	d160      	bne.n	800087a <__aeabi_fadd+0x272>
 80007b8:	4643      	mov	r3, r8
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d024      	beq.n	8000808 <__aeabi_fadd+0x200>
 80007be:	1e53      	subs	r3, r2, #1
 80007c0:	2a01      	cmp	r2, #1
 80007c2:	d073      	beq.n	80008ac <__aeabi_fadd+0x2a4>
 80007c4:	2aff      	cmp	r2, #255	; 0xff
 80007c6:	d0e7      	beq.n	8000798 <__aeabi_fadd+0x190>
 80007c8:	001a      	movs	r2, r3
 80007ca:	2a1b      	cmp	r2, #27
 80007cc:	dc00      	bgt.n	80007d0 <__aeabi_fadd+0x1c8>
 80007ce:	e085      	b.n	80008dc <__aeabi_fadd+0x2d4>
 80007d0:	2001      	movs	r0, #1
 80007d2:	003d      	movs	r5, r7
 80007d4:	1980      	adds	r0, r0, r6
 80007d6:	e785      	b.n	80006e4 <__aeabi_fadd+0xdc>
 80007d8:	2320      	movs	r3, #32
 80007da:	003a      	movs	r2, r7
 80007dc:	1b45      	subs	r5, r0, r5
 80007de:	0038      	movs	r0, r7
 80007e0:	3501      	adds	r5, #1
 80007e2:	40ea      	lsrs	r2, r5
 80007e4:	1b5d      	subs	r5, r3, r5
 80007e6:	40a8      	lsls	r0, r5
 80007e8:	1e43      	subs	r3, r0, #1
 80007ea:	4198      	sbcs	r0, r3
 80007ec:	2500      	movs	r5, #0
 80007ee:	4310      	orrs	r0, r2
 80007f0:	e73e      	b.n	8000670 <__aeabi_fadd+0x68>
 80007f2:	2320      	movs	r3, #32
 80007f4:	0030      	movs	r0, r6
 80007f6:	1a9b      	subs	r3, r3, r2
 80007f8:	0031      	movs	r1, r6
 80007fa:	4098      	lsls	r0, r3
 80007fc:	40d1      	lsrs	r1, r2
 80007fe:	1e43      	subs	r3, r0, #1
 8000800:	4198      	sbcs	r0, r3
 8000802:	4308      	orrs	r0, r1
 8000804:	e722      	b.n	800064c <__aeabi_fadd+0x44>
 8000806:	000c      	movs	r4, r1
 8000808:	0003      	movs	r3, r0
 800080a:	0015      	movs	r5, r2
 800080c:	e7b4      	b.n	8000778 <__aeabi_fadd+0x170>
 800080e:	2fff      	cmp	r7, #255	; 0xff
 8000810:	d0c1      	beq.n	8000796 <__aeabi_fadd+0x18e>
 8000812:	2380      	movs	r3, #128	; 0x80
 8000814:	4640      	mov	r0, r8
 8000816:	04db      	lsls	r3, r3, #19
 8000818:	4318      	orrs	r0, r3
 800081a:	4680      	mov	r8, r0
 800081c:	2a1b      	cmp	r2, #27
 800081e:	dd51      	ble.n	80008c4 <__aeabi_fadd+0x2bc>
 8000820:	2001      	movs	r0, #1
 8000822:	000c      	movs	r4, r1
 8000824:	003d      	movs	r5, r7
 8000826:	1a30      	subs	r0, r6, r0
 8000828:	e712      	b.n	8000650 <__aeabi_fadd+0x48>
 800082a:	4643      	mov	r3, r8
 800082c:	1b9f      	subs	r7, r3, r6
 800082e:	017b      	lsls	r3, r7, #5
 8000830:	d42b      	bmi.n	800088a <__aeabi_fadd+0x282>
 8000832:	2f00      	cmp	r7, #0
 8000834:	d000      	beq.n	8000838 <__aeabi_fadd+0x230>
 8000836:	e710      	b.n	800065a <__aeabi_fadd+0x52>
 8000838:	2300      	movs	r3, #0
 800083a:	2400      	movs	r4, #0
 800083c:	2200      	movs	r2, #0
 800083e:	469c      	mov	ip, r3
 8000840:	e727      	b.n	8000692 <__aeabi_fadd+0x8a>
 8000842:	2320      	movs	r3, #32
 8000844:	0032      	movs	r2, r6
 8000846:	0030      	movs	r0, r6
 8000848:	40ca      	lsrs	r2, r1
 800084a:	1a59      	subs	r1, r3, r1
 800084c:	4088      	lsls	r0, r1
 800084e:	1e43      	subs	r3, r0, #1
 8000850:	4198      	sbcs	r0, r3
 8000852:	4310      	orrs	r0, r2
 8000854:	e745      	b.n	80006e2 <__aeabi_fadd+0xda>
 8000856:	2d00      	cmp	r5, #0
 8000858:	d14a      	bne.n	80008f0 <__aeabi_fadd+0x2e8>
 800085a:	4643      	mov	r3, r8
 800085c:	2b00      	cmp	r3, #0
 800085e:	d063      	beq.n	8000928 <__aeabi_fadd+0x320>
 8000860:	2200      	movs	r2, #0
 8000862:	2e00      	cmp	r6, #0
 8000864:	d100      	bne.n	8000868 <__aeabi_fadd+0x260>
 8000866:	e714      	b.n	8000692 <__aeabi_fadd+0x8a>
 8000868:	0030      	movs	r0, r6
 800086a:	4440      	add	r0, r8
 800086c:	0143      	lsls	r3, r0, #5
 800086e:	d400      	bmi.n	8000872 <__aeabi_fadd+0x26a>
 8000870:	e77e      	b.n	8000770 <__aeabi_fadd+0x168>
 8000872:	4b32      	ldr	r3, [pc, #200]	; (800093c <__aeabi_fadd+0x334>)
 8000874:	3501      	adds	r5, #1
 8000876:	4018      	ands	r0, r3
 8000878:	e77a      	b.n	8000770 <__aeabi_fadd+0x168>
 800087a:	2fff      	cmp	r7, #255	; 0xff
 800087c:	d08c      	beq.n	8000798 <__aeabi_fadd+0x190>
 800087e:	2380      	movs	r3, #128	; 0x80
 8000880:	4641      	mov	r1, r8
 8000882:	04db      	lsls	r3, r3, #19
 8000884:	4319      	orrs	r1, r3
 8000886:	4688      	mov	r8, r1
 8000888:	e79f      	b.n	80007ca <__aeabi_fadd+0x1c2>
 800088a:	4643      	mov	r3, r8
 800088c:	000c      	movs	r4, r1
 800088e:	1af7      	subs	r7, r6, r3
 8000890:	e6e3      	b.n	800065a <__aeabi_fadd+0x52>
 8000892:	4642      	mov	r2, r8
 8000894:	2a00      	cmp	r2, #0
 8000896:	d000      	beq.n	800089a <__aeabi_fadd+0x292>
 8000898:	e775      	b.n	8000786 <__aeabi_fadd+0x17e>
 800089a:	2e00      	cmp	r6, #0
 800089c:	d000      	beq.n	80008a0 <__aeabi_fadd+0x298>
 800089e:	e77a      	b.n	8000796 <__aeabi_fadd+0x18e>
 80008a0:	2380      	movs	r3, #128	; 0x80
 80008a2:	03db      	lsls	r3, r3, #15
 80008a4:	2400      	movs	r4, #0
 80008a6:	469c      	mov	ip, r3
 80008a8:	22ff      	movs	r2, #255	; 0xff
 80008aa:	e6f2      	b.n	8000692 <__aeabi_fadd+0x8a>
 80008ac:	0030      	movs	r0, r6
 80008ae:	4440      	add	r0, r8
 80008b0:	2501      	movs	r5, #1
 80008b2:	0143      	lsls	r3, r0, #5
 80008b4:	d400      	bmi.n	80008b8 <__aeabi_fadd+0x2b0>
 80008b6:	e75b      	b.n	8000770 <__aeabi_fadd+0x168>
 80008b8:	2502      	movs	r5, #2
 80008ba:	e718      	b.n	80006ee <__aeabi_fadd+0xe6>
 80008bc:	4643      	mov	r3, r8
 80008be:	2501      	movs	r5, #1
 80008c0:	1b98      	subs	r0, r3, r6
 80008c2:	e6c5      	b.n	8000650 <__aeabi_fadd+0x48>
 80008c4:	2320      	movs	r3, #32
 80008c6:	4644      	mov	r4, r8
 80008c8:	4640      	mov	r0, r8
 80008ca:	40d4      	lsrs	r4, r2
 80008cc:	1a9a      	subs	r2, r3, r2
 80008ce:	4090      	lsls	r0, r2
 80008d0:	1e43      	subs	r3, r0, #1
 80008d2:	4198      	sbcs	r0, r3
 80008d4:	4320      	orrs	r0, r4
 80008d6:	e7a4      	b.n	8000822 <__aeabi_fadd+0x21a>
 80008d8:	000d      	movs	r5, r1
 80008da:	e74d      	b.n	8000778 <__aeabi_fadd+0x170>
 80008dc:	2320      	movs	r3, #32
 80008de:	4641      	mov	r1, r8
 80008e0:	4640      	mov	r0, r8
 80008e2:	40d1      	lsrs	r1, r2
 80008e4:	1a9a      	subs	r2, r3, r2
 80008e6:	4090      	lsls	r0, r2
 80008e8:	1e43      	subs	r3, r0, #1
 80008ea:	4198      	sbcs	r0, r3
 80008ec:	4308      	orrs	r0, r1
 80008ee:	e770      	b.n	80007d2 <__aeabi_fadd+0x1ca>
 80008f0:	4642      	mov	r2, r8
 80008f2:	2a00      	cmp	r2, #0
 80008f4:	d100      	bne.n	80008f8 <__aeabi_fadd+0x2f0>
 80008f6:	e74f      	b.n	8000798 <__aeabi_fadd+0x190>
 80008f8:	2e00      	cmp	r6, #0
 80008fa:	d100      	bne.n	80008fe <__aeabi_fadd+0x2f6>
 80008fc:	e74d      	b.n	800079a <__aeabi_fadd+0x192>
 80008fe:	2280      	movs	r2, #128	; 0x80
 8000900:	03d2      	lsls	r2, r2, #15
 8000902:	4213      	tst	r3, r2
 8000904:	d100      	bne.n	8000908 <__aeabi_fadd+0x300>
 8000906:	e748      	b.n	800079a <__aeabi_fadd+0x192>
 8000908:	4210      	tst	r0, r2
 800090a:	d000      	beq.n	800090e <__aeabi_fadd+0x306>
 800090c:	e745      	b.n	800079a <__aeabi_fadd+0x192>
 800090e:	0003      	movs	r3, r0
 8000910:	e743      	b.n	800079a <__aeabi_fadd+0x192>
 8000912:	2e00      	cmp	r6, #0
 8000914:	d090      	beq.n	8000838 <__aeabi_fadd+0x230>
 8000916:	000c      	movs	r4, r1
 8000918:	4684      	mov	ip, r0
 800091a:	2200      	movs	r2, #0
 800091c:	e6b9      	b.n	8000692 <__aeabi_fadd+0x8a>
 800091e:	4643      	mov	r3, r8
 8000920:	000c      	movs	r4, r1
 8000922:	1af0      	subs	r0, r6, r3
 8000924:	3501      	adds	r5, #1
 8000926:	e693      	b.n	8000650 <__aeabi_fadd+0x48>
 8000928:	4684      	mov	ip, r0
 800092a:	2200      	movs	r2, #0
 800092c:	e6b1      	b.n	8000692 <__aeabi_fadd+0x8a>
 800092e:	2800      	cmp	r0, #0
 8000930:	d000      	beq.n	8000934 <__aeabi_fadd+0x32c>
 8000932:	e71d      	b.n	8000770 <__aeabi_fadd+0x168>
 8000934:	2300      	movs	r3, #0
 8000936:	2400      	movs	r4, #0
 8000938:	469c      	mov	ip, r3
 800093a:	e6aa      	b.n	8000692 <__aeabi_fadd+0x8a>
 800093c:	fbffffff 	.word	0xfbffffff
 8000940:	7dffffff 	.word	0x7dffffff

08000944 <__aeabi_fdiv>:
 8000944:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000946:	464f      	mov	r7, r9
 8000948:	4646      	mov	r6, r8
 800094a:	46d6      	mov	lr, sl
 800094c:	0245      	lsls	r5, r0, #9
 800094e:	b5c0      	push	{r6, r7, lr}
 8000950:	0047      	lsls	r7, r0, #1
 8000952:	1c0c      	adds	r4, r1, #0
 8000954:	0a6d      	lsrs	r5, r5, #9
 8000956:	0e3f      	lsrs	r7, r7, #24
 8000958:	0fc6      	lsrs	r6, r0, #31
 800095a:	2f00      	cmp	r7, #0
 800095c:	d100      	bne.n	8000960 <__aeabi_fdiv+0x1c>
 800095e:	e070      	b.n	8000a42 <__aeabi_fdiv+0xfe>
 8000960:	2fff      	cmp	r7, #255	; 0xff
 8000962:	d100      	bne.n	8000966 <__aeabi_fdiv+0x22>
 8000964:	e075      	b.n	8000a52 <__aeabi_fdiv+0x10e>
 8000966:	00eb      	lsls	r3, r5, #3
 8000968:	2580      	movs	r5, #128	; 0x80
 800096a:	04ed      	lsls	r5, r5, #19
 800096c:	431d      	orrs	r5, r3
 800096e:	2300      	movs	r3, #0
 8000970:	4699      	mov	r9, r3
 8000972:	469a      	mov	sl, r3
 8000974:	3f7f      	subs	r7, #127	; 0x7f
 8000976:	0260      	lsls	r0, r4, #9
 8000978:	0a43      	lsrs	r3, r0, #9
 800097a:	4698      	mov	r8, r3
 800097c:	0063      	lsls	r3, r4, #1
 800097e:	0e1b      	lsrs	r3, r3, #24
 8000980:	0fe4      	lsrs	r4, r4, #31
 8000982:	2b00      	cmp	r3, #0
 8000984:	d04e      	beq.n	8000a24 <__aeabi_fdiv+0xe0>
 8000986:	2bff      	cmp	r3, #255	; 0xff
 8000988:	d046      	beq.n	8000a18 <__aeabi_fdiv+0xd4>
 800098a:	4642      	mov	r2, r8
 800098c:	00d0      	lsls	r0, r2, #3
 800098e:	2280      	movs	r2, #128	; 0x80
 8000990:	04d2      	lsls	r2, r2, #19
 8000992:	4302      	orrs	r2, r0
 8000994:	4690      	mov	r8, r2
 8000996:	2200      	movs	r2, #0
 8000998:	3b7f      	subs	r3, #127	; 0x7f
 800099a:	0031      	movs	r1, r6
 800099c:	1aff      	subs	r7, r7, r3
 800099e:	464b      	mov	r3, r9
 80009a0:	4061      	eors	r1, r4
 80009a2:	b2c9      	uxtb	r1, r1
 80009a4:	4313      	orrs	r3, r2
 80009a6:	2b0f      	cmp	r3, #15
 80009a8:	d900      	bls.n	80009ac <__aeabi_fdiv+0x68>
 80009aa:	e0b5      	b.n	8000b18 <__aeabi_fdiv+0x1d4>
 80009ac:	486e      	ldr	r0, [pc, #440]	; (8000b68 <__aeabi_fdiv+0x224>)
 80009ae:	009b      	lsls	r3, r3, #2
 80009b0:	58c3      	ldr	r3, [r0, r3]
 80009b2:	469f      	mov	pc, r3
 80009b4:	2300      	movs	r3, #0
 80009b6:	4698      	mov	r8, r3
 80009b8:	0026      	movs	r6, r4
 80009ba:	4645      	mov	r5, r8
 80009bc:	4692      	mov	sl, r2
 80009be:	4653      	mov	r3, sl
 80009c0:	2b02      	cmp	r3, #2
 80009c2:	d100      	bne.n	80009c6 <__aeabi_fdiv+0x82>
 80009c4:	e089      	b.n	8000ada <__aeabi_fdiv+0x196>
 80009c6:	2b03      	cmp	r3, #3
 80009c8:	d100      	bne.n	80009cc <__aeabi_fdiv+0x88>
 80009ca:	e09e      	b.n	8000b0a <__aeabi_fdiv+0x1c6>
 80009cc:	2b01      	cmp	r3, #1
 80009ce:	d018      	beq.n	8000a02 <__aeabi_fdiv+0xbe>
 80009d0:	003b      	movs	r3, r7
 80009d2:	337f      	adds	r3, #127	; 0x7f
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	dd69      	ble.n	8000aac <__aeabi_fdiv+0x168>
 80009d8:	076a      	lsls	r2, r5, #29
 80009da:	d004      	beq.n	80009e6 <__aeabi_fdiv+0xa2>
 80009dc:	220f      	movs	r2, #15
 80009de:	402a      	ands	r2, r5
 80009e0:	2a04      	cmp	r2, #4
 80009e2:	d000      	beq.n	80009e6 <__aeabi_fdiv+0xa2>
 80009e4:	3504      	adds	r5, #4
 80009e6:	012a      	lsls	r2, r5, #4
 80009e8:	d503      	bpl.n	80009f2 <__aeabi_fdiv+0xae>
 80009ea:	4b60      	ldr	r3, [pc, #384]	; (8000b6c <__aeabi_fdiv+0x228>)
 80009ec:	401d      	ands	r5, r3
 80009ee:	003b      	movs	r3, r7
 80009f0:	3380      	adds	r3, #128	; 0x80
 80009f2:	2bfe      	cmp	r3, #254	; 0xfe
 80009f4:	dd00      	ble.n	80009f8 <__aeabi_fdiv+0xb4>
 80009f6:	e070      	b.n	8000ada <__aeabi_fdiv+0x196>
 80009f8:	01ad      	lsls	r5, r5, #6
 80009fa:	0a6d      	lsrs	r5, r5, #9
 80009fc:	b2d8      	uxtb	r0, r3
 80009fe:	e002      	b.n	8000a06 <__aeabi_fdiv+0xc2>
 8000a00:	000e      	movs	r6, r1
 8000a02:	2000      	movs	r0, #0
 8000a04:	2500      	movs	r5, #0
 8000a06:	05c0      	lsls	r0, r0, #23
 8000a08:	4328      	orrs	r0, r5
 8000a0a:	07f6      	lsls	r6, r6, #31
 8000a0c:	4330      	orrs	r0, r6
 8000a0e:	bce0      	pop	{r5, r6, r7}
 8000a10:	46ba      	mov	sl, r7
 8000a12:	46b1      	mov	r9, r6
 8000a14:	46a8      	mov	r8, r5
 8000a16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a18:	4643      	mov	r3, r8
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d13f      	bne.n	8000a9e <__aeabi_fdiv+0x15a>
 8000a1e:	2202      	movs	r2, #2
 8000a20:	3fff      	subs	r7, #255	; 0xff
 8000a22:	e003      	b.n	8000a2c <__aeabi_fdiv+0xe8>
 8000a24:	4643      	mov	r3, r8
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d12d      	bne.n	8000a86 <__aeabi_fdiv+0x142>
 8000a2a:	2201      	movs	r2, #1
 8000a2c:	0031      	movs	r1, r6
 8000a2e:	464b      	mov	r3, r9
 8000a30:	4061      	eors	r1, r4
 8000a32:	b2c9      	uxtb	r1, r1
 8000a34:	4313      	orrs	r3, r2
 8000a36:	2b0f      	cmp	r3, #15
 8000a38:	d834      	bhi.n	8000aa4 <__aeabi_fdiv+0x160>
 8000a3a:	484d      	ldr	r0, [pc, #308]	; (8000b70 <__aeabi_fdiv+0x22c>)
 8000a3c:	009b      	lsls	r3, r3, #2
 8000a3e:	58c3      	ldr	r3, [r0, r3]
 8000a40:	469f      	mov	pc, r3
 8000a42:	2d00      	cmp	r5, #0
 8000a44:	d113      	bne.n	8000a6e <__aeabi_fdiv+0x12a>
 8000a46:	2304      	movs	r3, #4
 8000a48:	4699      	mov	r9, r3
 8000a4a:	3b03      	subs	r3, #3
 8000a4c:	2700      	movs	r7, #0
 8000a4e:	469a      	mov	sl, r3
 8000a50:	e791      	b.n	8000976 <__aeabi_fdiv+0x32>
 8000a52:	2d00      	cmp	r5, #0
 8000a54:	d105      	bne.n	8000a62 <__aeabi_fdiv+0x11e>
 8000a56:	2308      	movs	r3, #8
 8000a58:	4699      	mov	r9, r3
 8000a5a:	3b06      	subs	r3, #6
 8000a5c:	27ff      	movs	r7, #255	; 0xff
 8000a5e:	469a      	mov	sl, r3
 8000a60:	e789      	b.n	8000976 <__aeabi_fdiv+0x32>
 8000a62:	230c      	movs	r3, #12
 8000a64:	4699      	mov	r9, r3
 8000a66:	3b09      	subs	r3, #9
 8000a68:	27ff      	movs	r7, #255	; 0xff
 8000a6a:	469a      	mov	sl, r3
 8000a6c:	e783      	b.n	8000976 <__aeabi_fdiv+0x32>
 8000a6e:	0028      	movs	r0, r5
 8000a70:	f002 fa02 	bl	8002e78 <__clzsi2>
 8000a74:	2776      	movs	r7, #118	; 0x76
 8000a76:	1f43      	subs	r3, r0, #5
 8000a78:	409d      	lsls	r5, r3
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	427f      	negs	r7, r7
 8000a7e:	4699      	mov	r9, r3
 8000a80:	469a      	mov	sl, r3
 8000a82:	1a3f      	subs	r7, r7, r0
 8000a84:	e777      	b.n	8000976 <__aeabi_fdiv+0x32>
 8000a86:	4640      	mov	r0, r8
 8000a88:	f002 f9f6 	bl	8002e78 <__clzsi2>
 8000a8c:	4642      	mov	r2, r8
 8000a8e:	1f43      	subs	r3, r0, #5
 8000a90:	409a      	lsls	r2, r3
 8000a92:	2376      	movs	r3, #118	; 0x76
 8000a94:	425b      	negs	r3, r3
 8000a96:	4690      	mov	r8, r2
 8000a98:	1a1b      	subs	r3, r3, r0
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	e77d      	b.n	800099a <__aeabi_fdiv+0x56>
 8000a9e:	23ff      	movs	r3, #255	; 0xff
 8000aa0:	2203      	movs	r2, #3
 8000aa2:	e77a      	b.n	800099a <__aeabi_fdiv+0x56>
 8000aa4:	000e      	movs	r6, r1
 8000aa6:	20ff      	movs	r0, #255	; 0xff
 8000aa8:	2500      	movs	r5, #0
 8000aaa:	e7ac      	b.n	8000a06 <__aeabi_fdiv+0xc2>
 8000aac:	2001      	movs	r0, #1
 8000aae:	1ac0      	subs	r0, r0, r3
 8000ab0:	281b      	cmp	r0, #27
 8000ab2:	dca6      	bgt.n	8000a02 <__aeabi_fdiv+0xbe>
 8000ab4:	379e      	adds	r7, #158	; 0x9e
 8000ab6:	002a      	movs	r2, r5
 8000ab8:	40bd      	lsls	r5, r7
 8000aba:	40c2      	lsrs	r2, r0
 8000abc:	1e6b      	subs	r3, r5, #1
 8000abe:	419d      	sbcs	r5, r3
 8000ac0:	4315      	orrs	r5, r2
 8000ac2:	076b      	lsls	r3, r5, #29
 8000ac4:	d004      	beq.n	8000ad0 <__aeabi_fdiv+0x18c>
 8000ac6:	230f      	movs	r3, #15
 8000ac8:	402b      	ands	r3, r5
 8000aca:	2b04      	cmp	r3, #4
 8000acc:	d000      	beq.n	8000ad0 <__aeabi_fdiv+0x18c>
 8000ace:	3504      	adds	r5, #4
 8000ad0:	016b      	lsls	r3, r5, #5
 8000ad2:	d544      	bpl.n	8000b5e <__aeabi_fdiv+0x21a>
 8000ad4:	2001      	movs	r0, #1
 8000ad6:	2500      	movs	r5, #0
 8000ad8:	e795      	b.n	8000a06 <__aeabi_fdiv+0xc2>
 8000ada:	20ff      	movs	r0, #255	; 0xff
 8000adc:	2500      	movs	r5, #0
 8000ade:	e792      	b.n	8000a06 <__aeabi_fdiv+0xc2>
 8000ae0:	2580      	movs	r5, #128	; 0x80
 8000ae2:	2600      	movs	r6, #0
 8000ae4:	20ff      	movs	r0, #255	; 0xff
 8000ae6:	03ed      	lsls	r5, r5, #15
 8000ae8:	e78d      	b.n	8000a06 <__aeabi_fdiv+0xc2>
 8000aea:	2300      	movs	r3, #0
 8000aec:	4698      	mov	r8, r3
 8000aee:	2080      	movs	r0, #128	; 0x80
 8000af0:	03c0      	lsls	r0, r0, #15
 8000af2:	4205      	tst	r5, r0
 8000af4:	d009      	beq.n	8000b0a <__aeabi_fdiv+0x1c6>
 8000af6:	4643      	mov	r3, r8
 8000af8:	4203      	tst	r3, r0
 8000afa:	d106      	bne.n	8000b0a <__aeabi_fdiv+0x1c6>
 8000afc:	4645      	mov	r5, r8
 8000afe:	4305      	orrs	r5, r0
 8000b00:	026d      	lsls	r5, r5, #9
 8000b02:	0026      	movs	r6, r4
 8000b04:	20ff      	movs	r0, #255	; 0xff
 8000b06:	0a6d      	lsrs	r5, r5, #9
 8000b08:	e77d      	b.n	8000a06 <__aeabi_fdiv+0xc2>
 8000b0a:	2080      	movs	r0, #128	; 0x80
 8000b0c:	03c0      	lsls	r0, r0, #15
 8000b0e:	4305      	orrs	r5, r0
 8000b10:	026d      	lsls	r5, r5, #9
 8000b12:	20ff      	movs	r0, #255	; 0xff
 8000b14:	0a6d      	lsrs	r5, r5, #9
 8000b16:	e776      	b.n	8000a06 <__aeabi_fdiv+0xc2>
 8000b18:	4642      	mov	r2, r8
 8000b1a:	016b      	lsls	r3, r5, #5
 8000b1c:	0150      	lsls	r0, r2, #5
 8000b1e:	4283      	cmp	r3, r0
 8000b20:	d219      	bcs.n	8000b56 <__aeabi_fdiv+0x212>
 8000b22:	221b      	movs	r2, #27
 8000b24:	2500      	movs	r5, #0
 8000b26:	3f01      	subs	r7, #1
 8000b28:	2601      	movs	r6, #1
 8000b2a:	001c      	movs	r4, r3
 8000b2c:	006d      	lsls	r5, r5, #1
 8000b2e:	005b      	lsls	r3, r3, #1
 8000b30:	2c00      	cmp	r4, #0
 8000b32:	db01      	blt.n	8000b38 <__aeabi_fdiv+0x1f4>
 8000b34:	4298      	cmp	r0, r3
 8000b36:	d801      	bhi.n	8000b3c <__aeabi_fdiv+0x1f8>
 8000b38:	1a1b      	subs	r3, r3, r0
 8000b3a:	4335      	orrs	r5, r6
 8000b3c:	3a01      	subs	r2, #1
 8000b3e:	2a00      	cmp	r2, #0
 8000b40:	d1f3      	bne.n	8000b2a <__aeabi_fdiv+0x1e6>
 8000b42:	1e5a      	subs	r2, r3, #1
 8000b44:	4193      	sbcs	r3, r2
 8000b46:	431d      	orrs	r5, r3
 8000b48:	003b      	movs	r3, r7
 8000b4a:	337f      	adds	r3, #127	; 0x7f
 8000b4c:	000e      	movs	r6, r1
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	dd00      	ble.n	8000b54 <__aeabi_fdiv+0x210>
 8000b52:	e741      	b.n	80009d8 <__aeabi_fdiv+0x94>
 8000b54:	e7aa      	b.n	8000aac <__aeabi_fdiv+0x168>
 8000b56:	221a      	movs	r2, #26
 8000b58:	2501      	movs	r5, #1
 8000b5a:	1a1b      	subs	r3, r3, r0
 8000b5c:	e7e4      	b.n	8000b28 <__aeabi_fdiv+0x1e4>
 8000b5e:	01ad      	lsls	r5, r5, #6
 8000b60:	2000      	movs	r0, #0
 8000b62:	0a6d      	lsrs	r5, r5, #9
 8000b64:	e74f      	b.n	8000a06 <__aeabi_fdiv+0xc2>
 8000b66:	46c0      	nop			; (mov r8, r8)
 8000b68:	0800bda8 	.word	0x0800bda8
 8000b6c:	f7ffffff 	.word	0xf7ffffff
 8000b70:	0800bde8 	.word	0x0800bde8

08000b74 <__eqsf2>:
 8000b74:	b570      	push	{r4, r5, r6, lr}
 8000b76:	0042      	lsls	r2, r0, #1
 8000b78:	0245      	lsls	r5, r0, #9
 8000b7a:	024e      	lsls	r6, r1, #9
 8000b7c:	004c      	lsls	r4, r1, #1
 8000b7e:	0fc3      	lsrs	r3, r0, #31
 8000b80:	0a6d      	lsrs	r5, r5, #9
 8000b82:	2001      	movs	r0, #1
 8000b84:	0e12      	lsrs	r2, r2, #24
 8000b86:	0a76      	lsrs	r6, r6, #9
 8000b88:	0e24      	lsrs	r4, r4, #24
 8000b8a:	0fc9      	lsrs	r1, r1, #31
 8000b8c:	2aff      	cmp	r2, #255	; 0xff
 8000b8e:	d006      	beq.n	8000b9e <__eqsf2+0x2a>
 8000b90:	2cff      	cmp	r4, #255	; 0xff
 8000b92:	d003      	beq.n	8000b9c <__eqsf2+0x28>
 8000b94:	42a2      	cmp	r2, r4
 8000b96:	d101      	bne.n	8000b9c <__eqsf2+0x28>
 8000b98:	42b5      	cmp	r5, r6
 8000b9a:	d006      	beq.n	8000baa <__eqsf2+0x36>
 8000b9c:	bd70      	pop	{r4, r5, r6, pc}
 8000b9e:	2d00      	cmp	r5, #0
 8000ba0:	d1fc      	bne.n	8000b9c <__eqsf2+0x28>
 8000ba2:	2cff      	cmp	r4, #255	; 0xff
 8000ba4:	d1fa      	bne.n	8000b9c <__eqsf2+0x28>
 8000ba6:	2e00      	cmp	r6, #0
 8000ba8:	d1f8      	bne.n	8000b9c <__eqsf2+0x28>
 8000baa:	428b      	cmp	r3, r1
 8000bac:	d006      	beq.n	8000bbc <__eqsf2+0x48>
 8000bae:	2001      	movs	r0, #1
 8000bb0:	2a00      	cmp	r2, #0
 8000bb2:	d1f3      	bne.n	8000b9c <__eqsf2+0x28>
 8000bb4:	0028      	movs	r0, r5
 8000bb6:	1e43      	subs	r3, r0, #1
 8000bb8:	4198      	sbcs	r0, r3
 8000bba:	e7ef      	b.n	8000b9c <__eqsf2+0x28>
 8000bbc:	2000      	movs	r0, #0
 8000bbe:	e7ed      	b.n	8000b9c <__eqsf2+0x28>

08000bc0 <__gesf2>:
 8000bc0:	b570      	push	{r4, r5, r6, lr}
 8000bc2:	0042      	lsls	r2, r0, #1
 8000bc4:	0245      	lsls	r5, r0, #9
 8000bc6:	024e      	lsls	r6, r1, #9
 8000bc8:	004c      	lsls	r4, r1, #1
 8000bca:	0fc3      	lsrs	r3, r0, #31
 8000bcc:	0a6d      	lsrs	r5, r5, #9
 8000bce:	0e12      	lsrs	r2, r2, #24
 8000bd0:	0a76      	lsrs	r6, r6, #9
 8000bd2:	0e24      	lsrs	r4, r4, #24
 8000bd4:	0fc8      	lsrs	r0, r1, #31
 8000bd6:	2aff      	cmp	r2, #255	; 0xff
 8000bd8:	d01b      	beq.n	8000c12 <__gesf2+0x52>
 8000bda:	2cff      	cmp	r4, #255	; 0xff
 8000bdc:	d00e      	beq.n	8000bfc <__gesf2+0x3c>
 8000bde:	2a00      	cmp	r2, #0
 8000be0:	d11b      	bne.n	8000c1a <__gesf2+0x5a>
 8000be2:	2c00      	cmp	r4, #0
 8000be4:	d101      	bne.n	8000bea <__gesf2+0x2a>
 8000be6:	2e00      	cmp	r6, #0
 8000be8:	d01c      	beq.n	8000c24 <__gesf2+0x64>
 8000bea:	2d00      	cmp	r5, #0
 8000bec:	d00c      	beq.n	8000c08 <__gesf2+0x48>
 8000bee:	4283      	cmp	r3, r0
 8000bf0:	d01c      	beq.n	8000c2c <__gesf2+0x6c>
 8000bf2:	2102      	movs	r1, #2
 8000bf4:	1e58      	subs	r0, r3, #1
 8000bf6:	4008      	ands	r0, r1
 8000bf8:	3801      	subs	r0, #1
 8000bfa:	bd70      	pop	{r4, r5, r6, pc}
 8000bfc:	2e00      	cmp	r6, #0
 8000bfe:	d122      	bne.n	8000c46 <__gesf2+0x86>
 8000c00:	2a00      	cmp	r2, #0
 8000c02:	d1f4      	bne.n	8000bee <__gesf2+0x2e>
 8000c04:	2d00      	cmp	r5, #0
 8000c06:	d1f2      	bne.n	8000bee <__gesf2+0x2e>
 8000c08:	2800      	cmp	r0, #0
 8000c0a:	d1f6      	bne.n	8000bfa <__gesf2+0x3a>
 8000c0c:	2001      	movs	r0, #1
 8000c0e:	4240      	negs	r0, r0
 8000c10:	e7f3      	b.n	8000bfa <__gesf2+0x3a>
 8000c12:	2d00      	cmp	r5, #0
 8000c14:	d117      	bne.n	8000c46 <__gesf2+0x86>
 8000c16:	2cff      	cmp	r4, #255	; 0xff
 8000c18:	d0f0      	beq.n	8000bfc <__gesf2+0x3c>
 8000c1a:	2c00      	cmp	r4, #0
 8000c1c:	d1e7      	bne.n	8000bee <__gesf2+0x2e>
 8000c1e:	2e00      	cmp	r6, #0
 8000c20:	d1e5      	bne.n	8000bee <__gesf2+0x2e>
 8000c22:	e7e6      	b.n	8000bf2 <__gesf2+0x32>
 8000c24:	2000      	movs	r0, #0
 8000c26:	2d00      	cmp	r5, #0
 8000c28:	d0e7      	beq.n	8000bfa <__gesf2+0x3a>
 8000c2a:	e7e2      	b.n	8000bf2 <__gesf2+0x32>
 8000c2c:	42a2      	cmp	r2, r4
 8000c2e:	dc05      	bgt.n	8000c3c <__gesf2+0x7c>
 8000c30:	dbea      	blt.n	8000c08 <__gesf2+0x48>
 8000c32:	42b5      	cmp	r5, r6
 8000c34:	d802      	bhi.n	8000c3c <__gesf2+0x7c>
 8000c36:	d3e7      	bcc.n	8000c08 <__gesf2+0x48>
 8000c38:	2000      	movs	r0, #0
 8000c3a:	e7de      	b.n	8000bfa <__gesf2+0x3a>
 8000c3c:	4243      	negs	r3, r0
 8000c3e:	4158      	adcs	r0, r3
 8000c40:	0040      	lsls	r0, r0, #1
 8000c42:	3801      	subs	r0, #1
 8000c44:	e7d9      	b.n	8000bfa <__gesf2+0x3a>
 8000c46:	2002      	movs	r0, #2
 8000c48:	4240      	negs	r0, r0
 8000c4a:	e7d6      	b.n	8000bfa <__gesf2+0x3a>

08000c4c <__lesf2>:
 8000c4c:	b570      	push	{r4, r5, r6, lr}
 8000c4e:	0042      	lsls	r2, r0, #1
 8000c50:	0245      	lsls	r5, r0, #9
 8000c52:	024e      	lsls	r6, r1, #9
 8000c54:	004c      	lsls	r4, r1, #1
 8000c56:	0fc3      	lsrs	r3, r0, #31
 8000c58:	0a6d      	lsrs	r5, r5, #9
 8000c5a:	0e12      	lsrs	r2, r2, #24
 8000c5c:	0a76      	lsrs	r6, r6, #9
 8000c5e:	0e24      	lsrs	r4, r4, #24
 8000c60:	0fc8      	lsrs	r0, r1, #31
 8000c62:	2aff      	cmp	r2, #255	; 0xff
 8000c64:	d00b      	beq.n	8000c7e <__lesf2+0x32>
 8000c66:	2cff      	cmp	r4, #255	; 0xff
 8000c68:	d00d      	beq.n	8000c86 <__lesf2+0x3a>
 8000c6a:	2a00      	cmp	r2, #0
 8000c6c:	d11f      	bne.n	8000cae <__lesf2+0x62>
 8000c6e:	2c00      	cmp	r4, #0
 8000c70:	d116      	bne.n	8000ca0 <__lesf2+0x54>
 8000c72:	2e00      	cmp	r6, #0
 8000c74:	d114      	bne.n	8000ca0 <__lesf2+0x54>
 8000c76:	2000      	movs	r0, #0
 8000c78:	2d00      	cmp	r5, #0
 8000c7a:	d010      	beq.n	8000c9e <__lesf2+0x52>
 8000c7c:	e009      	b.n	8000c92 <__lesf2+0x46>
 8000c7e:	2d00      	cmp	r5, #0
 8000c80:	d10c      	bne.n	8000c9c <__lesf2+0x50>
 8000c82:	2cff      	cmp	r4, #255	; 0xff
 8000c84:	d113      	bne.n	8000cae <__lesf2+0x62>
 8000c86:	2e00      	cmp	r6, #0
 8000c88:	d108      	bne.n	8000c9c <__lesf2+0x50>
 8000c8a:	2a00      	cmp	r2, #0
 8000c8c:	d008      	beq.n	8000ca0 <__lesf2+0x54>
 8000c8e:	4283      	cmp	r3, r0
 8000c90:	d012      	beq.n	8000cb8 <__lesf2+0x6c>
 8000c92:	2102      	movs	r1, #2
 8000c94:	1e58      	subs	r0, r3, #1
 8000c96:	4008      	ands	r0, r1
 8000c98:	3801      	subs	r0, #1
 8000c9a:	e000      	b.n	8000c9e <__lesf2+0x52>
 8000c9c:	2002      	movs	r0, #2
 8000c9e:	bd70      	pop	{r4, r5, r6, pc}
 8000ca0:	2d00      	cmp	r5, #0
 8000ca2:	d1f4      	bne.n	8000c8e <__lesf2+0x42>
 8000ca4:	2800      	cmp	r0, #0
 8000ca6:	d1fa      	bne.n	8000c9e <__lesf2+0x52>
 8000ca8:	2001      	movs	r0, #1
 8000caa:	4240      	negs	r0, r0
 8000cac:	e7f7      	b.n	8000c9e <__lesf2+0x52>
 8000cae:	2c00      	cmp	r4, #0
 8000cb0:	d1ed      	bne.n	8000c8e <__lesf2+0x42>
 8000cb2:	2e00      	cmp	r6, #0
 8000cb4:	d1eb      	bne.n	8000c8e <__lesf2+0x42>
 8000cb6:	e7ec      	b.n	8000c92 <__lesf2+0x46>
 8000cb8:	42a2      	cmp	r2, r4
 8000cba:	dc05      	bgt.n	8000cc8 <__lesf2+0x7c>
 8000cbc:	dbf2      	blt.n	8000ca4 <__lesf2+0x58>
 8000cbe:	42b5      	cmp	r5, r6
 8000cc0:	d802      	bhi.n	8000cc8 <__lesf2+0x7c>
 8000cc2:	d3ef      	bcc.n	8000ca4 <__lesf2+0x58>
 8000cc4:	2000      	movs	r0, #0
 8000cc6:	e7ea      	b.n	8000c9e <__lesf2+0x52>
 8000cc8:	4243      	negs	r3, r0
 8000cca:	4158      	adcs	r0, r3
 8000ccc:	0040      	lsls	r0, r0, #1
 8000cce:	3801      	subs	r0, #1
 8000cd0:	e7e5      	b.n	8000c9e <__lesf2+0x52>
 8000cd2:	46c0      	nop			; (mov r8, r8)

08000cd4 <__aeabi_fsub>:
 8000cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cd6:	46ce      	mov	lr, r9
 8000cd8:	4647      	mov	r7, r8
 8000cda:	0243      	lsls	r3, r0, #9
 8000cdc:	0a5b      	lsrs	r3, r3, #9
 8000cde:	024e      	lsls	r6, r1, #9
 8000ce0:	00da      	lsls	r2, r3, #3
 8000ce2:	4694      	mov	ip, r2
 8000ce4:	0a72      	lsrs	r2, r6, #9
 8000ce6:	4691      	mov	r9, r2
 8000ce8:	0045      	lsls	r5, r0, #1
 8000cea:	004a      	lsls	r2, r1, #1
 8000cec:	b580      	push	{r7, lr}
 8000cee:	0e2d      	lsrs	r5, r5, #24
 8000cf0:	001f      	movs	r7, r3
 8000cf2:	0fc4      	lsrs	r4, r0, #31
 8000cf4:	0e12      	lsrs	r2, r2, #24
 8000cf6:	0fc9      	lsrs	r1, r1, #31
 8000cf8:	09b6      	lsrs	r6, r6, #6
 8000cfa:	2aff      	cmp	r2, #255	; 0xff
 8000cfc:	d05b      	beq.n	8000db6 <__aeabi_fsub+0xe2>
 8000cfe:	2001      	movs	r0, #1
 8000d00:	4041      	eors	r1, r0
 8000d02:	428c      	cmp	r4, r1
 8000d04:	d039      	beq.n	8000d7a <__aeabi_fsub+0xa6>
 8000d06:	1aa8      	subs	r0, r5, r2
 8000d08:	2800      	cmp	r0, #0
 8000d0a:	dd5a      	ble.n	8000dc2 <__aeabi_fsub+0xee>
 8000d0c:	2a00      	cmp	r2, #0
 8000d0e:	d06a      	beq.n	8000de6 <__aeabi_fsub+0x112>
 8000d10:	2dff      	cmp	r5, #255	; 0xff
 8000d12:	d100      	bne.n	8000d16 <__aeabi_fsub+0x42>
 8000d14:	e0d9      	b.n	8000eca <__aeabi_fsub+0x1f6>
 8000d16:	2280      	movs	r2, #128	; 0x80
 8000d18:	04d2      	lsls	r2, r2, #19
 8000d1a:	4316      	orrs	r6, r2
 8000d1c:	281b      	cmp	r0, #27
 8000d1e:	dc00      	bgt.n	8000d22 <__aeabi_fsub+0x4e>
 8000d20:	e0e9      	b.n	8000ef6 <__aeabi_fsub+0x222>
 8000d22:	2001      	movs	r0, #1
 8000d24:	4663      	mov	r3, ip
 8000d26:	1a18      	subs	r0, r3, r0
 8000d28:	0143      	lsls	r3, r0, #5
 8000d2a:	d400      	bmi.n	8000d2e <__aeabi_fsub+0x5a>
 8000d2c:	e0b4      	b.n	8000e98 <__aeabi_fsub+0x1c4>
 8000d2e:	0180      	lsls	r0, r0, #6
 8000d30:	0987      	lsrs	r7, r0, #6
 8000d32:	0038      	movs	r0, r7
 8000d34:	f002 f8a0 	bl	8002e78 <__clzsi2>
 8000d38:	3805      	subs	r0, #5
 8000d3a:	4087      	lsls	r7, r0
 8000d3c:	4285      	cmp	r5, r0
 8000d3e:	dc00      	bgt.n	8000d42 <__aeabi_fsub+0x6e>
 8000d40:	e0cc      	b.n	8000edc <__aeabi_fsub+0x208>
 8000d42:	1a2d      	subs	r5, r5, r0
 8000d44:	48b5      	ldr	r0, [pc, #724]	; (800101c <__aeabi_fsub+0x348>)
 8000d46:	4038      	ands	r0, r7
 8000d48:	0743      	lsls	r3, r0, #29
 8000d4a:	d004      	beq.n	8000d56 <__aeabi_fsub+0x82>
 8000d4c:	230f      	movs	r3, #15
 8000d4e:	4003      	ands	r3, r0
 8000d50:	2b04      	cmp	r3, #4
 8000d52:	d000      	beq.n	8000d56 <__aeabi_fsub+0x82>
 8000d54:	3004      	adds	r0, #4
 8000d56:	0143      	lsls	r3, r0, #5
 8000d58:	d400      	bmi.n	8000d5c <__aeabi_fsub+0x88>
 8000d5a:	e0a0      	b.n	8000e9e <__aeabi_fsub+0x1ca>
 8000d5c:	1c6a      	adds	r2, r5, #1
 8000d5e:	2dfe      	cmp	r5, #254	; 0xfe
 8000d60:	d100      	bne.n	8000d64 <__aeabi_fsub+0x90>
 8000d62:	e08d      	b.n	8000e80 <__aeabi_fsub+0x1ac>
 8000d64:	0180      	lsls	r0, r0, #6
 8000d66:	0a47      	lsrs	r7, r0, #9
 8000d68:	b2d2      	uxtb	r2, r2
 8000d6a:	05d0      	lsls	r0, r2, #23
 8000d6c:	4338      	orrs	r0, r7
 8000d6e:	07e4      	lsls	r4, r4, #31
 8000d70:	4320      	orrs	r0, r4
 8000d72:	bcc0      	pop	{r6, r7}
 8000d74:	46b9      	mov	r9, r7
 8000d76:	46b0      	mov	r8, r6
 8000d78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000d7a:	1aa8      	subs	r0, r5, r2
 8000d7c:	4680      	mov	r8, r0
 8000d7e:	2800      	cmp	r0, #0
 8000d80:	dd45      	ble.n	8000e0e <__aeabi_fsub+0x13a>
 8000d82:	2a00      	cmp	r2, #0
 8000d84:	d070      	beq.n	8000e68 <__aeabi_fsub+0x194>
 8000d86:	2dff      	cmp	r5, #255	; 0xff
 8000d88:	d100      	bne.n	8000d8c <__aeabi_fsub+0xb8>
 8000d8a:	e09e      	b.n	8000eca <__aeabi_fsub+0x1f6>
 8000d8c:	2380      	movs	r3, #128	; 0x80
 8000d8e:	04db      	lsls	r3, r3, #19
 8000d90:	431e      	orrs	r6, r3
 8000d92:	4643      	mov	r3, r8
 8000d94:	2b1b      	cmp	r3, #27
 8000d96:	dc00      	bgt.n	8000d9a <__aeabi_fsub+0xc6>
 8000d98:	e0d2      	b.n	8000f40 <__aeabi_fsub+0x26c>
 8000d9a:	2001      	movs	r0, #1
 8000d9c:	4460      	add	r0, ip
 8000d9e:	0143      	lsls	r3, r0, #5
 8000da0:	d57a      	bpl.n	8000e98 <__aeabi_fsub+0x1c4>
 8000da2:	3501      	adds	r5, #1
 8000da4:	2dff      	cmp	r5, #255	; 0xff
 8000da6:	d06b      	beq.n	8000e80 <__aeabi_fsub+0x1ac>
 8000da8:	2301      	movs	r3, #1
 8000daa:	4a9d      	ldr	r2, [pc, #628]	; (8001020 <__aeabi_fsub+0x34c>)
 8000dac:	4003      	ands	r3, r0
 8000dae:	0840      	lsrs	r0, r0, #1
 8000db0:	4010      	ands	r0, r2
 8000db2:	4318      	orrs	r0, r3
 8000db4:	e7c8      	b.n	8000d48 <__aeabi_fsub+0x74>
 8000db6:	2e00      	cmp	r6, #0
 8000db8:	d020      	beq.n	8000dfc <__aeabi_fsub+0x128>
 8000dba:	428c      	cmp	r4, r1
 8000dbc:	d023      	beq.n	8000e06 <__aeabi_fsub+0x132>
 8000dbe:	0028      	movs	r0, r5
 8000dc0:	38ff      	subs	r0, #255	; 0xff
 8000dc2:	2800      	cmp	r0, #0
 8000dc4:	d039      	beq.n	8000e3a <__aeabi_fsub+0x166>
 8000dc6:	1b57      	subs	r7, r2, r5
 8000dc8:	2d00      	cmp	r5, #0
 8000dca:	d000      	beq.n	8000dce <__aeabi_fsub+0xfa>
 8000dcc:	e09d      	b.n	8000f0a <__aeabi_fsub+0x236>
 8000dce:	4663      	mov	r3, ip
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d100      	bne.n	8000dd6 <__aeabi_fsub+0x102>
 8000dd4:	e0db      	b.n	8000f8e <__aeabi_fsub+0x2ba>
 8000dd6:	1e7b      	subs	r3, r7, #1
 8000dd8:	2f01      	cmp	r7, #1
 8000dda:	d100      	bne.n	8000dde <__aeabi_fsub+0x10a>
 8000ddc:	e10d      	b.n	8000ffa <__aeabi_fsub+0x326>
 8000dde:	2fff      	cmp	r7, #255	; 0xff
 8000de0:	d071      	beq.n	8000ec6 <__aeabi_fsub+0x1f2>
 8000de2:	001f      	movs	r7, r3
 8000de4:	e098      	b.n	8000f18 <__aeabi_fsub+0x244>
 8000de6:	2e00      	cmp	r6, #0
 8000de8:	d100      	bne.n	8000dec <__aeabi_fsub+0x118>
 8000dea:	e0a7      	b.n	8000f3c <__aeabi_fsub+0x268>
 8000dec:	1e42      	subs	r2, r0, #1
 8000dee:	2801      	cmp	r0, #1
 8000df0:	d100      	bne.n	8000df4 <__aeabi_fsub+0x120>
 8000df2:	e0e6      	b.n	8000fc2 <__aeabi_fsub+0x2ee>
 8000df4:	28ff      	cmp	r0, #255	; 0xff
 8000df6:	d068      	beq.n	8000eca <__aeabi_fsub+0x1f6>
 8000df8:	0010      	movs	r0, r2
 8000dfa:	e78f      	b.n	8000d1c <__aeabi_fsub+0x48>
 8000dfc:	2001      	movs	r0, #1
 8000dfe:	4041      	eors	r1, r0
 8000e00:	42a1      	cmp	r1, r4
 8000e02:	d000      	beq.n	8000e06 <__aeabi_fsub+0x132>
 8000e04:	e77f      	b.n	8000d06 <__aeabi_fsub+0x32>
 8000e06:	20ff      	movs	r0, #255	; 0xff
 8000e08:	4240      	negs	r0, r0
 8000e0a:	4680      	mov	r8, r0
 8000e0c:	44a8      	add	r8, r5
 8000e0e:	4640      	mov	r0, r8
 8000e10:	2800      	cmp	r0, #0
 8000e12:	d038      	beq.n	8000e86 <__aeabi_fsub+0x1b2>
 8000e14:	1b51      	subs	r1, r2, r5
 8000e16:	2d00      	cmp	r5, #0
 8000e18:	d100      	bne.n	8000e1c <__aeabi_fsub+0x148>
 8000e1a:	e0ae      	b.n	8000f7a <__aeabi_fsub+0x2a6>
 8000e1c:	2aff      	cmp	r2, #255	; 0xff
 8000e1e:	d100      	bne.n	8000e22 <__aeabi_fsub+0x14e>
 8000e20:	e0df      	b.n	8000fe2 <__aeabi_fsub+0x30e>
 8000e22:	2380      	movs	r3, #128	; 0x80
 8000e24:	4660      	mov	r0, ip
 8000e26:	04db      	lsls	r3, r3, #19
 8000e28:	4318      	orrs	r0, r3
 8000e2a:	4684      	mov	ip, r0
 8000e2c:	291b      	cmp	r1, #27
 8000e2e:	dc00      	bgt.n	8000e32 <__aeabi_fsub+0x15e>
 8000e30:	e0d9      	b.n	8000fe6 <__aeabi_fsub+0x312>
 8000e32:	2001      	movs	r0, #1
 8000e34:	0015      	movs	r5, r2
 8000e36:	1980      	adds	r0, r0, r6
 8000e38:	e7b1      	b.n	8000d9e <__aeabi_fsub+0xca>
 8000e3a:	20fe      	movs	r0, #254	; 0xfe
 8000e3c:	1c6a      	adds	r2, r5, #1
 8000e3e:	4210      	tst	r0, r2
 8000e40:	d171      	bne.n	8000f26 <__aeabi_fsub+0x252>
 8000e42:	2d00      	cmp	r5, #0
 8000e44:	d000      	beq.n	8000e48 <__aeabi_fsub+0x174>
 8000e46:	e0a6      	b.n	8000f96 <__aeabi_fsub+0x2c2>
 8000e48:	4663      	mov	r3, ip
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d100      	bne.n	8000e50 <__aeabi_fsub+0x17c>
 8000e4e:	e0d9      	b.n	8001004 <__aeabi_fsub+0x330>
 8000e50:	2200      	movs	r2, #0
 8000e52:	2e00      	cmp	r6, #0
 8000e54:	d100      	bne.n	8000e58 <__aeabi_fsub+0x184>
 8000e56:	e788      	b.n	8000d6a <__aeabi_fsub+0x96>
 8000e58:	1b98      	subs	r0, r3, r6
 8000e5a:	0143      	lsls	r3, r0, #5
 8000e5c:	d400      	bmi.n	8000e60 <__aeabi_fsub+0x18c>
 8000e5e:	e0e1      	b.n	8001024 <__aeabi_fsub+0x350>
 8000e60:	4663      	mov	r3, ip
 8000e62:	000c      	movs	r4, r1
 8000e64:	1af0      	subs	r0, r6, r3
 8000e66:	e76f      	b.n	8000d48 <__aeabi_fsub+0x74>
 8000e68:	2e00      	cmp	r6, #0
 8000e6a:	d100      	bne.n	8000e6e <__aeabi_fsub+0x19a>
 8000e6c:	e0b7      	b.n	8000fde <__aeabi_fsub+0x30a>
 8000e6e:	0002      	movs	r2, r0
 8000e70:	3a01      	subs	r2, #1
 8000e72:	2801      	cmp	r0, #1
 8000e74:	d100      	bne.n	8000e78 <__aeabi_fsub+0x1a4>
 8000e76:	e09c      	b.n	8000fb2 <__aeabi_fsub+0x2de>
 8000e78:	28ff      	cmp	r0, #255	; 0xff
 8000e7a:	d026      	beq.n	8000eca <__aeabi_fsub+0x1f6>
 8000e7c:	4690      	mov	r8, r2
 8000e7e:	e788      	b.n	8000d92 <__aeabi_fsub+0xbe>
 8000e80:	22ff      	movs	r2, #255	; 0xff
 8000e82:	2700      	movs	r7, #0
 8000e84:	e771      	b.n	8000d6a <__aeabi_fsub+0x96>
 8000e86:	20fe      	movs	r0, #254	; 0xfe
 8000e88:	1c6a      	adds	r2, r5, #1
 8000e8a:	4210      	tst	r0, r2
 8000e8c:	d064      	beq.n	8000f58 <__aeabi_fsub+0x284>
 8000e8e:	2aff      	cmp	r2, #255	; 0xff
 8000e90:	d0f6      	beq.n	8000e80 <__aeabi_fsub+0x1ac>
 8000e92:	0015      	movs	r5, r2
 8000e94:	4466      	add	r6, ip
 8000e96:	0870      	lsrs	r0, r6, #1
 8000e98:	0743      	lsls	r3, r0, #29
 8000e9a:	d000      	beq.n	8000e9e <__aeabi_fsub+0x1ca>
 8000e9c:	e756      	b.n	8000d4c <__aeabi_fsub+0x78>
 8000e9e:	08c3      	lsrs	r3, r0, #3
 8000ea0:	2dff      	cmp	r5, #255	; 0xff
 8000ea2:	d012      	beq.n	8000eca <__aeabi_fsub+0x1f6>
 8000ea4:	025b      	lsls	r3, r3, #9
 8000ea6:	0a5f      	lsrs	r7, r3, #9
 8000ea8:	b2ea      	uxtb	r2, r5
 8000eaa:	e75e      	b.n	8000d6a <__aeabi_fsub+0x96>
 8000eac:	4662      	mov	r2, ip
 8000eae:	2a00      	cmp	r2, #0
 8000eb0:	d100      	bne.n	8000eb4 <__aeabi_fsub+0x1e0>
 8000eb2:	e096      	b.n	8000fe2 <__aeabi_fsub+0x30e>
 8000eb4:	2e00      	cmp	r6, #0
 8000eb6:	d008      	beq.n	8000eca <__aeabi_fsub+0x1f6>
 8000eb8:	2280      	movs	r2, #128	; 0x80
 8000eba:	03d2      	lsls	r2, r2, #15
 8000ebc:	4213      	tst	r3, r2
 8000ebe:	d004      	beq.n	8000eca <__aeabi_fsub+0x1f6>
 8000ec0:	4648      	mov	r0, r9
 8000ec2:	4210      	tst	r0, r2
 8000ec4:	d101      	bne.n	8000eca <__aeabi_fsub+0x1f6>
 8000ec6:	000c      	movs	r4, r1
 8000ec8:	464b      	mov	r3, r9
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d0d8      	beq.n	8000e80 <__aeabi_fsub+0x1ac>
 8000ece:	2780      	movs	r7, #128	; 0x80
 8000ed0:	03ff      	lsls	r7, r7, #15
 8000ed2:	431f      	orrs	r7, r3
 8000ed4:	027f      	lsls	r7, r7, #9
 8000ed6:	22ff      	movs	r2, #255	; 0xff
 8000ed8:	0a7f      	lsrs	r7, r7, #9
 8000eda:	e746      	b.n	8000d6a <__aeabi_fsub+0x96>
 8000edc:	2320      	movs	r3, #32
 8000ede:	003a      	movs	r2, r7
 8000ee0:	1b45      	subs	r5, r0, r5
 8000ee2:	0038      	movs	r0, r7
 8000ee4:	3501      	adds	r5, #1
 8000ee6:	40ea      	lsrs	r2, r5
 8000ee8:	1b5d      	subs	r5, r3, r5
 8000eea:	40a8      	lsls	r0, r5
 8000eec:	1e43      	subs	r3, r0, #1
 8000eee:	4198      	sbcs	r0, r3
 8000ef0:	2500      	movs	r5, #0
 8000ef2:	4310      	orrs	r0, r2
 8000ef4:	e728      	b.n	8000d48 <__aeabi_fsub+0x74>
 8000ef6:	2320      	movs	r3, #32
 8000ef8:	1a1b      	subs	r3, r3, r0
 8000efa:	0032      	movs	r2, r6
 8000efc:	409e      	lsls	r6, r3
 8000efe:	40c2      	lsrs	r2, r0
 8000f00:	0030      	movs	r0, r6
 8000f02:	1e43      	subs	r3, r0, #1
 8000f04:	4198      	sbcs	r0, r3
 8000f06:	4310      	orrs	r0, r2
 8000f08:	e70c      	b.n	8000d24 <__aeabi_fsub+0x50>
 8000f0a:	2aff      	cmp	r2, #255	; 0xff
 8000f0c:	d0db      	beq.n	8000ec6 <__aeabi_fsub+0x1f2>
 8000f0e:	2380      	movs	r3, #128	; 0x80
 8000f10:	4660      	mov	r0, ip
 8000f12:	04db      	lsls	r3, r3, #19
 8000f14:	4318      	orrs	r0, r3
 8000f16:	4684      	mov	ip, r0
 8000f18:	2f1b      	cmp	r7, #27
 8000f1a:	dd56      	ble.n	8000fca <__aeabi_fsub+0x2f6>
 8000f1c:	2001      	movs	r0, #1
 8000f1e:	000c      	movs	r4, r1
 8000f20:	0015      	movs	r5, r2
 8000f22:	1a30      	subs	r0, r6, r0
 8000f24:	e700      	b.n	8000d28 <__aeabi_fsub+0x54>
 8000f26:	4663      	mov	r3, ip
 8000f28:	1b9f      	subs	r7, r3, r6
 8000f2a:	017b      	lsls	r3, r7, #5
 8000f2c:	d43d      	bmi.n	8000faa <__aeabi_fsub+0x2d6>
 8000f2e:	2f00      	cmp	r7, #0
 8000f30:	d000      	beq.n	8000f34 <__aeabi_fsub+0x260>
 8000f32:	e6fe      	b.n	8000d32 <__aeabi_fsub+0x5e>
 8000f34:	2400      	movs	r4, #0
 8000f36:	2200      	movs	r2, #0
 8000f38:	2700      	movs	r7, #0
 8000f3a:	e716      	b.n	8000d6a <__aeabi_fsub+0x96>
 8000f3c:	0005      	movs	r5, r0
 8000f3e:	e7af      	b.n	8000ea0 <__aeabi_fsub+0x1cc>
 8000f40:	0032      	movs	r2, r6
 8000f42:	4643      	mov	r3, r8
 8000f44:	4641      	mov	r1, r8
 8000f46:	40da      	lsrs	r2, r3
 8000f48:	2320      	movs	r3, #32
 8000f4a:	1a5b      	subs	r3, r3, r1
 8000f4c:	409e      	lsls	r6, r3
 8000f4e:	0030      	movs	r0, r6
 8000f50:	1e43      	subs	r3, r0, #1
 8000f52:	4198      	sbcs	r0, r3
 8000f54:	4310      	orrs	r0, r2
 8000f56:	e721      	b.n	8000d9c <__aeabi_fsub+0xc8>
 8000f58:	2d00      	cmp	r5, #0
 8000f5a:	d1a7      	bne.n	8000eac <__aeabi_fsub+0x1d8>
 8000f5c:	4663      	mov	r3, ip
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d059      	beq.n	8001016 <__aeabi_fsub+0x342>
 8000f62:	2200      	movs	r2, #0
 8000f64:	2e00      	cmp	r6, #0
 8000f66:	d100      	bne.n	8000f6a <__aeabi_fsub+0x296>
 8000f68:	e6ff      	b.n	8000d6a <__aeabi_fsub+0x96>
 8000f6a:	0030      	movs	r0, r6
 8000f6c:	4460      	add	r0, ip
 8000f6e:	0143      	lsls	r3, r0, #5
 8000f70:	d592      	bpl.n	8000e98 <__aeabi_fsub+0x1c4>
 8000f72:	4b2a      	ldr	r3, [pc, #168]	; (800101c <__aeabi_fsub+0x348>)
 8000f74:	3501      	adds	r5, #1
 8000f76:	4018      	ands	r0, r3
 8000f78:	e78e      	b.n	8000e98 <__aeabi_fsub+0x1c4>
 8000f7a:	4663      	mov	r3, ip
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d047      	beq.n	8001010 <__aeabi_fsub+0x33c>
 8000f80:	1e4b      	subs	r3, r1, #1
 8000f82:	2901      	cmp	r1, #1
 8000f84:	d015      	beq.n	8000fb2 <__aeabi_fsub+0x2de>
 8000f86:	29ff      	cmp	r1, #255	; 0xff
 8000f88:	d02b      	beq.n	8000fe2 <__aeabi_fsub+0x30e>
 8000f8a:	0019      	movs	r1, r3
 8000f8c:	e74e      	b.n	8000e2c <__aeabi_fsub+0x158>
 8000f8e:	000c      	movs	r4, r1
 8000f90:	464b      	mov	r3, r9
 8000f92:	003d      	movs	r5, r7
 8000f94:	e784      	b.n	8000ea0 <__aeabi_fsub+0x1cc>
 8000f96:	4662      	mov	r2, ip
 8000f98:	2a00      	cmp	r2, #0
 8000f9a:	d18b      	bne.n	8000eb4 <__aeabi_fsub+0x1e0>
 8000f9c:	2e00      	cmp	r6, #0
 8000f9e:	d192      	bne.n	8000ec6 <__aeabi_fsub+0x1f2>
 8000fa0:	2780      	movs	r7, #128	; 0x80
 8000fa2:	2400      	movs	r4, #0
 8000fa4:	22ff      	movs	r2, #255	; 0xff
 8000fa6:	03ff      	lsls	r7, r7, #15
 8000fa8:	e6df      	b.n	8000d6a <__aeabi_fsub+0x96>
 8000faa:	4663      	mov	r3, ip
 8000fac:	000c      	movs	r4, r1
 8000fae:	1af7      	subs	r7, r6, r3
 8000fb0:	e6bf      	b.n	8000d32 <__aeabi_fsub+0x5e>
 8000fb2:	0030      	movs	r0, r6
 8000fb4:	4460      	add	r0, ip
 8000fb6:	2501      	movs	r5, #1
 8000fb8:	0143      	lsls	r3, r0, #5
 8000fba:	d400      	bmi.n	8000fbe <__aeabi_fsub+0x2ea>
 8000fbc:	e76c      	b.n	8000e98 <__aeabi_fsub+0x1c4>
 8000fbe:	2502      	movs	r5, #2
 8000fc0:	e6f2      	b.n	8000da8 <__aeabi_fsub+0xd4>
 8000fc2:	4663      	mov	r3, ip
 8000fc4:	2501      	movs	r5, #1
 8000fc6:	1b98      	subs	r0, r3, r6
 8000fc8:	e6ae      	b.n	8000d28 <__aeabi_fsub+0x54>
 8000fca:	2320      	movs	r3, #32
 8000fcc:	4664      	mov	r4, ip
 8000fce:	4660      	mov	r0, ip
 8000fd0:	40fc      	lsrs	r4, r7
 8000fd2:	1bdf      	subs	r7, r3, r7
 8000fd4:	40b8      	lsls	r0, r7
 8000fd6:	1e43      	subs	r3, r0, #1
 8000fd8:	4198      	sbcs	r0, r3
 8000fda:	4320      	orrs	r0, r4
 8000fdc:	e79f      	b.n	8000f1e <__aeabi_fsub+0x24a>
 8000fde:	0005      	movs	r5, r0
 8000fe0:	e75e      	b.n	8000ea0 <__aeabi_fsub+0x1cc>
 8000fe2:	464b      	mov	r3, r9
 8000fe4:	e771      	b.n	8000eca <__aeabi_fsub+0x1f6>
 8000fe6:	2320      	movs	r3, #32
 8000fe8:	4665      	mov	r5, ip
 8000fea:	4660      	mov	r0, ip
 8000fec:	40cd      	lsrs	r5, r1
 8000fee:	1a59      	subs	r1, r3, r1
 8000ff0:	4088      	lsls	r0, r1
 8000ff2:	1e43      	subs	r3, r0, #1
 8000ff4:	4198      	sbcs	r0, r3
 8000ff6:	4328      	orrs	r0, r5
 8000ff8:	e71c      	b.n	8000e34 <__aeabi_fsub+0x160>
 8000ffa:	4663      	mov	r3, ip
 8000ffc:	000c      	movs	r4, r1
 8000ffe:	2501      	movs	r5, #1
 8001000:	1af0      	subs	r0, r6, r3
 8001002:	e691      	b.n	8000d28 <__aeabi_fsub+0x54>
 8001004:	2e00      	cmp	r6, #0
 8001006:	d095      	beq.n	8000f34 <__aeabi_fsub+0x260>
 8001008:	000c      	movs	r4, r1
 800100a:	464f      	mov	r7, r9
 800100c:	2200      	movs	r2, #0
 800100e:	e6ac      	b.n	8000d6a <__aeabi_fsub+0x96>
 8001010:	464b      	mov	r3, r9
 8001012:	000d      	movs	r5, r1
 8001014:	e744      	b.n	8000ea0 <__aeabi_fsub+0x1cc>
 8001016:	464f      	mov	r7, r9
 8001018:	2200      	movs	r2, #0
 800101a:	e6a6      	b.n	8000d6a <__aeabi_fsub+0x96>
 800101c:	fbffffff 	.word	0xfbffffff
 8001020:	7dffffff 	.word	0x7dffffff
 8001024:	2800      	cmp	r0, #0
 8001026:	d000      	beq.n	800102a <__aeabi_fsub+0x356>
 8001028:	e736      	b.n	8000e98 <__aeabi_fsub+0x1c4>
 800102a:	2400      	movs	r4, #0
 800102c:	2700      	movs	r7, #0
 800102e:	e69c      	b.n	8000d6a <__aeabi_fsub+0x96>

08001030 <__aeabi_f2iz>:
 8001030:	0241      	lsls	r1, r0, #9
 8001032:	0042      	lsls	r2, r0, #1
 8001034:	0fc3      	lsrs	r3, r0, #31
 8001036:	0a49      	lsrs	r1, r1, #9
 8001038:	2000      	movs	r0, #0
 800103a:	0e12      	lsrs	r2, r2, #24
 800103c:	2a7e      	cmp	r2, #126	; 0x7e
 800103e:	dd03      	ble.n	8001048 <__aeabi_f2iz+0x18>
 8001040:	2a9d      	cmp	r2, #157	; 0x9d
 8001042:	dd02      	ble.n	800104a <__aeabi_f2iz+0x1a>
 8001044:	4a09      	ldr	r2, [pc, #36]	; (800106c <__aeabi_f2iz+0x3c>)
 8001046:	1898      	adds	r0, r3, r2
 8001048:	4770      	bx	lr
 800104a:	2080      	movs	r0, #128	; 0x80
 800104c:	0400      	lsls	r0, r0, #16
 800104e:	4301      	orrs	r1, r0
 8001050:	2a95      	cmp	r2, #149	; 0x95
 8001052:	dc07      	bgt.n	8001064 <__aeabi_f2iz+0x34>
 8001054:	2096      	movs	r0, #150	; 0x96
 8001056:	1a82      	subs	r2, r0, r2
 8001058:	40d1      	lsrs	r1, r2
 800105a:	4248      	negs	r0, r1
 800105c:	2b00      	cmp	r3, #0
 800105e:	d1f3      	bne.n	8001048 <__aeabi_f2iz+0x18>
 8001060:	0008      	movs	r0, r1
 8001062:	e7f1      	b.n	8001048 <__aeabi_f2iz+0x18>
 8001064:	3a96      	subs	r2, #150	; 0x96
 8001066:	4091      	lsls	r1, r2
 8001068:	e7f7      	b.n	800105a <__aeabi_f2iz+0x2a>
 800106a:	46c0      	nop			; (mov r8, r8)
 800106c:	7fffffff 	.word	0x7fffffff

08001070 <__aeabi_i2f>:
 8001070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001072:	2800      	cmp	r0, #0
 8001074:	d013      	beq.n	800109e <__aeabi_i2f+0x2e>
 8001076:	17c3      	asrs	r3, r0, #31
 8001078:	18c6      	adds	r6, r0, r3
 800107a:	405e      	eors	r6, r3
 800107c:	0fc4      	lsrs	r4, r0, #31
 800107e:	0030      	movs	r0, r6
 8001080:	f001 fefa 	bl	8002e78 <__clzsi2>
 8001084:	239e      	movs	r3, #158	; 0x9e
 8001086:	0005      	movs	r5, r0
 8001088:	1a1b      	subs	r3, r3, r0
 800108a:	2b96      	cmp	r3, #150	; 0x96
 800108c:	dc0f      	bgt.n	80010ae <__aeabi_i2f+0x3e>
 800108e:	2808      	cmp	r0, #8
 8001090:	dd01      	ble.n	8001096 <__aeabi_i2f+0x26>
 8001092:	3d08      	subs	r5, #8
 8001094:	40ae      	lsls	r6, r5
 8001096:	0276      	lsls	r6, r6, #9
 8001098:	0a76      	lsrs	r6, r6, #9
 800109a:	b2d8      	uxtb	r0, r3
 800109c:	e002      	b.n	80010a4 <__aeabi_i2f+0x34>
 800109e:	2400      	movs	r4, #0
 80010a0:	2000      	movs	r0, #0
 80010a2:	2600      	movs	r6, #0
 80010a4:	05c0      	lsls	r0, r0, #23
 80010a6:	4330      	orrs	r0, r6
 80010a8:	07e4      	lsls	r4, r4, #31
 80010aa:	4320      	orrs	r0, r4
 80010ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80010ae:	2b99      	cmp	r3, #153	; 0x99
 80010b0:	dd0c      	ble.n	80010cc <__aeabi_i2f+0x5c>
 80010b2:	2205      	movs	r2, #5
 80010b4:	0031      	movs	r1, r6
 80010b6:	1a12      	subs	r2, r2, r0
 80010b8:	40d1      	lsrs	r1, r2
 80010ba:	000a      	movs	r2, r1
 80010bc:	0001      	movs	r1, r0
 80010be:	0030      	movs	r0, r6
 80010c0:	311b      	adds	r1, #27
 80010c2:	4088      	lsls	r0, r1
 80010c4:	1e41      	subs	r1, r0, #1
 80010c6:	4188      	sbcs	r0, r1
 80010c8:	4302      	orrs	r2, r0
 80010ca:	0016      	movs	r6, r2
 80010cc:	2d05      	cmp	r5, #5
 80010ce:	dc12      	bgt.n	80010f6 <__aeabi_i2f+0x86>
 80010d0:	0031      	movs	r1, r6
 80010d2:	4f0d      	ldr	r7, [pc, #52]	; (8001108 <__aeabi_i2f+0x98>)
 80010d4:	4039      	ands	r1, r7
 80010d6:	0772      	lsls	r2, r6, #29
 80010d8:	d009      	beq.n	80010ee <__aeabi_i2f+0x7e>
 80010da:	200f      	movs	r0, #15
 80010dc:	4030      	ands	r0, r6
 80010de:	2804      	cmp	r0, #4
 80010e0:	d005      	beq.n	80010ee <__aeabi_i2f+0x7e>
 80010e2:	3104      	adds	r1, #4
 80010e4:	014a      	lsls	r2, r1, #5
 80010e6:	d502      	bpl.n	80010ee <__aeabi_i2f+0x7e>
 80010e8:	239f      	movs	r3, #159	; 0x9f
 80010ea:	4039      	ands	r1, r7
 80010ec:	1b5b      	subs	r3, r3, r5
 80010ee:	0189      	lsls	r1, r1, #6
 80010f0:	0a4e      	lsrs	r6, r1, #9
 80010f2:	b2d8      	uxtb	r0, r3
 80010f4:	e7d6      	b.n	80010a4 <__aeabi_i2f+0x34>
 80010f6:	1f6a      	subs	r2, r5, #5
 80010f8:	4096      	lsls	r6, r2
 80010fa:	0031      	movs	r1, r6
 80010fc:	4f02      	ldr	r7, [pc, #8]	; (8001108 <__aeabi_i2f+0x98>)
 80010fe:	4039      	ands	r1, r7
 8001100:	0772      	lsls	r2, r6, #29
 8001102:	d0f4      	beq.n	80010ee <__aeabi_i2f+0x7e>
 8001104:	e7e9      	b.n	80010da <__aeabi_i2f+0x6a>
 8001106:	46c0      	nop			; (mov r8, r8)
 8001108:	fbffffff 	.word	0xfbffffff

0800110c <__aeabi_dadd>:
 800110c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800110e:	464f      	mov	r7, r9
 8001110:	4646      	mov	r6, r8
 8001112:	46d6      	mov	lr, sl
 8001114:	000d      	movs	r5, r1
 8001116:	0004      	movs	r4, r0
 8001118:	b5c0      	push	{r6, r7, lr}
 800111a:	001f      	movs	r7, r3
 800111c:	0011      	movs	r1, r2
 800111e:	0328      	lsls	r0, r5, #12
 8001120:	0f62      	lsrs	r2, r4, #29
 8001122:	0a40      	lsrs	r0, r0, #9
 8001124:	4310      	orrs	r0, r2
 8001126:	007a      	lsls	r2, r7, #1
 8001128:	0d52      	lsrs	r2, r2, #21
 800112a:	00e3      	lsls	r3, r4, #3
 800112c:	033c      	lsls	r4, r7, #12
 800112e:	4691      	mov	r9, r2
 8001130:	0a64      	lsrs	r4, r4, #9
 8001132:	0ffa      	lsrs	r2, r7, #31
 8001134:	0f4f      	lsrs	r7, r1, #29
 8001136:	006e      	lsls	r6, r5, #1
 8001138:	4327      	orrs	r7, r4
 800113a:	4692      	mov	sl, r2
 800113c:	46b8      	mov	r8, r7
 800113e:	0d76      	lsrs	r6, r6, #21
 8001140:	0fed      	lsrs	r5, r5, #31
 8001142:	00c9      	lsls	r1, r1, #3
 8001144:	4295      	cmp	r5, r2
 8001146:	d100      	bne.n	800114a <__aeabi_dadd+0x3e>
 8001148:	e099      	b.n	800127e <__aeabi_dadd+0x172>
 800114a:	464c      	mov	r4, r9
 800114c:	1b34      	subs	r4, r6, r4
 800114e:	46a4      	mov	ip, r4
 8001150:	2c00      	cmp	r4, #0
 8001152:	dc00      	bgt.n	8001156 <__aeabi_dadd+0x4a>
 8001154:	e07c      	b.n	8001250 <__aeabi_dadd+0x144>
 8001156:	464a      	mov	r2, r9
 8001158:	2a00      	cmp	r2, #0
 800115a:	d100      	bne.n	800115e <__aeabi_dadd+0x52>
 800115c:	e0b8      	b.n	80012d0 <__aeabi_dadd+0x1c4>
 800115e:	4ac5      	ldr	r2, [pc, #788]	; (8001474 <__aeabi_dadd+0x368>)
 8001160:	4296      	cmp	r6, r2
 8001162:	d100      	bne.n	8001166 <__aeabi_dadd+0x5a>
 8001164:	e11c      	b.n	80013a0 <__aeabi_dadd+0x294>
 8001166:	2280      	movs	r2, #128	; 0x80
 8001168:	003c      	movs	r4, r7
 800116a:	0412      	lsls	r2, r2, #16
 800116c:	4314      	orrs	r4, r2
 800116e:	46a0      	mov	r8, r4
 8001170:	4662      	mov	r2, ip
 8001172:	2a38      	cmp	r2, #56	; 0x38
 8001174:	dd00      	ble.n	8001178 <__aeabi_dadd+0x6c>
 8001176:	e161      	b.n	800143c <__aeabi_dadd+0x330>
 8001178:	2a1f      	cmp	r2, #31
 800117a:	dd00      	ble.n	800117e <__aeabi_dadd+0x72>
 800117c:	e1cc      	b.n	8001518 <__aeabi_dadd+0x40c>
 800117e:	4664      	mov	r4, ip
 8001180:	2220      	movs	r2, #32
 8001182:	1b12      	subs	r2, r2, r4
 8001184:	4644      	mov	r4, r8
 8001186:	4094      	lsls	r4, r2
 8001188:	000f      	movs	r7, r1
 800118a:	46a1      	mov	r9, r4
 800118c:	4664      	mov	r4, ip
 800118e:	4091      	lsls	r1, r2
 8001190:	40e7      	lsrs	r7, r4
 8001192:	464c      	mov	r4, r9
 8001194:	1e4a      	subs	r2, r1, #1
 8001196:	4191      	sbcs	r1, r2
 8001198:	433c      	orrs	r4, r7
 800119a:	4642      	mov	r2, r8
 800119c:	4321      	orrs	r1, r4
 800119e:	4664      	mov	r4, ip
 80011a0:	40e2      	lsrs	r2, r4
 80011a2:	1a80      	subs	r0, r0, r2
 80011a4:	1a5c      	subs	r4, r3, r1
 80011a6:	42a3      	cmp	r3, r4
 80011a8:	419b      	sbcs	r3, r3
 80011aa:	425f      	negs	r7, r3
 80011ac:	1bc7      	subs	r7, r0, r7
 80011ae:	023b      	lsls	r3, r7, #8
 80011b0:	d400      	bmi.n	80011b4 <__aeabi_dadd+0xa8>
 80011b2:	e0d0      	b.n	8001356 <__aeabi_dadd+0x24a>
 80011b4:	027f      	lsls	r7, r7, #9
 80011b6:	0a7f      	lsrs	r7, r7, #9
 80011b8:	2f00      	cmp	r7, #0
 80011ba:	d100      	bne.n	80011be <__aeabi_dadd+0xb2>
 80011bc:	e0ff      	b.n	80013be <__aeabi_dadd+0x2b2>
 80011be:	0038      	movs	r0, r7
 80011c0:	f001 fe5a 	bl	8002e78 <__clzsi2>
 80011c4:	0001      	movs	r1, r0
 80011c6:	3908      	subs	r1, #8
 80011c8:	2320      	movs	r3, #32
 80011ca:	0022      	movs	r2, r4
 80011cc:	1a5b      	subs	r3, r3, r1
 80011ce:	408f      	lsls	r7, r1
 80011d0:	40da      	lsrs	r2, r3
 80011d2:	408c      	lsls	r4, r1
 80011d4:	4317      	orrs	r7, r2
 80011d6:	42b1      	cmp	r1, r6
 80011d8:	da00      	bge.n	80011dc <__aeabi_dadd+0xd0>
 80011da:	e0ff      	b.n	80013dc <__aeabi_dadd+0x2d0>
 80011dc:	1b89      	subs	r1, r1, r6
 80011de:	1c4b      	adds	r3, r1, #1
 80011e0:	2b1f      	cmp	r3, #31
 80011e2:	dd00      	ble.n	80011e6 <__aeabi_dadd+0xda>
 80011e4:	e0a8      	b.n	8001338 <__aeabi_dadd+0x22c>
 80011e6:	2220      	movs	r2, #32
 80011e8:	0039      	movs	r1, r7
 80011ea:	1ad2      	subs	r2, r2, r3
 80011ec:	0020      	movs	r0, r4
 80011ee:	4094      	lsls	r4, r2
 80011f0:	4091      	lsls	r1, r2
 80011f2:	40d8      	lsrs	r0, r3
 80011f4:	1e62      	subs	r2, r4, #1
 80011f6:	4194      	sbcs	r4, r2
 80011f8:	40df      	lsrs	r7, r3
 80011fa:	2600      	movs	r6, #0
 80011fc:	4301      	orrs	r1, r0
 80011fe:	430c      	orrs	r4, r1
 8001200:	0763      	lsls	r3, r4, #29
 8001202:	d009      	beq.n	8001218 <__aeabi_dadd+0x10c>
 8001204:	230f      	movs	r3, #15
 8001206:	4023      	ands	r3, r4
 8001208:	2b04      	cmp	r3, #4
 800120a:	d005      	beq.n	8001218 <__aeabi_dadd+0x10c>
 800120c:	1d23      	adds	r3, r4, #4
 800120e:	42a3      	cmp	r3, r4
 8001210:	41a4      	sbcs	r4, r4
 8001212:	4264      	negs	r4, r4
 8001214:	193f      	adds	r7, r7, r4
 8001216:	001c      	movs	r4, r3
 8001218:	023b      	lsls	r3, r7, #8
 800121a:	d400      	bmi.n	800121e <__aeabi_dadd+0x112>
 800121c:	e09e      	b.n	800135c <__aeabi_dadd+0x250>
 800121e:	4b95      	ldr	r3, [pc, #596]	; (8001474 <__aeabi_dadd+0x368>)
 8001220:	3601      	adds	r6, #1
 8001222:	429e      	cmp	r6, r3
 8001224:	d100      	bne.n	8001228 <__aeabi_dadd+0x11c>
 8001226:	e0b7      	b.n	8001398 <__aeabi_dadd+0x28c>
 8001228:	4a93      	ldr	r2, [pc, #588]	; (8001478 <__aeabi_dadd+0x36c>)
 800122a:	08e4      	lsrs	r4, r4, #3
 800122c:	4017      	ands	r7, r2
 800122e:	077b      	lsls	r3, r7, #29
 8001230:	0571      	lsls	r1, r6, #21
 8001232:	027f      	lsls	r7, r7, #9
 8001234:	4323      	orrs	r3, r4
 8001236:	0b3f      	lsrs	r7, r7, #12
 8001238:	0d4a      	lsrs	r2, r1, #21
 800123a:	0512      	lsls	r2, r2, #20
 800123c:	433a      	orrs	r2, r7
 800123e:	07ed      	lsls	r5, r5, #31
 8001240:	432a      	orrs	r2, r5
 8001242:	0018      	movs	r0, r3
 8001244:	0011      	movs	r1, r2
 8001246:	bce0      	pop	{r5, r6, r7}
 8001248:	46ba      	mov	sl, r7
 800124a:	46b1      	mov	r9, r6
 800124c:	46a8      	mov	r8, r5
 800124e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001250:	2c00      	cmp	r4, #0
 8001252:	d04b      	beq.n	80012ec <__aeabi_dadd+0x1e0>
 8001254:	464c      	mov	r4, r9
 8001256:	1ba4      	subs	r4, r4, r6
 8001258:	46a4      	mov	ip, r4
 800125a:	2e00      	cmp	r6, #0
 800125c:	d000      	beq.n	8001260 <__aeabi_dadd+0x154>
 800125e:	e123      	b.n	80014a8 <__aeabi_dadd+0x39c>
 8001260:	0004      	movs	r4, r0
 8001262:	431c      	orrs	r4, r3
 8001264:	d100      	bne.n	8001268 <__aeabi_dadd+0x15c>
 8001266:	e1af      	b.n	80015c8 <__aeabi_dadd+0x4bc>
 8001268:	4662      	mov	r2, ip
 800126a:	1e54      	subs	r4, r2, #1
 800126c:	2a01      	cmp	r2, #1
 800126e:	d100      	bne.n	8001272 <__aeabi_dadd+0x166>
 8001270:	e215      	b.n	800169e <__aeabi_dadd+0x592>
 8001272:	4d80      	ldr	r5, [pc, #512]	; (8001474 <__aeabi_dadd+0x368>)
 8001274:	45ac      	cmp	ip, r5
 8001276:	d100      	bne.n	800127a <__aeabi_dadd+0x16e>
 8001278:	e1c8      	b.n	800160c <__aeabi_dadd+0x500>
 800127a:	46a4      	mov	ip, r4
 800127c:	e11b      	b.n	80014b6 <__aeabi_dadd+0x3aa>
 800127e:	464a      	mov	r2, r9
 8001280:	1ab2      	subs	r2, r6, r2
 8001282:	4694      	mov	ip, r2
 8001284:	2a00      	cmp	r2, #0
 8001286:	dc00      	bgt.n	800128a <__aeabi_dadd+0x17e>
 8001288:	e0ac      	b.n	80013e4 <__aeabi_dadd+0x2d8>
 800128a:	464a      	mov	r2, r9
 800128c:	2a00      	cmp	r2, #0
 800128e:	d043      	beq.n	8001318 <__aeabi_dadd+0x20c>
 8001290:	4a78      	ldr	r2, [pc, #480]	; (8001474 <__aeabi_dadd+0x368>)
 8001292:	4296      	cmp	r6, r2
 8001294:	d100      	bne.n	8001298 <__aeabi_dadd+0x18c>
 8001296:	e1af      	b.n	80015f8 <__aeabi_dadd+0x4ec>
 8001298:	2280      	movs	r2, #128	; 0x80
 800129a:	003c      	movs	r4, r7
 800129c:	0412      	lsls	r2, r2, #16
 800129e:	4314      	orrs	r4, r2
 80012a0:	46a0      	mov	r8, r4
 80012a2:	4662      	mov	r2, ip
 80012a4:	2a38      	cmp	r2, #56	; 0x38
 80012a6:	dc67      	bgt.n	8001378 <__aeabi_dadd+0x26c>
 80012a8:	2a1f      	cmp	r2, #31
 80012aa:	dc00      	bgt.n	80012ae <__aeabi_dadd+0x1a2>
 80012ac:	e15f      	b.n	800156e <__aeabi_dadd+0x462>
 80012ae:	4647      	mov	r7, r8
 80012b0:	3a20      	subs	r2, #32
 80012b2:	40d7      	lsrs	r7, r2
 80012b4:	4662      	mov	r2, ip
 80012b6:	2a20      	cmp	r2, #32
 80012b8:	d005      	beq.n	80012c6 <__aeabi_dadd+0x1ba>
 80012ba:	4664      	mov	r4, ip
 80012bc:	2240      	movs	r2, #64	; 0x40
 80012be:	1b12      	subs	r2, r2, r4
 80012c0:	4644      	mov	r4, r8
 80012c2:	4094      	lsls	r4, r2
 80012c4:	4321      	orrs	r1, r4
 80012c6:	1e4a      	subs	r2, r1, #1
 80012c8:	4191      	sbcs	r1, r2
 80012ca:	000c      	movs	r4, r1
 80012cc:	433c      	orrs	r4, r7
 80012ce:	e057      	b.n	8001380 <__aeabi_dadd+0x274>
 80012d0:	003a      	movs	r2, r7
 80012d2:	430a      	orrs	r2, r1
 80012d4:	d100      	bne.n	80012d8 <__aeabi_dadd+0x1cc>
 80012d6:	e105      	b.n	80014e4 <__aeabi_dadd+0x3d8>
 80012d8:	0022      	movs	r2, r4
 80012da:	3a01      	subs	r2, #1
 80012dc:	2c01      	cmp	r4, #1
 80012de:	d100      	bne.n	80012e2 <__aeabi_dadd+0x1d6>
 80012e0:	e182      	b.n	80015e8 <__aeabi_dadd+0x4dc>
 80012e2:	4c64      	ldr	r4, [pc, #400]	; (8001474 <__aeabi_dadd+0x368>)
 80012e4:	45a4      	cmp	ip, r4
 80012e6:	d05b      	beq.n	80013a0 <__aeabi_dadd+0x294>
 80012e8:	4694      	mov	ip, r2
 80012ea:	e741      	b.n	8001170 <__aeabi_dadd+0x64>
 80012ec:	4c63      	ldr	r4, [pc, #396]	; (800147c <__aeabi_dadd+0x370>)
 80012ee:	1c77      	adds	r7, r6, #1
 80012f0:	4227      	tst	r7, r4
 80012f2:	d000      	beq.n	80012f6 <__aeabi_dadd+0x1ea>
 80012f4:	e0c4      	b.n	8001480 <__aeabi_dadd+0x374>
 80012f6:	0004      	movs	r4, r0
 80012f8:	431c      	orrs	r4, r3
 80012fa:	2e00      	cmp	r6, #0
 80012fc:	d000      	beq.n	8001300 <__aeabi_dadd+0x1f4>
 80012fe:	e169      	b.n	80015d4 <__aeabi_dadd+0x4c8>
 8001300:	2c00      	cmp	r4, #0
 8001302:	d100      	bne.n	8001306 <__aeabi_dadd+0x1fa>
 8001304:	e1bf      	b.n	8001686 <__aeabi_dadd+0x57a>
 8001306:	4644      	mov	r4, r8
 8001308:	430c      	orrs	r4, r1
 800130a:	d000      	beq.n	800130e <__aeabi_dadd+0x202>
 800130c:	e1d0      	b.n	80016b0 <__aeabi_dadd+0x5a4>
 800130e:	0742      	lsls	r2, r0, #29
 8001310:	08db      	lsrs	r3, r3, #3
 8001312:	4313      	orrs	r3, r2
 8001314:	08c0      	lsrs	r0, r0, #3
 8001316:	e029      	b.n	800136c <__aeabi_dadd+0x260>
 8001318:	003a      	movs	r2, r7
 800131a:	430a      	orrs	r2, r1
 800131c:	d100      	bne.n	8001320 <__aeabi_dadd+0x214>
 800131e:	e170      	b.n	8001602 <__aeabi_dadd+0x4f6>
 8001320:	4662      	mov	r2, ip
 8001322:	4664      	mov	r4, ip
 8001324:	3a01      	subs	r2, #1
 8001326:	2c01      	cmp	r4, #1
 8001328:	d100      	bne.n	800132c <__aeabi_dadd+0x220>
 800132a:	e0e0      	b.n	80014ee <__aeabi_dadd+0x3e2>
 800132c:	4c51      	ldr	r4, [pc, #324]	; (8001474 <__aeabi_dadd+0x368>)
 800132e:	45a4      	cmp	ip, r4
 8001330:	d100      	bne.n	8001334 <__aeabi_dadd+0x228>
 8001332:	e161      	b.n	80015f8 <__aeabi_dadd+0x4ec>
 8001334:	4694      	mov	ip, r2
 8001336:	e7b4      	b.n	80012a2 <__aeabi_dadd+0x196>
 8001338:	003a      	movs	r2, r7
 800133a:	391f      	subs	r1, #31
 800133c:	40ca      	lsrs	r2, r1
 800133e:	0011      	movs	r1, r2
 8001340:	2b20      	cmp	r3, #32
 8001342:	d003      	beq.n	800134c <__aeabi_dadd+0x240>
 8001344:	2240      	movs	r2, #64	; 0x40
 8001346:	1ad3      	subs	r3, r2, r3
 8001348:	409f      	lsls	r7, r3
 800134a:	433c      	orrs	r4, r7
 800134c:	1e63      	subs	r3, r4, #1
 800134e:	419c      	sbcs	r4, r3
 8001350:	2700      	movs	r7, #0
 8001352:	2600      	movs	r6, #0
 8001354:	430c      	orrs	r4, r1
 8001356:	0763      	lsls	r3, r4, #29
 8001358:	d000      	beq.n	800135c <__aeabi_dadd+0x250>
 800135a:	e753      	b.n	8001204 <__aeabi_dadd+0xf8>
 800135c:	46b4      	mov	ip, r6
 800135e:	08e4      	lsrs	r4, r4, #3
 8001360:	077b      	lsls	r3, r7, #29
 8001362:	4323      	orrs	r3, r4
 8001364:	08f8      	lsrs	r0, r7, #3
 8001366:	4a43      	ldr	r2, [pc, #268]	; (8001474 <__aeabi_dadd+0x368>)
 8001368:	4594      	cmp	ip, r2
 800136a:	d01d      	beq.n	80013a8 <__aeabi_dadd+0x29c>
 800136c:	4662      	mov	r2, ip
 800136e:	0307      	lsls	r7, r0, #12
 8001370:	0552      	lsls	r2, r2, #21
 8001372:	0b3f      	lsrs	r7, r7, #12
 8001374:	0d52      	lsrs	r2, r2, #21
 8001376:	e760      	b.n	800123a <__aeabi_dadd+0x12e>
 8001378:	4644      	mov	r4, r8
 800137a:	430c      	orrs	r4, r1
 800137c:	1e62      	subs	r2, r4, #1
 800137e:	4194      	sbcs	r4, r2
 8001380:	18e4      	adds	r4, r4, r3
 8001382:	429c      	cmp	r4, r3
 8001384:	419b      	sbcs	r3, r3
 8001386:	425f      	negs	r7, r3
 8001388:	183f      	adds	r7, r7, r0
 800138a:	023b      	lsls	r3, r7, #8
 800138c:	d5e3      	bpl.n	8001356 <__aeabi_dadd+0x24a>
 800138e:	4b39      	ldr	r3, [pc, #228]	; (8001474 <__aeabi_dadd+0x368>)
 8001390:	3601      	adds	r6, #1
 8001392:	429e      	cmp	r6, r3
 8001394:	d000      	beq.n	8001398 <__aeabi_dadd+0x28c>
 8001396:	e0b5      	b.n	8001504 <__aeabi_dadd+0x3f8>
 8001398:	0032      	movs	r2, r6
 800139a:	2700      	movs	r7, #0
 800139c:	2300      	movs	r3, #0
 800139e:	e74c      	b.n	800123a <__aeabi_dadd+0x12e>
 80013a0:	0742      	lsls	r2, r0, #29
 80013a2:	08db      	lsrs	r3, r3, #3
 80013a4:	4313      	orrs	r3, r2
 80013a6:	08c0      	lsrs	r0, r0, #3
 80013a8:	001a      	movs	r2, r3
 80013aa:	4302      	orrs	r2, r0
 80013ac:	d100      	bne.n	80013b0 <__aeabi_dadd+0x2a4>
 80013ae:	e1e1      	b.n	8001774 <__aeabi_dadd+0x668>
 80013b0:	2780      	movs	r7, #128	; 0x80
 80013b2:	033f      	lsls	r7, r7, #12
 80013b4:	4307      	orrs	r7, r0
 80013b6:	033f      	lsls	r7, r7, #12
 80013b8:	4a2e      	ldr	r2, [pc, #184]	; (8001474 <__aeabi_dadd+0x368>)
 80013ba:	0b3f      	lsrs	r7, r7, #12
 80013bc:	e73d      	b.n	800123a <__aeabi_dadd+0x12e>
 80013be:	0020      	movs	r0, r4
 80013c0:	f001 fd5a 	bl	8002e78 <__clzsi2>
 80013c4:	0001      	movs	r1, r0
 80013c6:	3118      	adds	r1, #24
 80013c8:	291f      	cmp	r1, #31
 80013ca:	dc00      	bgt.n	80013ce <__aeabi_dadd+0x2c2>
 80013cc:	e6fc      	b.n	80011c8 <__aeabi_dadd+0xbc>
 80013ce:	3808      	subs	r0, #8
 80013d0:	4084      	lsls	r4, r0
 80013d2:	0027      	movs	r7, r4
 80013d4:	2400      	movs	r4, #0
 80013d6:	42b1      	cmp	r1, r6
 80013d8:	db00      	blt.n	80013dc <__aeabi_dadd+0x2d0>
 80013da:	e6ff      	b.n	80011dc <__aeabi_dadd+0xd0>
 80013dc:	4a26      	ldr	r2, [pc, #152]	; (8001478 <__aeabi_dadd+0x36c>)
 80013de:	1a76      	subs	r6, r6, r1
 80013e0:	4017      	ands	r7, r2
 80013e2:	e70d      	b.n	8001200 <__aeabi_dadd+0xf4>
 80013e4:	2a00      	cmp	r2, #0
 80013e6:	d02f      	beq.n	8001448 <__aeabi_dadd+0x33c>
 80013e8:	464a      	mov	r2, r9
 80013ea:	1b92      	subs	r2, r2, r6
 80013ec:	4694      	mov	ip, r2
 80013ee:	2e00      	cmp	r6, #0
 80013f0:	d100      	bne.n	80013f4 <__aeabi_dadd+0x2e8>
 80013f2:	e0ad      	b.n	8001550 <__aeabi_dadd+0x444>
 80013f4:	4a1f      	ldr	r2, [pc, #124]	; (8001474 <__aeabi_dadd+0x368>)
 80013f6:	4591      	cmp	r9, r2
 80013f8:	d100      	bne.n	80013fc <__aeabi_dadd+0x2f0>
 80013fa:	e10f      	b.n	800161c <__aeabi_dadd+0x510>
 80013fc:	2280      	movs	r2, #128	; 0x80
 80013fe:	0412      	lsls	r2, r2, #16
 8001400:	4310      	orrs	r0, r2
 8001402:	4662      	mov	r2, ip
 8001404:	2a38      	cmp	r2, #56	; 0x38
 8001406:	dd00      	ble.n	800140a <__aeabi_dadd+0x2fe>
 8001408:	e10f      	b.n	800162a <__aeabi_dadd+0x51e>
 800140a:	2a1f      	cmp	r2, #31
 800140c:	dd00      	ble.n	8001410 <__aeabi_dadd+0x304>
 800140e:	e180      	b.n	8001712 <__aeabi_dadd+0x606>
 8001410:	4664      	mov	r4, ip
 8001412:	2220      	movs	r2, #32
 8001414:	001e      	movs	r6, r3
 8001416:	1b12      	subs	r2, r2, r4
 8001418:	4667      	mov	r7, ip
 800141a:	0004      	movs	r4, r0
 800141c:	4093      	lsls	r3, r2
 800141e:	4094      	lsls	r4, r2
 8001420:	40fe      	lsrs	r6, r7
 8001422:	1e5a      	subs	r2, r3, #1
 8001424:	4193      	sbcs	r3, r2
 8001426:	40f8      	lsrs	r0, r7
 8001428:	4334      	orrs	r4, r6
 800142a:	431c      	orrs	r4, r3
 800142c:	4480      	add	r8, r0
 800142e:	1864      	adds	r4, r4, r1
 8001430:	428c      	cmp	r4, r1
 8001432:	41bf      	sbcs	r7, r7
 8001434:	427f      	negs	r7, r7
 8001436:	464e      	mov	r6, r9
 8001438:	4447      	add	r7, r8
 800143a:	e7a6      	b.n	800138a <__aeabi_dadd+0x27e>
 800143c:	4642      	mov	r2, r8
 800143e:	430a      	orrs	r2, r1
 8001440:	0011      	movs	r1, r2
 8001442:	1e4a      	subs	r2, r1, #1
 8001444:	4191      	sbcs	r1, r2
 8001446:	e6ad      	b.n	80011a4 <__aeabi_dadd+0x98>
 8001448:	4c0c      	ldr	r4, [pc, #48]	; (800147c <__aeabi_dadd+0x370>)
 800144a:	1c72      	adds	r2, r6, #1
 800144c:	4222      	tst	r2, r4
 800144e:	d000      	beq.n	8001452 <__aeabi_dadd+0x346>
 8001450:	e0a1      	b.n	8001596 <__aeabi_dadd+0x48a>
 8001452:	0002      	movs	r2, r0
 8001454:	431a      	orrs	r2, r3
 8001456:	2e00      	cmp	r6, #0
 8001458:	d000      	beq.n	800145c <__aeabi_dadd+0x350>
 800145a:	e0fa      	b.n	8001652 <__aeabi_dadd+0x546>
 800145c:	2a00      	cmp	r2, #0
 800145e:	d100      	bne.n	8001462 <__aeabi_dadd+0x356>
 8001460:	e145      	b.n	80016ee <__aeabi_dadd+0x5e2>
 8001462:	003a      	movs	r2, r7
 8001464:	430a      	orrs	r2, r1
 8001466:	d000      	beq.n	800146a <__aeabi_dadd+0x35e>
 8001468:	e146      	b.n	80016f8 <__aeabi_dadd+0x5ec>
 800146a:	0742      	lsls	r2, r0, #29
 800146c:	08db      	lsrs	r3, r3, #3
 800146e:	4313      	orrs	r3, r2
 8001470:	08c0      	lsrs	r0, r0, #3
 8001472:	e77b      	b.n	800136c <__aeabi_dadd+0x260>
 8001474:	000007ff 	.word	0x000007ff
 8001478:	ff7fffff 	.word	0xff7fffff
 800147c:	000007fe 	.word	0x000007fe
 8001480:	4647      	mov	r7, r8
 8001482:	1a5c      	subs	r4, r3, r1
 8001484:	1bc2      	subs	r2, r0, r7
 8001486:	42a3      	cmp	r3, r4
 8001488:	41bf      	sbcs	r7, r7
 800148a:	427f      	negs	r7, r7
 800148c:	46b9      	mov	r9, r7
 800148e:	0017      	movs	r7, r2
 8001490:	464a      	mov	r2, r9
 8001492:	1abf      	subs	r7, r7, r2
 8001494:	023a      	lsls	r2, r7, #8
 8001496:	d500      	bpl.n	800149a <__aeabi_dadd+0x38e>
 8001498:	e08d      	b.n	80015b6 <__aeabi_dadd+0x4aa>
 800149a:	0023      	movs	r3, r4
 800149c:	433b      	orrs	r3, r7
 800149e:	d000      	beq.n	80014a2 <__aeabi_dadd+0x396>
 80014a0:	e68a      	b.n	80011b8 <__aeabi_dadd+0xac>
 80014a2:	2000      	movs	r0, #0
 80014a4:	2500      	movs	r5, #0
 80014a6:	e761      	b.n	800136c <__aeabi_dadd+0x260>
 80014a8:	4cb4      	ldr	r4, [pc, #720]	; (800177c <__aeabi_dadd+0x670>)
 80014aa:	45a1      	cmp	r9, r4
 80014ac:	d100      	bne.n	80014b0 <__aeabi_dadd+0x3a4>
 80014ae:	e0ad      	b.n	800160c <__aeabi_dadd+0x500>
 80014b0:	2480      	movs	r4, #128	; 0x80
 80014b2:	0424      	lsls	r4, r4, #16
 80014b4:	4320      	orrs	r0, r4
 80014b6:	4664      	mov	r4, ip
 80014b8:	2c38      	cmp	r4, #56	; 0x38
 80014ba:	dc3d      	bgt.n	8001538 <__aeabi_dadd+0x42c>
 80014bc:	4662      	mov	r2, ip
 80014be:	2c1f      	cmp	r4, #31
 80014c0:	dd00      	ble.n	80014c4 <__aeabi_dadd+0x3b8>
 80014c2:	e0b7      	b.n	8001634 <__aeabi_dadd+0x528>
 80014c4:	2520      	movs	r5, #32
 80014c6:	001e      	movs	r6, r3
 80014c8:	1b2d      	subs	r5, r5, r4
 80014ca:	0004      	movs	r4, r0
 80014cc:	40ab      	lsls	r3, r5
 80014ce:	40ac      	lsls	r4, r5
 80014d0:	40d6      	lsrs	r6, r2
 80014d2:	40d0      	lsrs	r0, r2
 80014d4:	4642      	mov	r2, r8
 80014d6:	1e5d      	subs	r5, r3, #1
 80014d8:	41ab      	sbcs	r3, r5
 80014da:	4334      	orrs	r4, r6
 80014dc:	1a12      	subs	r2, r2, r0
 80014de:	4690      	mov	r8, r2
 80014e0:	4323      	orrs	r3, r4
 80014e2:	e02c      	b.n	800153e <__aeabi_dadd+0x432>
 80014e4:	0742      	lsls	r2, r0, #29
 80014e6:	08db      	lsrs	r3, r3, #3
 80014e8:	4313      	orrs	r3, r2
 80014ea:	08c0      	lsrs	r0, r0, #3
 80014ec:	e73b      	b.n	8001366 <__aeabi_dadd+0x25a>
 80014ee:	185c      	adds	r4, r3, r1
 80014f0:	429c      	cmp	r4, r3
 80014f2:	419b      	sbcs	r3, r3
 80014f4:	4440      	add	r0, r8
 80014f6:	425b      	negs	r3, r3
 80014f8:	18c7      	adds	r7, r0, r3
 80014fa:	2601      	movs	r6, #1
 80014fc:	023b      	lsls	r3, r7, #8
 80014fe:	d400      	bmi.n	8001502 <__aeabi_dadd+0x3f6>
 8001500:	e729      	b.n	8001356 <__aeabi_dadd+0x24a>
 8001502:	2602      	movs	r6, #2
 8001504:	4a9e      	ldr	r2, [pc, #632]	; (8001780 <__aeabi_dadd+0x674>)
 8001506:	0863      	lsrs	r3, r4, #1
 8001508:	4017      	ands	r7, r2
 800150a:	2201      	movs	r2, #1
 800150c:	4014      	ands	r4, r2
 800150e:	431c      	orrs	r4, r3
 8001510:	07fb      	lsls	r3, r7, #31
 8001512:	431c      	orrs	r4, r3
 8001514:	087f      	lsrs	r7, r7, #1
 8001516:	e673      	b.n	8001200 <__aeabi_dadd+0xf4>
 8001518:	4644      	mov	r4, r8
 800151a:	3a20      	subs	r2, #32
 800151c:	40d4      	lsrs	r4, r2
 800151e:	4662      	mov	r2, ip
 8001520:	2a20      	cmp	r2, #32
 8001522:	d005      	beq.n	8001530 <__aeabi_dadd+0x424>
 8001524:	4667      	mov	r7, ip
 8001526:	2240      	movs	r2, #64	; 0x40
 8001528:	1bd2      	subs	r2, r2, r7
 800152a:	4647      	mov	r7, r8
 800152c:	4097      	lsls	r7, r2
 800152e:	4339      	orrs	r1, r7
 8001530:	1e4a      	subs	r2, r1, #1
 8001532:	4191      	sbcs	r1, r2
 8001534:	4321      	orrs	r1, r4
 8001536:	e635      	b.n	80011a4 <__aeabi_dadd+0x98>
 8001538:	4303      	orrs	r3, r0
 800153a:	1e58      	subs	r0, r3, #1
 800153c:	4183      	sbcs	r3, r0
 800153e:	1acc      	subs	r4, r1, r3
 8001540:	42a1      	cmp	r1, r4
 8001542:	41bf      	sbcs	r7, r7
 8001544:	4643      	mov	r3, r8
 8001546:	427f      	negs	r7, r7
 8001548:	4655      	mov	r5, sl
 800154a:	464e      	mov	r6, r9
 800154c:	1bdf      	subs	r7, r3, r7
 800154e:	e62e      	b.n	80011ae <__aeabi_dadd+0xa2>
 8001550:	0002      	movs	r2, r0
 8001552:	431a      	orrs	r2, r3
 8001554:	d100      	bne.n	8001558 <__aeabi_dadd+0x44c>
 8001556:	e0bd      	b.n	80016d4 <__aeabi_dadd+0x5c8>
 8001558:	4662      	mov	r2, ip
 800155a:	4664      	mov	r4, ip
 800155c:	3a01      	subs	r2, #1
 800155e:	2c01      	cmp	r4, #1
 8001560:	d100      	bne.n	8001564 <__aeabi_dadd+0x458>
 8001562:	e0e5      	b.n	8001730 <__aeabi_dadd+0x624>
 8001564:	4c85      	ldr	r4, [pc, #532]	; (800177c <__aeabi_dadd+0x670>)
 8001566:	45a4      	cmp	ip, r4
 8001568:	d058      	beq.n	800161c <__aeabi_dadd+0x510>
 800156a:	4694      	mov	ip, r2
 800156c:	e749      	b.n	8001402 <__aeabi_dadd+0x2f6>
 800156e:	4664      	mov	r4, ip
 8001570:	2220      	movs	r2, #32
 8001572:	1b12      	subs	r2, r2, r4
 8001574:	4644      	mov	r4, r8
 8001576:	4094      	lsls	r4, r2
 8001578:	000f      	movs	r7, r1
 800157a:	46a1      	mov	r9, r4
 800157c:	4664      	mov	r4, ip
 800157e:	4091      	lsls	r1, r2
 8001580:	40e7      	lsrs	r7, r4
 8001582:	464c      	mov	r4, r9
 8001584:	1e4a      	subs	r2, r1, #1
 8001586:	4191      	sbcs	r1, r2
 8001588:	433c      	orrs	r4, r7
 800158a:	4642      	mov	r2, r8
 800158c:	430c      	orrs	r4, r1
 800158e:	4661      	mov	r1, ip
 8001590:	40ca      	lsrs	r2, r1
 8001592:	1880      	adds	r0, r0, r2
 8001594:	e6f4      	b.n	8001380 <__aeabi_dadd+0x274>
 8001596:	4c79      	ldr	r4, [pc, #484]	; (800177c <__aeabi_dadd+0x670>)
 8001598:	42a2      	cmp	r2, r4
 800159a:	d100      	bne.n	800159e <__aeabi_dadd+0x492>
 800159c:	e6fd      	b.n	800139a <__aeabi_dadd+0x28e>
 800159e:	1859      	adds	r1, r3, r1
 80015a0:	4299      	cmp	r1, r3
 80015a2:	419b      	sbcs	r3, r3
 80015a4:	4440      	add	r0, r8
 80015a6:	425f      	negs	r7, r3
 80015a8:	19c7      	adds	r7, r0, r7
 80015aa:	07fc      	lsls	r4, r7, #31
 80015ac:	0849      	lsrs	r1, r1, #1
 80015ae:	0016      	movs	r6, r2
 80015b0:	430c      	orrs	r4, r1
 80015b2:	087f      	lsrs	r7, r7, #1
 80015b4:	e6cf      	b.n	8001356 <__aeabi_dadd+0x24a>
 80015b6:	1acc      	subs	r4, r1, r3
 80015b8:	42a1      	cmp	r1, r4
 80015ba:	41bf      	sbcs	r7, r7
 80015bc:	4643      	mov	r3, r8
 80015be:	427f      	negs	r7, r7
 80015c0:	1a18      	subs	r0, r3, r0
 80015c2:	4655      	mov	r5, sl
 80015c4:	1bc7      	subs	r7, r0, r7
 80015c6:	e5f7      	b.n	80011b8 <__aeabi_dadd+0xac>
 80015c8:	08c9      	lsrs	r1, r1, #3
 80015ca:	077b      	lsls	r3, r7, #29
 80015cc:	4655      	mov	r5, sl
 80015ce:	430b      	orrs	r3, r1
 80015d0:	08f8      	lsrs	r0, r7, #3
 80015d2:	e6c8      	b.n	8001366 <__aeabi_dadd+0x25a>
 80015d4:	2c00      	cmp	r4, #0
 80015d6:	d000      	beq.n	80015da <__aeabi_dadd+0x4ce>
 80015d8:	e081      	b.n	80016de <__aeabi_dadd+0x5d2>
 80015da:	4643      	mov	r3, r8
 80015dc:	430b      	orrs	r3, r1
 80015de:	d115      	bne.n	800160c <__aeabi_dadd+0x500>
 80015e0:	2080      	movs	r0, #128	; 0x80
 80015e2:	2500      	movs	r5, #0
 80015e4:	0300      	lsls	r0, r0, #12
 80015e6:	e6e3      	b.n	80013b0 <__aeabi_dadd+0x2a4>
 80015e8:	1a5c      	subs	r4, r3, r1
 80015ea:	42a3      	cmp	r3, r4
 80015ec:	419b      	sbcs	r3, r3
 80015ee:	1bc7      	subs	r7, r0, r7
 80015f0:	425b      	negs	r3, r3
 80015f2:	2601      	movs	r6, #1
 80015f4:	1aff      	subs	r7, r7, r3
 80015f6:	e5da      	b.n	80011ae <__aeabi_dadd+0xa2>
 80015f8:	0742      	lsls	r2, r0, #29
 80015fa:	08db      	lsrs	r3, r3, #3
 80015fc:	4313      	orrs	r3, r2
 80015fe:	08c0      	lsrs	r0, r0, #3
 8001600:	e6d2      	b.n	80013a8 <__aeabi_dadd+0x29c>
 8001602:	0742      	lsls	r2, r0, #29
 8001604:	08db      	lsrs	r3, r3, #3
 8001606:	4313      	orrs	r3, r2
 8001608:	08c0      	lsrs	r0, r0, #3
 800160a:	e6ac      	b.n	8001366 <__aeabi_dadd+0x25a>
 800160c:	4643      	mov	r3, r8
 800160e:	4642      	mov	r2, r8
 8001610:	08c9      	lsrs	r1, r1, #3
 8001612:	075b      	lsls	r3, r3, #29
 8001614:	4655      	mov	r5, sl
 8001616:	430b      	orrs	r3, r1
 8001618:	08d0      	lsrs	r0, r2, #3
 800161a:	e6c5      	b.n	80013a8 <__aeabi_dadd+0x29c>
 800161c:	4643      	mov	r3, r8
 800161e:	4642      	mov	r2, r8
 8001620:	075b      	lsls	r3, r3, #29
 8001622:	08c9      	lsrs	r1, r1, #3
 8001624:	430b      	orrs	r3, r1
 8001626:	08d0      	lsrs	r0, r2, #3
 8001628:	e6be      	b.n	80013a8 <__aeabi_dadd+0x29c>
 800162a:	4303      	orrs	r3, r0
 800162c:	001c      	movs	r4, r3
 800162e:	1e63      	subs	r3, r4, #1
 8001630:	419c      	sbcs	r4, r3
 8001632:	e6fc      	b.n	800142e <__aeabi_dadd+0x322>
 8001634:	0002      	movs	r2, r0
 8001636:	3c20      	subs	r4, #32
 8001638:	40e2      	lsrs	r2, r4
 800163a:	0014      	movs	r4, r2
 800163c:	4662      	mov	r2, ip
 800163e:	2a20      	cmp	r2, #32
 8001640:	d003      	beq.n	800164a <__aeabi_dadd+0x53e>
 8001642:	2540      	movs	r5, #64	; 0x40
 8001644:	1aad      	subs	r5, r5, r2
 8001646:	40a8      	lsls	r0, r5
 8001648:	4303      	orrs	r3, r0
 800164a:	1e58      	subs	r0, r3, #1
 800164c:	4183      	sbcs	r3, r0
 800164e:	4323      	orrs	r3, r4
 8001650:	e775      	b.n	800153e <__aeabi_dadd+0x432>
 8001652:	2a00      	cmp	r2, #0
 8001654:	d0e2      	beq.n	800161c <__aeabi_dadd+0x510>
 8001656:	003a      	movs	r2, r7
 8001658:	430a      	orrs	r2, r1
 800165a:	d0cd      	beq.n	80015f8 <__aeabi_dadd+0x4ec>
 800165c:	0742      	lsls	r2, r0, #29
 800165e:	08db      	lsrs	r3, r3, #3
 8001660:	4313      	orrs	r3, r2
 8001662:	2280      	movs	r2, #128	; 0x80
 8001664:	08c0      	lsrs	r0, r0, #3
 8001666:	0312      	lsls	r2, r2, #12
 8001668:	4210      	tst	r0, r2
 800166a:	d006      	beq.n	800167a <__aeabi_dadd+0x56e>
 800166c:	08fc      	lsrs	r4, r7, #3
 800166e:	4214      	tst	r4, r2
 8001670:	d103      	bne.n	800167a <__aeabi_dadd+0x56e>
 8001672:	0020      	movs	r0, r4
 8001674:	08cb      	lsrs	r3, r1, #3
 8001676:	077a      	lsls	r2, r7, #29
 8001678:	4313      	orrs	r3, r2
 800167a:	0f5a      	lsrs	r2, r3, #29
 800167c:	00db      	lsls	r3, r3, #3
 800167e:	0752      	lsls	r2, r2, #29
 8001680:	08db      	lsrs	r3, r3, #3
 8001682:	4313      	orrs	r3, r2
 8001684:	e690      	b.n	80013a8 <__aeabi_dadd+0x29c>
 8001686:	4643      	mov	r3, r8
 8001688:	430b      	orrs	r3, r1
 800168a:	d100      	bne.n	800168e <__aeabi_dadd+0x582>
 800168c:	e709      	b.n	80014a2 <__aeabi_dadd+0x396>
 800168e:	4643      	mov	r3, r8
 8001690:	4642      	mov	r2, r8
 8001692:	08c9      	lsrs	r1, r1, #3
 8001694:	075b      	lsls	r3, r3, #29
 8001696:	4655      	mov	r5, sl
 8001698:	430b      	orrs	r3, r1
 800169a:	08d0      	lsrs	r0, r2, #3
 800169c:	e666      	b.n	800136c <__aeabi_dadd+0x260>
 800169e:	1acc      	subs	r4, r1, r3
 80016a0:	42a1      	cmp	r1, r4
 80016a2:	4189      	sbcs	r1, r1
 80016a4:	1a3f      	subs	r7, r7, r0
 80016a6:	4249      	negs	r1, r1
 80016a8:	4655      	mov	r5, sl
 80016aa:	2601      	movs	r6, #1
 80016ac:	1a7f      	subs	r7, r7, r1
 80016ae:	e57e      	b.n	80011ae <__aeabi_dadd+0xa2>
 80016b0:	4642      	mov	r2, r8
 80016b2:	1a5c      	subs	r4, r3, r1
 80016b4:	1a87      	subs	r7, r0, r2
 80016b6:	42a3      	cmp	r3, r4
 80016b8:	4192      	sbcs	r2, r2
 80016ba:	4252      	negs	r2, r2
 80016bc:	1abf      	subs	r7, r7, r2
 80016be:	023a      	lsls	r2, r7, #8
 80016c0:	d53d      	bpl.n	800173e <__aeabi_dadd+0x632>
 80016c2:	1acc      	subs	r4, r1, r3
 80016c4:	42a1      	cmp	r1, r4
 80016c6:	4189      	sbcs	r1, r1
 80016c8:	4643      	mov	r3, r8
 80016ca:	4249      	negs	r1, r1
 80016cc:	1a1f      	subs	r7, r3, r0
 80016ce:	4655      	mov	r5, sl
 80016d0:	1a7f      	subs	r7, r7, r1
 80016d2:	e595      	b.n	8001200 <__aeabi_dadd+0xf4>
 80016d4:	077b      	lsls	r3, r7, #29
 80016d6:	08c9      	lsrs	r1, r1, #3
 80016d8:	430b      	orrs	r3, r1
 80016da:	08f8      	lsrs	r0, r7, #3
 80016dc:	e643      	b.n	8001366 <__aeabi_dadd+0x25a>
 80016de:	4644      	mov	r4, r8
 80016e0:	08db      	lsrs	r3, r3, #3
 80016e2:	430c      	orrs	r4, r1
 80016e4:	d130      	bne.n	8001748 <__aeabi_dadd+0x63c>
 80016e6:	0742      	lsls	r2, r0, #29
 80016e8:	4313      	orrs	r3, r2
 80016ea:	08c0      	lsrs	r0, r0, #3
 80016ec:	e65c      	b.n	80013a8 <__aeabi_dadd+0x29c>
 80016ee:	077b      	lsls	r3, r7, #29
 80016f0:	08c9      	lsrs	r1, r1, #3
 80016f2:	430b      	orrs	r3, r1
 80016f4:	08f8      	lsrs	r0, r7, #3
 80016f6:	e639      	b.n	800136c <__aeabi_dadd+0x260>
 80016f8:	185c      	adds	r4, r3, r1
 80016fa:	429c      	cmp	r4, r3
 80016fc:	419b      	sbcs	r3, r3
 80016fe:	4440      	add	r0, r8
 8001700:	425b      	negs	r3, r3
 8001702:	18c7      	adds	r7, r0, r3
 8001704:	023b      	lsls	r3, r7, #8
 8001706:	d400      	bmi.n	800170a <__aeabi_dadd+0x5fe>
 8001708:	e625      	b.n	8001356 <__aeabi_dadd+0x24a>
 800170a:	4b1d      	ldr	r3, [pc, #116]	; (8001780 <__aeabi_dadd+0x674>)
 800170c:	2601      	movs	r6, #1
 800170e:	401f      	ands	r7, r3
 8001710:	e621      	b.n	8001356 <__aeabi_dadd+0x24a>
 8001712:	0004      	movs	r4, r0
 8001714:	3a20      	subs	r2, #32
 8001716:	40d4      	lsrs	r4, r2
 8001718:	4662      	mov	r2, ip
 800171a:	2a20      	cmp	r2, #32
 800171c:	d004      	beq.n	8001728 <__aeabi_dadd+0x61c>
 800171e:	2240      	movs	r2, #64	; 0x40
 8001720:	4666      	mov	r6, ip
 8001722:	1b92      	subs	r2, r2, r6
 8001724:	4090      	lsls	r0, r2
 8001726:	4303      	orrs	r3, r0
 8001728:	1e5a      	subs	r2, r3, #1
 800172a:	4193      	sbcs	r3, r2
 800172c:	431c      	orrs	r4, r3
 800172e:	e67e      	b.n	800142e <__aeabi_dadd+0x322>
 8001730:	185c      	adds	r4, r3, r1
 8001732:	428c      	cmp	r4, r1
 8001734:	4189      	sbcs	r1, r1
 8001736:	4440      	add	r0, r8
 8001738:	4249      	negs	r1, r1
 800173a:	1847      	adds	r7, r0, r1
 800173c:	e6dd      	b.n	80014fa <__aeabi_dadd+0x3ee>
 800173e:	0023      	movs	r3, r4
 8001740:	433b      	orrs	r3, r7
 8001742:	d100      	bne.n	8001746 <__aeabi_dadd+0x63a>
 8001744:	e6ad      	b.n	80014a2 <__aeabi_dadd+0x396>
 8001746:	e606      	b.n	8001356 <__aeabi_dadd+0x24a>
 8001748:	0744      	lsls	r4, r0, #29
 800174a:	4323      	orrs	r3, r4
 800174c:	2480      	movs	r4, #128	; 0x80
 800174e:	08c0      	lsrs	r0, r0, #3
 8001750:	0324      	lsls	r4, r4, #12
 8001752:	4220      	tst	r0, r4
 8001754:	d008      	beq.n	8001768 <__aeabi_dadd+0x65c>
 8001756:	4642      	mov	r2, r8
 8001758:	08d6      	lsrs	r6, r2, #3
 800175a:	4226      	tst	r6, r4
 800175c:	d104      	bne.n	8001768 <__aeabi_dadd+0x65c>
 800175e:	4655      	mov	r5, sl
 8001760:	0030      	movs	r0, r6
 8001762:	08cb      	lsrs	r3, r1, #3
 8001764:	0751      	lsls	r1, r2, #29
 8001766:	430b      	orrs	r3, r1
 8001768:	0f5a      	lsrs	r2, r3, #29
 800176a:	00db      	lsls	r3, r3, #3
 800176c:	08db      	lsrs	r3, r3, #3
 800176e:	0752      	lsls	r2, r2, #29
 8001770:	4313      	orrs	r3, r2
 8001772:	e619      	b.n	80013a8 <__aeabi_dadd+0x29c>
 8001774:	2300      	movs	r3, #0
 8001776:	4a01      	ldr	r2, [pc, #4]	; (800177c <__aeabi_dadd+0x670>)
 8001778:	001f      	movs	r7, r3
 800177a:	e55e      	b.n	800123a <__aeabi_dadd+0x12e>
 800177c:	000007ff 	.word	0x000007ff
 8001780:	ff7fffff 	.word	0xff7fffff

08001784 <__aeabi_ddiv>:
 8001784:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001786:	4657      	mov	r7, sl
 8001788:	464e      	mov	r6, r9
 800178a:	4645      	mov	r5, r8
 800178c:	46de      	mov	lr, fp
 800178e:	b5e0      	push	{r5, r6, r7, lr}
 8001790:	4681      	mov	r9, r0
 8001792:	0005      	movs	r5, r0
 8001794:	030c      	lsls	r4, r1, #12
 8001796:	0048      	lsls	r0, r1, #1
 8001798:	4692      	mov	sl, r2
 800179a:	001f      	movs	r7, r3
 800179c:	b085      	sub	sp, #20
 800179e:	0b24      	lsrs	r4, r4, #12
 80017a0:	0d40      	lsrs	r0, r0, #21
 80017a2:	0fce      	lsrs	r6, r1, #31
 80017a4:	2800      	cmp	r0, #0
 80017a6:	d100      	bne.n	80017aa <__aeabi_ddiv+0x26>
 80017a8:	e156      	b.n	8001a58 <__aeabi_ddiv+0x2d4>
 80017aa:	4bd4      	ldr	r3, [pc, #848]	; (8001afc <__aeabi_ddiv+0x378>)
 80017ac:	4298      	cmp	r0, r3
 80017ae:	d100      	bne.n	80017b2 <__aeabi_ddiv+0x2e>
 80017b0:	e172      	b.n	8001a98 <__aeabi_ddiv+0x314>
 80017b2:	0f6b      	lsrs	r3, r5, #29
 80017b4:	00e4      	lsls	r4, r4, #3
 80017b6:	431c      	orrs	r4, r3
 80017b8:	2380      	movs	r3, #128	; 0x80
 80017ba:	041b      	lsls	r3, r3, #16
 80017bc:	4323      	orrs	r3, r4
 80017be:	4698      	mov	r8, r3
 80017c0:	4bcf      	ldr	r3, [pc, #828]	; (8001b00 <__aeabi_ddiv+0x37c>)
 80017c2:	00ed      	lsls	r5, r5, #3
 80017c4:	469b      	mov	fp, r3
 80017c6:	2300      	movs	r3, #0
 80017c8:	4699      	mov	r9, r3
 80017ca:	4483      	add	fp, r0
 80017cc:	9300      	str	r3, [sp, #0]
 80017ce:	033c      	lsls	r4, r7, #12
 80017d0:	007b      	lsls	r3, r7, #1
 80017d2:	4650      	mov	r0, sl
 80017d4:	0b24      	lsrs	r4, r4, #12
 80017d6:	0d5b      	lsrs	r3, r3, #21
 80017d8:	0fff      	lsrs	r7, r7, #31
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d100      	bne.n	80017e0 <__aeabi_ddiv+0x5c>
 80017de:	e11f      	b.n	8001a20 <__aeabi_ddiv+0x29c>
 80017e0:	4ac6      	ldr	r2, [pc, #792]	; (8001afc <__aeabi_ddiv+0x378>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d100      	bne.n	80017e8 <__aeabi_ddiv+0x64>
 80017e6:	e162      	b.n	8001aae <__aeabi_ddiv+0x32a>
 80017e8:	49c5      	ldr	r1, [pc, #788]	; (8001b00 <__aeabi_ddiv+0x37c>)
 80017ea:	0f42      	lsrs	r2, r0, #29
 80017ec:	468c      	mov	ip, r1
 80017ee:	00e4      	lsls	r4, r4, #3
 80017f0:	4659      	mov	r1, fp
 80017f2:	4314      	orrs	r4, r2
 80017f4:	2280      	movs	r2, #128	; 0x80
 80017f6:	4463      	add	r3, ip
 80017f8:	0412      	lsls	r2, r2, #16
 80017fa:	1acb      	subs	r3, r1, r3
 80017fc:	4314      	orrs	r4, r2
 80017fe:	469b      	mov	fp, r3
 8001800:	00c2      	lsls	r2, r0, #3
 8001802:	2000      	movs	r0, #0
 8001804:	0033      	movs	r3, r6
 8001806:	407b      	eors	r3, r7
 8001808:	469a      	mov	sl, r3
 800180a:	464b      	mov	r3, r9
 800180c:	2b0f      	cmp	r3, #15
 800180e:	d827      	bhi.n	8001860 <__aeabi_ddiv+0xdc>
 8001810:	49bc      	ldr	r1, [pc, #752]	; (8001b04 <__aeabi_ddiv+0x380>)
 8001812:	009b      	lsls	r3, r3, #2
 8001814:	58cb      	ldr	r3, [r1, r3]
 8001816:	469f      	mov	pc, r3
 8001818:	46b2      	mov	sl, r6
 800181a:	9b00      	ldr	r3, [sp, #0]
 800181c:	2b02      	cmp	r3, #2
 800181e:	d016      	beq.n	800184e <__aeabi_ddiv+0xca>
 8001820:	2b03      	cmp	r3, #3
 8001822:	d100      	bne.n	8001826 <__aeabi_ddiv+0xa2>
 8001824:	e28e      	b.n	8001d44 <__aeabi_ddiv+0x5c0>
 8001826:	2b01      	cmp	r3, #1
 8001828:	d000      	beq.n	800182c <__aeabi_ddiv+0xa8>
 800182a:	e0d9      	b.n	80019e0 <__aeabi_ddiv+0x25c>
 800182c:	2300      	movs	r3, #0
 800182e:	2400      	movs	r4, #0
 8001830:	2500      	movs	r5, #0
 8001832:	4652      	mov	r2, sl
 8001834:	051b      	lsls	r3, r3, #20
 8001836:	4323      	orrs	r3, r4
 8001838:	07d2      	lsls	r2, r2, #31
 800183a:	4313      	orrs	r3, r2
 800183c:	0028      	movs	r0, r5
 800183e:	0019      	movs	r1, r3
 8001840:	b005      	add	sp, #20
 8001842:	bcf0      	pop	{r4, r5, r6, r7}
 8001844:	46bb      	mov	fp, r7
 8001846:	46b2      	mov	sl, r6
 8001848:	46a9      	mov	r9, r5
 800184a:	46a0      	mov	r8, r4
 800184c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800184e:	2400      	movs	r4, #0
 8001850:	2500      	movs	r5, #0
 8001852:	4baa      	ldr	r3, [pc, #680]	; (8001afc <__aeabi_ddiv+0x378>)
 8001854:	e7ed      	b.n	8001832 <__aeabi_ddiv+0xae>
 8001856:	46ba      	mov	sl, r7
 8001858:	46a0      	mov	r8, r4
 800185a:	0015      	movs	r5, r2
 800185c:	9000      	str	r0, [sp, #0]
 800185e:	e7dc      	b.n	800181a <__aeabi_ddiv+0x96>
 8001860:	4544      	cmp	r4, r8
 8001862:	d200      	bcs.n	8001866 <__aeabi_ddiv+0xe2>
 8001864:	e1c7      	b.n	8001bf6 <__aeabi_ddiv+0x472>
 8001866:	d100      	bne.n	800186a <__aeabi_ddiv+0xe6>
 8001868:	e1c2      	b.n	8001bf0 <__aeabi_ddiv+0x46c>
 800186a:	2301      	movs	r3, #1
 800186c:	425b      	negs	r3, r3
 800186e:	469c      	mov	ip, r3
 8001870:	002e      	movs	r6, r5
 8001872:	4640      	mov	r0, r8
 8001874:	2500      	movs	r5, #0
 8001876:	44e3      	add	fp, ip
 8001878:	0223      	lsls	r3, r4, #8
 800187a:	0e14      	lsrs	r4, r2, #24
 800187c:	431c      	orrs	r4, r3
 800187e:	0c1b      	lsrs	r3, r3, #16
 8001880:	4699      	mov	r9, r3
 8001882:	0423      	lsls	r3, r4, #16
 8001884:	0c1f      	lsrs	r7, r3, #16
 8001886:	0212      	lsls	r2, r2, #8
 8001888:	4649      	mov	r1, r9
 800188a:	9200      	str	r2, [sp, #0]
 800188c:	9701      	str	r7, [sp, #4]
 800188e:	f7fe fce3 	bl	8000258 <__aeabi_uidivmod>
 8001892:	0002      	movs	r2, r0
 8001894:	437a      	muls	r2, r7
 8001896:	040b      	lsls	r3, r1, #16
 8001898:	0c31      	lsrs	r1, r6, #16
 800189a:	4680      	mov	r8, r0
 800189c:	4319      	orrs	r1, r3
 800189e:	428a      	cmp	r2, r1
 80018a0:	d907      	bls.n	80018b2 <__aeabi_ddiv+0x12e>
 80018a2:	2301      	movs	r3, #1
 80018a4:	425b      	negs	r3, r3
 80018a6:	469c      	mov	ip, r3
 80018a8:	1909      	adds	r1, r1, r4
 80018aa:	44e0      	add	r8, ip
 80018ac:	428c      	cmp	r4, r1
 80018ae:	d800      	bhi.n	80018b2 <__aeabi_ddiv+0x12e>
 80018b0:	e207      	b.n	8001cc2 <__aeabi_ddiv+0x53e>
 80018b2:	1a88      	subs	r0, r1, r2
 80018b4:	4649      	mov	r1, r9
 80018b6:	f7fe fccf 	bl	8000258 <__aeabi_uidivmod>
 80018ba:	0409      	lsls	r1, r1, #16
 80018bc:	468c      	mov	ip, r1
 80018be:	0431      	lsls	r1, r6, #16
 80018c0:	4666      	mov	r6, ip
 80018c2:	9a01      	ldr	r2, [sp, #4]
 80018c4:	0c09      	lsrs	r1, r1, #16
 80018c6:	4342      	muls	r2, r0
 80018c8:	0003      	movs	r3, r0
 80018ca:	4331      	orrs	r1, r6
 80018cc:	428a      	cmp	r2, r1
 80018ce:	d904      	bls.n	80018da <__aeabi_ddiv+0x156>
 80018d0:	1909      	adds	r1, r1, r4
 80018d2:	3b01      	subs	r3, #1
 80018d4:	428c      	cmp	r4, r1
 80018d6:	d800      	bhi.n	80018da <__aeabi_ddiv+0x156>
 80018d8:	e1ed      	b.n	8001cb6 <__aeabi_ddiv+0x532>
 80018da:	1a88      	subs	r0, r1, r2
 80018dc:	4642      	mov	r2, r8
 80018de:	0412      	lsls	r2, r2, #16
 80018e0:	431a      	orrs	r2, r3
 80018e2:	4690      	mov	r8, r2
 80018e4:	4641      	mov	r1, r8
 80018e6:	9b00      	ldr	r3, [sp, #0]
 80018e8:	040e      	lsls	r6, r1, #16
 80018ea:	0c1b      	lsrs	r3, r3, #16
 80018ec:	001f      	movs	r7, r3
 80018ee:	9302      	str	r3, [sp, #8]
 80018f0:	9b00      	ldr	r3, [sp, #0]
 80018f2:	0c36      	lsrs	r6, r6, #16
 80018f4:	041b      	lsls	r3, r3, #16
 80018f6:	0c19      	lsrs	r1, r3, #16
 80018f8:	000b      	movs	r3, r1
 80018fa:	4373      	muls	r3, r6
 80018fc:	0c12      	lsrs	r2, r2, #16
 80018fe:	437e      	muls	r6, r7
 8001900:	9103      	str	r1, [sp, #12]
 8001902:	4351      	muls	r1, r2
 8001904:	437a      	muls	r2, r7
 8001906:	0c1f      	lsrs	r7, r3, #16
 8001908:	46bc      	mov	ip, r7
 800190a:	1876      	adds	r6, r6, r1
 800190c:	4466      	add	r6, ip
 800190e:	42b1      	cmp	r1, r6
 8001910:	d903      	bls.n	800191a <__aeabi_ddiv+0x196>
 8001912:	2180      	movs	r1, #128	; 0x80
 8001914:	0249      	lsls	r1, r1, #9
 8001916:	468c      	mov	ip, r1
 8001918:	4462      	add	r2, ip
 800191a:	0c31      	lsrs	r1, r6, #16
 800191c:	188a      	adds	r2, r1, r2
 800191e:	0431      	lsls	r1, r6, #16
 8001920:	041e      	lsls	r6, r3, #16
 8001922:	0c36      	lsrs	r6, r6, #16
 8001924:	198e      	adds	r6, r1, r6
 8001926:	4290      	cmp	r0, r2
 8001928:	d302      	bcc.n	8001930 <__aeabi_ddiv+0x1ac>
 800192a:	d112      	bne.n	8001952 <__aeabi_ddiv+0x1ce>
 800192c:	42b5      	cmp	r5, r6
 800192e:	d210      	bcs.n	8001952 <__aeabi_ddiv+0x1ce>
 8001930:	4643      	mov	r3, r8
 8001932:	1e59      	subs	r1, r3, #1
 8001934:	9b00      	ldr	r3, [sp, #0]
 8001936:	469c      	mov	ip, r3
 8001938:	4465      	add	r5, ip
 800193a:	001f      	movs	r7, r3
 800193c:	429d      	cmp	r5, r3
 800193e:	419b      	sbcs	r3, r3
 8001940:	425b      	negs	r3, r3
 8001942:	191b      	adds	r3, r3, r4
 8001944:	18c0      	adds	r0, r0, r3
 8001946:	4284      	cmp	r4, r0
 8001948:	d200      	bcs.n	800194c <__aeabi_ddiv+0x1c8>
 800194a:	e1a0      	b.n	8001c8e <__aeabi_ddiv+0x50a>
 800194c:	d100      	bne.n	8001950 <__aeabi_ddiv+0x1cc>
 800194e:	e19b      	b.n	8001c88 <__aeabi_ddiv+0x504>
 8001950:	4688      	mov	r8, r1
 8001952:	1bae      	subs	r6, r5, r6
 8001954:	42b5      	cmp	r5, r6
 8001956:	41ad      	sbcs	r5, r5
 8001958:	1a80      	subs	r0, r0, r2
 800195a:	426d      	negs	r5, r5
 800195c:	1b40      	subs	r0, r0, r5
 800195e:	4284      	cmp	r4, r0
 8001960:	d100      	bne.n	8001964 <__aeabi_ddiv+0x1e0>
 8001962:	e1d5      	b.n	8001d10 <__aeabi_ddiv+0x58c>
 8001964:	4649      	mov	r1, r9
 8001966:	f7fe fc77 	bl	8000258 <__aeabi_uidivmod>
 800196a:	9a01      	ldr	r2, [sp, #4]
 800196c:	040b      	lsls	r3, r1, #16
 800196e:	4342      	muls	r2, r0
 8001970:	0c31      	lsrs	r1, r6, #16
 8001972:	0005      	movs	r5, r0
 8001974:	4319      	orrs	r1, r3
 8001976:	428a      	cmp	r2, r1
 8001978:	d900      	bls.n	800197c <__aeabi_ddiv+0x1f8>
 800197a:	e16c      	b.n	8001c56 <__aeabi_ddiv+0x4d2>
 800197c:	1a88      	subs	r0, r1, r2
 800197e:	4649      	mov	r1, r9
 8001980:	f7fe fc6a 	bl	8000258 <__aeabi_uidivmod>
 8001984:	9a01      	ldr	r2, [sp, #4]
 8001986:	0436      	lsls	r6, r6, #16
 8001988:	4342      	muls	r2, r0
 800198a:	0409      	lsls	r1, r1, #16
 800198c:	0c36      	lsrs	r6, r6, #16
 800198e:	0003      	movs	r3, r0
 8001990:	430e      	orrs	r6, r1
 8001992:	42b2      	cmp	r2, r6
 8001994:	d900      	bls.n	8001998 <__aeabi_ddiv+0x214>
 8001996:	e153      	b.n	8001c40 <__aeabi_ddiv+0x4bc>
 8001998:	9803      	ldr	r0, [sp, #12]
 800199a:	1ab6      	subs	r6, r6, r2
 800199c:	0002      	movs	r2, r0
 800199e:	042d      	lsls	r5, r5, #16
 80019a0:	431d      	orrs	r5, r3
 80019a2:	9f02      	ldr	r7, [sp, #8]
 80019a4:	042b      	lsls	r3, r5, #16
 80019a6:	0c1b      	lsrs	r3, r3, #16
 80019a8:	435a      	muls	r2, r3
 80019aa:	437b      	muls	r3, r7
 80019ac:	469c      	mov	ip, r3
 80019ae:	0c29      	lsrs	r1, r5, #16
 80019b0:	4348      	muls	r0, r1
 80019b2:	0c13      	lsrs	r3, r2, #16
 80019b4:	4484      	add	ip, r0
 80019b6:	4463      	add	r3, ip
 80019b8:	4379      	muls	r1, r7
 80019ba:	4298      	cmp	r0, r3
 80019bc:	d903      	bls.n	80019c6 <__aeabi_ddiv+0x242>
 80019be:	2080      	movs	r0, #128	; 0x80
 80019c0:	0240      	lsls	r0, r0, #9
 80019c2:	4684      	mov	ip, r0
 80019c4:	4461      	add	r1, ip
 80019c6:	0c18      	lsrs	r0, r3, #16
 80019c8:	0412      	lsls	r2, r2, #16
 80019ca:	041b      	lsls	r3, r3, #16
 80019cc:	0c12      	lsrs	r2, r2, #16
 80019ce:	1841      	adds	r1, r0, r1
 80019d0:	189b      	adds	r3, r3, r2
 80019d2:	428e      	cmp	r6, r1
 80019d4:	d200      	bcs.n	80019d8 <__aeabi_ddiv+0x254>
 80019d6:	e0ff      	b.n	8001bd8 <__aeabi_ddiv+0x454>
 80019d8:	d100      	bne.n	80019dc <__aeabi_ddiv+0x258>
 80019da:	e0fa      	b.n	8001bd2 <__aeabi_ddiv+0x44e>
 80019dc:	2301      	movs	r3, #1
 80019de:	431d      	orrs	r5, r3
 80019e0:	4a49      	ldr	r2, [pc, #292]	; (8001b08 <__aeabi_ddiv+0x384>)
 80019e2:	445a      	add	r2, fp
 80019e4:	2a00      	cmp	r2, #0
 80019e6:	dc00      	bgt.n	80019ea <__aeabi_ddiv+0x266>
 80019e8:	e0aa      	b.n	8001b40 <__aeabi_ddiv+0x3bc>
 80019ea:	076b      	lsls	r3, r5, #29
 80019ec:	d000      	beq.n	80019f0 <__aeabi_ddiv+0x26c>
 80019ee:	e13d      	b.n	8001c6c <__aeabi_ddiv+0x4e8>
 80019f0:	08ed      	lsrs	r5, r5, #3
 80019f2:	4643      	mov	r3, r8
 80019f4:	01db      	lsls	r3, r3, #7
 80019f6:	d506      	bpl.n	8001a06 <__aeabi_ddiv+0x282>
 80019f8:	4642      	mov	r2, r8
 80019fa:	4b44      	ldr	r3, [pc, #272]	; (8001b0c <__aeabi_ddiv+0x388>)
 80019fc:	401a      	ands	r2, r3
 80019fe:	4690      	mov	r8, r2
 8001a00:	2280      	movs	r2, #128	; 0x80
 8001a02:	00d2      	lsls	r2, r2, #3
 8001a04:	445a      	add	r2, fp
 8001a06:	4b42      	ldr	r3, [pc, #264]	; (8001b10 <__aeabi_ddiv+0x38c>)
 8001a08:	429a      	cmp	r2, r3
 8001a0a:	dd00      	ble.n	8001a0e <__aeabi_ddiv+0x28a>
 8001a0c:	e71f      	b.n	800184e <__aeabi_ddiv+0xca>
 8001a0e:	4643      	mov	r3, r8
 8001a10:	075b      	lsls	r3, r3, #29
 8001a12:	431d      	orrs	r5, r3
 8001a14:	4643      	mov	r3, r8
 8001a16:	0552      	lsls	r2, r2, #21
 8001a18:	025c      	lsls	r4, r3, #9
 8001a1a:	0b24      	lsrs	r4, r4, #12
 8001a1c:	0d53      	lsrs	r3, r2, #21
 8001a1e:	e708      	b.n	8001832 <__aeabi_ddiv+0xae>
 8001a20:	4652      	mov	r2, sl
 8001a22:	4322      	orrs	r2, r4
 8001a24:	d100      	bne.n	8001a28 <__aeabi_ddiv+0x2a4>
 8001a26:	e07b      	b.n	8001b20 <__aeabi_ddiv+0x39c>
 8001a28:	2c00      	cmp	r4, #0
 8001a2a:	d100      	bne.n	8001a2e <__aeabi_ddiv+0x2aa>
 8001a2c:	e0fa      	b.n	8001c24 <__aeabi_ddiv+0x4a0>
 8001a2e:	0020      	movs	r0, r4
 8001a30:	f001 fa22 	bl	8002e78 <__clzsi2>
 8001a34:	0002      	movs	r2, r0
 8001a36:	3a0b      	subs	r2, #11
 8001a38:	231d      	movs	r3, #29
 8001a3a:	0001      	movs	r1, r0
 8001a3c:	1a9b      	subs	r3, r3, r2
 8001a3e:	4652      	mov	r2, sl
 8001a40:	3908      	subs	r1, #8
 8001a42:	40da      	lsrs	r2, r3
 8001a44:	408c      	lsls	r4, r1
 8001a46:	4314      	orrs	r4, r2
 8001a48:	4652      	mov	r2, sl
 8001a4a:	408a      	lsls	r2, r1
 8001a4c:	4b31      	ldr	r3, [pc, #196]	; (8001b14 <__aeabi_ddiv+0x390>)
 8001a4e:	4458      	add	r0, fp
 8001a50:	469b      	mov	fp, r3
 8001a52:	4483      	add	fp, r0
 8001a54:	2000      	movs	r0, #0
 8001a56:	e6d5      	b.n	8001804 <__aeabi_ddiv+0x80>
 8001a58:	464b      	mov	r3, r9
 8001a5a:	4323      	orrs	r3, r4
 8001a5c:	4698      	mov	r8, r3
 8001a5e:	d044      	beq.n	8001aea <__aeabi_ddiv+0x366>
 8001a60:	2c00      	cmp	r4, #0
 8001a62:	d100      	bne.n	8001a66 <__aeabi_ddiv+0x2e2>
 8001a64:	e0ce      	b.n	8001c04 <__aeabi_ddiv+0x480>
 8001a66:	0020      	movs	r0, r4
 8001a68:	f001 fa06 	bl	8002e78 <__clzsi2>
 8001a6c:	0001      	movs	r1, r0
 8001a6e:	0002      	movs	r2, r0
 8001a70:	390b      	subs	r1, #11
 8001a72:	231d      	movs	r3, #29
 8001a74:	1a5b      	subs	r3, r3, r1
 8001a76:	4649      	mov	r1, r9
 8001a78:	0010      	movs	r0, r2
 8001a7a:	40d9      	lsrs	r1, r3
 8001a7c:	3808      	subs	r0, #8
 8001a7e:	4084      	lsls	r4, r0
 8001a80:	000b      	movs	r3, r1
 8001a82:	464d      	mov	r5, r9
 8001a84:	4323      	orrs	r3, r4
 8001a86:	4698      	mov	r8, r3
 8001a88:	4085      	lsls	r5, r0
 8001a8a:	4823      	ldr	r0, [pc, #140]	; (8001b18 <__aeabi_ddiv+0x394>)
 8001a8c:	1a83      	subs	r3, r0, r2
 8001a8e:	469b      	mov	fp, r3
 8001a90:	2300      	movs	r3, #0
 8001a92:	4699      	mov	r9, r3
 8001a94:	9300      	str	r3, [sp, #0]
 8001a96:	e69a      	b.n	80017ce <__aeabi_ddiv+0x4a>
 8001a98:	464b      	mov	r3, r9
 8001a9a:	4323      	orrs	r3, r4
 8001a9c:	4698      	mov	r8, r3
 8001a9e:	d11d      	bne.n	8001adc <__aeabi_ddiv+0x358>
 8001aa0:	2308      	movs	r3, #8
 8001aa2:	4699      	mov	r9, r3
 8001aa4:	3b06      	subs	r3, #6
 8001aa6:	2500      	movs	r5, #0
 8001aa8:	4683      	mov	fp, r0
 8001aaa:	9300      	str	r3, [sp, #0]
 8001aac:	e68f      	b.n	80017ce <__aeabi_ddiv+0x4a>
 8001aae:	4652      	mov	r2, sl
 8001ab0:	4322      	orrs	r2, r4
 8001ab2:	d109      	bne.n	8001ac8 <__aeabi_ddiv+0x344>
 8001ab4:	2302      	movs	r3, #2
 8001ab6:	4649      	mov	r1, r9
 8001ab8:	4319      	orrs	r1, r3
 8001aba:	4b18      	ldr	r3, [pc, #96]	; (8001b1c <__aeabi_ddiv+0x398>)
 8001abc:	4689      	mov	r9, r1
 8001abe:	469c      	mov	ip, r3
 8001ac0:	2400      	movs	r4, #0
 8001ac2:	2002      	movs	r0, #2
 8001ac4:	44e3      	add	fp, ip
 8001ac6:	e69d      	b.n	8001804 <__aeabi_ddiv+0x80>
 8001ac8:	2303      	movs	r3, #3
 8001aca:	464a      	mov	r2, r9
 8001acc:	431a      	orrs	r2, r3
 8001ace:	4b13      	ldr	r3, [pc, #76]	; (8001b1c <__aeabi_ddiv+0x398>)
 8001ad0:	4691      	mov	r9, r2
 8001ad2:	469c      	mov	ip, r3
 8001ad4:	4652      	mov	r2, sl
 8001ad6:	2003      	movs	r0, #3
 8001ad8:	44e3      	add	fp, ip
 8001ada:	e693      	b.n	8001804 <__aeabi_ddiv+0x80>
 8001adc:	230c      	movs	r3, #12
 8001ade:	4699      	mov	r9, r3
 8001ae0:	3b09      	subs	r3, #9
 8001ae2:	46a0      	mov	r8, r4
 8001ae4:	4683      	mov	fp, r0
 8001ae6:	9300      	str	r3, [sp, #0]
 8001ae8:	e671      	b.n	80017ce <__aeabi_ddiv+0x4a>
 8001aea:	2304      	movs	r3, #4
 8001aec:	4699      	mov	r9, r3
 8001aee:	2300      	movs	r3, #0
 8001af0:	469b      	mov	fp, r3
 8001af2:	3301      	adds	r3, #1
 8001af4:	2500      	movs	r5, #0
 8001af6:	9300      	str	r3, [sp, #0]
 8001af8:	e669      	b.n	80017ce <__aeabi_ddiv+0x4a>
 8001afa:	46c0      	nop			; (mov r8, r8)
 8001afc:	000007ff 	.word	0x000007ff
 8001b00:	fffffc01 	.word	0xfffffc01
 8001b04:	0800be28 	.word	0x0800be28
 8001b08:	000003ff 	.word	0x000003ff
 8001b0c:	feffffff 	.word	0xfeffffff
 8001b10:	000007fe 	.word	0x000007fe
 8001b14:	000003f3 	.word	0x000003f3
 8001b18:	fffffc0d 	.word	0xfffffc0d
 8001b1c:	fffff801 	.word	0xfffff801
 8001b20:	4649      	mov	r1, r9
 8001b22:	2301      	movs	r3, #1
 8001b24:	4319      	orrs	r1, r3
 8001b26:	4689      	mov	r9, r1
 8001b28:	2400      	movs	r4, #0
 8001b2a:	2001      	movs	r0, #1
 8001b2c:	e66a      	b.n	8001804 <__aeabi_ddiv+0x80>
 8001b2e:	2300      	movs	r3, #0
 8001b30:	2480      	movs	r4, #128	; 0x80
 8001b32:	469a      	mov	sl, r3
 8001b34:	2500      	movs	r5, #0
 8001b36:	4b8a      	ldr	r3, [pc, #552]	; (8001d60 <__aeabi_ddiv+0x5dc>)
 8001b38:	0324      	lsls	r4, r4, #12
 8001b3a:	e67a      	b.n	8001832 <__aeabi_ddiv+0xae>
 8001b3c:	2501      	movs	r5, #1
 8001b3e:	426d      	negs	r5, r5
 8001b40:	2301      	movs	r3, #1
 8001b42:	1a9b      	subs	r3, r3, r2
 8001b44:	2b38      	cmp	r3, #56	; 0x38
 8001b46:	dd00      	ble.n	8001b4a <__aeabi_ddiv+0x3c6>
 8001b48:	e670      	b.n	800182c <__aeabi_ddiv+0xa8>
 8001b4a:	2b1f      	cmp	r3, #31
 8001b4c:	dc00      	bgt.n	8001b50 <__aeabi_ddiv+0x3cc>
 8001b4e:	e0bf      	b.n	8001cd0 <__aeabi_ddiv+0x54c>
 8001b50:	211f      	movs	r1, #31
 8001b52:	4249      	negs	r1, r1
 8001b54:	1a8a      	subs	r2, r1, r2
 8001b56:	4641      	mov	r1, r8
 8001b58:	40d1      	lsrs	r1, r2
 8001b5a:	000a      	movs	r2, r1
 8001b5c:	2b20      	cmp	r3, #32
 8001b5e:	d004      	beq.n	8001b6a <__aeabi_ddiv+0x3e6>
 8001b60:	4641      	mov	r1, r8
 8001b62:	4b80      	ldr	r3, [pc, #512]	; (8001d64 <__aeabi_ddiv+0x5e0>)
 8001b64:	445b      	add	r3, fp
 8001b66:	4099      	lsls	r1, r3
 8001b68:	430d      	orrs	r5, r1
 8001b6a:	1e6b      	subs	r3, r5, #1
 8001b6c:	419d      	sbcs	r5, r3
 8001b6e:	2307      	movs	r3, #7
 8001b70:	432a      	orrs	r2, r5
 8001b72:	001d      	movs	r5, r3
 8001b74:	2400      	movs	r4, #0
 8001b76:	4015      	ands	r5, r2
 8001b78:	4213      	tst	r3, r2
 8001b7a:	d100      	bne.n	8001b7e <__aeabi_ddiv+0x3fa>
 8001b7c:	e0d4      	b.n	8001d28 <__aeabi_ddiv+0x5a4>
 8001b7e:	210f      	movs	r1, #15
 8001b80:	2300      	movs	r3, #0
 8001b82:	4011      	ands	r1, r2
 8001b84:	2904      	cmp	r1, #4
 8001b86:	d100      	bne.n	8001b8a <__aeabi_ddiv+0x406>
 8001b88:	e0cb      	b.n	8001d22 <__aeabi_ddiv+0x59e>
 8001b8a:	1d11      	adds	r1, r2, #4
 8001b8c:	4291      	cmp	r1, r2
 8001b8e:	4192      	sbcs	r2, r2
 8001b90:	4252      	negs	r2, r2
 8001b92:	189b      	adds	r3, r3, r2
 8001b94:	000a      	movs	r2, r1
 8001b96:	0219      	lsls	r1, r3, #8
 8001b98:	d400      	bmi.n	8001b9c <__aeabi_ddiv+0x418>
 8001b9a:	e0c2      	b.n	8001d22 <__aeabi_ddiv+0x59e>
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	2400      	movs	r4, #0
 8001ba0:	2500      	movs	r5, #0
 8001ba2:	e646      	b.n	8001832 <__aeabi_ddiv+0xae>
 8001ba4:	2380      	movs	r3, #128	; 0x80
 8001ba6:	4641      	mov	r1, r8
 8001ba8:	031b      	lsls	r3, r3, #12
 8001baa:	4219      	tst	r1, r3
 8001bac:	d008      	beq.n	8001bc0 <__aeabi_ddiv+0x43c>
 8001bae:	421c      	tst	r4, r3
 8001bb0:	d106      	bne.n	8001bc0 <__aeabi_ddiv+0x43c>
 8001bb2:	431c      	orrs	r4, r3
 8001bb4:	0324      	lsls	r4, r4, #12
 8001bb6:	46ba      	mov	sl, r7
 8001bb8:	0015      	movs	r5, r2
 8001bba:	4b69      	ldr	r3, [pc, #420]	; (8001d60 <__aeabi_ddiv+0x5dc>)
 8001bbc:	0b24      	lsrs	r4, r4, #12
 8001bbe:	e638      	b.n	8001832 <__aeabi_ddiv+0xae>
 8001bc0:	2480      	movs	r4, #128	; 0x80
 8001bc2:	4643      	mov	r3, r8
 8001bc4:	0324      	lsls	r4, r4, #12
 8001bc6:	431c      	orrs	r4, r3
 8001bc8:	0324      	lsls	r4, r4, #12
 8001bca:	46b2      	mov	sl, r6
 8001bcc:	4b64      	ldr	r3, [pc, #400]	; (8001d60 <__aeabi_ddiv+0x5dc>)
 8001bce:	0b24      	lsrs	r4, r4, #12
 8001bd0:	e62f      	b.n	8001832 <__aeabi_ddiv+0xae>
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d100      	bne.n	8001bd8 <__aeabi_ddiv+0x454>
 8001bd6:	e703      	b.n	80019e0 <__aeabi_ddiv+0x25c>
 8001bd8:	19a6      	adds	r6, r4, r6
 8001bda:	1e68      	subs	r0, r5, #1
 8001bdc:	42a6      	cmp	r6, r4
 8001bde:	d200      	bcs.n	8001be2 <__aeabi_ddiv+0x45e>
 8001be0:	e08d      	b.n	8001cfe <__aeabi_ddiv+0x57a>
 8001be2:	428e      	cmp	r6, r1
 8001be4:	d200      	bcs.n	8001be8 <__aeabi_ddiv+0x464>
 8001be6:	e0a3      	b.n	8001d30 <__aeabi_ddiv+0x5ac>
 8001be8:	d100      	bne.n	8001bec <__aeabi_ddiv+0x468>
 8001bea:	e0b3      	b.n	8001d54 <__aeabi_ddiv+0x5d0>
 8001bec:	0005      	movs	r5, r0
 8001bee:	e6f5      	b.n	80019dc <__aeabi_ddiv+0x258>
 8001bf0:	42aa      	cmp	r2, r5
 8001bf2:	d900      	bls.n	8001bf6 <__aeabi_ddiv+0x472>
 8001bf4:	e639      	b.n	800186a <__aeabi_ddiv+0xe6>
 8001bf6:	4643      	mov	r3, r8
 8001bf8:	07de      	lsls	r6, r3, #31
 8001bfa:	0858      	lsrs	r0, r3, #1
 8001bfc:	086b      	lsrs	r3, r5, #1
 8001bfe:	431e      	orrs	r6, r3
 8001c00:	07ed      	lsls	r5, r5, #31
 8001c02:	e639      	b.n	8001878 <__aeabi_ddiv+0xf4>
 8001c04:	4648      	mov	r0, r9
 8001c06:	f001 f937 	bl	8002e78 <__clzsi2>
 8001c0a:	0001      	movs	r1, r0
 8001c0c:	0002      	movs	r2, r0
 8001c0e:	3115      	adds	r1, #21
 8001c10:	3220      	adds	r2, #32
 8001c12:	291c      	cmp	r1, #28
 8001c14:	dc00      	bgt.n	8001c18 <__aeabi_ddiv+0x494>
 8001c16:	e72c      	b.n	8001a72 <__aeabi_ddiv+0x2ee>
 8001c18:	464b      	mov	r3, r9
 8001c1a:	3808      	subs	r0, #8
 8001c1c:	4083      	lsls	r3, r0
 8001c1e:	2500      	movs	r5, #0
 8001c20:	4698      	mov	r8, r3
 8001c22:	e732      	b.n	8001a8a <__aeabi_ddiv+0x306>
 8001c24:	f001 f928 	bl	8002e78 <__clzsi2>
 8001c28:	0003      	movs	r3, r0
 8001c2a:	001a      	movs	r2, r3
 8001c2c:	3215      	adds	r2, #21
 8001c2e:	3020      	adds	r0, #32
 8001c30:	2a1c      	cmp	r2, #28
 8001c32:	dc00      	bgt.n	8001c36 <__aeabi_ddiv+0x4b2>
 8001c34:	e700      	b.n	8001a38 <__aeabi_ddiv+0x2b4>
 8001c36:	4654      	mov	r4, sl
 8001c38:	3b08      	subs	r3, #8
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	409c      	lsls	r4, r3
 8001c3e:	e705      	b.n	8001a4c <__aeabi_ddiv+0x2c8>
 8001c40:	1936      	adds	r6, r6, r4
 8001c42:	3b01      	subs	r3, #1
 8001c44:	42b4      	cmp	r4, r6
 8001c46:	d900      	bls.n	8001c4a <__aeabi_ddiv+0x4c6>
 8001c48:	e6a6      	b.n	8001998 <__aeabi_ddiv+0x214>
 8001c4a:	42b2      	cmp	r2, r6
 8001c4c:	d800      	bhi.n	8001c50 <__aeabi_ddiv+0x4cc>
 8001c4e:	e6a3      	b.n	8001998 <__aeabi_ddiv+0x214>
 8001c50:	1e83      	subs	r3, r0, #2
 8001c52:	1936      	adds	r6, r6, r4
 8001c54:	e6a0      	b.n	8001998 <__aeabi_ddiv+0x214>
 8001c56:	1909      	adds	r1, r1, r4
 8001c58:	3d01      	subs	r5, #1
 8001c5a:	428c      	cmp	r4, r1
 8001c5c:	d900      	bls.n	8001c60 <__aeabi_ddiv+0x4dc>
 8001c5e:	e68d      	b.n	800197c <__aeabi_ddiv+0x1f8>
 8001c60:	428a      	cmp	r2, r1
 8001c62:	d800      	bhi.n	8001c66 <__aeabi_ddiv+0x4e2>
 8001c64:	e68a      	b.n	800197c <__aeabi_ddiv+0x1f8>
 8001c66:	1e85      	subs	r5, r0, #2
 8001c68:	1909      	adds	r1, r1, r4
 8001c6a:	e687      	b.n	800197c <__aeabi_ddiv+0x1f8>
 8001c6c:	230f      	movs	r3, #15
 8001c6e:	402b      	ands	r3, r5
 8001c70:	2b04      	cmp	r3, #4
 8001c72:	d100      	bne.n	8001c76 <__aeabi_ddiv+0x4f2>
 8001c74:	e6bc      	b.n	80019f0 <__aeabi_ddiv+0x26c>
 8001c76:	2305      	movs	r3, #5
 8001c78:	425b      	negs	r3, r3
 8001c7a:	42ab      	cmp	r3, r5
 8001c7c:	419b      	sbcs	r3, r3
 8001c7e:	3504      	adds	r5, #4
 8001c80:	425b      	negs	r3, r3
 8001c82:	08ed      	lsrs	r5, r5, #3
 8001c84:	4498      	add	r8, r3
 8001c86:	e6b4      	b.n	80019f2 <__aeabi_ddiv+0x26e>
 8001c88:	42af      	cmp	r7, r5
 8001c8a:	d900      	bls.n	8001c8e <__aeabi_ddiv+0x50a>
 8001c8c:	e660      	b.n	8001950 <__aeabi_ddiv+0x1cc>
 8001c8e:	4282      	cmp	r2, r0
 8001c90:	d804      	bhi.n	8001c9c <__aeabi_ddiv+0x518>
 8001c92:	d000      	beq.n	8001c96 <__aeabi_ddiv+0x512>
 8001c94:	e65c      	b.n	8001950 <__aeabi_ddiv+0x1cc>
 8001c96:	42ae      	cmp	r6, r5
 8001c98:	d800      	bhi.n	8001c9c <__aeabi_ddiv+0x518>
 8001c9a:	e659      	b.n	8001950 <__aeabi_ddiv+0x1cc>
 8001c9c:	2302      	movs	r3, #2
 8001c9e:	425b      	negs	r3, r3
 8001ca0:	469c      	mov	ip, r3
 8001ca2:	9b00      	ldr	r3, [sp, #0]
 8001ca4:	44e0      	add	r8, ip
 8001ca6:	469c      	mov	ip, r3
 8001ca8:	4465      	add	r5, ip
 8001caa:	429d      	cmp	r5, r3
 8001cac:	419b      	sbcs	r3, r3
 8001cae:	425b      	negs	r3, r3
 8001cb0:	191b      	adds	r3, r3, r4
 8001cb2:	18c0      	adds	r0, r0, r3
 8001cb4:	e64d      	b.n	8001952 <__aeabi_ddiv+0x1ce>
 8001cb6:	428a      	cmp	r2, r1
 8001cb8:	d800      	bhi.n	8001cbc <__aeabi_ddiv+0x538>
 8001cba:	e60e      	b.n	80018da <__aeabi_ddiv+0x156>
 8001cbc:	1e83      	subs	r3, r0, #2
 8001cbe:	1909      	adds	r1, r1, r4
 8001cc0:	e60b      	b.n	80018da <__aeabi_ddiv+0x156>
 8001cc2:	428a      	cmp	r2, r1
 8001cc4:	d800      	bhi.n	8001cc8 <__aeabi_ddiv+0x544>
 8001cc6:	e5f4      	b.n	80018b2 <__aeabi_ddiv+0x12e>
 8001cc8:	1e83      	subs	r3, r0, #2
 8001cca:	4698      	mov	r8, r3
 8001ccc:	1909      	adds	r1, r1, r4
 8001cce:	e5f0      	b.n	80018b2 <__aeabi_ddiv+0x12e>
 8001cd0:	4925      	ldr	r1, [pc, #148]	; (8001d68 <__aeabi_ddiv+0x5e4>)
 8001cd2:	0028      	movs	r0, r5
 8001cd4:	4459      	add	r1, fp
 8001cd6:	408d      	lsls	r5, r1
 8001cd8:	4642      	mov	r2, r8
 8001cda:	408a      	lsls	r2, r1
 8001cdc:	1e69      	subs	r1, r5, #1
 8001cde:	418d      	sbcs	r5, r1
 8001ce0:	4641      	mov	r1, r8
 8001ce2:	40d8      	lsrs	r0, r3
 8001ce4:	40d9      	lsrs	r1, r3
 8001ce6:	4302      	orrs	r2, r0
 8001ce8:	432a      	orrs	r2, r5
 8001cea:	000b      	movs	r3, r1
 8001cec:	0751      	lsls	r1, r2, #29
 8001cee:	d100      	bne.n	8001cf2 <__aeabi_ddiv+0x56e>
 8001cf0:	e751      	b.n	8001b96 <__aeabi_ddiv+0x412>
 8001cf2:	210f      	movs	r1, #15
 8001cf4:	4011      	ands	r1, r2
 8001cf6:	2904      	cmp	r1, #4
 8001cf8:	d000      	beq.n	8001cfc <__aeabi_ddiv+0x578>
 8001cfa:	e746      	b.n	8001b8a <__aeabi_ddiv+0x406>
 8001cfc:	e74b      	b.n	8001b96 <__aeabi_ddiv+0x412>
 8001cfe:	0005      	movs	r5, r0
 8001d00:	428e      	cmp	r6, r1
 8001d02:	d000      	beq.n	8001d06 <__aeabi_ddiv+0x582>
 8001d04:	e66a      	b.n	80019dc <__aeabi_ddiv+0x258>
 8001d06:	9a00      	ldr	r2, [sp, #0]
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d000      	beq.n	8001d0e <__aeabi_ddiv+0x58a>
 8001d0c:	e666      	b.n	80019dc <__aeabi_ddiv+0x258>
 8001d0e:	e667      	b.n	80019e0 <__aeabi_ddiv+0x25c>
 8001d10:	4a16      	ldr	r2, [pc, #88]	; (8001d6c <__aeabi_ddiv+0x5e8>)
 8001d12:	445a      	add	r2, fp
 8001d14:	2a00      	cmp	r2, #0
 8001d16:	dc00      	bgt.n	8001d1a <__aeabi_ddiv+0x596>
 8001d18:	e710      	b.n	8001b3c <__aeabi_ddiv+0x3b8>
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	2500      	movs	r5, #0
 8001d1e:	4498      	add	r8, r3
 8001d20:	e667      	b.n	80019f2 <__aeabi_ddiv+0x26e>
 8001d22:	075d      	lsls	r5, r3, #29
 8001d24:	025b      	lsls	r3, r3, #9
 8001d26:	0b1c      	lsrs	r4, r3, #12
 8001d28:	08d2      	lsrs	r2, r2, #3
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	4315      	orrs	r5, r2
 8001d2e:	e580      	b.n	8001832 <__aeabi_ddiv+0xae>
 8001d30:	9800      	ldr	r0, [sp, #0]
 8001d32:	3d02      	subs	r5, #2
 8001d34:	0042      	lsls	r2, r0, #1
 8001d36:	4282      	cmp	r2, r0
 8001d38:	41bf      	sbcs	r7, r7
 8001d3a:	427f      	negs	r7, r7
 8001d3c:	193c      	adds	r4, r7, r4
 8001d3e:	1936      	adds	r6, r6, r4
 8001d40:	9200      	str	r2, [sp, #0]
 8001d42:	e7dd      	b.n	8001d00 <__aeabi_ddiv+0x57c>
 8001d44:	2480      	movs	r4, #128	; 0x80
 8001d46:	4643      	mov	r3, r8
 8001d48:	0324      	lsls	r4, r4, #12
 8001d4a:	431c      	orrs	r4, r3
 8001d4c:	0324      	lsls	r4, r4, #12
 8001d4e:	4b04      	ldr	r3, [pc, #16]	; (8001d60 <__aeabi_ddiv+0x5dc>)
 8001d50:	0b24      	lsrs	r4, r4, #12
 8001d52:	e56e      	b.n	8001832 <__aeabi_ddiv+0xae>
 8001d54:	9a00      	ldr	r2, [sp, #0]
 8001d56:	429a      	cmp	r2, r3
 8001d58:	d3ea      	bcc.n	8001d30 <__aeabi_ddiv+0x5ac>
 8001d5a:	0005      	movs	r5, r0
 8001d5c:	e7d3      	b.n	8001d06 <__aeabi_ddiv+0x582>
 8001d5e:	46c0      	nop			; (mov r8, r8)
 8001d60:	000007ff 	.word	0x000007ff
 8001d64:	0000043e 	.word	0x0000043e
 8001d68:	0000041e 	.word	0x0000041e
 8001d6c:	000003ff 	.word	0x000003ff

08001d70 <__eqdf2>:
 8001d70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d72:	464e      	mov	r6, r9
 8001d74:	4645      	mov	r5, r8
 8001d76:	46de      	mov	lr, fp
 8001d78:	4657      	mov	r7, sl
 8001d7a:	4690      	mov	r8, r2
 8001d7c:	b5e0      	push	{r5, r6, r7, lr}
 8001d7e:	0017      	movs	r7, r2
 8001d80:	031a      	lsls	r2, r3, #12
 8001d82:	0b12      	lsrs	r2, r2, #12
 8001d84:	0005      	movs	r5, r0
 8001d86:	4684      	mov	ip, r0
 8001d88:	4819      	ldr	r0, [pc, #100]	; (8001df0 <__eqdf2+0x80>)
 8001d8a:	030e      	lsls	r6, r1, #12
 8001d8c:	004c      	lsls	r4, r1, #1
 8001d8e:	4691      	mov	r9, r2
 8001d90:	005a      	lsls	r2, r3, #1
 8001d92:	0fdb      	lsrs	r3, r3, #31
 8001d94:	469b      	mov	fp, r3
 8001d96:	0b36      	lsrs	r6, r6, #12
 8001d98:	0d64      	lsrs	r4, r4, #21
 8001d9a:	0fc9      	lsrs	r1, r1, #31
 8001d9c:	0d52      	lsrs	r2, r2, #21
 8001d9e:	4284      	cmp	r4, r0
 8001da0:	d019      	beq.n	8001dd6 <__eqdf2+0x66>
 8001da2:	4282      	cmp	r2, r0
 8001da4:	d010      	beq.n	8001dc8 <__eqdf2+0x58>
 8001da6:	2001      	movs	r0, #1
 8001da8:	4294      	cmp	r4, r2
 8001daa:	d10e      	bne.n	8001dca <__eqdf2+0x5a>
 8001dac:	454e      	cmp	r6, r9
 8001dae:	d10c      	bne.n	8001dca <__eqdf2+0x5a>
 8001db0:	2001      	movs	r0, #1
 8001db2:	45c4      	cmp	ip, r8
 8001db4:	d109      	bne.n	8001dca <__eqdf2+0x5a>
 8001db6:	4559      	cmp	r1, fp
 8001db8:	d017      	beq.n	8001dea <__eqdf2+0x7a>
 8001dba:	2c00      	cmp	r4, #0
 8001dbc:	d105      	bne.n	8001dca <__eqdf2+0x5a>
 8001dbe:	0030      	movs	r0, r6
 8001dc0:	4328      	orrs	r0, r5
 8001dc2:	1e43      	subs	r3, r0, #1
 8001dc4:	4198      	sbcs	r0, r3
 8001dc6:	e000      	b.n	8001dca <__eqdf2+0x5a>
 8001dc8:	2001      	movs	r0, #1
 8001dca:	bcf0      	pop	{r4, r5, r6, r7}
 8001dcc:	46bb      	mov	fp, r7
 8001dce:	46b2      	mov	sl, r6
 8001dd0:	46a9      	mov	r9, r5
 8001dd2:	46a0      	mov	r8, r4
 8001dd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001dd6:	0033      	movs	r3, r6
 8001dd8:	2001      	movs	r0, #1
 8001dda:	432b      	orrs	r3, r5
 8001ddc:	d1f5      	bne.n	8001dca <__eqdf2+0x5a>
 8001dde:	42a2      	cmp	r2, r4
 8001de0:	d1f3      	bne.n	8001dca <__eqdf2+0x5a>
 8001de2:	464b      	mov	r3, r9
 8001de4:	433b      	orrs	r3, r7
 8001de6:	d1f0      	bne.n	8001dca <__eqdf2+0x5a>
 8001de8:	e7e2      	b.n	8001db0 <__eqdf2+0x40>
 8001dea:	2000      	movs	r0, #0
 8001dec:	e7ed      	b.n	8001dca <__eqdf2+0x5a>
 8001dee:	46c0      	nop			; (mov r8, r8)
 8001df0:	000007ff 	.word	0x000007ff

08001df4 <__gedf2>:
 8001df4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001df6:	4647      	mov	r7, r8
 8001df8:	46ce      	mov	lr, r9
 8001dfa:	0004      	movs	r4, r0
 8001dfc:	0018      	movs	r0, r3
 8001dfe:	0016      	movs	r6, r2
 8001e00:	031b      	lsls	r3, r3, #12
 8001e02:	0b1b      	lsrs	r3, r3, #12
 8001e04:	4d2d      	ldr	r5, [pc, #180]	; (8001ebc <__gedf2+0xc8>)
 8001e06:	004a      	lsls	r2, r1, #1
 8001e08:	4699      	mov	r9, r3
 8001e0a:	b580      	push	{r7, lr}
 8001e0c:	0043      	lsls	r3, r0, #1
 8001e0e:	030f      	lsls	r7, r1, #12
 8001e10:	46a4      	mov	ip, r4
 8001e12:	46b0      	mov	r8, r6
 8001e14:	0b3f      	lsrs	r7, r7, #12
 8001e16:	0d52      	lsrs	r2, r2, #21
 8001e18:	0fc9      	lsrs	r1, r1, #31
 8001e1a:	0d5b      	lsrs	r3, r3, #21
 8001e1c:	0fc0      	lsrs	r0, r0, #31
 8001e1e:	42aa      	cmp	r2, r5
 8001e20:	d021      	beq.n	8001e66 <__gedf2+0x72>
 8001e22:	42ab      	cmp	r3, r5
 8001e24:	d013      	beq.n	8001e4e <__gedf2+0x5a>
 8001e26:	2a00      	cmp	r2, #0
 8001e28:	d122      	bne.n	8001e70 <__gedf2+0x7c>
 8001e2a:	433c      	orrs	r4, r7
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d102      	bne.n	8001e36 <__gedf2+0x42>
 8001e30:	464d      	mov	r5, r9
 8001e32:	432e      	orrs	r6, r5
 8001e34:	d022      	beq.n	8001e7c <__gedf2+0x88>
 8001e36:	2c00      	cmp	r4, #0
 8001e38:	d010      	beq.n	8001e5c <__gedf2+0x68>
 8001e3a:	4281      	cmp	r1, r0
 8001e3c:	d022      	beq.n	8001e84 <__gedf2+0x90>
 8001e3e:	2002      	movs	r0, #2
 8001e40:	3901      	subs	r1, #1
 8001e42:	4008      	ands	r0, r1
 8001e44:	3801      	subs	r0, #1
 8001e46:	bcc0      	pop	{r6, r7}
 8001e48:	46b9      	mov	r9, r7
 8001e4a:	46b0      	mov	r8, r6
 8001e4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e4e:	464d      	mov	r5, r9
 8001e50:	432e      	orrs	r6, r5
 8001e52:	d129      	bne.n	8001ea8 <__gedf2+0xb4>
 8001e54:	2a00      	cmp	r2, #0
 8001e56:	d1f0      	bne.n	8001e3a <__gedf2+0x46>
 8001e58:	433c      	orrs	r4, r7
 8001e5a:	d1ee      	bne.n	8001e3a <__gedf2+0x46>
 8001e5c:	2800      	cmp	r0, #0
 8001e5e:	d1f2      	bne.n	8001e46 <__gedf2+0x52>
 8001e60:	2001      	movs	r0, #1
 8001e62:	4240      	negs	r0, r0
 8001e64:	e7ef      	b.n	8001e46 <__gedf2+0x52>
 8001e66:	003d      	movs	r5, r7
 8001e68:	4325      	orrs	r5, r4
 8001e6a:	d11d      	bne.n	8001ea8 <__gedf2+0xb4>
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d0ee      	beq.n	8001e4e <__gedf2+0x5a>
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d1e2      	bne.n	8001e3a <__gedf2+0x46>
 8001e74:	464c      	mov	r4, r9
 8001e76:	4326      	orrs	r6, r4
 8001e78:	d1df      	bne.n	8001e3a <__gedf2+0x46>
 8001e7a:	e7e0      	b.n	8001e3e <__gedf2+0x4a>
 8001e7c:	2000      	movs	r0, #0
 8001e7e:	2c00      	cmp	r4, #0
 8001e80:	d0e1      	beq.n	8001e46 <__gedf2+0x52>
 8001e82:	e7dc      	b.n	8001e3e <__gedf2+0x4a>
 8001e84:	429a      	cmp	r2, r3
 8001e86:	dc0a      	bgt.n	8001e9e <__gedf2+0xaa>
 8001e88:	dbe8      	blt.n	8001e5c <__gedf2+0x68>
 8001e8a:	454f      	cmp	r7, r9
 8001e8c:	d8d7      	bhi.n	8001e3e <__gedf2+0x4a>
 8001e8e:	d00e      	beq.n	8001eae <__gedf2+0xba>
 8001e90:	2000      	movs	r0, #0
 8001e92:	454f      	cmp	r7, r9
 8001e94:	d2d7      	bcs.n	8001e46 <__gedf2+0x52>
 8001e96:	2900      	cmp	r1, #0
 8001e98:	d0e2      	beq.n	8001e60 <__gedf2+0x6c>
 8001e9a:	0008      	movs	r0, r1
 8001e9c:	e7d3      	b.n	8001e46 <__gedf2+0x52>
 8001e9e:	4243      	negs	r3, r0
 8001ea0:	4158      	adcs	r0, r3
 8001ea2:	0040      	lsls	r0, r0, #1
 8001ea4:	3801      	subs	r0, #1
 8001ea6:	e7ce      	b.n	8001e46 <__gedf2+0x52>
 8001ea8:	2002      	movs	r0, #2
 8001eaa:	4240      	negs	r0, r0
 8001eac:	e7cb      	b.n	8001e46 <__gedf2+0x52>
 8001eae:	45c4      	cmp	ip, r8
 8001eb0:	d8c5      	bhi.n	8001e3e <__gedf2+0x4a>
 8001eb2:	2000      	movs	r0, #0
 8001eb4:	45c4      	cmp	ip, r8
 8001eb6:	d2c6      	bcs.n	8001e46 <__gedf2+0x52>
 8001eb8:	e7ed      	b.n	8001e96 <__gedf2+0xa2>
 8001eba:	46c0      	nop			; (mov r8, r8)
 8001ebc:	000007ff 	.word	0x000007ff

08001ec0 <__ledf2>:
 8001ec0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ec2:	4647      	mov	r7, r8
 8001ec4:	46ce      	mov	lr, r9
 8001ec6:	0004      	movs	r4, r0
 8001ec8:	0018      	movs	r0, r3
 8001eca:	0016      	movs	r6, r2
 8001ecc:	031b      	lsls	r3, r3, #12
 8001ece:	0b1b      	lsrs	r3, r3, #12
 8001ed0:	4d2c      	ldr	r5, [pc, #176]	; (8001f84 <__ledf2+0xc4>)
 8001ed2:	004a      	lsls	r2, r1, #1
 8001ed4:	4699      	mov	r9, r3
 8001ed6:	b580      	push	{r7, lr}
 8001ed8:	0043      	lsls	r3, r0, #1
 8001eda:	030f      	lsls	r7, r1, #12
 8001edc:	46a4      	mov	ip, r4
 8001ede:	46b0      	mov	r8, r6
 8001ee0:	0b3f      	lsrs	r7, r7, #12
 8001ee2:	0d52      	lsrs	r2, r2, #21
 8001ee4:	0fc9      	lsrs	r1, r1, #31
 8001ee6:	0d5b      	lsrs	r3, r3, #21
 8001ee8:	0fc0      	lsrs	r0, r0, #31
 8001eea:	42aa      	cmp	r2, r5
 8001eec:	d00d      	beq.n	8001f0a <__ledf2+0x4a>
 8001eee:	42ab      	cmp	r3, r5
 8001ef0:	d010      	beq.n	8001f14 <__ledf2+0x54>
 8001ef2:	2a00      	cmp	r2, #0
 8001ef4:	d127      	bne.n	8001f46 <__ledf2+0x86>
 8001ef6:	433c      	orrs	r4, r7
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d111      	bne.n	8001f20 <__ledf2+0x60>
 8001efc:	464d      	mov	r5, r9
 8001efe:	432e      	orrs	r6, r5
 8001f00:	d10e      	bne.n	8001f20 <__ledf2+0x60>
 8001f02:	2000      	movs	r0, #0
 8001f04:	2c00      	cmp	r4, #0
 8001f06:	d015      	beq.n	8001f34 <__ledf2+0x74>
 8001f08:	e00e      	b.n	8001f28 <__ledf2+0x68>
 8001f0a:	003d      	movs	r5, r7
 8001f0c:	4325      	orrs	r5, r4
 8001f0e:	d110      	bne.n	8001f32 <__ledf2+0x72>
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d118      	bne.n	8001f46 <__ledf2+0x86>
 8001f14:	464d      	mov	r5, r9
 8001f16:	432e      	orrs	r6, r5
 8001f18:	d10b      	bne.n	8001f32 <__ledf2+0x72>
 8001f1a:	2a00      	cmp	r2, #0
 8001f1c:	d102      	bne.n	8001f24 <__ledf2+0x64>
 8001f1e:	433c      	orrs	r4, r7
 8001f20:	2c00      	cmp	r4, #0
 8001f22:	d00b      	beq.n	8001f3c <__ledf2+0x7c>
 8001f24:	4281      	cmp	r1, r0
 8001f26:	d014      	beq.n	8001f52 <__ledf2+0x92>
 8001f28:	2002      	movs	r0, #2
 8001f2a:	3901      	subs	r1, #1
 8001f2c:	4008      	ands	r0, r1
 8001f2e:	3801      	subs	r0, #1
 8001f30:	e000      	b.n	8001f34 <__ledf2+0x74>
 8001f32:	2002      	movs	r0, #2
 8001f34:	bcc0      	pop	{r6, r7}
 8001f36:	46b9      	mov	r9, r7
 8001f38:	46b0      	mov	r8, r6
 8001f3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f3c:	2800      	cmp	r0, #0
 8001f3e:	d1f9      	bne.n	8001f34 <__ledf2+0x74>
 8001f40:	2001      	movs	r0, #1
 8001f42:	4240      	negs	r0, r0
 8001f44:	e7f6      	b.n	8001f34 <__ledf2+0x74>
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d1ec      	bne.n	8001f24 <__ledf2+0x64>
 8001f4a:	464c      	mov	r4, r9
 8001f4c:	4326      	orrs	r6, r4
 8001f4e:	d1e9      	bne.n	8001f24 <__ledf2+0x64>
 8001f50:	e7ea      	b.n	8001f28 <__ledf2+0x68>
 8001f52:	429a      	cmp	r2, r3
 8001f54:	dd04      	ble.n	8001f60 <__ledf2+0xa0>
 8001f56:	4243      	negs	r3, r0
 8001f58:	4158      	adcs	r0, r3
 8001f5a:	0040      	lsls	r0, r0, #1
 8001f5c:	3801      	subs	r0, #1
 8001f5e:	e7e9      	b.n	8001f34 <__ledf2+0x74>
 8001f60:	429a      	cmp	r2, r3
 8001f62:	dbeb      	blt.n	8001f3c <__ledf2+0x7c>
 8001f64:	454f      	cmp	r7, r9
 8001f66:	d8df      	bhi.n	8001f28 <__ledf2+0x68>
 8001f68:	d006      	beq.n	8001f78 <__ledf2+0xb8>
 8001f6a:	2000      	movs	r0, #0
 8001f6c:	454f      	cmp	r7, r9
 8001f6e:	d2e1      	bcs.n	8001f34 <__ledf2+0x74>
 8001f70:	2900      	cmp	r1, #0
 8001f72:	d0e5      	beq.n	8001f40 <__ledf2+0x80>
 8001f74:	0008      	movs	r0, r1
 8001f76:	e7dd      	b.n	8001f34 <__ledf2+0x74>
 8001f78:	45c4      	cmp	ip, r8
 8001f7a:	d8d5      	bhi.n	8001f28 <__ledf2+0x68>
 8001f7c:	2000      	movs	r0, #0
 8001f7e:	45c4      	cmp	ip, r8
 8001f80:	d2d8      	bcs.n	8001f34 <__ledf2+0x74>
 8001f82:	e7f5      	b.n	8001f70 <__ledf2+0xb0>
 8001f84:	000007ff 	.word	0x000007ff

08001f88 <__aeabi_dmul>:
 8001f88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f8a:	4657      	mov	r7, sl
 8001f8c:	464e      	mov	r6, r9
 8001f8e:	4645      	mov	r5, r8
 8001f90:	46de      	mov	lr, fp
 8001f92:	b5e0      	push	{r5, r6, r7, lr}
 8001f94:	4698      	mov	r8, r3
 8001f96:	030c      	lsls	r4, r1, #12
 8001f98:	004b      	lsls	r3, r1, #1
 8001f9a:	0006      	movs	r6, r0
 8001f9c:	4692      	mov	sl, r2
 8001f9e:	b087      	sub	sp, #28
 8001fa0:	0b24      	lsrs	r4, r4, #12
 8001fa2:	0d5b      	lsrs	r3, r3, #21
 8001fa4:	0fcf      	lsrs	r7, r1, #31
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d100      	bne.n	8001fac <__aeabi_dmul+0x24>
 8001faa:	e15c      	b.n	8002266 <__aeabi_dmul+0x2de>
 8001fac:	4ad9      	ldr	r2, [pc, #868]	; (8002314 <__aeabi_dmul+0x38c>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d100      	bne.n	8001fb4 <__aeabi_dmul+0x2c>
 8001fb2:	e175      	b.n	80022a0 <__aeabi_dmul+0x318>
 8001fb4:	0f42      	lsrs	r2, r0, #29
 8001fb6:	00e4      	lsls	r4, r4, #3
 8001fb8:	4314      	orrs	r4, r2
 8001fba:	2280      	movs	r2, #128	; 0x80
 8001fbc:	0412      	lsls	r2, r2, #16
 8001fbe:	4314      	orrs	r4, r2
 8001fc0:	4ad5      	ldr	r2, [pc, #852]	; (8002318 <__aeabi_dmul+0x390>)
 8001fc2:	00c5      	lsls	r5, r0, #3
 8001fc4:	4694      	mov	ip, r2
 8001fc6:	4463      	add	r3, ip
 8001fc8:	9300      	str	r3, [sp, #0]
 8001fca:	2300      	movs	r3, #0
 8001fcc:	4699      	mov	r9, r3
 8001fce:	469b      	mov	fp, r3
 8001fd0:	4643      	mov	r3, r8
 8001fd2:	4642      	mov	r2, r8
 8001fd4:	031e      	lsls	r6, r3, #12
 8001fd6:	0fd2      	lsrs	r2, r2, #31
 8001fd8:	005b      	lsls	r3, r3, #1
 8001fda:	4650      	mov	r0, sl
 8001fdc:	4690      	mov	r8, r2
 8001fde:	0b36      	lsrs	r6, r6, #12
 8001fe0:	0d5b      	lsrs	r3, r3, #21
 8001fe2:	d100      	bne.n	8001fe6 <__aeabi_dmul+0x5e>
 8001fe4:	e120      	b.n	8002228 <__aeabi_dmul+0x2a0>
 8001fe6:	4acb      	ldr	r2, [pc, #812]	; (8002314 <__aeabi_dmul+0x38c>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d100      	bne.n	8001fee <__aeabi_dmul+0x66>
 8001fec:	e162      	b.n	80022b4 <__aeabi_dmul+0x32c>
 8001fee:	49ca      	ldr	r1, [pc, #808]	; (8002318 <__aeabi_dmul+0x390>)
 8001ff0:	0f42      	lsrs	r2, r0, #29
 8001ff2:	468c      	mov	ip, r1
 8001ff4:	9900      	ldr	r1, [sp, #0]
 8001ff6:	4463      	add	r3, ip
 8001ff8:	00f6      	lsls	r6, r6, #3
 8001ffa:	468c      	mov	ip, r1
 8001ffc:	4316      	orrs	r6, r2
 8001ffe:	2280      	movs	r2, #128	; 0x80
 8002000:	449c      	add	ip, r3
 8002002:	0412      	lsls	r2, r2, #16
 8002004:	4663      	mov	r3, ip
 8002006:	4316      	orrs	r6, r2
 8002008:	00c2      	lsls	r2, r0, #3
 800200a:	2000      	movs	r0, #0
 800200c:	9300      	str	r3, [sp, #0]
 800200e:	9900      	ldr	r1, [sp, #0]
 8002010:	4643      	mov	r3, r8
 8002012:	3101      	adds	r1, #1
 8002014:	468c      	mov	ip, r1
 8002016:	4649      	mov	r1, r9
 8002018:	407b      	eors	r3, r7
 800201a:	9301      	str	r3, [sp, #4]
 800201c:	290f      	cmp	r1, #15
 800201e:	d826      	bhi.n	800206e <__aeabi_dmul+0xe6>
 8002020:	4bbe      	ldr	r3, [pc, #760]	; (800231c <__aeabi_dmul+0x394>)
 8002022:	0089      	lsls	r1, r1, #2
 8002024:	5859      	ldr	r1, [r3, r1]
 8002026:	468f      	mov	pc, r1
 8002028:	4643      	mov	r3, r8
 800202a:	9301      	str	r3, [sp, #4]
 800202c:	0034      	movs	r4, r6
 800202e:	0015      	movs	r5, r2
 8002030:	4683      	mov	fp, r0
 8002032:	465b      	mov	r3, fp
 8002034:	2b02      	cmp	r3, #2
 8002036:	d016      	beq.n	8002066 <__aeabi_dmul+0xde>
 8002038:	2b03      	cmp	r3, #3
 800203a:	d100      	bne.n	800203e <__aeabi_dmul+0xb6>
 800203c:	e203      	b.n	8002446 <__aeabi_dmul+0x4be>
 800203e:	2b01      	cmp	r3, #1
 8002040:	d000      	beq.n	8002044 <__aeabi_dmul+0xbc>
 8002042:	e0cd      	b.n	80021e0 <__aeabi_dmul+0x258>
 8002044:	2200      	movs	r2, #0
 8002046:	2400      	movs	r4, #0
 8002048:	2500      	movs	r5, #0
 800204a:	9b01      	ldr	r3, [sp, #4]
 800204c:	0512      	lsls	r2, r2, #20
 800204e:	4322      	orrs	r2, r4
 8002050:	07db      	lsls	r3, r3, #31
 8002052:	431a      	orrs	r2, r3
 8002054:	0028      	movs	r0, r5
 8002056:	0011      	movs	r1, r2
 8002058:	b007      	add	sp, #28
 800205a:	bcf0      	pop	{r4, r5, r6, r7}
 800205c:	46bb      	mov	fp, r7
 800205e:	46b2      	mov	sl, r6
 8002060:	46a9      	mov	r9, r5
 8002062:	46a0      	mov	r8, r4
 8002064:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002066:	2400      	movs	r4, #0
 8002068:	2500      	movs	r5, #0
 800206a:	4aaa      	ldr	r2, [pc, #680]	; (8002314 <__aeabi_dmul+0x38c>)
 800206c:	e7ed      	b.n	800204a <__aeabi_dmul+0xc2>
 800206e:	0c28      	lsrs	r0, r5, #16
 8002070:	042d      	lsls	r5, r5, #16
 8002072:	0c2d      	lsrs	r5, r5, #16
 8002074:	002b      	movs	r3, r5
 8002076:	0c11      	lsrs	r1, r2, #16
 8002078:	0412      	lsls	r2, r2, #16
 800207a:	0c12      	lsrs	r2, r2, #16
 800207c:	4353      	muls	r3, r2
 800207e:	4698      	mov	r8, r3
 8002080:	0013      	movs	r3, r2
 8002082:	002f      	movs	r7, r5
 8002084:	4343      	muls	r3, r0
 8002086:	4699      	mov	r9, r3
 8002088:	434f      	muls	r7, r1
 800208a:	444f      	add	r7, r9
 800208c:	46bb      	mov	fp, r7
 800208e:	4647      	mov	r7, r8
 8002090:	000b      	movs	r3, r1
 8002092:	0c3f      	lsrs	r7, r7, #16
 8002094:	46ba      	mov	sl, r7
 8002096:	4343      	muls	r3, r0
 8002098:	44da      	add	sl, fp
 800209a:	9302      	str	r3, [sp, #8]
 800209c:	45d1      	cmp	r9, sl
 800209e:	d904      	bls.n	80020aa <__aeabi_dmul+0x122>
 80020a0:	2780      	movs	r7, #128	; 0x80
 80020a2:	027f      	lsls	r7, r7, #9
 80020a4:	46b9      	mov	r9, r7
 80020a6:	444b      	add	r3, r9
 80020a8:	9302      	str	r3, [sp, #8]
 80020aa:	4653      	mov	r3, sl
 80020ac:	0c1b      	lsrs	r3, r3, #16
 80020ae:	469b      	mov	fp, r3
 80020b0:	4653      	mov	r3, sl
 80020b2:	041f      	lsls	r7, r3, #16
 80020b4:	4643      	mov	r3, r8
 80020b6:	041b      	lsls	r3, r3, #16
 80020b8:	0c1b      	lsrs	r3, r3, #16
 80020ba:	4698      	mov	r8, r3
 80020bc:	003b      	movs	r3, r7
 80020be:	4443      	add	r3, r8
 80020c0:	9304      	str	r3, [sp, #16]
 80020c2:	0c33      	lsrs	r3, r6, #16
 80020c4:	0436      	lsls	r6, r6, #16
 80020c6:	0c36      	lsrs	r6, r6, #16
 80020c8:	4698      	mov	r8, r3
 80020ca:	0033      	movs	r3, r6
 80020cc:	4343      	muls	r3, r0
 80020ce:	4699      	mov	r9, r3
 80020d0:	4643      	mov	r3, r8
 80020d2:	4343      	muls	r3, r0
 80020d4:	002f      	movs	r7, r5
 80020d6:	469a      	mov	sl, r3
 80020d8:	4643      	mov	r3, r8
 80020da:	4377      	muls	r7, r6
 80020dc:	435d      	muls	r5, r3
 80020de:	0c38      	lsrs	r0, r7, #16
 80020e0:	444d      	add	r5, r9
 80020e2:	1945      	adds	r5, r0, r5
 80020e4:	45a9      	cmp	r9, r5
 80020e6:	d903      	bls.n	80020f0 <__aeabi_dmul+0x168>
 80020e8:	2380      	movs	r3, #128	; 0x80
 80020ea:	025b      	lsls	r3, r3, #9
 80020ec:	4699      	mov	r9, r3
 80020ee:	44ca      	add	sl, r9
 80020f0:	043f      	lsls	r7, r7, #16
 80020f2:	0c28      	lsrs	r0, r5, #16
 80020f4:	0c3f      	lsrs	r7, r7, #16
 80020f6:	042d      	lsls	r5, r5, #16
 80020f8:	19ed      	adds	r5, r5, r7
 80020fa:	0c27      	lsrs	r7, r4, #16
 80020fc:	0424      	lsls	r4, r4, #16
 80020fe:	0c24      	lsrs	r4, r4, #16
 8002100:	0003      	movs	r3, r0
 8002102:	0020      	movs	r0, r4
 8002104:	4350      	muls	r0, r2
 8002106:	437a      	muls	r2, r7
 8002108:	4691      	mov	r9, r2
 800210a:	003a      	movs	r2, r7
 800210c:	4453      	add	r3, sl
 800210e:	9305      	str	r3, [sp, #20]
 8002110:	0c03      	lsrs	r3, r0, #16
 8002112:	469a      	mov	sl, r3
 8002114:	434a      	muls	r2, r1
 8002116:	4361      	muls	r1, r4
 8002118:	4449      	add	r1, r9
 800211a:	4451      	add	r1, sl
 800211c:	44ab      	add	fp, r5
 800211e:	4589      	cmp	r9, r1
 8002120:	d903      	bls.n	800212a <__aeabi_dmul+0x1a2>
 8002122:	2380      	movs	r3, #128	; 0x80
 8002124:	025b      	lsls	r3, r3, #9
 8002126:	4699      	mov	r9, r3
 8002128:	444a      	add	r2, r9
 800212a:	0400      	lsls	r0, r0, #16
 800212c:	0c0b      	lsrs	r3, r1, #16
 800212e:	0c00      	lsrs	r0, r0, #16
 8002130:	0409      	lsls	r1, r1, #16
 8002132:	1809      	adds	r1, r1, r0
 8002134:	0020      	movs	r0, r4
 8002136:	4699      	mov	r9, r3
 8002138:	4643      	mov	r3, r8
 800213a:	4370      	muls	r0, r6
 800213c:	435c      	muls	r4, r3
 800213e:	437e      	muls	r6, r7
 8002140:	435f      	muls	r7, r3
 8002142:	0c03      	lsrs	r3, r0, #16
 8002144:	4698      	mov	r8, r3
 8002146:	19a4      	adds	r4, r4, r6
 8002148:	4444      	add	r4, r8
 800214a:	444a      	add	r2, r9
 800214c:	9703      	str	r7, [sp, #12]
 800214e:	42a6      	cmp	r6, r4
 8002150:	d904      	bls.n	800215c <__aeabi_dmul+0x1d4>
 8002152:	2380      	movs	r3, #128	; 0x80
 8002154:	025b      	lsls	r3, r3, #9
 8002156:	4698      	mov	r8, r3
 8002158:	4447      	add	r7, r8
 800215a:	9703      	str	r7, [sp, #12]
 800215c:	0423      	lsls	r3, r4, #16
 800215e:	9e02      	ldr	r6, [sp, #8]
 8002160:	469a      	mov	sl, r3
 8002162:	9b05      	ldr	r3, [sp, #20]
 8002164:	445e      	add	r6, fp
 8002166:	4698      	mov	r8, r3
 8002168:	42ae      	cmp	r6, r5
 800216a:	41ad      	sbcs	r5, r5
 800216c:	1876      	adds	r6, r6, r1
 800216e:	428e      	cmp	r6, r1
 8002170:	4189      	sbcs	r1, r1
 8002172:	0400      	lsls	r0, r0, #16
 8002174:	0c00      	lsrs	r0, r0, #16
 8002176:	4450      	add	r0, sl
 8002178:	4440      	add	r0, r8
 800217a:	426d      	negs	r5, r5
 800217c:	1947      	adds	r7, r0, r5
 800217e:	46b8      	mov	r8, r7
 8002180:	4693      	mov	fp, r2
 8002182:	4249      	negs	r1, r1
 8002184:	4689      	mov	r9, r1
 8002186:	44c3      	add	fp, r8
 8002188:	44d9      	add	r9, fp
 800218a:	4298      	cmp	r0, r3
 800218c:	4180      	sbcs	r0, r0
 800218e:	45a8      	cmp	r8, r5
 8002190:	41ad      	sbcs	r5, r5
 8002192:	4593      	cmp	fp, r2
 8002194:	4192      	sbcs	r2, r2
 8002196:	4589      	cmp	r9, r1
 8002198:	4189      	sbcs	r1, r1
 800219a:	426d      	negs	r5, r5
 800219c:	4240      	negs	r0, r0
 800219e:	4328      	orrs	r0, r5
 80021a0:	0c24      	lsrs	r4, r4, #16
 80021a2:	4252      	negs	r2, r2
 80021a4:	4249      	negs	r1, r1
 80021a6:	430a      	orrs	r2, r1
 80021a8:	9b03      	ldr	r3, [sp, #12]
 80021aa:	1900      	adds	r0, r0, r4
 80021ac:	1880      	adds	r0, r0, r2
 80021ae:	18c7      	adds	r7, r0, r3
 80021b0:	464b      	mov	r3, r9
 80021b2:	0ddc      	lsrs	r4, r3, #23
 80021b4:	9b04      	ldr	r3, [sp, #16]
 80021b6:	0275      	lsls	r5, r6, #9
 80021b8:	431d      	orrs	r5, r3
 80021ba:	1e6a      	subs	r2, r5, #1
 80021bc:	4195      	sbcs	r5, r2
 80021be:	464b      	mov	r3, r9
 80021c0:	0df6      	lsrs	r6, r6, #23
 80021c2:	027f      	lsls	r7, r7, #9
 80021c4:	4335      	orrs	r5, r6
 80021c6:	025a      	lsls	r2, r3, #9
 80021c8:	433c      	orrs	r4, r7
 80021ca:	4315      	orrs	r5, r2
 80021cc:	01fb      	lsls	r3, r7, #7
 80021ce:	d400      	bmi.n	80021d2 <__aeabi_dmul+0x24a>
 80021d0:	e11c      	b.n	800240c <__aeabi_dmul+0x484>
 80021d2:	2101      	movs	r1, #1
 80021d4:	086a      	lsrs	r2, r5, #1
 80021d6:	400d      	ands	r5, r1
 80021d8:	4315      	orrs	r5, r2
 80021da:	07e2      	lsls	r2, r4, #31
 80021dc:	4315      	orrs	r5, r2
 80021de:	0864      	lsrs	r4, r4, #1
 80021e0:	494f      	ldr	r1, [pc, #316]	; (8002320 <__aeabi_dmul+0x398>)
 80021e2:	4461      	add	r1, ip
 80021e4:	2900      	cmp	r1, #0
 80021e6:	dc00      	bgt.n	80021ea <__aeabi_dmul+0x262>
 80021e8:	e0b0      	b.n	800234c <__aeabi_dmul+0x3c4>
 80021ea:	076b      	lsls	r3, r5, #29
 80021ec:	d009      	beq.n	8002202 <__aeabi_dmul+0x27a>
 80021ee:	220f      	movs	r2, #15
 80021f0:	402a      	ands	r2, r5
 80021f2:	2a04      	cmp	r2, #4
 80021f4:	d005      	beq.n	8002202 <__aeabi_dmul+0x27a>
 80021f6:	1d2a      	adds	r2, r5, #4
 80021f8:	42aa      	cmp	r2, r5
 80021fa:	41ad      	sbcs	r5, r5
 80021fc:	426d      	negs	r5, r5
 80021fe:	1964      	adds	r4, r4, r5
 8002200:	0015      	movs	r5, r2
 8002202:	01e3      	lsls	r3, r4, #7
 8002204:	d504      	bpl.n	8002210 <__aeabi_dmul+0x288>
 8002206:	2180      	movs	r1, #128	; 0x80
 8002208:	4a46      	ldr	r2, [pc, #280]	; (8002324 <__aeabi_dmul+0x39c>)
 800220a:	00c9      	lsls	r1, r1, #3
 800220c:	4014      	ands	r4, r2
 800220e:	4461      	add	r1, ip
 8002210:	4a45      	ldr	r2, [pc, #276]	; (8002328 <__aeabi_dmul+0x3a0>)
 8002212:	4291      	cmp	r1, r2
 8002214:	dd00      	ble.n	8002218 <__aeabi_dmul+0x290>
 8002216:	e726      	b.n	8002066 <__aeabi_dmul+0xde>
 8002218:	0762      	lsls	r2, r4, #29
 800221a:	08ed      	lsrs	r5, r5, #3
 800221c:	0264      	lsls	r4, r4, #9
 800221e:	0549      	lsls	r1, r1, #21
 8002220:	4315      	orrs	r5, r2
 8002222:	0b24      	lsrs	r4, r4, #12
 8002224:	0d4a      	lsrs	r2, r1, #21
 8002226:	e710      	b.n	800204a <__aeabi_dmul+0xc2>
 8002228:	4652      	mov	r2, sl
 800222a:	4332      	orrs	r2, r6
 800222c:	d100      	bne.n	8002230 <__aeabi_dmul+0x2a8>
 800222e:	e07f      	b.n	8002330 <__aeabi_dmul+0x3a8>
 8002230:	2e00      	cmp	r6, #0
 8002232:	d100      	bne.n	8002236 <__aeabi_dmul+0x2ae>
 8002234:	e0dc      	b.n	80023f0 <__aeabi_dmul+0x468>
 8002236:	0030      	movs	r0, r6
 8002238:	f000 fe1e 	bl	8002e78 <__clzsi2>
 800223c:	0002      	movs	r2, r0
 800223e:	3a0b      	subs	r2, #11
 8002240:	231d      	movs	r3, #29
 8002242:	0001      	movs	r1, r0
 8002244:	1a9b      	subs	r3, r3, r2
 8002246:	4652      	mov	r2, sl
 8002248:	3908      	subs	r1, #8
 800224a:	40da      	lsrs	r2, r3
 800224c:	408e      	lsls	r6, r1
 800224e:	4316      	orrs	r6, r2
 8002250:	4652      	mov	r2, sl
 8002252:	408a      	lsls	r2, r1
 8002254:	9b00      	ldr	r3, [sp, #0]
 8002256:	4935      	ldr	r1, [pc, #212]	; (800232c <__aeabi_dmul+0x3a4>)
 8002258:	1a18      	subs	r0, r3, r0
 800225a:	0003      	movs	r3, r0
 800225c:	468c      	mov	ip, r1
 800225e:	4463      	add	r3, ip
 8002260:	2000      	movs	r0, #0
 8002262:	9300      	str	r3, [sp, #0]
 8002264:	e6d3      	b.n	800200e <__aeabi_dmul+0x86>
 8002266:	0025      	movs	r5, r4
 8002268:	4305      	orrs	r5, r0
 800226a:	d04a      	beq.n	8002302 <__aeabi_dmul+0x37a>
 800226c:	2c00      	cmp	r4, #0
 800226e:	d100      	bne.n	8002272 <__aeabi_dmul+0x2ea>
 8002270:	e0b0      	b.n	80023d4 <__aeabi_dmul+0x44c>
 8002272:	0020      	movs	r0, r4
 8002274:	f000 fe00 	bl	8002e78 <__clzsi2>
 8002278:	0001      	movs	r1, r0
 800227a:	0002      	movs	r2, r0
 800227c:	390b      	subs	r1, #11
 800227e:	231d      	movs	r3, #29
 8002280:	0010      	movs	r0, r2
 8002282:	1a5b      	subs	r3, r3, r1
 8002284:	0031      	movs	r1, r6
 8002286:	0035      	movs	r5, r6
 8002288:	3808      	subs	r0, #8
 800228a:	4084      	lsls	r4, r0
 800228c:	40d9      	lsrs	r1, r3
 800228e:	4085      	lsls	r5, r0
 8002290:	430c      	orrs	r4, r1
 8002292:	4826      	ldr	r0, [pc, #152]	; (800232c <__aeabi_dmul+0x3a4>)
 8002294:	1a83      	subs	r3, r0, r2
 8002296:	9300      	str	r3, [sp, #0]
 8002298:	2300      	movs	r3, #0
 800229a:	4699      	mov	r9, r3
 800229c:	469b      	mov	fp, r3
 800229e:	e697      	b.n	8001fd0 <__aeabi_dmul+0x48>
 80022a0:	0005      	movs	r5, r0
 80022a2:	4325      	orrs	r5, r4
 80022a4:	d126      	bne.n	80022f4 <__aeabi_dmul+0x36c>
 80022a6:	2208      	movs	r2, #8
 80022a8:	9300      	str	r3, [sp, #0]
 80022aa:	2302      	movs	r3, #2
 80022ac:	2400      	movs	r4, #0
 80022ae:	4691      	mov	r9, r2
 80022b0:	469b      	mov	fp, r3
 80022b2:	e68d      	b.n	8001fd0 <__aeabi_dmul+0x48>
 80022b4:	4652      	mov	r2, sl
 80022b6:	9b00      	ldr	r3, [sp, #0]
 80022b8:	4332      	orrs	r2, r6
 80022ba:	d110      	bne.n	80022de <__aeabi_dmul+0x356>
 80022bc:	4915      	ldr	r1, [pc, #84]	; (8002314 <__aeabi_dmul+0x38c>)
 80022be:	2600      	movs	r6, #0
 80022c0:	468c      	mov	ip, r1
 80022c2:	4463      	add	r3, ip
 80022c4:	4649      	mov	r1, r9
 80022c6:	9300      	str	r3, [sp, #0]
 80022c8:	2302      	movs	r3, #2
 80022ca:	4319      	orrs	r1, r3
 80022cc:	4689      	mov	r9, r1
 80022ce:	2002      	movs	r0, #2
 80022d0:	e69d      	b.n	800200e <__aeabi_dmul+0x86>
 80022d2:	465b      	mov	r3, fp
 80022d4:	9701      	str	r7, [sp, #4]
 80022d6:	2b02      	cmp	r3, #2
 80022d8:	d000      	beq.n	80022dc <__aeabi_dmul+0x354>
 80022da:	e6ad      	b.n	8002038 <__aeabi_dmul+0xb0>
 80022dc:	e6c3      	b.n	8002066 <__aeabi_dmul+0xde>
 80022de:	4a0d      	ldr	r2, [pc, #52]	; (8002314 <__aeabi_dmul+0x38c>)
 80022e0:	2003      	movs	r0, #3
 80022e2:	4694      	mov	ip, r2
 80022e4:	4463      	add	r3, ip
 80022e6:	464a      	mov	r2, r9
 80022e8:	9300      	str	r3, [sp, #0]
 80022ea:	2303      	movs	r3, #3
 80022ec:	431a      	orrs	r2, r3
 80022ee:	4691      	mov	r9, r2
 80022f0:	4652      	mov	r2, sl
 80022f2:	e68c      	b.n	800200e <__aeabi_dmul+0x86>
 80022f4:	220c      	movs	r2, #12
 80022f6:	9300      	str	r3, [sp, #0]
 80022f8:	2303      	movs	r3, #3
 80022fa:	0005      	movs	r5, r0
 80022fc:	4691      	mov	r9, r2
 80022fe:	469b      	mov	fp, r3
 8002300:	e666      	b.n	8001fd0 <__aeabi_dmul+0x48>
 8002302:	2304      	movs	r3, #4
 8002304:	4699      	mov	r9, r3
 8002306:	2300      	movs	r3, #0
 8002308:	9300      	str	r3, [sp, #0]
 800230a:	3301      	adds	r3, #1
 800230c:	2400      	movs	r4, #0
 800230e:	469b      	mov	fp, r3
 8002310:	e65e      	b.n	8001fd0 <__aeabi_dmul+0x48>
 8002312:	46c0      	nop			; (mov r8, r8)
 8002314:	000007ff 	.word	0x000007ff
 8002318:	fffffc01 	.word	0xfffffc01
 800231c:	0800be68 	.word	0x0800be68
 8002320:	000003ff 	.word	0x000003ff
 8002324:	feffffff 	.word	0xfeffffff
 8002328:	000007fe 	.word	0x000007fe
 800232c:	fffffc0d 	.word	0xfffffc0d
 8002330:	4649      	mov	r1, r9
 8002332:	2301      	movs	r3, #1
 8002334:	4319      	orrs	r1, r3
 8002336:	4689      	mov	r9, r1
 8002338:	2600      	movs	r6, #0
 800233a:	2001      	movs	r0, #1
 800233c:	e667      	b.n	800200e <__aeabi_dmul+0x86>
 800233e:	2300      	movs	r3, #0
 8002340:	2480      	movs	r4, #128	; 0x80
 8002342:	2500      	movs	r5, #0
 8002344:	4a43      	ldr	r2, [pc, #268]	; (8002454 <__aeabi_dmul+0x4cc>)
 8002346:	9301      	str	r3, [sp, #4]
 8002348:	0324      	lsls	r4, r4, #12
 800234a:	e67e      	b.n	800204a <__aeabi_dmul+0xc2>
 800234c:	2001      	movs	r0, #1
 800234e:	1a40      	subs	r0, r0, r1
 8002350:	2838      	cmp	r0, #56	; 0x38
 8002352:	dd00      	ble.n	8002356 <__aeabi_dmul+0x3ce>
 8002354:	e676      	b.n	8002044 <__aeabi_dmul+0xbc>
 8002356:	281f      	cmp	r0, #31
 8002358:	dd5b      	ble.n	8002412 <__aeabi_dmul+0x48a>
 800235a:	221f      	movs	r2, #31
 800235c:	0023      	movs	r3, r4
 800235e:	4252      	negs	r2, r2
 8002360:	1a51      	subs	r1, r2, r1
 8002362:	40cb      	lsrs	r3, r1
 8002364:	0019      	movs	r1, r3
 8002366:	2820      	cmp	r0, #32
 8002368:	d003      	beq.n	8002372 <__aeabi_dmul+0x3ea>
 800236a:	4a3b      	ldr	r2, [pc, #236]	; (8002458 <__aeabi_dmul+0x4d0>)
 800236c:	4462      	add	r2, ip
 800236e:	4094      	lsls	r4, r2
 8002370:	4325      	orrs	r5, r4
 8002372:	1e6a      	subs	r2, r5, #1
 8002374:	4195      	sbcs	r5, r2
 8002376:	002a      	movs	r2, r5
 8002378:	430a      	orrs	r2, r1
 800237a:	2107      	movs	r1, #7
 800237c:	000d      	movs	r5, r1
 800237e:	2400      	movs	r4, #0
 8002380:	4015      	ands	r5, r2
 8002382:	4211      	tst	r1, r2
 8002384:	d05b      	beq.n	800243e <__aeabi_dmul+0x4b6>
 8002386:	210f      	movs	r1, #15
 8002388:	2400      	movs	r4, #0
 800238a:	4011      	ands	r1, r2
 800238c:	2904      	cmp	r1, #4
 800238e:	d053      	beq.n	8002438 <__aeabi_dmul+0x4b0>
 8002390:	1d11      	adds	r1, r2, #4
 8002392:	4291      	cmp	r1, r2
 8002394:	4192      	sbcs	r2, r2
 8002396:	4252      	negs	r2, r2
 8002398:	18a4      	adds	r4, r4, r2
 800239a:	000a      	movs	r2, r1
 800239c:	0223      	lsls	r3, r4, #8
 800239e:	d54b      	bpl.n	8002438 <__aeabi_dmul+0x4b0>
 80023a0:	2201      	movs	r2, #1
 80023a2:	2400      	movs	r4, #0
 80023a4:	2500      	movs	r5, #0
 80023a6:	e650      	b.n	800204a <__aeabi_dmul+0xc2>
 80023a8:	2380      	movs	r3, #128	; 0x80
 80023aa:	031b      	lsls	r3, r3, #12
 80023ac:	421c      	tst	r4, r3
 80023ae:	d009      	beq.n	80023c4 <__aeabi_dmul+0x43c>
 80023b0:	421e      	tst	r6, r3
 80023b2:	d107      	bne.n	80023c4 <__aeabi_dmul+0x43c>
 80023b4:	4333      	orrs	r3, r6
 80023b6:	031c      	lsls	r4, r3, #12
 80023b8:	4643      	mov	r3, r8
 80023ba:	0015      	movs	r5, r2
 80023bc:	0b24      	lsrs	r4, r4, #12
 80023be:	4a25      	ldr	r2, [pc, #148]	; (8002454 <__aeabi_dmul+0x4cc>)
 80023c0:	9301      	str	r3, [sp, #4]
 80023c2:	e642      	b.n	800204a <__aeabi_dmul+0xc2>
 80023c4:	2280      	movs	r2, #128	; 0x80
 80023c6:	0312      	lsls	r2, r2, #12
 80023c8:	4314      	orrs	r4, r2
 80023ca:	0324      	lsls	r4, r4, #12
 80023cc:	4a21      	ldr	r2, [pc, #132]	; (8002454 <__aeabi_dmul+0x4cc>)
 80023ce:	0b24      	lsrs	r4, r4, #12
 80023d0:	9701      	str	r7, [sp, #4]
 80023d2:	e63a      	b.n	800204a <__aeabi_dmul+0xc2>
 80023d4:	f000 fd50 	bl	8002e78 <__clzsi2>
 80023d8:	0001      	movs	r1, r0
 80023da:	0002      	movs	r2, r0
 80023dc:	3115      	adds	r1, #21
 80023de:	3220      	adds	r2, #32
 80023e0:	291c      	cmp	r1, #28
 80023e2:	dc00      	bgt.n	80023e6 <__aeabi_dmul+0x45e>
 80023e4:	e74b      	b.n	800227e <__aeabi_dmul+0x2f6>
 80023e6:	0034      	movs	r4, r6
 80023e8:	3808      	subs	r0, #8
 80023ea:	2500      	movs	r5, #0
 80023ec:	4084      	lsls	r4, r0
 80023ee:	e750      	b.n	8002292 <__aeabi_dmul+0x30a>
 80023f0:	f000 fd42 	bl	8002e78 <__clzsi2>
 80023f4:	0003      	movs	r3, r0
 80023f6:	001a      	movs	r2, r3
 80023f8:	3215      	adds	r2, #21
 80023fa:	3020      	adds	r0, #32
 80023fc:	2a1c      	cmp	r2, #28
 80023fe:	dc00      	bgt.n	8002402 <__aeabi_dmul+0x47a>
 8002400:	e71e      	b.n	8002240 <__aeabi_dmul+0x2b8>
 8002402:	4656      	mov	r6, sl
 8002404:	3b08      	subs	r3, #8
 8002406:	2200      	movs	r2, #0
 8002408:	409e      	lsls	r6, r3
 800240a:	e723      	b.n	8002254 <__aeabi_dmul+0x2cc>
 800240c:	9b00      	ldr	r3, [sp, #0]
 800240e:	469c      	mov	ip, r3
 8002410:	e6e6      	b.n	80021e0 <__aeabi_dmul+0x258>
 8002412:	4912      	ldr	r1, [pc, #72]	; (800245c <__aeabi_dmul+0x4d4>)
 8002414:	0022      	movs	r2, r4
 8002416:	4461      	add	r1, ip
 8002418:	002e      	movs	r6, r5
 800241a:	408d      	lsls	r5, r1
 800241c:	408a      	lsls	r2, r1
 800241e:	40c6      	lsrs	r6, r0
 8002420:	1e69      	subs	r1, r5, #1
 8002422:	418d      	sbcs	r5, r1
 8002424:	4332      	orrs	r2, r6
 8002426:	432a      	orrs	r2, r5
 8002428:	40c4      	lsrs	r4, r0
 800242a:	0753      	lsls	r3, r2, #29
 800242c:	d0b6      	beq.n	800239c <__aeabi_dmul+0x414>
 800242e:	210f      	movs	r1, #15
 8002430:	4011      	ands	r1, r2
 8002432:	2904      	cmp	r1, #4
 8002434:	d1ac      	bne.n	8002390 <__aeabi_dmul+0x408>
 8002436:	e7b1      	b.n	800239c <__aeabi_dmul+0x414>
 8002438:	0765      	lsls	r5, r4, #29
 800243a:	0264      	lsls	r4, r4, #9
 800243c:	0b24      	lsrs	r4, r4, #12
 800243e:	08d2      	lsrs	r2, r2, #3
 8002440:	4315      	orrs	r5, r2
 8002442:	2200      	movs	r2, #0
 8002444:	e601      	b.n	800204a <__aeabi_dmul+0xc2>
 8002446:	2280      	movs	r2, #128	; 0x80
 8002448:	0312      	lsls	r2, r2, #12
 800244a:	4314      	orrs	r4, r2
 800244c:	0324      	lsls	r4, r4, #12
 800244e:	4a01      	ldr	r2, [pc, #4]	; (8002454 <__aeabi_dmul+0x4cc>)
 8002450:	0b24      	lsrs	r4, r4, #12
 8002452:	e5fa      	b.n	800204a <__aeabi_dmul+0xc2>
 8002454:	000007ff 	.word	0x000007ff
 8002458:	0000043e 	.word	0x0000043e
 800245c:	0000041e 	.word	0x0000041e

08002460 <__aeabi_dsub>:
 8002460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002462:	4657      	mov	r7, sl
 8002464:	464e      	mov	r6, r9
 8002466:	4645      	mov	r5, r8
 8002468:	46de      	mov	lr, fp
 800246a:	b5e0      	push	{r5, r6, r7, lr}
 800246c:	001e      	movs	r6, r3
 800246e:	0017      	movs	r7, r2
 8002470:	004a      	lsls	r2, r1, #1
 8002472:	030b      	lsls	r3, r1, #12
 8002474:	0d52      	lsrs	r2, r2, #21
 8002476:	0a5b      	lsrs	r3, r3, #9
 8002478:	4690      	mov	r8, r2
 800247a:	0f42      	lsrs	r2, r0, #29
 800247c:	431a      	orrs	r2, r3
 800247e:	0fcd      	lsrs	r5, r1, #31
 8002480:	4ccd      	ldr	r4, [pc, #820]	; (80027b8 <__aeabi_dsub+0x358>)
 8002482:	0331      	lsls	r1, r6, #12
 8002484:	00c3      	lsls	r3, r0, #3
 8002486:	4694      	mov	ip, r2
 8002488:	0070      	lsls	r0, r6, #1
 800248a:	0f7a      	lsrs	r2, r7, #29
 800248c:	0a49      	lsrs	r1, r1, #9
 800248e:	00ff      	lsls	r7, r7, #3
 8002490:	469a      	mov	sl, r3
 8002492:	46b9      	mov	r9, r7
 8002494:	0d40      	lsrs	r0, r0, #21
 8002496:	0ff6      	lsrs	r6, r6, #31
 8002498:	4311      	orrs	r1, r2
 800249a:	42a0      	cmp	r0, r4
 800249c:	d100      	bne.n	80024a0 <__aeabi_dsub+0x40>
 800249e:	e0b1      	b.n	8002604 <__aeabi_dsub+0x1a4>
 80024a0:	2201      	movs	r2, #1
 80024a2:	4056      	eors	r6, r2
 80024a4:	46b3      	mov	fp, r6
 80024a6:	42b5      	cmp	r5, r6
 80024a8:	d100      	bne.n	80024ac <__aeabi_dsub+0x4c>
 80024aa:	e088      	b.n	80025be <__aeabi_dsub+0x15e>
 80024ac:	4642      	mov	r2, r8
 80024ae:	1a12      	subs	r2, r2, r0
 80024b0:	2a00      	cmp	r2, #0
 80024b2:	dc00      	bgt.n	80024b6 <__aeabi_dsub+0x56>
 80024b4:	e0ae      	b.n	8002614 <__aeabi_dsub+0x1b4>
 80024b6:	2800      	cmp	r0, #0
 80024b8:	d100      	bne.n	80024bc <__aeabi_dsub+0x5c>
 80024ba:	e0c1      	b.n	8002640 <__aeabi_dsub+0x1e0>
 80024bc:	48be      	ldr	r0, [pc, #760]	; (80027b8 <__aeabi_dsub+0x358>)
 80024be:	4580      	cmp	r8, r0
 80024c0:	d100      	bne.n	80024c4 <__aeabi_dsub+0x64>
 80024c2:	e151      	b.n	8002768 <__aeabi_dsub+0x308>
 80024c4:	2080      	movs	r0, #128	; 0x80
 80024c6:	0400      	lsls	r0, r0, #16
 80024c8:	4301      	orrs	r1, r0
 80024ca:	2a38      	cmp	r2, #56	; 0x38
 80024cc:	dd00      	ble.n	80024d0 <__aeabi_dsub+0x70>
 80024ce:	e17b      	b.n	80027c8 <__aeabi_dsub+0x368>
 80024d0:	2a1f      	cmp	r2, #31
 80024d2:	dd00      	ble.n	80024d6 <__aeabi_dsub+0x76>
 80024d4:	e1ee      	b.n	80028b4 <__aeabi_dsub+0x454>
 80024d6:	2020      	movs	r0, #32
 80024d8:	003e      	movs	r6, r7
 80024da:	1a80      	subs	r0, r0, r2
 80024dc:	000c      	movs	r4, r1
 80024de:	40d6      	lsrs	r6, r2
 80024e0:	40d1      	lsrs	r1, r2
 80024e2:	4087      	lsls	r7, r0
 80024e4:	4662      	mov	r2, ip
 80024e6:	4084      	lsls	r4, r0
 80024e8:	1a52      	subs	r2, r2, r1
 80024ea:	1e78      	subs	r0, r7, #1
 80024ec:	4187      	sbcs	r7, r0
 80024ee:	4694      	mov	ip, r2
 80024f0:	4334      	orrs	r4, r6
 80024f2:	4327      	orrs	r7, r4
 80024f4:	1bdc      	subs	r4, r3, r7
 80024f6:	42a3      	cmp	r3, r4
 80024f8:	419b      	sbcs	r3, r3
 80024fa:	4662      	mov	r2, ip
 80024fc:	425b      	negs	r3, r3
 80024fe:	1ad3      	subs	r3, r2, r3
 8002500:	4699      	mov	r9, r3
 8002502:	464b      	mov	r3, r9
 8002504:	021b      	lsls	r3, r3, #8
 8002506:	d400      	bmi.n	800250a <__aeabi_dsub+0xaa>
 8002508:	e118      	b.n	800273c <__aeabi_dsub+0x2dc>
 800250a:	464b      	mov	r3, r9
 800250c:	0258      	lsls	r0, r3, #9
 800250e:	0a43      	lsrs	r3, r0, #9
 8002510:	4699      	mov	r9, r3
 8002512:	464b      	mov	r3, r9
 8002514:	2b00      	cmp	r3, #0
 8002516:	d100      	bne.n	800251a <__aeabi_dsub+0xba>
 8002518:	e137      	b.n	800278a <__aeabi_dsub+0x32a>
 800251a:	4648      	mov	r0, r9
 800251c:	f000 fcac 	bl	8002e78 <__clzsi2>
 8002520:	0001      	movs	r1, r0
 8002522:	3908      	subs	r1, #8
 8002524:	2320      	movs	r3, #32
 8002526:	0022      	movs	r2, r4
 8002528:	4648      	mov	r0, r9
 800252a:	1a5b      	subs	r3, r3, r1
 800252c:	40da      	lsrs	r2, r3
 800252e:	4088      	lsls	r0, r1
 8002530:	408c      	lsls	r4, r1
 8002532:	4643      	mov	r3, r8
 8002534:	4310      	orrs	r0, r2
 8002536:	4588      	cmp	r8, r1
 8002538:	dd00      	ble.n	800253c <__aeabi_dsub+0xdc>
 800253a:	e136      	b.n	80027aa <__aeabi_dsub+0x34a>
 800253c:	1ac9      	subs	r1, r1, r3
 800253e:	1c4b      	adds	r3, r1, #1
 8002540:	2b1f      	cmp	r3, #31
 8002542:	dd00      	ble.n	8002546 <__aeabi_dsub+0xe6>
 8002544:	e0ea      	b.n	800271c <__aeabi_dsub+0x2bc>
 8002546:	2220      	movs	r2, #32
 8002548:	0026      	movs	r6, r4
 800254a:	1ad2      	subs	r2, r2, r3
 800254c:	0001      	movs	r1, r0
 800254e:	4094      	lsls	r4, r2
 8002550:	40de      	lsrs	r6, r3
 8002552:	40d8      	lsrs	r0, r3
 8002554:	2300      	movs	r3, #0
 8002556:	4091      	lsls	r1, r2
 8002558:	1e62      	subs	r2, r4, #1
 800255a:	4194      	sbcs	r4, r2
 800255c:	4681      	mov	r9, r0
 800255e:	4698      	mov	r8, r3
 8002560:	4331      	orrs	r1, r6
 8002562:	430c      	orrs	r4, r1
 8002564:	0763      	lsls	r3, r4, #29
 8002566:	d009      	beq.n	800257c <__aeabi_dsub+0x11c>
 8002568:	230f      	movs	r3, #15
 800256a:	4023      	ands	r3, r4
 800256c:	2b04      	cmp	r3, #4
 800256e:	d005      	beq.n	800257c <__aeabi_dsub+0x11c>
 8002570:	1d23      	adds	r3, r4, #4
 8002572:	42a3      	cmp	r3, r4
 8002574:	41a4      	sbcs	r4, r4
 8002576:	4264      	negs	r4, r4
 8002578:	44a1      	add	r9, r4
 800257a:	001c      	movs	r4, r3
 800257c:	464b      	mov	r3, r9
 800257e:	021b      	lsls	r3, r3, #8
 8002580:	d400      	bmi.n	8002584 <__aeabi_dsub+0x124>
 8002582:	e0de      	b.n	8002742 <__aeabi_dsub+0x2e2>
 8002584:	4641      	mov	r1, r8
 8002586:	4b8c      	ldr	r3, [pc, #560]	; (80027b8 <__aeabi_dsub+0x358>)
 8002588:	3101      	adds	r1, #1
 800258a:	4299      	cmp	r1, r3
 800258c:	d100      	bne.n	8002590 <__aeabi_dsub+0x130>
 800258e:	e0e7      	b.n	8002760 <__aeabi_dsub+0x300>
 8002590:	464b      	mov	r3, r9
 8002592:	488a      	ldr	r0, [pc, #552]	; (80027bc <__aeabi_dsub+0x35c>)
 8002594:	08e4      	lsrs	r4, r4, #3
 8002596:	4003      	ands	r3, r0
 8002598:	0018      	movs	r0, r3
 800259a:	0549      	lsls	r1, r1, #21
 800259c:	075b      	lsls	r3, r3, #29
 800259e:	0240      	lsls	r0, r0, #9
 80025a0:	4323      	orrs	r3, r4
 80025a2:	0d4a      	lsrs	r2, r1, #21
 80025a4:	0b04      	lsrs	r4, r0, #12
 80025a6:	0512      	lsls	r2, r2, #20
 80025a8:	07ed      	lsls	r5, r5, #31
 80025aa:	4322      	orrs	r2, r4
 80025ac:	432a      	orrs	r2, r5
 80025ae:	0018      	movs	r0, r3
 80025b0:	0011      	movs	r1, r2
 80025b2:	bcf0      	pop	{r4, r5, r6, r7}
 80025b4:	46bb      	mov	fp, r7
 80025b6:	46b2      	mov	sl, r6
 80025b8:	46a9      	mov	r9, r5
 80025ba:	46a0      	mov	r8, r4
 80025bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80025be:	4642      	mov	r2, r8
 80025c0:	1a12      	subs	r2, r2, r0
 80025c2:	2a00      	cmp	r2, #0
 80025c4:	dd52      	ble.n	800266c <__aeabi_dsub+0x20c>
 80025c6:	2800      	cmp	r0, #0
 80025c8:	d100      	bne.n	80025cc <__aeabi_dsub+0x16c>
 80025ca:	e09c      	b.n	8002706 <__aeabi_dsub+0x2a6>
 80025cc:	45a0      	cmp	r8, r4
 80025ce:	d100      	bne.n	80025d2 <__aeabi_dsub+0x172>
 80025d0:	e0ca      	b.n	8002768 <__aeabi_dsub+0x308>
 80025d2:	2080      	movs	r0, #128	; 0x80
 80025d4:	0400      	lsls	r0, r0, #16
 80025d6:	4301      	orrs	r1, r0
 80025d8:	2a38      	cmp	r2, #56	; 0x38
 80025da:	dd00      	ble.n	80025de <__aeabi_dsub+0x17e>
 80025dc:	e149      	b.n	8002872 <__aeabi_dsub+0x412>
 80025de:	2a1f      	cmp	r2, #31
 80025e0:	dc00      	bgt.n	80025e4 <__aeabi_dsub+0x184>
 80025e2:	e197      	b.n	8002914 <__aeabi_dsub+0x4b4>
 80025e4:	0010      	movs	r0, r2
 80025e6:	000e      	movs	r6, r1
 80025e8:	3820      	subs	r0, #32
 80025ea:	40c6      	lsrs	r6, r0
 80025ec:	2a20      	cmp	r2, #32
 80025ee:	d004      	beq.n	80025fa <__aeabi_dsub+0x19a>
 80025f0:	2040      	movs	r0, #64	; 0x40
 80025f2:	1a82      	subs	r2, r0, r2
 80025f4:	4091      	lsls	r1, r2
 80025f6:	430f      	orrs	r7, r1
 80025f8:	46b9      	mov	r9, r7
 80025fa:	464c      	mov	r4, r9
 80025fc:	1e62      	subs	r2, r4, #1
 80025fe:	4194      	sbcs	r4, r2
 8002600:	4334      	orrs	r4, r6
 8002602:	e13a      	b.n	800287a <__aeabi_dsub+0x41a>
 8002604:	000a      	movs	r2, r1
 8002606:	433a      	orrs	r2, r7
 8002608:	d028      	beq.n	800265c <__aeabi_dsub+0x1fc>
 800260a:	46b3      	mov	fp, r6
 800260c:	42b5      	cmp	r5, r6
 800260e:	d02b      	beq.n	8002668 <__aeabi_dsub+0x208>
 8002610:	4a6b      	ldr	r2, [pc, #428]	; (80027c0 <__aeabi_dsub+0x360>)
 8002612:	4442      	add	r2, r8
 8002614:	2a00      	cmp	r2, #0
 8002616:	d05d      	beq.n	80026d4 <__aeabi_dsub+0x274>
 8002618:	4642      	mov	r2, r8
 800261a:	4644      	mov	r4, r8
 800261c:	1a82      	subs	r2, r0, r2
 800261e:	2c00      	cmp	r4, #0
 8002620:	d000      	beq.n	8002624 <__aeabi_dsub+0x1c4>
 8002622:	e0f5      	b.n	8002810 <__aeabi_dsub+0x3b0>
 8002624:	4665      	mov	r5, ip
 8002626:	431d      	orrs	r5, r3
 8002628:	d100      	bne.n	800262c <__aeabi_dsub+0x1cc>
 800262a:	e19c      	b.n	8002966 <__aeabi_dsub+0x506>
 800262c:	1e55      	subs	r5, r2, #1
 800262e:	2a01      	cmp	r2, #1
 8002630:	d100      	bne.n	8002634 <__aeabi_dsub+0x1d4>
 8002632:	e1fb      	b.n	8002a2c <__aeabi_dsub+0x5cc>
 8002634:	4c60      	ldr	r4, [pc, #384]	; (80027b8 <__aeabi_dsub+0x358>)
 8002636:	42a2      	cmp	r2, r4
 8002638:	d100      	bne.n	800263c <__aeabi_dsub+0x1dc>
 800263a:	e1bd      	b.n	80029b8 <__aeabi_dsub+0x558>
 800263c:	002a      	movs	r2, r5
 800263e:	e0f0      	b.n	8002822 <__aeabi_dsub+0x3c2>
 8002640:	0008      	movs	r0, r1
 8002642:	4338      	orrs	r0, r7
 8002644:	d100      	bne.n	8002648 <__aeabi_dsub+0x1e8>
 8002646:	e0c3      	b.n	80027d0 <__aeabi_dsub+0x370>
 8002648:	1e50      	subs	r0, r2, #1
 800264a:	2a01      	cmp	r2, #1
 800264c:	d100      	bne.n	8002650 <__aeabi_dsub+0x1f0>
 800264e:	e1a8      	b.n	80029a2 <__aeabi_dsub+0x542>
 8002650:	4c59      	ldr	r4, [pc, #356]	; (80027b8 <__aeabi_dsub+0x358>)
 8002652:	42a2      	cmp	r2, r4
 8002654:	d100      	bne.n	8002658 <__aeabi_dsub+0x1f8>
 8002656:	e087      	b.n	8002768 <__aeabi_dsub+0x308>
 8002658:	0002      	movs	r2, r0
 800265a:	e736      	b.n	80024ca <__aeabi_dsub+0x6a>
 800265c:	2201      	movs	r2, #1
 800265e:	4056      	eors	r6, r2
 8002660:	46b3      	mov	fp, r6
 8002662:	42b5      	cmp	r5, r6
 8002664:	d000      	beq.n	8002668 <__aeabi_dsub+0x208>
 8002666:	e721      	b.n	80024ac <__aeabi_dsub+0x4c>
 8002668:	4a55      	ldr	r2, [pc, #340]	; (80027c0 <__aeabi_dsub+0x360>)
 800266a:	4442      	add	r2, r8
 800266c:	2a00      	cmp	r2, #0
 800266e:	d100      	bne.n	8002672 <__aeabi_dsub+0x212>
 8002670:	e0b5      	b.n	80027de <__aeabi_dsub+0x37e>
 8002672:	4642      	mov	r2, r8
 8002674:	4644      	mov	r4, r8
 8002676:	1a82      	subs	r2, r0, r2
 8002678:	2c00      	cmp	r4, #0
 800267a:	d100      	bne.n	800267e <__aeabi_dsub+0x21e>
 800267c:	e138      	b.n	80028f0 <__aeabi_dsub+0x490>
 800267e:	4e4e      	ldr	r6, [pc, #312]	; (80027b8 <__aeabi_dsub+0x358>)
 8002680:	42b0      	cmp	r0, r6
 8002682:	d100      	bne.n	8002686 <__aeabi_dsub+0x226>
 8002684:	e1de      	b.n	8002a44 <__aeabi_dsub+0x5e4>
 8002686:	2680      	movs	r6, #128	; 0x80
 8002688:	4664      	mov	r4, ip
 800268a:	0436      	lsls	r6, r6, #16
 800268c:	4334      	orrs	r4, r6
 800268e:	46a4      	mov	ip, r4
 8002690:	2a38      	cmp	r2, #56	; 0x38
 8002692:	dd00      	ble.n	8002696 <__aeabi_dsub+0x236>
 8002694:	e196      	b.n	80029c4 <__aeabi_dsub+0x564>
 8002696:	2a1f      	cmp	r2, #31
 8002698:	dd00      	ble.n	800269c <__aeabi_dsub+0x23c>
 800269a:	e224      	b.n	8002ae6 <__aeabi_dsub+0x686>
 800269c:	2620      	movs	r6, #32
 800269e:	1ab4      	subs	r4, r6, r2
 80026a0:	46a2      	mov	sl, r4
 80026a2:	4664      	mov	r4, ip
 80026a4:	4656      	mov	r6, sl
 80026a6:	40b4      	lsls	r4, r6
 80026a8:	46a1      	mov	r9, r4
 80026aa:	001c      	movs	r4, r3
 80026ac:	464e      	mov	r6, r9
 80026ae:	40d4      	lsrs	r4, r2
 80026b0:	4326      	orrs	r6, r4
 80026b2:	0034      	movs	r4, r6
 80026b4:	4656      	mov	r6, sl
 80026b6:	40b3      	lsls	r3, r6
 80026b8:	1e5e      	subs	r6, r3, #1
 80026ba:	41b3      	sbcs	r3, r6
 80026bc:	431c      	orrs	r4, r3
 80026be:	4663      	mov	r3, ip
 80026c0:	40d3      	lsrs	r3, r2
 80026c2:	18c9      	adds	r1, r1, r3
 80026c4:	19e4      	adds	r4, r4, r7
 80026c6:	42bc      	cmp	r4, r7
 80026c8:	41bf      	sbcs	r7, r7
 80026ca:	427f      	negs	r7, r7
 80026cc:	46b9      	mov	r9, r7
 80026ce:	4680      	mov	r8, r0
 80026d0:	4489      	add	r9, r1
 80026d2:	e0d8      	b.n	8002886 <__aeabi_dsub+0x426>
 80026d4:	4640      	mov	r0, r8
 80026d6:	4c3b      	ldr	r4, [pc, #236]	; (80027c4 <__aeabi_dsub+0x364>)
 80026d8:	3001      	adds	r0, #1
 80026da:	4220      	tst	r0, r4
 80026dc:	d000      	beq.n	80026e0 <__aeabi_dsub+0x280>
 80026de:	e0b4      	b.n	800284a <__aeabi_dsub+0x3ea>
 80026e0:	4640      	mov	r0, r8
 80026e2:	2800      	cmp	r0, #0
 80026e4:	d000      	beq.n	80026e8 <__aeabi_dsub+0x288>
 80026e6:	e144      	b.n	8002972 <__aeabi_dsub+0x512>
 80026e8:	4660      	mov	r0, ip
 80026ea:	4318      	orrs	r0, r3
 80026ec:	d100      	bne.n	80026f0 <__aeabi_dsub+0x290>
 80026ee:	e190      	b.n	8002a12 <__aeabi_dsub+0x5b2>
 80026f0:	0008      	movs	r0, r1
 80026f2:	4338      	orrs	r0, r7
 80026f4:	d000      	beq.n	80026f8 <__aeabi_dsub+0x298>
 80026f6:	e1aa      	b.n	8002a4e <__aeabi_dsub+0x5ee>
 80026f8:	4661      	mov	r1, ip
 80026fa:	08db      	lsrs	r3, r3, #3
 80026fc:	0749      	lsls	r1, r1, #29
 80026fe:	430b      	orrs	r3, r1
 8002700:	4661      	mov	r1, ip
 8002702:	08cc      	lsrs	r4, r1, #3
 8002704:	e027      	b.n	8002756 <__aeabi_dsub+0x2f6>
 8002706:	0008      	movs	r0, r1
 8002708:	4338      	orrs	r0, r7
 800270a:	d061      	beq.n	80027d0 <__aeabi_dsub+0x370>
 800270c:	1e50      	subs	r0, r2, #1
 800270e:	2a01      	cmp	r2, #1
 8002710:	d100      	bne.n	8002714 <__aeabi_dsub+0x2b4>
 8002712:	e139      	b.n	8002988 <__aeabi_dsub+0x528>
 8002714:	42a2      	cmp	r2, r4
 8002716:	d027      	beq.n	8002768 <__aeabi_dsub+0x308>
 8002718:	0002      	movs	r2, r0
 800271a:	e75d      	b.n	80025d8 <__aeabi_dsub+0x178>
 800271c:	0002      	movs	r2, r0
 800271e:	391f      	subs	r1, #31
 8002720:	40ca      	lsrs	r2, r1
 8002722:	0011      	movs	r1, r2
 8002724:	2b20      	cmp	r3, #32
 8002726:	d003      	beq.n	8002730 <__aeabi_dsub+0x2d0>
 8002728:	2240      	movs	r2, #64	; 0x40
 800272a:	1ad3      	subs	r3, r2, r3
 800272c:	4098      	lsls	r0, r3
 800272e:	4304      	orrs	r4, r0
 8002730:	1e63      	subs	r3, r4, #1
 8002732:	419c      	sbcs	r4, r3
 8002734:	2300      	movs	r3, #0
 8002736:	4699      	mov	r9, r3
 8002738:	4698      	mov	r8, r3
 800273a:	430c      	orrs	r4, r1
 800273c:	0763      	lsls	r3, r4, #29
 800273e:	d000      	beq.n	8002742 <__aeabi_dsub+0x2e2>
 8002740:	e712      	b.n	8002568 <__aeabi_dsub+0x108>
 8002742:	464b      	mov	r3, r9
 8002744:	464a      	mov	r2, r9
 8002746:	08e4      	lsrs	r4, r4, #3
 8002748:	075b      	lsls	r3, r3, #29
 800274a:	4323      	orrs	r3, r4
 800274c:	08d4      	lsrs	r4, r2, #3
 800274e:	4642      	mov	r2, r8
 8002750:	4919      	ldr	r1, [pc, #100]	; (80027b8 <__aeabi_dsub+0x358>)
 8002752:	428a      	cmp	r2, r1
 8002754:	d00e      	beq.n	8002774 <__aeabi_dsub+0x314>
 8002756:	0324      	lsls	r4, r4, #12
 8002758:	0552      	lsls	r2, r2, #21
 800275a:	0b24      	lsrs	r4, r4, #12
 800275c:	0d52      	lsrs	r2, r2, #21
 800275e:	e722      	b.n	80025a6 <__aeabi_dsub+0x146>
 8002760:	000a      	movs	r2, r1
 8002762:	2400      	movs	r4, #0
 8002764:	2300      	movs	r3, #0
 8002766:	e71e      	b.n	80025a6 <__aeabi_dsub+0x146>
 8002768:	08db      	lsrs	r3, r3, #3
 800276a:	4662      	mov	r2, ip
 800276c:	0752      	lsls	r2, r2, #29
 800276e:	4313      	orrs	r3, r2
 8002770:	4662      	mov	r2, ip
 8002772:	08d4      	lsrs	r4, r2, #3
 8002774:	001a      	movs	r2, r3
 8002776:	4322      	orrs	r2, r4
 8002778:	d100      	bne.n	800277c <__aeabi_dsub+0x31c>
 800277a:	e1fc      	b.n	8002b76 <__aeabi_dsub+0x716>
 800277c:	2280      	movs	r2, #128	; 0x80
 800277e:	0312      	lsls	r2, r2, #12
 8002780:	4314      	orrs	r4, r2
 8002782:	0324      	lsls	r4, r4, #12
 8002784:	4a0c      	ldr	r2, [pc, #48]	; (80027b8 <__aeabi_dsub+0x358>)
 8002786:	0b24      	lsrs	r4, r4, #12
 8002788:	e70d      	b.n	80025a6 <__aeabi_dsub+0x146>
 800278a:	0020      	movs	r0, r4
 800278c:	f000 fb74 	bl	8002e78 <__clzsi2>
 8002790:	0001      	movs	r1, r0
 8002792:	3118      	adds	r1, #24
 8002794:	291f      	cmp	r1, #31
 8002796:	dc00      	bgt.n	800279a <__aeabi_dsub+0x33a>
 8002798:	e6c4      	b.n	8002524 <__aeabi_dsub+0xc4>
 800279a:	3808      	subs	r0, #8
 800279c:	4084      	lsls	r4, r0
 800279e:	4643      	mov	r3, r8
 80027a0:	0020      	movs	r0, r4
 80027a2:	2400      	movs	r4, #0
 80027a4:	4588      	cmp	r8, r1
 80027a6:	dc00      	bgt.n	80027aa <__aeabi_dsub+0x34a>
 80027a8:	e6c8      	b.n	800253c <__aeabi_dsub+0xdc>
 80027aa:	4a04      	ldr	r2, [pc, #16]	; (80027bc <__aeabi_dsub+0x35c>)
 80027ac:	1a5b      	subs	r3, r3, r1
 80027ae:	4010      	ands	r0, r2
 80027b0:	4698      	mov	r8, r3
 80027b2:	4681      	mov	r9, r0
 80027b4:	e6d6      	b.n	8002564 <__aeabi_dsub+0x104>
 80027b6:	46c0      	nop			; (mov r8, r8)
 80027b8:	000007ff 	.word	0x000007ff
 80027bc:	ff7fffff 	.word	0xff7fffff
 80027c0:	fffff801 	.word	0xfffff801
 80027c4:	000007fe 	.word	0x000007fe
 80027c8:	430f      	orrs	r7, r1
 80027ca:	1e7a      	subs	r2, r7, #1
 80027cc:	4197      	sbcs	r7, r2
 80027ce:	e691      	b.n	80024f4 <__aeabi_dsub+0x94>
 80027d0:	4661      	mov	r1, ip
 80027d2:	08db      	lsrs	r3, r3, #3
 80027d4:	0749      	lsls	r1, r1, #29
 80027d6:	430b      	orrs	r3, r1
 80027d8:	4661      	mov	r1, ip
 80027da:	08cc      	lsrs	r4, r1, #3
 80027dc:	e7b8      	b.n	8002750 <__aeabi_dsub+0x2f0>
 80027de:	4640      	mov	r0, r8
 80027e0:	4cd3      	ldr	r4, [pc, #844]	; (8002b30 <__aeabi_dsub+0x6d0>)
 80027e2:	3001      	adds	r0, #1
 80027e4:	4220      	tst	r0, r4
 80027e6:	d000      	beq.n	80027ea <__aeabi_dsub+0x38a>
 80027e8:	e0a2      	b.n	8002930 <__aeabi_dsub+0x4d0>
 80027ea:	4640      	mov	r0, r8
 80027ec:	2800      	cmp	r0, #0
 80027ee:	d000      	beq.n	80027f2 <__aeabi_dsub+0x392>
 80027f0:	e101      	b.n	80029f6 <__aeabi_dsub+0x596>
 80027f2:	4660      	mov	r0, ip
 80027f4:	4318      	orrs	r0, r3
 80027f6:	d100      	bne.n	80027fa <__aeabi_dsub+0x39a>
 80027f8:	e15e      	b.n	8002ab8 <__aeabi_dsub+0x658>
 80027fa:	0008      	movs	r0, r1
 80027fc:	4338      	orrs	r0, r7
 80027fe:	d000      	beq.n	8002802 <__aeabi_dsub+0x3a2>
 8002800:	e15f      	b.n	8002ac2 <__aeabi_dsub+0x662>
 8002802:	4661      	mov	r1, ip
 8002804:	08db      	lsrs	r3, r3, #3
 8002806:	0749      	lsls	r1, r1, #29
 8002808:	430b      	orrs	r3, r1
 800280a:	4661      	mov	r1, ip
 800280c:	08cc      	lsrs	r4, r1, #3
 800280e:	e7a2      	b.n	8002756 <__aeabi_dsub+0x2f6>
 8002810:	4dc8      	ldr	r5, [pc, #800]	; (8002b34 <__aeabi_dsub+0x6d4>)
 8002812:	42a8      	cmp	r0, r5
 8002814:	d100      	bne.n	8002818 <__aeabi_dsub+0x3b8>
 8002816:	e0cf      	b.n	80029b8 <__aeabi_dsub+0x558>
 8002818:	2580      	movs	r5, #128	; 0x80
 800281a:	4664      	mov	r4, ip
 800281c:	042d      	lsls	r5, r5, #16
 800281e:	432c      	orrs	r4, r5
 8002820:	46a4      	mov	ip, r4
 8002822:	2a38      	cmp	r2, #56	; 0x38
 8002824:	dc56      	bgt.n	80028d4 <__aeabi_dsub+0x474>
 8002826:	2a1f      	cmp	r2, #31
 8002828:	dd00      	ble.n	800282c <__aeabi_dsub+0x3cc>
 800282a:	e0d1      	b.n	80029d0 <__aeabi_dsub+0x570>
 800282c:	2520      	movs	r5, #32
 800282e:	001e      	movs	r6, r3
 8002830:	1aad      	subs	r5, r5, r2
 8002832:	4664      	mov	r4, ip
 8002834:	40ab      	lsls	r3, r5
 8002836:	40ac      	lsls	r4, r5
 8002838:	40d6      	lsrs	r6, r2
 800283a:	1e5d      	subs	r5, r3, #1
 800283c:	41ab      	sbcs	r3, r5
 800283e:	4334      	orrs	r4, r6
 8002840:	4323      	orrs	r3, r4
 8002842:	4664      	mov	r4, ip
 8002844:	40d4      	lsrs	r4, r2
 8002846:	1b09      	subs	r1, r1, r4
 8002848:	e049      	b.n	80028de <__aeabi_dsub+0x47e>
 800284a:	4660      	mov	r0, ip
 800284c:	1bdc      	subs	r4, r3, r7
 800284e:	1a46      	subs	r6, r0, r1
 8002850:	42a3      	cmp	r3, r4
 8002852:	4180      	sbcs	r0, r0
 8002854:	4240      	negs	r0, r0
 8002856:	4681      	mov	r9, r0
 8002858:	0030      	movs	r0, r6
 800285a:	464e      	mov	r6, r9
 800285c:	1b80      	subs	r0, r0, r6
 800285e:	4681      	mov	r9, r0
 8002860:	0200      	lsls	r0, r0, #8
 8002862:	d476      	bmi.n	8002952 <__aeabi_dsub+0x4f2>
 8002864:	464b      	mov	r3, r9
 8002866:	4323      	orrs	r3, r4
 8002868:	d000      	beq.n	800286c <__aeabi_dsub+0x40c>
 800286a:	e652      	b.n	8002512 <__aeabi_dsub+0xb2>
 800286c:	2400      	movs	r4, #0
 800286e:	2500      	movs	r5, #0
 8002870:	e771      	b.n	8002756 <__aeabi_dsub+0x2f6>
 8002872:	4339      	orrs	r1, r7
 8002874:	000c      	movs	r4, r1
 8002876:	1e62      	subs	r2, r4, #1
 8002878:	4194      	sbcs	r4, r2
 800287a:	18e4      	adds	r4, r4, r3
 800287c:	429c      	cmp	r4, r3
 800287e:	419b      	sbcs	r3, r3
 8002880:	425b      	negs	r3, r3
 8002882:	4463      	add	r3, ip
 8002884:	4699      	mov	r9, r3
 8002886:	464b      	mov	r3, r9
 8002888:	021b      	lsls	r3, r3, #8
 800288a:	d400      	bmi.n	800288e <__aeabi_dsub+0x42e>
 800288c:	e756      	b.n	800273c <__aeabi_dsub+0x2dc>
 800288e:	2301      	movs	r3, #1
 8002890:	469c      	mov	ip, r3
 8002892:	4ba8      	ldr	r3, [pc, #672]	; (8002b34 <__aeabi_dsub+0x6d4>)
 8002894:	44e0      	add	r8, ip
 8002896:	4598      	cmp	r8, r3
 8002898:	d038      	beq.n	800290c <__aeabi_dsub+0x4ac>
 800289a:	464b      	mov	r3, r9
 800289c:	48a6      	ldr	r0, [pc, #664]	; (8002b38 <__aeabi_dsub+0x6d8>)
 800289e:	2201      	movs	r2, #1
 80028a0:	4003      	ands	r3, r0
 80028a2:	0018      	movs	r0, r3
 80028a4:	0863      	lsrs	r3, r4, #1
 80028a6:	4014      	ands	r4, r2
 80028a8:	431c      	orrs	r4, r3
 80028aa:	07c3      	lsls	r3, r0, #31
 80028ac:	431c      	orrs	r4, r3
 80028ae:	0843      	lsrs	r3, r0, #1
 80028b0:	4699      	mov	r9, r3
 80028b2:	e657      	b.n	8002564 <__aeabi_dsub+0x104>
 80028b4:	0010      	movs	r0, r2
 80028b6:	000e      	movs	r6, r1
 80028b8:	3820      	subs	r0, #32
 80028ba:	40c6      	lsrs	r6, r0
 80028bc:	2a20      	cmp	r2, #32
 80028be:	d004      	beq.n	80028ca <__aeabi_dsub+0x46a>
 80028c0:	2040      	movs	r0, #64	; 0x40
 80028c2:	1a82      	subs	r2, r0, r2
 80028c4:	4091      	lsls	r1, r2
 80028c6:	430f      	orrs	r7, r1
 80028c8:	46b9      	mov	r9, r7
 80028ca:	464f      	mov	r7, r9
 80028cc:	1e7a      	subs	r2, r7, #1
 80028ce:	4197      	sbcs	r7, r2
 80028d0:	4337      	orrs	r7, r6
 80028d2:	e60f      	b.n	80024f4 <__aeabi_dsub+0x94>
 80028d4:	4662      	mov	r2, ip
 80028d6:	431a      	orrs	r2, r3
 80028d8:	0013      	movs	r3, r2
 80028da:	1e5a      	subs	r2, r3, #1
 80028dc:	4193      	sbcs	r3, r2
 80028de:	1afc      	subs	r4, r7, r3
 80028e0:	42a7      	cmp	r7, r4
 80028e2:	41bf      	sbcs	r7, r7
 80028e4:	427f      	negs	r7, r7
 80028e6:	1bcb      	subs	r3, r1, r7
 80028e8:	4699      	mov	r9, r3
 80028ea:	465d      	mov	r5, fp
 80028ec:	4680      	mov	r8, r0
 80028ee:	e608      	b.n	8002502 <__aeabi_dsub+0xa2>
 80028f0:	4666      	mov	r6, ip
 80028f2:	431e      	orrs	r6, r3
 80028f4:	d100      	bne.n	80028f8 <__aeabi_dsub+0x498>
 80028f6:	e0be      	b.n	8002a76 <__aeabi_dsub+0x616>
 80028f8:	1e56      	subs	r6, r2, #1
 80028fa:	2a01      	cmp	r2, #1
 80028fc:	d100      	bne.n	8002900 <__aeabi_dsub+0x4a0>
 80028fe:	e109      	b.n	8002b14 <__aeabi_dsub+0x6b4>
 8002900:	4c8c      	ldr	r4, [pc, #560]	; (8002b34 <__aeabi_dsub+0x6d4>)
 8002902:	42a2      	cmp	r2, r4
 8002904:	d100      	bne.n	8002908 <__aeabi_dsub+0x4a8>
 8002906:	e119      	b.n	8002b3c <__aeabi_dsub+0x6dc>
 8002908:	0032      	movs	r2, r6
 800290a:	e6c1      	b.n	8002690 <__aeabi_dsub+0x230>
 800290c:	4642      	mov	r2, r8
 800290e:	2400      	movs	r4, #0
 8002910:	2300      	movs	r3, #0
 8002912:	e648      	b.n	80025a6 <__aeabi_dsub+0x146>
 8002914:	2020      	movs	r0, #32
 8002916:	000c      	movs	r4, r1
 8002918:	1a80      	subs	r0, r0, r2
 800291a:	003e      	movs	r6, r7
 800291c:	4087      	lsls	r7, r0
 800291e:	4084      	lsls	r4, r0
 8002920:	40d6      	lsrs	r6, r2
 8002922:	1e78      	subs	r0, r7, #1
 8002924:	4187      	sbcs	r7, r0
 8002926:	40d1      	lsrs	r1, r2
 8002928:	4334      	orrs	r4, r6
 800292a:	433c      	orrs	r4, r7
 800292c:	448c      	add	ip, r1
 800292e:	e7a4      	b.n	800287a <__aeabi_dsub+0x41a>
 8002930:	4a80      	ldr	r2, [pc, #512]	; (8002b34 <__aeabi_dsub+0x6d4>)
 8002932:	4290      	cmp	r0, r2
 8002934:	d100      	bne.n	8002938 <__aeabi_dsub+0x4d8>
 8002936:	e0e9      	b.n	8002b0c <__aeabi_dsub+0x6ac>
 8002938:	19df      	adds	r7, r3, r7
 800293a:	429f      	cmp	r7, r3
 800293c:	419b      	sbcs	r3, r3
 800293e:	4461      	add	r1, ip
 8002940:	425b      	negs	r3, r3
 8002942:	18c9      	adds	r1, r1, r3
 8002944:	07cc      	lsls	r4, r1, #31
 8002946:	087f      	lsrs	r7, r7, #1
 8002948:	084b      	lsrs	r3, r1, #1
 800294a:	4699      	mov	r9, r3
 800294c:	4680      	mov	r8, r0
 800294e:	433c      	orrs	r4, r7
 8002950:	e6f4      	b.n	800273c <__aeabi_dsub+0x2dc>
 8002952:	1afc      	subs	r4, r7, r3
 8002954:	42a7      	cmp	r7, r4
 8002956:	41bf      	sbcs	r7, r7
 8002958:	4663      	mov	r3, ip
 800295a:	427f      	negs	r7, r7
 800295c:	1ac9      	subs	r1, r1, r3
 800295e:	1bcb      	subs	r3, r1, r7
 8002960:	4699      	mov	r9, r3
 8002962:	465d      	mov	r5, fp
 8002964:	e5d5      	b.n	8002512 <__aeabi_dsub+0xb2>
 8002966:	08ff      	lsrs	r7, r7, #3
 8002968:	074b      	lsls	r3, r1, #29
 800296a:	465d      	mov	r5, fp
 800296c:	433b      	orrs	r3, r7
 800296e:	08cc      	lsrs	r4, r1, #3
 8002970:	e6ee      	b.n	8002750 <__aeabi_dsub+0x2f0>
 8002972:	4662      	mov	r2, ip
 8002974:	431a      	orrs	r2, r3
 8002976:	d000      	beq.n	800297a <__aeabi_dsub+0x51a>
 8002978:	e082      	b.n	8002a80 <__aeabi_dsub+0x620>
 800297a:	000b      	movs	r3, r1
 800297c:	433b      	orrs	r3, r7
 800297e:	d11b      	bne.n	80029b8 <__aeabi_dsub+0x558>
 8002980:	2480      	movs	r4, #128	; 0x80
 8002982:	2500      	movs	r5, #0
 8002984:	0324      	lsls	r4, r4, #12
 8002986:	e6f9      	b.n	800277c <__aeabi_dsub+0x31c>
 8002988:	19dc      	adds	r4, r3, r7
 800298a:	429c      	cmp	r4, r3
 800298c:	419b      	sbcs	r3, r3
 800298e:	4461      	add	r1, ip
 8002990:	4689      	mov	r9, r1
 8002992:	425b      	negs	r3, r3
 8002994:	4499      	add	r9, r3
 8002996:	464b      	mov	r3, r9
 8002998:	021b      	lsls	r3, r3, #8
 800299a:	d444      	bmi.n	8002a26 <__aeabi_dsub+0x5c6>
 800299c:	2301      	movs	r3, #1
 800299e:	4698      	mov	r8, r3
 80029a0:	e6cc      	b.n	800273c <__aeabi_dsub+0x2dc>
 80029a2:	1bdc      	subs	r4, r3, r7
 80029a4:	4662      	mov	r2, ip
 80029a6:	42a3      	cmp	r3, r4
 80029a8:	419b      	sbcs	r3, r3
 80029aa:	1a51      	subs	r1, r2, r1
 80029ac:	425b      	negs	r3, r3
 80029ae:	1acb      	subs	r3, r1, r3
 80029b0:	4699      	mov	r9, r3
 80029b2:	2301      	movs	r3, #1
 80029b4:	4698      	mov	r8, r3
 80029b6:	e5a4      	b.n	8002502 <__aeabi_dsub+0xa2>
 80029b8:	08ff      	lsrs	r7, r7, #3
 80029ba:	074b      	lsls	r3, r1, #29
 80029bc:	465d      	mov	r5, fp
 80029be:	433b      	orrs	r3, r7
 80029c0:	08cc      	lsrs	r4, r1, #3
 80029c2:	e6d7      	b.n	8002774 <__aeabi_dsub+0x314>
 80029c4:	4662      	mov	r2, ip
 80029c6:	431a      	orrs	r2, r3
 80029c8:	0014      	movs	r4, r2
 80029ca:	1e63      	subs	r3, r4, #1
 80029cc:	419c      	sbcs	r4, r3
 80029ce:	e679      	b.n	80026c4 <__aeabi_dsub+0x264>
 80029d0:	0015      	movs	r5, r2
 80029d2:	4664      	mov	r4, ip
 80029d4:	3d20      	subs	r5, #32
 80029d6:	40ec      	lsrs	r4, r5
 80029d8:	46a0      	mov	r8, r4
 80029da:	2a20      	cmp	r2, #32
 80029dc:	d005      	beq.n	80029ea <__aeabi_dsub+0x58a>
 80029de:	2540      	movs	r5, #64	; 0x40
 80029e0:	4664      	mov	r4, ip
 80029e2:	1aaa      	subs	r2, r5, r2
 80029e4:	4094      	lsls	r4, r2
 80029e6:	4323      	orrs	r3, r4
 80029e8:	469a      	mov	sl, r3
 80029ea:	4654      	mov	r4, sl
 80029ec:	1e63      	subs	r3, r4, #1
 80029ee:	419c      	sbcs	r4, r3
 80029f0:	4643      	mov	r3, r8
 80029f2:	4323      	orrs	r3, r4
 80029f4:	e773      	b.n	80028de <__aeabi_dsub+0x47e>
 80029f6:	4662      	mov	r2, ip
 80029f8:	431a      	orrs	r2, r3
 80029fa:	d023      	beq.n	8002a44 <__aeabi_dsub+0x5e4>
 80029fc:	000a      	movs	r2, r1
 80029fe:	433a      	orrs	r2, r7
 8002a00:	d000      	beq.n	8002a04 <__aeabi_dsub+0x5a4>
 8002a02:	e0a0      	b.n	8002b46 <__aeabi_dsub+0x6e6>
 8002a04:	4662      	mov	r2, ip
 8002a06:	08db      	lsrs	r3, r3, #3
 8002a08:	0752      	lsls	r2, r2, #29
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	4662      	mov	r2, ip
 8002a0e:	08d4      	lsrs	r4, r2, #3
 8002a10:	e6b0      	b.n	8002774 <__aeabi_dsub+0x314>
 8002a12:	000b      	movs	r3, r1
 8002a14:	433b      	orrs	r3, r7
 8002a16:	d100      	bne.n	8002a1a <__aeabi_dsub+0x5ba>
 8002a18:	e728      	b.n	800286c <__aeabi_dsub+0x40c>
 8002a1a:	08ff      	lsrs	r7, r7, #3
 8002a1c:	074b      	lsls	r3, r1, #29
 8002a1e:	465d      	mov	r5, fp
 8002a20:	433b      	orrs	r3, r7
 8002a22:	08cc      	lsrs	r4, r1, #3
 8002a24:	e697      	b.n	8002756 <__aeabi_dsub+0x2f6>
 8002a26:	2302      	movs	r3, #2
 8002a28:	4698      	mov	r8, r3
 8002a2a:	e736      	b.n	800289a <__aeabi_dsub+0x43a>
 8002a2c:	1afc      	subs	r4, r7, r3
 8002a2e:	42a7      	cmp	r7, r4
 8002a30:	41bf      	sbcs	r7, r7
 8002a32:	4663      	mov	r3, ip
 8002a34:	427f      	negs	r7, r7
 8002a36:	1ac9      	subs	r1, r1, r3
 8002a38:	1bcb      	subs	r3, r1, r7
 8002a3a:	4699      	mov	r9, r3
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	465d      	mov	r5, fp
 8002a40:	4698      	mov	r8, r3
 8002a42:	e55e      	b.n	8002502 <__aeabi_dsub+0xa2>
 8002a44:	074b      	lsls	r3, r1, #29
 8002a46:	08ff      	lsrs	r7, r7, #3
 8002a48:	433b      	orrs	r3, r7
 8002a4a:	08cc      	lsrs	r4, r1, #3
 8002a4c:	e692      	b.n	8002774 <__aeabi_dsub+0x314>
 8002a4e:	1bdc      	subs	r4, r3, r7
 8002a50:	4660      	mov	r0, ip
 8002a52:	42a3      	cmp	r3, r4
 8002a54:	41b6      	sbcs	r6, r6
 8002a56:	1a40      	subs	r0, r0, r1
 8002a58:	4276      	negs	r6, r6
 8002a5a:	1b80      	subs	r0, r0, r6
 8002a5c:	4681      	mov	r9, r0
 8002a5e:	0200      	lsls	r0, r0, #8
 8002a60:	d560      	bpl.n	8002b24 <__aeabi_dsub+0x6c4>
 8002a62:	1afc      	subs	r4, r7, r3
 8002a64:	42a7      	cmp	r7, r4
 8002a66:	41bf      	sbcs	r7, r7
 8002a68:	4663      	mov	r3, ip
 8002a6a:	427f      	negs	r7, r7
 8002a6c:	1ac9      	subs	r1, r1, r3
 8002a6e:	1bcb      	subs	r3, r1, r7
 8002a70:	4699      	mov	r9, r3
 8002a72:	465d      	mov	r5, fp
 8002a74:	e576      	b.n	8002564 <__aeabi_dsub+0x104>
 8002a76:	08ff      	lsrs	r7, r7, #3
 8002a78:	074b      	lsls	r3, r1, #29
 8002a7a:	433b      	orrs	r3, r7
 8002a7c:	08cc      	lsrs	r4, r1, #3
 8002a7e:	e667      	b.n	8002750 <__aeabi_dsub+0x2f0>
 8002a80:	000a      	movs	r2, r1
 8002a82:	08db      	lsrs	r3, r3, #3
 8002a84:	433a      	orrs	r2, r7
 8002a86:	d100      	bne.n	8002a8a <__aeabi_dsub+0x62a>
 8002a88:	e66f      	b.n	800276a <__aeabi_dsub+0x30a>
 8002a8a:	4662      	mov	r2, ip
 8002a8c:	0752      	lsls	r2, r2, #29
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	4662      	mov	r2, ip
 8002a92:	08d4      	lsrs	r4, r2, #3
 8002a94:	2280      	movs	r2, #128	; 0x80
 8002a96:	0312      	lsls	r2, r2, #12
 8002a98:	4214      	tst	r4, r2
 8002a9a:	d007      	beq.n	8002aac <__aeabi_dsub+0x64c>
 8002a9c:	08c8      	lsrs	r0, r1, #3
 8002a9e:	4210      	tst	r0, r2
 8002aa0:	d104      	bne.n	8002aac <__aeabi_dsub+0x64c>
 8002aa2:	465d      	mov	r5, fp
 8002aa4:	0004      	movs	r4, r0
 8002aa6:	08fb      	lsrs	r3, r7, #3
 8002aa8:	0749      	lsls	r1, r1, #29
 8002aaa:	430b      	orrs	r3, r1
 8002aac:	0f5a      	lsrs	r2, r3, #29
 8002aae:	00db      	lsls	r3, r3, #3
 8002ab0:	08db      	lsrs	r3, r3, #3
 8002ab2:	0752      	lsls	r2, r2, #29
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	e65d      	b.n	8002774 <__aeabi_dsub+0x314>
 8002ab8:	074b      	lsls	r3, r1, #29
 8002aba:	08ff      	lsrs	r7, r7, #3
 8002abc:	433b      	orrs	r3, r7
 8002abe:	08cc      	lsrs	r4, r1, #3
 8002ac0:	e649      	b.n	8002756 <__aeabi_dsub+0x2f6>
 8002ac2:	19dc      	adds	r4, r3, r7
 8002ac4:	429c      	cmp	r4, r3
 8002ac6:	419b      	sbcs	r3, r3
 8002ac8:	4461      	add	r1, ip
 8002aca:	4689      	mov	r9, r1
 8002acc:	425b      	negs	r3, r3
 8002ace:	4499      	add	r9, r3
 8002ad0:	464b      	mov	r3, r9
 8002ad2:	021b      	lsls	r3, r3, #8
 8002ad4:	d400      	bmi.n	8002ad8 <__aeabi_dsub+0x678>
 8002ad6:	e631      	b.n	800273c <__aeabi_dsub+0x2dc>
 8002ad8:	464a      	mov	r2, r9
 8002ada:	4b17      	ldr	r3, [pc, #92]	; (8002b38 <__aeabi_dsub+0x6d8>)
 8002adc:	401a      	ands	r2, r3
 8002ade:	2301      	movs	r3, #1
 8002ae0:	4691      	mov	r9, r2
 8002ae2:	4698      	mov	r8, r3
 8002ae4:	e62a      	b.n	800273c <__aeabi_dsub+0x2dc>
 8002ae6:	0016      	movs	r6, r2
 8002ae8:	4664      	mov	r4, ip
 8002aea:	3e20      	subs	r6, #32
 8002aec:	40f4      	lsrs	r4, r6
 8002aee:	46a0      	mov	r8, r4
 8002af0:	2a20      	cmp	r2, #32
 8002af2:	d005      	beq.n	8002b00 <__aeabi_dsub+0x6a0>
 8002af4:	2640      	movs	r6, #64	; 0x40
 8002af6:	4664      	mov	r4, ip
 8002af8:	1ab2      	subs	r2, r6, r2
 8002afa:	4094      	lsls	r4, r2
 8002afc:	4323      	orrs	r3, r4
 8002afe:	469a      	mov	sl, r3
 8002b00:	4654      	mov	r4, sl
 8002b02:	1e63      	subs	r3, r4, #1
 8002b04:	419c      	sbcs	r4, r3
 8002b06:	4643      	mov	r3, r8
 8002b08:	431c      	orrs	r4, r3
 8002b0a:	e5db      	b.n	80026c4 <__aeabi_dsub+0x264>
 8002b0c:	0002      	movs	r2, r0
 8002b0e:	2400      	movs	r4, #0
 8002b10:	2300      	movs	r3, #0
 8002b12:	e548      	b.n	80025a6 <__aeabi_dsub+0x146>
 8002b14:	19dc      	adds	r4, r3, r7
 8002b16:	42bc      	cmp	r4, r7
 8002b18:	41bf      	sbcs	r7, r7
 8002b1a:	4461      	add	r1, ip
 8002b1c:	4689      	mov	r9, r1
 8002b1e:	427f      	negs	r7, r7
 8002b20:	44b9      	add	r9, r7
 8002b22:	e738      	b.n	8002996 <__aeabi_dsub+0x536>
 8002b24:	464b      	mov	r3, r9
 8002b26:	4323      	orrs	r3, r4
 8002b28:	d100      	bne.n	8002b2c <__aeabi_dsub+0x6cc>
 8002b2a:	e69f      	b.n	800286c <__aeabi_dsub+0x40c>
 8002b2c:	e606      	b.n	800273c <__aeabi_dsub+0x2dc>
 8002b2e:	46c0      	nop			; (mov r8, r8)
 8002b30:	000007fe 	.word	0x000007fe
 8002b34:	000007ff 	.word	0x000007ff
 8002b38:	ff7fffff 	.word	0xff7fffff
 8002b3c:	08ff      	lsrs	r7, r7, #3
 8002b3e:	074b      	lsls	r3, r1, #29
 8002b40:	433b      	orrs	r3, r7
 8002b42:	08cc      	lsrs	r4, r1, #3
 8002b44:	e616      	b.n	8002774 <__aeabi_dsub+0x314>
 8002b46:	4662      	mov	r2, ip
 8002b48:	08db      	lsrs	r3, r3, #3
 8002b4a:	0752      	lsls	r2, r2, #29
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	4662      	mov	r2, ip
 8002b50:	08d4      	lsrs	r4, r2, #3
 8002b52:	2280      	movs	r2, #128	; 0x80
 8002b54:	0312      	lsls	r2, r2, #12
 8002b56:	4214      	tst	r4, r2
 8002b58:	d007      	beq.n	8002b6a <__aeabi_dsub+0x70a>
 8002b5a:	08c8      	lsrs	r0, r1, #3
 8002b5c:	4210      	tst	r0, r2
 8002b5e:	d104      	bne.n	8002b6a <__aeabi_dsub+0x70a>
 8002b60:	465d      	mov	r5, fp
 8002b62:	0004      	movs	r4, r0
 8002b64:	08fb      	lsrs	r3, r7, #3
 8002b66:	0749      	lsls	r1, r1, #29
 8002b68:	430b      	orrs	r3, r1
 8002b6a:	0f5a      	lsrs	r2, r3, #29
 8002b6c:	00db      	lsls	r3, r3, #3
 8002b6e:	0752      	lsls	r2, r2, #29
 8002b70:	08db      	lsrs	r3, r3, #3
 8002b72:	4313      	orrs	r3, r2
 8002b74:	e5fe      	b.n	8002774 <__aeabi_dsub+0x314>
 8002b76:	2300      	movs	r3, #0
 8002b78:	4a01      	ldr	r2, [pc, #4]	; (8002b80 <__aeabi_dsub+0x720>)
 8002b7a:	001c      	movs	r4, r3
 8002b7c:	e513      	b.n	80025a6 <__aeabi_dsub+0x146>
 8002b7e:	46c0      	nop			; (mov r8, r8)
 8002b80:	000007ff 	.word	0x000007ff

08002b84 <__aeabi_dcmpun>:
 8002b84:	b570      	push	{r4, r5, r6, lr}
 8002b86:	0005      	movs	r5, r0
 8002b88:	480c      	ldr	r0, [pc, #48]	; (8002bbc <__aeabi_dcmpun+0x38>)
 8002b8a:	031c      	lsls	r4, r3, #12
 8002b8c:	0016      	movs	r6, r2
 8002b8e:	005b      	lsls	r3, r3, #1
 8002b90:	030a      	lsls	r2, r1, #12
 8002b92:	0049      	lsls	r1, r1, #1
 8002b94:	0b12      	lsrs	r2, r2, #12
 8002b96:	0d49      	lsrs	r1, r1, #21
 8002b98:	0b24      	lsrs	r4, r4, #12
 8002b9a:	0d5b      	lsrs	r3, r3, #21
 8002b9c:	4281      	cmp	r1, r0
 8002b9e:	d008      	beq.n	8002bb2 <__aeabi_dcmpun+0x2e>
 8002ba0:	4a06      	ldr	r2, [pc, #24]	; (8002bbc <__aeabi_dcmpun+0x38>)
 8002ba2:	2000      	movs	r0, #0
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d103      	bne.n	8002bb0 <__aeabi_dcmpun+0x2c>
 8002ba8:	0020      	movs	r0, r4
 8002baa:	4330      	orrs	r0, r6
 8002bac:	1e43      	subs	r3, r0, #1
 8002bae:	4198      	sbcs	r0, r3
 8002bb0:	bd70      	pop	{r4, r5, r6, pc}
 8002bb2:	2001      	movs	r0, #1
 8002bb4:	432a      	orrs	r2, r5
 8002bb6:	d1fb      	bne.n	8002bb0 <__aeabi_dcmpun+0x2c>
 8002bb8:	e7f2      	b.n	8002ba0 <__aeabi_dcmpun+0x1c>
 8002bba:	46c0      	nop			; (mov r8, r8)
 8002bbc:	000007ff 	.word	0x000007ff

08002bc0 <__aeabi_d2iz>:
 8002bc0:	000a      	movs	r2, r1
 8002bc2:	b530      	push	{r4, r5, lr}
 8002bc4:	4c13      	ldr	r4, [pc, #76]	; (8002c14 <__aeabi_d2iz+0x54>)
 8002bc6:	0053      	lsls	r3, r2, #1
 8002bc8:	0309      	lsls	r1, r1, #12
 8002bca:	0005      	movs	r5, r0
 8002bcc:	0b09      	lsrs	r1, r1, #12
 8002bce:	2000      	movs	r0, #0
 8002bd0:	0d5b      	lsrs	r3, r3, #21
 8002bd2:	0fd2      	lsrs	r2, r2, #31
 8002bd4:	42a3      	cmp	r3, r4
 8002bd6:	dd04      	ble.n	8002be2 <__aeabi_d2iz+0x22>
 8002bd8:	480f      	ldr	r0, [pc, #60]	; (8002c18 <__aeabi_d2iz+0x58>)
 8002bda:	4283      	cmp	r3, r0
 8002bdc:	dd02      	ble.n	8002be4 <__aeabi_d2iz+0x24>
 8002bde:	4b0f      	ldr	r3, [pc, #60]	; (8002c1c <__aeabi_d2iz+0x5c>)
 8002be0:	18d0      	adds	r0, r2, r3
 8002be2:	bd30      	pop	{r4, r5, pc}
 8002be4:	2080      	movs	r0, #128	; 0x80
 8002be6:	0340      	lsls	r0, r0, #13
 8002be8:	4301      	orrs	r1, r0
 8002bea:	480d      	ldr	r0, [pc, #52]	; (8002c20 <__aeabi_d2iz+0x60>)
 8002bec:	1ac0      	subs	r0, r0, r3
 8002bee:	281f      	cmp	r0, #31
 8002bf0:	dd08      	ble.n	8002c04 <__aeabi_d2iz+0x44>
 8002bf2:	480c      	ldr	r0, [pc, #48]	; (8002c24 <__aeabi_d2iz+0x64>)
 8002bf4:	1ac3      	subs	r3, r0, r3
 8002bf6:	40d9      	lsrs	r1, r3
 8002bf8:	000b      	movs	r3, r1
 8002bfa:	4258      	negs	r0, r3
 8002bfc:	2a00      	cmp	r2, #0
 8002bfe:	d1f0      	bne.n	8002be2 <__aeabi_d2iz+0x22>
 8002c00:	0018      	movs	r0, r3
 8002c02:	e7ee      	b.n	8002be2 <__aeabi_d2iz+0x22>
 8002c04:	4c08      	ldr	r4, [pc, #32]	; (8002c28 <__aeabi_d2iz+0x68>)
 8002c06:	40c5      	lsrs	r5, r0
 8002c08:	46a4      	mov	ip, r4
 8002c0a:	4463      	add	r3, ip
 8002c0c:	4099      	lsls	r1, r3
 8002c0e:	000b      	movs	r3, r1
 8002c10:	432b      	orrs	r3, r5
 8002c12:	e7f2      	b.n	8002bfa <__aeabi_d2iz+0x3a>
 8002c14:	000003fe 	.word	0x000003fe
 8002c18:	0000041d 	.word	0x0000041d
 8002c1c:	7fffffff 	.word	0x7fffffff
 8002c20:	00000433 	.word	0x00000433
 8002c24:	00000413 	.word	0x00000413
 8002c28:	fffffbed 	.word	0xfffffbed

08002c2c <__aeabi_i2d>:
 8002c2c:	b570      	push	{r4, r5, r6, lr}
 8002c2e:	2800      	cmp	r0, #0
 8002c30:	d016      	beq.n	8002c60 <__aeabi_i2d+0x34>
 8002c32:	17c3      	asrs	r3, r0, #31
 8002c34:	18c5      	adds	r5, r0, r3
 8002c36:	405d      	eors	r5, r3
 8002c38:	0fc4      	lsrs	r4, r0, #31
 8002c3a:	0028      	movs	r0, r5
 8002c3c:	f000 f91c 	bl	8002e78 <__clzsi2>
 8002c40:	4a11      	ldr	r2, [pc, #68]	; (8002c88 <__aeabi_i2d+0x5c>)
 8002c42:	1a12      	subs	r2, r2, r0
 8002c44:	280a      	cmp	r0, #10
 8002c46:	dc16      	bgt.n	8002c76 <__aeabi_i2d+0x4a>
 8002c48:	0003      	movs	r3, r0
 8002c4a:	002e      	movs	r6, r5
 8002c4c:	3315      	adds	r3, #21
 8002c4e:	409e      	lsls	r6, r3
 8002c50:	230b      	movs	r3, #11
 8002c52:	1a18      	subs	r0, r3, r0
 8002c54:	40c5      	lsrs	r5, r0
 8002c56:	0552      	lsls	r2, r2, #21
 8002c58:	032d      	lsls	r5, r5, #12
 8002c5a:	0b2d      	lsrs	r5, r5, #12
 8002c5c:	0d53      	lsrs	r3, r2, #21
 8002c5e:	e003      	b.n	8002c68 <__aeabi_i2d+0x3c>
 8002c60:	2400      	movs	r4, #0
 8002c62:	2300      	movs	r3, #0
 8002c64:	2500      	movs	r5, #0
 8002c66:	2600      	movs	r6, #0
 8002c68:	051b      	lsls	r3, r3, #20
 8002c6a:	432b      	orrs	r3, r5
 8002c6c:	07e4      	lsls	r4, r4, #31
 8002c6e:	4323      	orrs	r3, r4
 8002c70:	0030      	movs	r0, r6
 8002c72:	0019      	movs	r1, r3
 8002c74:	bd70      	pop	{r4, r5, r6, pc}
 8002c76:	380b      	subs	r0, #11
 8002c78:	4085      	lsls	r5, r0
 8002c7a:	0552      	lsls	r2, r2, #21
 8002c7c:	032d      	lsls	r5, r5, #12
 8002c7e:	2600      	movs	r6, #0
 8002c80:	0b2d      	lsrs	r5, r5, #12
 8002c82:	0d53      	lsrs	r3, r2, #21
 8002c84:	e7f0      	b.n	8002c68 <__aeabi_i2d+0x3c>
 8002c86:	46c0      	nop			; (mov r8, r8)
 8002c88:	0000041e 	.word	0x0000041e

08002c8c <__aeabi_ui2d>:
 8002c8c:	b510      	push	{r4, lr}
 8002c8e:	1e04      	subs	r4, r0, #0
 8002c90:	d010      	beq.n	8002cb4 <__aeabi_ui2d+0x28>
 8002c92:	f000 f8f1 	bl	8002e78 <__clzsi2>
 8002c96:	4b0f      	ldr	r3, [pc, #60]	; (8002cd4 <__aeabi_ui2d+0x48>)
 8002c98:	1a1b      	subs	r3, r3, r0
 8002c9a:	280a      	cmp	r0, #10
 8002c9c:	dc11      	bgt.n	8002cc2 <__aeabi_ui2d+0x36>
 8002c9e:	220b      	movs	r2, #11
 8002ca0:	0021      	movs	r1, r4
 8002ca2:	1a12      	subs	r2, r2, r0
 8002ca4:	40d1      	lsrs	r1, r2
 8002ca6:	3015      	adds	r0, #21
 8002ca8:	030a      	lsls	r2, r1, #12
 8002caa:	055b      	lsls	r3, r3, #21
 8002cac:	4084      	lsls	r4, r0
 8002cae:	0b12      	lsrs	r2, r2, #12
 8002cb0:	0d5b      	lsrs	r3, r3, #21
 8002cb2:	e001      	b.n	8002cb8 <__aeabi_ui2d+0x2c>
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	051b      	lsls	r3, r3, #20
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	0020      	movs	r0, r4
 8002cbe:	0019      	movs	r1, r3
 8002cc0:	bd10      	pop	{r4, pc}
 8002cc2:	0022      	movs	r2, r4
 8002cc4:	380b      	subs	r0, #11
 8002cc6:	4082      	lsls	r2, r0
 8002cc8:	055b      	lsls	r3, r3, #21
 8002cca:	0312      	lsls	r2, r2, #12
 8002ccc:	2400      	movs	r4, #0
 8002cce:	0b12      	lsrs	r2, r2, #12
 8002cd0:	0d5b      	lsrs	r3, r3, #21
 8002cd2:	e7f1      	b.n	8002cb8 <__aeabi_ui2d+0x2c>
 8002cd4:	0000041e 	.word	0x0000041e

08002cd8 <__aeabi_f2d>:
 8002cd8:	b570      	push	{r4, r5, r6, lr}
 8002cda:	0043      	lsls	r3, r0, #1
 8002cdc:	0246      	lsls	r6, r0, #9
 8002cde:	0fc4      	lsrs	r4, r0, #31
 8002ce0:	20fe      	movs	r0, #254	; 0xfe
 8002ce2:	0e1b      	lsrs	r3, r3, #24
 8002ce4:	1c59      	adds	r1, r3, #1
 8002ce6:	0a75      	lsrs	r5, r6, #9
 8002ce8:	4208      	tst	r0, r1
 8002cea:	d00c      	beq.n	8002d06 <__aeabi_f2d+0x2e>
 8002cec:	22e0      	movs	r2, #224	; 0xe0
 8002cee:	0092      	lsls	r2, r2, #2
 8002cf0:	4694      	mov	ip, r2
 8002cf2:	076d      	lsls	r5, r5, #29
 8002cf4:	0b36      	lsrs	r6, r6, #12
 8002cf6:	4463      	add	r3, ip
 8002cf8:	051b      	lsls	r3, r3, #20
 8002cfa:	4333      	orrs	r3, r6
 8002cfc:	07e4      	lsls	r4, r4, #31
 8002cfe:	4323      	orrs	r3, r4
 8002d00:	0028      	movs	r0, r5
 8002d02:	0019      	movs	r1, r3
 8002d04:	bd70      	pop	{r4, r5, r6, pc}
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d114      	bne.n	8002d34 <__aeabi_f2d+0x5c>
 8002d0a:	2d00      	cmp	r5, #0
 8002d0c:	d01b      	beq.n	8002d46 <__aeabi_f2d+0x6e>
 8002d0e:	0028      	movs	r0, r5
 8002d10:	f000 f8b2 	bl	8002e78 <__clzsi2>
 8002d14:	280a      	cmp	r0, #10
 8002d16:	dc1c      	bgt.n	8002d52 <__aeabi_f2d+0x7a>
 8002d18:	230b      	movs	r3, #11
 8002d1a:	002e      	movs	r6, r5
 8002d1c:	1a1b      	subs	r3, r3, r0
 8002d1e:	40de      	lsrs	r6, r3
 8002d20:	0003      	movs	r3, r0
 8002d22:	3315      	adds	r3, #21
 8002d24:	409d      	lsls	r5, r3
 8002d26:	4a0e      	ldr	r2, [pc, #56]	; (8002d60 <__aeabi_f2d+0x88>)
 8002d28:	0336      	lsls	r6, r6, #12
 8002d2a:	1a12      	subs	r2, r2, r0
 8002d2c:	0552      	lsls	r2, r2, #21
 8002d2e:	0b36      	lsrs	r6, r6, #12
 8002d30:	0d53      	lsrs	r3, r2, #21
 8002d32:	e7e1      	b.n	8002cf8 <__aeabi_f2d+0x20>
 8002d34:	2d00      	cmp	r5, #0
 8002d36:	d009      	beq.n	8002d4c <__aeabi_f2d+0x74>
 8002d38:	2280      	movs	r2, #128	; 0x80
 8002d3a:	0b36      	lsrs	r6, r6, #12
 8002d3c:	0312      	lsls	r2, r2, #12
 8002d3e:	4b09      	ldr	r3, [pc, #36]	; (8002d64 <__aeabi_f2d+0x8c>)
 8002d40:	076d      	lsls	r5, r5, #29
 8002d42:	4316      	orrs	r6, r2
 8002d44:	e7d8      	b.n	8002cf8 <__aeabi_f2d+0x20>
 8002d46:	2300      	movs	r3, #0
 8002d48:	2600      	movs	r6, #0
 8002d4a:	e7d5      	b.n	8002cf8 <__aeabi_f2d+0x20>
 8002d4c:	2600      	movs	r6, #0
 8002d4e:	4b05      	ldr	r3, [pc, #20]	; (8002d64 <__aeabi_f2d+0x8c>)
 8002d50:	e7d2      	b.n	8002cf8 <__aeabi_f2d+0x20>
 8002d52:	0003      	movs	r3, r0
 8002d54:	3b0b      	subs	r3, #11
 8002d56:	409d      	lsls	r5, r3
 8002d58:	002e      	movs	r6, r5
 8002d5a:	2500      	movs	r5, #0
 8002d5c:	e7e3      	b.n	8002d26 <__aeabi_f2d+0x4e>
 8002d5e:	46c0      	nop			; (mov r8, r8)
 8002d60:	00000389 	.word	0x00000389
 8002d64:	000007ff 	.word	0x000007ff

08002d68 <__aeabi_d2f>:
 8002d68:	0002      	movs	r2, r0
 8002d6a:	004b      	lsls	r3, r1, #1
 8002d6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d6e:	0d5b      	lsrs	r3, r3, #21
 8002d70:	030c      	lsls	r4, r1, #12
 8002d72:	4e3d      	ldr	r6, [pc, #244]	; (8002e68 <__aeabi_d2f+0x100>)
 8002d74:	0a64      	lsrs	r4, r4, #9
 8002d76:	0f40      	lsrs	r0, r0, #29
 8002d78:	1c5f      	adds	r7, r3, #1
 8002d7a:	0fc9      	lsrs	r1, r1, #31
 8002d7c:	4304      	orrs	r4, r0
 8002d7e:	00d5      	lsls	r5, r2, #3
 8002d80:	4237      	tst	r7, r6
 8002d82:	d00a      	beq.n	8002d9a <__aeabi_d2f+0x32>
 8002d84:	4839      	ldr	r0, [pc, #228]	; (8002e6c <__aeabi_d2f+0x104>)
 8002d86:	181e      	adds	r6, r3, r0
 8002d88:	2efe      	cmp	r6, #254	; 0xfe
 8002d8a:	dd16      	ble.n	8002dba <__aeabi_d2f+0x52>
 8002d8c:	20ff      	movs	r0, #255	; 0xff
 8002d8e:	2400      	movs	r4, #0
 8002d90:	05c0      	lsls	r0, r0, #23
 8002d92:	4320      	orrs	r0, r4
 8002d94:	07c9      	lsls	r1, r1, #31
 8002d96:	4308      	orrs	r0, r1
 8002d98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d106      	bne.n	8002dac <__aeabi_d2f+0x44>
 8002d9e:	432c      	orrs	r4, r5
 8002da0:	d026      	beq.n	8002df0 <__aeabi_d2f+0x88>
 8002da2:	2205      	movs	r2, #5
 8002da4:	0192      	lsls	r2, r2, #6
 8002da6:	0a54      	lsrs	r4, r2, #9
 8002da8:	b2d8      	uxtb	r0, r3
 8002daa:	e7f1      	b.n	8002d90 <__aeabi_d2f+0x28>
 8002dac:	4325      	orrs	r5, r4
 8002dae:	d0ed      	beq.n	8002d8c <__aeabi_d2f+0x24>
 8002db0:	2080      	movs	r0, #128	; 0x80
 8002db2:	03c0      	lsls	r0, r0, #15
 8002db4:	4304      	orrs	r4, r0
 8002db6:	20ff      	movs	r0, #255	; 0xff
 8002db8:	e7ea      	b.n	8002d90 <__aeabi_d2f+0x28>
 8002dba:	2e00      	cmp	r6, #0
 8002dbc:	dd1b      	ble.n	8002df6 <__aeabi_d2f+0x8e>
 8002dbe:	0192      	lsls	r2, r2, #6
 8002dc0:	1e53      	subs	r3, r2, #1
 8002dc2:	419a      	sbcs	r2, r3
 8002dc4:	00e4      	lsls	r4, r4, #3
 8002dc6:	0f6d      	lsrs	r5, r5, #29
 8002dc8:	4322      	orrs	r2, r4
 8002dca:	432a      	orrs	r2, r5
 8002dcc:	0753      	lsls	r3, r2, #29
 8002dce:	d048      	beq.n	8002e62 <__aeabi_d2f+0xfa>
 8002dd0:	230f      	movs	r3, #15
 8002dd2:	4013      	ands	r3, r2
 8002dd4:	2b04      	cmp	r3, #4
 8002dd6:	d000      	beq.n	8002dda <__aeabi_d2f+0x72>
 8002dd8:	3204      	adds	r2, #4
 8002dda:	2380      	movs	r3, #128	; 0x80
 8002ddc:	04db      	lsls	r3, r3, #19
 8002dde:	4013      	ands	r3, r2
 8002de0:	d03f      	beq.n	8002e62 <__aeabi_d2f+0xfa>
 8002de2:	1c70      	adds	r0, r6, #1
 8002de4:	2efe      	cmp	r6, #254	; 0xfe
 8002de6:	d0d1      	beq.n	8002d8c <__aeabi_d2f+0x24>
 8002de8:	0192      	lsls	r2, r2, #6
 8002dea:	0a54      	lsrs	r4, r2, #9
 8002dec:	b2c0      	uxtb	r0, r0
 8002dee:	e7cf      	b.n	8002d90 <__aeabi_d2f+0x28>
 8002df0:	2000      	movs	r0, #0
 8002df2:	2400      	movs	r4, #0
 8002df4:	e7cc      	b.n	8002d90 <__aeabi_d2f+0x28>
 8002df6:	0032      	movs	r2, r6
 8002df8:	3217      	adds	r2, #23
 8002dfa:	db22      	blt.n	8002e42 <__aeabi_d2f+0xda>
 8002dfc:	2080      	movs	r0, #128	; 0x80
 8002dfe:	0400      	lsls	r0, r0, #16
 8002e00:	4320      	orrs	r0, r4
 8002e02:	241e      	movs	r4, #30
 8002e04:	1ba4      	subs	r4, r4, r6
 8002e06:	2c1f      	cmp	r4, #31
 8002e08:	dd1d      	ble.n	8002e46 <__aeabi_d2f+0xde>
 8002e0a:	2202      	movs	r2, #2
 8002e0c:	4252      	negs	r2, r2
 8002e0e:	1b96      	subs	r6, r2, r6
 8002e10:	0002      	movs	r2, r0
 8002e12:	40f2      	lsrs	r2, r6
 8002e14:	0016      	movs	r6, r2
 8002e16:	2c20      	cmp	r4, #32
 8002e18:	d004      	beq.n	8002e24 <__aeabi_d2f+0xbc>
 8002e1a:	4a15      	ldr	r2, [pc, #84]	; (8002e70 <__aeabi_d2f+0x108>)
 8002e1c:	4694      	mov	ip, r2
 8002e1e:	4463      	add	r3, ip
 8002e20:	4098      	lsls	r0, r3
 8002e22:	4305      	orrs	r5, r0
 8002e24:	002a      	movs	r2, r5
 8002e26:	1e53      	subs	r3, r2, #1
 8002e28:	419a      	sbcs	r2, r3
 8002e2a:	4332      	orrs	r2, r6
 8002e2c:	2600      	movs	r6, #0
 8002e2e:	0753      	lsls	r3, r2, #29
 8002e30:	d1ce      	bne.n	8002dd0 <__aeabi_d2f+0x68>
 8002e32:	2480      	movs	r4, #128	; 0x80
 8002e34:	0013      	movs	r3, r2
 8002e36:	04e4      	lsls	r4, r4, #19
 8002e38:	2001      	movs	r0, #1
 8002e3a:	4023      	ands	r3, r4
 8002e3c:	4222      	tst	r2, r4
 8002e3e:	d1d3      	bne.n	8002de8 <__aeabi_d2f+0x80>
 8002e40:	e7b0      	b.n	8002da4 <__aeabi_d2f+0x3c>
 8002e42:	2300      	movs	r3, #0
 8002e44:	e7ad      	b.n	8002da2 <__aeabi_d2f+0x3a>
 8002e46:	4a0b      	ldr	r2, [pc, #44]	; (8002e74 <__aeabi_d2f+0x10c>)
 8002e48:	4694      	mov	ip, r2
 8002e4a:	002a      	movs	r2, r5
 8002e4c:	40e2      	lsrs	r2, r4
 8002e4e:	0014      	movs	r4, r2
 8002e50:	002a      	movs	r2, r5
 8002e52:	4463      	add	r3, ip
 8002e54:	409a      	lsls	r2, r3
 8002e56:	4098      	lsls	r0, r3
 8002e58:	1e55      	subs	r5, r2, #1
 8002e5a:	41aa      	sbcs	r2, r5
 8002e5c:	4302      	orrs	r2, r0
 8002e5e:	4322      	orrs	r2, r4
 8002e60:	e7e4      	b.n	8002e2c <__aeabi_d2f+0xc4>
 8002e62:	0033      	movs	r3, r6
 8002e64:	e79e      	b.n	8002da4 <__aeabi_d2f+0x3c>
 8002e66:	46c0      	nop			; (mov r8, r8)
 8002e68:	000007fe 	.word	0x000007fe
 8002e6c:	fffffc80 	.word	0xfffffc80
 8002e70:	fffffca2 	.word	0xfffffca2
 8002e74:	fffffc82 	.word	0xfffffc82

08002e78 <__clzsi2>:
 8002e78:	211c      	movs	r1, #28
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	041b      	lsls	r3, r3, #16
 8002e7e:	4298      	cmp	r0, r3
 8002e80:	d301      	bcc.n	8002e86 <__clzsi2+0xe>
 8002e82:	0c00      	lsrs	r0, r0, #16
 8002e84:	3910      	subs	r1, #16
 8002e86:	0a1b      	lsrs	r3, r3, #8
 8002e88:	4298      	cmp	r0, r3
 8002e8a:	d301      	bcc.n	8002e90 <__clzsi2+0x18>
 8002e8c:	0a00      	lsrs	r0, r0, #8
 8002e8e:	3908      	subs	r1, #8
 8002e90:	091b      	lsrs	r3, r3, #4
 8002e92:	4298      	cmp	r0, r3
 8002e94:	d301      	bcc.n	8002e9a <__clzsi2+0x22>
 8002e96:	0900      	lsrs	r0, r0, #4
 8002e98:	3904      	subs	r1, #4
 8002e9a:	a202      	add	r2, pc, #8	; (adr r2, 8002ea4 <__clzsi2+0x2c>)
 8002e9c:	5c10      	ldrb	r0, [r2, r0]
 8002e9e:	1840      	adds	r0, r0, r1
 8002ea0:	4770      	bx	lr
 8002ea2:	46c0      	nop			; (mov r8, r8)
 8002ea4:	02020304 	.word	0x02020304
 8002ea8:	01010101 	.word	0x01010101
	...

08002eb4 <convert_DDmm_to_DDD>:
static void MX_DMA_Init(void);
static void MX_USART1_UART_Init(void);
static void MX_USART3_UART_Init(void);
/* USER CODE BEGIN PFP */

float convert_DDmm_to_DDD(float DDmm, char *sign){
 8002eb4:	b590      	push	{r4, r7, lr}
 8002eb6:	b087      	sub	sp, #28
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
 8002ebc:	6039      	str	r1, [r7, #0]

    //convert to DDD format
    int DD = ((int)DDmm)/100;
 8002ebe:	6878      	ldr	r0, [r7, #4]
 8002ec0:	f7fe f8b6 	bl	8001030 <__aeabi_f2iz>
 8002ec4:	0003      	movs	r3, r0
 8002ec6:	2164      	movs	r1, #100	; 0x64
 8002ec8:	0018      	movs	r0, r3
 8002eca:	f7fd f9c9 	bl	8000260 <__divsi3>
 8002ece:	0003      	movs	r3, r0
 8002ed0:	613b      	str	r3, [r7, #16]
    float mm = DDmm - DD*100;
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	2264      	movs	r2, #100	; 0x64
 8002ed6:	4353      	muls	r3, r2
 8002ed8:	0018      	movs	r0, r3
 8002eda:	f7fe f8c9 	bl	8001070 <__aeabi_i2f>
 8002ede:	1c03      	adds	r3, r0, #0
 8002ee0:	1c19      	adds	r1, r3, #0
 8002ee2:	6878      	ldr	r0, [r7, #4]
 8002ee4:	f7fd fef6 	bl	8000cd4 <__aeabi_fsub>
 8002ee8:	1c03      	adds	r3, r0, #0
 8002eea:	60fb      	str	r3, [r7, #12]
    float DDD = DD + mm/60;
 8002eec:	6938      	ldr	r0, [r7, #16]
 8002eee:	f7fe f8bf 	bl	8001070 <__aeabi_i2f>
 8002ef2:	1c04      	adds	r4, r0, #0
 8002ef4:	4912      	ldr	r1, [pc, #72]	; (8002f40 <convert_DDmm_to_DDD+0x8c>)
 8002ef6:	68f8      	ldr	r0, [r7, #12]
 8002ef8:	f7fd fd24 	bl	8000944 <__aeabi_fdiv>
 8002efc:	1c03      	adds	r3, r0, #0
 8002efe:	1c19      	adds	r1, r3, #0
 8002f00:	1c20      	adds	r0, r4, #0
 8002f02:	f7fd fb81 	bl	8000608 <__aeabi_fadd>
 8002f06:	1c03      	adds	r3, r0, #0
 8002f08:	617b      	str	r3, [r7, #20]

    //add negative sign if south or west
    if (strcmp(sign,"S") == 0 || strcmp(sign,"W") == 0){
 8002f0a:	4a0e      	ldr	r2, [pc, #56]	; (8002f44 <convert_DDmm_to_DDD+0x90>)
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	0011      	movs	r1, r2
 8002f10:	0018      	movs	r0, r3
 8002f12:	f7fd f8f5 	bl	8000100 <strcmp>
 8002f16:	1e03      	subs	r3, r0, #0
 8002f18:	d007      	beq.n	8002f2a <convert_DDmm_to_DDD+0x76>
 8002f1a:	4a0b      	ldr	r2, [pc, #44]	; (8002f48 <convert_DDmm_to_DDD+0x94>)
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	0011      	movs	r1, r2
 8002f20:	0018      	movs	r0, r3
 8002f22:	f7fd f8ed 	bl	8000100 <strcmp>
 8002f26:	1e03      	subs	r3, r0, #0
 8002f28:	d104      	bne.n	8002f34 <convert_DDmm_to_DDD+0x80>
        DDD = -DDD;
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	2280      	movs	r2, #128	; 0x80
 8002f2e:	0612      	lsls	r2, r2, #24
 8002f30:	4053      	eors	r3, r2
 8002f32:	617b      	str	r3, [r7, #20]
    }

    return DDD;
 8002f34:	697b      	ldr	r3, [r7, #20]
}
 8002f36:	1c18      	adds	r0, r3, #0
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	b007      	add	sp, #28
 8002f3c:	bd90      	pop	{r4, r7, pc}
 8002f3e:	46c0      	nop			; (mov r8, r8)
 8002f40:	42700000 	.word	0x42700000
 8002f44:	0800bc78 	.word	0x0800bc78
 8002f48:	0800bc7c 	.word	0x0800bc7c

08002f4c <m8n_read_location>:

void m8n_read_location(char nmea_raw_data[], char *loc_str[]){
 8002f4c:	b5b0      	push	{r4, r5, r7, lr}
 8002f4e:	b096      	sub	sp, #88	; 0x58
 8002f50:	af02      	add	r7, sp, #8
 8002f52:	6078      	str	r0, [r7, #4]
 8002f54:	6039      	str	r1, [r7, #0]

    const __uint8_t GLL_MSG_LEN = 47;
 8002f56:	244f      	movs	r4, #79	; 0x4f
 8002f58:	193b      	adds	r3, r7, r4
 8002f5a:	222f      	movs	r2, #47	; 0x2f
 8002f5c:	701a      	strb	r2, [r3, #0]
    float latitude, longitude;
    char lat_sign, long_sign;
    char *start_GLL_msg;
    int len_GLL_msg;

    start_GLL_msg = strstr(nmea_raw_data, "GLL");
 8002f5e:	4a7c      	ldr	r2, [pc, #496]	; (8003150 <m8n_read_location+0x204>)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	0011      	movs	r1, r2
 8002f64:	0018      	movs	r0, r3
 8002f66:	f004 fbe1 	bl	800772c <strstr>
 8002f6a:	0003      	movs	r3, r0
 8002f6c:	64bb      	str	r3, [r7, #72]	; 0x48
    len_GLL_msg = strlen(start_GLL_msg);
 8002f6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f70:	0018      	movs	r0, r3
 8002f72:	f7fd f8cf 	bl	8000114 <strlen>
 8002f76:	0003      	movs	r3, r0
 8002f78:	647b      	str	r3, [r7, #68]	; 0x44

    *loc_str = "";
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	4a75      	ldr	r2, [pc, #468]	; (8003154 <m8n_read_location+0x208>)
 8002f7e:	601a      	str	r2, [r3, #0]

    //message is not valid as does not have minimum length
    if (len_GLL_msg < GLL_MSG_LEN){
 8002f80:	193b      	adds	r3, r7, r4
 8002f82:	781b      	ldrb	r3, [r3, #0]
 8002f84:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002f86:	429a      	cmp	r2, r3
 8002f88:	da00      	bge.n	8002f8c <m8n_read_location+0x40>
 8002f8a:	e0dd      	b.n	8003148 <m8n_read_location+0x1fc>
        return;
    }

    //retreive location parameters from nmea sentence
    sscanf(start_GLL_msg, "GLL,%f,%c,%f,%c,",&latitude, &lat_sign, &longitude, &long_sign);
 8002f8c:	233b      	movs	r3, #59	; 0x3b
 8002f8e:	18fc      	adds	r4, r7, r3
 8002f90:	2340      	movs	r3, #64	; 0x40
 8002f92:	18fa      	adds	r2, r7, r3
 8002f94:	4970      	ldr	r1, [pc, #448]	; (8003158 <m8n_read_location+0x20c>)
 8002f96:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8002f98:	233a      	movs	r3, #58	; 0x3a
 8002f9a:	18fb      	adds	r3, r7, r3
 8002f9c:	9301      	str	r3, [sp, #4]
 8002f9e:	233c      	movs	r3, #60	; 0x3c
 8002fa0:	18fb      	adds	r3, r7, r3
 8002fa2:	9300      	str	r3, [sp, #0]
 8002fa4:	0023      	movs	r3, r4
 8002fa6:	f004 fb4b 	bl	8007640 <siscanf>

    //if one of the lat or long is equal to 0, reset lock value and return
    if (latitude == 0 || longitude == 0){
 8002faa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002fac:	2100      	movs	r1, #0
 8002fae:	1c18      	adds	r0, r3, #0
 8002fb0:	f7fd fa8c 	bl	80004cc <__aeabi_fcmpeq>
 8002fb4:	1e03      	subs	r3, r0, #0
 8002fb6:	d106      	bne.n	8002fc6 <m8n_read_location+0x7a>
 8002fb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fba:	2100      	movs	r1, #0
 8002fbc:	1c18      	adds	r0, r3, #0
 8002fbe:	f7fd fa85 	bl	80004cc <__aeabi_fcmpeq>
 8002fc2:	1e03      	subs	r3, r0, #0
 8002fc4:	d01f      	beq.n	8003006 <m8n_read_location+0xba>
        gps_lock = 0;
 8002fc6:	4b65      	ldr	r3, [pc, #404]	; (800315c <m8n_read_location+0x210>)
 8002fc8:	2200      	movs	r2, #0
 8002fca:	601a      	str	r2, [r3, #0]
        //*loc_str = "";

        char sentence[50] = "";
 8002fcc:	2408      	movs	r4, #8
 8002fce:	193b      	adds	r3, r7, r4
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	601a      	str	r2, [r3, #0]
 8002fd4:	3304      	adds	r3, #4
 8002fd6:	222e      	movs	r2, #46	; 0x2e
 8002fd8:	2100      	movs	r1, #0
 8002fda:	0018      	movs	r0, r3
 8002fdc:	f003 fc8e 	bl	80068fc <memset>
        sprintf(sentence,"%Inconsistent, lock = %i\r\n",gps_lock);
 8002fe0:	4b5e      	ldr	r3, [pc, #376]	; (800315c <m8n_read_location+0x210>)
 8002fe2:	681a      	ldr	r2, [r3, #0]
 8002fe4:	495e      	ldr	r1, [pc, #376]	; (8003160 <m8n_read_location+0x214>)
 8002fe6:	193b      	adds	r3, r7, r4
 8002fe8:	0018      	movs	r0, r3
 8002fea:	f004 fb09 	bl	8007600 <siprintf>
        HAL_UART_Transmit(&huart2, (uint8_t*) sentence, strlen(sentence), 100);
 8002fee:	193b      	adds	r3, r7, r4
 8002ff0:	0018      	movs	r0, r3
 8002ff2:	f7fd f88f 	bl	8000114 <strlen>
 8002ff6:	0003      	movs	r3, r0
 8002ff8:	b29a      	uxth	r2, r3
 8002ffa:	1939      	adds	r1, r7, r4
 8002ffc:	4859      	ldr	r0, [pc, #356]	; (8003164 <m8n_read_location+0x218>)
 8002ffe:	2364      	movs	r3, #100	; 0x64
 8003000:	f002 fb6e 	bl	80056e0 <HAL_UART_Transmit>
 8003004:	e0a1      	b.n	800314a <m8n_read_location+0x1fe>

        return;
    }

    //if one of the lat or long is nan (https://stackoverflow.com/a/570694), reset lock value and return
    else if (latitude != latitude || longitude != longitude){
 8003006:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003008:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800300a:	1c11      	adds	r1, r2, #0
 800300c:	1c18      	adds	r0, r3, #0
 800300e:	f7fd fa5d 	bl	80004cc <__aeabi_fcmpeq>
 8003012:	1e03      	subs	r3, r0, #0
 8003014:	d007      	beq.n	8003026 <m8n_read_location+0xda>
 8003016:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003018:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800301a:	1c11      	adds	r1, r2, #0
 800301c:	1c18      	adds	r0, r3, #0
 800301e:	f7fd fa55 	bl	80004cc <__aeabi_fcmpeq>
 8003022:	1e03      	subs	r3, r0, #0
 8003024:	d11f      	bne.n	8003066 <m8n_read_location+0x11a>
        gps_lock = 0;
 8003026:	4b4d      	ldr	r3, [pc, #308]	; (800315c <m8n_read_location+0x210>)
 8003028:	2200      	movs	r2, #0
 800302a:	601a      	str	r2, [r3, #0]
        //*loc_str = "";

        char sentence[50] = "";
 800302c:	2408      	movs	r4, #8
 800302e:	193b      	adds	r3, r7, r4
 8003030:	2200      	movs	r2, #0
 8003032:	601a      	str	r2, [r3, #0]
 8003034:	3304      	adds	r3, #4
 8003036:	222e      	movs	r2, #46	; 0x2e
 8003038:	2100      	movs	r1, #0
 800303a:	0018      	movs	r0, r3
 800303c:	f003 fc5e 	bl	80068fc <memset>
        sprintf(sentence,"%NaN, lock = %i\r\n",gps_lock);
 8003040:	4b46      	ldr	r3, [pc, #280]	; (800315c <m8n_read_location+0x210>)
 8003042:	681a      	ldr	r2, [r3, #0]
 8003044:	4948      	ldr	r1, [pc, #288]	; (8003168 <m8n_read_location+0x21c>)
 8003046:	193b      	adds	r3, r7, r4
 8003048:	0018      	movs	r0, r3
 800304a:	f004 fad9 	bl	8007600 <siprintf>
        HAL_UART_Transmit(&huart2, (uint8_t*) sentence, strlen(sentence), 100);
 800304e:	193b      	adds	r3, r7, r4
 8003050:	0018      	movs	r0, r3
 8003052:	f7fd f85f 	bl	8000114 <strlen>
 8003056:	0003      	movs	r3, r0
 8003058:	b29a      	uxth	r2, r3
 800305a:	1939      	adds	r1, r7, r4
 800305c:	4841      	ldr	r0, [pc, #260]	; (8003164 <m8n_read_location+0x218>)
 800305e:	2364      	movs	r3, #100	; 0x64
 8003060:	f002 fb3e 	bl	80056e0 <HAL_UART_Transmit>
 8003064:	e071      	b.n	800314a <m8n_read_location+0x1fe>

        return;
    }

	//copy location parameters into loc_str under desired format
	sprintf(loc_str, "%f,%f\r\n",convert_DDmm_to_DDD(latitude,&lat_sign),convert_DDmm_to_DDD(longitude,&long_sign));
 8003066:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003068:	223b      	movs	r2, #59	; 0x3b
 800306a:	18ba      	adds	r2, r7, r2
 800306c:	0011      	movs	r1, r2
 800306e:	1c18      	adds	r0, r3, #0
 8003070:	f7ff ff20 	bl	8002eb4 <convert_DDmm_to_DDD>
 8003074:	1c03      	adds	r3, r0, #0
 8003076:	1c18      	adds	r0, r3, #0
 8003078:	f7ff fe2e 	bl	8002cd8 <__aeabi_f2d>
 800307c:	0004      	movs	r4, r0
 800307e:	000d      	movs	r5, r1
 8003080:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003082:	223a      	movs	r2, #58	; 0x3a
 8003084:	18ba      	adds	r2, r7, r2
 8003086:	0011      	movs	r1, r2
 8003088:	1c18      	adds	r0, r3, #0
 800308a:	f7ff ff13 	bl	8002eb4 <convert_DDmm_to_DDD>
 800308e:	1c03      	adds	r3, r0, #0
 8003090:	1c18      	adds	r0, r3, #0
 8003092:	f7ff fe21 	bl	8002cd8 <__aeabi_f2d>
 8003096:	0002      	movs	r2, r0
 8003098:	000b      	movs	r3, r1
 800309a:	4934      	ldr	r1, [pc, #208]	; (800316c <m8n_read_location+0x220>)
 800309c:	6838      	ldr	r0, [r7, #0]
 800309e:	9200      	str	r2, [sp, #0]
 80030a0:	9301      	str	r3, [sp, #4]
 80030a2:	0022      	movs	r2, r4
 80030a4:	002b      	movs	r3, r5
 80030a6:	f004 faab 	bl	8007600 <siprintf>

    //if number of gps lock is still below threshold, increment lock value and return
    if (gps_lock < gps_lock_th){
 80030aa:	4b2c      	ldr	r3, [pc, #176]	; (800315c <m8n_read_location+0x210>)
 80030ac:	681a      	ldr	r2, [r3, #0]
 80030ae:	4b30      	ldr	r3, [pc, #192]	; (8003170 <m8n_read_location+0x224>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	429a      	cmp	r2, r3
 80030b4:	da21      	bge.n	80030fa <m8n_read_location+0x1ae>
        gps_lock++;
 80030b6:	4b29      	ldr	r3, [pc, #164]	; (800315c <m8n_read_location+0x210>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	1c5a      	adds	r2, r3, #1
 80030bc:	4b27      	ldr	r3, [pc, #156]	; (800315c <m8n_read_location+0x210>)
 80030be:	601a      	str	r2, [r3, #0]

        char sentence[50] = "";
 80030c0:	2408      	movs	r4, #8
 80030c2:	193b      	adds	r3, r7, r4
 80030c4:	2200      	movs	r2, #0
 80030c6:	601a      	str	r2, [r3, #0]
 80030c8:	3304      	adds	r3, #4
 80030ca:	222e      	movs	r2, #46	; 0x2e
 80030cc:	2100      	movs	r1, #0
 80030ce:	0018      	movs	r0, r3
 80030d0:	f003 fc14 	bl	80068fc <memset>
        sprintf(sentence,"%OK, below threshold, lock = %i\r\n",gps_lock);
 80030d4:	4b21      	ldr	r3, [pc, #132]	; (800315c <m8n_read_location+0x210>)
 80030d6:	681a      	ldr	r2, [r3, #0]
 80030d8:	4926      	ldr	r1, [pc, #152]	; (8003174 <m8n_read_location+0x228>)
 80030da:	193b      	adds	r3, r7, r4
 80030dc:	0018      	movs	r0, r3
 80030de:	f004 fa8f 	bl	8007600 <siprintf>
        HAL_UART_Transmit(&huart2, (uint8_t*) sentence, strlen(sentence), 100);
 80030e2:	193b      	adds	r3, r7, r4
 80030e4:	0018      	movs	r0, r3
 80030e6:	f7fd f815 	bl	8000114 <strlen>
 80030ea:	0003      	movs	r3, r0
 80030ec:	b29a      	uxth	r2, r3
 80030ee:	1939      	adds	r1, r7, r4
 80030f0:	481c      	ldr	r0, [pc, #112]	; (8003164 <m8n_read_location+0x218>)
 80030f2:	2364      	movs	r3, #100	; 0x64
 80030f4:	f002 faf4 	bl	80056e0 <HAL_UART_Transmit>
 80030f8:	e027      	b.n	800314a <m8n_read_location+0x1fe>

        return;
    }

    //if nb of consecutive locks is above threshold
    else if (gps_lock >= gps_lock_th){
 80030fa:	4b18      	ldr	r3, [pc, #96]	; (800315c <m8n_read_location+0x210>)
 80030fc:	681a      	ldr	r2, [r3, #0]
 80030fe:	4b1c      	ldr	r3, [pc, #112]	; (8003170 <m8n_read_location+0x224>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	429a      	cmp	r2, r3
 8003104:	db21      	blt.n	800314a <m8n_read_location+0x1fe>
    	gps_lock = gps_lock_th;
 8003106:	4b1a      	ldr	r3, [pc, #104]	; (8003170 <m8n_read_location+0x224>)
 8003108:	681a      	ldr	r2, [r3, #0]
 800310a:	4b14      	ldr	r3, [pc, #80]	; (800315c <m8n_read_location+0x210>)
 800310c:	601a      	str	r2, [r3, #0]

        char sentence[50] = "";
 800310e:	2408      	movs	r4, #8
 8003110:	193b      	adds	r3, r7, r4
 8003112:	2200      	movs	r2, #0
 8003114:	601a      	str	r2, [r3, #0]
 8003116:	3304      	adds	r3, #4
 8003118:	222e      	movs	r2, #46	; 0x2e
 800311a:	2100      	movs	r1, #0
 800311c:	0018      	movs	r0, r3
 800311e:	f003 fbed 	bl	80068fc <memset>
        sprintf(sentence,"All OK, lock = %i\r\n",gps_lock);
 8003122:	4b0e      	ldr	r3, [pc, #56]	; (800315c <m8n_read_location+0x210>)
 8003124:	681a      	ldr	r2, [r3, #0]
 8003126:	4914      	ldr	r1, [pc, #80]	; (8003178 <m8n_read_location+0x22c>)
 8003128:	193b      	adds	r3, r7, r4
 800312a:	0018      	movs	r0, r3
 800312c:	f004 fa68 	bl	8007600 <siprintf>
        HAL_UART_Transmit(&huart2, (uint8_t*) sentence, strlen(sentence), 100);
 8003130:	193b      	adds	r3, r7, r4
 8003132:	0018      	movs	r0, r3
 8003134:	f7fc ffee 	bl	8000114 <strlen>
 8003138:	0003      	movs	r3, r0
 800313a:	b29a      	uxth	r2, r3
 800313c:	1939      	adds	r1, r7, r4
 800313e:	4809      	ldr	r0, [pc, #36]	; (8003164 <m8n_read_location+0x218>)
 8003140:	2364      	movs	r3, #100	; 0x64
 8003142:	f002 facd 	bl	80056e0 <HAL_UART_Transmit>
 8003146:	e000      	b.n	800314a <m8n_read_location+0x1fe>
        return;
 8003148:	46c0      	nop			; (mov r8, r8)
        //HAL_UART_Transmit(&huart2, (uint8_t*) *loc_str, strlen(*loc_str), 100);

        return;
    }

}
 800314a:	46bd      	mov	sp, r7
 800314c:	b014      	add	sp, #80	; 0x50
 800314e:	bdb0      	pop	{r4, r5, r7, pc}
 8003150:	0800bc80 	.word	0x0800bc80
 8003154:	0800bc84 	.word	0x0800bc84
 8003158:	0800bc88 	.word	0x0800bc88
 800315c:	200007bc 	.word	0x200007bc
 8003160:	0800bc9c 	.word	0x0800bc9c
 8003164:	20000854 	.word	0x20000854
 8003168:	0800bcb8 	.word	0x0800bcb8
 800316c:	0800bccc 	.word	0x0800bccc
 8003170:	20000034 	.word	0x20000034
 8003174:	0800bcd4 	.word	0x0800bcd4
 8003178:	0800bcf8 	.word	0x0800bcf8

0800317c <sim800_AT_OK>:

//this function checks that SIM800 GSM module responds OK to the AT command "AT" after a maximum of 10 attempts.
int sim800_AT_OK(uint8_t debug_on){
 800317c:	b590      	push	{r4, r7, lr}
 800317e:	b08d      	sub	sp, #52	; 0x34
 8003180:	af00      	add	r7, sp, #0
 8003182:	0002      	movs	r2, r0
 8003184:	1dfb      	adds	r3, r7, #7
 8003186:	701a      	strb	r2, [r3, #0]

	//char ATcommand[80];
	char ATcommand[] = "AT\r\n";
 8003188:	2328      	movs	r3, #40	; 0x28
 800318a:	18fb      	adds	r3, r7, r3
 800318c:	4a39      	ldr	r2, [pc, #228]	; (8003274 <sim800_AT_OK+0xf8>)
 800318e:	6811      	ldr	r1, [r2, #0]
 8003190:	6019      	str	r1, [r3, #0]
 8003192:	7912      	ldrb	r2, [r2, #4]
 8003194:	711a      	strb	r2, [r3, #4]
	uint8_t buffer[30] = {0};
 8003196:	2308      	movs	r3, #8
 8003198:	18fb      	adds	r3, r7, r3
 800319a:	2200      	movs	r2, #0
 800319c:	601a      	str	r2, [r3, #0]
 800319e:	3304      	adds	r3, #4
 80031a0:	221a      	movs	r2, #26
 80031a2:	2100      	movs	r1, #0
 80031a4:	0018      	movs	r0, r3
 80031a6:	f003 fba9 	bl	80068fc <memset>
	uint8_t ATisOK = 0;
 80031aa:	232f      	movs	r3, #47	; 0x2f
 80031ac:	18fb      	adds	r3, r7, r3
 80031ae:	2200      	movs	r2, #0
 80031b0:	701a      	strb	r2, [r3, #0]
	uint8_t count = 0;
 80031b2:	232e      	movs	r3, #46	; 0x2e
 80031b4:	18fb      	adds	r3, r7, r3
 80031b6:	2200      	movs	r2, #0
 80031b8:	701a      	strb	r2, [r3, #0]
	uint8_t timeout = 3;
 80031ba:	232d      	movs	r3, #45	; 0x2d
 80031bc:	18fb      	adds	r3, r7, r3
 80031be:	2203      	movs	r2, #3
 80031c0:	701a      	strb	r2, [r3, #0]

	while(!ATisOK){
 80031c2:	e04c      	b.n	800325e <sim800_AT_OK+0xe2>

		if (debug_on){HAL_UART_Transmit(&huart2,(uint8_t *)ATcommand,strlen(ATcommand),1000);}
 80031c4:	1dfb      	adds	r3, r7, #7
 80031c6:	781b      	ldrb	r3, [r3, #0]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d00c      	beq.n	80031e6 <sim800_AT_OK+0x6a>
 80031cc:	2428      	movs	r4, #40	; 0x28
 80031ce:	193b      	adds	r3, r7, r4
 80031d0:	0018      	movs	r0, r3
 80031d2:	f7fc ff9f 	bl	8000114 <strlen>
 80031d6:	0003      	movs	r3, r0
 80031d8:	b29a      	uxth	r2, r3
 80031da:	23fa      	movs	r3, #250	; 0xfa
 80031dc:	009b      	lsls	r3, r3, #2
 80031de:	1939      	adds	r1, r7, r4
 80031e0:	4825      	ldr	r0, [pc, #148]	; (8003278 <sim800_AT_OK+0xfc>)
 80031e2:	f002 fa7d 	bl	80056e0 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3,(uint8_t *)ATcommand,strlen(ATcommand),100);
 80031e6:	2428      	movs	r4, #40	; 0x28
 80031e8:	193b      	adds	r3, r7, r4
 80031ea:	0018      	movs	r0, r3
 80031ec:	f7fc ff92 	bl	8000114 <strlen>
 80031f0:	0003      	movs	r3, r0
 80031f2:	b29a      	uxth	r2, r3
 80031f4:	1939      	adds	r1, r7, r4
 80031f6:	4821      	ldr	r0, [pc, #132]	; (800327c <sim800_AT_OK+0x100>)
 80031f8:	2364      	movs	r3, #100	; 0x64
 80031fa:	f002 fa71 	bl	80056e0 <HAL_UART_Transmit>
		HAL_UART_Receive (&huart3, buffer, 30, 5000);
 80031fe:	4b20      	ldr	r3, [pc, #128]	; (8003280 <sim800_AT_OK+0x104>)
 8003200:	2408      	movs	r4, #8
 8003202:	1939      	adds	r1, r7, r4
 8003204:	481d      	ldr	r0, [pc, #116]	; (800327c <sim800_AT_OK+0x100>)
 8003206:	221e      	movs	r2, #30
 8003208:	f002 fb16 	bl	8005838 <HAL_UART_Receive>
		HAL_Delay(10);
 800320c:	200a      	movs	r0, #10
 800320e:	f000 fec1 	bl	8003f94 <HAL_Delay>

		if(strstr((char *)buffer,"OK")){
 8003212:	4a1c      	ldr	r2, [pc, #112]	; (8003284 <sim800_AT_OK+0x108>)
 8003214:	193b      	adds	r3, r7, r4
 8003216:	0011      	movs	r1, r2
 8003218:	0018      	movs	r0, r3
 800321a:	f004 fa87 	bl	800772c <strstr>
 800321e:	1e03      	subs	r3, r0, #0
 8003220:	d003      	beq.n	800322a <sim800_AT_OK+0xae>
			ATisOK = 1;
 8003222:	232f      	movs	r3, #47	; 0x2f
 8003224:	18fb      	adds	r3, r7, r3
 8003226:	2201      	movs	r2, #1
 8003228:	701a      	strb	r2, [r3, #0]
		}

		HAL_Delay(10);
 800322a:	200a      	movs	r0, #10
 800322c:	f000 feb2 	bl	8003f94 <HAL_Delay>
		memset(buffer,0,sizeof(buffer));
 8003230:	2308      	movs	r3, #8
 8003232:	18fb      	adds	r3, r7, r3
 8003234:	221e      	movs	r2, #30
 8003236:	2100      	movs	r1, #0
 8003238:	0018      	movs	r0, r3
 800323a:	f003 fb5f 	bl	80068fc <memset>

		count++;
 800323e:	212e      	movs	r1, #46	; 0x2e
 8003240:	187b      	adds	r3, r7, r1
 8003242:	781a      	ldrb	r2, [r3, #0]
 8003244:	187b      	adds	r3, r7, r1
 8003246:	3201      	adds	r2, #1
 8003248:	701a      	strb	r2, [r3, #0]
		if (count >= timeout){
 800324a:	187a      	adds	r2, r7, r1
 800324c:	232d      	movs	r3, #45	; 0x2d
 800324e:	18fb      	adds	r3, r7, r3
 8003250:	7812      	ldrb	r2, [r2, #0]
 8003252:	781b      	ldrb	r3, [r3, #0]
 8003254:	429a      	cmp	r2, r3
 8003256:	d302      	bcc.n	800325e <sim800_AT_OK+0xe2>
			return -1;
 8003258:	2301      	movs	r3, #1
 800325a:	425b      	negs	r3, r3
 800325c:	e005      	b.n	800326a <sim800_AT_OK+0xee>
	while(!ATisOK){
 800325e:	232f      	movs	r3, #47	; 0x2f
 8003260:	18fb      	adds	r3, r7, r3
 8003262:	781b      	ldrb	r3, [r3, #0]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d0ad      	beq.n	80031c4 <sim800_AT_OK+0x48>
		}
	}

	return 1;
 8003268:	2301      	movs	r3, #1
}
 800326a:	0018      	movs	r0, r3
 800326c:	46bd      	mov	sp, r7
 800326e:	b00d      	add	sp, #52	; 0x34
 8003270:	bd90      	pop	{r4, r7, pc}
 8003272:	46c0      	nop			; (mov r8, r8)
 8003274:	0800bd10 	.word	0x0800bd10
 8003278:	20000854 	.word	0x20000854
 800327c:	200008e4 	.word	0x200008e4
 8003280:	00001388 	.word	0x00001388
 8003284:	0800bd0c 	.word	0x0800bd0c

08003288 <sim800_setup>:


int sim800_setup(uint8_t debug_on){
 8003288:	b5b0      	push	{r4, r5, r7, lr}
 800328a:	b09e      	sub	sp, #120	; 0x78
 800328c:	af00      	add	r7, sp, #0
 800328e:	0002      	movs	r2, r0
 8003290:	1dfb      	adds	r3, r7, #7
 8003292:	701a      	strb	r2, [r3, #0]

	char ATcommand[80];
	uint8_t buffer[30] = {0};
 8003294:	2308      	movs	r3, #8
 8003296:	18fb      	adds	r3, r7, r3
 8003298:	2200      	movs	r2, #0
 800329a:	601a      	str	r2, [r3, #0]
 800329c:	3304      	adds	r3, #4
 800329e:	221a      	movs	r2, #26
 80032a0:	2100      	movs	r1, #0
 80032a2:	0018      	movs	r0, r3
 80032a4:	f003 fb2a 	bl	80068fc <memset>

	if (!sim800_AT_OK(1)){
 80032a8:	2001      	movs	r0, #1
 80032aa:	f7ff ff67 	bl	800317c <sim800_AT_OK>
 80032ae:	1e03      	subs	r3, r0, #0
 80032b0:	d102      	bne.n	80032b8 <sim800_setup+0x30>
		return -1;
 80032b2:	2301      	movs	r3, #1
 80032b4:	425b      	negs	r3, r3
 80032b6:	e069      	b.n	800338c <sim800_setup+0x104>
	}

	//going text mode
	sprintf(ATcommand,"AT+CMGF=1\r\n");
 80032b8:	4a36      	ldr	r2, [pc, #216]	; (8003394 <sim800_setup+0x10c>)
 80032ba:	2428      	movs	r4, #40	; 0x28
 80032bc:	193b      	adds	r3, r7, r4
 80032be:	0011      	movs	r1, r2
 80032c0:	0018      	movs	r0, r3
 80032c2:	f004 f99d 	bl	8007600 <siprintf>
	if (debug_on){HAL_UART_Transmit(&huart2,(uint8_t *)ATcommand,strlen(ATcommand),1000);}
 80032c6:	1dfb      	adds	r3, r7, #7
 80032c8:	781b      	ldrb	r3, [r3, #0]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d00b      	beq.n	80032e6 <sim800_setup+0x5e>
 80032ce:	193b      	adds	r3, r7, r4
 80032d0:	0018      	movs	r0, r3
 80032d2:	f7fc ff1f 	bl	8000114 <strlen>
 80032d6:	0003      	movs	r3, r0
 80032d8:	b29a      	uxth	r2, r3
 80032da:	23fa      	movs	r3, #250	; 0xfa
 80032dc:	009b      	lsls	r3, r3, #2
 80032de:	1939      	adds	r1, r7, r4
 80032e0:	482d      	ldr	r0, [pc, #180]	; (8003398 <sim800_setup+0x110>)
 80032e2:	f002 f9fd 	bl	80056e0 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart3,(uint8_t *)ATcommand,strlen(ATcommand),1000);
 80032e6:	2428      	movs	r4, #40	; 0x28
 80032e8:	193b      	adds	r3, r7, r4
 80032ea:	0018      	movs	r0, r3
 80032ec:	f7fc ff12 	bl	8000114 <strlen>
 80032f0:	0003      	movs	r3, r0
 80032f2:	b29a      	uxth	r2, r3
 80032f4:	23fa      	movs	r3, #250	; 0xfa
 80032f6:	009b      	lsls	r3, r3, #2
 80032f8:	1939      	adds	r1, r7, r4
 80032fa:	4828      	ldr	r0, [pc, #160]	; (800339c <sim800_setup+0x114>)
 80032fc:	f002 f9f0 	bl	80056e0 <HAL_UART_Transmit>
	HAL_UART_Receive (&huart3, buffer, 256, 100);
 8003300:	2380      	movs	r3, #128	; 0x80
 8003302:	005a      	lsls	r2, r3, #1
 8003304:	2508      	movs	r5, #8
 8003306:	1979      	adds	r1, r7, r5
 8003308:	4824      	ldr	r0, [pc, #144]	; (800339c <sim800_setup+0x114>)
 800330a:	2364      	movs	r3, #100	; 0x64
 800330c:	f002 fa94 	bl	8005838 <HAL_UART_Receive>
	HAL_Delay(10);
 8003310:	200a      	movs	r0, #10
 8003312:	f000 fe3f 	bl	8003f94 <HAL_Delay>
	memset(buffer,0,sizeof(buffer));
 8003316:	197b      	adds	r3, r7, r5
 8003318:	221e      	movs	r2, #30
 800331a:	2100      	movs	r1, #0
 800331c:	0018      	movs	r0, r3
 800331e:	f003 faed 	bl	80068fc <memset>

	//save on sim card only
	sprintf(ATcommand,"AT+CPMS=\"SM\",\"SM\",\"SM\"\r\n");
 8003322:	4a1f      	ldr	r2, [pc, #124]	; (80033a0 <sim800_setup+0x118>)
 8003324:	193b      	adds	r3, r7, r4
 8003326:	0011      	movs	r1, r2
 8003328:	0018      	movs	r0, r3
 800332a:	f004 f969 	bl	8007600 <siprintf>
	if (debug_on){HAL_UART_Transmit(&huart2,(uint8_t *)ATcommand,strlen(ATcommand),1000);}
 800332e:	1dfb      	adds	r3, r7, #7
 8003330:	781b      	ldrb	r3, [r3, #0]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d00b      	beq.n	800334e <sim800_setup+0xc6>
 8003336:	193b      	adds	r3, r7, r4
 8003338:	0018      	movs	r0, r3
 800333a:	f7fc feeb 	bl	8000114 <strlen>
 800333e:	0003      	movs	r3, r0
 8003340:	b29a      	uxth	r2, r3
 8003342:	23fa      	movs	r3, #250	; 0xfa
 8003344:	009b      	lsls	r3, r3, #2
 8003346:	1939      	adds	r1, r7, r4
 8003348:	4813      	ldr	r0, [pc, #76]	; (8003398 <sim800_setup+0x110>)
 800334a:	f002 f9c9 	bl	80056e0 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart3,(uint8_t *)ATcommand,strlen(ATcommand),1000);
 800334e:	2428      	movs	r4, #40	; 0x28
 8003350:	193b      	adds	r3, r7, r4
 8003352:	0018      	movs	r0, r3
 8003354:	f7fc fede 	bl	8000114 <strlen>
 8003358:	0003      	movs	r3, r0
 800335a:	b29a      	uxth	r2, r3
 800335c:	23fa      	movs	r3, #250	; 0xfa
 800335e:	009b      	lsls	r3, r3, #2
 8003360:	1939      	adds	r1, r7, r4
 8003362:	480e      	ldr	r0, [pc, #56]	; (800339c <sim800_setup+0x114>)
 8003364:	f002 f9bc 	bl	80056e0 <HAL_UART_Transmit>
	HAL_UART_Receive (&huart3, buffer, 256, 100);
 8003368:	2380      	movs	r3, #128	; 0x80
 800336a:	005a      	lsls	r2, r3, #1
 800336c:	2408      	movs	r4, #8
 800336e:	1939      	adds	r1, r7, r4
 8003370:	480a      	ldr	r0, [pc, #40]	; (800339c <sim800_setup+0x114>)
 8003372:	2364      	movs	r3, #100	; 0x64
 8003374:	f002 fa60 	bl	8005838 <HAL_UART_Receive>
	HAL_Delay(10);
 8003378:	200a      	movs	r0, #10
 800337a:	f000 fe0b 	bl	8003f94 <HAL_Delay>
	memset(buffer,0,sizeof(buffer));
 800337e:	193b      	adds	r3, r7, r4
 8003380:	221e      	movs	r2, #30
 8003382:	2100      	movs	r1, #0
 8003384:	0018      	movs	r0, r3
 8003386:	f003 fab9 	bl	80068fc <memset>
	sprintf(ATcommand,"AT+CNMI=1,2,0,0,0\r\n");
	if (debug_on){HAL_UART_Transmit(&huart2,(uint8_t *)ATcommand,strlen(ATcommand),1000);}
	HAL_UART_Transmit(&huart3,(uint8_t *)ATcommand,strlen(ATcommand),1000);
	HAL_Delay(10);
	*/
	return 1;
 800338a:	2301      	movs	r3, #1
}
 800338c:	0018      	movs	r0, r3
 800338e:	46bd      	mov	sp, r7
 8003390:	b01e      	add	sp, #120	; 0x78
 8003392:	bdb0      	pop	{r4, r5, r7, pc}
 8003394:	0800bd18 	.word	0x0800bd18
 8003398:	20000854 	.word	0x20000854
 800339c:	200008e4 	.word	0x200008e4
 80033a0:	0800bd24 	.word	0x0800bd24

080033a4 <sim800_send_sms>:

int sim800_send_sms(char str_to_send[], uint8_t debug_on){
 80033a4:	b590      	push	{r4, r7, lr}
 80033a6:	b09f      	sub	sp, #124	; 0x7c
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
 80033ac:	000a      	movs	r2, r1
 80033ae:	1cfb      	adds	r3, r7, #3
 80033b0:	701a      	strb	r2, [r3, #0]

	char ATcommand[80];
	uint8_t buffer[30] = {0};
 80033b2:	2308      	movs	r3, #8
 80033b4:	18fb      	adds	r3, r7, r3
 80033b6:	2200      	movs	r2, #0
 80033b8:	601a      	str	r2, [r3, #0]
 80033ba:	3304      	adds	r3, #4
 80033bc:	221a      	movs	r2, #26
 80033be:	2100      	movs	r1, #0
 80033c0:	0018      	movs	r0, r3
 80033c2:	f003 fa9b 	bl	80068fc <memset>

	if (!sim800_AT_OK(1)){
 80033c6:	2001      	movs	r0, #1
 80033c8:	f7ff fed8 	bl	800317c <sim800_AT_OK>
 80033cc:	1e03      	subs	r3, r0, #0
 80033ce:	d102      	bne.n	80033d6 <sim800_send_sms+0x32>
		return -1;
 80033d0:	2301      	movs	r3, #1
 80033d2:	425b      	negs	r3, r3
 80033d4:	e05a      	b.n	800348c <sim800_send_sms+0xe8>
	}

	sprintf(ATcommand,"AT+CMGS=\"%s\"\r\n",mobileNumber);
 80033d6:	4a2f      	ldr	r2, [pc, #188]	; (8003494 <sim800_send_sms+0xf0>)
 80033d8:	492f      	ldr	r1, [pc, #188]	; (8003498 <sim800_send_sms+0xf4>)
 80033da:	2428      	movs	r4, #40	; 0x28
 80033dc:	193b      	adds	r3, r7, r4
 80033de:	0018      	movs	r0, r3
 80033e0:	f004 f90e 	bl	8007600 <siprintf>
	if (debug_on){HAL_UART_Transmit(&huart2,(uint8_t *)ATcommand,strlen(ATcommand),1000);}
 80033e4:	1cfb      	adds	r3, r7, #3
 80033e6:	781b      	ldrb	r3, [r3, #0]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d00b      	beq.n	8003404 <sim800_send_sms+0x60>
 80033ec:	193b      	adds	r3, r7, r4
 80033ee:	0018      	movs	r0, r3
 80033f0:	f7fc fe90 	bl	8000114 <strlen>
 80033f4:	0003      	movs	r3, r0
 80033f6:	b29a      	uxth	r2, r3
 80033f8:	23fa      	movs	r3, #250	; 0xfa
 80033fa:	009b      	lsls	r3, r3, #2
 80033fc:	1939      	adds	r1, r7, r4
 80033fe:	4827      	ldr	r0, [pc, #156]	; (800349c <sim800_send_sms+0xf8>)
 8003400:	f002 f96e 	bl	80056e0 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart3,(uint8_t *)ATcommand,strlen(ATcommand),1000);
 8003404:	2428      	movs	r4, #40	; 0x28
 8003406:	193b      	adds	r3, r7, r4
 8003408:	0018      	movs	r0, r3
 800340a:	f7fc fe83 	bl	8000114 <strlen>
 800340e:	0003      	movs	r3, r0
 8003410:	b29a      	uxth	r2, r3
 8003412:	23fa      	movs	r3, #250	; 0xfa
 8003414:	009b      	lsls	r3, r3, #2
 8003416:	1939      	adds	r1, r7, r4
 8003418:	4821      	ldr	r0, [pc, #132]	; (80034a0 <sim800_send_sms+0xfc>)
 800341a:	f002 f961 	bl	80056e0 <HAL_UART_Transmit>
	HAL_Delay(10);
 800341e:	200a      	movs	r0, #10
 8003420:	f000 fdb8 	bl	8003f94 <HAL_Delay>

	sprintf(ATcommand,"%s%c",str_to_send,26);//,0x1a);
 8003424:	687a      	ldr	r2, [r7, #4]
 8003426:	491f      	ldr	r1, [pc, #124]	; (80034a4 <sim800_send_sms+0x100>)
 8003428:	1938      	adds	r0, r7, r4
 800342a:	231a      	movs	r3, #26
 800342c:	f004 f8e8 	bl	8007600 <siprintf>
	if (debug_on){HAL_UART_Transmit(&huart2,(uint8_t *)ATcommand,strlen(ATcommand),1000);}
 8003430:	1cfb      	adds	r3, r7, #3
 8003432:	781b      	ldrb	r3, [r3, #0]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d00b      	beq.n	8003450 <sim800_send_sms+0xac>
 8003438:	193b      	adds	r3, r7, r4
 800343a:	0018      	movs	r0, r3
 800343c:	f7fc fe6a 	bl	8000114 <strlen>
 8003440:	0003      	movs	r3, r0
 8003442:	b29a      	uxth	r2, r3
 8003444:	23fa      	movs	r3, #250	; 0xfa
 8003446:	009b      	lsls	r3, r3, #2
 8003448:	1939      	adds	r1, r7, r4
 800344a:	4814      	ldr	r0, [pc, #80]	; (800349c <sim800_send_sms+0xf8>)
 800344c:	f002 f948 	bl	80056e0 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart3,(uint8_t *)ATcommand,strlen(ATcommand),1000);
 8003450:	2428      	movs	r4, #40	; 0x28
 8003452:	193b      	adds	r3, r7, r4
 8003454:	0018      	movs	r0, r3
 8003456:	f7fc fe5d 	bl	8000114 <strlen>
 800345a:	0003      	movs	r3, r0
 800345c:	b29a      	uxth	r2, r3
 800345e:	23fa      	movs	r3, #250	; 0xfa
 8003460:	009b      	lsls	r3, r3, #2
 8003462:	1939      	adds	r1, r7, r4
 8003464:	480e      	ldr	r0, [pc, #56]	; (80034a0 <sim800_send_sms+0xfc>)
 8003466:	f002 f93b 	bl	80056e0 <HAL_UART_Transmit>
	HAL_UART_Receive (&huart3, buffer, 30, 100);
 800346a:	2408      	movs	r4, #8
 800346c:	1939      	adds	r1, r7, r4
 800346e:	480c      	ldr	r0, [pc, #48]	; (80034a0 <sim800_send_sms+0xfc>)
 8003470:	2364      	movs	r3, #100	; 0x64
 8003472:	221e      	movs	r2, #30
 8003474:	f002 f9e0 	bl	8005838 <HAL_UART_Receive>
	memset(buffer,0,sizeof(buffer));
 8003478:	193b      	adds	r3, r7, r4
 800347a:	221e      	movs	r2, #30
 800347c:	2100      	movs	r1, #0
 800347e:	0018      	movs	r0, r3
 8003480:	f003 fa3c 	bl	80068fc <memset>
	HAL_Delay(10);
 8003484:	200a      	movs	r0, #10
 8003486:	f000 fd85 	bl	8003f94 <HAL_Delay>

	return 1;
 800348a:	2301      	movs	r3, #1
}
 800348c:	0018      	movs	r0, r3
 800348e:	46bd      	mov	sp, r7
 8003490:	b01f      	add	sp, #124	; 0x7c
 8003492:	bd90      	pop	{r4, r7, pc}
 8003494:	20000038 	.word	0x20000038
 8003498:	0800bd40 	.word	0x0800bd40
 800349c:	20000854 	.word	0x20000854
 80034a0:	200008e4 	.word	0x200008e4
 80034a4:	0800bd50 	.word	0x0800bd50

080034a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b082      	sub	sp, #8
 80034ac:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80034ae:	f000 fceb 	bl	8003e88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80034b2:	f000 f851 	bl	8003558 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80034b6:	f000 f985 	bl	80037c4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80034ba:	f000 f8e3 	bl	8003684 <MX_USART2_UART_Init>
  MX_DMA_Init();
 80034be:	f000 f963 	bl	8003788 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80034c2:	f000 f891 	bl	80035e8 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 80034c6:	f000 f92b 	bl	8003720 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  //setup gsm module
  sim800_setup(1);
 80034ca:	2001      	movs	r0, #1
 80034cc:	f7ff fedc 	bl	8003288 <sim800_setup>

  HAL_UART_Receive_DMA (&huart1, (uint8_t*)UART1_rxBuffer, 700);
 80034d0:	23af      	movs	r3, #175	; 0xaf
 80034d2:	009a      	lsls	r2, r3, #2
 80034d4:	4919      	ldr	r1, [pc, #100]	; (800353c <main+0x94>)
 80034d6:	4b1a      	ldr	r3, [pc, #104]	; (8003540 <main+0x98>)
 80034d8:	0018      	movs	r0, r3
 80034da:	f002 fa9f 	bl	8005a1c <HAL_UART_Receive_DMA>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	//copy buffer content into char array
	int i = 0;
 80034de:	2300      	movs	r3, #0
 80034e0:	607b      	str	r3, [r7, #4]
    for (i=0;i<BUFF_SIZE;i++){
 80034e2:	2300      	movs	r3, #0
 80034e4:	607b      	str	r3, [r7, #4]
 80034e6:	e00b      	b.n	8003500 <main+0x58>
        nmea_raw_data[i] = (char) UART1_rxBuffer[i];
 80034e8:	4a14      	ldr	r2, [pc, #80]	; (800353c <main+0x94>)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	18d3      	adds	r3, r2, r3
 80034ee:	7819      	ldrb	r1, [r3, #0]
 80034f0:	4a14      	ldr	r2, [pc, #80]	; (8003544 <main+0x9c>)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	18d3      	adds	r3, r2, r3
 80034f6:	1c0a      	adds	r2, r1, #0
 80034f8:	701a      	strb	r2, [r3, #0]
    for (i=0;i<BUFF_SIZE;i++){
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	3301      	adds	r3, #1
 80034fe:	607b      	str	r3, [r7, #4]
 8003500:	687a      	ldr	r2, [r7, #4]
 8003502:	23af      	movs	r3, #175	; 0xaf
 8003504:	009b      	lsls	r3, r3, #2
 8003506:	429a      	cmp	r2, r3
 8003508:	dbee      	blt.n	80034e8 <main+0x40>
    }

    //extract location under "DDD,DDD" format
    m8n_read_location(nmea_raw_data, &loc_str);
 800350a:	4a0f      	ldr	r2, [pc, #60]	; (8003548 <main+0xa0>)
 800350c:	4b0d      	ldr	r3, [pc, #52]	; (8003544 <main+0x9c>)
 800350e:	0011      	movs	r1, r2
 8003510:	0018      	movs	r0, r3
 8003512:	f7ff fd1b 	bl	8002f4c <m8n_read_location>
	//HAL_UART_Transmit(&huart2, (uint8_t*) loc_str, sizeof(loc_str), 100);
	//HAL_UART_Transmit(&huart2, (uint8_t*) gps_lock, sizeof(gps_lock), 100);


	//check if flag is on (user button pressed)
	if (flag == 1 && gps_lock >= gps_lock_th){
 8003516:	4b0d      	ldr	r3, [pc, #52]	; (800354c <main+0xa4>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	2b01      	cmp	r3, #1
 800351c:	d1df      	bne.n	80034de <main+0x36>
 800351e:	4b0c      	ldr	r3, [pc, #48]	; (8003550 <main+0xa8>)
 8003520:	681a      	ldr	r2, [r3, #0]
 8003522:	4b0c      	ldr	r3, [pc, #48]	; (8003554 <main+0xac>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	429a      	cmp	r2, r3
 8003528:	dbd9      	blt.n	80034de <main+0x36>

		//read sms
		//sim800_read_sms(1);

		//send sms
		sim800_send_sms(loc_str, 1);
 800352a:	4b07      	ldr	r3, [pc, #28]	; (8003548 <main+0xa0>)
 800352c:	2101      	movs	r1, #1
 800352e:	0018      	movs	r0, r3
 8003530:	f7ff ff38 	bl	80033a4 <sim800_send_sms>

		//give a call
		//originate_call(0);

		//reset flag
		flag = 0;
 8003534:	4b05      	ldr	r3, [pc, #20]	; (800354c <main+0xa4>)
 8003536:	2200      	movs	r2, #0
 8003538:	601a      	str	r2, [r3, #0]
  {
 800353a:	e7d0      	b.n	80034de <main+0x36>
 800353c:	20000244 	.word	0x20000244
 8003540:	200007c4 	.word	0x200007c4
 8003544:	20000500 	.word	0x20000500
 8003548:	20000000 	.word	0x20000000
 800354c:	200007c0 	.word	0x200007c0
 8003550:	200007bc 	.word	0x200007bc
 8003554:	20000034 	.word	0x20000034

08003558 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003558:	b590      	push	{r4, r7, lr}
 800355a:	b093      	sub	sp, #76	; 0x4c
 800355c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800355e:	2414      	movs	r4, #20
 8003560:	193b      	adds	r3, r7, r4
 8003562:	0018      	movs	r0, r3
 8003564:	2334      	movs	r3, #52	; 0x34
 8003566:	001a      	movs	r2, r3
 8003568:	2100      	movs	r1, #0
 800356a:	f003 f9c7 	bl	80068fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800356e:	1d3b      	adds	r3, r7, #4
 8003570:	0018      	movs	r0, r3
 8003572:	2310      	movs	r3, #16
 8003574:	001a      	movs	r2, r3
 8003576:	2100      	movs	r1, #0
 8003578:	f003 f9c0 	bl	80068fc <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800357c:	2380      	movs	r3, #128	; 0x80
 800357e:	009b      	lsls	r3, r3, #2
 8003580:	0018      	movs	r0, r3
 8003582:	f001 fa1d 	bl	80049c0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003586:	193b      	adds	r3, r7, r4
 8003588:	2202      	movs	r2, #2
 800358a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800358c:	193b      	adds	r3, r7, r4
 800358e:	2280      	movs	r2, #128	; 0x80
 8003590:	0052      	lsls	r2, r2, #1
 8003592:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8003594:	193b      	adds	r3, r7, r4
 8003596:	2200      	movs	r2, #0
 8003598:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800359a:	193b      	adds	r3, r7, r4
 800359c:	2240      	movs	r2, #64	; 0x40
 800359e:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80035a0:	193b      	adds	r3, r7, r4
 80035a2:	2200      	movs	r2, #0
 80035a4:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80035a6:	193b      	adds	r3, r7, r4
 80035a8:	0018      	movs	r0, r3
 80035aa:	f001 fa55 	bl	8004a58 <HAL_RCC_OscConfig>
 80035ae:	1e03      	subs	r3, r0, #0
 80035b0:	d001      	beq.n	80035b6 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80035b2:	f000 f9e7 	bl	8003984 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80035b6:	1d3b      	adds	r3, r7, #4
 80035b8:	2207      	movs	r2, #7
 80035ba:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80035bc:	1d3b      	adds	r3, r7, #4
 80035be:	2200      	movs	r2, #0
 80035c0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80035c2:	1d3b      	adds	r3, r7, #4
 80035c4:	2200      	movs	r2, #0
 80035c6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80035c8:	1d3b      	adds	r3, r7, #4
 80035ca:	2200      	movs	r2, #0
 80035cc:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80035ce:	1d3b      	adds	r3, r7, #4
 80035d0:	2100      	movs	r1, #0
 80035d2:	0018      	movs	r0, r3
 80035d4:	f001 fd50 	bl	8005078 <HAL_RCC_ClockConfig>
 80035d8:	1e03      	subs	r3, r0, #0
 80035da:	d001      	beq.n	80035e0 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80035dc:	f000 f9d2 	bl	8003984 <Error_Handler>
  }
}
 80035e0:	46c0      	nop			; (mov r8, r8)
 80035e2:	46bd      	mov	sp, r7
 80035e4:	b013      	add	sp, #76	; 0x4c
 80035e6:	bd90      	pop	{r4, r7, pc}

080035e8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80035ec:	4b23      	ldr	r3, [pc, #140]	; (800367c <MX_USART1_UART_Init+0x94>)
 80035ee:	4a24      	ldr	r2, [pc, #144]	; (8003680 <MX_USART1_UART_Init+0x98>)
 80035f0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 80035f2:	4b22      	ldr	r3, [pc, #136]	; (800367c <MX_USART1_UART_Init+0x94>)
 80035f4:	2296      	movs	r2, #150	; 0x96
 80035f6:	0212      	lsls	r2, r2, #8
 80035f8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80035fa:	4b20      	ldr	r3, [pc, #128]	; (800367c <MX_USART1_UART_Init+0x94>)
 80035fc:	2200      	movs	r2, #0
 80035fe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003600:	4b1e      	ldr	r3, [pc, #120]	; (800367c <MX_USART1_UART_Init+0x94>)
 8003602:	2200      	movs	r2, #0
 8003604:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003606:	4b1d      	ldr	r3, [pc, #116]	; (800367c <MX_USART1_UART_Init+0x94>)
 8003608:	2200      	movs	r2, #0
 800360a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800360c:	4b1b      	ldr	r3, [pc, #108]	; (800367c <MX_USART1_UART_Init+0x94>)
 800360e:	220c      	movs	r2, #12
 8003610:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003612:	4b1a      	ldr	r3, [pc, #104]	; (800367c <MX_USART1_UART_Init+0x94>)
 8003614:	2200      	movs	r2, #0
 8003616:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003618:	4b18      	ldr	r3, [pc, #96]	; (800367c <MX_USART1_UART_Init+0x94>)
 800361a:	2200      	movs	r2, #0
 800361c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800361e:	4b17      	ldr	r3, [pc, #92]	; (800367c <MX_USART1_UART_Init+0x94>)
 8003620:	2200      	movs	r2, #0
 8003622:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003624:	4b15      	ldr	r3, [pc, #84]	; (800367c <MX_USART1_UART_Init+0x94>)
 8003626:	2200      	movs	r2, #0
 8003628:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800362a:	4b14      	ldr	r3, [pc, #80]	; (800367c <MX_USART1_UART_Init+0x94>)
 800362c:	2200      	movs	r2, #0
 800362e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003630:	4b12      	ldr	r3, [pc, #72]	; (800367c <MX_USART1_UART_Init+0x94>)
 8003632:	0018      	movs	r0, r3
 8003634:	f001 fffe 	bl	8005634 <HAL_UART_Init>
 8003638:	1e03      	subs	r3, r0, #0
 800363a:	d001      	beq.n	8003640 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800363c:	f000 f9a2 	bl	8003984 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003640:	4b0e      	ldr	r3, [pc, #56]	; (800367c <MX_USART1_UART_Init+0x94>)
 8003642:	2100      	movs	r1, #0
 8003644:	0018      	movs	r0, r3
 8003646:	f003 f84f 	bl	80066e8 <HAL_UARTEx_SetTxFifoThreshold>
 800364a:	1e03      	subs	r3, r0, #0
 800364c:	d001      	beq.n	8003652 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800364e:	f000 f999 	bl	8003984 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003652:	4b0a      	ldr	r3, [pc, #40]	; (800367c <MX_USART1_UART_Init+0x94>)
 8003654:	2100      	movs	r1, #0
 8003656:	0018      	movs	r0, r3
 8003658:	f003 f886 	bl	8006768 <HAL_UARTEx_SetRxFifoThreshold>
 800365c:	1e03      	subs	r3, r0, #0
 800365e:	d001      	beq.n	8003664 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8003660:	f000 f990 	bl	8003984 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8003664:	4b05      	ldr	r3, [pc, #20]	; (800367c <MX_USART1_UART_Init+0x94>)
 8003666:	0018      	movs	r0, r3
 8003668:	f003 f804 	bl	8006674 <HAL_UARTEx_DisableFifoMode>
 800366c:	1e03      	subs	r3, r0, #0
 800366e:	d001      	beq.n	8003674 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8003670:	f000 f988 	bl	8003984 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003674:	46c0      	nop			; (mov r8, r8)
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}
 800367a:	46c0      	nop			; (mov r8, r8)
 800367c:	200007c4 	.word	0x200007c4
 8003680:	40013800 	.word	0x40013800

08003684 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003688:	4b23      	ldr	r3, [pc, #140]	; (8003718 <MX_USART2_UART_Init+0x94>)
 800368a:	4a24      	ldr	r2, [pc, #144]	; (800371c <MX_USART2_UART_Init+0x98>)
 800368c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800368e:	4b22      	ldr	r3, [pc, #136]	; (8003718 <MX_USART2_UART_Init+0x94>)
 8003690:	2296      	movs	r2, #150	; 0x96
 8003692:	0192      	lsls	r2, r2, #6
 8003694:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003696:	4b20      	ldr	r3, [pc, #128]	; (8003718 <MX_USART2_UART_Init+0x94>)
 8003698:	2200      	movs	r2, #0
 800369a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800369c:	4b1e      	ldr	r3, [pc, #120]	; (8003718 <MX_USART2_UART_Init+0x94>)
 800369e:	2200      	movs	r2, #0
 80036a0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80036a2:	4b1d      	ldr	r3, [pc, #116]	; (8003718 <MX_USART2_UART_Init+0x94>)
 80036a4:	2200      	movs	r2, #0
 80036a6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80036a8:	4b1b      	ldr	r3, [pc, #108]	; (8003718 <MX_USART2_UART_Init+0x94>)
 80036aa:	220c      	movs	r2, #12
 80036ac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80036ae:	4b1a      	ldr	r3, [pc, #104]	; (8003718 <MX_USART2_UART_Init+0x94>)
 80036b0:	2200      	movs	r2, #0
 80036b2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80036b4:	4b18      	ldr	r3, [pc, #96]	; (8003718 <MX_USART2_UART_Init+0x94>)
 80036b6:	2200      	movs	r2, #0
 80036b8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80036ba:	4b17      	ldr	r3, [pc, #92]	; (8003718 <MX_USART2_UART_Init+0x94>)
 80036bc:	2200      	movs	r2, #0
 80036be:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80036c0:	4b15      	ldr	r3, [pc, #84]	; (8003718 <MX_USART2_UART_Init+0x94>)
 80036c2:	2200      	movs	r2, #0
 80036c4:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80036c6:	4b14      	ldr	r3, [pc, #80]	; (8003718 <MX_USART2_UART_Init+0x94>)
 80036c8:	2200      	movs	r2, #0
 80036ca:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80036cc:	4b12      	ldr	r3, [pc, #72]	; (8003718 <MX_USART2_UART_Init+0x94>)
 80036ce:	0018      	movs	r0, r3
 80036d0:	f001 ffb0 	bl	8005634 <HAL_UART_Init>
 80036d4:	1e03      	subs	r3, r0, #0
 80036d6:	d001      	beq.n	80036dc <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80036d8:	f000 f954 	bl	8003984 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80036dc:	4b0e      	ldr	r3, [pc, #56]	; (8003718 <MX_USART2_UART_Init+0x94>)
 80036de:	2100      	movs	r1, #0
 80036e0:	0018      	movs	r0, r3
 80036e2:	f003 f801 	bl	80066e8 <HAL_UARTEx_SetTxFifoThreshold>
 80036e6:	1e03      	subs	r3, r0, #0
 80036e8:	d001      	beq.n	80036ee <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80036ea:	f000 f94b 	bl	8003984 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80036ee:	4b0a      	ldr	r3, [pc, #40]	; (8003718 <MX_USART2_UART_Init+0x94>)
 80036f0:	2100      	movs	r1, #0
 80036f2:	0018      	movs	r0, r3
 80036f4:	f003 f838 	bl	8006768 <HAL_UARTEx_SetRxFifoThreshold>
 80036f8:	1e03      	subs	r3, r0, #0
 80036fa:	d001      	beq.n	8003700 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80036fc:	f000 f942 	bl	8003984 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8003700:	4b05      	ldr	r3, [pc, #20]	; (8003718 <MX_USART2_UART_Init+0x94>)
 8003702:	0018      	movs	r0, r3
 8003704:	f002 ffb6 	bl	8006674 <HAL_UARTEx_DisableFifoMode>
 8003708:	1e03      	subs	r3, r0, #0
 800370a:	d001      	beq.n	8003710 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800370c:	f000 f93a 	bl	8003984 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003710:	46c0      	nop			; (mov r8, r8)
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}
 8003716:	46c0      	nop			; (mov r8, r8)
 8003718:	20000854 	.word	0x20000854
 800371c:	40004400 	.word	0x40004400

08003720 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003724:	4b16      	ldr	r3, [pc, #88]	; (8003780 <MX_USART3_UART_Init+0x60>)
 8003726:	4a17      	ldr	r2, [pc, #92]	; (8003784 <MX_USART3_UART_Init+0x64>)
 8003728:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800372a:	4b15      	ldr	r3, [pc, #84]	; (8003780 <MX_USART3_UART_Init+0x60>)
 800372c:	2296      	movs	r2, #150	; 0x96
 800372e:	0192      	lsls	r2, r2, #6
 8003730:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003732:	4b13      	ldr	r3, [pc, #76]	; (8003780 <MX_USART3_UART_Init+0x60>)
 8003734:	2200      	movs	r2, #0
 8003736:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003738:	4b11      	ldr	r3, [pc, #68]	; (8003780 <MX_USART3_UART_Init+0x60>)
 800373a:	2200      	movs	r2, #0
 800373c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800373e:	4b10      	ldr	r3, [pc, #64]	; (8003780 <MX_USART3_UART_Init+0x60>)
 8003740:	2200      	movs	r2, #0
 8003742:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003744:	4b0e      	ldr	r3, [pc, #56]	; (8003780 <MX_USART3_UART_Init+0x60>)
 8003746:	220c      	movs	r2, #12
 8003748:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800374a:	4b0d      	ldr	r3, [pc, #52]	; (8003780 <MX_USART3_UART_Init+0x60>)
 800374c:	2200      	movs	r2, #0
 800374e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003750:	4b0b      	ldr	r3, [pc, #44]	; (8003780 <MX_USART3_UART_Init+0x60>)
 8003752:	2200      	movs	r2, #0
 8003754:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003756:	4b0a      	ldr	r3, [pc, #40]	; (8003780 <MX_USART3_UART_Init+0x60>)
 8003758:	2200      	movs	r2, #0
 800375a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800375c:	4b08      	ldr	r3, [pc, #32]	; (8003780 <MX_USART3_UART_Init+0x60>)
 800375e:	2200      	movs	r2, #0
 8003760:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003762:	4b07      	ldr	r3, [pc, #28]	; (8003780 <MX_USART3_UART_Init+0x60>)
 8003764:	2200      	movs	r2, #0
 8003766:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003768:	4b05      	ldr	r3, [pc, #20]	; (8003780 <MX_USART3_UART_Init+0x60>)
 800376a:	0018      	movs	r0, r3
 800376c:	f001 ff62 	bl	8005634 <HAL_UART_Init>
 8003770:	1e03      	subs	r3, r0, #0
 8003772:	d001      	beq.n	8003778 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8003774:	f000 f906 	bl	8003984 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003778:	46c0      	nop			; (mov r8, r8)
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}
 800377e:	46c0      	nop			; (mov r8, r8)
 8003780:	200008e4 	.word	0x200008e4
 8003784:	40004800 	.word	0x40004800

08003788 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b082      	sub	sp, #8
 800378c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800378e:	4b0c      	ldr	r3, [pc, #48]	; (80037c0 <MX_DMA_Init+0x38>)
 8003790:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003792:	4b0b      	ldr	r3, [pc, #44]	; (80037c0 <MX_DMA_Init+0x38>)
 8003794:	2101      	movs	r1, #1
 8003796:	430a      	orrs	r2, r1
 8003798:	639a      	str	r2, [r3, #56]	; 0x38
 800379a:	4b09      	ldr	r3, [pc, #36]	; (80037c0 <MX_DMA_Init+0x38>)
 800379c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800379e:	2201      	movs	r2, #1
 80037a0:	4013      	ands	r3, r2
 80037a2:	607b      	str	r3, [r7, #4]
 80037a4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80037a6:	2200      	movs	r2, #0
 80037a8:	2100      	movs	r1, #0
 80037aa:	2009      	movs	r0, #9
 80037ac:	f000 fcd8 	bl	8004160 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80037b0:	2009      	movs	r0, #9
 80037b2:	f000 fcea 	bl	800418a <HAL_NVIC_EnableIRQ>

}
 80037b6:	46c0      	nop			; (mov r8, r8)
 80037b8:	46bd      	mov	sp, r7
 80037ba:	b002      	add	sp, #8
 80037bc:	bd80      	pop	{r7, pc}
 80037be:	46c0      	nop			; (mov r8, r8)
 80037c0:	40021000 	.word	0x40021000

080037c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80037c4:	b590      	push	{r4, r7, lr}
 80037c6:	b08b      	sub	sp, #44	; 0x2c
 80037c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037ca:	2414      	movs	r4, #20
 80037cc:	193b      	adds	r3, r7, r4
 80037ce:	0018      	movs	r0, r3
 80037d0:	2314      	movs	r3, #20
 80037d2:	001a      	movs	r2, r3
 80037d4:	2100      	movs	r1, #0
 80037d6:	f003 f891 	bl	80068fc <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80037da:	4b48      	ldr	r3, [pc, #288]	; (80038fc <MX_GPIO_Init+0x138>)
 80037dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80037de:	4b47      	ldr	r3, [pc, #284]	; (80038fc <MX_GPIO_Init+0x138>)
 80037e0:	2104      	movs	r1, #4
 80037e2:	430a      	orrs	r2, r1
 80037e4:	635a      	str	r2, [r3, #52]	; 0x34
 80037e6:	4b45      	ldr	r3, [pc, #276]	; (80038fc <MX_GPIO_Init+0x138>)
 80037e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037ea:	2204      	movs	r2, #4
 80037ec:	4013      	ands	r3, r2
 80037ee:	613b      	str	r3, [r7, #16]
 80037f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80037f2:	4b42      	ldr	r3, [pc, #264]	; (80038fc <MX_GPIO_Init+0x138>)
 80037f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80037f6:	4b41      	ldr	r3, [pc, #260]	; (80038fc <MX_GPIO_Init+0x138>)
 80037f8:	2120      	movs	r1, #32
 80037fa:	430a      	orrs	r2, r1
 80037fc:	635a      	str	r2, [r3, #52]	; 0x34
 80037fe:	4b3f      	ldr	r3, [pc, #252]	; (80038fc <MX_GPIO_Init+0x138>)
 8003800:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003802:	2220      	movs	r2, #32
 8003804:	4013      	ands	r3, r2
 8003806:	60fb      	str	r3, [r7, #12]
 8003808:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800380a:	4b3c      	ldr	r3, [pc, #240]	; (80038fc <MX_GPIO_Init+0x138>)
 800380c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800380e:	4b3b      	ldr	r3, [pc, #236]	; (80038fc <MX_GPIO_Init+0x138>)
 8003810:	2101      	movs	r1, #1
 8003812:	430a      	orrs	r2, r1
 8003814:	635a      	str	r2, [r3, #52]	; 0x34
 8003816:	4b39      	ldr	r3, [pc, #228]	; (80038fc <MX_GPIO_Init+0x138>)
 8003818:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800381a:	2201      	movs	r2, #1
 800381c:	4013      	ands	r3, r2
 800381e:	60bb      	str	r3, [r7, #8]
 8003820:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003822:	4b36      	ldr	r3, [pc, #216]	; (80038fc <MX_GPIO_Init+0x138>)
 8003824:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003826:	4b35      	ldr	r3, [pc, #212]	; (80038fc <MX_GPIO_Init+0x138>)
 8003828:	2102      	movs	r1, #2
 800382a:	430a      	orrs	r2, r1
 800382c:	635a      	str	r2, [r3, #52]	; 0x34
 800382e:	4b33      	ldr	r3, [pc, #204]	; (80038fc <MX_GPIO_Init+0x138>)
 8003830:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003832:	2202      	movs	r2, #2
 8003834:	4013      	ands	r3, r2
 8003836:	607b      	str	r3, [r7, #4]
 8003838:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_GREEN_Pin|GPIO_PIN_10, GPIO_PIN_RESET);
 800383a:	2384      	movs	r3, #132	; 0x84
 800383c:	00d9      	lsls	r1, r3, #3
 800383e:	23a0      	movs	r3, #160	; 0xa0
 8003840:	05db      	lsls	r3, r3, #23
 8003842:	2200      	movs	r2, #0
 8003844:	0018      	movs	r0, r3
 8003846:	f001 f873 	bl	8004930 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : RING_Pin */
  GPIO_InitStruct.Pin = RING_Pin;
 800384a:	193b      	adds	r3, r7, r4
 800384c:	2280      	movs	r2, #128	; 0x80
 800384e:	0152      	lsls	r2, r2, #5
 8003850:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003852:	193b      	adds	r3, r7, r4
 8003854:	2284      	movs	r2, #132	; 0x84
 8003856:	0392      	lsls	r2, r2, #14
 8003858:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800385a:	193b      	adds	r3, r7, r4
 800385c:	2200      	movs	r2, #0
 800385e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(RING_GPIO_Port, &GPIO_InitStruct);
 8003860:	193b      	adds	r3, r7, r4
 8003862:	4a27      	ldr	r2, [pc, #156]	; (8003900 <MX_GPIO_Init+0x13c>)
 8003864:	0019      	movs	r1, r3
 8003866:	0010      	movs	r0, r2
 8003868:	f000 fefe 	bl	8004668 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800386c:	0021      	movs	r1, r4
 800386e:	187b      	adds	r3, r7, r1
 8003870:	2280      	movs	r2, #128	; 0x80
 8003872:	0192      	lsls	r2, r2, #6
 8003874:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003876:	187b      	adds	r3, r7, r1
 8003878:	2288      	movs	r2, #136	; 0x88
 800387a:	0352      	lsls	r2, r2, #13
 800387c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800387e:	000c      	movs	r4, r1
 8003880:	193b      	adds	r3, r7, r4
 8003882:	2200      	movs	r2, #0
 8003884:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003886:	193b      	adds	r3, r7, r4
 8003888:	4a1d      	ldr	r2, [pc, #116]	; (8003900 <MX_GPIO_Init+0x13c>)
 800388a:	0019      	movs	r1, r3
 800388c:	0010      	movs	r0, r2
 800388e:	f000 feeb 	bl	8004668 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8003892:	193b      	adds	r3, r7, r4
 8003894:	2220      	movs	r2, #32
 8003896:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003898:	193b      	adds	r3, r7, r4
 800389a:	2201      	movs	r2, #1
 800389c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800389e:	193b      	adds	r3, r7, r4
 80038a0:	2200      	movs	r2, #0
 80038a2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80038a4:	193b      	adds	r3, r7, r4
 80038a6:	2202      	movs	r2, #2
 80038a8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 80038aa:	193a      	adds	r2, r7, r4
 80038ac:	23a0      	movs	r3, #160	; 0xa0
 80038ae:	05db      	lsls	r3, r3, #23
 80038b0:	0011      	movs	r1, r2
 80038b2:	0018      	movs	r0, r3
 80038b4:	f000 fed8 	bl	8004668 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80038b8:	0021      	movs	r1, r4
 80038ba:	187b      	adds	r3, r7, r1
 80038bc:	2280      	movs	r2, #128	; 0x80
 80038be:	00d2      	lsls	r2, r2, #3
 80038c0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80038c2:	187b      	adds	r3, r7, r1
 80038c4:	2201      	movs	r2, #1
 80038c6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80038c8:	187b      	adds	r3, r7, r1
 80038ca:	2202      	movs	r2, #2
 80038cc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80038ce:	187b      	adds	r3, r7, r1
 80038d0:	2202      	movs	r2, #2
 80038d2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038d4:	187a      	adds	r2, r7, r1
 80038d6:	23a0      	movs	r3, #160	; 0xa0
 80038d8:	05db      	lsls	r3, r3, #23
 80038da:	0011      	movs	r1, r2
 80038dc:	0018      	movs	r0, r3
 80038de:	f000 fec3 	bl	8004668 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 80038e2:	2200      	movs	r2, #0
 80038e4:	2100      	movs	r1, #0
 80038e6:	2007      	movs	r0, #7
 80038e8:	f000 fc3a 	bl	8004160 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80038ec:	2007      	movs	r0, #7
 80038ee:	f000 fc4c 	bl	800418a <HAL_NVIC_EnableIRQ>

}
 80038f2:	46c0      	nop			; (mov r8, r8)
 80038f4:	46bd      	mov	sp, r7
 80038f6:	b00b      	add	sp, #44	; 0x2c
 80038f8:	bd90      	pop	{r4, r7, pc}
 80038fa:	46c0      	nop			; (mov r8, r8)
 80038fc:	40021000 	.word	0x40021000
 8003900:	50000800 	.word	0x50000800

08003904 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b082      	sub	sp, #8
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
	    HAL_UART_Transmit(&huart2, (uint8_t*) debug_str, strlen(debug_str), 100);
	    HAL_UART_Transmit(&huart2, UART3_rxBuffer, sizeof(debug_str), 1000);
	//}
	 * */

}
 800390c:	46c0      	nop			; (mov r8, r8)
 800390e:	46bd      	mov	sp, r7
 8003910:	b002      	add	sp, #8
 8003912:	bd80      	pop	{r7, pc}

08003914 <HAL_GPIO_EXTI_Rising_Callback>:


void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b082      	sub	sp, #8
 8003918:	af00      	add	r7, sp, #0
 800391a:	0002      	movs	r2, r0
 800391c:	1dbb      	adds	r3, r7, #6
 800391e:	801a      	strh	r2, [r3, #0]

	if(GPIO_Pin == GPIO_PIN_13) {
 8003920:	1dbb      	adds	r3, r7, #6
 8003922:	881a      	ldrh	r2, [r3, #0]
 8003924:	2380      	movs	r3, #128	; 0x80
 8003926:	019b      	lsls	r3, r3, #6
 8003928:	429a      	cmp	r2, r3
 800392a:	d000      	beq.n	800392e <HAL_GPIO_EXTI_Rising_Callback+0x1a>
		//set flag on
		flag = 1;
	*/

  } else {
      __NOP();
 800392c:	46c0      	nop			; (mov r8, r8)
  }
}
 800392e:	46c0      	nop			; (mov r8, r8)
 8003930:	46bd      	mov	sp, r7
 8003932:	b002      	add	sp, #8
 8003934:	bd80      	pop	{r7, pc}
	...

08003938 <HAL_GPIO_EXTI_Falling_Callback>:

void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b082      	sub	sp, #8
 800393c:	af00      	add	r7, sp, #0
 800393e:	0002      	movs	r2, r0
 8003940:	1dbb      	adds	r3, r7, #6
 8003942:	801a      	strh	r2, [r3, #0]
  if(GPIO_Pin == GPIO_PIN_12) {
 8003944:	1dbb      	adds	r3, r7, #6
 8003946:	881a      	ldrh	r2, [r3, #0]
 8003948:	2380      	movs	r3, #128	; 0x80
 800394a:	015b      	lsls	r3, r3, #5
 800394c:	429a      	cmp	r2, r3
 800394e:	d112      	bne.n	8003976 <HAL_GPIO_EXTI_Falling_Callback+0x3e>

		//switch led on
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8003950:	23a0      	movs	r3, #160	; 0xa0
 8003952:	05db      	lsls	r3, r3, #23
 8003954:	2201      	movs	r2, #1
 8003956:	2120      	movs	r1, #32
 8003958:	0018      	movs	r0, r3
 800395a:	f000 ffe9 	bl	8004930 <HAL_GPIO_WritePin>
		//Wait 100 ms
		//HAL_Delay(100);
		//switch led off
		//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
		//turn gps module on
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 800395e:	2380      	movs	r3, #128	; 0x80
 8003960:	00d9      	lsls	r1, r3, #3
 8003962:	23a0      	movs	r3, #160	; 0xa0
 8003964:	05db      	lsls	r3, r3, #23
 8003966:	2201      	movs	r2, #1
 8003968:	0018      	movs	r0, r3
 800396a:	f000 ffe1 	bl	8004930 <HAL_GPIO_WritePin>

		//set flag on
		flag = 1;
 800396e:	4b04      	ldr	r3, [pc, #16]	; (8003980 <HAL_GPIO_EXTI_Falling_Callback+0x48>)
 8003970:	2201      	movs	r2, #1
 8003972:	601a      	str	r2, [r3, #0]


  } else {
      __NOP();
  }
}
 8003974:	e000      	b.n	8003978 <HAL_GPIO_EXTI_Falling_Callback+0x40>
      __NOP();
 8003976:	46c0      	nop			; (mov r8, r8)
}
 8003978:	46c0      	nop			; (mov r8, r8)
 800397a:	46bd      	mov	sp, r7
 800397c:	b002      	add	sp, #8
 800397e:	bd80      	pop	{r7, pc}
 8003980:	200007c0 	.word	0x200007c0

08003984 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003988:	b672      	cpsid	i
}
 800398a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800398c:	e7fe      	b.n	800398c <Error_Handler+0x8>
	...

08003990 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b082      	sub	sp, #8
 8003994:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003996:	4b11      	ldr	r3, [pc, #68]	; (80039dc <HAL_MspInit+0x4c>)
 8003998:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800399a:	4b10      	ldr	r3, [pc, #64]	; (80039dc <HAL_MspInit+0x4c>)
 800399c:	2101      	movs	r1, #1
 800399e:	430a      	orrs	r2, r1
 80039a0:	641a      	str	r2, [r3, #64]	; 0x40
 80039a2:	4b0e      	ldr	r3, [pc, #56]	; (80039dc <HAL_MspInit+0x4c>)
 80039a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a6:	2201      	movs	r2, #1
 80039a8:	4013      	ands	r3, r2
 80039aa:	607b      	str	r3, [r7, #4]
 80039ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80039ae:	4b0b      	ldr	r3, [pc, #44]	; (80039dc <HAL_MspInit+0x4c>)
 80039b0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80039b2:	4b0a      	ldr	r3, [pc, #40]	; (80039dc <HAL_MspInit+0x4c>)
 80039b4:	2180      	movs	r1, #128	; 0x80
 80039b6:	0549      	lsls	r1, r1, #21
 80039b8:	430a      	orrs	r2, r1
 80039ba:	63da      	str	r2, [r3, #60]	; 0x3c
 80039bc:	4b07      	ldr	r3, [pc, #28]	; (80039dc <HAL_MspInit+0x4c>)
 80039be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80039c0:	2380      	movs	r3, #128	; 0x80
 80039c2:	055b      	lsls	r3, r3, #21
 80039c4:	4013      	ands	r3, r2
 80039c6:	603b      	str	r3, [r7, #0]
 80039c8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 80039ca:	23c0      	movs	r3, #192	; 0xc0
 80039cc:	00db      	lsls	r3, r3, #3
 80039ce:	0018      	movs	r0, r3
 80039d0:	f000 fb04 	bl	8003fdc <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80039d4:	46c0      	nop			; (mov r8, r8)
 80039d6:	46bd      	mov	sp, r7
 80039d8:	b002      	add	sp, #8
 80039da:	bd80      	pop	{r7, pc}
 80039dc:	40021000 	.word	0x40021000

080039e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80039e0:	b590      	push	{r4, r7, lr}
 80039e2:	b097      	sub	sp, #92	; 0x5c
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039e8:	2344      	movs	r3, #68	; 0x44
 80039ea:	18fb      	adds	r3, r7, r3
 80039ec:	0018      	movs	r0, r3
 80039ee:	2314      	movs	r3, #20
 80039f0:	001a      	movs	r2, r3
 80039f2:	2100      	movs	r1, #0
 80039f4:	f002 ff82 	bl	80068fc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80039f8:	2428      	movs	r4, #40	; 0x28
 80039fa:	193b      	adds	r3, r7, r4
 80039fc:	0018      	movs	r0, r3
 80039fe:	231c      	movs	r3, #28
 8003a00:	001a      	movs	r2, r3
 8003a02:	2100      	movs	r1, #0
 8003a04:	f002 ff7a 	bl	80068fc <memset>
  if(huart->Instance==USART1)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a86      	ldr	r2, [pc, #536]	; (8003c28 <HAL_UART_MspInit+0x248>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d167      	bne.n	8003ae2 <HAL_UART_MspInit+0x102>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003a12:	193b      	adds	r3, r7, r4
 8003a14:	2201      	movs	r2, #1
 8003a16:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8003a18:	193b      	adds	r3, r7, r4
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003a1e:	193b      	adds	r3, r7, r4
 8003a20:	0018      	movs	r0, r3
 8003a22:	f001 fcd3 	bl	80053cc <HAL_RCCEx_PeriphCLKConfig>
 8003a26:	1e03      	subs	r3, r0, #0
 8003a28:	d001      	beq.n	8003a2e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8003a2a:	f7ff ffab 	bl	8003984 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003a2e:	4b7f      	ldr	r3, [pc, #508]	; (8003c2c <HAL_UART_MspInit+0x24c>)
 8003a30:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a32:	4b7e      	ldr	r3, [pc, #504]	; (8003c2c <HAL_UART_MspInit+0x24c>)
 8003a34:	2180      	movs	r1, #128	; 0x80
 8003a36:	01c9      	lsls	r1, r1, #7
 8003a38:	430a      	orrs	r2, r1
 8003a3a:	641a      	str	r2, [r3, #64]	; 0x40
 8003a3c:	4b7b      	ldr	r3, [pc, #492]	; (8003c2c <HAL_UART_MspInit+0x24c>)
 8003a3e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a40:	2380      	movs	r3, #128	; 0x80
 8003a42:	01db      	lsls	r3, r3, #7
 8003a44:	4013      	ands	r3, r2
 8003a46:	627b      	str	r3, [r7, #36]	; 0x24
 8003a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a4a:	4b78      	ldr	r3, [pc, #480]	; (8003c2c <HAL_UART_MspInit+0x24c>)
 8003a4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a4e:	4b77      	ldr	r3, [pc, #476]	; (8003c2c <HAL_UART_MspInit+0x24c>)
 8003a50:	2104      	movs	r1, #4
 8003a52:	430a      	orrs	r2, r1
 8003a54:	635a      	str	r2, [r3, #52]	; 0x34
 8003a56:	4b75      	ldr	r3, [pc, #468]	; (8003c2c <HAL_UART_MspInit+0x24c>)
 8003a58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a5a:	2204      	movs	r2, #4
 8003a5c:	4013      	ands	r3, r2
 8003a5e:	623b      	str	r3, [r7, #32]
 8003a60:	6a3b      	ldr	r3, [r7, #32]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003a62:	2144      	movs	r1, #68	; 0x44
 8003a64:	187b      	adds	r3, r7, r1
 8003a66:	2230      	movs	r2, #48	; 0x30
 8003a68:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a6a:	187b      	adds	r3, r7, r1
 8003a6c:	2202      	movs	r2, #2
 8003a6e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a70:	187b      	adds	r3, r7, r1
 8003a72:	2200      	movs	r2, #0
 8003a74:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a76:	187b      	adds	r3, r7, r1
 8003a78:	2200      	movs	r2, #0
 8003a7a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8003a7c:	187b      	adds	r3, r7, r1
 8003a7e:	2201      	movs	r2, #1
 8003a80:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a82:	187b      	adds	r3, r7, r1
 8003a84:	4a6a      	ldr	r2, [pc, #424]	; (8003c30 <HAL_UART_MspInit+0x250>)
 8003a86:	0019      	movs	r1, r3
 8003a88:	0010      	movs	r0, r2
 8003a8a:	f000 fded 	bl	8004668 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 8003a8e:	4b69      	ldr	r3, [pc, #420]	; (8003c34 <HAL_UART_MspInit+0x254>)
 8003a90:	4a69      	ldr	r2, [pc, #420]	; (8003c38 <HAL_UART_MspInit+0x258>)
 8003a92:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8003a94:	4b67      	ldr	r3, [pc, #412]	; (8003c34 <HAL_UART_MspInit+0x254>)
 8003a96:	2232      	movs	r2, #50	; 0x32
 8003a98:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003a9a:	4b66      	ldr	r3, [pc, #408]	; (8003c34 <HAL_UART_MspInit+0x254>)
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003aa0:	4b64      	ldr	r3, [pc, #400]	; (8003c34 <HAL_UART_MspInit+0x254>)
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003aa6:	4b63      	ldr	r3, [pc, #396]	; (8003c34 <HAL_UART_MspInit+0x254>)
 8003aa8:	2280      	movs	r2, #128	; 0x80
 8003aaa:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003aac:	4b61      	ldr	r3, [pc, #388]	; (8003c34 <HAL_UART_MspInit+0x254>)
 8003aae:	2200      	movs	r2, #0
 8003ab0:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003ab2:	4b60      	ldr	r3, [pc, #384]	; (8003c34 <HAL_UART_MspInit+0x254>)
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8003ab8:	4b5e      	ldr	r3, [pc, #376]	; (8003c34 <HAL_UART_MspInit+0x254>)
 8003aba:	2220      	movs	r2, #32
 8003abc:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003abe:	4b5d      	ldr	r3, [pc, #372]	; (8003c34 <HAL_UART_MspInit+0x254>)
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8003ac4:	4b5b      	ldr	r3, [pc, #364]	; (8003c34 <HAL_UART_MspInit+0x254>)
 8003ac6:	0018      	movs	r0, r3
 8003ac8:	f000 fb7c 	bl	80041c4 <HAL_DMA_Init>
 8003acc:	1e03      	subs	r3, r0, #0
 8003ace:	d001      	beq.n	8003ad4 <HAL_UART_MspInit+0xf4>
    {
      Error_Handler();
 8003ad0:	f7ff ff58 	bl	8003984 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	4a57      	ldr	r2, [pc, #348]	; (8003c34 <HAL_UART_MspInit+0x254>)
 8003ad8:	67da      	str	r2, [r3, #124]	; 0x7c
 8003ada:	4b56      	ldr	r3, [pc, #344]	; (8003c34 <HAL_UART_MspInit+0x254>)
 8003adc:	687a      	ldr	r2, [r7, #4]
 8003ade:	629a      	str	r2, [r3, #40]	; 0x28
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003ae0:	e09e      	b.n	8003c20 <HAL_UART_MspInit+0x240>
  else if(huart->Instance==USART2)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a55      	ldr	r2, [pc, #340]	; (8003c3c <HAL_UART_MspInit+0x25c>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d140      	bne.n	8003b6e <HAL_UART_MspInit+0x18e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003aec:	2128      	movs	r1, #40	; 0x28
 8003aee:	187b      	adds	r3, r7, r1
 8003af0:	2202      	movs	r2, #2
 8003af2:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003af4:	187b      	adds	r3, r7, r1
 8003af6:	2200      	movs	r2, #0
 8003af8:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003afa:	187b      	adds	r3, r7, r1
 8003afc:	0018      	movs	r0, r3
 8003afe:	f001 fc65 	bl	80053cc <HAL_RCCEx_PeriphCLKConfig>
 8003b02:	1e03      	subs	r3, r0, #0
 8003b04:	d001      	beq.n	8003b0a <HAL_UART_MspInit+0x12a>
      Error_Handler();
 8003b06:	f7ff ff3d 	bl	8003984 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003b0a:	4b48      	ldr	r3, [pc, #288]	; (8003c2c <HAL_UART_MspInit+0x24c>)
 8003b0c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b0e:	4b47      	ldr	r3, [pc, #284]	; (8003c2c <HAL_UART_MspInit+0x24c>)
 8003b10:	2180      	movs	r1, #128	; 0x80
 8003b12:	0289      	lsls	r1, r1, #10
 8003b14:	430a      	orrs	r2, r1
 8003b16:	63da      	str	r2, [r3, #60]	; 0x3c
 8003b18:	4b44      	ldr	r3, [pc, #272]	; (8003c2c <HAL_UART_MspInit+0x24c>)
 8003b1a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b1c:	2380      	movs	r3, #128	; 0x80
 8003b1e:	029b      	lsls	r3, r3, #10
 8003b20:	4013      	ands	r3, r2
 8003b22:	61fb      	str	r3, [r7, #28]
 8003b24:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b26:	4b41      	ldr	r3, [pc, #260]	; (8003c2c <HAL_UART_MspInit+0x24c>)
 8003b28:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b2a:	4b40      	ldr	r3, [pc, #256]	; (8003c2c <HAL_UART_MspInit+0x24c>)
 8003b2c:	2101      	movs	r1, #1
 8003b2e:	430a      	orrs	r2, r1
 8003b30:	635a      	str	r2, [r3, #52]	; 0x34
 8003b32:	4b3e      	ldr	r3, [pc, #248]	; (8003c2c <HAL_UART_MspInit+0x24c>)
 8003b34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b36:	2201      	movs	r2, #1
 8003b38:	4013      	ands	r3, r2
 8003b3a:	61bb      	str	r3, [r7, #24]
 8003b3c:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003b3e:	2144      	movs	r1, #68	; 0x44
 8003b40:	187b      	adds	r3, r7, r1
 8003b42:	220c      	movs	r2, #12
 8003b44:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b46:	187b      	adds	r3, r7, r1
 8003b48:	2202      	movs	r2, #2
 8003b4a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003b4c:	187b      	adds	r3, r7, r1
 8003b4e:	2201      	movs	r2, #1
 8003b50:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b52:	187b      	adds	r3, r7, r1
 8003b54:	2200      	movs	r2, #0
 8003b56:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8003b58:	187b      	adds	r3, r7, r1
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b5e:	187a      	adds	r2, r7, r1
 8003b60:	23a0      	movs	r3, #160	; 0xa0
 8003b62:	05db      	lsls	r3, r3, #23
 8003b64:	0011      	movs	r1, r2
 8003b66:	0018      	movs	r0, r3
 8003b68:	f000 fd7e 	bl	8004668 <HAL_GPIO_Init>
}
 8003b6c:	e058      	b.n	8003c20 <HAL_UART_MspInit+0x240>
  else if(huart->Instance==USART3)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a33      	ldr	r2, [pc, #204]	; (8003c40 <HAL_UART_MspInit+0x260>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d153      	bne.n	8003c20 <HAL_UART_MspInit+0x240>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003b78:	4b2c      	ldr	r3, [pc, #176]	; (8003c2c <HAL_UART_MspInit+0x24c>)
 8003b7a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b7c:	4b2b      	ldr	r3, [pc, #172]	; (8003c2c <HAL_UART_MspInit+0x24c>)
 8003b7e:	2180      	movs	r1, #128	; 0x80
 8003b80:	02c9      	lsls	r1, r1, #11
 8003b82:	430a      	orrs	r2, r1
 8003b84:	63da      	str	r2, [r3, #60]	; 0x3c
 8003b86:	4b29      	ldr	r3, [pc, #164]	; (8003c2c <HAL_UART_MspInit+0x24c>)
 8003b88:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b8a:	2380      	movs	r3, #128	; 0x80
 8003b8c:	02db      	lsls	r3, r3, #11
 8003b8e:	4013      	ands	r3, r2
 8003b90:	617b      	str	r3, [r7, #20]
 8003b92:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b94:	4b25      	ldr	r3, [pc, #148]	; (8003c2c <HAL_UART_MspInit+0x24c>)
 8003b96:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b98:	4b24      	ldr	r3, [pc, #144]	; (8003c2c <HAL_UART_MspInit+0x24c>)
 8003b9a:	2104      	movs	r1, #4
 8003b9c:	430a      	orrs	r2, r1
 8003b9e:	635a      	str	r2, [r3, #52]	; 0x34
 8003ba0:	4b22      	ldr	r3, [pc, #136]	; (8003c2c <HAL_UART_MspInit+0x24c>)
 8003ba2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ba4:	2204      	movs	r2, #4
 8003ba6:	4013      	ands	r3, r2
 8003ba8:	613b      	str	r3, [r7, #16]
 8003baa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003bac:	4b1f      	ldr	r3, [pc, #124]	; (8003c2c <HAL_UART_MspInit+0x24c>)
 8003bae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003bb0:	4b1e      	ldr	r3, [pc, #120]	; (8003c2c <HAL_UART_MspInit+0x24c>)
 8003bb2:	2102      	movs	r1, #2
 8003bb4:	430a      	orrs	r2, r1
 8003bb6:	635a      	str	r2, [r3, #52]	; 0x34
 8003bb8:	4b1c      	ldr	r3, [pc, #112]	; (8003c2c <HAL_UART_MspInit+0x24c>)
 8003bba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bbc:	2202      	movs	r2, #2
 8003bbe:	4013      	ands	r3, r2
 8003bc0:	60fb      	str	r3, [r7, #12]
 8003bc2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8003bc4:	2144      	movs	r1, #68	; 0x44
 8003bc6:	187b      	adds	r3, r7, r1
 8003bc8:	2280      	movs	r2, #128	; 0x80
 8003bca:	0112      	lsls	r2, r2, #4
 8003bcc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bce:	000c      	movs	r4, r1
 8003bd0:	193b      	adds	r3, r7, r4
 8003bd2:	2202      	movs	r2, #2
 8003bd4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bd6:	193b      	adds	r3, r7, r4
 8003bd8:	2200      	movs	r2, #0
 8003bda:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bdc:	193b      	adds	r3, r7, r4
 8003bde:	2200      	movs	r2, #0
 8003be0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART3;
 8003be2:	193b      	adds	r3, r7, r4
 8003be4:	2200      	movs	r2, #0
 8003be6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003be8:	193b      	adds	r3, r7, r4
 8003bea:	4a11      	ldr	r2, [pc, #68]	; (8003c30 <HAL_UART_MspInit+0x250>)
 8003bec:	0019      	movs	r1, r3
 8003bee:	0010      	movs	r0, r2
 8003bf0:	f000 fd3a 	bl	8004668 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003bf4:	0021      	movs	r1, r4
 8003bf6:	187b      	adds	r3, r7, r1
 8003bf8:	2204      	movs	r2, #4
 8003bfa:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bfc:	187b      	adds	r3, r7, r1
 8003bfe:	2202      	movs	r2, #2
 8003c00:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c02:	187b      	adds	r3, r7, r1
 8003c04:	2200      	movs	r2, #0
 8003c06:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c08:	187b      	adds	r3, r7, r1
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8003c0e:	187b      	adds	r3, r7, r1
 8003c10:	2204      	movs	r2, #4
 8003c12:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c14:	187b      	adds	r3, r7, r1
 8003c16:	4a0b      	ldr	r2, [pc, #44]	; (8003c44 <HAL_UART_MspInit+0x264>)
 8003c18:	0019      	movs	r1, r3
 8003c1a:	0010      	movs	r0, r2
 8003c1c:	f000 fd24 	bl	8004668 <HAL_GPIO_Init>
}
 8003c20:	46c0      	nop			; (mov r8, r8)
 8003c22:	46bd      	mov	sp, r7
 8003c24:	b017      	add	sp, #92	; 0x5c
 8003c26:	bd90      	pop	{r4, r7, pc}
 8003c28:	40013800 	.word	0x40013800
 8003c2c:	40021000 	.word	0x40021000
 8003c30:	50000800 	.word	0x50000800
 8003c34:	20000974 	.word	0x20000974
 8003c38:	40020008 	.word	0x40020008
 8003c3c:	40004400 	.word	0x40004400
 8003c40:	40004800 	.word	0x40004800
 8003c44:	50000400 	.word	0x50000400

08003c48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003c4c:	e7fe      	b.n	8003c4c <NMI_Handler+0x4>

08003c4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003c4e:	b580      	push	{r7, lr}
 8003c50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003c52:	e7fe      	b.n	8003c52 <HardFault_Handler+0x4>

08003c54 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003c58:	46c0      	nop			; (mov r8, r8)
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bd80      	pop	{r7, pc}

08003c5e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003c5e:	b580      	push	{r7, lr}
 8003c60:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003c62:	46c0      	nop			; (mov r8, r8)
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bd80      	pop	{r7, pc}

08003c68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003c6c:	f000 f976 	bl	8003f5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003c70:	46c0      	nop			; (mov r8, r8)
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}

08003c76 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8003c76:	b580      	push	{r7, lr}
 8003c78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RING_Pin);
 8003c7a:	2380      	movs	r3, #128	; 0x80
 8003c7c:	015b      	lsls	r3, r3, #5
 8003c7e:	0018      	movs	r0, r3
 8003c80:	f000 fe74 	bl	800496c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8003c84:	2380      	movs	r3, #128	; 0x80
 8003c86:	019b      	lsls	r3, r3, #6
 8003c88:	0018      	movs	r0, r3
 8003c8a:	f000 fe6f 	bl	800496c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8003c8e:	46c0      	nop			; (mov r8, r8)
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bd80      	pop	{r7, pc}

08003c94 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8003c98:	4b03      	ldr	r3, [pc, #12]	; (8003ca8 <DMA1_Channel1_IRQHandler+0x14>)
 8003c9a:	0018      	movs	r0, r3
 8003c9c:	f000 fba2 	bl	80043e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003ca0:	46c0      	nop			; (mov r8, r8)
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}
 8003ca6:	46c0      	nop			; (mov r8, r8)
 8003ca8:	20000974 	.word	0x20000974

08003cac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	af00      	add	r7, sp, #0
	return 1;
 8003cb0:	2301      	movs	r3, #1
}
 8003cb2:	0018      	movs	r0, r3
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bd80      	pop	{r7, pc}

08003cb8 <_kill>:

int _kill(int pid, int sig)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b082      	sub	sp, #8
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
 8003cc0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003cc2:	f002 fdf1 	bl	80068a8 <__errno>
 8003cc6:	0003      	movs	r3, r0
 8003cc8:	2216      	movs	r2, #22
 8003cca:	601a      	str	r2, [r3, #0]
	return -1;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	425b      	negs	r3, r3
}
 8003cd0:	0018      	movs	r0, r3
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	b002      	add	sp, #8
 8003cd6:	bd80      	pop	{r7, pc}

08003cd8 <_exit>:

void _exit (int status)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b082      	sub	sp, #8
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	425a      	negs	r2, r3
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	0011      	movs	r1, r2
 8003ce8:	0018      	movs	r0, r3
 8003cea:	f7ff ffe5 	bl	8003cb8 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003cee:	e7fe      	b.n	8003cee <_exit+0x16>

08003cf0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b086      	sub	sp, #24
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	60f8      	str	r0, [r7, #12]
 8003cf8:	60b9      	str	r1, [r7, #8]
 8003cfa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	617b      	str	r3, [r7, #20]
 8003d00:	e00a      	b.n	8003d18 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003d02:	e000      	b.n	8003d06 <_read+0x16>
 8003d04:	bf00      	nop
 8003d06:	0001      	movs	r1, r0
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	1c5a      	adds	r2, r3, #1
 8003d0c:	60ba      	str	r2, [r7, #8]
 8003d0e:	b2ca      	uxtb	r2, r1
 8003d10:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	3301      	adds	r3, #1
 8003d16:	617b      	str	r3, [r7, #20]
 8003d18:	697a      	ldr	r2, [r7, #20]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	429a      	cmp	r2, r3
 8003d1e:	dbf0      	blt.n	8003d02 <_read+0x12>
	}

return len;
 8003d20:	687b      	ldr	r3, [r7, #4]
}
 8003d22:	0018      	movs	r0, r3
 8003d24:	46bd      	mov	sp, r7
 8003d26:	b006      	add	sp, #24
 8003d28:	bd80      	pop	{r7, pc}

08003d2a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003d2a:	b580      	push	{r7, lr}
 8003d2c:	b086      	sub	sp, #24
 8003d2e:	af00      	add	r7, sp, #0
 8003d30:	60f8      	str	r0, [r7, #12]
 8003d32:	60b9      	str	r1, [r7, #8]
 8003d34:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d36:	2300      	movs	r3, #0
 8003d38:	617b      	str	r3, [r7, #20]
 8003d3a:	e009      	b.n	8003d50 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	1c5a      	adds	r2, r3, #1
 8003d40:	60ba      	str	r2, [r7, #8]
 8003d42:	781b      	ldrb	r3, [r3, #0]
 8003d44:	0018      	movs	r0, r3
 8003d46:	e000      	b.n	8003d4a <_write+0x20>
 8003d48:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d4a:	697b      	ldr	r3, [r7, #20]
 8003d4c:	3301      	adds	r3, #1
 8003d4e:	617b      	str	r3, [r7, #20]
 8003d50:	697a      	ldr	r2, [r7, #20]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	429a      	cmp	r2, r3
 8003d56:	dbf1      	blt.n	8003d3c <_write+0x12>
	}
	return len;
 8003d58:	687b      	ldr	r3, [r7, #4]
}
 8003d5a:	0018      	movs	r0, r3
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	b006      	add	sp, #24
 8003d60:	bd80      	pop	{r7, pc}

08003d62 <_close>:

int _close(int file)
{
 8003d62:	b580      	push	{r7, lr}
 8003d64:	b082      	sub	sp, #8
 8003d66:	af00      	add	r7, sp, #0
 8003d68:	6078      	str	r0, [r7, #4]
	return -1;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	425b      	negs	r3, r3
}
 8003d6e:	0018      	movs	r0, r3
 8003d70:	46bd      	mov	sp, r7
 8003d72:	b002      	add	sp, #8
 8003d74:	bd80      	pop	{r7, pc}

08003d76 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003d76:	b580      	push	{r7, lr}
 8003d78:	b082      	sub	sp, #8
 8003d7a:	af00      	add	r7, sp, #0
 8003d7c:	6078      	str	r0, [r7, #4]
 8003d7e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	2280      	movs	r2, #128	; 0x80
 8003d84:	0192      	lsls	r2, r2, #6
 8003d86:	605a      	str	r2, [r3, #4]
	return 0;
 8003d88:	2300      	movs	r3, #0
}
 8003d8a:	0018      	movs	r0, r3
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	b002      	add	sp, #8
 8003d90:	bd80      	pop	{r7, pc}

08003d92 <_isatty>:

int _isatty(int file)
{
 8003d92:	b580      	push	{r7, lr}
 8003d94:	b082      	sub	sp, #8
 8003d96:	af00      	add	r7, sp, #0
 8003d98:	6078      	str	r0, [r7, #4]
	return 1;
 8003d9a:	2301      	movs	r3, #1
}
 8003d9c:	0018      	movs	r0, r3
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	b002      	add	sp, #8
 8003da2:	bd80      	pop	{r7, pc}

08003da4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b084      	sub	sp, #16
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	60f8      	str	r0, [r7, #12]
 8003dac:	60b9      	str	r1, [r7, #8]
 8003dae:	607a      	str	r2, [r7, #4]
	return 0;
 8003db0:	2300      	movs	r3, #0
}
 8003db2:	0018      	movs	r0, r3
 8003db4:	46bd      	mov	sp, r7
 8003db6:	b004      	add	sp, #16
 8003db8:	bd80      	pop	{r7, pc}
	...

08003dbc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b086      	sub	sp, #24
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003dc4:	4a14      	ldr	r2, [pc, #80]	; (8003e18 <_sbrk+0x5c>)
 8003dc6:	4b15      	ldr	r3, [pc, #84]	; (8003e1c <_sbrk+0x60>)
 8003dc8:	1ad3      	subs	r3, r2, r3
 8003dca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003dd0:	4b13      	ldr	r3, [pc, #76]	; (8003e20 <_sbrk+0x64>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d102      	bne.n	8003dde <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003dd8:	4b11      	ldr	r3, [pc, #68]	; (8003e20 <_sbrk+0x64>)
 8003dda:	4a12      	ldr	r2, [pc, #72]	; (8003e24 <_sbrk+0x68>)
 8003ddc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003dde:	4b10      	ldr	r3, [pc, #64]	; (8003e20 <_sbrk+0x64>)
 8003de0:	681a      	ldr	r2, [r3, #0]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	18d3      	adds	r3, r2, r3
 8003de6:	693a      	ldr	r2, [r7, #16]
 8003de8:	429a      	cmp	r2, r3
 8003dea:	d207      	bcs.n	8003dfc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003dec:	f002 fd5c 	bl	80068a8 <__errno>
 8003df0:	0003      	movs	r3, r0
 8003df2:	220c      	movs	r2, #12
 8003df4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003df6:	2301      	movs	r3, #1
 8003df8:	425b      	negs	r3, r3
 8003dfa:	e009      	b.n	8003e10 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003dfc:	4b08      	ldr	r3, [pc, #32]	; (8003e20 <_sbrk+0x64>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003e02:	4b07      	ldr	r3, [pc, #28]	; (8003e20 <_sbrk+0x64>)
 8003e04:	681a      	ldr	r2, [r3, #0]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	18d2      	adds	r2, r2, r3
 8003e0a:	4b05      	ldr	r3, [pc, #20]	; (8003e20 <_sbrk+0x64>)
 8003e0c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
}
 8003e10:	0018      	movs	r0, r3
 8003e12:	46bd      	mov	sp, r7
 8003e14:	b006      	add	sp, #24
 8003e16:	bd80      	pop	{r7, pc}
 8003e18:	20009000 	.word	0x20009000
 8003e1c:	00000400 	.word	0x00000400
 8003e20:	200009d0 	.word	0x200009d0
 8003e24:	200009e8 	.word	0x200009e8

08003e28 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003e2c:	46c0      	nop			; (mov r8, r8)
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd80      	pop	{r7, pc}
	...

08003e34 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003e34:	480d      	ldr	r0, [pc, #52]	; (8003e6c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003e36:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003e38:	f7ff fff6 	bl	8003e28 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003e3c:	480c      	ldr	r0, [pc, #48]	; (8003e70 <LoopForever+0x6>)
  ldr r1, =_edata
 8003e3e:	490d      	ldr	r1, [pc, #52]	; (8003e74 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003e40:	4a0d      	ldr	r2, [pc, #52]	; (8003e78 <LoopForever+0xe>)
  movs r3, #0
 8003e42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003e44:	e002      	b.n	8003e4c <LoopCopyDataInit>

08003e46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003e46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003e48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003e4a:	3304      	adds	r3, #4

08003e4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003e4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003e4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003e50:	d3f9      	bcc.n	8003e46 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003e52:	4a0a      	ldr	r2, [pc, #40]	; (8003e7c <LoopForever+0x12>)
  ldr r4, =_ebss
 8003e54:	4c0a      	ldr	r4, [pc, #40]	; (8003e80 <LoopForever+0x16>)
  movs r3, #0
 8003e56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003e58:	e001      	b.n	8003e5e <LoopFillZerobss>

08003e5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003e5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003e5c:	3204      	adds	r2, #4

08003e5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003e5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003e60:	d3fb      	bcc.n	8003e5a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003e62:	f002 fd27 	bl	80068b4 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8003e66:	f7ff fb1f 	bl	80034a8 <main>

08003e6a <LoopForever>:

LoopForever:
  b LoopForever
 8003e6a:	e7fe      	b.n	8003e6a <LoopForever>
  ldr   r0, =_estack
 8003e6c:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8003e70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003e74:	20000228 	.word	0x20000228
  ldr r2, =_sidata
 8003e78:	0800c3f4 	.word	0x0800c3f4
  ldr r2, =_sbss
 8003e7c:	20000228 	.word	0x20000228
  ldr r4, =_ebss
 8003e80:	200009e8 	.word	0x200009e8

08003e84 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003e84:	e7fe      	b.n	8003e84 <ADC1_IRQHandler>
	...

08003e88 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b082      	sub	sp, #8
 8003e8c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003e8e:	1dfb      	adds	r3, r7, #7
 8003e90:	2200      	movs	r2, #0
 8003e92:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003e94:	4b0b      	ldr	r3, [pc, #44]	; (8003ec4 <HAL_Init+0x3c>)
 8003e96:	681a      	ldr	r2, [r3, #0]
 8003e98:	4b0a      	ldr	r3, [pc, #40]	; (8003ec4 <HAL_Init+0x3c>)
 8003e9a:	2180      	movs	r1, #128	; 0x80
 8003e9c:	0049      	lsls	r1, r1, #1
 8003e9e:	430a      	orrs	r2, r1
 8003ea0:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003ea2:	2000      	movs	r0, #0
 8003ea4:	f000 f810 	bl	8003ec8 <HAL_InitTick>
 8003ea8:	1e03      	subs	r3, r0, #0
 8003eaa:	d003      	beq.n	8003eb4 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8003eac:	1dfb      	adds	r3, r7, #7
 8003eae:	2201      	movs	r2, #1
 8003eb0:	701a      	strb	r2, [r3, #0]
 8003eb2:	e001      	b.n	8003eb8 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8003eb4:	f7ff fd6c 	bl	8003990 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003eb8:	1dfb      	adds	r3, r7, #7
 8003eba:	781b      	ldrb	r3, [r3, #0]
}
 8003ebc:	0018      	movs	r0, r3
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	b002      	add	sp, #8
 8003ec2:	bd80      	pop	{r7, pc}
 8003ec4:	40022000 	.word	0x40022000

08003ec8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003ec8:	b590      	push	{r4, r7, lr}
 8003eca:	b085      	sub	sp, #20
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003ed0:	230f      	movs	r3, #15
 8003ed2:	18fb      	adds	r3, r7, r3
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8003ed8:	4b1d      	ldr	r3, [pc, #116]	; (8003f50 <HAL_InitTick+0x88>)
 8003eda:	781b      	ldrb	r3, [r3, #0]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d02b      	beq.n	8003f38 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8003ee0:	4b1c      	ldr	r3, [pc, #112]	; (8003f54 <HAL_InitTick+0x8c>)
 8003ee2:	681c      	ldr	r4, [r3, #0]
 8003ee4:	4b1a      	ldr	r3, [pc, #104]	; (8003f50 <HAL_InitTick+0x88>)
 8003ee6:	781b      	ldrb	r3, [r3, #0]
 8003ee8:	0019      	movs	r1, r3
 8003eea:	23fa      	movs	r3, #250	; 0xfa
 8003eec:	0098      	lsls	r0, r3, #2
 8003eee:	f7fc f92d 	bl	800014c <__udivsi3>
 8003ef2:	0003      	movs	r3, r0
 8003ef4:	0019      	movs	r1, r3
 8003ef6:	0020      	movs	r0, r4
 8003ef8:	f7fc f928 	bl	800014c <__udivsi3>
 8003efc:	0003      	movs	r3, r0
 8003efe:	0018      	movs	r0, r3
 8003f00:	f000 f953 	bl	80041aa <HAL_SYSTICK_Config>
 8003f04:	1e03      	subs	r3, r0, #0
 8003f06:	d112      	bne.n	8003f2e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2b03      	cmp	r3, #3
 8003f0c:	d80a      	bhi.n	8003f24 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003f0e:	6879      	ldr	r1, [r7, #4]
 8003f10:	2301      	movs	r3, #1
 8003f12:	425b      	negs	r3, r3
 8003f14:	2200      	movs	r2, #0
 8003f16:	0018      	movs	r0, r3
 8003f18:	f000 f922 	bl	8004160 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003f1c:	4b0e      	ldr	r3, [pc, #56]	; (8003f58 <HAL_InitTick+0x90>)
 8003f1e:	687a      	ldr	r2, [r7, #4]
 8003f20:	601a      	str	r2, [r3, #0]
 8003f22:	e00d      	b.n	8003f40 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8003f24:	230f      	movs	r3, #15
 8003f26:	18fb      	adds	r3, r7, r3
 8003f28:	2201      	movs	r2, #1
 8003f2a:	701a      	strb	r2, [r3, #0]
 8003f2c:	e008      	b.n	8003f40 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003f2e:	230f      	movs	r3, #15
 8003f30:	18fb      	adds	r3, r7, r3
 8003f32:	2201      	movs	r2, #1
 8003f34:	701a      	strb	r2, [r3, #0]
 8003f36:	e003      	b.n	8003f40 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003f38:	230f      	movs	r3, #15
 8003f3a:	18fb      	adds	r3, r7, r3
 8003f3c:	2201      	movs	r2, #1
 8003f3e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8003f40:	230f      	movs	r3, #15
 8003f42:	18fb      	adds	r3, r7, r3
 8003f44:	781b      	ldrb	r3, [r3, #0]
}
 8003f46:	0018      	movs	r0, r3
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	b005      	add	sp, #20
 8003f4c:	bd90      	pop	{r4, r7, pc}
 8003f4e:	46c0      	nop			; (mov r8, r8)
 8003f50:	20000050 	.word	0x20000050
 8003f54:	20000048 	.word	0x20000048
 8003f58:	2000004c 	.word	0x2000004c

08003f5c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003f60:	4b05      	ldr	r3, [pc, #20]	; (8003f78 <HAL_IncTick+0x1c>)
 8003f62:	781b      	ldrb	r3, [r3, #0]
 8003f64:	001a      	movs	r2, r3
 8003f66:	4b05      	ldr	r3, [pc, #20]	; (8003f7c <HAL_IncTick+0x20>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	18d2      	adds	r2, r2, r3
 8003f6c:	4b03      	ldr	r3, [pc, #12]	; (8003f7c <HAL_IncTick+0x20>)
 8003f6e:	601a      	str	r2, [r3, #0]
}
 8003f70:	46c0      	nop			; (mov r8, r8)
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bd80      	pop	{r7, pc}
 8003f76:	46c0      	nop			; (mov r8, r8)
 8003f78:	20000050 	.word	0x20000050
 8003f7c:	200009d4 	.word	0x200009d4

08003f80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	af00      	add	r7, sp, #0
  return uwTick;
 8003f84:	4b02      	ldr	r3, [pc, #8]	; (8003f90 <HAL_GetTick+0x10>)
 8003f86:	681b      	ldr	r3, [r3, #0]
}
 8003f88:	0018      	movs	r0, r3
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}
 8003f8e:	46c0      	nop			; (mov r8, r8)
 8003f90:	200009d4 	.word	0x200009d4

08003f94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b084      	sub	sp, #16
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003f9c:	f7ff fff0 	bl	8003f80 <HAL_GetTick>
 8003fa0:	0003      	movs	r3, r0
 8003fa2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	3301      	adds	r3, #1
 8003fac:	d005      	beq.n	8003fba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003fae:	4b0a      	ldr	r3, [pc, #40]	; (8003fd8 <HAL_Delay+0x44>)
 8003fb0:	781b      	ldrb	r3, [r3, #0]
 8003fb2:	001a      	movs	r2, r3
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	189b      	adds	r3, r3, r2
 8003fb8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003fba:	46c0      	nop			; (mov r8, r8)
 8003fbc:	f7ff ffe0 	bl	8003f80 <HAL_GetTick>
 8003fc0:	0002      	movs	r2, r0
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	1ad3      	subs	r3, r2, r3
 8003fc6:	68fa      	ldr	r2, [r7, #12]
 8003fc8:	429a      	cmp	r2, r3
 8003fca:	d8f7      	bhi.n	8003fbc <HAL_Delay+0x28>
  {
  }
}
 8003fcc:	46c0      	nop			; (mov r8, r8)
 8003fce:	46c0      	nop			; (mov r8, r8)
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	b004      	add	sp, #16
 8003fd4:	bd80      	pop	{r7, pc}
 8003fd6:	46c0      	nop			; (mov r8, r8)
 8003fd8:	20000050 	.word	0x20000050

08003fdc <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b082      	sub	sp, #8
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8003fe4:	4b06      	ldr	r3, [pc, #24]	; (8004000 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a06      	ldr	r2, [pc, #24]	; (8004004 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8003fea:	4013      	ands	r3, r2
 8003fec:	0019      	movs	r1, r3
 8003fee:	4b04      	ldr	r3, [pc, #16]	; (8004000 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8003ff0:	687a      	ldr	r2, [r7, #4]
 8003ff2:	430a      	orrs	r2, r1
 8003ff4:	601a      	str	r2, [r3, #0]
}
 8003ff6:	46c0      	nop			; (mov r8, r8)
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	b002      	add	sp, #8
 8003ffc:	bd80      	pop	{r7, pc}
 8003ffe:	46c0      	nop			; (mov r8, r8)
 8004000:	40010000 	.word	0x40010000
 8004004:	fffff9ff 	.word	0xfffff9ff

08004008 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b082      	sub	sp, #8
 800400c:	af00      	add	r7, sp, #0
 800400e:	0002      	movs	r2, r0
 8004010:	1dfb      	adds	r3, r7, #7
 8004012:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004014:	1dfb      	adds	r3, r7, #7
 8004016:	781b      	ldrb	r3, [r3, #0]
 8004018:	2b7f      	cmp	r3, #127	; 0x7f
 800401a:	d809      	bhi.n	8004030 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800401c:	1dfb      	adds	r3, r7, #7
 800401e:	781b      	ldrb	r3, [r3, #0]
 8004020:	001a      	movs	r2, r3
 8004022:	231f      	movs	r3, #31
 8004024:	401a      	ands	r2, r3
 8004026:	4b04      	ldr	r3, [pc, #16]	; (8004038 <__NVIC_EnableIRQ+0x30>)
 8004028:	2101      	movs	r1, #1
 800402a:	4091      	lsls	r1, r2
 800402c:	000a      	movs	r2, r1
 800402e:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8004030:	46c0      	nop			; (mov r8, r8)
 8004032:	46bd      	mov	sp, r7
 8004034:	b002      	add	sp, #8
 8004036:	bd80      	pop	{r7, pc}
 8004038:	e000e100 	.word	0xe000e100

0800403c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800403c:	b590      	push	{r4, r7, lr}
 800403e:	b083      	sub	sp, #12
 8004040:	af00      	add	r7, sp, #0
 8004042:	0002      	movs	r2, r0
 8004044:	6039      	str	r1, [r7, #0]
 8004046:	1dfb      	adds	r3, r7, #7
 8004048:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800404a:	1dfb      	adds	r3, r7, #7
 800404c:	781b      	ldrb	r3, [r3, #0]
 800404e:	2b7f      	cmp	r3, #127	; 0x7f
 8004050:	d828      	bhi.n	80040a4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004052:	4a2f      	ldr	r2, [pc, #188]	; (8004110 <__NVIC_SetPriority+0xd4>)
 8004054:	1dfb      	adds	r3, r7, #7
 8004056:	781b      	ldrb	r3, [r3, #0]
 8004058:	b25b      	sxtb	r3, r3
 800405a:	089b      	lsrs	r3, r3, #2
 800405c:	33c0      	adds	r3, #192	; 0xc0
 800405e:	009b      	lsls	r3, r3, #2
 8004060:	589b      	ldr	r3, [r3, r2]
 8004062:	1dfa      	adds	r2, r7, #7
 8004064:	7812      	ldrb	r2, [r2, #0]
 8004066:	0011      	movs	r1, r2
 8004068:	2203      	movs	r2, #3
 800406a:	400a      	ands	r2, r1
 800406c:	00d2      	lsls	r2, r2, #3
 800406e:	21ff      	movs	r1, #255	; 0xff
 8004070:	4091      	lsls	r1, r2
 8004072:	000a      	movs	r2, r1
 8004074:	43d2      	mvns	r2, r2
 8004076:	401a      	ands	r2, r3
 8004078:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	019b      	lsls	r3, r3, #6
 800407e:	22ff      	movs	r2, #255	; 0xff
 8004080:	401a      	ands	r2, r3
 8004082:	1dfb      	adds	r3, r7, #7
 8004084:	781b      	ldrb	r3, [r3, #0]
 8004086:	0018      	movs	r0, r3
 8004088:	2303      	movs	r3, #3
 800408a:	4003      	ands	r3, r0
 800408c:	00db      	lsls	r3, r3, #3
 800408e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004090:	481f      	ldr	r0, [pc, #124]	; (8004110 <__NVIC_SetPriority+0xd4>)
 8004092:	1dfb      	adds	r3, r7, #7
 8004094:	781b      	ldrb	r3, [r3, #0]
 8004096:	b25b      	sxtb	r3, r3
 8004098:	089b      	lsrs	r3, r3, #2
 800409a:	430a      	orrs	r2, r1
 800409c:	33c0      	adds	r3, #192	; 0xc0
 800409e:	009b      	lsls	r3, r3, #2
 80040a0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80040a2:	e031      	b.n	8004108 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80040a4:	4a1b      	ldr	r2, [pc, #108]	; (8004114 <__NVIC_SetPriority+0xd8>)
 80040a6:	1dfb      	adds	r3, r7, #7
 80040a8:	781b      	ldrb	r3, [r3, #0]
 80040aa:	0019      	movs	r1, r3
 80040ac:	230f      	movs	r3, #15
 80040ae:	400b      	ands	r3, r1
 80040b0:	3b08      	subs	r3, #8
 80040b2:	089b      	lsrs	r3, r3, #2
 80040b4:	3306      	adds	r3, #6
 80040b6:	009b      	lsls	r3, r3, #2
 80040b8:	18d3      	adds	r3, r2, r3
 80040ba:	3304      	adds	r3, #4
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	1dfa      	adds	r2, r7, #7
 80040c0:	7812      	ldrb	r2, [r2, #0]
 80040c2:	0011      	movs	r1, r2
 80040c4:	2203      	movs	r2, #3
 80040c6:	400a      	ands	r2, r1
 80040c8:	00d2      	lsls	r2, r2, #3
 80040ca:	21ff      	movs	r1, #255	; 0xff
 80040cc:	4091      	lsls	r1, r2
 80040ce:	000a      	movs	r2, r1
 80040d0:	43d2      	mvns	r2, r2
 80040d2:	401a      	ands	r2, r3
 80040d4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	019b      	lsls	r3, r3, #6
 80040da:	22ff      	movs	r2, #255	; 0xff
 80040dc:	401a      	ands	r2, r3
 80040de:	1dfb      	adds	r3, r7, #7
 80040e0:	781b      	ldrb	r3, [r3, #0]
 80040e2:	0018      	movs	r0, r3
 80040e4:	2303      	movs	r3, #3
 80040e6:	4003      	ands	r3, r0
 80040e8:	00db      	lsls	r3, r3, #3
 80040ea:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80040ec:	4809      	ldr	r0, [pc, #36]	; (8004114 <__NVIC_SetPriority+0xd8>)
 80040ee:	1dfb      	adds	r3, r7, #7
 80040f0:	781b      	ldrb	r3, [r3, #0]
 80040f2:	001c      	movs	r4, r3
 80040f4:	230f      	movs	r3, #15
 80040f6:	4023      	ands	r3, r4
 80040f8:	3b08      	subs	r3, #8
 80040fa:	089b      	lsrs	r3, r3, #2
 80040fc:	430a      	orrs	r2, r1
 80040fe:	3306      	adds	r3, #6
 8004100:	009b      	lsls	r3, r3, #2
 8004102:	18c3      	adds	r3, r0, r3
 8004104:	3304      	adds	r3, #4
 8004106:	601a      	str	r2, [r3, #0]
}
 8004108:	46c0      	nop			; (mov r8, r8)
 800410a:	46bd      	mov	sp, r7
 800410c:	b003      	add	sp, #12
 800410e:	bd90      	pop	{r4, r7, pc}
 8004110:	e000e100 	.word	0xe000e100
 8004114:	e000ed00 	.word	0xe000ed00

08004118 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b082      	sub	sp, #8
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	1e5a      	subs	r2, r3, #1
 8004124:	2380      	movs	r3, #128	; 0x80
 8004126:	045b      	lsls	r3, r3, #17
 8004128:	429a      	cmp	r2, r3
 800412a:	d301      	bcc.n	8004130 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800412c:	2301      	movs	r3, #1
 800412e:	e010      	b.n	8004152 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004130:	4b0a      	ldr	r3, [pc, #40]	; (800415c <SysTick_Config+0x44>)
 8004132:	687a      	ldr	r2, [r7, #4]
 8004134:	3a01      	subs	r2, #1
 8004136:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004138:	2301      	movs	r3, #1
 800413a:	425b      	negs	r3, r3
 800413c:	2103      	movs	r1, #3
 800413e:	0018      	movs	r0, r3
 8004140:	f7ff ff7c 	bl	800403c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004144:	4b05      	ldr	r3, [pc, #20]	; (800415c <SysTick_Config+0x44>)
 8004146:	2200      	movs	r2, #0
 8004148:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800414a:	4b04      	ldr	r3, [pc, #16]	; (800415c <SysTick_Config+0x44>)
 800414c:	2207      	movs	r2, #7
 800414e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004150:	2300      	movs	r3, #0
}
 8004152:	0018      	movs	r0, r3
 8004154:	46bd      	mov	sp, r7
 8004156:	b002      	add	sp, #8
 8004158:	bd80      	pop	{r7, pc}
 800415a:	46c0      	nop			; (mov r8, r8)
 800415c:	e000e010 	.word	0xe000e010

08004160 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b084      	sub	sp, #16
 8004164:	af00      	add	r7, sp, #0
 8004166:	60b9      	str	r1, [r7, #8]
 8004168:	607a      	str	r2, [r7, #4]
 800416a:	210f      	movs	r1, #15
 800416c:	187b      	adds	r3, r7, r1
 800416e:	1c02      	adds	r2, r0, #0
 8004170:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8004172:	68ba      	ldr	r2, [r7, #8]
 8004174:	187b      	adds	r3, r7, r1
 8004176:	781b      	ldrb	r3, [r3, #0]
 8004178:	b25b      	sxtb	r3, r3
 800417a:	0011      	movs	r1, r2
 800417c:	0018      	movs	r0, r3
 800417e:	f7ff ff5d 	bl	800403c <__NVIC_SetPriority>
}
 8004182:	46c0      	nop			; (mov r8, r8)
 8004184:	46bd      	mov	sp, r7
 8004186:	b004      	add	sp, #16
 8004188:	bd80      	pop	{r7, pc}

0800418a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800418a:	b580      	push	{r7, lr}
 800418c:	b082      	sub	sp, #8
 800418e:	af00      	add	r7, sp, #0
 8004190:	0002      	movs	r2, r0
 8004192:	1dfb      	adds	r3, r7, #7
 8004194:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004196:	1dfb      	adds	r3, r7, #7
 8004198:	781b      	ldrb	r3, [r3, #0]
 800419a:	b25b      	sxtb	r3, r3
 800419c:	0018      	movs	r0, r3
 800419e:	f7ff ff33 	bl	8004008 <__NVIC_EnableIRQ>
}
 80041a2:	46c0      	nop			; (mov r8, r8)
 80041a4:	46bd      	mov	sp, r7
 80041a6:	b002      	add	sp, #8
 80041a8:	bd80      	pop	{r7, pc}

080041aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80041aa:	b580      	push	{r7, lr}
 80041ac:	b082      	sub	sp, #8
 80041ae:	af00      	add	r7, sp, #0
 80041b0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	0018      	movs	r0, r3
 80041b6:	f7ff ffaf 	bl	8004118 <SysTick_Config>
 80041ba:	0003      	movs	r3, r0
}
 80041bc:	0018      	movs	r0, r3
 80041be:	46bd      	mov	sp, r7
 80041c0:	b002      	add	sp, #8
 80041c2:	bd80      	pop	{r7, pc}

080041c4 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b082      	sub	sp, #8
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d101      	bne.n	80041d6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80041d2:	2301      	movs	r3, #1
 80041d4:	e077      	b.n	80042c6 <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a3d      	ldr	r2, [pc, #244]	; (80042d0 <HAL_DMA_Init+0x10c>)
 80041dc:	4694      	mov	ip, r2
 80041de:	4463      	add	r3, ip
 80041e0:	2114      	movs	r1, #20
 80041e2:	0018      	movs	r0, r3
 80041e4:	f7fb ffb2 	bl	800014c <__udivsi3>
 80041e8:	0003      	movs	r3, r0
 80041ea:	009a      	lsls	r2, r3, #2
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2225      	movs	r2, #37	; 0x25
 80041f4:	2102      	movs	r1, #2
 80041f6:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	681a      	ldr	r2, [r3, #0]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4934      	ldr	r1, [pc, #208]	; (80042d4 <HAL_DMA_Init+0x110>)
 8004204:	400a      	ands	r2, r1
 8004206:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	6819      	ldr	r1, [r3, #0]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	689a      	ldr	r2, [r3, #8]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	68db      	ldr	r3, [r3, #12]
 8004216:	431a      	orrs	r2, r3
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	691b      	ldr	r3, [r3, #16]
 800421c:	431a      	orrs	r2, r3
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	695b      	ldr	r3, [r3, #20]
 8004222:	431a      	orrs	r2, r3
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	699b      	ldr	r3, [r3, #24]
 8004228:	431a      	orrs	r2, r3
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	69db      	ldr	r3, [r3, #28]
 800422e:	431a      	orrs	r2, r3
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6a1b      	ldr	r3, [r3, #32]
 8004234:	431a      	orrs	r2, r3
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	430a      	orrs	r2, r1
 800423c:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	0018      	movs	r0, r3
 8004242:	f000 f9c1 	bl	80045c8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	689a      	ldr	r2, [r3, #8]
 800424a:	2380      	movs	r3, #128	; 0x80
 800424c:	01db      	lsls	r3, r3, #7
 800424e:	429a      	cmp	r2, r3
 8004250:	d102      	bne.n	8004258 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2200      	movs	r2, #0
 8004256:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	685a      	ldr	r2, [r3, #4]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004260:	213f      	movs	r1, #63	; 0x3f
 8004262:	400a      	ands	r2, r1
 8004264:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800426a:	687a      	ldr	r2, [r7, #4]
 800426c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800426e:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d011      	beq.n	800429c <HAL_DMA_Init+0xd8>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	2b04      	cmp	r3, #4
 800427e:	d80d      	bhi.n	800429c <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	0018      	movs	r0, r3
 8004284:	f000 f9cc 	bl	8004620 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800428c:	2200      	movs	r2, #0
 800428e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004294:	687a      	ldr	r2, [r7, #4]
 8004296:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8004298:	605a      	str	r2, [r3, #4]
 800429a:	e008      	b.n	80042ae <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2200      	movs	r2, #0
 80042a0:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2200      	movs	r2, #0
 80042a6:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2200      	movs	r2, #0
 80042ac:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2200      	movs	r2, #0
 80042b2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2225      	movs	r2, #37	; 0x25
 80042b8:	2101      	movs	r1, #1
 80042ba:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2224      	movs	r2, #36	; 0x24
 80042c0:	2100      	movs	r1, #0
 80042c2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80042c4:	2300      	movs	r3, #0
}
 80042c6:	0018      	movs	r0, r3
 80042c8:	46bd      	mov	sp, r7
 80042ca:	b002      	add	sp, #8
 80042cc:	bd80      	pop	{r7, pc}
 80042ce:	46c0      	nop			; (mov r8, r8)
 80042d0:	bffdfff8 	.word	0xbffdfff8
 80042d4:	ffff800f 	.word	0xffff800f

080042d8 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b086      	sub	sp, #24
 80042dc:	af00      	add	r7, sp, #0
 80042de:	60f8      	str	r0, [r7, #12]
 80042e0:	60b9      	str	r1, [r7, #8]
 80042e2:	607a      	str	r2, [r7, #4]
 80042e4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80042e6:	2317      	movs	r3, #23
 80042e8:	18fb      	adds	r3, r7, r3
 80042ea:	2200      	movs	r2, #0
 80042ec:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	2224      	movs	r2, #36	; 0x24
 80042f2:	5c9b      	ldrb	r3, [r3, r2]
 80042f4:	2b01      	cmp	r3, #1
 80042f6:	d101      	bne.n	80042fc <HAL_DMA_Start_IT+0x24>
 80042f8:	2302      	movs	r3, #2
 80042fa:	e06f      	b.n	80043dc <HAL_DMA_Start_IT+0x104>
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	2224      	movs	r2, #36	; 0x24
 8004300:	2101      	movs	r1, #1
 8004302:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	2225      	movs	r2, #37	; 0x25
 8004308:	5c9b      	ldrb	r3, [r3, r2]
 800430a:	b2db      	uxtb	r3, r3
 800430c:	2b01      	cmp	r3, #1
 800430e:	d157      	bne.n	80043c0 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	2225      	movs	r2, #37	; 0x25
 8004314:	2102      	movs	r1, #2
 8004316:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	2200      	movs	r2, #0
 800431c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	681a      	ldr	r2, [r3, #0]
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	2101      	movs	r1, #1
 800432a:	438a      	bics	r2, r1
 800432c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	687a      	ldr	r2, [r7, #4]
 8004332:	68b9      	ldr	r1, [r7, #8]
 8004334:	68f8      	ldr	r0, [r7, #12]
 8004336:	f000 f907 	bl	8004548 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800433e:	2b00      	cmp	r3, #0
 8004340:	d008      	beq.n	8004354 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	681a      	ldr	r2, [r3, #0]
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	210e      	movs	r1, #14
 800434e:	430a      	orrs	r2, r1
 8004350:	601a      	str	r2, [r3, #0]
 8004352:	e00f      	b.n	8004374 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	681a      	ldr	r2, [r3, #0]
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	2104      	movs	r1, #4
 8004360:	438a      	bics	r2, r1
 8004362:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	681a      	ldr	r2, [r3, #0]
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	210a      	movs	r1, #10
 8004370:	430a      	orrs	r2, r1
 8004372:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004378:	681a      	ldr	r2, [r3, #0]
 800437a:	2380      	movs	r3, #128	; 0x80
 800437c:	025b      	lsls	r3, r3, #9
 800437e:	4013      	ands	r3, r2
 8004380:	d008      	beq.n	8004394 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004386:	681a      	ldr	r2, [r3, #0]
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800438c:	2180      	movs	r1, #128	; 0x80
 800438e:	0049      	lsls	r1, r1, #1
 8004390:	430a      	orrs	r2, r1
 8004392:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004398:	2b00      	cmp	r3, #0
 800439a:	d008      	beq.n	80043ae <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043a0:	681a      	ldr	r2, [r3, #0]
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043a6:	2180      	movs	r1, #128	; 0x80
 80043a8:	0049      	lsls	r1, r1, #1
 80043aa:	430a      	orrs	r2, r1
 80043ac:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	681a      	ldr	r2, [r3, #0]
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	2101      	movs	r1, #1
 80043ba:	430a      	orrs	r2, r1
 80043bc:	601a      	str	r2, [r3, #0]
 80043be:	e00a      	b.n	80043d6 <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	2280      	movs	r2, #128	; 0x80
 80043c4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	2224      	movs	r2, #36	; 0x24
 80043ca:	2100      	movs	r1, #0
 80043cc:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 80043ce:	2317      	movs	r3, #23
 80043d0:	18fb      	adds	r3, r7, r3
 80043d2:	2201      	movs	r2, #1
 80043d4:	701a      	strb	r2, [r3, #0]
  }

  return status;
 80043d6:	2317      	movs	r3, #23
 80043d8:	18fb      	adds	r3, r7, r3
 80043da:	781b      	ldrb	r3, [r3, #0]
}
 80043dc:	0018      	movs	r0, r3
 80043de:	46bd      	mov	sp, r7
 80043e0:	b006      	add	sp, #24
 80043e2:	bd80      	pop	{r7, pc}

080043e4 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b084      	sub	sp, #16
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 80043ec:	4b55      	ldr	r3, [pc, #340]	; (8004544 <HAL_DMA_IRQHandler+0x160>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043fe:	221c      	movs	r2, #28
 8004400:	4013      	ands	r3, r2
 8004402:	2204      	movs	r2, #4
 8004404:	409a      	lsls	r2, r3
 8004406:	0013      	movs	r3, r2
 8004408:	68fa      	ldr	r2, [r7, #12]
 800440a:	4013      	ands	r3, r2
 800440c:	d027      	beq.n	800445e <HAL_DMA_IRQHandler+0x7a>
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	2204      	movs	r2, #4
 8004412:	4013      	ands	r3, r2
 8004414:	d023      	beq.n	800445e <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	2220      	movs	r2, #32
 800441e:	4013      	ands	r3, r2
 8004420:	d107      	bne.n	8004432 <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	681a      	ldr	r2, [r3, #0]
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	2104      	movs	r1, #4
 800442e:	438a      	bics	r2, r1
 8004430:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8004432:	4b44      	ldr	r3, [pc, #272]	; (8004544 <HAL_DMA_IRQHandler+0x160>)
 8004434:	6859      	ldr	r1, [r3, #4]
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800443a:	221c      	movs	r2, #28
 800443c:	4013      	ands	r3, r2
 800443e:	2204      	movs	r2, #4
 8004440:	409a      	lsls	r2, r3
 8004442:	4b40      	ldr	r3, [pc, #256]	; (8004544 <HAL_DMA_IRQHandler+0x160>)
 8004444:	430a      	orrs	r2, r1
 8004446:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800444c:	2b00      	cmp	r3, #0
 800444e:	d100      	bne.n	8004452 <HAL_DMA_IRQHandler+0x6e>
 8004450:	e073      	b.n	800453a <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004456:	687a      	ldr	r2, [r7, #4]
 8004458:	0010      	movs	r0, r2
 800445a:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 800445c:	e06d      	b.n	800453a <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004462:	221c      	movs	r2, #28
 8004464:	4013      	ands	r3, r2
 8004466:	2202      	movs	r2, #2
 8004468:	409a      	lsls	r2, r3
 800446a:	0013      	movs	r3, r2
 800446c:	68fa      	ldr	r2, [r7, #12]
 800446e:	4013      	ands	r3, r2
 8004470:	d02e      	beq.n	80044d0 <HAL_DMA_IRQHandler+0xec>
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	2202      	movs	r2, #2
 8004476:	4013      	ands	r3, r2
 8004478:	d02a      	beq.n	80044d0 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	2220      	movs	r2, #32
 8004482:	4013      	ands	r3, r2
 8004484:	d10b      	bne.n	800449e <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	681a      	ldr	r2, [r3, #0]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	210a      	movs	r1, #10
 8004492:	438a      	bics	r2, r1
 8004494:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2225      	movs	r2, #37	; 0x25
 800449a:	2101      	movs	r1, #1
 800449c:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 800449e:	4b29      	ldr	r3, [pc, #164]	; (8004544 <HAL_DMA_IRQHandler+0x160>)
 80044a0:	6859      	ldr	r1, [r3, #4]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044a6:	221c      	movs	r2, #28
 80044a8:	4013      	ands	r3, r2
 80044aa:	2202      	movs	r2, #2
 80044ac:	409a      	lsls	r2, r3
 80044ae:	4b25      	ldr	r3, [pc, #148]	; (8004544 <HAL_DMA_IRQHandler+0x160>)
 80044b0:	430a      	orrs	r2, r1
 80044b2:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2224      	movs	r2, #36	; 0x24
 80044b8:	2100      	movs	r1, #0
 80044ba:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d03a      	beq.n	800453a <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044c8:	687a      	ldr	r2, [r7, #4]
 80044ca:	0010      	movs	r0, r2
 80044cc:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 80044ce:	e034      	b.n	800453a <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d4:	221c      	movs	r2, #28
 80044d6:	4013      	ands	r3, r2
 80044d8:	2208      	movs	r2, #8
 80044da:	409a      	lsls	r2, r3
 80044dc:	0013      	movs	r3, r2
 80044de:	68fa      	ldr	r2, [r7, #12]
 80044e0:	4013      	ands	r3, r2
 80044e2:	d02b      	beq.n	800453c <HAL_DMA_IRQHandler+0x158>
 80044e4:	68bb      	ldr	r3, [r7, #8]
 80044e6:	2208      	movs	r2, #8
 80044e8:	4013      	ands	r3, r2
 80044ea:	d027      	beq.n	800453c <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	681a      	ldr	r2, [r3, #0]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	210e      	movs	r1, #14
 80044f8:	438a      	bics	r2, r1
 80044fa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 80044fc:	4b11      	ldr	r3, [pc, #68]	; (8004544 <HAL_DMA_IRQHandler+0x160>)
 80044fe:	6859      	ldr	r1, [r3, #4]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004504:	221c      	movs	r2, #28
 8004506:	4013      	ands	r3, r2
 8004508:	2201      	movs	r2, #1
 800450a:	409a      	lsls	r2, r3
 800450c:	4b0d      	ldr	r3, [pc, #52]	; (8004544 <HAL_DMA_IRQHandler+0x160>)
 800450e:	430a      	orrs	r2, r1
 8004510:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2201      	movs	r2, #1
 8004516:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2225      	movs	r2, #37	; 0x25
 800451c:	2101      	movs	r1, #1
 800451e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2224      	movs	r2, #36	; 0x24
 8004524:	2100      	movs	r1, #0
 8004526:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800452c:	2b00      	cmp	r3, #0
 800452e:	d005      	beq.n	800453c <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004534:	687a      	ldr	r2, [r7, #4]
 8004536:	0010      	movs	r0, r2
 8004538:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800453a:	46c0      	nop			; (mov r8, r8)
 800453c:	46c0      	nop			; (mov r8, r8)
}
 800453e:	46bd      	mov	sp, r7
 8004540:	b004      	add	sp, #16
 8004542:	bd80      	pop	{r7, pc}
 8004544:	40020000 	.word	0x40020000

08004548 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b084      	sub	sp, #16
 800454c:	af00      	add	r7, sp, #0
 800454e:	60f8      	str	r0, [r7, #12]
 8004550:	60b9      	str	r1, [r7, #8]
 8004552:	607a      	str	r2, [r7, #4]
 8004554:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800455a:	68fa      	ldr	r2, [r7, #12]
 800455c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800455e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004564:	2b00      	cmp	r3, #0
 8004566:	d004      	beq.n	8004572 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800456c:	68fa      	ldr	r2, [r7, #12]
 800456e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8004570:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8004572:	4b14      	ldr	r3, [pc, #80]	; (80045c4 <DMA_SetConfig+0x7c>)
 8004574:	6859      	ldr	r1, [r3, #4]
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800457a:	221c      	movs	r2, #28
 800457c:	4013      	ands	r3, r2
 800457e:	2201      	movs	r2, #1
 8004580:	409a      	lsls	r2, r3
 8004582:	4b10      	ldr	r3, [pc, #64]	; (80045c4 <DMA_SetConfig+0x7c>)
 8004584:	430a      	orrs	r2, r1
 8004586:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	683a      	ldr	r2, [r7, #0]
 800458e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	689b      	ldr	r3, [r3, #8]
 8004594:	2b10      	cmp	r3, #16
 8004596:	d108      	bne.n	80045aa <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	687a      	ldr	r2, [r7, #4]
 800459e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	68ba      	ldr	r2, [r7, #8]
 80045a6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80045a8:	e007      	b.n	80045ba <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	68ba      	ldr	r2, [r7, #8]
 80045b0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	687a      	ldr	r2, [r7, #4]
 80045b8:	60da      	str	r2, [r3, #12]
}
 80045ba:	46c0      	nop			; (mov r8, r8)
 80045bc:	46bd      	mov	sp, r7
 80045be:	b004      	add	sp, #16
 80045c0:	bd80      	pop	{r7, pc}
 80045c2:	46c0      	nop			; (mov r8, r8)
 80045c4:	40020000 	.word	0x40020000

080045c8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b084      	sub	sp, #16
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045d4:	089b      	lsrs	r3, r3, #2
 80045d6:	4a10      	ldr	r2, [pc, #64]	; (8004618 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 80045d8:	4694      	mov	ip, r2
 80045da:	4463      	add	r3, ip
 80045dc:	009b      	lsls	r3, r3, #2
 80045de:	001a      	movs	r2, r3
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	001a      	movs	r2, r3
 80045ea:	23ff      	movs	r3, #255	; 0xff
 80045ec:	4013      	ands	r3, r2
 80045ee:	3b08      	subs	r3, #8
 80045f0:	2114      	movs	r1, #20
 80045f2:	0018      	movs	r0, r3
 80045f4:	f7fb fdaa 	bl	800014c <__udivsi3>
 80045f8:	0003      	movs	r3, r0
 80045fa:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	4a07      	ldr	r2, [pc, #28]	; (800461c <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8004600:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	221f      	movs	r2, #31
 8004606:	4013      	ands	r3, r2
 8004608:	2201      	movs	r2, #1
 800460a:	409a      	lsls	r2, r3
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8004610:	46c0      	nop			; (mov r8, r8)
 8004612:	46bd      	mov	sp, r7
 8004614:	b004      	add	sp, #16
 8004616:	bd80      	pop	{r7, pc}
 8004618:	10008200 	.word	0x10008200
 800461c:	40020880 	.word	0x40020880

08004620 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b084      	sub	sp, #16
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	223f      	movs	r2, #63	; 0x3f
 800462e:	4013      	ands	r3, r2
 8004630:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	4a0a      	ldr	r2, [pc, #40]	; (8004660 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004636:	4694      	mov	ip, r2
 8004638:	4463      	add	r3, ip
 800463a:	009b      	lsls	r3, r3, #2
 800463c:	001a      	movs	r2, r3
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	4a07      	ldr	r2, [pc, #28]	; (8004664 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004646:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	3b01      	subs	r3, #1
 800464c:	2203      	movs	r2, #3
 800464e:	4013      	ands	r3, r2
 8004650:	2201      	movs	r2, #1
 8004652:	409a      	lsls	r2, r3
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	659a      	str	r2, [r3, #88]	; 0x58
}
 8004658:	46c0      	nop			; (mov r8, r8)
 800465a:	46bd      	mov	sp, r7
 800465c:	b004      	add	sp, #16
 800465e:	bd80      	pop	{r7, pc}
 8004660:	1000823f 	.word	0x1000823f
 8004664:	40020940 	.word	0x40020940

08004668 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b086      	sub	sp, #24
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
 8004670:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004672:	2300      	movs	r3, #0
 8004674:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004676:	e147      	b.n	8004908 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	2101      	movs	r1, #1
 800467e:	697a      	ldr	r2, [r7, #20]
 8004680:	4091      	lsls	r1, r2
 8004682:	000a      	movs	r2, r1
 8004684:	4013      	ands	r3, r2
 8004686:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d100      	bne.n	8004690 <HAL_GPIO_Init+0x28>
 800468e:	e138      	b.n	8004902 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	2203      	movs	r2, #3
 8004696:	4013      	ands	r3, r2
 8004698:	2b01      	cmp	r3, #1
 800469a:	d005      	beq.n	80046a8 <HAL_GPIO_Init+0x40>
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	2203      	movs	r2, #3
 80046a2:	4013      	ands	r3, r2
 80046a4:	2b02      	cmp	r3, #2
 80046a6:	d130      	bne.n	800470a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	689b      	ldr	r3, [r3, #8]
 80046ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80046ae:	697b      	ldr	r3, [r7, #20]
 80046b0:	005b      	lsls	r3, r3, #1
 80046b2:	2203      	movs	r2, #3
 80046b4:	409a      	lsls	r2, r3
 80046b6:	0013      	movs	r3, r2
 80046b8:	43da      	mvns	r2, r3
 80046ba:	693b      	ldr	r3, [r7, #16]
 80046bc:	4013      	ands	r3, r2
 80046be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	68da      	ldr	r2, [r3, #12]
 80046c4:	697b      	ldr	r3, [r7, #20]
 80046c6:	005b      	lsls	r3, r3, #1
 80046c8:	409a      	lsls	r2, r3
 80046ca:	0013      	movs	r3, r2
 80046cc:	693a      	ldr	r2, [r7, #16]
 80046ce:	4313      	orrs	r3, r2
 80046d0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	693a      	ldr	r2, [r7, #16]
 80046d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80046de:	2201      	movs	r2, #1
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	409a      	lsls	r2, r3
 80046e4:	0013      	movs	r3, r2
 80046e6:	43da      	mvns	r2, r3
 80046e8:	693b      	ldr	r3, [r7, #16]
 80046ea:	4013      	ands	r3, r2
 80046ec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	091b      	lsrs	r3, r3, #4
 80046f4:	2201      	movs	r2, #1
 80046f6:	401a      	ands	r2, r3
 80046f8:	697b      	ldr	r3, [r7, #20]
 80046fa:	409a      	lsls	r2, r3
 80046fc:	0013      	movs	r3, r2
 80046fe:	693a      	ldr	r2, [r7, #16]
 8004700:	4313      	orrs	r3, r2
 8004702:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	693a      	ldr	r2, [r7, #16]
 8004708:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	2203      	movs	r2, #3
 8004710:	4013      	ands	r3, r2
 8004712:	2b03      	cmp	r3, #3
 8004714:	d017      	beq.n	8004746 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	68db      	ldr	r3, [r3, #12]
 800471a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800471c:	697b      	ldr	r3, [r7, #20]
 800471e:	005b      	lsls	r3, r3, #1
 8004720:	2203      	movs	r2, #3
 8004722:	409a      	lsls	r2, r3
 8004724:	0013      	movs	r3, r2
 8004726:	43da      	mvns	r2, r3
 8004728:	693b      	ldr	r3, [r7, #16]
 800472a:	4013      	ands	r3, r2
 800472c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	689a      	ldr	r2, [r3, #8]
 8004732:	697b      	ldr	r3, [r7, #20]
 8004734:	005b      	lsls	r3, r3, #1
 8004736:	409a      	lsls	r2, r3
 8004738:	0013      	movs	r3, r2
 800473a:	693a      	ldr	r2, [r7, #16]
 800473c:	4313      	orrs	r3, r2
 800473e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	693a      	ldr	r2, [r7, #16]
 8004744:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	2203      	movs	r2, #3
 800474c:	4013      	ands	r3, r2
 800474e:	2b02      	cmp	r3, #2
 8004750:	d123      	bne.n	800479a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004752:	697b      	ldr	r3, [r7, #20]
 8004754:	08da      	lsrs	r2, r3, #3
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	3208      	adds	r2, #8
 800475a:	0092      	lsls	r2, r2, #2
 800475c:	58d3      	ldr	r3, [r2, r3]
 800475e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004760:	697b      	ldr	r3, [r7, #20]
 8004762:	2207      	movs	r2, #7
 8004764:	4013      	ands	r3, r2
 8004766:	009b      	lsls	r3, r3, #2
 8004768:	220f      	movs	r2, #15
 800476a:	409a      	lsls	r2, r3
 800476c:	0013      	movs	r3, r2
 800476e:	43da      	mvns	r2, r3
 8004770:	693b      	ldr	r3, [r7, #16]
 8004772:	4013      	ands	r3, r2
 8004774:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	691a      	ldr	r2, [r3, #16]
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	2107      	movs	r1, #7
 800477e:	400b      	ands	r3, r1
 8004780:	009b      	lsls	r3, r3, #2
 8004782:	409a      	lsls	r2, r3
 8004784:	0013      	movs	r3, r2
 8004786:	693a      	ldr	r2, [r7, #16]
 8004788:	4313      	orrs	r3, r2
 800478a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800478c:	697b      	ldr	r3, [r7, #20]
 800478e:	08da      	lsrs	r2, r3, #3
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	3208      	adds	r2, #8
 8004794:	0092      	lsls	r2, r2, #2
 8004796:	6939      	ldr	r1, [r7, #16]
 8004798:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80047a0:	697b      	ldr	r3, [r7, #20]
 80047a2:	005b      	lsls	r3, r3, #1
 80047a4:	2203      	movs	r2, #3
 80047a6:	409a      	lsls	r2, r3
 80047a8:	0013      	movs	r3, r2
 80047aa:	43da      	mvns	r2, r3
 80047ac:	693b      	ldr	r3, [r7, #16]
 80047ae:	4013      	ands	r3, r2
 80047b0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	2203      	movs	r2, #3
 80047b8:	401a      	ands	r2, r3
 80047ba:	697b      	ldr	r3, [r7, #20]
 80047bc:	005b      	lsls	r3, r3, #1
 80047be:	409a      	lsls	r2, r3
 80047c0:	0013      	movs	r3, r2
 80047c2:	693a      	ldr	r2, [r7, #16]
 80047c4:	4313      	orrs	r3, r2
 80047c6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	693a      	ldr	r2, [r7, #16]
 80047cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	685a      	ldr	r2, [r3, #4]
 80047d2:	23c0      	movs	r3, #192	; 0xc0
 80047d4:	029b      	lsls	r3, r3, #10
 80047d6:	4013      	ands	r3, r2
 80047d8:	d100      	bne.n	80047dc <HAL_GPIO_Init+0x174>
 80047da:	e092      	b.n	8004902 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80047dc:	4a50      	ldr	r2, [pc, #320]	; (8004920 <HAL_GPIO_Init+0x2b8>)
 80047de:	697b      	ldr	r3, [r7, #20]
 80047e0:	089b      	lsrs	r3, r3, #2
 80047e2:	3318      	adds	r3, #24
 80047e4:	009b      	lsls	r3, r3, #2
 80047e6:	589b      	ldr	r3, [r3, r2]
 80047e8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80047ea:	697b      	ldr	r3, [r7, #20]
 80047ec:	2203      	movs	r2, #3
 80047ee:	4013      	ands	r3, r2
 80047f0:	00db      	lsls	r3, r3, #3
 80047f2:	220f      	movs	r2, #15
 80047f4:	409a      	lsls	r2, r3
 80047f6:	0013      	movs	r3, r2
 80047f8:	43da      	mvns	r2, r3
 80047fa:	693b      	ldr	r3, [r7, #16]
 80047fc:	4013      	ands	r3, r2
 80047fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8004800:	687a      	ldr	r2, [r7, #4]
 8004802:	23a0      	movs	r3, #160	; 0xa0
 8004804:	05db      	lsls	r3, r3, #23
 8004806:	429a      	cmp	r2, r3
 8004808:	d013      	beq.n	8004832 <HAL_GPIO_Init+0x1ca>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	4a45      	ldr	r2, [pc, #276]	; (8004924 <HAL_GPIO_Init+0x2bc>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d00d      	beq.n	800482e <HAL_GPIO_Init+0x1c6>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	4a44      	ldr	r2, [pc, #272]	; (8004928 <HAL_GPIO_Init+0x2c0>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d007      	beq.n	800482a <HAL_GPIO_Init+0x1c2>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	4a43      	ldr	r2, [pc, #268]	; (800492c <HAL_GPIO_Init+0x2c4>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d101      	bne.n	8004826 <HAL_GPIO_Init+0x1be>
 8004822:	2303      	movs	r3, #3
 8004824:	e006      	b.n	8004834 <HAL_GPIO_Init+0x1cc>
 8004826:	2305      	movs	r3, #5
 8004828:	e004      	b.n	8004834 <HAL_GPIO_Init+0x1cc>
 800482a:	2302      	movs	r3, #2
 800482c:	e002      	b.n	8004834 <HAL_GPIO_Init+0x1cc>
 800482e:	2301      	movs	r3, #1
 8004830:	e000      	b.n	8004834 <HAL_GPIO_Init+0x1cc>
 8004832:	2300      	movs	r3, #0
 8004834:	697a      	ldr	r2, [r7, #20]
 8004836:	2103      	movs	r1, #3
 8004838:	400a      	ands	r2, r1
 800483a:	00d2      	lsls	r2, r2, #3
 800483c:	4093      	lsls	r3, r2
 800483e:	693a      	ldr	r2, [r7, #16]
 8004840:	4313      	orrs	r3, r2
 8004842:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8004844:	4936      	ldr	r1, [pc, #216]	; (8004920 <HAL_GPIO_Init+0x2b8>)
 8004846:	697b      	ldr	r3, [r7, #20]
 8004848:	089b      	lsrs	r3, r3, #2
 800484a:	3318      	adds	r3, #24
 800484c:	009b      	lsls	r3, r3, #2
 800484e:	693a      	ldr	r2, [r7, #16]
 8004850:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004852:	4b33      	ldr	r3, [pc, #204]	; (8004920 <HAL_GPIO_Init+0x2b8>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	43da      	mvns	r2, r3
 800485c:	693b      	ldr	r3, [r7, #16]
 800485e:	4013      	ands	r3, r2
 8004860:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	685a      	ldr	r2, [r3, #4]
 8004866:	2380      	movs	r3, #128	; 0x80
 8004868:	035b      	lsls	r3, r3, #13
 800486a:	4013      	ands	r3, r2
 800486c:	d003      	beq.n	8004876 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 800486e:	693a      	ldr	r2, [r7, #16]
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	4313      	orrs	r3, r2
 8004874:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004876:	4b2a      	ldr	r3, [pc, #168]	; (8004920 <HAL_GPIO_Init+0x2b8>)
 8004878:	693a      	ldr	r2, [r7, #16]
 800487a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 800487c:	4b28      	ldr	r3, [pc, #160]	; (8004920 <HAL_GPIO_Init+0x2b8>)
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	43da      	mvns	r2, r3
 8004886:	693b      	ldr	r3, [r7, #16]
 8004888:	4013      	ands	r3, r2
 800488a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	685a      	ldr	r2, [r3, #4]
 8004890:	2380      	movs	r3, #128	; 0x80
 8004892:	039b      	lsls	r3, r3, #14
 8004894:	4013      	ands	r3, r2
 8004896:	d003      	beq.n	80048a0 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8004898:	693a      	ldr	r2, [r7, #16]
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	4313      	orrs	r3, r2
 800489e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80048a0:	4b1f      	ldr	r3, [pc, #124]	; (8004920 <HAL_GPIO_Init+0x2b8>)
 80048a2:	693a      	ldr	r2, [r7, #16]
 80048a4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80048a6:	4a1e      	ldr	r2, [pc, #120]	; (8004920 <HAL_GPIO_Init+0x2b8>)
 80048a8:	2384      	movs	r3, #132	; 0x84
 80048aa:	58d3      	ldr	r3, [r2, r3]
 80048ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	43da      	mvns	r2, r3
 80048b2:	693b      	ldr	r3, [r7, #16]
 80048b4:	4013      	ands	r3, r2
 80048b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	685a      	ldr	r2, [r3, #4]
 80048bc:	2380      	movs	r3, #128	; 0x80
 80048be:	029b      	lsls	r3, r3, #10
 80048c0:	4013      	ands	r3, r2
 80048c2:	d003      	beq.n	80048cc <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80048c4:	693a      	ldr	r2, [r7, #16]
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	4313      	orrs	r3, r2
 80048ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80048cc:	4914      	ldr	r1, [pc, #80]	; (8004920 <HAL_GPIO_Init+0x2b8>)
 80048ce:	2284      	movs	r2, #132	; 0x84
 80048d0:	693b      	ldr	r3, [r7, #16]
 80048d2:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80048d4:	4a12      	ldr	r2, [pc, #72]	; (8004920 <HAL_GPIO_Init+0x2b8>)
 80048d6:	2380      	movs	r3, #128	; 0x80
 80048d8:	58d3      	ldr	r3, [r2, r3]
 80048da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	43da      	mvns	r2, r3
 80048e0:	693b      	ldr	r3, [r7, #16]
 80048e2:	4013      	ands	r3, r2
 80048e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	685a      	ldr	r2, [r3, #4]
 80048ea:	2380      	movs	r3, #128	; 0x80
 80048ec:	025b      	lsls	r3, r3, #9
 80048ee:	4013      	ands	r3, r2
 80048f0:	d003      	beq.n	80048fa <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80048f2:	693a      	ldr	r2, [r7, #16]
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	4313      	orrs	r3, r2
 80048f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80048fa:	4909      	ldr	r1, [pc, #36]	; (8004920 <HAL_GPIO_Init+0x2b8>)
 80048fc:	2280      	movs	r2, #128	; 0x80
 80048fe:	693b      	ldr	r3, [r7, #16]
 8004900:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8004902:	697b      	ldr	r3, [r7, #20]
 8004904:	3301      	adds	r3, #1
 8004906:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	681a      	ldr	r2, [r3, #0]
 800490c:	697b      	ldr	r3, [r7, #20]
 800490e:	40da      	lsrs	r2, r3
 8004910:	1e13      	subs	r3, r2, #0
 8004912:	d000      	beq.n	8004916 <HAL_GPIO_Init+0x2ae>
 8004914:	e6b0      	b.n	8004678 <HAL_GPIO_Init+0x10>
  }
}
 8004916:	46c0      	nop			; (mov r8, r8)
 8004918:	46c0      	nop			; (mov r8, r8)
 800491a:	46bd      	mov	sp, r7
 800491c:	b006      	add	sp, #24
 800491e:	bd80      	pop	{r7, pc}
 8004920:	40021800 	.word	0x40021800
 8004924:	50000400 	.word	0x50000400
 8004928:	50000800 	.word	0x50000800
 800492c:	50000c00 	.word	0x50000c00

08004930 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b082      	sub	sp, #8
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
 8004938:	0008      	movs	r0, r1
 800493a:	0011      	movs	r1, r2
 800493c:	1cbb      	adds	r3, r7, #2
 800493e:	1c02      	adds	r2, r0, #0
 8004940:	801a      	strh	r2, [r3, #0]
 8004942:	1c7b      	adds	r3, r7, #1
 8004944:	1c0a      	adds	r2, r1, #0
 8004946:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004948:	1c7b      	adds	r3, r7, #1
 800494a:	781b      	ldrb	r3, [r3, #0]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d004      	beq.n	800495a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004950:	1cbb      	adds	r3, r7, #2
 8004952:	881a      	ldrh	r2, [r3, #0]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004958:	e003      	b.n	8004962 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800495a:	1cbb      	adds	r3, r7, #2
 800495c:	881a      	ldrh	r2, [r3, #0]
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004962:	46c0      	nop			; (mov r8, r8)
 8004964:	46bd      	mov	sp, r7
 8004966:	b002      	add	sp, #8
 8004968:	bd80      	pop	{r7, pc}
	...

0800496c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b082      	sub	sp, #8
 8004970:	af00      	add	r7, sp, #0
 8004972:	0002      	movs	r2, r0
 8004974:	1dbb      	adds	r3, r7, #6
 8004976:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8004978:	4b10      	ldr	r3, [pc, #64]	; (80049bc <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800497a:	68db      	ldr	r3, [r3, #12]
 800497c:	1dba      	adds	r2, r7, #6
 800497e:	8812      	ldrh	r2, [r2, #0]
 8004980:	4013      	ands	r3, r2
 8004982:	d008      	beq.n	8004996 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8004984:	4b0d      	ldr	r3, [pc, #52]	; (80049bc <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8004986:	1dba      	adds	r2, r7, #6
 8004988:	8812      	ldrh	r2, [r2, #0]
 800498a:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 800498c:	1dbb      	adds	r3, r7, #6
 800498e:	881b      	ldrh	r3, [r3, #0]
 8004990:	0018      	movs	r0, r3
 8004992:	f7fe ffbf 	bl	8003914 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8004996:	4b09      	ldr	r3, [pc, #36]	; (80049bc <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8004998:	691b      	ldr	r3, [r3, #16]
 800499a:	1dba      	adds	r2, r7, #6
 800499c:	8812      	ldrh	r2, [r2, #0]
 800499e:	4013      	ands	r3, r2
 80049a0:	d008      	beq.n	80049b4 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 80049a2:	4b06      	ldr	r3, [pc, #24]	; (80049bc <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80049a4:	1dba      	adds	r2, r7, #6
 80049a6:	8812      	ldrh	r2, [r2, #0]
 80049a8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 80049aa:	1dbb      	adds	r3, r7, #6
 80049ac:	881b      	ldrh	r3, [r3, #0]
 80049ae:	0018      	movs	r0, r3
 80049b0:	f7fe ffc2 	bl	8003938 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 80049b4:	46c0      	nop			; (mov r8, r8)
 80049b6:	46bd      	mov	sp, r7
 80049b8:	b002      	add	sp, #8
 80049ba:	bd80      	pop	{r7, pc}
 80049bc:	40021800 	.word	0x40021800

080049c0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b084      	sub	sp, #16
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80049c8:	4b19      	ldr	r3, [pc, #100]	; (8004a30 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a19      	ldr	r2, [pc, #100]	; (8004a34 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80049ce:	4013      	ands	r3, r2
 80049d0:	0019      	movs	r1, r3
 80049d2:	4b17      	ldr	r3, [pc, #92]	; (8004a30 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80049d4:	687a      	ldr	r2, [r7, #4]
 80049d6:	430a      	orrs	r2, r1
 80049d8:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80049da:	687a      	ldr	r2, [r7, #4]
 80049dc:	2380      	movs	r3, #128	; 0x80
 80049de:	009b      	lsls	r3, r3, #2
 80049e0:	429a      	cmp	r2, r3
 80049e2:	d11f      	bne.n	8004a24 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80049e4:	4b14      	ldr	r3, [pc, #80]	; (8004a38 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80049e6:	681a      	ldr	r2, [r3, #0]
 80049e8:	0013      	movs	r3, r2
 80049ea:	005b      	lsls	r3, r3, #1
 80049ec:	189b      	adds	r3, r3, r2
 80049ee:	005b      	lsls	r3, r3, #1
 80049f0:	4912      	ldr	r1, [pc, #72]	; (8004a3c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80049f2:	0018      	movs	r0, r3
 80049f4:	f7fb fbaa 	bl	800014c <__udivsi3>
 80049f8:	0003      	movs	r3, r0
 80049fa:	3301      	adds	r3, #1
 80049fc:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80049fe:	e008      	b.n	8004a12 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d003      	beq.n	8004a0e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	3b01      	subs	r3, #1
 8004a0a:	60fb      	str	r3, [r7, #12]
 8004a0c:	e001      	b.n	8004a12 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8004a0e:	2303      	movs	r3, #3
 8004a10:	e009      	b.n	8004a26 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004a12:	4b07      	ldr	r3, [pc, #28]	; (8004a30 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004a14:	695a      	ldr	r2, [r3, #20]
 8004a16:	2380      	movs	r3, #128	; 0x80
 8004a18:	00db      	lsls	r3, r3, #3
 8004a1a:	401a      	ands	r2, r3
 8004a1c:	2380      	movs	r3, #128	; 0x80
 8004a1e:	00db      	lsls	r3, r3, #3
 8004a20:	429a      	cmp	r2, r3
 8004a22:	d0ed      	beq.n	8004a00 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8004a24:	2300      	movs	r3, #0
}
 8004a26:	0018      	movs	r0, r3
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	b004      	add	sp, #16
 8004a2c:	bd80      	pop	{r7, pc}
 8004a2e:	46c0      	nop			; (mov r8, r8)
 8004a30:	40007000 	.word	0x40007000
 8004a34:	fffff9ff 	.word	0xfffff9ff
 8004a38:	20000048 	.word	0x20000048
 8004a3c:	000f4240 	.word	0x000f4240

08004a40 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8004a44:	4b03      	ldr	r3, [pc, #12]	; (8004a54 <LL_RCC_GetAPB1Prescaler+0x14>)
 8004a46:	689a      	ldr	r2, [r3, #8]
 8004a48:	23e0      	movs	r3, #224	; 0xe0
 8004a4a:	01db      	lsls	r3, r3, #7
 8004a4c:	4013      	ands	r3, r2
}
 8004a4e:	0018      	movs	r0, r3
 8004a50:	46bd      	mov	sp, r7
 8004a52:	bd80      	pop	{r7, pc}
 8004a54:	40021000 	.word	0x40021000

08004a58 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b088      	sub	sp, #32
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d101      	bne.n	8004a6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004a66:	2301      	movs	r3, #1
 8004a68:	e2f3      	b.n	8005052 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	2201      	movs	r2, #1
 8004a70:	4013      	ands	r3, r2
 8004a72:	d100      	bne.n	8004a76 <HAL_RCC_OscConfig+0x1e>
 8004a74:	e07c      	b.n	8004b70 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a76:	4bc3      	ldr	r3, [pc, #780]	; (8004d84 <HAL_RCC_OscConfig+0x32c>)
 8004a78:	689b      	ldr	r3, [r3, #8]
 8004a7a:	2238      	movs	r2, #56	; 0x38
 8004a7c:	4013      	ands	r3, r2
 8004a7e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004a80:	4bc0      	ldr	r3, [pc, #768]	; (8004d84 <HAL_RCC_OscConfig+0x32c>)
 8004a82:	68db      	ldr	r3, [r3, #12]
 8004a84:	2203      	movs	r2, #3
 8004a86:	4013      	ands	r3, r2
 8004a88:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8004a8a:	69bb      	ldr	r3, [r7, #24]
 8004a8c:	2b10      	cmp	r3, #16
 8004a8e:	d102      	bne.n	8004a96 <HAL_RCC_OscConfig+0x3e>
 8004a90:	697b      	ldr	r3, [r7, #20]
 8004a92:	2b03      	cmp	r3, #3
 8004a94:	d002      	beq.n	8004a9c <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8004a96:	69bb      	ldr	r3, [r7, #24]
 8004a98:	2b08      	cmp	r3, #8
 8004a9a:	d10b      	bne.n	8004ab4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a9c:	4bb9      	ldr	r3, [pc, #740]	; (8004d84 <HAL_RCC_OscConfig+0x32c>)
 8004a9e:	681a      	ldr	r2, [r3, #0]
 8004aa0:	2380      	movs	r3, #128	; 0x80
 8004aa2:	029b      	lsls	r3, r3, #10
 8004aa4:	4013      	ands	r3, r2
 8004aa6:	d062      	beq.n	8004b6e <HAL_RCC_OscConfig+0x116>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d15e      	bne.n	8004b6e <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	e2ce      	b.n	8005052 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	685a      	ldr	r2, [r3, #4]
 8004ab8:	2380      	movs	r3, #128	; 0x80
 8004aba:	025b      	lsls	r3, r3, #9
 8004abc:	429a      	cmp	r2, r3
 8004abe:	d107      	bne.n	8004ad0 <HAL_RCC_OscConfig+0x78>
 8004ac0:	4bb0      	ldr	r3, [pc, #704]	; (8004d84 <HAL_RCC_OscConfig+0x32c>)
 8004ac2:	681a      	ldr	r2, [r3, #0]
 8004ac4:	4baf      	ldr	r3, [pc, #700]	; (8004d84 <HAL_RCC_OscConfig+0x32c>)
 8004ac6:	2180      	movs	r1, #128	; 0x80
 8004ac8:	0249      	lsls	r1, r1, #9
 8004aca:	430a      	orrs	r2, r1
 8004acc:	601a      	str	r2, [r3, #0]
 8004ace:	e020      	b.n	8004b12 <HAL_RCC_OscConfig+0xba>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	685a      	ldr	r2, [r3, #4]
 8004ad4:	23a0      	movs	r3, #160	; 0xa0
 8004ad6:	02db      	lsls	r3, r3, #11
 8004ad8:	429a      	cmp	r2, r3
 8004ada:	d10e      	bne.n	8004afa <HAL_RCC_OscConfig+0xa2>
 8004adc:	4ba9      	ldr	r3, [pc, #676]	; (8004d84 <HAL_RCC_OscConfig+0x32c>)
 8004ade:	681a      	ldr	r2, [r3, #0]
 8004ae0:	4ba8      	ldr	r3, [pc, #672]	; (8004d84 <HAL_RCC_OscConfig+0x32c>)
 8004ae2:	2180      	movs	r1, #128	; 0x80
 8004ae4:	02c9      	lsls	r1, r1, #11
 8004ae6:	430a      	orrs	r2, r1
 8004ae8:	601a      	str	r2, [r3, #0]
 8004aea:	4ba6      	ldr	r3, [pc, #664]	; (8004d84 <HAL_RCC_OscConfig+0x32c>)
 8004aec:	681a      	ldr	r2, [r3, #0]
 8004aee:	4ba5      	ldr	r3, [pc, #660]	; (8004d84 <HAL_RCC_OscConfig+0x32c>)
 8004af0:	2180      	movs	r1, #128	; 0x80
 8004af2:	0249      	lsls	r1, r1, #9
 8004af4:	430a      	orrs	r2, r1
 8004af6:	601a      	str	r2, [r3, #0]
 8004af8:	e00b      	b.n	8004b12 <HAL_RCC_OscConfig+0xba>
 8004afa:	4ba2      	ldr	r3, [pc, #648]	; (8004d84 <HAL_RCC_OscConfig+0x32c>)
 8004afc:	681a      	ldr	r2, [r3, #0]
 8004afe:	4ba1      	ldr	r3, [pc, #644]	; (8004d84 <HAL_RCC_OscConfig+0x32c>)
 8004b00:	49a1      	ldr	r1, [pc, #644]	; (8004d88 <HAL_RCC_OscConfig+0x330>)
 8004b02:	400a      	ands	r2, r1
 8004b04:	601a      	str	r2, [r3, #0]
 8004b06:	4b9f      	ldr	r3, [pc, #636]	; (8004d84 <HAL_RCC_OscConfig+0x32c>)
 8004b08:	681a      	ldr	r2, [r3, #0]
 8004b0a:	4b9e      	ldr	r3, [pc, #632]	; (8004d84 <HAL_RCC_OscConfig+0x32c>)
 8004b0c:	499f      	ldr	r1, [pc, #636]	; (8004d8c <HAL_RCC_OscConfig+0x334>)
 8004b0e:	400a      	ands	r2, r1
 8004b10:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d014      	beq.n	8004b44 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b1a:	f7ff fa31 	bl	8003f80 <HAL_GetTick>
 8004b1e:	0003      	movs	r3, r0
 8004b20:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b22:	e008      	b.n	8004b36 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b24:	f7ff fa2c 	bl	8003f80 <HAL_GetTick>
 8004b28:	0002      	movs	r2, r0
 8004b2a:	693b      	ldr	r3, [r7, #16]
 8004b2c:	1ad3      	subs	r3, r2, r3
 8004b2e:	2b64      	cmp	r3, #100	; 0x64
 8004b30:	d901      	bls.n	8004b36 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8004b32:	2303      	movs	r3, #3
 8004b34:	e28d      	b.n	8005052 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b36:	4b93      	ldr	r3, [pc, #588]	; (8004d84 <HAL_RCC_OscConfig+0x32c>)
 8004b38:	681a      	ldr	r2, [r3, #0]
 8004b3a:	2380      	movs	r3, #128	; 0x80
 8004b3c:	029b      	lsls	r3, r3, #10
 8004b3e:	4013      	ands	r3, r2
 8004b40:	d0f0      	beq.n	8004b24 <HAL_RCC_OscConfig+0xcc>
 8004b42:	e015      	b.n	8004b70 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b44:	f7ff fa1c 	bl	8003f80 <HAL_GetTick>
 8004b48:	0003      	movs	r3, r0
 8004b4a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004b4c:	e008      	b.n	8004b60 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b4e:	f7ff fa17 	bl	8003f80 <HAL_GetTick>
 8004b52:	0002      	movs	r2, r0
 8004b54:	693b      	ldr	r3, [r7, #16]
 8004b56:	1ad3      	subs	r3, r2, r3
 8004b58:	2b64      	cmp	r3, #100	; 0x64
 8004b5a:	d901      	bls.n	8004b60 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8004b5c:	2303      	movs	r3, #3
 8004b5e:	e278      	b.n	8005052 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004b60:	4b88      	ldr	r3, [pc, #544]	; (8004d84 <HAL_RCC_OscConfig+0x32c>)
 8004b62:	681a      	ldr	r2, [r3, #0]
 8004b64:	2380      	movs	r3, #128	; 0x80
 8004b66:	029b      	lsls	r3, r3, #10
 8004b68:	4013      	ands	r3, r2
 8004b6a:	d1f0      	bne.n	8004b4e <HAL_RCC_OscConfig+0xf6>
 8004b6c:	e000      	b.n	8004b70 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b6e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	2202      	movs	r2, #2
 8004b76:	4013      	ands	r3, r2
 8004b78:	d100      	bne.n	8004b7c <HAL_RCC_OscConfig+0x124>
 8004b7a:	e099      	b.n	8004cb0 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b7c:	4b81      	ldr	r3, [pc, #516]	; (8004d84 <HAL_RCC_OscConfig+0x32c>)
 8004b7e:	689b      	ldr	r3, [r3, #8]
 8004b80:	2238      	movs	r2, #56	; 0x38
 8004b82:	4013      	ands	r3, r2
 8004b84:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004b86:	4b7f      	ldr	r3, [pc, #508]	; (8004d84 <HAL_RCC_OscConfig+0x32c>)
 8004b88:	68db      	ldr	r3, [r3, #12]
 8004b8a:	2203      	movs	r2, #3
 8004b8c:	4013      	ands	r3, r2
 8004b8e:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8004b90:	69bb      	ldr	r3, [r7, #24]
 8004b92:	2b10      	cmp	r3, #16
 8004b94:	d102      	bne.n	8004b9c <HAL_RCC_OscConfig+0x144>
 8004b96:	697b      	ldr	r3, [r7, #20]
 8004b98:	2b02      	cmp	r3, #2
 8004b9a:	d002      	beq.n	8004ba2 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8004b9c:	69bb      	ldr	r3, [r7, #24]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d135      	bne.n	8004c0e <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004ba2:	4b78      	ldr	r3, [pc, #480]	; (8004d84 <HAL_RCC_OscConfig+0x32c>)
 8004ba4:	681a      	ldr	r2, [r3, #0]
 8004ba6:	2380      	movs	r3, #128	; 0x80
 8004ba8:	00db      	lsls	r3, r3, #3
 8004baa:	4013      	ands	r3, r2
 8004bac:	d005      	beq.n	8004bba <HAL_RCC_OscConfig+0x162>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	68db      	ldr	r3, [r3, #12]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d101      	bne.n	8004bba <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	e24b      	b.n	8005052 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bba:	4b72      	ldr	r3, [pc, #456]	; (8004d84 <HAL_RCC_OscConfig+0x32c>)
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	4a74      	ldr	r2, [pc, #464]	; (8004d90 <HAL_RCC_OscConfig+0x338>)
 8004bc0:	4013      	ands	r3, r2
 8004bc2:	0019      	movs	r1, r3
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	695b      	ldr	r3, [r3, #20]
 8004bc8:	021a      	lsls	r2, r3, #8
 8004bca:	4b6e      	ldr	r3, [pc, #440]	; (8004d84 <HAL_RCC_OscConfig+0x32c>)
 8004bcc:	430a      	orrs	r2, r1
 8004bce:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004bd0:	69bb      	ldr	r3, [r7, #24]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d112      	bne.n	8004bfc <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004bd6:	4b6b      	ldr	r3, [pc, #428]	; (8004d84 <HAL_RCC_OscConfig+0x32c>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4a6e      	ldr	r2, [pc, #440]	; (8004d94 <HAL_RCC_OscConfig+0x33c>)
 8004bdc:	4013      	ands	r3, r2
 8004bde:	0019      	movs	r1, r3
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	691a      	ldr	r2, [r3, #16]
 8004be4:	4b67      	ldr	r3, [pc, #412]	; (8004d84 <HAL_RCC_OscConfig+0x32c>)
 8004be6:	430a      	orrs	r2, r1
 8004be8:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8004bea:	4b66      	ldr	r3, [pc, #408]	; (8004d84 <HAL_RCC_OscConfig+0x32c>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	0adb      	lsrs	r3, r3, #11
 8004bf0:	2207      	movs	r2, #7
 8004bf2:	4013      	ands	r3, r2
 8004bf4:	4a68      	ldr	r2, [pc, #416]	; (8004d98 <HAL_RCC_OscConfig+0x340>)
 8004bf6:	40da      	lsrs	r2, r3
 8004bf8:	4b68      	ldr	r3, [pc, #416]	; (8004d9c <HAL_RCC_OscConfig+0x344>)
 8004bfa:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004bfc:	4b68      	ldr	r3, [pc, #416]	; (8004da0 <HAL_RCC_OscConfig+0x348>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	0018      	movs	r0, r3
 8004c02:	f7ff f961 	bl	8003ec8 <HAL_InitTick>
 8004c06:	1e03      	subs	r3, r0, #0
 8004c08:	d051      	beq.n	8004cae <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	e221      	b.n	8005052 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	68db      	ldr	r3, [r3, #12]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d030      	beq.n	8004c78 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004c16:	4b5b      	ldr	r3, [pc, #364]	; (8004d84 <HAL_RCC_OscConfig+0x32c>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4a5e      	ldr	r2, [pc, #376]	; (8004d94 <HAL_RCC_OscConfig+0x33c>)
 8004c1c:	4013      	ands	r3, r2
 8004c1e:	0019      	movs	r1, r3
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	691a      	ldr	r2, [r3, #16]
 8004c24:	4b57      	ldr	r3, [pc, #348]	; (8004d84 <HAL_RCC_OscConfig+0x32c>)
 8004c26:	430a      	orrs	r2, r1
 8004c28:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8004c2a:	4b56      	ldr	r3, [pc, #344]	; (8004d84 <HAL_RCC_OscConfig+0x32c>)
 8004c2c:	681a      	ldr	r2, [r3, #0]
 8004c2e:	4b55      	ldr	r3, [pc, #340]	; (8004d84 <HAL_RCC_OscConfig+0x32c>)
 8004c30:	2180      	movs	r1, #128	; 0x80
 8004c32:	0049      	lsls	r1, r1, #1
 8004c34:	430a      	orrs	r2, r1
 8004c36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c38:	f7ff f9a2 	bl	8003f80 <HAL_GetTick>
 8004c3c:	0003      	movs	r3, r0
 8004c3e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004c40:	e008      	b.n	8004c54 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c42:	f7ff f99d 	bl	8003f80 <HAL_GetTick>
 8004c46:	0002      	movs	r2, r0
 8004c48:	693b      	ldr	r3, [r7, #16]
 8004c4a:	1ad3      	subs	r3, r2, r3
 8004c4c:	2b02      	cmp	r3, #2
 8004c4e:	d901      	bls.n	8004c54 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8004c50:	2303      	movs	r3, #3
 8004c52:	e1fe      	b.n	8005052 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004c54:	4b4b      	ldr	r3, [pc, #300]	; (8004d84 <HAL_RCC_OscConfig+0x32c>)
 8004c56:	681a      	ldr	r2, [r3, #0]
 8004c58:	2380      	movs	r3, #128	; 0x80
 8004c5a:	00db      	lsls	r3, r3, #3
 8004c5c:	4013      	ands	r3, r2
 8004c5e:	d0f0      	beq.n	8004c42 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c60:	4b48      	ldr	r3, [pc, #288]	; (8004d84 <HAL_RCC_OscConfig+0x32c>)
 8004c62:	685b      	ldr	r3, [r3, #4]
 8004c64:	4a4a      	ldr	r2, [pc, #296]	; (8004d90 <HAL_RCC_OscConfig+0x338>)
 8004c66:	4013      	ands	r3, r2
 8004c68:	0019      	movs	r1, r3
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	695b      	ldr	r3, [r3, #20]
 8004c6e:	021a      	lsls	r2, r3, #8
 8004c70:	4b44      	ldr	r3, [pc, #272]	; (8004d84 <HAL_RCC_OscConfig+0x32c>)
 8004c72:	430a      	orrs	r2, r1
 8004c74:	605a      	str	r2, [r3, #4]
 8004c76:	e01b      	b.n	8004cb0 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8004c78:	4b42      	ldr	r3, [pc, #264]	; (8004d84 <HAL_RCC_OscConfig+0x32c>)
 8004c7a:	681a      	ldr	r2, [r3, #0]
 8004c7c:	4b41      	ldr	r3, [pc, #260]	; (8004d84 <HAL_RCC_OscConfig+0x32c>)
 8004c7e:	4949      	ldr	r1, [pc, #292]	; (8004da4 <HAL_RCC_OscConfig+0x34c>)
 8004c80:	400a      	ands	r2, r1
 8004c82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c84:	f7ff f97c 	bl	8003f80 <HAL_GetTick>
 8004c88:	0003      	movs	r3, r0
 8004c8a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004c8c:	e008      	b.n	8004ca0 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c8e:	f7ff f977 	bl	8003f80 <HAL_GetTick>
 8004c92:	0002      	movs	r2, r0
 8004c94:	693b      	ldr	r3, [r7, #16]
 8004c96:	1ad3      	subs	r3, r2, r3
 8004c98:	2b02      	cmp	r3, #2
 8004c9a:	d901      	bls.n	8004ca0 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004c9c:	2303      	movs	r3, #3
 8004c9e:	e1d8      	b.n	8005052 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004ca0:	4b38      	ldr	r3, [pc, #224]	; (8004d84 <HAL_RCC_OscConfig+0x32c>)
 8004ca2:	681a      	ldr	r2, [r3, #0]
 8004ca4:	2380      	movs	r3, #128	; 0x80
 8004ca6:	00db      	lsls	r3, r3, #3
 8004ca8:	4013      	ands	r3, r2
 8004caa:	d1f0      	bne.n	8004c8e <HAL_RCC_OscConfig+0x236>
 8004cac:	e000      	b.n	8004cb0 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004cae:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	2208      	movs	r2, #8
 8004cb6:	4013      	ands	r3, r2
 8004cb8:	d047      	beq.n	8004d4a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004cba:	4b32      	ldr	r3, [pc, #200]	; (8004d84 <HAL_RCC_OscConfig+0x32c>)
 8004cbc:	689b      	ldr	r3, [r3, #8]
 8004cbe:	2238      	movs	r2, #56	; 0x38
 8004cc0:	4013      	ands	r3, r2
 8004cc2:	2b18      	cmp	r3, #24
 8004cc4:	d10a      	bne.n	8004cdc <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8004cc6:	4b2f      	ldr	r3, [pc, #188]	; (8004d84 <HAL_RCC_OscConfig+0x32c>)
 8004cc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cca:	2202      	movs	r2, #2
 8004ccc:	4013      	ands	r3, r2
 8004cce:	d03c      	beq.n	8004d4a <HAL_RCC_OscConfig+0x2f2>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	699b      	ldr	r3, [r3, #24]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d138      	bne.n	8004d4a <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8004cd8:	2301      	movs	r3, #1
 8004cda:	e1ba      	b.n	8005052 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	699b      	ldr	r3, [r3, #24]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d019      	beq.n	8004d18 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8004ce4:	4b27      	ldr	r3, [pc, #156]	; (8004d84 <HAL_RCC_OscConfig+0x32c>)
 8004ce6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004ce8:	4b26      	ldr	r3, [pc, #152]	; (8004d84 <HAL_RCC_OscConfig+0x32c>)
 8004cea:	2101      	movs	r1, #1
 8004cec:	430a      	orrs	r2, r1
 8004cee:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cf0:	f7ff f946 	bl	8003f80 <HAL_GetTick>
 8004cf4:	0003      	movs	r3, r0
 8004cf6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004cf8:	e008      	b.n	8004d0c <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004cfa:	f7ff f941 	bl	8003f80 <HAL_GetTick>
 8004cfe:	0002      	movs	r2, r0
 8004d00:	693b      	ldr	r3, [r7, #16]
 8004d02:	1ad3      	subs	r3, r2, r3
 8004d04:	2b02      	cmp	r3, #2
 8004d06:	d901      	bls.n	8004d0c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8004d08:	2303      	movs	r3, #3
 8004d0a:	e1a2      	b.n	8005052 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004d0c:	4b1d      	ldr	r3, [pc, #116]	; (8004d84 <HAL_RCC_OscConfig+0x32c>)
 8004d0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d10:	2202      	movs	r2, #2
 8004d12:	4013      	ands	r3, r2
 8004d14:	d0f1      	beq.n	8004cfa <HAL_RCC_OscConfig+0x2a2>
 8004d16:	e018      	b.n	8004d4a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8004d18:	4b1a      	ldr	r3, [pc, #104]	; (8004d84 <HAL_RCC_OscConfig+0x32c>)
 8004d1a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004d1c:	4b19      	ldr	r3, [pc, #100]	; (8004d84 <HAL_RCC_OscConfig+0x32c>)
 8004d1e:	2101      	movs	r1, #1
 8004d20:	438a      	bics	r2, r1
 8004d22:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d24:	f7ff f92c 	bl	8003f80 <HAL_GetTick>
 8004d28:	0003      	movs	r3, r0
 8004d2a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004d2c:	e008      	b.n	8004d40 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d2e:	f7ff f927 	bl	8003f80 <HAL_GetTick>
 8004d32:	0002      	movs	r2, r0
 8004d34:	693b      	ldr	r3, [r7, #16]
 8004d36:	1ad3      	subs	r3, r2, r3
 8004d38:	2b02      	cmp	r3, #2
 8004d3a:	d901      	bls.n	8004d40 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8004d3c:	2303      	movs	r3, #3
 8004d3e:	e188      	b.n	8005052 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004d40:	4b10      	ldr	r3, [pc, #64]	; (8004d84 <HAL_RCC_OscConfig+0x32c>)
 8004d42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d44:	2202      	movs	r2, #2
 8004d46:	4013      	ands	r3, r2
 8004d48:	d1f1      	bne.n	8004d2e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	2204      	movs	r2, #4
 8004d50:	4013      	ands	r3, r2
 8004d52:	d100      	bne.n	8004d56 <HAL_RCC_OscConfig+0x2fe>
 8004d54:	e0c6      	b.n	8004ee4 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d56:	231f      	movs	r3, #31
 8004d58:	18fb      	adds	r3, r7, r3
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004d5e:	4b09      	ldr	r3, [pc, #36]	; (8004d84 <HAL_RCC_OscConfig+0x32c>)
 8004d60:	689b      	ldr	r3, [r3, #8]
 8004d62:	2238      	movs	r2, #56	; 0x38
 8004d64:	4013      	ands	r3, r2
 8004d66:	2b20      	cmp	r3, #32
 8004d68:	d11e      	bne.n	8004da8 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8004d6a:	4b06      	ldr	r3, [pc, #24]	; (8004d84 <HAL_RCC_OscConfig+0x32c>)
 8004d6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d6e:	2202      	movs	r2, #2
 8004d70:	4013      	ands	r3, r2
 8004d72:	d100      	bne.n	8004d76 <HAL_RCC_OscConfig+0x31e>
 8004d74:	e0b6      	b.n	8004ee4 <HAL_RCC_OscConfig+0x48c>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	689b      	ldr	r3, [r3, #8]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d000      	beq.n	8004d80 <HAL_RCC_OscConfig+0x328>
 8004d7e:	e0b1      	b.n	8004ee4 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8004d80:	2301      	movs	r3, #1
 8004d82:	e166      	b.n	8005052 <HAL_RCC_OscConfig+0x5fa>
 8004d84:	40021000 	.word	0x40021000
 8004d88:	fffeffff 	.word	0xfffeffff
 8004d8c:	fffbffff 	.word	0xfffbffff
 8004d90:	ffff80ff 	.word	0xffff80ff
 8004d94:	ffffc7ff 	.word	0xffffc7ff
 8004d98:	00f42400 	.word	0x00f42400
 8004d9c:	20000048 	.word	0x20000048
 8004da0:	2000004c 	.word	0x2000004c
 8004da4:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004da8:	4bac      	ldr	r3, [pc, #688]	; (800505c <HAL_RCC_OscConfig+0x604>)
 8004daa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004dac:	2380      	movs	r3, #128	; 0x80
 8004dae:	055b      	lsls	r3, r3, #21
 8004db0:	4013      	ands	r3, r2
 8004db2:	d101      	bne.n	8004db8 <HAL_RCC_OscConfig+0x360>
 8004db4:	2301      	movs	r3, #1
 8004db6:	e000      	b.n	8004dba <HAL_RCC_OscConfig+0x362>
 8004db8:	2300      	movs	r3, #0
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d011      	beq.n	8004de2 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8004dbe:	4ba7      	ldr	r3, [pc, #668]	; (800505c <HAL_RCC_OscConfig+0x604>)
 8004dc0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004dc2:	4ba6      	ldr	r3, [pc, #664]	; (800505c <HAL_RCC_OscConfig+0x604>)
 8004dc4:	2180      	movs	r1, #128	; 0x80
 8004dc6:	0549      	lsls	r1, r1, #21
 8004dc8:	430a      	orrs	r2, r1
 8004dca:	63da      	str	r2, [r3, #60]	; 0x3c
 8004dcc:	4ba3      	ldr	r3, [pc, #652]	; (800505c <HAL_RCC_OscConfig+0x604>)
 8004dce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004dd0:	2380      	movs	r3, #128	; 0x80
 8004dd2:	055b      	lsls	r3, r3, #21
 8004dd4:	4013      	ands	r3, r2
 8004dd6:	60fb      	str	r3, [r7, #12]
 8004dd8:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8004dda:	231f      	movs	r3, #31
 8004ddc:	18fb      	adds	r3, r7, r3
 8004dde:	2201      	movs	r2, #1
 8004de0:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004de2:	4b9f      	ldr	r3, [pc, #636]	; (8005060 <HAL_RCC_OscConfig+0x608>)
 8004de4:	681a      	ldr	r2, [r3, #0]
 8004de6:	2380      	movs	r3, #128	; 0x80
 8004de8:	005b      	lsls	r3, r3, #1
 8004dea:	4013      	ands	r3, r2
 8004dec:	d11a      	bne.n	8004e24 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004dee:	4b9c      	ldr	r3, [pc, #624]	; (8005060 <HAL_RCC_OscConfig+0x608>)
 8004df0:	681a      	ldr	r2, [r3, #0]
 8004df2:	4b9b      	ldr	r3, [pc, #620]	; (8005060 <HAL_RCC_OscConfig+0x608>)
 8004df4:	2180      	movs	r1, #128	; 0x80
 8004df6:	0049      	lsls	r1, r1, #1
 8004df8:	430a      	orrs	r2, r1
 8004dfa:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8004dfc:	f7ff f8c0 	bl	8003f80 <HAL_GetTick>
 8004e00:	0003      	movs	r3, r0
 8004e02:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e04:	e008      	b.n	8004e18 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e06:	f7ff f8bb 	bl	8003f80 <HAL_GetTick>
 8004e0a:	0002      	movs	r2, r0
 8004e0c:	693b      	ldr	r3, [r7, #16]
 8004e0e:	1ad3      	subs	r3, r2, r3
 8004e10:	2b02      	cmp	r3, #2
 8004e12:	d901      	bls.n	8004e18 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8004e14:	2303      	movs	r3, #3
 8004e16:	e11c      	b.n	8005052 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e18:	4b91      	ldr	r3, [pc, #580]	; (8005060 <HAL_RCC_OscConfig+0x608>)
 8004e1a:	681a      	ldr	r2, [r3, #0]
 8004e1c:	2380      	movs	r3, #128	; 0x80
 8004e1e:	005b      	lsls	r3, r3, #1
 8004e20:	4013      	ands	r3, r2
 8004e22:	d0f0      	beq.n	8004e06 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	689b      	ldr	r3, [r3, #8]
 8004e28:	2b01      	cmp	r3, #1
 8004e2a:	d106      	bne.n	8004e3a <HAL_RCC_OscConfig+0x3e2>
 8004e2c:	4b8b      	ldr	r3, [pc, #556]	; (800505c <HAL_RCC_OscConfig+0x604>)
 8004e2e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004e30:	4b8a      	ldr	r3, [pc, #552]	; (800505c <HAL_RCC_OscConfig+0x604>)
 8004e32:	2101      	movs	r1, #1
 8004e34:	430a      	orrs	r2, r1
 8004e36:	65da      	str	r2, [r3, #92]	; 0x5c
 8004e38:	e01c      	b.n	8004e74 <HAL_RCC_OscConfig+0x41c>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	689b      	ldr	r3, [r3, #8]
 8004e3e:	2b05      	cmp	r3, #5
 8004e40:	d10c      	bne.n	8004e5c <HAL_RCC_OscConfig+0x404>
 8004e42:	4b86      	ldr	r3, [pc, #536]	; (800505c <HAL_RCC_OscConfig+0x604>)
 8004e44:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004e46:	4b85      	ldr	r3, [pc, #532]	; (800505c <HAL_RCC_OscConfig+0x604>)
 8004e48:	2104      	movs	r1, #4
 8004e4a:	430a      	orrs	r2, r1
 8004e4c:	65da      	str	r2, [r3, #92]	; 0x5c
 8004e4e:	4b83      	ldr	r3, [pc, #524]	; (800505c <HAL_RCC_OscConfig+0x604>)
 8004e50:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004e52:	4b82      	ldr	r3, [pc, #520]	; (800505c <HAL_RCC_OscConfig+0x604>)
 8004e54:	2101      	movs	r1, #1
 8004e56:	430a      	orrs	r2, r1
 8004e58:	65da      	str	r2, [r3, #92]	; 0x5c
 8004e5a:	e00b      	b.n	8004e74 <HAL_RCC_OscConfig+0x41c>
 8004e5c:	4b7f      	ldr	r3, [pc, #508]	; (800505c <HAL_RCC_OscConfig+0x604>)
 8004e5e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004e60:	4b7e      	ldr	r3, [pc, #504]	; (800505c <HAL_RCC_OscConfig+0x604>)
 8004e62:	2101      	movs	r1, #1
 8004e64:	438a      	bics	r2, r1
 8004e66:	65da      	str	r2, [r3, #92]	; 0x5c
 8004e68:	4b7c      	ldr	r3, [pc, #496]	; (800505c <HAL_RCC_OscConfig+0x604>)
 8004e6a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004e6c:	4b7b      	ldr	r3, [pc, #492]	; (800505c <HAL_RCC_OscConfig+0x604>)
 8004e6e:	2104      	movs	r1, #4
 8004e70:	438a      	bics	r2, r1
 8004e72:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	689b      	ldr	r3, [r3, #8]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d014      	beq.n	8004ea6 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e7c:	f7ff f880 	bl	8003f80 <HAL_GetTick>
 8004e80:	0003      	movs	r3, r0
 8004e82:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e84:	e009      	b.n	8004e9a <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e86:	f7ff f87b 	bl	8003f80 <HAL_GetTick>
 8004e8a:	0002      	movs	r2, r0
 8004e8c:	693b      	ldr	r3, [r7, #16]
 8004e8e:	1ad3      	subs	r3, r2, r3
 8004e90:	4a74      	ldr	r2, [pc, #464]	; (8005064 <HAL_RCC_OscConfig+0x60c>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d901      	bls.n	8004e9a <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8004e96:	2303      	movs	r3, #3
 8004e98:	e0db      	b.n	8005052 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e9a:	4b70      	ldr	r3, [pc, #448]	; (800505c <HAL_RCC_OscConfig+0x604>)
 8004e9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e9e:	2202      	movs	r2, #2
 8004ea0:	4013      	ands	r3, r2
 8004ea2:	d0f0      	beq.n	8004e86 <HAL_RCC_OscConfig+0x42e>
 8004ea4:	e013      	b.n	8004ece <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ea6:	f7ff f86b 	bl	8003f80 <HAL_GetTick>
 8004eaa:	0003      	movs	r3, r0
 8004eac:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004eae:	e009      	b.n	8004ec4 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004eb0:	f7ff f866 	bl	8003f80 <HAL_GetTick>
 8004eb4:	0002      	movs	r2, r0
 8004eb6:	693b      	ldr	r3, [r7, #16]
 8004eb8:	1ad3      	subs	r3, r2, r3
 8004eba:	4a6a      	ldr	r2, [pc, #424]	; (8005064 <HAL_RCC_OscConfig+0x60c>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d901      	bls.n	8004ec4 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8004ec0:	2303      	movs	r3, #3
 8004ec2:	e0c6      	b.n	8005052 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004ec4:	4b65      	ldr	r3, [pc, #404]	; (800505c <HAL_RCC_OscConfig+0x604>)
 8004ec6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ec8:	2202      	movs	r2, #2
 8004eca:	4013      	ands	r3, r2
 8004ecc:	d1f0      	bne.n	8004eb0 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8004ece:	231f      	movs	r3, #31
 8004ed0:	18fb      	adds	r3, r7, r3
 8004ed2:	781b      	ldrb	r3, [r3, #0]
 8004ed4:	2b01      	cmp	r3, #1
 8004ed6:	d105      	bne.n	8004ee4 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8004ed8:	4b60      	ldr	r3, [pc, #384]	; (800505c <HAL_RCC_OscConfig+0x604>)
 8004eda:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004edc:	4b5f      	ldr	r3, [pc, #380]	; (800505c <HAL_RCC_OscConfig+0x604>)
 8004ede:	4962      	ldr	r1, [pc, #392]	; (8005068 <HAL_RCC_OscConfig+0x610>)
 8004ee0:	400a      	ands	r2, r1
 8004ee2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	69db      	ldr	r3, [r3, #28]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d100      	bne.n	8004eee <HAL_RCC_OscConfig+0x496>
 8004eec:	e0b0      	b.n	8005050 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004eee:	4b5b      	ldr	r3, [pc, #364]	; (800505c <HAL_RCC_OscConfig+0x604>)
 8004ef0:	689b      	ldr	r3, [r3, #8]
 8004ef2:	2238      	movs	r2, #56	; 0x38
 8004ef4:	4013      	ands	r3, r2
 8004ef6:	2b10      	cmp	r3, #16
 8004ef8:	d100      	bne.n	8004efc <HAL_RCC_OscConfig+0x4a4>
 8004efa:	e078      	b.n	8004fee <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	69db      	ldr	r3, [r3, #28]
 8004f00:	2b02      	cmp	r3, #2
 8004f02:	d153      	bne.n	8004fac <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f04:	4b55      	ldr	r3, [pc, #340]	; (800505c <HAL_RCC_OscConfig+0x604>)
 8004f06:	681a      	ldr	r2, [r3, #0]
 8004f08:	4b54      	ldr	r3, [pc, #336]	; (800505c <HAL_RCC_OscConfig+0x604>)
 8004f0a:	4958      	ldr	r1, [pc, #352]	; (800506c <HAL_RCC_OscConfig+0x614>)
 8004f0c:	400a      	ands	r2, r1
 8004f0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f10:	f7ff f836 	bl	8003f80 <HAL_GetTick>
 8004f14:	0003      	movs	r3, r0
 8004f16:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f18:	e008      	b.n	8004f2c <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f1a:	f7ff f831 	bl	8003f80 <HAL_GetTick>
 8004f1e:	0002      	movs	r2, r0
 8004f20:	693b      	ldr	r3, [r7, #16]
 8004f22:	1ad3      	subs	r3, r2, r3
 8004f24:	2b02      	cmp	r3, #2
 8004f26:	d901      	bls.n	8004f2c <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8004f28:	2303      	movs	r3, #3
 8004f2a:	e092      	b.n	8005052 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f2c:	4b4b      	ldr	r3, [pc, #300]	; (800505c <HAL_RCC_OscConfig+0x604>)
 8004f2e:	681a      	ldr	r2, [r3, #0]
 8004f30:	2380      	movs	r3, #128	; 0x80
 8004f32:	049b      	lsls	r3, r3, #18
 8004f34:	4013      	ands	r3, r2
 8004f36:	d1f0      	bne.n	8004f1a <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004f38:	4b48      	ldr	r3, [pc, #288]	; (800505c <HAL_RCC_OscConfig+0x604>)
 8004f3a:	68db      	ldr	r3, [r3, #12]
 8004f3c:	4a4c      	ldr	r2, [pc, #304]	; (8005070 <HAL_RCC_OscConfig+0x618>)
 8004f3e:	4013      	ands	r3, r2
 8004f40:	0019      	movs	r1, r3
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6a1a      	ldr	r2, [r3, #32]
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f4a:	431a      	orrs	r2, r3
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f50:	021b      	lsls	r3, r3, #8
 8004f52:	431a      	orrs	r2, r3
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f58:	431a      	orrs	r2, r3
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f5e:	431a      	orrs	r2, r3
 8004f60:	4b3e      	ldr	r3, [pc, #248]	; (800505c <HAL_RCC_OscConfig+0x604>)
 8004f62:	430a      	orrs	r2, r1
 8004f64:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f66:	4b3d      	ldr	r3, [pc, #244]	; (800505c <HAL_RCC_OscConfig+0x604>)
 8004f68:	681a      	ldr	r2, [r3, #0]
 8004f6a:	4b3c      	ldr	r3, [pc, #240]	; (800505c <HAL_RCC_OscConfig+0x604>)
 8004f6c:	2180      	movs	r1, #128	; 0x80
 8004f6e:	0449      	lsls	r1, r1, #17
 8004f70:	430a      	orrs	r2, r1
 8004f72:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8004f74:	4b39      	ldr	r3, [pc, #228]	; (800505c <HAL_RCC_OscConfig+0x604>)
 8004f76:	68da      	ldr	r2, [r3, #12]
 8004f78:	4b38      	ldr	r3, [pc, #224]	; (800505c <HAL_RCC_OscConfig+0x604>)
 8004f7a:	2180      	movs	r1, #128	; 0x80
 8004f7c:	0549      	lsls	r1, r1, #21
 8004f7e:	430a      	orrs	r2, r1
 8004f80:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f82:	f7fe fffd 	bl	8003f80 <HAL_GetTick>
 8004f86:	0003      	movs	r3, r0
 8004f88:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f8a:	e008      	b.n	8004f9e <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f8c:	f7fe fff8 	bl	8003f80 <HAL_GetTick>
 8004f90:	0002      	movs	r2, r0
 8004f92:	693b      	ldr	r3, [r7, #16]
 8004f94:	1ad3      	subs	r3, r2, r3
 8004f96:	2b02      	cmp	r3, #2
 8004f98:	d901      	bls.n	8004f9e <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8004f9a:	2303      	movs	r3, #3
 8004f9c:	e059      	b.n	8005052 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f9e:	4b2f      	ldr	r3, [pc, #188]	; (800505c <HAL_RCC_OscConfig+0x604>)
 8004fa0:	681a      	ldr	r2, [r3, #0]
 8004fa2:	2380      	movs	r3, #128	; 0x80
 8004fa4:	049b      	lsls	r3, r3, #18
 8004fa6:	4013      	ands	r3, r2
 8004fa8:	d0f0      	beq.n	8004f8c <HAL_RCC_OscConfig+0x534>
 8004faa:	e051      	b.n	8005050 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fac:	4b2b      	ldr	r3, [pc, #172]	; (800505c <HAL_RCC_OscConfig+0x604>)
 8004fae:	681a      	ldr	r2, [r3, #0]
 8004fb0:	4b2a      	ldr	r3, [pc, #168]	; (800505c <HAL_RCC_OscConfig+0x604>)
 8004fb2:	492e      	ldr	r1, [pc, #184]	; (800506c <HAL_RCC_OscConfig+0x614>)
 8004fb4:	400a      	ands	r2, r1
 8004fb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fb8:	f7fe ffe2 	bl	8003f80 <HAL_GetTick>
 8004fbc:	0003      	movs	r3, r0
 8004fbe:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004fc0:	e008      	b.n	8004fd4 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fc2:	f7fe ffdd 	bl	8003f80 <HAL_GetTick>
 8004fc6:	0002      	movs	r2, r0
 8004fc8:	693b      	ldr	r3, [r7, #16]
 8004fca:	1ad3      	subs	r3, r2, r3
 8004fcc:	2b02      	cmp	r3, #2
 8004fce:	d901      	bls.n	8004fd4 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8004fd0:	2303      	movs	r3, #3
 8004fd2:	e03e      	b.n	8005052 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004fd4:	4b21      	ldr	r3, [pc, #132]	; (800505c <HAL_RCC_OscConfig+0x604>)
 8004fd6:	681a      	ldr	r2, [r3, #0]
 8004fd8:	2380      	movs	r3, #128	; 0x80
 8004fda:	049b      	lsls	r3, r3, #18
 8004fdc:	4013      	ands	r3, r2
 8004fde:	d1f0      	bne.n	8004fc2 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8004fe0:	4b1e      	ldr	r3, [pc, #120]	; (800505c <HAL_RCC_OscConfig+0x604>)
 8004fe2:	68da      	ldr	r2, [r3, #12]
 8004fe4:	4b1d      	ldr	r3, [pc, #116]	; (800505c <HAL_RCC_OscConfig+0x604>)
 8004fe6:	4923      	ldr	r1, [pc, #140]	; (8005074 <HAL_RCC_OscConfig+0x61c>)
 8004fe8:	400a      	ands	r2, r1
 8004fea:	60da      	str	r2, [r3, #12]
 8004fec:	e030      	b.n	8005050 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	69db      	ldr	r3, [r3, #28]
 8004ff2:	2b01      	cmp	r3, #1
 8004ff4:	d101      	bne.n	8004ffa <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	e02b      	b.n	8005052 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8004ffa:	4b18      	ldr	r3, [pc, #96]	; (800505c <HAL_RCC_OscConfig+0x604>)
 8004ffc:	68db      	ldr	r3, [r3, #12]
 8004ffe:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005000:	697b      	ldr	r3, [r7, #20]
 8005002:	2203      	movs	r2, #3
 8005004:	401a      	ands	r2, r3
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6a1b      	ldr	r3, [r3, #32]
 800500a:	429a      	cmp	r2, r3
 800500c:	d11e      	bne.n	800504c <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800500e:	697b      	ldr	r3, [r7, #20]
 8005010:	2270      	movs	r2, #112	; 0x70
 8005012:	401a      	ands	r2, r3
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005018:	429a      	cmp	r2, r3
 800501a:	d117      	bne.n	800504c <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800501c:	697a      	ldr	r2, [r7, #20]
 800501e:	23fe      	movs	r3, #254	; 0xfe
 8005020:	01db      	lsls	r3, r3, #7
 8005022:	401a      	ands	r2, r3
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005028:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800502a:	429a      	cmp	r2, r3
 800502c:	d10e      	bne.n	800504c <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800502e:	697a      	ldr	r2, [r7, #20]
 8005030:	23f8      	movs	r3, #248	; 0xf8
 8005032:	039b      	lsls	r3, r3, #14
 8005034:	401a      	ands	r2, r3
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800503a:	429a      	cmp	r2, r3
 800503c:	d106      	bne.n	800504c <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800503e:	697b      	ldr	r3, [r7, #20]
 8005040:	0f5b      	lsrs	r3, r3, #29
 8005042:	075a      	lsls	r2, r3, #29
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005048:	429a      	cmp	r2, r3
 800504a:	d001      	beq.n	8005050 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 800504c:	2301      	movs	r3, #1
 800504e:	e000      	b.n	8005052 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8005050:	2300      	movs	r3, #0
}
 8005052:	0018      	movs	r0, r3
 8005054:	46bd      	mov	sp, r7
 8005056:	b008      	add	sp, #32
 8005058:	bd80      	pop	{r7, pc}
 800505a:	46c0      	nop			; (mov r8, r8)
 800505c:	40021000 	.word	0x40021000
 8005060:	40007000 	.word	0x40007000
 8005064:	00001388 	.word	0x00001388
 8005068:	efffffff 	.word	0xefffffff
 800506c:	feffffff 	.word	0xfeffffff
 8005070:	1fc1808c 	.word	0x1fc1808c
 8005074:	effefffc 	.word	0xeffefffc

08005078 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b084      	sub	sp, #16
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
 8005080:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d101      	bne.n	800508c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005088:	2301      	movs	r3, #1
 800508a:	e0e9      	b.n	8005260 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800508c:	4b76      	ldr	r3, [pc, #472]	; (8005268 <HAL_RCC_ClockConfig+0x1f0>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	2207      	movs	r2, #7
 8005092:	4013      	ands	r3, r2
 8005094:	683a      	ldr	r2, [r7, #0]
 8005096:	429a      	cmp	r2, r3
 8005098:	d91e      	bls.n	80050d8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800509a:	4b73      	ldr	r3, [pc, #460]	; (8005268 <HAL_RCC_ClockConfig+0x1f0>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	2207      	movs	r2, #7
 80050a0:	4393      	bics	r3, r2
 80050a2:	0019      	movs	r1, r3
 80050a4:	4b70      	ldr	r3, [pc, #448]	; (8005268 <HAL_RCC_ClockConfig+0x1f0>)
 80050a6:	683a      	ldr	r2, [r7, #0]
 80050a8:	430a      	orrs	r2, r1
 80050aa:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80050ac:	f7fe ff68 	bl	8003f80 <HAL_GetTick>
 80050b0:	0003      	movs	r3, r0
 80050b2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80050b4:	e009      	b.n	80050ca <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050b6:	f7fe ff63 	bl	8003f80 <HAL_GetTick>
 80050ba:	0002      	movs	r2, r0
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	1ad3      	subs	r3, r2, r3
 80050c0:	4a6a      	ldr	r2, [pc, #424]	; (800526c <HAL_RCC_ClockConfig+0x1f4>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d901      	bls.n	80050ca <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80050c6:	2303      	movs	r3, #3
 80050c8:	e0ca      	b.n	8005260 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80050ca:	4b67      	ldr	r3, [pc, #412]	; (8005268 <HAL_RCC_ClockConfig+0x1f0>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	2207      	movs	r2, #7
 80050d0:	4013      	ands	r3, r2
 80050d2:	683a      	ldr	r2, [r7, #0]
 80050d4:	429a      	cmp	r2, r3
 80050d6:	d1ee      	bne.n	80050b6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	2202      	movs	r2, #2
 80050de:	4013      	ands	r3, r2
 80050e0:	d015      	beq.n	800510e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	2204      	movs	r2, #4
 80050e8:	4013      	ands	r3, r2
 80050ea:	d006      	beq.n	80050fa <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80050ec:	4b60      	ldr	r3, [pc, #384]	; (8005270 <HAL_RCC_ClockConfig+0x1f8>)
 80050ee:	689a      	ldr	r2, [r3, #8]
 80050f0:	4b5f      	ldr	r3, [pc, #380]	; (8005270 <HAL_RCC_ClockConfig+0x1f8>)
 80050f2:	21e0      	movs	r1, #224	; 0xe0
 80050f4:	01c9      	lsls	r1, r1, #7
 80050f6:	430a      	orrs	r2, r1
 80050f8:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80050fa:	4b5d      	ldr	r3, [pc, #372]	; (8005270 <HAL_RCC_ClockConfig+0x1f8>)
 80050fc:	689b      	ldr	r3, [r3, #8]
 80050fe:	4a5d      	ldr	r2, [pc, #372]	; (8005274 <HAL_RCC_ClockConfig+0x1fc>)
 8005100:	4013      	ands	r3, r2
 8005102:	0019      	movs	r1, r3
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	689a      	ldr	r2, [r3, #8]
 8005108:	4b59      	ldr	r3, [pc, #356]	; (8005270 <HAL_RCC_ClockConfig+0x1f8>)
 800510a:	430a      	orrs	r2, r1
 800510c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	2201      	movs	r2, #1
 8005114:	4013      	ands	r3, r2
 8005116:	d057      	beq.n	80051c8 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	685b      	ldr	r3, [r3, #4]
 800511c:	2b01      	cmp	r3, #1
 800511e:	d107      	bne.n	8005130 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005120:	4b53      	ldr	r3, [pc, #332]	; (8005270 <HAL_RCC_ClockConfig+0x1f8>)
 8005122:	681a      	ldr	r2, [r3, #0]
 8005124:	2380      	movs	r3, #128	; 0x80
 8005126:	029b      	lsls	r3, r3, #10
 8005128:	4013      	ands	r3, r2
 800512a:	d12b      	bne.n	8005184 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800512c:	2301      	movs	r3, #1
 800512e:	e097      	b.n	8005260 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	2b02      	cmp	r3, #2
 8005136:	d107      	bne.n	8005148 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005138:	4b4d      	ldr	r3, [pc, #308]	; (8005270 <HAL_RCC_ClockConfig+0x1f8>)
 800513a:	681a      	ldr	r2, [r3, #0]
 800513c:	2380      	movs	r3, #128	; 0x80
 800513e:	049b      	lsls	r3, r3, #18
 8005140:	4013      	ands	r3, r2
 8005142:	d11f      	bne.n	8005184 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005144:	2301      	movs	r3, #1
 8005146:	e08b      	b.n	8005260 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	685b      	ldr	r3, [r3, #4]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d107      	bne.n	8005160 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005150:	4b47      	ldr	r3, [pc, #284]	; (8005270 <HAL_RCC_ClockConfig+0x1f8>)
 8005152:	681a      	ldr	r2, [r3, #0]
 8005154:	2380      	movs	r3, #128	; 0x80
 8005156:	00db      	lsls	r3, r3, #3
 8005158:	4013      	ands	r3, r2
 800515a:	d113      	bne.n	8005184 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800515c:	2301      	movs	r3, #1
 800515e:	e07f      	b.n	8005260 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	685b      	ldr	r3, [r3, #4]
 8005164:	2b03      	cmp	r3, #3
 8005166:	d106      	bne.n	8005176 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005168:	4b41      	ldr	r3, [pc, #260]	; (8005270 <HAL_RCC_ClockConfig+0x1f8>)
 800516a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800516c:	2202      	movs	r2, #2
 800516e:	4013      	ands	r3, r2
 8005170:	d108      	bne.n	8005184 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005172:	2301      	movs	r3, #1
 8005174:	e074      	b.n	8005260 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005176:	4b3e      	ldr	r3, [pc, #248]	; (8005270 <HAL_RCC_ClockConfig+0x1f8>)
 8005178:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800517a:	2202      	movs	r2, #2
 800517c:	4013      	ands	r3, r2
 800517e:	d101      	bne.n	8005184 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005180:	2301      	movs	r3, #1
 8005182:	e06d      	b.n	8005260 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005184:	4b3a      	ldr	r3, [pc, #232]	; (8005270 <HAL_RCC_ClockConfig+0x1f8>)
 8005186:	689b      	ldr	r3, [r3, #8]
 8005188:	2207      	movs	r2, #7
 800518a:	4393      	bics	r3, r2
 800518c:	0019      	movs	r1, r3
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	685a      	ldr	r2, [r3, #4]
 8005192:	4b37      	ldr	r3, [pc, #220]	; (8005270 <HAL_RCC_ClockConfig+0x1f8>)
 8005194:	430a      	orrs	r2, r1
 8005196:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005198:	f7fe fef2 	bl	8003f80 <HAL_GetTick>
 800519c:	0003      	movs	r3, r0
 800519e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051a0:	e009      	b.n	80051b6 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80051a2:	f7fe feed 	bl	8003f80 <HAL_GetTick>
 80051a6:	0002      	movs	r2, r0
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	1ad3      	subs	r3, r2, r3
 80051ac:	4a2f      	ldr	r2, [pc, #188]	; (800526c <HAL_RCC_ClockConfig+0x1f4>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d901      	bls.n	80051b6 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80051b2:	2303      	movs	r3, #3
 80051b4:	e054      	b.n	8005260 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051b6:	4b2e      	ldr	r3, [pc, #184]	; (8005270 <HAL_RCC_ClockConfig+0x1f8>)
 80051b8:	689b      	ldr	r3, [r3, #8]
 80051ba:	2238      	movs	r2, #56	; 0x38
 80051bc:	401a      	ands	r2, r3
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	685b      	ldr	r3, [r3, #4]
 80051c2:	00db      	lsls	r3, r3, #3
 80051c4:	429a      	cmp	r2, r3
 80051c6:	d1ec      	bne.n	80051a2 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80051c8:	4b27      	ldr	r3, [pc, #156]	; (8005268 <HAL_RCC_ClockConfig+0x1f0>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	2207      	movs	r2, #7
 80051ce:	4013      	ands	r3, r2
 80051d0:	683a      	ldr	r2, [r7, #0]
 80051d2:	429a      	cmp	r2, r3
 80051d4:	d21e      	bcs.n	8005214 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051d6:	4b24      	ldr	r3, [pc, #144]	; (8005268 <HAL_RCC_ClockConfig+0x1f0>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	2207      	movs	r2, #7
 80051dc:	4393      	bics	r3, r2
 80051de:	0019      	movs	r1, r3
 80051e0:	4b21      	ldr	r3, [pc, #132]	; (8005268 <HAL_RCC_ClockConfig+0x1f0>)
 80051e2:	683a      	ldr	r2, [r7, #0]
 80051e4:	430a      	orrs	r2, r1
 80051e6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80051e8:	f7fe feca 	bl	8003f80 <HAL_GetTick>
 80051ec:	0003      	movs	r3, r0
 80051ee:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80051f0:	e009      	b.n	8005206 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80051f2:	f7fe fec5 	bl	8003f80 <HAL_GetTick>
 80051f6:	0002      	movs	r2, r0
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	1ad3      	subs	r3, r2, r3
 80051fc:	4a1b      	ldr	r2, [pc, #108]	; (800526c <HAL_RCC_ClockConfig+0x1f4>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d901      	bls.n	8005206 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8005202:	2303      	movs	r3, #3
 8005204:	e02c      	b.n	8005260 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005206:	4b18      	ldr	r3, [pc, #96]	; (8005268 <HAL_RCC_ClockConfig+0x1f0>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	2207      	movs	r2, #7
 800520c:	4013      	ands	r3, r2
 800520e:	683a      	ldr	r2, [r7, #0]
 8005210:	429a      	cmp	r2, r3
 8005212:	d1ee      	bne.n	80051f2 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	2204      	movs	r2, #4
 800521a:	4013      	ands	r3, r2
 800521c:	d009      	beq.n	8005232 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800521e:	4b14      	ldr	r3, [pc, #80]	; (8005270 <HAL_RCC_ClockConfig+0x1f8>)
 8005220:	689b      	ldr	r3, [r3, #8]
 8005222:	4a15      	ldr	r2, [pc, #84]	; (8005278 <HAL_RCC_ClockConfig+0x200>)
 8005224:	4013      	ands	r3, r2
 8005226:	0019      	movs	r1, r3
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	68da      	ldr	r2, [r3, #12]
 800522c:	4b10      	ldr	r3, [pc, #64]	; (8005270 <HAL_RCC_ClockConfig+0x1f8>)
 800522e:	430a      	orrs	r2, r1
 8005230:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8005232:	f000 f829 	bl	8005288 <HAL_RCC_GetSysClockFreq>
 8005236:	0001      	movs	r1, r0
 8005238:	4b0d      	ldr	r3, [pc, #52]	; (8005270 <HAL_RCC_ClockConfig+0x1f8>)
 800523a:	689b      	ldr	r3, [r3, #8]
 800523c:	0a1b      	lsrs	r3, r3, #8
 800523e:	220f      	movs	r2, #15
 8005240:	401a      	ands	r2, r3
 8005242:	4b0e      	ldr	r3, [pc, #56]	; (800527c <HAL_RCC_ClockConfig+0x204>)
 8005244:	0092      	lsls	r2, r2, #2
 8005246:	58d3      	ldr	r3, [r2, r3]
 8005248:	221f      	movs	r2, #31
 800524a:	4013      	ands	r3, r2
 800524c:	000a      	movs	r2, r1
 800524e:	40da      	lsrs	r2, r3
 8005250:	4b0b      	ldr	r3, [pc, #44]	; (8005280 <HAL_RCC_ClockConfig+0x208>)
 8005252:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005254:	4b0b      	ldr	r3, [pc, #44]	; (8005284 <HAL_RCC_ClockConfig+0x20c>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	0018      	movs	r0, r3
 800525a:	f7fe fe35 	bl	8003ec8 <HAL_InitTick>
 800525e:	0003      	movs	r3, r0
}
 8005260:	0018      	movs	r0, r3
 8005262:	46bd      	mov	sp, r7
 8005264:	b004      	add	sp, #16
 8005266:	bd80      	pop	{r7, pc}
 8005268:	40022000 	.word	0x40022000
 800526c:	00001388 	.word	0x00001388
 8005270:	40021000 	.word	0x40021000
 8005274:	fffff0ff 	.word	0xfffff0ff
 8005278:	ffff8fff 	.word	0xffff8fff
 800527c:	0800bea8 	.word	0x0800bea8
 8005280:	20000048 	.word	0x20000048
 8005284:	2000004c 	.word	0x2000004c

08005288 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b086      	sub	sp, #24
 800528c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800528e:	4b3c      	ldr	r3, [pc, #240]	; (8005380 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005290:	689b      	ldr	r3, [r3, #8]
 8005292:	2238      	movs	r2, #56	; 0x38
 8005294:	4013      	ands	r3, r2
 8005296:	d10f      	bne.n	80052b8 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8005298:	4b39      	ldr	r3, [pc, #228]	; (8005380 <HAL_RCC_GetSysClockFreq+0xf8>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	0adb      	lsrs	r3, r3, #11
 800529e:	2207      	movs	r2, #7
 80052a0:	4013      	ands	r3, r2
 80052a2:	2201      	movs	r2, #1
 80052a4:	409a      	lsls	r2, r3
 80052a6:	0013      	movs	r3, r2
 80052a8:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80052aa:	6839      	ldr	r1, [r7, #0]
 80052ac:	4835      	ldr	r0, [pc, #212]	; (8005384 <HAL_RCC_GetSysClockFreq+0xfc>)
 80052ae:	f7fa ff4d 	bl	800014c <__udivsi3>
 80052b2:	0003      	movs	r3, r0
 80052b4:	613b      	str	r3, [r7, #16]
 80052b6:	e05d      	b.n	8005374 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80052b8:	4b31      	ldr	r3, [pc, #196]	; (8005380 <HAL_RCC_GetSysClockFreq+0xf8>)
 80052ba:	689b      	ldr	r3, [r3, #8]
 80052bc:	2238      	movs	r2, #56	; 0x38
 80052be:	4013      	ands	r3, r2
 80052c0:	2b08      	cmp	r3, #8
 80052c2:	d102      	bne.n	80052ca <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80052c4:	4b30      	ldr	r3, [pc, #192]	; (8005388 <HAL_RCC_GetSysClockFreq+0x100>)
 80052c6:	613b      	str	r3, [r7, #16]
 80052c8:	e054      	b.n	8005374 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80052ca:	4b2d      	ldr	r3, [pc, #180]	; (8005380 <HAL_RCC_GetSysClockFreq+0xf8>)
 80052cc:	689b      	ldr	r3, [r3, #8]
 80052ce:	2238      	movs	r2, #56	; 0x38
 80052d0:	4013      	ands	r3, r2
 80052d2:	2b10      	cmp	r3, #16
 80052d4:	d138      	bne.n	8005348 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80052d6:	4b2a      	ldr	r3, [pc, #168]	; (8005380 <HAL_RCC_GetSysClockFreq+0xf8>)
 80052d8:	68db      	ldr	r3, [r3, #12]
 80052da:	2203      	movs	r2, #3
 80052dc:	4013      	ands	r3, r2
 80052de:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80052e0:	4b27      	ldr	r3, [pc, #156]	; (8005380 <HAL_RCC_GetSysClockFreq+0xf8>)
 80052e2:	68db      	ldr	r3, [r3, #12]
 80052e4:	091b      	lsrs	r3, r3, #4
 80052e6:	2207      	movs	r2, #7
 80052e8:	4013      	ands	r3, r2
 80052ea:	3301      	adds	r3, #1
 80052ec:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	2b03      	cmp	r3, #3
 80052f2:	d10d      	bne.n	8005310 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80052f4:	68b9      	ldr	r1, [r7, #8]
 80052f6:	4824      	ldr	r0, [pc, #144]	; (8005388 <HAL_RCC_GetSysClockFreq+0x100>)
 80052f8:	f7fa ff28 	bl	800014c <__udivsi3>
 80052fc:	0003      	movs	r3, r0
 80052fe:	0019      	movs	r1, r3
 8005300:	4b1f      	ldr	r3, [pc, #124]	; (8005380 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005302:	68db      	ldr	r3, [r3, #12]
 8005304:	0a1b      	lsrs	r3, r3, #8
 8005306:	227f      	movs	r2, #127	; 0x7f
 8005308:	4013      	ands	r3, r2
 800530a:	434b      	muls	r3, r1
 800530c:	617b      	str	r3, [r7, #20]
        break;
 800530e:	e00d      	b.n	800532c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8005310:	68b9      	ldr	r1, [r7, #8]
 8005312:	481c      	ldr	r0, [pc, #112]	; (8005384 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005314:	f7fa ff1a 	bl	800014c <__udivsi3>
 8005318:	0003      	movs	r3, r0
 800531a:	0019      	movs	r1, r3
 800531c:	4b18      	ldr	r3, [pc, #96]	; (8005380 <HAL_RCC_GetSysClockFreq+0xf8>)
 800531e:	68db      	ldr	r3, [r3, #12]
 8005320:	0a1b      	lsrs	r3, r3, #8
 8005322:	227f      	movs	r2, #127	; 0x7f
 8005324:	4013      	ands	r3, r2
 8005326:	434b      	muls	r3, r1
 8005328:	617b      	str	r3, [r7, #20]
        break;
 800532a:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800532c:	4b14      	ldr	r3, [pc, #80]	; (8005380 <HAL_RCC_GetSysClockFreq+0xf8>)
 800532e:	68db      	ldr	r3, [r3, #12]
 8005330:	0f5b      	lsrs	r3, r3, #29
 8005332:	2207      	movs	r2, #7
 8005334:	4013      	ands	r3, r2
 8005336:	3301      	adds	r3, #1
 8005338:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800533a:	6879      	ldr	r1, [r7, #4]
 800533c:	6978      	ldr	r0, [r7, #20]
 800533e:	f7fa ff05 	bl	800014c <__udivsi3>
 8005342:	0003      	movs	r3, r0
 8005344:	613b      	str	r3, [r7, #16]
 8005346:	e015      	b.n	8005374 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8005348:	4b0d      	ldr	r3, [pc, #52]	; (8005380 <HAL_RCC_GetSysClockFreq+0xf8>)
 800534a:	689b      	ldr	r3, [r3, #8]
 800534c:	2238      	movs	r2, #56	; 0x38
 800534e:	4013      	ands	r3, r2
 8005350:	2b20      	cmp	r3, #32
 8005352:	d103      	bne.n	800535c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8005354:	2380      	movs	r3, #128	; 0x80
 8005356:	021b      	lsls	r3, r3, #8
 8005358:	613b      	str	r3, [r7, #16]
 800535a:	e00b      	b.n	8005374 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800535c:	4b08      	ldr	r3, [pc, #32]	; (8005380 <HAL_RCC_GetSysClockFreq+0xf8>)
 800535e:	689b      	ldr	r3, [r3, #8]
 8005360:	2238      	movs	r2, #56	; 0x38
 8005362:	4013      	ands	r3, r2
 8005364:	2b18      	cmp	r3, #24
 8005366:	d103      	bne.n	8005370 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8005368:	23fa      	movs	r3, #250	; 0xfa
 800536a:	01db      	lsls	r3, r3, #7
 800536c:	613b      	str	r3, [r7, #16]
 800536e:	e001      	b.n	8005374 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8005370:	2300      	movs	r3, #0
 8005372:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005374:	693b      	ldr	r3, [r7, #16]
}
 8005376:	0018      	movs	r0, r3
 8005378:	46bd      	mov	sp, r7
 800537a:	b006      	add	sp, #24
 800537c:	bd80      	pop	{r7, pc}
 800537e:	46c0      	nop			; (mov r8, r8)
 8005380:	40021000 	.word	0x40021000
 8005384:	00f42400 	.word	0x00f42400
 8005388:	007a1200 	.word	0x007a1200

0800538c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005390:	4b02      	ldr	r3, [pc, #8]	; (800539c <HAL_RCC_GetHCLKFreq+0x10>)
 8005392:	681b      	ldr	r3, [r3, #0]
}
 8005394:	0018      	movs	r0, r3
 8005396:	46bd      	mov	sp, r7
 8005398:	bd80      	pop	{r7, pc}
 800539a:	46c0      	nop			; (mov r8, r8)
 800539c:	20000048 	.word	0x20000048

080053a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80053a0:	b5b0      	push	{r4, r5, r7, lr}
 80053a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80053a4:	f7ff fff2 	bl	800538c <HAL_RCC_GetHCLKFreq>
 80053a8:	0004      	movs	r4, r0
 80053aa:	f7ff fb49 	bl	8004a40 <LL_RCC_GetAPB1Prescaler>
 80053ae:	0003      	movs	r3, r0
 80053b0:	0b1a      	lsrs	r2, r3, #12
 80053b2:	4b05      	ldr	r3, [pc, #20]	; (80053c8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80053b4:	0092      	lsls	r2, r2, #2
 80053b6:	58d3      	ldr	r3, [r2, r3]
 80053b8:	221f      	movs	r2, #31
 80053ba:	4013      	ands	r3, r2
 80053bc:	40dc      	lsrs	r4, r3
 80053be:	0023      	movs	r3, r4
}
 80053c0:	0018      	movs	r0, r3
 80053c2:	46bd      	mov	sp, r7
 80053c4:	bdb0      	pop	{r4, r5, r7, pc}
 80053c6:	46c0      	nop			; (mov r8, r8)
 80053c8:	0800bee8 	.word	0x0800bee8

080053cc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b086      	sub	sp, #24
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80053d4:	2313      	movs	r3, #19
 80053d6:	18fb      	adds	r3, r7, r3
 80053d8:	2200      	movs	r2, #0
 80053da:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80053dc:	2312      	movs	r3, #18
 80053de:	18fb      	adds	r3, r7, r3
 80053e0:	2200      	movs	r2, #0
 80053e2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681a      	ldr	r2, [r3, #0]
 80053e8:	2380      	movs	r3, #128	; 0x80
 80053ea:	029b      	lsls	r3, r3, #10
 80053ec:	4013      	ands	r3, r2
 80053ee:	d100      	bne.n	80053f2 <HAL_RCCEx_PeriphCLKConfig+0x26>
 80053f0:	e0a3      	b.n	800553a <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80053f2:	2011      	movs	r0, #17
 80053f4:	183b      	adds	r3, r7, r0
 80053f6:	2200      	movs	r2, #0
 80053f8:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80053fa:	4b86      	ldr	r3, [pc, #536]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80053fc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80053fe:	2380      	movs	r3, #128	; 0x80
 8005400:	055b      	lsls	r3, r3, #21
 8005402:	4013      	ands	r3, r2
 8005404:	d110      	bne.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005406:	4b83      	ldr	r3, [pc, #524]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005408:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800540a:	4b82      	ldr	r3, [pc, #520]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800540c:	2180      	movs	r1, #128	; 0x80
 800540e:	0549      	lsls	r1, r1, #21
 8005410:	430a      	orrs	r2, r1
 8005412:	63da      	str	r2, [r3, #60]	; 0x3c
 8005414:	4b7f      	ldr	r3, [pc, #508]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005416:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005418:	2380      	movs	r3, #128	; 0x80
 800541a:	055b      	lsls	r3, r3, #21
 800541c:	4013      	ands	r3, r2
 800541e:	60bb      	str	r3, [r7, #8]
 8005420:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005422:	183b      	adds	r3, r7, r0
 8005424:	2201      	movs	r2, #1
 8005426:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005428:	4b7b      	ldr	r3, [pc, #492]	; (8005618 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800542a:	681a      	ldr	r2, [r3, #0]
 800542c:	4b7a      	ldr	r3, [pc, #488]	; (8005618 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800542e:	2180      	movs	r1, #128	; 0x80
 8005430:	0049      	lsls	r1, r1, #1
 8005432:	430a      	orrs	r2, r1
 8005434:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005436:	f7fe fda3 	bl	8003f80 <HAL_GetTick>
 800543a:	0003      	movs	r3, r0
 800543c:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800543e:	e00b      	b.n	8005458 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005440:	f7fe fd9e 	bl	8003f80 <HAL_GetTick>
 8005444:	0002      	movs	r2, r0
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	1ad3      	subs	r3, r2, r3
 800544a:	2b02      	cmp	r3, #2
 800544c:	d904      	bls.n	8005458 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800544e:	2313      	movs	r3, #19
 8005450:	18fb      	adds	r3, r7, r3
 8005452:	2203      	movs	r2, #3
 8005454:	701a      	strb	r2, [r3, #0]
        break;
 8005456:	e005      	b.n	8005464 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005458:	4b6f      	ldr	r3, [pc, #444]	; (8005618 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800545a:	681a      	ldr	r2, [r3, #0]
 800545c:	2380      	movs	r3, #128	; 0x80
 800545e:	005b      	lsls	r3, r3, #1
 8005460:	4013      	ands	r3, r2
 8005462:	d0ed      	beq.n	8005440 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8005464:	2313      	movs	r3, #19
 8005466:	18fb      	adds	r3, r7, r3
 8005468:	781b      	ldrb	r3, [r3, #0]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d154      	bne.n	8005518 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800546e:	4b69      	ldr	r3, [pc, #420]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005470:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005472:	23c0      	movs	r3, #192	; 0xc0
 8005474:	009b      	lsls	r3, r3, #2
 8005476:	4013      	ands	r3, r2
 8005478:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800547a:	697b      	ldr	r3, [r7, #20]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d019      	beq.n	80054b4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	699b      	ldr	r3, [r3, #24]
 8005484:	697a      	ldr	r2, [r7, #20]
 8005486:	429a      	cmp	r2, r3
 8005488:	d014      	beq.n	80054b4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800548a:	4b62      	ldr	r3, [pc, #392]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800548c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800548e:	4a63      	ldr	r2, [pc, #396]	; (800561c <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8005490:	4013      	ands	r3, r2
 8005492:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005494:	4b5f      	ldr	r3, [pc, #380]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005496:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005498:	4b5e      	ldr	r3, [pc, #376]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800549a:	2180      	movs	r1, #128	; 0x80
 800549c:	0249      	lsls	r1, r1, #9
 800549e:	430a      	orrs	r2, r1
 80054a0:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80054a2:	4b5c      	ldr	r3, [pc, #368]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80054a4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80054a6:	4b5b      	ldr	r3, [pc, #364]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80054a8:	495d      	ldr	r1, [pc, #372]	; (8005620 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80054aa:	400a      	ands	r2, r1
 80054ac:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80054ae:	4b59      	ldr	r3, [pc, #356]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80054b0:	697a      	ldr	r2, [r7, #20]
 80054b2:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80054b4:	697b      	ldr	r3, [r7, #20]
 80054b6:	2201      	movs	r2, #1
 80054b8:	4013      	ands	r3, r2
 80054ba:	d016      	beq.n	80054ea <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054bc:	f7fe fd60 	bl	8003f80 <HAL_GetTick>
 80054c0:	0003      	movs	r3, r0
 80054c2:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80054c4:	e00c      	b.n	80054e0 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054c6:	f7fe fd5b 	bl	8003f80 <HAL_GetTick>
 80054ca:	0002      	movs	r2, r0
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	1ad3      	subs	r3, r2, r3
 80054d0:	4a54      	ldr	r2, [pc, #336]	; (8005624 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d904      	bls.n	80054e0 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80054d6:	2313      	movs	r3, #19
 80054d8:	18fb      	adds	r3, r7, r3
 80054da:	2203      	movs	r2, #3
 80054dc:	701a      	strb	r2, [r3, #0]
            break;
 80054de:	e004      	b.n	80054ea <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80054e0:	4b4c      	ldr	r3, [pc, #304]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80054e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054e4:	2202      	movs	r2, #2
 80054e6:	4013      	ands	r3, r2
 80054e8:	d0ed      	beq.n	80054c6 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80054ea:	2313      	movs	r3, #19
 80054ec:	18fb      	adds	r3, r7, r3
 80054ee:	781b      	ldrb	r3, [r3, #0]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d10a      	bne.n	800550a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80054f4:	4b47      	ldr	r3, [pc, #284]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80054f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054f8:	4a48      	ldr	r2, [pc, #288]	; (800561c <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80054fa:	4013      	ands	r3, r2
 80054fc:	0019      	movs	r1, r3
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	699a      	ldr	r2, [r3, #24]
 8005502:	4b44      	ldr	r3, [pc, #272]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005504:	430a      	orrs	r2, r1
 8005506:	65da      	str	r2, [r3, #92]	; 0x5c
 8005508:	e00c      	b.n	8005524 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800550a:	2312      	movs	r3, #18
 800550c:	18fb      	adds	r3, r7, r3
 800550e:	2213      	movs	r2, #19
 8005510:	18ba      	adds	r2, r7, r2
 8005512:	7812      	ldrb	r2, [r2, #0]
 8005514:	701a      	strb	r2, [r3, #0]
 8005516:	e005      	b.n	8005524 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005518:	2312      	movs	r3, #18
 800551a:	18fb      	adds	r3, r7, r3
 800551c:	2213      	movs	r2, #19
 800551e:	18ba      	adds	r2, r7, r2
 8005520:	7812      	ldrb	r2, [r2, #0]
 8005522:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005524:	2311      	movs	r3, #17
 8005526:	18fb      	adds	r3, r7, r3
 8005528:	781b      	ldrb	r3, [r3, #0]
 800552a:	2b01      	cmp	r3, #1
 800552c:	d105      	bne.n	800553a <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800552e:	4b39      	ldr	r3, [pc, #228]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005530:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005532:	4b38      	ldr	r3, [pc, #224]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005534:	493c      	ldr	r1, [pc, #240]	; (8005628 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8005536:	400a      	ands	r2, r1
 8005538:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	2201      	movs	r2, #1
 8005540:	4013      	ands	r3, r2
 8005542:	d009      	beq.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005544:	4b33      	ldr	r3, [pc, #204]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005546:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005548:	2203      	movs	r2, #3
 800554a:	4393      	bics	r3, r2
 800554c:	0019      	movs	r1, r3
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	685a      	ldr	r2, [r3, #4]
 8005552:	4b30      	ldr	r3, [pc, #192]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005554:	430a      	orrs	r2, r1
 8005556:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	2202      	movs	r2, #2
 800555e:	4013      	ands	r3, r2
 8005560:	d009      	beq.n	8005576 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005562:	4b2c      	ldr	r3, [pc, #176]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005564:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005566:	220c      	movs	r2, #12
 8005568:	4393      	bics	r3, r2
 800556a:	0019      	movs	r1, r3
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	689a      	ldr	r2, [r3, #8]
 8005570:	4b28      	ldr	r3, [pc, #160]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005572:	430a      	orrs	r2, r1
 8005574:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	2220      	movs	r2, #32
 800557c:	4013      	ands	r3, r2
 800557e:	d009      	beq.n	8005594 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005580:	4b24      	ldr	r3, [pc, #144]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005582:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005584:	4a29      	ldr	r2, [pc, #164]	; (800562c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005586:	4013      	ands	r3, r2
 8005588:	0019      	movs	r1, r3
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	68da      	ldr	r2, [r3, #12]
 800558e:	4b21      	ldr	r3, [pc, #132]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005590:	430a      	orrs	r2, r1
 8005592:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681a      	ldr	r2, [r3, #0]
 8005598:	2380      	movs	r3, #128	; 0x80
 800559a:	01db      	lsls	r3, r3, #7
 800559c:	4013      	ands	r3, r2
 800559e:	d015      	beq.n	80055cc <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80055a0:	4b1c      	ldr	r3, [pc, #112]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80055a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055a4:	009b      	lsls	r3, r3, #2
 80055a6:	0899      	lsrs	r1, r3, #2
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	695a      	ldr	r2, [r3, #20]
 80055ac:	4b19      	ldr	r3, [pc, #100]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80055ae:	430a      	orrs	r2, r1
 80055b0:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	695a      	ldr	r2, [r3, #20]
 80055b6:	2380      	movs	r3, #128	; 0x80
 80055b8:	05db      	lsls	r3, r3, #23
 80055ba:	429a      	cmp	r2, r3
 80055bc:	d106      	bne.n	80055cc <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80055be:	4b15      	ldr	r3, [pc, #84]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80055c0:	68da      	ldr	r2, [r3, #12]
 80055c2:	4b14      	ldr	r3, [pc, #80]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80055c4:	2180      	movs	r1, #128	; 0x80
 80055c6:	0249      	lsls	r1, r1, #9
 80055c8:	430a      	orrs	r2, r1
 80055ca:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681a      	ldr	r2, [r3, #0]
 80055d0:	2380      	movs	r3, #128	; 0x80
 80055d2:	011b      	lsls	r3, r3, #4
 80055d4:	4013      	ands	r3, r2
 80055d6:	d016      	beq.n	8005606 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80055d8:	4b0e      	ldr	r3, [pc, #56]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80055da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055dc:	4a14      	ldr	r2, [pc, #80]	; (8005630 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80055de:	4013      	ands	r3, r2
 80055e0:	0019      	movs	r1, r3
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	691a      	ldr	r2, [r3, #16]
 80055e6:	4b0b      	ldr	r3, [pc, #44]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80055e8:	430a      	orrs	r2, r1
 80055ea:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	691a      	ldr	r2, [r3, #16]
 80055f0:	2380      	movs	r3, #128	; 0x80
 80055f2:	01db      	lsls	r3, r3, #7
 80055f4:	429a      	cmp	r2, r3
 80055f6:	d106      	bne.n	8005606 <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80055f8:	4b06      	ldr	r3, [pc, #24]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80055fa:	68da      	ldr	r2, [r3, #12]
 80055fc:	4b05      	ldr	r3, [pc, #20]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80055fe:	2180      	movs	r1, #128	; 0x80
 8005600:	0249      	lsls	r1, r1, #9
 8005602:	430a      	orrs	r2, r1
 8005604:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8005606:	2312      	movs	r3, #18
 8005608:	18fb      	adds	r3, r7, r3
 800560a:	781b      	ldrb	r3, [r3, #0]
}
 800560c:	0018      	movs	r0, r3
 800560e:	46bd      	mov	sp, r7
 8005610:	b006      	add	sp, #24
 8005612:	bd80      	pop	{r7, pc}
 8005614:	40021000 	.word	0x40021000
 8005618:	40007000 	.word	0x40007000
 800561c:	fffffcff 	.word	0xfffffcff
 8005620:	fffeffff 	.word	0xfffeffff
 8005624:	00001388 	.word	0x00001388
 8005628:	efffffff 	.word	0xefffffff
 800562c:	ffffcfff 	.word	0xffffcfff
 8005630:	ffff3fff 	.word	0xffff3fff

08005634 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005634:	b580      	push	{r7, lr}
 8005636:	b082      	sub	sp, #8
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d101      	bne.n	8005646 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005642:	2301      	movs	r3, #1
 8005644:	e046      	b.n	80056d4 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2284      	movs	r2, #132	; 0x84
 800564a:	589b      	ldr	r3, [r3, r2]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d107      	bne.n	8005660 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2280      	movs	r2, #128	; 0x80
 8005654:	2100      	movs	r1, #0
 8005656:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	0018      	movs	r0, r3
 800565c:	f7fe f9c0 	bl	80039e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2284      	movs	r2, #132	; 0x84
 8005664:	2124      	movs	r1, #36	; 0x24
 8005666:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	681a      	ldr	r2, [r3, #0]
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	2101      	movs	r1, #1
 8005674:	438a      	bics	r2, r1
 8005676:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	0018      	movs	r0, r3
 800567c:	f000 fa4c 	bl	8005b18 <UART_SetConfig>
 8005680:	0003      	movs	r3, r0
 8005682:	2b01      	cmp	r3, #1
 8005684:	d101      	bne.n	800568a <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8005686:	2301      	movs	r3, #1
 8005688:	e024      	b.n	80056d4 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800568e:	2b00      	cmp	r3, #0
 8005690:	d003      	beq.n	800569a <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	0018      	movs	r0, r3
 8005696:	f000 fbe3 	bl	8005e60 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	685a      	ldr	r2, [r3, #4]
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	490d      	ldr	r1, [pc, #52]	; (80056dc <HAL_UART_Init+0xa8>)
 80056a6:	400a      	ands	r2, r1
 80056a8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	689a      	ldr	r2, [r3, #8]
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	212a      	movs	r1, #42	; 0x2a
 80056b6:	438a      	bics	r2, r1
 80056b8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	681a      	ldr	r2, [r3, #0]
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	2101      	movs	r1, #1
 80056c6:	430a      	orrs	r2, r1
 80056c8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	0018      	movs	r0, r3
 80056ce:	f000 fc7b 	bl	8005fc8 <UART_CheckIdleState>
 80056d2:	0003      	movs	r3, r0
}
 80056d4:	0018      	movs	r0, r3
 80056d6:	46bd      	mov	sp, r7
 80056d8:	b002      	add	sp, #8
 80056da:	bd80      	pop	{r7, pc}
 80056dc:	ffffb7ff 	.word	0xffffb7ff

080056e0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b08a      	sub	sp, #40	; 0x28
 80056e4:	af02      	add	r7, sp, #8
 80056e6:	60f8      	str	r0, [r7, #12]
 80056e8:	60b9      	str	r1, [r7, #8]
 80056ea:	603b      	str	r3, [r7, #0]
 80056ec:	1dbb      	adds	r3, r7, #6
 80056ee:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	2284      	movs	r2, #132	; 0x84
 80056f4:	589b      	ldr	r3, [r3, r2]
 80056f6:	2b20      	cmp	r3, #32
 80056f8:	d000      	beq.n	80056fc <HAL_UART_Transmit+0x1c>
 80056fa:	e097      	b.n	800582c <HAL_UART_Transmit+0x14c>
  {
    if ((pData == NULL) || (Size == 0U))
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d003      	beq.n	800570a <HAL_UART_Transmit+0x2a>
 8005702:	1dbb      	adds	r3, r7, #6
 8005704:	881b      	ldrh	r3, [r3, #0]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d101      	bne.n	800570e <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 800570a:	2301      	movs	r3, #1
 800570c:	e08f      	b.n	800582e <HAL_UART_Transmit+0x14e>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	689a      	ldr	r2, [r3, #8]
 8005712:	2380      	movs	r3, #128	; 0x80
 8005714:	015b      	lsls	r3, r3, #5
 8005716:	429a      	cmp	r2, r3
 8005718:	d109      	bne.n	800572e <HAL_UART_Transmit+0x4e>
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	691b      	ldr	r3, [r3, #16]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d105      	bne.n	800572e <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	2201      	movs	r2, #1
 8005726:	4013      	ands	r3, r2
 8005728:	d001      	beq.n	800572e <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 800572a:	2301      	movs	r3, #1
 800572c:	e07f      	b.n	800582e <HAL_UART_Transmit+0x14e>
      }
    }

    __HAL_LOCK(huart);
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	2280      	movs	r2, #128	; 0x80
 8005732:	5c9b      	ldrb	r3, [r3, r2]
 8005734:	2b01      	cmp	r3, #1
 8005736:	d101      	bne.n	800573c <HAL_UART_Transmit+0x5c>
 8005738:	2302      	movs	r3, #2
 800573a:	e078      	b.n	800582e <HAL_UART_Transmit+0x14e>
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	2280      	movs	r2, #128	; 0x80
 8005740:	2101      	movs	r1, #1
 8005742:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	228c      	movs	r2, #140	; 0x8c
 8005748:	2100      	movs	r1, #0
 800574a:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	2284      	movs	r2, #132	; 0x84
 8005750:	2121      	movs	r1, #33	; 0x21
 8005752:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005754:	f7fe fc14 	bl	8003f80 <HAL_GetTick>
 8005758:	0003      	movs	r3, r0
 800575a:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	1dba      	adds	r2, r7, #6
 8005760:	2154      	movs	r1, #84	; 0x54
 8005762:	8812      	ldrh	r2, [r2, #0]
 8005764:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	1dba      	adds	r2, r7, #6
 800576a:	2156      	movs	r1, #86	; 0x56
 800576c:	8812      	ldrh	r2, [r2, #0]
 800576e:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	689a      	ldr	r2, [r3, #8]
 8005774:	2380      	movs	r3, #128	; 0x80
 8005776:	015b      	lsls	r3, r3, #5
 8005778:	429a      	cmp	r2, r3
 800577a:	d108      	bne.n	800578e <HAL_UART_Transmit+0xae>
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	691b      	ldr	r3, [r3, #16]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d104      	bne.n	800578e <HAL_UART_Transmit+0xae>
    {
      pdata8bits  = NULL;
 8005784:	2300      	movs	r3, #0
 8005786:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005788:	68bb      	ldr	r3, [r7, #8]
 800578a:	61bb      	str	r3, [r7, #24]
 800578c:	e003      	b.n	8005796 <HAL_UART_Transmit+0xb6>
    }
    else
    {
      pdata8bits  = pData;
 800578e:	68bb      	ldr	r3, [r7, #8]
 8005790:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005792:	2300      	movs	r3, #0
 8005794:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	2280      	movs	r2, #128	; 0x80
 800579a:	2100      	movs	r1, #0
 800579c:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 800579e:	e02c      	b.n	80057fa <HAL_UART_Transmit+0x11a>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80057a0:	697a      	ldr	r2, [r7, #20]
 80057a2:	68f8      	ldr	r0, [r7, #12]
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	9300      	str	r3, [sp, #0]
 80057a8:	0013      	movs	r3, r2
 80057aa:	2200      	movs	r2, #0
 80057ac:	2180      	movs	r1, #128	; 0x80
 80057ae:	f000 fc55 	bl	800605c <UART_WaitOnFlagUntilTimeout>
 80057b2:	1e03      	subs	r3, r0, #0
 80057b4:	d001      	beq.n	80057ba <HAL_UART_Transmit+0xda>
      {
        return HAL_TIMEOUT;
 80057b6:	2303      	movs	r3, #3
 80057b8:	e039      	b.n	800582e <HAL_UART_Transmit+0x14e>
      }
      if (pdata8bits == NULL)
 80057ba:	69fb      	ldr	r3, [r7, #28]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d10b      	bne.n	80057d8 <HAL_UART_Transmit+0xf8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80057c0:	69bb      	ldr	r3, [r7, #24]
 80057c2:	881b      	ldrh	r3, [r3, #0]
 80057c4:	001a      	movs	r2, r3
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	05d2      	lsls	r2, r2, #23
 80057cc:	0dd2      	lsrs	r2, r2, #23
 80057ce:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80057d0:	69bb      	ldr	r3, [r7, #24]
 80057d2:	3302      	adds	r3, #2
 80057d4:	61bb      	str	r3, [r7, #24]
 80057d6:	e007      	b.n	80057e8 <HAL_UART_Transmit+0x108>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80057d8:	69fb      	ldr	r3, [r7, #28]
 80057da:	781a      	ldrb	r2, [r3, #0]
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80057e2:	69fb      	ldr	r3, [r7, #28]
 80057e4:	3301      	adds	r3, #1
 80057e6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	2256      	movs	r2, #86	; 0x56
 80057ec:	5a9b      	ldrh	r3, [r3, r2]
 80057ee:	b29b      	uxth	r3, r3
 80057f0:	3b01      	subs	r3, #1
 80057f2:	b299      	uxth	r1, r3
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	2256      	movs	r2, #86	; 0x56
 80057f8:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	2256      	movs	r2, #86	; 0x56
 80057fe:	5a9b      	ldrh	r3, [r3, r2]
 8005800:	b29b      	uxth	r3, r3
 8005802:	2b00      	cmp	r3, #0
 8005804:	d1cc      	bne.n	80057a0 <HAL_UART_Transmit+0xc0>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005806:	697a      	ldr	r2, [r7, #20]
 8005808:	68f8      	ldr	r0, [r7, #12]
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	9300      	str	r3, [sp, #0]
 800580e:	0013      	movs	r3, r2
 8005810:	2200      	movs	r2, #0
 8005812:	2140      	movs	r1, #64	; 0x40
 8005814:	f000 fc22 	bl	800605c <UART_WaitOnFlagUntilTimeout>
 8005818:	1e03      	subs	r3, r0, #0
 800581a:	d001      	beq.n	8005820 <HAL_UART_Transmit+0x140>
    {
      return HAL_TIMEOUT;
 800581c:	2303      	movs	r3, #3
 800581e:	e006      	b.n	800582e <HAL_UART_Transmit+0x14e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	2284      	movs	r2, #132	; 0x84
 8005824:	2120      	movs	r1, #32
 8005826:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8005828:	2300      	movs	r3, #0
 800582a:	e000      	b.n	800582e <HAL_UART_Transmit+0x14e>
  }
  else
  {
    return HAL_BUSY;
 800582c:	2302      	movs	r3, #2
  }
}
 800582e:	0018      	movs	r0, r3
 8005830:	46bd      	mov	sp, r7
 8005832:	b008      	add	sp, #32
 8005834:	bd80      	pop	{r7, pc}
	...

08005838 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b08a      	sub	sp, #40	; 0x28
 800583c:	af02      	add	r7, sp, #8
 800583e:	60f8      	str	r0, [r7, #12]
 8005840:	60b9      	str	r1, [r7, #8]
 8005842:	603b      	str	r3, [r7, #0]
 8005844:	1dbb      	adds	r3, r7, #6
 8005846:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	2288      	movs	r2, #136	; 0x88
 800584c:	589b      	ldr	r3, [r3, r2]
 800584e:	2b20      	cmp	r3, #32
 8005850:	d000      	beq.n	8005854 <HAL_UART_Receive+0x1c>
 8005852:	e0db      	b.n	8005a0c <HAL_UART_Receive+0x1d4>
  {
    if ((pData == NULL) || (Size == 0U))
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d003      	beq.n	8005862 <HAL_UART_Receive+0x2a>
 800585a:	1dbb      	adds	r3, r7, #6
 800585c:	881b      	ldrh	r3, [r3, #0]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d101      	bne.n	8005866 <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 8005862:	2301      	movs	r3, #1
 8005864:	e0d3      	b.n	8005a0e <HAL_UART_Receive+0x1d6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	689a      	ldr	r2, [r3, #8]
 800586a:	2380      	movs	r3, #128	; 0x80
 800586c:	015b      	lsls	r3, r3, #5
 800586e:	429a      	cmp	r2, r3
 8005870:	d109      	bne.n	8005886 <HAL_UART_Receive+0x4e>
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	691b      	ldr	r3, [r3, #16]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d105      	bne.n	8005886 <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	2201      	movs	r2, #1
 800587e:	4013      	ands	r3, r2
 8005880:	d001      	beq.n	8005886 <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 8005882:	2301      	movs	r3, #1
 8005884:	e0c3      	b.n	8005a0e <HAL_UART_Receive+0x1d6>
      }
    }

    __HAL_LOCK(huart);
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	2280      	movs	r2, #128	; 0x80
 800588a:	5c9b      	ldrb	r3, [r3, r2]
 800588c:	2b01      	cmp	r3, #1
 800588e:	d101      	bne.n	8005894 <HAL_UART_Receive+0x5c>
 8005890:	2302      	movs	r3, #2
 8005892:	e0bc      	b.n	8005a0e <HAL_UART_Receive+0x1d6>
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	2280      	movs	r2, #128	; 0x80
 8005898:	2101      	movs	r1, #1
 800589a:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	228c      	movs	r2, #140	; 0x8c
 80058a0:	2100      	movs	r1, #0
 80058a2:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	2288      	movs	r2, #136	; 0x88
 80058a8:	2122      	movs	r1, #34	; 0x22
 80058aa:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	2200      	movs	r2, #0
 80058b0:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80058b2:	f7fe fb65 	bl	8003f80 <HAL_GetTick>
 80058b6:	0003      	movs	r3, r0
 80058b8:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	1dba      	adds	r2, r7, #6
 80058be:	215c      	movs	r1, #92	; 0x5c
 80058c0:	8812      	ldrh	r2, [r2, #0]
 80058c2:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	1dba      	adds	r2, r7, #6
 80058c8:	215e      	movs	r1, #94	; 0x5e
 80058ca:	8812      	ldrh	r2, [r2, #0]
 80058cc:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	689a      	ldr	r2, [r3, #8]
 80058d2:	2380      	movs	r3, #128	; 0x80
 80058d4:	015b      	lsls	r3, r3, #5
 80058d6:	429a      	cmp	r2, r3
 80058d8:	d10d      	bne.n	80058f6 <HAL_UART_Receive+0xbe>
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	691b      	ldr	r3, [r3, #16]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d104      	bne.n	80058ec <HAL_UART_Receive+0xb4>
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	2260      	movs	r2, #96	; 0x60
 80058e6:	494c      	ldr	r1, [pc, #304]	; (8005a18 <HAL_UART_Receive+0x1e0>)
 80058e8:	5299      	strh	r1, [r3, r2]
 80058ea:	e02e      	b.n	800594a <HAL_UART_Receive+0x112>
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	2260      	movs	r2, #96	; 0x60
 80058f0:	21ff      	movs	r1, #255	; 0xff
 80058f2:	5299      	strh	r1, [r3, r2]
 80058f4:	e029      	b.n	800594a <HAL_UART_Receive+0x112>
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	689b      	ldr	r3, [r3, #8]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d10d      	bne.n	800591a <HAL_UART_Receive+0xe2>
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	691b      	ldr	r3, [r3, #16]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d104      	bne.n	8005910 <HAL_UART_Receive+0xd8>
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	2260      	movs	r2, #96	; 0x60
 800590a:	21ff      	movs	r1, #255	; 0xff
 800590c:	5299      	strh	r1, [r3, r2]
 800590e:	e01c      	b.n	800594a <HAL_UART_Receive+0x112>
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	2260      	movs	r2, #96	; 0x60
 8005914:	217f      	movs	r1, #127	; 0x7f
 8005916:	5299      	strh	r1, [r3, r2]
 8005918:	e017      	b.n	800594a <HAL_UART_Receive+0x112>
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	689a      	ldr	r2, [r3, #8]
 800591e:	2380      	movs	r3, #128	; 0x80
 8005920:	055b      	lsls	r3, r3, #21
 8005922:	429a      	cmp	r2, r3
 8005924:	d10d      	bne.n	8005942 <HAL_UART_Receive+0x10a>
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	691b      	ldr	r3, [r3, #16]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d104      	bne.n	8005938 <HAL_UART_Receive+0x100>
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	2260      	movs	r2, #96	; 0x60
 8005932:	217f      	movs	r1, #127	; 0x7f
 8005934:	5299      	strh	r1, [r3, r2]
 8005936:	e008      	b.n	800594a <HAL_UART_Receive+0x112>
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	2260      	movs	r2, #96	; 0x60
 800593c:	213f      	movs	r1, #63	; 0x3f
 800593e:	5299      	strh	r1, [r3, r2]
 8005940:	e003      	b.n	800594a <HAL_UART_Receive+0x112>
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	2260      	movs	r2, #96	; 0x60
 8005946:	2100      	movs	r1, #0
 8005948:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 800594a:	2312      	movs	r3, #18
 800594c:	18fb      	adds	r3, r7, r3
 800594e:	68fa      	ldr	r2, [r7, #12]
 8005950:	2160      	movs	r1, #96	; 0x60
 8005952:	5a52      	ldrh	r2, [r2, r1]
 8005954:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	689a      	ldr	r2, [r3, #8]
 800595a:	2380      	movs	r3, #128	; 0x80
 800595c:	015b      	lsls	r3, r3, #5
 800595e:	429a      	cmp	r2, r3
 8005960:	d108      	bne.n	8005974 <HAL_UART_Receive+0x13c>
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	691b      	ldr	r3, [r3, #16]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d104      	bne.n	8005974 <HAL_UART_Receive+0x13c>
    {
      pdata8bits  = NULL;
 800596a:	2300      	movs	r3, #0
 800596c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800596e:	68bb      	ldr	r3, [r7, #8]
 8005970:	61bb      	str	r3, [r7, #24]
 8005972:	e003      	b.n	800597c <HAL_UART_Receive+0x144>
    }
    else
    {
      pdata8bits  = pData;
 8005974:	68bb      	ldr	r3, [r7, #8]
 8005976:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005978:	2300      	movs	r3, #0
 800597a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	2280      	movs	r2, #128	; 0x80
 8005980:	2100      	movs	r1, #0
 8005982:	5499      	strb	r1, [r3, r2]

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8005984:	e036      	b.n	80059f4 <HAL_UART_Receive+0x1bc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005986:	697a      	ldr	r2, [r7, #20]
 8005988:	68f8      	ldr	r0, [r7, #12]
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	9300      	str	r3, [sp, #0]
 800598e:	0013      	movs	r3, r2
 8005990:	2200      	movs	r2, #0
 8005992:	2120      	movs	r1, #32
 8005994:	f000 fb62 	bl	800605c <UART_WaitOnFlagUntilTimeout>
 8005998:	1e03      	subs	r3, r0, #0
 800599a:	d001      	beq.n	80059a0 <HAL_UART_Receive+0x168>
      {
        return HAL_TIMEOUT;
 800599c:	2303      	movs	r3, #3
 800599e:	e036      	b.n	8005a0e <HAL_UART_Receive+0x1d6>
      }
      if (pdata8bits == NULL)
 80059a0:	69fb      	ldr	r3, [r7, #28]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d10e      	bne.n	80059c4 <HAL_UART_Receive+0x18c>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ac:	b29b      	uxth	r3, r3
 80059ae:	2212      	movs	r2, #18
 80059b0:	18ba      	adds	r2, r7, r2
 80059b2:	8812      	ldrh	r2, [r2, #0]
 80059b4:	4013      	ands	r3, r2
 80059b6:	b29a      	uxth	r2, r3
 80059b8:	69bb      	ldr	r3, [r7, #24]
 80059ba:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80059bc:	69bb      	ldr	r3, [r7, #24]
 80059be:	3302      	adds	r3, #2
 80059c0:	61bb      	str	r3, [r7, #24]
 80059c2:	e00e      	b.n	80059e2 <HAL_UART_Receive+0x1aa>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ca:	b2db      	uxtb	r3, r3
 80059cc:	2212      	movs	r2, #18
 80059ce:	18ba      	adds	r2, r7, r2
 80059d0:	8812      	ldrh	r2, [r2, #0]
 80059d2:	b2d2      	uxtb	r2, r2
 80059d4:	4013      	ands	r3, r2
 80059d6:	b2da      	uxtb	r2, r3
 80059d8:	69fb      	ldr	r3, [r7, #28]
 80059da:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80059dc:	69fb      	ldr	r3, [r7, #28]
 80059de:	3301      	adds	r3, #1
 80059e0:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	225e      	movs	r2, #94	; 0x5e
 80059e6:	5a9b      	ldrh	r3, [r3, r2]
 80059e8:	b29b      	uxth	r3, r3
 80059ea:	3b01      	subs	r3, #1
 80059ec:	b299      	uxth	r1, r3
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	225e      	movs	r2, #94	; 0x5e
 80059f2:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	225e      	movs	r2, #94	; 0x5e
 80059f8:	5a9b      	ldrh	r3, [r3, r2]
 80059fa:	b29b      	uxth	r3, r3
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d1c2      	bne.n	8005986 <HAL_UART_Receive+0x14e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	2288      	movs	r2, #136	; 0x88
 8005a04:	2120      	movs	r1, #32
 8005a06:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8005a08:	2300      	movs	r3, #0
 8005a0a:	e000      	b.n	8005a0e <HAL_UART_Receive+0x1d6>
  }
  else
  {
    return HAL_BUSY;
 8005a0c:	2302      	movs	r3, #2
  }
}
 8005a0e:	0018      	movs	r0, r3
 8005a10:	46bd      	mov	sp, r7
 8005a12:	b008      	add	sp, #32
 8005a14:	bd80      	pop	{r7, pc}
 8005a16:	46c0      	nop			; (mov r8, r8)
 8005a18:	000001ff 	.word	0x000001ff

08005a1c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b088      	sub	sp, #32
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	60f8      	str	r0, [r7, #12]
 8005a24:	60b9      	str	r1, [r7, #8]
 8005a26:	1dbb      	adds	r3, r7, #6
 8005a28:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	2288      	movs	r2, #136	; 0x88
 8005a2e:	589b      	ldr	r3, [r3, r2]
 8005a30:	2b20      	cmp	r3, #32
 8005a32:	d150      	bne.n	8005ad6 <HAL_UART_Receive_DMA+0xba>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d003      	beq.n	8005a42 <HAL_UART_Receive_DMA+0x26>
 8005a3a:	1dbb      	adds	r3, r7, #6
 8005a3c:	881b      	ldrh	r3, [r3, #0]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d101      	bne.n	8005a46 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8005a42:	2301      	movs	r3, #1
 8005a44:	e048      	b.n	8005ad8 <HAL_UART_Receive_DMA+0xbc>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	689a      	ldr	r2, [r3, #8]
 8005a4a:	2380      	movs	r3, #128	; 0x80
 8005a4c:	015b      	lsls	r3, r3, #5
 8005a4e:	429a      	cmp	r2, r3
 8005a50:	d109      	bne.n	8005a66 <HAL_UART_Receive_DMA+0x4a>
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	691b      	ldr	r3, [r3, #16]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d105      	bne.n	8005a66 <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005a5a:	68bb      	ldr	r3, [r7, #8]
 8005a5c:	2201      	movs	r2, #1
 8005a5e:	4013      	ands	r3, r2
 8005a60:	d001      	beq.n	8005a66 <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 8005a62:	2301      	movs	r3, #1
 8005a64:	e038      	b.n	8005ad8 <HAL_UART_Receive_DMA+0xbc>
      }
    }

    __HAL_LOCK(huart);
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	2280      	movs	r2, #128	; 0x80
 8005a6a:	5c9b      	ldrb	r3, [r3, r2]
 8005a6c:	2b01      	cmp	r3, #1
 8005a6e:	d101      	bne.n	8005a74 <HAL_UART_Receive_DMA+0x58>
 8005a70:	2302      	movs	r3, #2
 8005a72:	e031      	b.n	8005ad8 <HAL_UART_Receive_DMA+0xbc>
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	2280      	movs	r2, #128	; 0x80
 8005a78:	2101      	movs	r1, #1
 8005a7a:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	2200      	movs	r2, #0
 8005a80:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	685a      	ldr	r2, [r3, #4]
 8005a88:	2380      	movs	r3, #128	; 0x80
 8005a8a:	041b      	lsls	r3, r3, #16
 8005a8c:	4013      	ands	r3, r2
 8005a8e:	d019      	beq.n	8005ac4 <HAL_UART_Receive_DMA+0xa8>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a90:	f3ef 8310 	mrs	r3, PRIMASK
 8005a94:	613b      	str	r3, [r7, #16]
  return(result);
 8005a96:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005a98:	61fb      	str	r3, [r7, #28]
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a9e:	697b      	ldr	r3, [r7, #20]
 8005aa0:	f383 8810 	msr	PRIMASK, r3
}
 8005aa4:	46c0      	nop			; (mov r8, r8)
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	681a      	ldr	r2, [r3, #0]
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	2180      	movs	r1, #128	; 0x80
 8005ab2:	04c9      	lsls	r1, r1, #19
 8005ab4:	430a      	orrs	r2, r1
 8005ab6:	601a      	str	r2, [r3, #0]
 8005ab8:	69fb      	ldr	r3, [r7, #28]
 8005aba:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005abc:	69bb      	ldr	r3, [r7, #24]
 8005abe:	f383 8810 	msr	PRIMASK, r3
}
 8005ac2:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8005ac4:	1dbb      	adds	r3, r7, #6
 8005ac6:	881a      	ldrh	r2, [r3, #0]
 8005ac8:	68b9      	ldr	r1, [r7, #8]
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	0018      	movs	r0, r3
 8005ace:	f000 fb8d 	bl	80061ec <UART_Start_Receive_DMA>
 8005ad2:	0003      	movs	r3, r0
 8005ad4:	e000      	b.n	8005ad8 <HAL_UART_Receive_DMA+0xbc>
  }
  else
  {
    return HAL_BUSY;
 8005ad6:	2302      	movs	r3, #2
  }
}
 8005ad8:	0018      	movs	r0, r3
 8005ada:	46bd      	mov	sp, r7
 8005adc:	b008      	add	sp, #32
 8005ade:	bd80      	pop	{r7, pc}

08005ae0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b082      	sub	sp, #8
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8005ae8:	46c0      	nop			; (mov r8, r8)
 8005aea:	46bd      	mov	sp, r7
 8005aec:	b002      	add	sp, #8
 8005aee:	bd80      	pop	{r7, pc}

08005af0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b082      	sub	sp, #8
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005af8:	46c0      	nop			; (mov r8, r8)
 8005afa:	46bd      	mov	sp, r7
 8005afc:	b002      	add	sp, #8
 8005afe:	bd80      	pop	{r7, pc}

08005b00 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b082      	sub	sp, #8
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
 8005b08:	000a      	movs	r2, r1
 8005b0a:	1cbb      	adds	r3, r7, #2
 8005b0c:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005b0e:	46c0      	nop			; (mov r8, r8)
 8005b10:	46bd      	mov	sp, r7
 8005b12:	b002      	add	sp, #8
 8005b14:	bd80      	pop	{r7, pc}
	...

08005b18 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b088      	sub	sp, #32
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005b20:	231a      	movs	r3, #26
 8005b22:	18fb      	adds	r3, r7, r3
 8005b24:	2200      	movs	r2, #0
 8005b26:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	689a      	ldr	r2, [r3, #8]
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	691b      	ldr	r3, [r3, #16]
 8005b30:	431a      	orrs	r2, r3
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	695b      	ldr	r3, [r3, #20]
 8005b36:	431a      	orrs	r2, r3
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	69db      	ldr	r3, [r3, #28]
 8005b3c:	4313      	orrs	r3, r2
 8005b3e:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	4abc      	ldr	r2, [pc, #752]	; (8005e38 <UART_SetConfig+0x320>)
 8005b48:	4013      	ands	r3, r2
 8005b4a:	0019      	movs	r1, r3
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	69fa      	ldr	r2, [r7, #28]
 8005b52:	430a      	orrs	r2, r1
 8005b54:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	685b      	ldr	r3, [r3, #4]
 8005b5c:	4ab7      	ldr	r2, [pc, #732]	; (8005e3c <UART_SetConfig+0x324>)
 8005b5e:	4013      	ands	r3, r2
 8005b60:	0019      	movs	r1, r3
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	68da      	ldr	r2, [r3, #12]
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	430a      	orrs	r2, r1
 8005b6c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	699b      	ldr	r3, [r3, #24]
 8005b72:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6a1b      	ldr	r3, [r3, #32]
 8005b78:	69fa      	ldr	r2, [r7, #28]
 8005b7a:	4313      	orrs	r3, r2
 8005b7c:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	689b      	ldr	r3, [r3, #8]
 8005b84:	4aae      	ldr	r2, [pc, #696]	; (8005e40 <UART_SetConfig+0x328>)
 8005b86:	4013      	ands	r3, r2
 8005b88:	0019      	movs	r1, r3
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	69fa      	ldr	r2, [r7, #28]
 8005b90:	430a      	orrs	r2, r1
 8005b92:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b9a:	220f      	movs	r2, #15
 8005b9c:	4393      	bics	r3, r2
 8005b9e:	0019      	movs	r1, r3
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	430a      	orrs	r2, r1
 8005baa:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	4aa4      	ldr	r2, [pc, #656]	; (8005e44 <UART_SetConfig+0x32c>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d127      	bne.n	8005c06 <UART_SetConfig+0xee>
 8005bb6:	4ba4      	ldr	r3, [pc, #656]	; (8005e48 <UART_SetConfig+0x330>)
 8005bb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bba:	2203      	movs	r2, #3
 8005bbc:	4013      	ands	r3, r2
 8005bbe:	2b03      	cmp	r3, #3
 8005bc0:	d017      	beq.n	8005bf2 <UART_SetConfig+0xda>
 8005bc2:	d81b      	bhi.n	8005bfc <UART_SetConfig+0xe4>
 8005bc4:	2b02      	cmp	r3, #2
 8005bc6:	d00a      	beq.n	8005bde <UART_SetConfig+0xc6>
 8005bc8:	d818      	bhi.n	8005bfc <UART_SetConfig+0xe4>
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d002      	beq.n	8005bd4 <UART_SetConfig+0xbc>
 8005bce:	2b01      	cmp	r3, #1
 8005bd0:	d00a      	beq.n	8005be8 <UART_SetConfig+0xd0>
 8005bd2:	e013      	b.n	8005bfc <UART_SetConfig+0xe4>
 8005bd4:	231b      	movs	r3, #27
 8005bd6:	18fb      	adds	r3, r7, r3
 8005bd8:	2200      	movs	r2, #0
 8005bda:	701a      	strb	r2, [r3, #0]
 8005bdc:	e058      	b.n	8005c90 <UART_SetConfig+0x178>
 8005bde:	231b      	movs	r3, #27
 8005be0:	18fb      	adds	r3, r7, r3
 8005be2:	2202      	movs	r2, #2
 8005be4:	701a      	strb	r2, [r3, #0]
 8005be6:	e053      	b.n	8005c90 <UART_SetConfig+0x178>
 8005be8:	231b      	movs	r3, #27
 8005bea:	18fb      	adds	r3, r7, r3
 8005bec:	2204      	movs	r2, #4
 8005bee:	701a      	strb	r2, [r3, #0]
 8005bf0:	e04e      	b.n	8005c90 <UART_SetConfig+0x178>
 8005bf2:	231b      	movs	r3, #27
 8005bf4:	18fb      	adds	r3, r7, r3
 8005bf6:	2208      	movs	r2, #8
 8005bf8:	701a      	strb	r2, [r3, #0]
 8005bfa:	e049      	b.n	8005c90 <UART_SetConfig+0x178>
 8005bfc:	231b      	movs	r3, #27
 8005bfe:	18fb      	adds	r3, r7, r3
 8005c00:	2210      	movs	r2, #16
 8005c02:	701a      	strb	r2, [r3, #0]
 8005c04:	e044      	b.n	8005c90 <UART_SetConfig+0x178>
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	4a90      	ldr	r2, [pc, #576]	; (8005e4c <UART_SetConfig+0x334>)
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d127      	bne.n	8005c60 <UART_SetConfig+0x148>
 8005c10:	4b8d      	ldr	r3, [pc, #564]	; (8005e48 <UART_SetConfig+0x330>)
 8005c12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c14:	220c      	movs	r2, #12
 8005c16:	4013      	ands	r3, r2
 8005c18:	2b0c      	cmp	r3, #12
 8005c1a:	d017      	beq.n	8005c4c <UART_SetConfig+0x134>
 8005c1c:	d81b      	bhi.n	8005c56 <UART_SetConfig+0x13e>
 8005c1e:	2b08      	cmp	r3, #8
 8005c20:	d00a      	beq.n	8005c38 <UART_SetConfig+0x120>
 8005c22:	d818      	bhi.n	8005c56 <UART_SetConfig+0x13e>
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d002      	beq.n	8005c2e <UART_SetConfig+0x116>
 8005c28:	2b04      	cmp	r3, #4
 8005c2a:	d00a      	beq.n	8005c42 <UART_SetConfig+0x12a>
 8005c2c:	e013      	b.n	8005c56 <UART_SetConfig+0x13e>
 8005c2e:	231b      	movs	r3, #27
 8005c30:	18fb      	adds	r3, r7, r3
 8005c32:	2200      	movs	r2, #0
 8005c34:	701a      	strb	r2, [r3, #0]
 8005c36:	e02b      	b.n	8005c90 <UART_SetConfig+0x178>
 8005c38:	231b      	movs	r3, #27
 8005c3a:	18fb      	adds	r3, r7, r3
 8005c3c:	2202      	movs	r2, #2
 8005c3e:	701a      	strb	r2, [r3, #0]
 8005c40:	e026      	b.n	8005c90 <UART_SetConfig+0x178>
 8005c42:	231b      	movs	r3, #27
 8005c44:	18fb      	adds	r3, r7, r3
 8005c46:	2204      	movs	r2, #4
 8005c48:	701a      	strb	r2, [r3, #0]
 8005c4a:	e021      	b.n	8005c90 <UART_SetConfig+0x178>
 8005c4c:	231b      	movs	r3, #27
 8005c4e:	18fb      	adds	r3, r7, r3
 8005c50:	2208      	movs	r2, #8
 8005c52:	701a      	strb	r2, [r3, #0]
 8005c54:	e01c      	b.n	8005c90 <UART_SetConfig+0x178>
 8005c56:	231b      	movs	r3, #27
 8005c58:	18fb      	adds	r3, r7, r3
 8005c5a:	2210      	movs	r2, #16
 8005c5c:	701a      	strb	r2, [r3, #0]
 8005c5e:	e017      	b.n	8005c90 <UART_SetConfig+0x178>
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4a7a      	ldr	r2, [pc, #488]	; (8005e50 <UART_SetConfig+0x338>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d104      	bne.n	8005c74 <UART_SetConfig+0x15c>
 8005c6a:	231b      	movs	r3, #27
 8005c6c:	18fb      	adds	r3, r7, r3
 8005c6e:	2200      	movs	r2, #0
 8005c70:	701a      	strb	r2, [r3, #0]
 8005c72:	e00d      	b.n	8005c90 <UART_SetConfig+0x178>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	4a76      	ldr	r2, [pc, #472]	; (8005e54 <UART_SetConfig+0x33c>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d104      	bne.n	8005c88 <UART_SetConfig+0x170>
 8005c7e:	231b      	movs	r3, #27
 8005c80:	18fb      	adds	r3, r7, r3
 8005c82:	2200      	movs	r2, #0
 8005c84:	701a      	strb	r2, [r3, #0]
 8005c86:	e003      	b.n	8005c90 <UART_SetConfig+0x178>
 8005c88:	231b      	movs	r3, #27
 8005c8a:	18fb      	adds	r3, r7, r3
 8005c8c:	2210      	movs	r2, #16
 8005c8e:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	69da      	ldr	r2, [r3, #28]
 8005c94:	2380      	movs	r3, #128	; 0x80
 8005c96:	021b      	lsls	r3, r3, #8
 8005c98:	429a      	cmp	r2, r3
 8005c9a:	d000      	beq.n	8005c9e <UART_SetConfig+0x186>
 8005c9c:	e065      	b.n	8005d6a <UART_SetConfig+0x252>
  {
    switch (clocksource)
 8005c9e:	231b      	movs	r3, #27
 8005ca0:	18fb      	adds	r3, r7, r3
 8005ca2:	781b      	ldrb	r3, [r3, #0]
 8005ca4:	2b08      	cmp	r3, #8
 8005ca6:	d015      	beq.n	8005cd4 <UART_SetConfig+0x1bc>
 8005ca8:	dc18      	bgt.n	8005cdc <UART_SetConfig+0x1c4>
 8005caa:	2b04      	cmp	r3, #4
 8005cac:	d00d      	beq.n	8005cca <UART_SetConfig+0x1b2>
 8005cae:	dc15      	bgt.n	8005cdc <UART_SetConfig+0x1c4>
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d002      	beq.n	8005cba <UART_SetConfig+0x1a2>
 8005cb4:	2b02      	cmp	r3, #2
 8005cb6:	d005      	beq.n	8005cc4 <UART_SetConfig+0x1ac>
 8005cb8:	e010      	b.n	8005cdc <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005cba:	f7ff fb71 	bl	80053a0 <HAL_RCC_GetPCLK1Freq>
 8005cbe:	0003      	movs	r3, r0
 8005cc0:	617b      	str	r3, [r7, #20]
        break;
 8005cc2:	e012      	b.n	8005cea <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005cc4:	4b64      	ldr	r3, [pc, #400]	; (8005e58 <UART_SetConfig+0x340>)
 8005cc6:	617b      	str	r3, [r7, #20]
        break;
 8005cc8:	e00f      	b.n	8005cea <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005cca:	f7ff fadd 	bl	8005288 <HAL_RCC_GetSysClockFreq>
 8005cce:	0003      	movs	r3, r0
 8005cd0:	617b      	str	r3, [r7, #20]
        break;
 8005cd2:	e00a      	b.n	8005cea <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005cd4:	2380      	movs	r3, #128	; 0x80
 8005cd6:	021b      	lsls	r3, r3, #8
 8005cd8:	617b      	str	r3, [r7, #20]
        break;
 8005cda:	e006      	b.n	8005cea <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8005cdc:	2300      	movs	r3, #0
 8005cde:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005ce0:	231a      	movs	r3, #26
 8005ce2:	18fb      	adds	r3, r7, r3
 8005ce4:	2201      	movs	r2, #1
 8005ce6:	701a      	strb	r2, [r3, #0]
        break;
 8005ce8:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005cea:	697b      	ldr	r3, [r7, #20]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d100      	bne.n	8005cf2 <UART_SetConfig+0x1da>
 8005cf0:	e08d      	b.n	8005e0e <UART_SetConfig+0x2f6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005cf6:	4b59      	ldr	r3, [pc, #356]	; (8005e5c <UART_SetConfig+0x344>)
 8005cf8:	0052      	lsls	r2, r2, #1
 8005cfa:	5ad3      	ldrh	r3, [r2, r3]
 8005cfc:	0019      	movs	r1, r3
 8005cfe:	6978      	ldr	r0, [r7, #20]
 8005d00:	f7fa fa24 	bl	800014c <__udivsi3>
 8005d04:	0003      	movs	r3, r0
 8005d06:	005a      	lsls	r2, r3, #1
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	685b      	ldr	r3, [r3, #4]
 8005d0c:	085b      	lsrs	r3, r3, #1
 8005d0e:	18d2      	adds	r2, r2, r3
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	685b      	ldr	r3, [r3, #4]
 8005d14:	0019      	movs	r1, r3
 8005d16:	0010      	movs	r0, r2
 8005d18:	f7fa fa18 	bl	800014c <__udivsi3>
 8005d1c:	0003      	movs	r3, r0
 8005d1e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d20:	693b      	ldr	r3, [r7, #16]
 8005d22:	2b0f      	cmp	r3, #15
 8005d24:	d91c      	bls.n	8005d60 <UART_SetConfig+0x248>
 8005d26:	693a      	ldr	r2, [r7, #16]
 8005d28:	2380      	movs	r3, #128	; 0x80
 8005d2a:	025b      	lsls	r3, r3, #9
 8005d2c:	429a      	cmp	r2, r3
 8005d2e:	d217      	bcs.n	8005d60 <UART_SetConfig+0x248>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005d30:	693b      	ldr	r3, [r7, #16]
 8005d32:	b29a      	uxth	r2, r3
 8005d34:	200e      	movs	r0, #14
 8005d36:	183b      	adds	r3, r7, r0
 8005d38:	210f      	movs	r1, #15
 8005d3a:	438a      	bics	r2, r1
 8005d3c:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005d3e:	693b      	ldr	r3, [r7, #16]
 8005d40:	085b      	lsrs	r3, r3, #1
 8005d42:	b29b      	uxth	r3, r3
 8005d44:	2207      	movs	r2, #7
 8005d46:	4013      	ands	r3, r2
 8005d48:	b299      	uxth	r1, r3
 8005d4a:	183b      	adds	r3, r7, r0
 8005d4c:	183a      	adds	r2, r7, r0
 8005d4e:	8812      	ldrh	r2, [r2, #0]
 8005d50:	430a      	orrs	r2, r1
 8005d52:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	183a      	adds	r2, r7, r0
 8005d5a:	8812      	ldrh	r2, [r2, #0]
 8005d5c:	60da      	str	r2, [r3, #12]
 8005d5e:	e056      	b.n	8005e0e <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 8005d60:	231a      	movs	r3, #26
 8005d62:	18fb      	adds	r3, r7, r3
 8005d64:	2201      	movs	r2, #1
 8005d66:	701a      	strb	r2, [r3, #0]
 8005d68:	e051      	b.n	8005e0e <UART_SetConfig+0x2f6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005d6a:	231b      	movs	r3, #27
 8005d6c:	18fb      	adds	r3, r7, r3
 8005d6e:	781b      	ldrb	r3, [r3, #0]
 8005d70:	2b08      	cmp	r3, #8
 8005d72:	d015      	beq.n	8005da0 <UART_SetConfig+0x288>
 8005d74:	dc18      	bgt.n	8005da8 <UART_SetConfig+0x290>
 8005d76:	2b04      	cmp	r3, #4
 8005d78:	d00d      	beq.n	8005d96 <UART_SetConfig+0x27e>
 8005d7a:	dc15      	bgt.n	8005da8 <UART_SetConfig+0x290>
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d002      	beq.n	8005d86 <UART_SetConfig+0x26e>
 8005d80:	2b02      	cmp	r3, #2
 8005d82:	d005      	beq.n	8005d90 <UART_SetConfig+0x278>
 8005d84:	e010      	b.n	8005da8 <UART_SetConfig+0x290>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d86:	f7ff fb0b 	bl	80053a0 <HAL_RCC_GetPCLK1Freq>
 8005d8a:	0003      	movs	r3, r0
 8005d8c:	617b      	str	r3, [r7, #20]
        break;
 8005d8e:	e012      	b.n	8005db6 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005d90:	4b31      	ldr	r3, [pc, #196]	; (8005e58 <UART_SetConfig+0x340>)
 8005d92:	617b      	str	r3, [r7, #20]
        break;
 8005d94:	e00f      	b.n	8005db6 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d96:	f7ff fa77 	bl	8005288 <HAL_RCC_GetSysClockFreq>
 8005d9a:	0003      	movs	r3, r0
 8005d9c:	617b      	str	r3, [r7, #20]
        break;
 8005d9e:	e00a      	b.n	8005db6 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005da0:	2380      	movs	r3, #128	; 0x80
 8005da2:	021b      	lsls	r3, r3, #8
 8005da4:	617b      	str	r3, [r7, #20]
        break;
 8005da6:	e006      	b.n	8005db6 <UART_SetConfig+0x29e>
      default:
        pclk = 0U;
 8005da8:	2300      	movs	r3, #0
 8005daa:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005dac:	231a      	movs	r3, #26
 8005dae:	18fb      	adds	r3, r7, r3
 8005db0:	2201      	movs	r2, #1
 8005db2:	701a      	strb	r2, [r3, #0]
        break;
 8005db4:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8005db6:	697b      	ldr	r3, [r7, #20]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d028      	beq.n	8005e0e <UART_SetConfig+0x2f6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005dc0:	4b26      	ldr	r3, [pc, #152]	; (8005e5c <UART_SetConfig+0x344>)
 8005dc2:	0052      	lsls	r2, r2, #1
 8005dc4:	5ad3      	ldrh	r3, [r2, r3]
 8005dc6:	0019      	movs	r1, r3
 8005dc8:	6978      	ldr	r0, [r7, #20]
 8005dca:	f7fa f9bf 	bl	800014c <__udivsi3>
 8005dce:	0003      	movs	r3, r0
 8005dd0:	001a      	movs	r2, r3
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	685b      	ldr	r3, [r3, #4]
 8005dd6:	085b      	lsrs	r3, r3, #1
 8005dd8:	18d2      	adds	r2, r2, r3
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	685b      	ldr	r3, [r3, #4]
 8005dde:	0019      	movs	r1, r3
 8005de0:	0010      	movs	r0, r2
 8005de2:	f7fa f9b3 	bl	800014c <__udivsi3>
 8005de6:	0003      	movs	r3, r0
 8005de8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005dea:	693b      	ldr	r3, [r7, #16]
 8005dec:	2b0f      	cmp	r3, #15
 8005dee:	d90a      	bls.n	8005e06 <UART_SetConfig+0x2ee>
 8005df0:	693a      	ldr	r2, [r7, #16]
 8005df2:	2380      	movs	r3, #128	; 0x80
 8005df4:	025b      	lsls	r3, r3, #9
 8005df6:	429a      	cmp	r2, r3
 8005df8:	d205      	bcs.n	8005e06 <UART_SetConfig+0x2ee>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005dfa:	693b      	ldr	r3, [r7, #16]
 8005dfc:	b29a      	uxth	r2, r3
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	60da      	str	r2, [r3, #12]
 8005e04:	e003      	b.n	8005e0e <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 8005e06:	231a      	movs	r3, #26
 8005e08:	18fb      	adds	r3, r7, r3
 8005e0a:	2201      	movs	r2, #1
 8005e0c:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	226a      	movs	r2, #106	; 0x6a
 8005e12:	2101      	movs	r1, #1
 8005e14:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2268      	movs	r2, #104	; 0x68
 8005e1a:	2101      	movs	r1, #1
 8005e1c:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2200      	movs	r2, #0
 8005e22:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2200      	movs	r2, #0
 8005e28:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8005e2a:	231a      	movs	r3, #26
 8005e2c:	18fb      	adds	r3, r7, r3
 8005e2e:	781b      	ldrb	r3, [r3, #0]
}
 8005e30:	0018      	movs	r0, r3
 8005e32:	46bd      	mov	sp, r7
 8005e34:	b008      	add	sp, #32
 8005e36:	bd80      	pop	{r7, pc}
 8005e38:	cfff69f3 	.word	0xcfff69f3
 8005e3c:	ffffcfff 	.word	0xffffcfff
 8005e40:	11fff4ff 	.word	0x11fff4ff
 8005e44:	40013800 	.word	0x40013800
 8005e48:	40021000 	.word	0x40021000
 8005e4c:	40004400 	.word	0x40004400
 8005e50:	40004800 	.word	0x40004800
 8005e54:	40004c00 	.word	0x40004c00
 8005e58:	00f42400 	.word	0x00f42400
 8005e5c:	0800bf08 	.word	0x0800bf08

08005e60 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b082      	sub	sp, #8
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e6c:	2201      	movs	r2, #1
 8005e6e:	4013      	ands	r3, r2
 8005e70:	d00b      	beq.n	8005e8a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	685b      	ldr	r3, [r3, #4]
 8005e78:	4a4a      	ldr	r2, [pc, #296]	; (8005fa4 <UART_AdvFeatureConfig+0x144>)
 8005e7a:	4013      	ands	r3, r2
 8005e7c:	0019      	movs	r1, r3
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	430a      	orrs	r2, r1
 8005e88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e8e:	2202      	movs	r2, #2
 8005e90:	4013      	ands	r3, r2
 8005e92:	d00b      	beq.n	8005eac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	685b      	ldr	r3, [r3, #4]
 8005e9a:	4a43      	ldr	r2, [pc, #268]	; (8005fa8 <UART_AdvFeatureConfig+0x148>)
 8005e9c:	4013      	ands	r3, r2
 8005e9e:	0019      	movs	r1, r3
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	430a      	orrs	r2, r1
 8005eaa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eb0:	2204      	movs	r2, #4
 8005eb2:	4013      	ands	r3, r2
 8005eb4:	d00b      	beq.n	8005ece <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	685b      	ldr	r3, [r3, #4]
 8005ebc:	4a3b      	ldr	r2, [pc, #236]	; (8005fac <UART_AdvFeatureConfig+0x14c>)
 8005ebe:	4013      	ands	r3, r2
 8005ec0:	0019      	movs	r1, r3
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	430a      	orrs	r2, r1
 8005ecc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ed2:	2208      	movs	r2, #8
 8005ed4:	4013      	ands	r3, r2
 8005ed6:	d00b      	beq.n	8005ef0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	685b      	ldr	r3, [r3, #4]
 8005ede:	4a34      	ldr	r2, [pc, #208]	; (8005fb0 <UART_AdvFeatureConfig+0x150>)
 8005ee0:	4013      	ands	r3, r2
 8005ee2:	0019      	movs	r1, r3
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	430a      	orrs	r2, r1
 8005eee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ef4:	2210      	movs	r2, #16
 8005ef6:	4013      	ands	r3, r2
 8005ef8:	d00b      	beq.n	8005f12 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	689b      	ldr	r3, [r3, #8]
 8005f00:	4a2c      	ldr	r2, [pc, #176]	; (8005fb4 <UART_AdvFeatureConfig+0x154>)
 8005f02:	4013      	ands	r3, r2
 8005f04:	0019      	movs	r1, r3
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	430a      	orrs	r2, r1
 8005f10:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f16:	2220      	movs	r2, #32
 8005f18:	4013      	ands	r3, r2
 8005f1a:	d00b      	beq.n	8005f34 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	689b      	ldr	r3, [r3, #8]
 8005f22:	4a25      	ldr	r2, [pc, #148]	; (8005fb8 <UART_AdvFeatureConfig+0x158>)
 8005f24:	4013      	ands	r3, r2
 8005f26:	0019      	movs	r1, r3
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	430a      	orrs	r2, r1
 8005f32:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f38:	2240      	movs	r2, #64	; 0x40
 8005f3a:	4013      	ands	r3, r2
 8005f3c:	d01d      	beq.n	8005f7a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	685b      	ldr	r3, [r3, #4]
 8005f44:	4a1d      	ldr	r2, [pc, #116]	; (8005fbc <UART_AdvFeatureConfig+0x15c>)
 8005f46:	4013      	ands	r3, r2
 8005f48:	0019      	movs	r1, r3
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	430a      	orrs	r2, r1
 8005f54:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005f5a:	2380      	movs	r3, #128	; 0x80
 8005f5c:	035b      	lsls	r3, r3, #13
 8005f5e:	429a      	cmp	r2, r3
 8005f60:	d10b      	bne.n	8005f7a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	685b      	ldr	r3, [r3, #4]
 8005f68:	4a15      	ldr	r2, [pc, #84]	; (8005fc0 <UART_AdvFeatureConfig+0x160>)
 8005f6a:	4013      	ands	r3, r2
 8005f6c:	0019      	movs	r1, r3
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	430a      	orrs	r2, r1
 8005f78:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f7e:	2280      	movs	r2, #128	; 0x80
 8005f80:	4013      	ands	r3, r2
 8005f82:	d00b      	beq.n	8005f9c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	685b      	ldr	r3, [r3, #4]
 8005f8a:	4a0e      	ldr	r2, [pc, #56]	; (8005fc4 <UART_AdvFeatureConfig+0x164>)
 8005f8c:	4013      	ands	r3, r2
 8005f8e:	0019      	movs	r1, r3
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	430a      	orrs	r2, r1
 8005f9a:	605a      	str	r2, [r3, #4]
  }
}
 8005f9c:	46c0      	nop			; (mov r8, r8)
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	b002      	add	sp, #8
 8005fa2:	bd80      	pop	{r7, pc}
 8005fa4:	fffdffff 	.word	0xfffdffff
 8005fa8:	fffeffff 	.word	0xfffeffff
 8005fac:	fffbffff 	.word	0xfffbffff
 8005fb0:	ffff7fff 	.word	0xffff7fff
 8005fb4:	ffffefff 	.word	0xffffefff
 8005fb8:	ffffdfff 	.word	0xffffdfff
 8005fbc:	ffefffff 	.word	0xffefffff
 8005fc0:	ff9fffff 	.word	0xff9fffff
 8005fc4:	fff7ffff 	.word	0xfff7ffff

08005fc8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b086      	sub	sp, #24
 8005fcc:	af02      	add	r7, sp, #8
 8005fce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	228c      	movs	r2, #140	; 0x8c
 8005fd4:	2100      	movs	r1, #0
 8005fd6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005fd8:	f7fd ffd2 	bl	8003f80 <HAL_GetTick>
 8005fdc:	0003      	movs	r3, r0
 8005fde:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	2208      	movs	r2, #8
 8005fe8:	4013      	ands	r3, r2
 8005fea:	2b08      	cmp	r3, #8
 8005fec:	d10c      	bne.n	8006008 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	2280      	movs	r2, #128	; 0x80
 8005ff2:	0391      	lsls	r1, r2, #14
 8005ff4:	6878      	ldr	r0, [r7, #4]
 8005ff6:	4a18      	ldr	r2, [pc, #96]	; (8006058 <UART_CheckIdleState+0x90>)
 8005ff8:	9200      	str	r2, [sp, #0]
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	f000 f82e 	bl	800605c <UART_WaitOnFlagUntilTimeout>
 8006000:	1e03      	subs	r3, r0, #0
 8006002:	d001      	beq.n	8006008 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006004:	2303      	movs	r3, #3
 8006006:	e023      	b.n	8006050 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	2204      	movs	r2, #4
 8006010:	4013      	ands	r3, r2
 8006012:	2b04      	cmp	r3, #4
 8006014:	d10c      	bne.n	8006030 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	2280      	movs	r2, #128	; 0x80
 800601a:	03d1      	lsls	r1, r2, #15
 800601c:	6878      	ldr	r0, [r7, #4]
 800601e:	4a0e      	ldr	r2, [pc, #56]	; (8006058 <UART_CheckIdleState+0x90>)
 8006020:	9200      	str	r2, [sp, #0]
 8006022:	2200      	movs	r2, #0
 8006024:	f000 f81a 	bl	800605c <UART_WaitOnFlagUntilTimeout>
 8006028:	1e03      	subs	r3, r0, #0
 800602a:	d001      	beq.n	8006030 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800602c:	2303      	movs	r3, #3
 800602e:	e00f      	b.n	8006050 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2284      	movs	r2, #132	; 0x84
 8006034:	2120      	movs	r1, #32
 8006036:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2288      	movs	r2, #136	; 0x88
 800603c:	2120      	movs	r1, #32
 800603e:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2200      	movs	r2, #0
 8006044:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	2280      	movs	r2, #128	; 0x80
 800604a:	2100      	movs	r1, #0
 800604c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800604e:	2300      	movs	r3, #0
}
 8006050:	0018      	movs	r0, r3
 8006052:	46bd      	mov	sp, r7
 8006054:	b004      	add	sp, #16
 8006056:	bd80      	pop	{r7, pc}
 8006058:	01ffffff 	.word	0x01ffffff

0800605c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b094      	sub	sp, #80	; 0x50
 8006060:	af00      	add	r7, sp, #0
 8006062:	60f8      	str	r0, [r7, #12]
 8006064:	60b9      	str	r1, [r7, #8]
 8006066:	603b      	str	r3, [r7, #0]
 8006068:	1dfb      	adds	r3, r7, #7
 800606a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800606c:	e0a7      	b.n	80061be <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800606e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006070:	3301      	adds	r3, #1
 8006072:	d100      	bne.n	8006076 <UART_WaitOnFlagUntilTimeout+0x1a>
 8006074:	e0a3      	b.n	80061be <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006076:	f7fd ff83 	bl	8003f80 <HAL_GetTick>
 800607a:	0002      	movs	r2, r0
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	1ad3      	subs	r3, r2, r3
 8006080:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006082:	429a      	cmp	r2, r3
 8006084:	d302      	bcc.n	800608c <UART_WaitOnFlagUntilTimeout+0x30>
 8006086:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006088:	2b00      	cmp	r3, #0
 800608a:	d13f      	bne.n	800610c <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800608c:	f3ef 8310 	mrs	r3, PRIMASK
 8006090:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8006092:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006094:	647b      	str	r3, [r7, #68]	; 0x44
 8006096:	2301      	movs	r3, #1
 8006098:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800609a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800609c:	f383 8810 	msr	PRIMASK, r3
}
 80060a0:	46c0      	nop			; (mov r8, r8)
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	681a      	ldr	r2, [r3, #0]
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	494e      	ldr	r1, [pc, #312]	; (80061e8 <UART_WaitOnFlagUntilTimeout+0x18c>)
 80060ae:	400a      	ands	r2, r1
 80060b0:	601a      	str	r2, [r3, #0]
 80060b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80060b4:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060b8:	f383 8810 	msr	PRIMASK, r3
}
 80060bc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80060be:	f3ef 8310 	mrs	r3, PRIMASK
 80060c2:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80060c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060c6:	643b      	str	r3, [r7, #64]	; 0x40
 80060c8:	2301      	movs	r3, #1
 80060ca:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060ce:	f383 8810 	msr	PRIMASK, r3
}
 80060d2:	46c0      	nop			; (mov r8, r8)
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	689a      	ldr	r2, [r3, #8]
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	2101      	movs	r1, #1
 80060e0:	438a      	bics	r2, r1
 80060e2:	609a      	str	r2, [r3, #8]
 80060e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80060e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060ea:	f383 8810 	msr	PRIMASK, r3
}
 80060ee:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	2284      	movs	r2, #132	; 0x84
 80060f4:	2120      	movs	r1, #32
 80060f6:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	2288      	movs	r2, #136	; 0x88
 80060fc:	2120      	movs	r1, #32
 80060fe:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	2280      	movs	r2, #128	; 0x80
 8006104:	2100      	movs	r1, #0
 8006106:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006108:	2303      	movs	r3, #3
 800610a:	e069      	b.n	80061e0 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	2204      	movs	r2, #4
 8006114:	4013      	ands	r3, r2
 8006116:	d052      	beq.n	80061be <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	69da      	ldr	r2, [r3, #28]
 800611e:	2380      	movs	r3, #128	; 0x80
 8006120:	011b      	lsls	r3, r3, #4
 8006122:	401a      	ands	r2, r3
 8006124:	2380      	movs	r3, #128	; 0x80
 8006126:	011b      	lsls	r3, r3, #4
 8006128:	429a      	cmp	r2, r3
 800612a:	d148      	bne.n	80061be <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	2280      	movs	r2, #128	; 0x80
 8006132:	0112      	lsls	r2, r2, #4
 8006134:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006136:	f3ef 8310 	mrs	r3, PRIMASK
 800613a:	613b      	str	r3, [r7, #16]
  return(result);
 800613c:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800613e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006140:	2301      	movs	r3, #1
 8006142:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006144:	697b      	ldr	r3, [r7, #20]
 8006146:	f383 8810 	msr	PRIMASK, r3
}
 800614a:	46c0      	nop			; (mov r8, r8)
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	681a      	ldr	r2, [r3, #0]
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	4924      	ldr	r1, [pc, #144]	; (80061e8 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8006158:	400a      	ands	r2, r1
 800615a:	601a      	str	r2, [r3, #0]
 800615c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800615e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006160:	69bb      	ldr	r3, [r7, #24]
 8006162:	f383 8810 	msr	PRIMASK, r3
}
 8006166:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006168:	f3ef 8310 	mrs	r3, PRIMASK
 800616c:	61fb      	str	r3, [r7, #28]
  return(result);
 800616e:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006170:	64bb      	str	r3, [r7, #72]	; 0x48
 8006172:	2301      	movs	r3, #1
 8006174:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006176:	6a3b      	ldr	r3, [r7, #32]
 8006178:	f383 8810 	msr	PRIMASK, r3
}
 800617c:	46c0      	nop			; (mov r8, r8)
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	689a      	ldr	r2, [r3, #8]
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	2101      	movs	r1, #1
 800618a:	438a      	bics	r2, r1
 800618c:	609a      	str	r2, [r3, #8]
 800618e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006190:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006194:	f383 8810 	msr	PRIMASK, r3
}
 8006198:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	2284      	movs	r2, #132	; 0x84
 800619e:	2120      	movs	r1, #32
 80061a0:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	2288      	movs	r2, #136	; 0x88
 80061a6:	2120      	movs	r1, #32
 80061a8:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	228c      	movs	r2, #140	; 0x8c
 80061ae:	2120      	movs	r1, #32
 80061b0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	2280      	movs	r2, #128	; 0x80
 80061b6:	2100      	movs	r1, #0
 80061b8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80061ba:	2303      	movs	r3, #3
 80061bc:	e010      	b.n	80061e0 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	69db      	ldr	r3, [r3, #28]
 80061c4:	68ba      	ldr	r2, [r7, #8]
 80061c6:	4013      	ands	r3, r2
 80061c8:	68ba      	ldr	r2, [r7, #8]
 80061ca:	1ad3      	subs	r3, r2, r3
 80061cc:	425a      	negs	r2, r3
 80061ce:	4153      	adcs	r3, r2
 80061d0:	b2db      	uxtb	r3, r3
 80061d2:	001a      	movs	r2, r3
 80061d4:	1dfb      	adds	r3, r7, #7
 80061d6:	781b      	ldrb	r3, [r3, #0]
 80061d8:	429a      	cmp	r2, r3
 80061da:	d100      	bne.n	80061de <UART_WaitOnFlagUntilTimeout+0x182>
 80061dc:	e747      	b.n	800606e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80061de:	2300      	movs	r3, #0
}
 80061e0:	0018      	movs	r0, r3
 80061e2:	46bd      	mov	sp, r7
 80061e4:	b014      	add	sp, #80	; 0x50
 80061e6:	bd80      	pop	{r7, pc}
 80061e8:	fffffe5f 	.word	0xfffffe5f

080061ec <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b090      	sub	sp, #64	; 0x40
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	60f8      	str	r0, [r7, #12]
 80061f4:	60b9      	str	r1, [r7, #8]
 80061f6:	1dbb      	adds	r3, r7, #6
 80061f8:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	68ba      	ldr	r2, [r7, #8]
 80061fe:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	1dba      	adds	r2, r7, #6
 8006204:	215c      	movs	r1, #92	; 0x5c
 8006206:	8812      	ldrh	r2, [r2, #0]
 8006208:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	228c      	movs	r2, #140	; 0x8c
 800620e:	2100      	movs	r1, #0
 8006210:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	2288      	movs	r2, #136	; 0x88
 8006216:	2122      	movs	r1, #34	; 0x22
 8006218:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800621e:	2b00      	cmp	r3, #0
 8006220:	d02c      	beq.n	800627c <UART_Start_Receive_DMA+0x90>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006226:	4a42      	ldr	r2, [pc, #264]	; (8006330 <UART_Start_Receive_DMA+0x144>)
 8006228:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800622e:	4a41      	ldr	r2, [pc, #260]	; (8006334 <UART_Start_Receive_DMA+0x148>)
 8006230:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006236:	4a40      	ldr	r2, [pc, #256]	; (8006338 <UART_Start_Receive_DMA+0x14c>)
 8006238:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800623e:	2200      	movs	r2, #0
 8006240:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	3324      	adds	r3, #36	; 0x24
 800624c:	0019      	movs	r1, r3
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006252:	001a      	movs	r2, r3
 8006254:	1dbb      	adds	r3, r7, #6
 8006256:	881b      	ldrh	r3, [r3, #0]
 8006258:	f7fe f83e 	bl	80042d8 <HAL_DMA_Start_IT>
 800625c:	1e03      	subs	r3, r0, #0
 800625e:	d00d      	beq.n	800627c <UART_Start_Receive_DMA+0x90>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	228c      	movs	r2, #140	; 0x8c
 8006264:	2110      	movs	r1, #16
 8006266:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	2280      	movs	r2, #128	; 0x80
 800626c:	2100      	movs	r1, #0
 800626e:	5499      	strb	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	2288      	movs	r2, #136	; 0x88
 8006274:	2120      	movs	r1, #32
 8006276:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 8006278:	2301      	movs	r3, #1
 800627a:	e054      	b.n	8006326 <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	2280      	movs	r2, #128	; 0x80
 8006280:	2100      	movs	r1, #0
 8006282:	5499      	strb	r1, [r3, r2]

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	691b      	ldr	r3, [r3, #16]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d019      	beq.n	80062c0 <UART_Start_Receive_DMA+0xd4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800628c:	f3ef 8310 	mrs	r3, PRIMASK
 8006290:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8006292:	6abb      	ldr	r3, [r7, #40]	; 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006294:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006296:	2301      	movs	r3, #1
 8006298:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800629a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800629c:	f383 8810 	msr	PRIMASK, r3
}
 80062a0:	46c0      	nop			; (mov r8, r8)
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	681a      	ldr	r2, [r3, #0]
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	2180      	movs	r1, #128	; 0x80
 80062ae:	0049      	lsls	r1, r1, #1
 80062b0:	430a      	orrs	r2, r1
 80062b2:	601a      	str	r2, [r3, #0]
 80062b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062b6:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80062b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062ba:	f383 8810 	msr	PRIMASK, r3
}
 80062be:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80062c0:	f3ef 8310 	mrs	r3, PRIMASK
 80062c4:	613b      	str	r3, [r7, #16]
  return(result);
 80062c6:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062c8:	63bb      	str	r3, [r7, #56]	; 0x38
 80062ca:	2301      	movs	r3, #1
 80062cc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80062ce:	697b      	ldr	r3, [r7, #20]
 80062d0:	f383 8810 	msr	PRIMASK, r3
}
 80062d4:	46c0      	nop			; (mov r8, r8)
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	689a      	ldr	r2, [r3, #8]
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	2101      	movs	r1, #1
 80062e2:	430a      	orrs	r2, r1
 80062e4:	609a      	str	r2, [r3, #8]
 80062e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062e8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80062ea:	69bb      	ldr	r3, [r7, #24]
 80062ec:	f383 8810 	msr	PRIMASK, r3
}
 80062f0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80062f2:	f3ef 8310 	mrs	r3, PRIMASK
 80062f6:	61fb      	str	r3, [r7, #28]
  return(result);
 80062f8:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80062fa:	637b      	str	r3, [r7, #52]	; 0x34
 80062fc:	2301      	movs	r3, #1
 80062fe:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006300:	6a3b      	ldr	r3, [r7, #32]
 8006302:	f383 8810 	msr	PRIMASK, r3
}
 8006306:	46c0      	nop			; (mov r8, r8)
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	689a      	ldr	r2, [r3, #8]
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	2140      	movs	r1, #64	; 0x40
 8006314:	430a      	orrs	r2, r1
 8006316:	609a      	str	r2, [r3, #8]
 8006318:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800631a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800631c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800631e:	f383 8810 	msr	PRIMASK, r3
}
 8006322:	46c0      	nop			; (mov r8, r8)

  return HAL_OK;
 8006324:	2300      	movs	r3, #0
}
 8006326:	0018      	movs	r0, r3
 8006328:	46bd      	mov	sp, r7
 800632a:	b010      	add	sp, #64	; 0x40
 800632c:	bd80      	pop	{r7, pc}
 800632e:	46c0      	nop			; (mov r8, r8)
 8006330:	08006489 	.word	0x08006489
 8006334:	080065b1 	.word	0x080065b1
 8006338:	080065ed 	.word	0x080065ed

0800633c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b08a      	sub	sp, #40	; 0x28
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006344:	f3ef 8310 	mrs	r3, PRIMASK
 8006348:	60bb      	str	r3, [r7, #8]
  return(result);
 800634a:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800634c:	627b      	str	r3, [r7, #36]	; 0x24
 800634e:	2301      	movs	r3, #1
 8006350:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	f383 8810 	msr	PRIMASK, r3
}
 8006358:	46c0      	nop			; (mov r8, r8)
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	681a      	ldr	r2, [r3, #0]
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	21c0      	movs	r1, #192	; 0xc0
 8006366:	438a      	bics	r2, r1
 8006368:	601a      	str	r2, [r3, #0]
 800636a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800636c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800636e:	693b      	ldr	r3, [r7, #16]
 8006370:	f383 8810 	msr	PRIMASK, r3
}
 8006374:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006376:	f3ef 8310 	mrs	r3, PRIMASK
 800637a:	617b      	str	r3, [r7, #20]
  return(result);
 800637c:	697b      	ldr	r3, [r7, #20]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800637e:	623b      	str	r3, [r7, #32]
 8006380:	2301      	movs	r3, #1
 8006382:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006384:	69bb      	ldr	r3, [r7, #24]
 8006386:	f383 8810 	msr	PRIMASK, r3
}
 800638a:	46c0      	nop			; (mov r8, r8)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	689a      	ldr	r2, [r3, #8]
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	4908      	ldr	r1, [pc, #32]	; (80063b8 <UART_EndTxTransfer+0x7c>)
 8006398:	400a      	ands	r2, r1
 800639a:	609a      	str	r2, [r3, #8]
 800639c:	6a3b      	ldr	r3, [r7, #32]
 800639e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80063a0:	69fb      	ldr	r3, [r7, #28]
 80063a2:	f383 8810 	msr	PRIMASK, r3
}
 80063a6:	46c0      	nop			; (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2284      	movs	r2, #132	; 0x84
 80063ac:	2120      	movs	r1, #32
 80063ae:	5099      	str	r1, [r3, r2]
}
 80063b0:	46c0      	nop			; (mov r8, r8)
 80063b2:	46bd      	mov	sp, r7
 80063b4:	b00a      	add	sp, #40	; 0x28
 80063b6:	bd80      	pop	{r7, pc}
 80063b8:	ff7fffff 	.word	0xff7fffff

080063bc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b08e      	sub	sp, #56	; 0x38
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80063c4:	f3ef 8310 	mrs	r3, PRIMASK
 80063c8:	617b      	str	r3, [r7, #20]
  return(result);
 80063ca:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80063cc:	637b      	str	r3, [r7, #52]	; 0x34
 80063ce:	2301      	movs	r3, #1
 80063d0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80063d2:	69bb      	ldr	r3, [r7, #24]
 80063d4:	f383 8810 	msr	PRIMASK, r3
}
 80063d8:	46c0      	nop			; (mov r8, r8)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	681a      	ldr	r2, [r3, #0]
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	4926      	ldr	r1, [pc, #152]	; (8006480 <UART_EndRxTransfer+0xc4>)
 80063e6:	400a      	ands	r2, r1
 80063e8:	601a      	str	r2, [r3, #0]
 80063ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063ec:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80063ee:	69fb      	ldr	r3, [r7, #28]
 80063f0:	f383 8810 	msr	PRIMASK, r3
}
 80063f4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80063f6:	f3ef 8310 	mrs	r3, PRIMASK
 80063fa:	623b      	str	r3, [r7, #32]
  return(result);
 80063fc:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80063fe:	633b      	str	r3, [r7, #48]	; 0x30
 8006400:	2301      	movs	r3, #1
 8006402:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006406:	f383 8810 	msr	PRIMASK, r3
}
 800640a:	46c0      	nop			; (mov r8, r8)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	689a      	ldr	r2, [r3, #8]
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	491b      	ldr	r1, [pc, #108]	; (8006484 <UART_EndRxTransfer+0xc8>)
 8006418:	400a      	ands	r2, r1
 800641a:	609a      	str	r2, [r3, #8]
 800641c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800641e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006422:	f383 8810 	msr	PRIMASK, r3
}
 8006426:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800642c:	2b01      	cmp	r3, #1
 800642e:	d118      	bne.n	8006462 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006430:	f3ef 8310 	mrs	r3, PRIMASK
 8006434:	60bb      	str	r3, [r7, #8]
  return(result);
 8006436:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006438:	62fb      	str	r3, [r7, #44]	; 0x2c
 800643a:	2301      	movs	r3, #1
 800643c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	f383 8810 	msr	PRIMASK, r3
}
 8006444:	46c0      	nop			; (mov r8, r8)
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	681a      	ldr	r2, [r3, #0]
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	2110      	movs	r1, #16
 8006452:	438a      	bics	r2, r1
 8006454:	601a      	str	r2, [r3, #0]
 8006456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006458:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800645a:	693b      	ldr	r3, [r7, #16]
 800645c:	f383 8810 	msr	PRIMASK, r3
}
 8006460:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2288      	movs	r2, #136	; 0x88
 8006466:	2120      	movs	r1, #32
 8006468:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2200      	movs	r2, #0
 800646e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2200      	movs	r2, #0
 8006474:	671a      	str	r2, [r3, #112]	; 0x70
}
 8006476:	46c0      	nop			; (mov r8, r8)
 8006478:	46bd      	mov	sp, r7
 800647a:	b00e      	add	sp, #56	; 0x38
 800647c:	bd80      	pop	{r7, pc}
 800647e:	46c0      	nop			; (mov r8, r8)
 8006480:	fffffedf 	.word	0xfffffedf
 8006484:	effffffe 	.word	0xeffffffe

08006488 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006488:	b580      	push	{r7, lr}
 800648a:	b094      	sub	sp, #80	; 0x50
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006494:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	2220      	movs	r2, #32
 800649e:	4013      	ands	r3, r2
 80064a0:	d16f      	bne.n	8006582 <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 80064a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064a4:	225e      	movs	r2, #94	; 0x5e
 80064a6:	2100      	movs	r1, #0
 80064a8:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80064aa:	f3ef 8310 	mrs	r3, PRIMASK
 80064ae:	61bb      	str	r3, [r7, #24]
  return(result);
 80064b0:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80064b2:	64bb      	str	r3, [r7, #72]	; 0x48
 80064b4:	2301      	movs	r3, #1
 80064b6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80064b8:	69fb      	ldr	r3, [r7, #28]
 80064ba:	f383 8810 	msr	PRIMASK, r3
}
 80064be:	46c0      	nop			; (mov r8, r8)
 80064c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	681a      	ldr	r2, [r3, #0]
 80064c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	4938      	ldr	r1, [pc, #224]	; (80065ac <UART_DMAReceiveCplt+0x124>)
 80064cc:	400a      	ands	r2, r1
 80064ce:	601a      	str	r2, [r3, #0]
 80064d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80064d2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80064d4:	6a3b      	ldr	r3, [r7, #32]
 80064d6:	f383 8810 	msr	PRIMASK, r3
}
 80064da:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80064dc:	f3ef 8310 	mrs	r3, PRIMASK
 80064e0:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80064e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064e4:	647b      	str	r3, [r7, #68]	; 0x44
 80064e6:	2301      	movs	r3, #1
 80064e8:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80064ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064ec:	f383 8810 	msr	PRIMASK, r3
}
 80064f0:	46c0      	nop			; (mov r8, r8)
 80064f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	689a      	ldr	r2, [r3, #8]
 80064f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	2101      	movs	r1, #1
 80064fe:	438a      	bics	r2, r1
 8006500:	609a      	str	r2, [r3, #8]
 8006502:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006504:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006508:	f383 8810 	msr	PRIMASK, r3
}
 800650c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800650e:	f3ef 8310 	mrs	r3, PRIMASK
 8006512:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8006514:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006516:	643b      	str	r3, [r7, #64]	; 0x40
 8006518:	2301      	movs	r3, #1
 800651a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800651c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800651e:	f383 8810 	msr	PRIMASK, r3
}
 8006522:	46c0      	nop			; (mov r8, r8)
 8006524:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	689a      	ldr	r2, [r3, #8]
 800652a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	2140      	movs	r1, #64	; 0x40
 8006530:	438a      	bics	r2, r1
 8006532:	609a      	str	r2, [r3, #8]
 8006534:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006536:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006538:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800653a:	f383 8810 	msr	PRIMASK, r3
}
 800653e:	46c0      	nop			; (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006540:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006542:	2288      	movs	r2, #136	; 0x88
 8006544:	2120      	movs	r1, #32
 8006546:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006548:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800654a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800654c:	2b01      	cmp	r3, #1
 800654e:	d118      	bne.n	8006582 <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006550:	f3ef 8310 	mrs	r3, PRIMASK
 8006554:	60fb      	str	r3, [r7, #12]
  return(result);
 8006556:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006558:	63fb      	str	r3, [r7, #60]	; 0x3c
 800655a:	2301      	movs	r3, #1
 800655c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800655e:	693b      	ldr	r3, [r7, #16]
 8006560:	f383 8810 	msr	PRIMASK, r3
}
 8006564:	46c0      	nop			; (mov r8, r8)
 8006566:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	681a      	ldr	r2, [r3, #0]
 800656c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	2110      	movs	r1, #16
 8006572:	438a      	bics	r2, r1
 8006574:	601a      	str	r2, [r3, #0]
 8006576:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006578:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800657a:	697b      	ldr	r3, [r7, #20]
 800657c:	f383 8810 	msr	PRIMASK, r3
}
 8006580:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006582:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006584:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006586:	2b01      	cmp	r3, #1
 8006588:	d108      	bne.n	800659c <UART_DMAReceiveCplt+0x114>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800658a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800658c:	225c      	movs	r2, #92	; 0x5c
 800658e:	5a9a      	ldrh	r2, [r3, r2]
 8006590:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006592:	0011      	movs	r1, r2
 8006594:	0018      	movs	r0, r3
 8006596:	f7ff fab3 	bl	8005b00 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800659a:	e003      	b.n	80065a4 <UART_DMAReceiveCplt+0x11c>
    HAL_UART_RxCpltCallback(huart);
 800659c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800659e:	0018      	movs	r0, r3
 80065a0:	f7fd f9b0 	bl	8003904 <HAL_UART_RxCpltCallback>
}
 80065a4:	46c0      	nop			; (mov r8, r8)
 80065a6:	46bd      	mov	sp, r7
 80065a8:	b014      	add	sp, #80	; 0x50
 80065aa:	bd80      	pop	{r7, pc}
 80065ac:	fffffeff 	.word	0xfffffeff

080065b0 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b084      	sub	sp, #16
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065bc:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80065c2:	2b01      	cmp	r3, #1
 80065c4:	d10a      	bne.n	80065dc <UART_DMARxHalfCplt+0x2c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	225c      	movs	r2, #92	; 0x5c
 80065ca:	5a9b      	ldrh	r3, [r3, r2]
 80065cc:	085b      	lsrs	r3, r3, #1
 80065ce:	b29a      	uxth	r2, r3
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	0011      	movs	r1, r2
 80065d4:	0018      	movs	r0, r3
 80065d6:	f7ff fa93 	bl	8005b00 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80065da:	e003      	b.n	80065e4 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	0018      	movs	r0, r3
 80065e0:	f7ff fa7e 	bl	8005ae0 <HAL_UART_RxHalfCpltCallback>
}
 80065e4:	46c0      	nop			; (mov r8, r8)
 80065e6:	46bd      	mov	sp, r7
 80065e8:	b004      	add	sp, #16
 80065ea:	bd80      	pop	{r7, pc}

080065ec <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b086      	sub	sp, #24
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065f8:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80065fa:	697b      	ldr	r3, [r7, #20]
 80065fc:	2284      	movs	r2, #132	; 0x84
 80065fe:	589b      	ldr	r3, [r3, r2]
 8006600:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006602:	697b      	ldr	r3, [r7, #20]
 8006604:	2288      	movs	r2, #136	; 0x88
 8006606:	589b      	ldr	r3, [r3, r2]
 8006608:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800660a:	697b      	ldr	r3, [r7, #20]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	689b      	ldr	r3, [r3, #8]
 8006610:	2280      	movs	r2, #128	; 0x80
 8006612:	4013      	ands	r3, r2
 8006614:	2b80      	cmp	r3, #128	; 0x80
 8006616:	d10a      	bne.n	800662e <UART_DMAError+0x42>
 8006618:	693b      	ldr	r3, [r7, #16]
 800661a:	2b21      	cmp	r3, #33	; 0x21
 800661c:	d107      	bne.n	800662e <UART_DMAError+0x42>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800661e:	697b      	ldr	r3, [r7, #20]
 8006620:	2256      	movs	r2, #86	; 0x56
 8006622:	2100      	movs	r1, #0
 8006624:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8006626:	697b      	ldr	r3, [r7, #20]
 8006628:	0018      	movs	r0, r3
 800662a:	f7ff fe87 	bl	800633c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800662e:	697b      	ldr	r3, [r7, #20]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	689b      	ldr	r3, [r3, #8]
 8006634:	2240      	movs	r2, #64	; 0x40
 8006636:	4013      	ands	r3, r2
 8006638:	2b40      	cmp	r3, #64	; 0x40
 800663a:	d10a      	bne.n	8006652 <UART_DMAError+0x66>
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	2b22      	cmp	r3, #34	; 0x22
 8006640:	d107      	bne.n	8006652 <UART_DMAError+0x66>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8006642:	697b      	ldr	r3, [r7, #20]
 8006644:	225e      	movs	r2, #94	; 0x5e
 8006646:	2100      	movs	r1, #0
 8006648:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 800664a:	697b      	ldr	r3, [r7, #20]
 800664c:	0018      	movs	r0, r3
 800664e:	f7ff feb5 	bl	80063bc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006652:	697b      	ldr	r3, [r7, #20]
 8006654:	228c      	movs	r2, #140	; 0x8c
 8006656:	589b      	ldr	r3, [r3, r2]
 8006658:	2210      	movs	r2, #16
 800665a:	431a      	orrs	r2, r3
 800665c:	697b      	ldr	r3, [r7, #20]
 800665e:	218c      	movs	r1, #140	; 0x8c
 8006660:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006662:	697b      	ldr	r3, [r7, #20]
 8006664:	0018      	movs	r0, r3
 8006666:	f7ff fa43 	bl	8005af0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800666a:	46c0      	nop			; (mov r8, r8)
 800666c:	46bd      	mov	sp, r7
 800666e:	b006      	add	sp, #24
 8006670:	bd80      	pop	{r7, pc}
	...

08006674 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006674:	b580      	push	{r7, lr}
 8006676:	b084      	sub	sp, #16
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2280      	movs	r2, #128	; 0x80
 8006680:	5c9b      	ldrb	r3, [r3, r2]
 8006682:	2b01      	cmp	r3, #1
 8006684:	d101      	bne.n	800668a <HAL_UARTEx_DisableFifoMode+0x16>
 8006686:	2302      	movs	r3, #2
 8006688:	e027      	b.n	80066da <HAL_UARTEx_DisableFifoMode+0x66>
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	2280      	movs	r2, #128	; 0x80
 800668e:	2101      	movs	r1, #1
 8006690:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2284      	movs	r2, #132	; 0x84
 8006696:	2124      	movs	r1, #36	; 0x24
 8006698:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	681a      	ldr	r2, [r3, #0]
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	2101      	movs	r1, #1
 80066ae:	438a      	bics	r2, r1
 80066b0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	4a0b      	ldr	r2, [pc, #44]	; (80066e4 <HAL_UARTEx_DisableFifoMode+0x70>)
 80066b6:	4013      	ands	r3, r2
 80066b8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2200      	movs	r2, #0
 80066be:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	68fa      	ldr	r2, [r7, #12]
 80066c6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2284      	movs	r2, #132	; 0x84
 80066cc:	2120      	movs	r1, #32
 80066ce:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2280      	movs	r2, #128	; 0x80
 80066d4:	2100      	movs	r1, #0
 80066d6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80066d8:	2300      	movs	r3, #0
}
 80066da:	0018      	movs	r0, r3
 80066dc:	46bd      	mov	sp, r7
 80066de:	b004      	add	sp, #16
 80066e0:	bd80      	pop	{r7, pc}
 80066e2:	46c0      	nop			; (mov r8, r8)
 80066e4:	dfffffff 	.word	0xdfffffff

080066e8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b084      	sub	sp, #16
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
 80066f0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2280      	movs	r2, #128	; 0x80
 80066f6:	5c9b      	ldrb	r3, [r3, r2]
 80066f8:	2b01      	cmp	r3, #1
 80066fa:	d101      	bne.n	8006700 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80066fc:	2302      	movs	r3, #2
 80066fe:	e02e      	b.n	800675e <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2280      	movs	r2, #128	; 0x80
 8006704:	2101      	movs	r1, #1
 8006706:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2284      	movs	r2, #132	; 0x84
 800670c:	2124      	movs	r1, #36	; 0x24
 800670e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	681a      	ldr	r2, [r3, #0]
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	2101      	movs	r1, #1
 8006724:	438a      	bics	r2, r1
 8006726:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	689b      	ldr	r3, [r3, #8]
 800672e:	00db      	lsls	r3, r3, #3
 8006730:	08d9      	lsrs	r1, r3, #3
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	683a      	ldr	r2, [r7, #0]
 8006738:	430a      	orrs	r2, r1
 800673a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	0018      	movs	r0, r3
 8006740:	f000 f854 	bl	80067ec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	68fa      	ldr	r2, [r7, #12]
 800674a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2284      	movs	r2, #132	; 0x84
 8006750:	2120      	movs	r1, #32
 8006752:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2280      	movs	r2, #128	; 0x80
 8006758:	2100      	movs	r1, #0
 800675a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800675c:	2300      	movs	r3, #0
}
 800675e:	0018      	movs	r0, r3
 8006760:	46bd      	mov	sp, r7
 8006762:	b004      	add	sp, #16
 8006764:	bd80      	pop	{r7, pc}
	...

08006768 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006768:	b580      	push	{r7, lr}
 800676a:	b084      	sub	sp, #16
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
 8006770:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	2280      	movs	r2, #128	; 0x80
 8006776:	5c9b      	ldrb	r3, [r3, r2]
 8006778:	2b01      	cmp	r3, #1
 800677a:	d101      	bne.n	8006780 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800677c:	2302      	movs	r3, #2
 800677e:	e02f      	b.n	80067e0 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2280      	movs	r2, #128	; 0x80
 8006784:	2101      	movs	r1, #1
 8006786:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2284      	movs	r2, #132	; 0x84
 800678c:	2124      	movs	r1, #36	; 0x24
 800678e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	681a      	ldr	r2, [r3, #0]
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	2101      	movs	r1, #1
 80067a4:	438a      	bics	r2, r1
 80067a6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	689b      	ldr	r3, [r3, #8]
 80067ae:	4a0e      	ldr	r2, [pc, #56]	; (80067e8 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80067b0:	4013      	ands	r3, r2
 80067b2:	0019      	movs	r1, r3
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	683a      	ldr	r2, [r7, #0]
 80067ba:	430a      	orrs	r2, r1
 80067bc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	0018      	movs	r0, r3
 80067c2:	f000 f813 	bl	80067ec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	68fa      	ldr	r2, [r7, #12]
 80067cc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2284      	movs	r2, #132	; 0x84
 80067d2:	2120      	movs	r1, #32
 80067d4:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	2280      	movs	r2, #128	; 0x80
 80067da:	2100      	movs	r1, #0
 80067dc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80067de:	2300      	movs	r3, #0
}
 80067e0:	0018      	movs	r0, r3
 80067e2:	46bd      	mov	sp, r7
 80067e4:	b004      	add	sp, #16
 80067e6:	bd80      	pop	{r7, pc}
 80067e8:	f1ffffff 	.word	0xf1ffffff

080067ec <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80067ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80067ee:	b085      	sub	sp, #20
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d108      	bne.n	800680e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	226a      	movs	r2, #106	; 0x6a
 8006800:	2101      	movs	r1, #1
 8006802:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2268      	movs	r2, #104	; 0x68
 8006808:	2101      	movs	r1, #1
 800680a:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800680c:	e043      	b.n	8006896 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800680e:	260f      	movs	r6, #15
 8006810:	19bb      	adds	r3, r7, r6
 8006812:	2208      	movs	r2, #8
 8006814:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006816:	200e      	movs	r0, #14
 8006818:	183b      	adds	r3, r7, r0
 800681a:	2208      	movs	r2, #8
 800681c:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	689b      	ldr	r3, [r3, #8]
 8006824:	0e5b      	lsrs	r3, r3, #25
 8006826:	b2da      	uxtb	r2, r3
 8006828:	240d      	movs	r4, #13
 800682a:	193b      	adds	r3, r7, r4
 800682c:	2107      	movs	r1, #7
 800682e:	400a      	ands	r2, r1
 8006830:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	689b      	ldr	r3, [r3, #8]
 8006838:	0f5b      	lsrs	r3, r3, #29
 800683a:	b2da      	uxtb	r2, r3
 800683c:	250c      	movs	r5, #12
 800683e:	197b      	adds	r3, r7, r5
 8006840:	2107      	movs	r1, #7
 8006842:	400a      	ands	r2, r1
 8006844:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006846:	183b      	adds	r3, r7, r0
 8006848:	781b      	ldrb	r3, [r3, #0]
 800684a:	197a      	adds	r2, r7, r5
 800684c:	7812      	ldrb	r2, [r2, #0]
 800684e:	4914      	ldr	r1, [pc, #80]	; (80068a0 <UARTEx_SetNbDataToProcess+0xb4>)
 8006850:	5c8a      	ldrb	r2, [r1, r2]
 8006852:	435a      	muls	r2, r3
 8006854:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8006856:	197b      	adds	r3, r7, r5
 8006858:	781b      	ldrb	r3, [r3, #0]
 800685a:	4a12      	ldr	r2, [pc, #72]	; (80068a4 <UARTEx_SetNbDataToProcess+0xb8>)
 800685c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800685e:	0019      	movs	r1, r3
 8006860:	f7f9 fcfe 	bl	8000260 <__divsi3>
 8006864:	0003      	movs	r3, r0
 8006866:	b299      	uxth	r1, r3
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	226a      	movs	r2, #106	; 0x6a
 800686c:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800686e:	19bb      	adds	r3, r7, r6
 8006870:	781b      	ldrb	r3, [r3, #0]
 8006872:	193a      	adds	r2, r7, r4
 8006874:	7812      	ldrb	r2, [r2, #0]
 8006876:	490a      	ldr	r1, [pc, #40]	; (80068a0 <UARTEx_SetNbDataToProcess+0xb4>)
 8006878:	5c8a      	ldrb	r2, [r1, r2]
 800687a:	435a      	muls	r2, r3
 800687c:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800687e:	193b      	adds	r3, r7, r4
 8006880:	781b      	ldrb	r3, [r3, #0]
 8006882:	4a08      	ldr	r2, [pc, #32]	; (80068a4 <UARTEx_SetNbDataToProcess+0xb8>)
 8006884:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006886:	0019      	movs	r1, r3
 8006888:	f7f9 fcea 	bl	8000260 <__divsi3>
 800688c:	0003      	movs	r3, r0
 800688e:	b299      	uxth	r1, r3
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2268      	movs	r2, #104	; 0x68
 8006894:	5299      	strh	r1, [r3, r2]
}
 8006896:	46c0      	nop			; (mov r8, r8)
 8006898:	46bd      	mov	sp, r7
 800689a:	b005      	add	sp, #20
 800689c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800689e:	46c0      	nop			; (mov r8, r8)
 80068a0:	0800bf20 	.word	0x0800bf20
 80068a4:	0800bf28 	.word	0x0800bf28

080068a8 <__errno>:
 80068a8:	4b01      	ldr	r3, [pc, #4]	; (80068b0 <__errno+0x8>)
 80068aa:	6818      	ldr	r0, [r3, #0]
 80068ac:	4770      	bx	lr
 80068ae:	46c0      	nop			; (mov r8, r8)
 80068b0:	20000054 	.word	0x20000054

080068b4 <__libc_init_array>:
 80068b4:	b570      	push	{r4, r5, r6, lr}
 80068b6:	2600      	movs	r6, #0
 80068b8:	4d0c      	ldr	r5, [pc, #48]	; (80068ec <__libc_init_array+0x38>)
 80068ba:	4c0d      	ldr	r4, [pc, #52]	; (80068f0 <__libc_init_array+0x3c>)
 80068bc:	1b64      	subs	r4, r4, r5
 80068be:	10a4      	asrs	r4, r4, #2
 80068c0:	42a6      	cmp	r6, r4
 80068c2:	d109      	bne.n	80068d8 <__libc_init_array+0x24>
 80068c4:	2600      	movs	r6, #0
 80068c6:	f005 f9c9 	bl	800bc5c <_init>
 80068ca:	4d0a      	ldr	r5, [pc, #40]	; (80068f4 <__libc_init_array+0x40>)
 80068cc:	4c0a      	ldr	r4, [pc, #40]	; (80068f8 <__libc_init_array+0x44>)
 80068ce:	1b64      	subs	r4, r4, r5
 80068d0:	10a4      	asrs	r4, r4, #2
 80068d2:	42a6      	cmp	r6, r4
 80068d4:	d105      	bne.n	80068e2 <__libc_init_array+0x2e>
 80068d6:	bd70      	pop	{r4, r5, r6, pc}
 80068d8:	00b3      	lsls	r3, r6, #2
 80068da:	58eb      	ldr	r3, [r5, r3]
 80068dc:	4798      	blx	r3
 80068de:	3601      	adds	r6, #1
 80068e0:	e7ee      	b.n	80068c0 <__libc_init_array+0xc>
 80068e2:	00b3      	lsls	r3, r6, #2
 80068e4:	58eb      	ldr	r3, [r5, r3]
 80068e6:	4798      	blx	r3
 80068e8:	3601      	adds	r6, #1
 80068ea:	e7f2      	b.n	80068d2 <__libc_init_array+0x1e>
 80068ec:	0800c3ec 	.word	0x0800c3ec
 80068f0:	0800c3ec 	.word	0x0800c3ec
 80068f4:	0800c3ec 	.word	0x0800c3ec
 80068f8:	0800c3f0 	.word	0x0800c3f0

080068fc <memset>:
 80068fc:	0003      	movs	r3, r0
 80068fe:	1882      	adds	r2, r0, r2
 8006900:	4293      	cmp	r3, r2
 8006902:	d100      	bne.n	8006906 <memset+0xa>
 8006904:	4770      	bx	lr
 8006906:	7019      	strb	r1, [r3, #0]
 8006908:	3301      	adds	r3, #1
 800690a:	e7f9      	b.n	8006900 <memset+0x4>

0800690c <__cvt>:
 800690c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800690e:	001e      	movs	r6, r3
 8006910:	2300      	movs	r3, #0
 8006912:	0014      	movs	r4, r2
 8006914:	b08b      	sub	sp, #44	; 0x2c
 8006916:	429e      	cmp	r6, r3
 8006918:	da04      	bge.n	8006924 <__cvt+0x18>
 800691a:	2180      	movs	r1, #128	; 0x80
 800691c:	0609      	lsls	r1, r1, #24
 800691e:	1873      	adds	r3, r6, r1
 8006920:	001e      	movs	r6, r3
 8006922:	232d      	movs	r3, #45	; 0x2d
 8006924:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006926:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8006928:	7013      	strb	r3, [r2, #0]
 800692a:	2320      	movs	r3, #32
 800692c:	2203      	movs	r2, #3
 800692e:	439f      	bics	r7, r3
 8006930:	2f46      	cmp	r7, #70	; 0x46
 8006932:	d007      	beq.n	8006944 <__cvt+0x38>
 8006934:	003b      	movs	r3, r7
 8006936:	3b45      	subs	r3, #69	; 0x45
 8006938:	4259      	negs	r1, r3
 800693a:	414b      	adcs	r3, r1
 800693c:	9910      	ldr	r1, [sp, #64]	; 0x40
 800693e:	3a01      	subs	r2, #1
 8006940:	18cb      	adds	r3, r1, r3
 8006942:	9310      	str	r3, [sp, #64]	; 0x40
 8006944:	ab09      	add	r3, sp, #36	; 0x24
 8006946:	9304      	str	r3, [sp, #16]
 8006948:	ab08      	add	r3, sp, #32
 800694a:	9303      	str	r3, [sp, #12]
 800694c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800694e:	9200      	str	r2, [sp, #0]
 8006950:	9302      	str	r3, [sp, #8]
 8006952:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006954:	0022      	movs	r2, r4
 8006956:	9301      	str	r3, [sp, #4]
 8006958:	0033      	movs	r3, r6
 800695a:	f001 fe75 	bl	8008648 <_dtoa_r>
 800695e:	0005      	movs	r5, r0
 8006960:	2f47      	cmp	r7, #71	; 0x47
 8006962:	d102      	bne.n	800696a <__cvt+0x5e>
 8006964:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006966:	07db      	lsls	r3, r3, #31
 8006968:	d528      	bpl.n	80069bc <__cvt+0xb0>
 800696a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800696c:	18eb      	adds	r3, r5, r3
 800696e:	9307      	str	r3, [sp, #28]
 8006970:	2f46      	cmp	r7, #70	; 0x46
 8006972:	d114      	bne.n	800699e <__cvt+0x92>
 8006974:	782b      	ldrb	r3, [r5, #0]
 8006976:	2b30      	cmp	r3, #48	; 0x30
 8006978:	d10c      	bne.n	8006994 <__cvt+0x88>
 800697a:	2200      	movs	r2, #0
 800697c:	2300      	movs	r3, #0
 800697e:	0020      	movs	r0, r4
 8006980:	0031      	movs	r1, r6
 8006982:	f7f9 fd69 	bl	8000458 <__aeabi_dcmpeq>
 8006986:	2800      	cmp	r0, #0
 8006988:	d104      	bne.n	8006994 <__cvt+0x88>
 800698a:	2301      	movs	r3, #1
 800698c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800698e:	1a9b      	subs	r3, r3, r2
 8006990:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006992:	6013      	str	r3, [r2, #0]
 8006994:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006996:	9a07      	ldr	r2, [sp, #28]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	18d3      	adds	r3, r2, r3
 800699c:	9307      	str	r3, [sp, #28]
 800699e:	2200      	movs	r2, #0
 80069a0:	2300      	movs	r3, #0
 80069a2:	0020      	movs	r0, r4
 80069a4:	0031      	movs	r1, r6
 80069a6:	f7f9 fd57 	bl	8000458 <__aeabi_dcmpeq>
 80069aa:	2800      	cmp	r0, #0
 80069ac:	d001      	beq.n	80069b2 <__cvt+0xa6>
 80069ae:	9b07      	ldr	r3, [sp, #28]
 80069b0:	9309      	str	r3, [sp, #36]	; 0x24
 80069b2:	2230      	movs	r2, #48	; 0x30
 80069b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069b6:	9907      	ldr	r1, [sp, #28]
 80069b8:	428b      	cmp	r3, r1
 80069ba:	d306      	bcc.n	80069ca <__cvt+0xbe>
 80069bc:	0028      	movs	r0, r5
 80069be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069c0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80069c2:	1b5b      	subs	r3, r3, r5
 80069c4:	6013      	str	r3, [r2, #0]
 80069c6:	b00b      	add	sp, #44	; 0x2c
 80069c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80069ca:	1c59      	adds	r1, r3, #1
 80069cc:	9109      	str	r1, [sp, #36]	; 0x24
 80069ce:	701a      	strb	r2, [r3, #0]
 80069d0:	e7f0      	b.n	80069b4 <__cvt+0xa8>

080069d2 <__exponent>:
 80069d2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80069d4:	1c83      	adds	r3, r0, #2
 80069d6:	b087      	sub	sp, #28
 80069d8:	9303      	str	r3, [sp, #12]
 80069da:	0005      	movs	r5, r0
 80069dc:	000c      	movs	r4, r1
 80069de:	232b      	movs	r3, #43	; 0x2b
 80069e0:	7002      	strb	r2, [r0, #0]
 80069e2:	2900      	cmp	r1, #0
 80069e4:	da01      	bge.n	80069ea <__exponent+0x18>
 80069e6:	424c      	negs	r4, r1
 80069e8:	3302      	adds	r3, #2
 80069ea:	706b      	strb	r3, [r5, #1]
 80069ec:	2c09      	cmp	r4, #9
 80069ee:	dd31      	ble.n	8006a54 <__exponent+0x82>
 80069f0:	270a      	movs	r7, #10
 80069f2:	ab04      	add	r3, sp, #16
 80069f4:	1dde      	adds	r6, r3, #7
 80069f6:	0020      	movs	r0, r4
 80069f8:	0039      	movs	r1, r7
 80069fa:	9601      	str	r6, [sp, #4]
 80069fc:	f7f9 fd16 	bl	800042c <__aeabi_idivmod>
 8006a00:	3e01      	subs	r6, #1
 8006a02:	3130      	adds	r1, #48	; 0x30
 8006a04:	0020      	movs	r0, r4
 8006a06:	7031      	strb	r1, [r6, #0]
 8006a08:	0039      	movs	r1, r7
 8006a0a:	9402      	str	r4, [sp, #8]
 8006a0c:	f7f9 fc28 	bl	8000260 <__divsi3>
 8006a10:	9b02      	ldr	r3, [sp, #8]
 8006a12:	0004      	movs	r4, r0
 8006a14:	2b63      	cmp	r3, #99	; 0x63
 8006a16:	dcee      	bgt.n	80069f6 <__exponent+0x24>
 8006a18:	9b01      	ldr	r3, [sp, #4]
 8006a1a:	3430      	adds	r4, #48	; 0x30
 8006a1c:	1e9a      	subs	r2, r3, #2
 8006a1e:	0013      	movs	r3, r2
 8006a20:	9903      	ldr	r1, [sp, #12]
 8006a22:	7014      	strb	r4, [r2, #0]
 8006a24:	a804      	add	r0, sp, #16
 8006a26:	3007      	adds	r0, #7
 8006a28:	4298      	cmp	r0, r3
 8006a2a:	d80e      	bhi.n	8006a4a <__exponent+0x78>
 8006a2c:	ab04      	add	r3, sp, #16
 8006a2e:	3307      	adds	r3, #7
 8006a30:	2000      	movs	r0, #0
 8006a32:	429a      	cmp	r2, r3
 8006a34:	d804      	bhi.n	8006a40 <__exponent+0x6e>
 8006a36:	ab04      	add	r3, sp, #16
 8006a38:	3009      	adds	r0, #9
 8006a3a:	18c0      	adds	r0, r0, r3
 8006a3c:	9b01      	ldr	r3, [sp, #4]
 8006a3e:	1ac0      	subs	r0, r0, r3
 8006a40:	9b03      	ldr	r3, [sp, #12]
 8006a42:	1818      	adds	r0, r3, r0
 8006a44:	1b40      	subs	r0, r0, r5
 8006a46:	b007      	add	sp, #28
 8006a48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a4a:	7818      	ldrb	r0, [r3, #0]
 8006a4c:	3301      	adds	r3, #1
 8006a4e:	7008      	strb	r0, [r1, #0]
 8006a50:	3101      	adds	r1, #1
 8006a52:	e7e7      	b.n	8006a24 <__exponent+0x52>
 8006a54:	2330      	movs	r3, #48	; 0x30
 8006a56:	18e4      	adds	r4, r4, r3
 8006a58:	70ab      	strb	r3, [r5, #2]
 8006a5a:	1d28      	adds	r0, r5, #4
 8006a5c:	70ec      	strb	r4, [r5, #3]
 8006a5e:	e7f1      	b.n	8006a44 <__exponent+0x72>

08006a60 <_printf_float>:
 8006a60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a62:	b095      	sub	sp, #84	; 0x54
 8006a64:	000c      	movs	r4, r1
 8006a66:	9209      	str	r2, [sp, #36]	; 0x24
 8006a68:	001e      	movs	r6, r3
 8006a6a:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8006a6c:	0007      	movs	r7, r0
 8006a6e:	f002 ff79 	bl	8009964 <_localeconv_r>
 8006a72:	6803      	ldr	r3, [r0, #0]
 8006a74:	0018      	movs	r0, r3
 8006a76:	930c      	str	r3, [sp, #48]	; 0x30
 8006a78:	f7f9 fb4c 	bl	8000114 <strlen>
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	9312      	str	r3, [sp, #72]	; 0x48
 8006a80:	7e23      	ldrb	r3, [r4, #24]
 8006a82:	2207      	movs	r2, #7
 8006a84:	930a      	str	r3, [sp, #40]	; 0x28
 8006a86:	6823      	ldr	r3, [r4, #0]
 8006a88:	900e      	str	r0, [sp, #56]	; 0x38
 8006a8a:	930d      	str	r3, [sp, #52]	; 0x34
 8006a8c:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006a8e:	682b      	ldr	r3, [r5, #0]
 8006a90:	05c9      	lsls	r1, r1, #23
 8006a92:	d547      	bpl.n	8006b24 <_printf_float+0xc4>
 8006a94:	189b      	adds	r3, r3, r2
 8006a96:	4393      	bics	r3, r2
 8006a98:	001a      	movs	r2, r3
 8006a9a:	3208      	adds	r2, #8
 8006a9c:	602a      	str	r2, [r5, #0]
 8006a9e:	681a      	ldr	r2, [r3, #0]
 8006aa0:	685b      	ldr	r3, [r3, #4]
 8006aa2:	64a2      	str	r2, [r4, #72]	; 0x48
 8006aa4:	64e3      	str	r3, [r4, #76]	; 0x4c
 8006aa6:	2201      	movs	r2, #1
 8006aa8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8006aaa:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8006aac:	930b      	str	r3, [sp, #44]	; 0x2c
 8006aae:	006b      	lsls	r3, r5, #1
 8006ab0:	085b      	lsrs	r3, r3, #1
 8006ab2:	930f      	str	r3, [sp, #60]	; 0x3c
 8006ab4:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8006ab6:	4ba7      	ldr	r3, [pc, #668]	; (8006d54 <_printf_float+0x2f4>)
 8006ab8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006aba:	4252      	negs	r2, r2
 8006abc:	f7fc f862 	bl	8002b84 <__aeabi_dcmpun>
 8006ac0:	2800      	cmp	r0, #0
 8006ac2:	d131      	bne.n	8006b28 <_printf_float+0xc8>
 8006ac4:	2201      	movs	r2, #1
 8006ac6:	4ba3      	ldr	r3, [pc, #652]	; (8006d54 <_printf_float+0x2f4>)
 8006ac8:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8006aca:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006acc:	4252      	negs	r2, r2
 8006ace:	f7f9 fcd3 	bl	8000478 <__aeabi_dcmple>
 8006ad2:	2800      	cmp	r0, #0
 8006ad4:	d128      	bne.n	8006b28 <_printf_float+0xc8>
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	2300      	movs	r3, #0
 8006ada:	0029      	movs	r1, r5
 8006adc:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8006ade:	f7f9 fcc1 	bl	8000464 <__aeabi_dcmplt>
 8006ae2:	2800      	cmp	r0, #0
 8006ae4:	d003      	beq.n	8006aee <_printf_float+0x8e>
 8006ae6:	0023      	movs	r3, r4
 8006ae8:	222d      	movs	r2, #45	; 0x2d
 8006aea:	3343      	adds	r3, #67	; 0x43
 8006aec:	701a      	strb	r2, [r3, #0]
 8006aee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006af0:	4d99      	ldr	r5, [pc, #612]	; (8006d58 <_printf_float+0x2f8>)
 8006af2:	2b47      	cmp	r3, #71	; 0x47
 8006af4:	d900      	bls.n	8006af8 <_printf_float+0x98>
 8006af6:	4d99      	ldr	r5, [pc, #612]	; (8006d5c <_printf_float+0x2fc>)
 8006af8:	2303      	movs	r3, #3
 8006afa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006afc:	6123      	str	r3, [r4, #16]
 8006afe:	3301      	adds	r3, #1
 8006b00:	439a      	bics	r2, r3
 8006b02:	2300      	movs	r3, #0
 8006b04:	6022      	str	r2, [r4, #0]
 8006b06:	930b      	str	r3, [sp, #44]	; 0x2c
 8006b08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b0a:	0021      	movs	r1, r4
 8006b0c:	0038      	movs	r0, r7
 8006b0e:	9600      	str	r6, [sp, #0]
 8006b10:	aa13      	add	r2, sp, #76	; 0x4c
 8006b12:	f000 f9e7 	bl	8006ee4 <_printf_common>
 8006b16:	1c43      	adds	r3, r0, #1
 8006b18:	d000      	beq.n	8006b1c <_printf_float+0xbc>
 8006b1a:	e0a2      	b.n	8006c62 <_printf_float+0x202>
 8006b1c:	2001      	movs	r0, #1
 8006b1e:	4240      	negs	r0, r0
 8006b20:	b015      	add	sp, #84	; 0x54
 8006b22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b24:	3307      	adds	r3, #7
 8006b26:	e7b6      	b.n	8006a96 <_printf_float+0x36>
 8006b28:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006b2a:	002b      	movs	r3, r5
 8006b2c:	0010      	movs	r0, r2
 8006b2e:	0029      	movs	r1, r5
 8006b30:	f7fc f828 	bl	8002b84 <__aeabi_dcmpun>
 8006b34:	2800      	cmp	r0, #0
 8006b36:	d00b      	beq.n	8006b50 <_printf_float+0xf0>
 8006b38:	2d00      	cmp	r5, #0
 8006b3a:	da03      	bge.n	8006b44 <_printf_float+0xe4>
 8006b3c:	0023      	movs	r3, r4
 8006b3e:	222d      	movs	r2, #45	; 0x2d
 8006b40:	3343      	adds	r3, #67	; 0x43
 8006b42:	701a      	strb	r2, [r3, #0]
 8006b44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b46:	4d86      	ldr	r5, [pc, #536]	; (8006d60 <_printf_float+0x300>)
 8006b48:	2b47      	cmp	r3, #71	; 0x47
 8006b4a:	d9d5      	bls.n	8006af8 <_printf_float+0x98>
 8006b4c:	4d85      	ldr	r5, [pc, #532]	; (8006d64 <_printf_float+0x304>)
 8006b4e:	e7d3      	b.n	8006af8 <_printf_float+0x98>
 8006b50:	2220      	movs	r2, #32
 8006b52:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006b54:	6863      	ldr	r3, [r4, #4]
 8006b56:	4391      	bics	r1, r2
 8006b58:	910f      	str	r1, [sp, #60]	; 0x3c
 8006b5a:	1c5a      	adds	r2, r3, #1
 8006b5c:	d149      	bne.n	8006bf2 <_printf_float+0x192>
 8006b5e:	3307      	adds	r3, #7
 8006b60:	6063      	str	r3, [r4, #4]
 8006b62:	2380      	movs	r3, #128	; 0x80
 8006b64:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006b66:	00db      	lsls	r3, r3, #3
 8006b68:	4313      	orrs	r3, r2
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	9206      	str	r2, [sp, #24]
 8006b6e:	aa12      	add	r2, sp, #72	; 0x48
 8006b70:	9205      	str	r2, [sp, #20]
 8006b72:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006b74:	a908      	add	r1, sp, #32
 8006b76:	9204      	str	r2, [sp, #16]
 8006b78:	aa11      	add	r2, sp, #68	; 0x44
 8006b7a:	9203      	str	r2, [sp, #12]
 8006b7c:	2223      	movs	r2, #35	; 0x23
 8006b7e:	6023      	str	r3, [r4, #0]
 8006b80:	9301      	str	r3, [sp, #4]
 8006b82:	6863      	ldr	r3, [r4, #4]
 8006b84:	1852      	adds	r2, r2, r1
 8006b86:	9202      	str	r2, [sp, #8]
 8006b88:	9300      	str	r3, [sp, #0]
 8006b8a:	0038      	movs	r0, r7
 8006b8c:	002b      	movs	r3, r5
 8006b8e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006b90:	f7ff febc 	bl	800690c <__cvt>
 8006b94:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006b96:	0005      	movs	r5, r0
 8006b98:	9911      	ldr	r1, [sp, #68]	; 0x44
 8006b9a:	2b47      	cmp	r3, #71	; 0x47
 8006b9c:	d108      	bne.n	8006bb0 <_printf_float+0x150>
 8006b9e:	1ccb      	adds	r3, r1, #3
 8006ba0:	db02      	blt.n	8006ba8 <_printf_float+0x148>
 8006ba2:	6863      	ldr	r3, [r4, #4]
 8006ba4:	4299      	cmp	r1, r3
 8006ba6:	dd48      	ble.n	8006c3a <_printf_float+0x1da>
 8006ba8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006baa:	3b02      	subs	r3, #2
 8006bac:	b2db      	uxtb	r3, r3
 8006bae:	930a      	str	r3, [sp, #40]	; 0x28
 8006bb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006bb2:	2b65      	cmp	r3, #101	; 0x65
 8006bb4:	d824      	bhi.n	8006c00 <_printf_float+0x1a0>
 8006bb6:	0020      	movs	r0, r4
 8006bb8:	001a      	movs	r2, r3
 8006bba:	3901      	subs	r1, #1
 8006bbc:	3050      	adds	r0, #80	; 0x50
 8006bbe:	9111      	str	r1, [sp, #68]	; 0x44
 8006bc0:	f7ff ff07 	bl	80069d2 <__exponent>
 8006bc4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006bc6:	900b      	str	r0, [sp, #44]	; 0x2c
 8006bc8:	1813      	adds	r3, r2, r0
 8006bca:	6123      	str	r3, [r4, #16]
 8006bcc:	2a01      	cmp	r2, #1
 8006bce:	dc02      	bgt.n	8006bd6 <_printf_float+0x176>
 8006bd0:	6822      	ldr	r2, [r4, #0]
 8006bd2:	07d2      	lsls	r2, r2, #31
 8006bd4:	d501      	bpl.n	8006bda <_printf_float+0x17a>
 8006bd6:	3301      	adds	r3, #1
 8006bd8:	6123      	str	r3, [r4, #16]
 8006bda:	2323      	movs	r3, #35	; 0x23
 8006bdc:	aa08      	add	r2, sp, #32
 8006bde:	189b      	adds	r3, r3, r2
 8006be0:	781b      	ldrb	r3, [r3, #0]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d100      	bne.n	8006be8 <_printf_float+0x188>
 8006be6:	e78f      	b.n	8006b08 <_printf_float+0xa8>
 8006be8:	0023      	movs	r3, r4
 8006bea:	222d      	movs	r2, #45	; 0x2d
 8006bec:	3343      	adds	r3, #67	; 0x43
 8006bee:	701a      	strb	r2, [r3, #0]
 8006bf0:	e78a      	b.n	8006b08 <_printf_float+0xa8>
 8006bf2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006bf4:	2a47      	cmp	r2, #71	; 0x47
 8006bf6:	d1b4      	bne.n	8006b62 <_printf_float+0x102>
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d1b2      	bne.n	8006b62 <_printf_float+0x102>
 8006bfc:	3301      	adds	r3, #1
 8006bfe:	e7af      	b.n	8006b60 <_printf_float+0x100>
 8006c00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c02:	2b66      	cmp	r3, #102	; 0x66
 8006c04:	d11b      	bne.n	8006c3e <_printf_float+0x1de>
 8006c06:	6863      	ldr	r3, [r4, #4]
 8006c08:	2900      	cmp	r1, #0
 8006c0a:	dd0d      	ble.n	8006c28 <_printf_float+0x1c8>
 8006c0c:	6121      	str	r1, [r4, #16]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d102      	bne.n	8006c18 <_printf_float+0x1b8>
 8006c12:	6822      	ldr	r2, [r4, #0]
 8006c14:	07d2      	lsls	r2, r2, #31
 8006c16:	d502      	bpl.n	8006c1e <_printf_float+0x1be>
 8006c18:	3301      	adds	r3, #1
 8006c1a:	1859      	adds	r1, r3, r1
 8006c1c:	6121      	str	r1, [r4, #16]
 8006c1e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006c20:	65a3      	str	r3, [r4, #88]	; 0x58
 8006c22:	2300      	movs	r3, #0
 8006c24:	930b      	str	r3, [sp, #44]	; 0x2c
 8006c26:	e7d8      	b.n	8006bda <_printf_float+0x17a>
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d103      	bne.n	8006c34 <_printf_float+0x1d4>
 8006c2c:	2201      	movs	r2, #1
 8006c2e:	6821      	ldr	r1, [r4, #0]
 8006c30:	4211      	tst	r1, r2
 8006c32:	d000      	beq.n	8006c36 <_printf_float+0x1d6>
 8006c34:	1c9a      	adds	r2, r3, #2
 8006c36:	6122      	str	r2, [r4, #16]
 8006c38:	e7f1      	b.n	8006c1e <_printf_float+0x1be>
 8006c3a:	2367      	movs	r3, #103	; 0x67
 8006c3c:	930a      	str	r3, [sp, #40]	; 0x28
 8006c3e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006c40:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006c42:	4293      	cmp	r3, r2
 8006c44:	db06      	blt.n	8006c54 <_printf_float+0x1f4>
 8006c46:	6822      	ldr	r2, [r4, #0]
 8006c48:	6123      	str	r3, [r4, #16]
 8006c4a:	07d2      	lsls	r2, r2, #31
 8006c4c:	d5e7      	bpl.n	8006c1e <_printf_float+0x1be>
 8006c4e:	3301      	adds	r3, #1
 8006c50:	6123      	str	r3, [r4, #16]
 8006c52:	e7e4      	b.n	8006c1e <_printf_float+0x1be>
 8006c54:	2101      	movs	r1, #1
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	dc01      	bgt.n	8006c5e <_printf_float+0x1fe>
 8006c5a:	1849      	adds	r1, r1, r1
 8006c5c:	1ac9      	subs	r1, r1, r3
 8006c5e:	1852      	adds	r2, r2, r1
 8006c60:	e7e9      	b.n	8006c36 <_printf_float+0x1d6>
 8006c62:	6822      	ldr	r2, [r4, #0]
 8006c64:	0553      	lsls	r3, r2, #21
 8006c66:	d407      	bmi.n	8006c78 <_printf_float+0x218>
 8006c68:	6923      	ldr	r3, [r4, #16]
 8006c6a:	002a      	movs	r2, r5
 8006c6c:	0038      	movs	r0, r7
 8006c6e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006c70:	47b0      	blx	r6
 8006c72:	1c43      	adds	r3, r0, #1
 8006c74:	d128      	bne.n	8006cc8 <_printf_float+0x268>
 8006c76:	e751      	b.n	8006b1c <_printf_float+0xbc>
 8006c78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c7a:	2b65      	cmp	r3, #101	; 0x65
 8006c7c:	d800      	bhi.n	8006c80 <_printf_float+0x220>
 8006c7e:	e0e1      	b.n	8006e44 <_printf_float+0x3e4>
 8006c80:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8006c82:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8006c84:	2200      	movs	r2, #0
 8006c86:	2300      	movs	r3, #0
 8006c88:	f7f9 fbe6 	bl	8000458 <__aeabi_dcmpeq>
 8006c8c:	2800      	cmp	r0, #0
 8006c8e:	d031      	beq.n	8006cf4 <_printf_float+0x294>
 8006c90:	2301      	movs	r3, #1
 8006c92:	0038      	movs	r0, r7
 8006c94:	4a34      	ldr	r2, [pc, #208]	; (8006d68 <_printf_float+0x308>)
 8006c96:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006c98:	47b0      	blx	r6
 8006c9a:	1c43      	adds	r3, r0, #1
 8006c9c:	d100      	bne.n	8006ca0 <_printf_float+0x240>
 8006c9e:	e73d      	b.n	8006b1c <_printf_float+0xbc>
 8006ca0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006ca2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006ca4:	4293      	cmp	r3, r2
 8006ca6:	db02      	blt.n	8006cae <_printf_float+0x24e>
 8006ca8:	6823      	ldr	r3, [r4, #0]
 8006caa:	07db      	lsls	r3, r3, #31
 8006cac:	d50c      	bpl.n	8006cc8 <_printf_float+0x268>
 8006cae:	0038      	movs	r0, r7
 8006cb0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006cb2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006cb4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006cb6:	47b0      	blx	r6
 8006cb8:	2500      	movs	r5, #0
 8006cba:	1c43      	adds	r3, r0, #1
 8006cbc:	d100      	bne.n	8006cc0 <_printf_float+0x260>
 8006cbe:	e72d      	b.n	8006b1c <_printf_float+0xbc>
 8006cc0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006cc2:	3b01      	subs	r3, #1
 8006cc4:	42ab      	cmp	r3, r5
 8006cc6:	dc0a      	bgt.n	8006cde <_printf_float+0x27e>
 8006cc8:	6823      	ldr	r3, [r4, #0]
 8006cca:	079b      	lsls	r3, r3, #30
 8006ccc:	d500      	bpl.n	8006cd0 <_printf_float+0x270>
 8006cce:	e106      	b.n	8006ede <_printf_float+0x47e>
 8006cd0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006cd2:	68e0      	ldr	r0, [r4, #12]
 8006cd4:	4298      	cmp	r0, r3
 8006cd6:	db00      	blt.n	8006cda <_printf_float+0x27a>
 8006cd8:	e722      	b.n	8006b20 <_printf_float+0xc0>
 8006cda:	0018      	movs	r0, r3
 8006cdc:	e720      	b.n	8006b20 <_printf_float+0xc0>
 8006cde:	0022      	movs	r2, r4
 8006ce0:	2301      	movs	r3, #1
 8006ce2:	0038      	movs	r0, r7
 8006ce4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006ce6:	321a      	adds	r2, #26
 8006ce8:	47b0      	blx	r6
 8006cea:	1c43      	adds	r3, r0, #1
 8006cec:	d100      	bne.n	8006cf0 <_printf_float+0x290>
 8006cee:	e715      	b.n	8006b1c <_printf_float+0xbc>
 8006cf0:	3501      	adds	r5, #1
 8006cf2:	e7e5      	b.n	8006cc0 <_printf_float+0x260>
 8006cf4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	dc38      	bgt.n	8006d6c <_printf_float+0x30c>
 8006cfa:	2301      	movs	r3, #1
 8006cfc:	0038      	movs	r0, r7
 8006cfe:	4a1a      	ldr	r2, [pc, #104]	; (8006d68 <_printf_float+0x308>)
 8006d00:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006d02:	47b0      	blx	r6
 8006d04:	1c43      	adds	r3, r0, #1
 8006d06:	d100      	bne.n	8006d0a <_printf_float+0x2aa>
 8006d08:	e708      	b.n	8006b1c <_printf_float+0xbc>
 8006d0a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006d0c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006d0e:	4313      	orrs	r3, r2
 8006d10:	d102      	bne.n	8006d18 <_printf_float+0x2b8>
 8006d12:	6823      	ldr	r3, [r4, #0]
 8006d14:	07db      	lsls	r3, r3, #31
 8006d16:	d5d7      	bpl.n	8006cc8 <_printf_float+0x268>
 8006d18:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006d1a:	0038      	movs	r0, r7
 8006d1c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006d1e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006d20:	47b0      	blx	r6
 8006d22:	1c43      	adds	r3, r0, #1
 8006d24:	d100      	bne.n	8006d28 <_printf_float+0x2c8>
 8006d26:	e6f9      	b.n	8006b1c <_printf_float+0xbc>
 8006d28:	2300      	movs	r3, #0
 8006d2a:	930a      	str	r3, [sp, #40]	; 0x28
 8006d2c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006d2e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006d30:	425b      	negs	r3, r3
 8006d32:	4293      	cmp	r3, r2
 8006d34:	dc01      	bgt.n	8006d3a <_printf_float+0x2da>
 8006d36:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006d38:	e797      	b.n	8006c6a <_printf_float+0x20a>
 8006d3a:	0022      	movs	r2, r4
 8006d3c:	2301      	movs	r3, #1
 8006d3e:	0038      	movs	r0, r7
 8006d40:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006d42:	321a      	adds	r2, #26
 8006d44:	47b0      	blx	r6
 8006d46:	1c43      	adds	r3, r0, #1
 8006d48:	d100      	bne.n	8006d4c <_printf_float+0x2ec>
 8006d4a:	e6e7      	b.n	8006b1c <_printf_float+0xbc>
 8006d4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d4e:	3301      	adds	r3, #1
 8006d50:	e7eb      	b.n	8006d2a <_printf_float+0x2ca>
 8006d52:	46c0      	nop			; (mov r8, r8)
 8006d54:	7fefffff 	.word	0x7fefffff
 8006d58:	0800bf34 	.word	0x0800bf34
 8006d5c:	0800bf38 	.word	0x0800bf38
 8006d60:	0800bf3c 	.word	0x0800bf3c
 8006d64:	0800bf40 	.word	0x0800bf40
 8006d68:	0800c339 	.word	0x0800c339
 8006d6c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006d6e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006d70:	920a      	str	r2, [sp, #40]	; 0x28
 8006d72:	429a      	cmp	r2, r3
 8006d74:	dd00      	ble.n	8006d78 <_printf_float+0x318>
 8006d76:	930a      	str	r3, [sp, #40]	; 0x28
 8006d78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	dc3c      	bgt.n	8006df8 <_printf_float+0x398>
 8006d7e:	2300      	movs	r3, #0
 8006d80:	930d      	str	r3, [sp, #52]	; 0x34
 8006d82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d84:	43db      	mvns	r3, r3
 8006d86:	17db      	asrs	r3, r3, #31
 8006d88:	930f      	str	r3, [sp, #60]	; 0x3c
 8006d8a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006d8c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006d8e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006d90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d92:	4013      	ands	r3, r2
 8006d94:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006d96:	1ad3      	subs	r3, r2, r3
 8006d98:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006d9a:	4293      	cmp	r3, r2
 8006d9c:	dc34      	bgt.n	8006e08 <_printf_float+0x3a8>
 8006d9e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006da0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006da2:	4293      	cmp	r3, r2
 8006da4:	db3d      	blt.n	8006e22 <_printf_float+0x3c2>
 8006da6:	6823      	ldr	r3, [r4, #0]
 8006da8:	07db      	lsls	r3, r3, #31
 8006daa:	d43a      	bmi.n	8006e22 <_printf_float+0x3c2>
 8006dac:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006dae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006db0:	9911      	ldr	r1, [sp, #68]	; 0x44
 8006db2:	1ad3      	subs	r3, r2, r3
 8006db4:	1a52      	subs	r2, r2, r1
 8006db6:	920a      	str	r2, [sp, #40]	; 0x28
 8006db8:	429a      	cmp	r2, r3
 8006dba:	dd00      	ble.n	8006dbe <_printf_float+0x35e>
 8006dbc:	930a      	str	r3, [sp, #40]	; 0x28
 8006dbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	dc36      	bgt.n	8006e32 <_printf_float+0x3d2>
 8006dc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006dc6:	2500      	movs	r5, #0
 8006dc8:	43db      	mvns	r3, r3
 8006dca:	17db      	asrs	r3, r3, #31
 8006dcc:	930b      	str	r3, [sp, #44]	; 0x2c
 8006dce:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006dd0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006dd2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006dd4:	1a9b      	subs	r3, r3, r2
 8006dd6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006dd8:	400a      	ands	r2, r1
 8006dda:	1a9b      	subs	r3, r3, r2
 8006ddc:	42ab      	cmp	r3, r5
 8006dde:	dc00      	bgt.n	8006de2 <_printf_float+0x382>
 8006de0:	e772      	b.n	8006cc8 <_printf_float+0x268>
 8006de2:	0022      	movs	r2, r4
 8006de4:	2301      	movs	r3, #1
 8006de6:	0038      	movs	r0, r7
 8006de8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006dea:	321a      	adds	r2, #26
 8006dec:	47b0      	blx	r6
 8006dee:	1c43      	adds	r3, r0, #1
 8006df0:	d100      	bne.n	8006df4 <_printf_float+0x394>
 8006df2:	e693      	b.n	8006b1c <_printf_float+0xbc>
 8006df4:	3501      	adds	r5, #1
 8006df6:	e7ea      	b.n	8006dce <_printf_float+0x36e>
 8006df8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006dfa:	002a      	movs	r2, r5
 8006dfc:	0038      	movs	r0, r7
 8006dfe:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006e00:	47b0      	blx	r6
 8006e02:	1c43      	adds	r3, r0, #1
 8006e04:	d1bb      	bne.n	8006d7e <_printf_float+0x31e>
 8006e06:	e689      	b.n	8006b1c <_printf_float+0xbc>
 8006e08:	0022      	movs	r2, r4
 8006e0a:	2301      	movs	r3, #1
 8006e0c:	0038      	movs	r0, r7
 8006e0e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006e10:	321a      	adds	r2, #26
 8006e12:	47b0      	blx	r6
 8006e14:	1c43      	adds	r3, r0, #1
 8006e16:	d100      	bne.n	8006e1a <_printf_float+0x3ba>
 8006e18:	e680      	b.n	8006b1c <_printf_float+0xbc>
 8006e1a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006e1c:	3301      	adds	r3, #1
 8006e1e:	930d      	str	r3, [sp, #52]	; 0x34
 8006e20:	e7b3      	b.n	8006d8a <_printf_float+0x32a>
 8006e22:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006e24:	0038      	movs	r0, r7
 8006e26:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006e28:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006e2a:	47b0      	blx	r6
 8006e2c:	1c43      	adds	r3, r0, #1
 8006e2e:	d1bd      	bne.n	8006dac <_printf_float+0x34c>
 8006e30:	e674      	b.n	8006b1c <_printf_float+0xbc>
 8006e32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006e34:	0038      	movs	r0, r7
 8006e36:	18ea      	adds	r2, r5, r3
 8006e38:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006e3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e3c:	47b0      	blx	r6
 8006e3e:	1c43      	adds	r3, r0, #1
 8006e40:	d1c0      	bne.n	8006dc4 <_printf_float+0x364>
 8006e42:	e66b      	b.n	8006b1c <_printf_float+0xbc>
 8006e44:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006e46:	2b01      	cmp	r3, #1
 8006e48:	dc02      	bgt.n	8006e50 <_printf_float+0x3f0>
 8006e4a:	2301      	movs	r3, #1
 8006e4c:	421a      	tst	r2, r3
 8006e4e:	d034      	beq.n	8006eba <_printf_float+0x45a>
 8006e50:	2301      	movs	r3, #1
 8006e52:	002a      	movs	r2, r5
 8006e54:	0038      	movs	r0, r7
 8006e56:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006e58:	47b0      	blx	r6
 8006e5a:	1c43      	adds	r3, r0, #1
 8006e5c:	d100      	bne.n	8006e60 <_printf_float+0x400>
 8006e5e:	e65d      	b.n	8006b1c <_printf_float+0xbc>
 8006e60:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006e62:	0038      	movs	r0, r7
 8006e64:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006e66:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006e68:	47b0      	blx	r6
 8006e6a:	1c43      	adds	r3, r0, #1
 8006e6c:	d100      	bne.n	8006e70 <_printf_float+0x410>
 8006e6e:	e655      	b.n	8006b1c <_printf_float+0xbc>
 8006e70:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8006e72:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8006e74:	2200      	movs	r2, #0
 8006e76:	2300      	movs	r3, #0
 8006e78:	f7f9 faee 	bl	8000458 <__aeabi_dcmpeq>
 8006e7c:	2800      	cmp	r0, #0
 8006e7e:	d11a      	bne.n	8006eb6 <_printf_float+0x456>
 8006e80:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006e82:	1c6a      	adds	r2, r5, #1
 8006e84:	3b01      	subs	r3, #1
 8006e86:	0038      	movs	r0, r7
 8006e88:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006e8a:	47b0      	blx	r6
 8006e8c:	1c43      	adds	r3, r0, #1
 8006e8e:	d10e      	bne.n	8006eae <_printf_float+0x44e>
 8006e90:	e644      	b.n	8006b1c <_printf_float+0xbc>
 8006e92:	0022      	movs	r2, r4
 8006e94:	2301      	movs	r3, #1
 8006e96:	0038      	movs	r0, r7
 8006e98:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006e9a:	321a      	adds	r2, #26
 8006e9c:	47b0      	blx	r6
 8006e9e:	1c43      	adds	r3, r0, #1
 8006ea0:	d100      	bne.n	8006ea4 <_printf_float+0x444>
 8006ea2:	e63b      	b.n	8006b1c <_printf_float+0xbc>
 8006ea4:	3501      	adds	r5, #1
 8006ea6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006ea8:	3b01      	subs	r3, #1
 8006eaa:	42ab      	cmp	r3, r5
 8006eac:	dcf1      	bgt.n	8006e92 <_printf_float+0x432>
 8006eae:	0022      	movs	r2, r4
 8006eb0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006eb2:	3250      	adds	r2, #80	; 0x50
 8006eb4:	e6da      	b.n	8006c6c <_printf_float+0x20c>
 8006eb6:	2500      	movs	r5, #0
 8006eb8:	e7f5      	b.n	8006ea6 <_printf_float+0x446>
 8006eba:	002a      	movs	r2, r5
 8006ebc:	e7e3      	b.n	8006e86 <_printf_float+0x426>
 8006ebe:	0022      	movs	r2, r4
 8006ec0:	2301      	movs	r3, #1
 8006ec2:	0038      	movs	r0, r7
 8006ec4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006ec6:	3219      	adds	r2, #25
 8006ec8:	47b0      	blx	r6
 8006eca:	1c43      	adds	r3, r0, #1
 8006ecc:	d100      	bne.n	8006ed0 <_printf_float+0x470>
 8006ece:	e625      	b.n	8006b1c <_printf_float+0xbc>
 8006ed0:	3501      	adds	r5, #1
 8006ed2:	68e3      	ldr	r3, [r4, #12]
 8006ed4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006ed6:	1a9b      	subs	r3, r3, r2
 8006ed8:	42ab      	cmp	r3, r5
 8006eda:	dcf0      	bgt.n	8006ebe <_printf_float+0x45e>
 8006edc:	e6f8      	b.n	8006cd0 <_printf_float+0x270>
 8006ede:	2500      	movs	r5, #0
 8006ee0:	e7f7      	b.n	8006ed2 <_printf_float+0x472>
 8006ee2:	46c0      	nop			; (mov r8, r8)

08006ee4 <_printf_common>:
 8006ee4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006ee6:	0015      	movs	r5, r2
 8006ee8:	9301      	str	r3, [sp, #4]
 8006eea:	688a      	ldr	r2, [r1, #8]
 8006eec:	690b      	ldr	r3, [r1, #16]
 8006eee:	000c      	movs	r4, r1
 8006ef0:	9000      	str	r0, [sp, #0]
 8006ef2:	4293      	cmp	r3, r2
 8006ef4:	da00      	bge.n	8006ef8 <_printf_common+0x14>
 8006ef6:	0013      	movs	r3, r2
 8006ef8:	0022      	movs	r2, r4
 8006efa:	602b      	str	r3, [r5, #0]
 8006efc:	3243      	adds	r2, #67	; 0x43
 8006efe:	7812      	ldrb	r2, [r2, #0]
 8006f00:	2a00      	cmp	r2, #0
 8006f02:	d001      	beq.n	8006f08 <_printf_common+0x24>
 8006f04:	3301      	adds	r3, #1
 8006f06:	602b      	str	r3, [r5, #0]
 8006f08:	6823      	ldr	r3, [r4, #0]
 8006f0a:	069b      	lsls	r3, r3, #26
 8006f0c:	d502      	bpl.n	8006f14 <_printf_common+0x30>
 8006f0e:	682b      	ldr	r3, [r5, #0]
 8006f10:	3302      	adds	r3, #2
 8006f12:	602b      	str	r3, [r5, #0]
 8006f14:	6822      	ldr	r2, [r4, #0]
 8006f16:	2306      	movs	r3, #6
 8006f18:	0017      	movs	r7, r2
 8006f1a:	401f      	ands	r7, r3
 8006f1c:	421a      	tst	r2, r3
 8006f1e:	d027      	beq.n	8006f70 <_printf_common+0x8c>
 8006f20:	0023      	movs	r3, r4
 8006f22:	3343      	adds	r3, #67	; 0x43
 8006f24:	781b      	ldrb	r3, [r3, #0]
 8006f26:	1e5a      	subs	r2, r3, #1
 8006f28:	4193      	sbcs	r3, r2
 8006f2a:	6822      	ldr	r2, [r4, #0]
 8006f2c:	0692      	lsls	r2, r2, #26
 8006f2e:	d430      	bmi.n	8006f92 <_printf_common+0xae>
 8006f30:	0022      	movs	r2, r4
 8006f32:	9901      	ldr	r1, [sp, #4]
 8006f34:	9800      	ldr	r0, [sp, #0]
 8006f36:	9e08      	ldr	r6, [sp, #32]
 8006f38:	3243      	adds	r2, #67	; 0x43
 8006f3a:	47b0      	blx	r6
 8006f3c:	1c43      	adds	r3, r0, #1
 8006f3e:	d025      	beq.n	8006f8c <_printf_common+0xa8>
 8006f40:	2306      	movs	r3, #6
 8006f42:	6820      	ldr	r0, [r4, #0]
 8006f44:	682a      	ldr	r2, [r5, #0]
 8006f46:	68e1      	ldr	r1, [r4, #12]
 8006f48:	2500      	movs	r5, #0
 8006f4a:	4003      	ands	r3, r0
 8006f4c:	2b04      	cmp	r3, #4
 8006f4e:	d103      	bne.n	8006f58 <_printf_common+0x74>
 8006f50:	1a8d      	subs	r5, r1, r2
 8006f52:	43eb      	mvns	r3, r5
 8006f54:	17db      	asrs	r3, r3, #31
 8006f56:	401d      	ands	r5, r3
 8006f58:	68a3      	ldr	r3, [r4, #8]
 8006f5a:	6922      	ldr	r2, [r4, #16]
 8006f5c:	4293      	cmp	r3, r2
 8006f5e:	dd01      	ble.n	8006f64 <_printf_common+0x80>
 8006f60:	1a9b      	subs	r3, r3, r2
 8006f62:	18ed      	adds	r5, r5, r3
 8006f64:	2700      	movs	r7, #0
 8006f66:	42bd      	cmp	r5, r7
 8006f68:	d120      	bne.n	8006fac <_printf_common+0xc8>
 8006f6a:	2000      	movs	r0, #0
 8006f6c:	e010      	b.n	8006f90 <_printf_common+0xac>
 8006f6e:	3701      	adds	r7, #1
 8006f70:	68e3      	ldr	r3, [r4, #12]
 8006f72:	682a      	ldr	r2, [r5, #0]
 8006f74:	1a9b      	subs	r3, r3, r2
 8006f76:	42bb      	cmp	r3, r7
 8006f78:	ddd2      	ble.n	8006f20 <_printf_common+0x3c>
 8006f7a:	0022      	movs	r2, r4
 8006f7c:	2301      	movs	r3, #1
 8006f7e:	9901      	ldr	r1, [sp, #4]
 8006f80:	9800      	ldr	r0, [sp, #0]
 8006f82:	9e08      	ldr	r6, [sp, #32]
 8006f84:	3219      	adds	r2, #25
 8006f86:	47b0      	blx	r6
 8006f88:	1c43      	adds	r3, r0, #1
 8006f8a:	d1f0      	bne.n	8006f6e <_printf_common+0x8a>
 8006f8c:	2001      	movs	r0, #1
 8006f8e:	4240      	negs	r0, r0
 8006f90:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006f92:	2030      	movs	r0, #48	; 0x30
 8006f94:	18e1      	adds	r1, r4, r3
 8006f96:	3143      	adds	r1, #67	; 0x43
 8006f98:	7008      	strb	r0, [r1, #0]
 8006f9a:	0021      	movs	r1, r4
 8006f9c:	1c5a      	adds	r2, r3, #1
 8006f9e:	3145      	adds	r1, #69	; 0x45
 8006fa0:	7809      	ldrb	r1, [r1, #0]
 8006fa2:	18a2      	adds	r2, r4, r2
 8006fa4:	3243      	adds	r2, #67	; 0x43
 8006fa6:	3302      	adds	r3, #2
 8006fa8:	7011      	strb	r1, [r2, #0]
 8006faa:	e7c1      	b.n	8006f30 <_printf_common+0x4c>
 8006fac:	0022      	movs	r2, r4
 8006fae:	2301      	movs	r3, #1
 8006fb0:	9901      	ldr	r1, [sp, #4]
 8006fb2:	9800      	ldr	r0, [sp, #0]
 8006fb4:	9e08      	ldr	r6, [sp, #32]
 8006fb6:	321a      	adds	r2, #26
 8006fb8:	47b0      	blx	r6
 8006fba:	1c43      	adds	r3, r0, #1
 8006fbc:	d0e6      	beq.n	8006f8c <_printf_common+0xa8>
 8006fbe:	3701      	adds	r7, #1
 8006fc0:	e7d1      	b.n	8006f66 <_printf_common+0x82>
	...

08006fc4 <_printf_i>:
 8006fc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006fc6:	b08b      	sub	sp, #44	; 0x2c
 8006fc8:	9206      	str	r2, [sp, #24]
 8006fca:	000a      	movs	r2, r1
 8006fcc:	3243      	adds	r2, #67	; 0x43
 8006fce:	9307      	str	r3, [sp, #28]
 8006fd0:	9005      	str	r0, [sp, #20]
 8006fd2:	9204      	str	r2, [sp, #16]
 8006fd4:	7e0a      	ldrb	r2, [r1, #24]
 8006fd6:	000c      	movs	r4, r1
 8006fd8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006fda:	2a78      	cmp	r2, #120	; 0x78
 8006fdc:	d807      	bhi.n	8006fee <_printf_i+0x2a>
 8006fde:	2a62      	cmp	r2, #98	; 0x62
 8006fe0:	d809      	bhi.n	8006ff6 <_printf_i+0x32>
 8006fe2:	2a00      	cmp	r2, #0
 8006fe4:	d100      	bne.n	8006fe8 <_printf_i+0x24>
 8006fe6:	e0c1      	b.n	800716c <_printf_i+0x1a8>
 8006fe8:	2a58      	cmp	r2, #88	; 0x58
 8006fea:	d100      	bne.n	8006fee <_printf_i+0x2a>
 8006fec:	e08c      	b.n	8007108 <_printf_i+0x144>
 8006fee:	0026      	movs	r6, r4
 8006ff0:	3642      	adds	r6, #66	; 0x42
 8006ff2:	7032      	strb	r2, [r6, #0]
 8006ff4:	e022      	b.n	800703c <_printf_i+0x78>
 8006ff6:	0010      	movs	r0, r2
 8006ff8:	3863      	subs	r0, #99	; 0x63
 8006ffa:	2815      	cmp	r0, #21
 8006ffc:	d8f7      	bhi.n	8006fee <_printf_i+0x2a>
 8006ffe:	f7f9 f89b 	bl	8000138 <__gnu_thumb1_case_shi>
 8007002:	0016      	.short	0x0016
 8007004:	fff6001f 	.word	0xfff6001f
 8007008:	fff6fff6 	.word	0xfff6fff6
 800700c:	001ffff6 	.word	0x001ffff6
 8007010:	fff6fff6 	.word	0xfff6fff6
 8007014:	fff6fff6 	.word	0xfff6fff6
 8007018:	003600a8 	.word	0x003600a8
 800701c:	fff6009a 	.word	0xfff6009a
 8007020:	00b9fff6 	.word	0x00b9fff6
 8007024:	0036fff6 	.word	0x0036fff6
 8007028:	fff6fff6 	.word	0xfff6fff6
 800702c:	009e      	.short	0x009e
 800702e:	0026      	movs	r6, r4
 8007030:	681a      	ldr	r2, [r3, #0]
 8007032:	3642      	adds	r6, #66	; 0x42
 8007034:	1d11      	adds	r1, r2, #4
 8007036:	6019      	str	r1, [r3, #0]
 8007038:	6813      	ldr	r3, [r2, #0]
 800703a:	7033      	strb	r3, [r6, #0]
 800703c:	2301      	movs	r3, #1
 800703e:	e0a7      	b.n	8007190 <_printf_i+0x1cc>
 8007040:	6808      	ldr	r0, [r1, #0]
 8007042:	6819      	ldr	r1, [r3, #0]
 8007044:	1d0a      	adds	r2, r1, #4
 8007046:	0605      	lsls	r5, r0, #24
 8007048:	d50b      	bpl.n	8007062 <_printf_i+0x9e>
 800704a:	680d      	ldr	r5, [r1, #0]
 800704c:	601a      	str	r2, [r3, #0]
 800704e:	2d00      	cmp	r5, #0
 8007050:	da03      	bge.n	800705a <_printf_i+0x96>
 8007052:	232d      	movs	r3, #45	; 0x2d
 8007054:	9a04      	ldr	r2, [sp, #16]
 8007056:	426d      	negs	r5, r5
 8007058:	7013      	strb	r3, [r2, #0]
 800705a:	4b61      	ldr	r3, [pc, #388]	; (80071e0 <_printf_i+0x21c>)
 800705c:	270a      	movs	r7, #10
 800705e:	9303      	str	r3, [sp, #12]
 8007060:	e01b      	b.n	800709a <_printf_i+0xd6>
 8007062:	680d      	ldr	r5, [r1, #0]
 8007064:	601a      	str	r2, [r3, #0]
 8007066:	0641      	lsls	r1, r0, #25
 8007068:	d5f1      	bpl.n	800704e <_printf_i+0x8a>
 800706a:	b22d      	sxth	r5, r5
 800706c:	e7ef      	b.n	800704e <_printf_i+0x8a>
 800706e:	680d      	ldr	r5, [r1, #0]
 8007070:	6819      	ldr	r1, [r3, #0]
 8007072:	1d08      	adds	r0, r1, #4
 8007074:	6018      	str	r0, [r3, #0]
 8007076:	062e      	lsls	r6, r5, #24
 8007078:	d501      	bpl.n	800707e <_printf_i+0xba>
 800707a:	680d      	ldr	r5, [r1, #0]
 800707c:	e003      	b.n	8007086 <_printf_i+0xc2>
 800707e:	066d      	lsls	r5, r5, #25
 8007080:	d5fb      	bpl.n	800707a <_printf_i+0xb6>
 8007082:	680d      	ldr	r5, [r1, #0]
 8007084:	b2ad      	uxth	r5, r5
 8007086:	4b56      	ldr	r3, [pc, #344]	; (80071e0 <_printf_i+0x21c>)
 8007088:	2708      	movs	r7, #8
 800708a:	9303      	str	r3, [sp, #12]
 800708c:	2a6f      	cmp	r2, #111	; 0x6f
 800708e:	d000      	beq.n	8007092 <_printf_i+0xce>
 8007090:	3702      	adds	r7, #2
 8007092:	0023      	movs	r3, r4
 8007094:	2200      	movs	r2, #0
 8007096:	3343      	adds	r3, #67	; 0x43
 8007098:	701a      	strb	r2, [r3, #0]
 800709a:	6863      	ldr	r3, [r4, #4]
 800709c:	60a3      	str	r3, [r4, #8]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	db03      	blt.n	80070aa <_printf_i+0xe6>
 80070a2:	2204      	movs	r2, #4
 80070a4:	6821      	ldr	r1, [r4, #0]
 80070a6:	4391      	bics	r1, r2
 80070a8:	6021      	str	r1, [r4, #0]
 80070aa:	2d00      	cmp	r5, #0
 80070ac:	d102      	bne.n	80070b4 <_printf_i+0xf0>
 80070ae:	9e04      	ldr	r6, [sp, #16]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d00c      	beq.n	80070ce <_printf_i+0x10a>
 80070b4:	9e04      	ldr	r6, [sp, #16]
 80070b6:	0028      	movs	r0, r5
 80070b8:	0039      	movs	r1, r7
 80070ba:	f7f9 f8cd 	bl	8000258 <__aeabi_uidivmod>
 80070be:	9b03      	ldr	r3, [sp, #12]
 80070c0:	3e01      	subs	r6, #1
 80070c2:	5c5b      	ldrb	r3, [r3, r1]
 80070c4:	7033      	strb	r3, [r6, #0]
 80070c6:	002b      	movs	r3, r5
 80070c8:	0005      	movs	r5, r0
 80070ca:	429f      	cmp	r7, r3
 80070cc:	d9f3      	bls.n	80070b6 <_printf_i+0xf2>
 80070ce:	2f08      	cmp	r7, #8
 80070d0:	d109      	bne.n	80070e6 <_printf_i+0x122>
 80070d2:	6823      	ldr	r3, [r4, #0]
 80070d4:	07db      	lsls	r3, r3, #31
 80070d6:	d506      	bpl.n	80070e6 <_printf_i+0x122>
 80070d8:	6863      	ldr	r3, [r4, #4]
 80070da:	6922      	ldr	r2, [r4, #16]
 80070dc:	4293      	cmp	r3, r2
 80070de:	dc02      	bgt.n	80070e6 <_printf_i+0x122>
 80070e0:	2330      	movs	r3, #48	; 0x30
 80070e2:	3e01      	subs	r6, #1
 80070e4:	7033      	strb	r3, [r6, #0]
 80070e6:	9b04      	ldr	r3, [sp, #16]
 80070e8:	1b9b      	subs	r3, r3, r6
 80070ea:	6123      	str	r3, [r4, #16]
 80070ec:	9b07      	ldr	r3, [sp, #28]
 80070ee:	0021      	movs	r1, r4
 80070f0:	9300      	str	r3, [sp, #0]
 80070f2:	9805      	ldr	r0, [sp, #20]
 80070f4:	9b06      	ldr	r3, [sp, #24]
 80070f6:	aa09      	add	r2, sp, #36	; 0x24
 80070f8:	f7ff fef4 	bl	8006ee4 <_printf_common>
 80070fc:	1c43      	adds	r3, r0, #1
 80070fe:	d14c      	bne.n	800719a <_printf_i+0x1d6>
 8007100:	2001      	movs	r0, #1
 8007102:	4240      	negs	r0, r0
 8007104:	b00b      	add	sp, #44	; 0x2c
 8007106:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007108:	3145      	adds	r1, #69	; 0x45
 800710a:	700a      	strb	r2, [r1, #0]
 800710c:	4a34      	ldr	r2, [pc, #208]	; (80071e0 <_printf_i+0x21c>)
 800710e:	9203      	str	r2, [sp, #12]
 8007110:	681a      	ldr	r2, [r3, #0]
 8007112:	6821      	ldr	r1, [r4, #0]
 8007114:	ca20      	ldmia	r2!, {r5}
 8007116:	601a      	str	r2, [r3, #0]
 8007118:	0608      	lsls	r0, r1, #24
 800711a:	d516      	bpl.n	800714a <_printf_i+0x186>
 800711c:	07cb      	lsls	r3, r1, #31
 800711e:	d502      	bpl.n	8007126 <_printf_i+0x162>
 8007120:	2320      	movs	r3, #32
 8007122:	4319      	orrs	r1, r3
 8007124:	6021      	str	r1, [r4, #0]
 8007126:	2710      	movs	r7, #16
 8007128:	2d00      	cmp	r5, #0
 800712a:	d1b2      	bne.n	8007092 <_printf_i+0xce>
 800712c:	2320      	movs	r3, #32
 800712e:	6822      	ldr	r2, [r4, #0]
 8007130:	439a      	bics	r2, r3
 8007132:	6022      	str	r2, [r4, #0]
 8007134:	e7ad      	b.n	8007092 <_printf_i+0xce>
 8007136:	2220      	movs	r2, #32
 8007138:	6809      	ldr	r1, [r1, #0]
 800713a:	430a      	orrs	r2, r1
 800713c:	6022      	str	r2, [r4, #0]
 800713e:	0022      	movs	r2, r4
 8007140:	2178      	movs	r1, #120	; 0x78
 8007142:	3245      	adds	r2, #69	; 0x45
 8007144:	7011      	strb	r1, [r2, #0]
 8007146:	4a27      	ldr	r2, [pc, #156]	; (80071e4 <_printf_i+0x220>)
 8007148:	e7e1      	b.n	800710e <_printf_i+0x14a>
 800714a:	0648      	lsls	r0, r1, #25
 800714c:	d5e6      	bpl.n	800711c <_printf_i+0x158>
 800714e:	b2ad      	uxth	r5, r5
 8007150:	e7e4      	b.n	800711c <_printf_i+0x158>
 8007152:	681a      	ldr	r2, [r3, #0]
 8007154:	680d      	ldr	r5, [r1, #0]
 8007156:	1d10      	adds	r0, r2, #4
 8007158:	6949      	ldr	r1, [r1, #20]
 800715a:	6018      	str	r0, [r3, #0]
 800715c:	6813      	ldr	r3, [r2, #0]
 800715e:	062e      	lsls	r6, r5, #24
 8007160:	d501      	bpl.n	8007166 <_printf_i+0x1a2>
 8007162:	6019      	str	r1, [r3, #0]
 8007164:	e002      	b.n	800716c <_printf_i+0x1a8>
 8007166:	066d      	lsls	r5, r5, #25
 8007168:	d5fb      	bpl.n	8007162 <_printf_i+0x19e>
 800716a:	8019      	strh	r1, [r3, #0]
 800716c:	2300      	movs	r3, #0
 800716e:	9e04      	ldr	r6, [sp, #16]
 8007170:	6123      	str	r3, [r4, #16]
 8007172:	e7bb      	b.n	80070ec <_printf_i+0x128>
 8007174:	681a      	ldr	r2, [r3, #0]
 8007176:	1d11      	adds	r1, r2, #4
 8007178:	6019      	str	r1, [r3, #0]
 800717a:	6816      	ldr	r6, [r2, #0]
 800717c:	2100      	movs	r1, #0
 800717e:	0030      	movs	r0, r6
 8007180:	6862      	ldr	r2, [r4, #4]
 8007182:	f002 fc23 	bl	80099cc <memchr>
 8007186:	2800      	cmp	r0, #0
 8007188:	d001      	beq.n	800718e <_printf_i+0x1ca>
 800718a:	1b80      	subs	r0, r0, r6
 800718c:	6060      	str	r0, [r4, #4]
 800718e:	6863      	ldr	r3, [r4, #4]
 8007190:	6123      	str	r3, [r4, #16]
 8007192:	2300      	movs	r3, #0
 8007194:	9a04      	ldr	r2, [sp, #16]
 8007196:	7013      	strb	r3, [r2, #0]
 8007198:	e7a8      	b.n	80070ec <_printf_i+0x128>
 800719a:	6923      	ldr	r3, [r4, #16]
 800719c:	0032      	movs	r2, r6
 800719e:	9906      	ldr	r1, [sp, #24]
 80071a0:	9805      	ldr	r0, [sp, #20]
 80071a2:	9d07      	ldr	r5, [sp, #28]
 80071a4:	47a8      	blx	r5
 80071a6:	1c43      	adds	r3, r0, #1
 80071a8:	d0aa      	beq.n	8007100 <_printf_i+0x13c>
 80071aa:	6823      	ldr	r3, [r4, #0]
 80071ac:	079b      	lsls	r3, r3, #30
 80071ae:	d415      	bmi.n	80071dc <_printf_i+0x218>
 80071b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071b2:	68e0      	ldr	r0, [r4, #12]
 80071b4:	4298      	cmp	r0, r3
 80071b6:	daa5      	bge.n	8007104 <_printf_i+0x140>
 80071b8:	0018      	movs	r0, r3
 80071ba:	e7a3      	b.n	8007104 <_printf_i+0x140>
 80071bc:	0022      	movs	r2, r4
 80071be:	2301      	movs	r3, #1
 80071c0:	9906      	ldr	r1, [sp, #24]
 80071c2:	9805      	ldr	r0, [sp, #20]
 80071c4:	9e07      	ldr	r6, [sp, #28]
 80071c6:	3219      	adds	r2, #25
 80071c8:	47b0      	blx	r6
 80071ca:	1c43      	adds	r3, r0, #1
 80071cc:	d098      	beq.n	8007100 <_printf_i+0x13c>
 80071ce:	3501      	adds	r5, #1
 80071d0:	68e3      	ldr	r3, [r4, #12]
 80071d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80071d4:	1a9b      	subs	r3, r3, r2
 80071d6:	42ab      	cmp	r3, r5
 80071d8:	dcf0      	bgt.n	80071bc <_printf_i+0x1f8>
 80071da:	e7e9      	b.n	80071b0 <_printf_i+0x1ec>
 80071dc:	2500      	movs	r5, #0
 80071de:	e7f7      	b.n	80071d0 <_printf_i+0x20c>
 80071e0:	0800bf44 	.word	0x0800bf44
 80071e4:	0800bf55 	.word	0x0800bf55

080071e8 <_scanf_float>:
 80071e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80071ea:	b08b      	sub	sp, #44	; 0x2c
 80071ec:	0015      	movs	r5, r2
 80071ee:	9001      	str	r0, [sp, #4]
 80071f0:	22ae      	movs	r2, #174	; 0xae
 80071f2:	2000      	movs	r0, #0
 80071f4:	9306      	str	r3, [sp, #24]
 80071f6:	688b      	ldr	r3, [r1, #8]
 80071f8:	000e      	movs	r6, r1
 80071fa:	1e59      	subs	r1, r3, #1
 80071fc:	0052      	lsls	r2, r2, #1
 80071fe:	9005      	str	r0, [sp, #20]
 8007200:	4291      	cmp	r1, r2
 8007202:	d905      	bls.n	8007210 <_scanf_float+0x28>
 8007204:	3b5e      	subs	r3, #94	; 0x5e
 8007206:	3bff      	subs	r3, #255	; 0xff
 8007208:	9305      	str	r3, [sp, #20]
 800720a:	235e      	movs	r3, #94	; 0x5e
 800720c:	33ff      	adds	r3, #255	; 0xff
 800720e:	60b3      	str	r3, [r6, #8]
 8007210:	23f0      	movs	r3, #240	; 0xf0
 8007212:	6832      	ldr	r2, [r6, #0]
 8007214:	00db      	lsls	r3, r3, #3
 8007216:	4313      	orrs	r3, r2
 8007218:	6033      	str	r3, [r6, #0]
 800721a:	0033      	movs	r3, r6
 800721c:	2400      	movs	r4, #0
 800721e:	331c      	adds	r3, #28
 8007220:	001f      	movs	r7, r3
 8007222:	9303      	str	r3, [sp, #12]
 8007224:	9402      	str	r4, [sp, #8]
 8007226:	9408      	str	r4, [sp, #32]
 8007228:	9407      	str	r4, [sp, #28]
 800722a:	9400      	str	r4, [sp, #0]
 800722c:	9404      	str	r4, [sp, #16]
 800722e:	68b2      	ldr	r2, [r6, #8]
 8007230:	2a00      	cmp	r2, #0
 8007232:	d00a      	beq.n	800724a <_scanf_float+0x62>
 8007234:	682b      	ldr	r3, [r5, #0]
 8007236:	781b      	ldrb	r3, [r3, #0]
 8007238:	2b4e      	cmp	r3, #78	; 0x4e
 800723a:	d844      	bhi.n	80072c6 <_scanf_float+0xde>
 800723c:	0018      	movs	r0, r3
 800723e:	2b40      	cmp	r3, #64	; 0x40
 8007240:	d82c      	bhi.n	800729c <_scanf_float+0xb4>
 8007242:	382b      	subs	r0, #43	; 0x2b
 8007244:	b2c1      	uxtb	r1, r0
 8007246:	290e      	cmp	r1, #14
 8007248:	d92a      	bls.n	80072a0 <_scanf_float+0xb8>
 800724a:	9b00      	ldr	r3, [sp, #0]
 800724c:	2b00      	cmp	r3, #0
 800724e:	d003      	beq.n	8007258 <_scanf_float+0x70>
 8007250:	6832      	ldr	r2, [r6, #0]
 8007252:	4ba4      	ldr	r3, [pc, #656]	; (80074e4 <_scanf_float+0x2fc>)
 8007254:	4013      	ands	r3, r2
 8007256:	6033      	str	r3, [r6, #0]
 8007258:	9b02      	ldr	r3, [sp, #8]
 800725a:	3b01      	subs	r3, #1
 800725c:	2b01      	cmp	r3, #1
 800725e:	d900      	bls.n	8007262 <_scanf_float+0x7a>
 8007260:	e0f9      	b.n	8007456 <_scanf_float+0x26e>
 8007262:	24be      	movs	r4, #190	; 0xbe
 8007264:	0064      	lsls	r4, r4, #1
 8007266:	9b03      	ldr	r3, [sp, #12]
 8007268:	429f      	cmp	r7, r3
 800726a:	d900      	bls.n	800726e <_scanf_float+0x86>
 800726c:	e0e9      	b.n	8007442 <_scanf_float+0x25a>
 800726e:	2301      	movs	r3, #1
 8007270:	9302      	str	r3, [sp, #8]
 8007272:	e185      	b.n	8007580 <_scanf_float+0x398>
 8007274:	0018      	movs	r0, r3
 8007276:	3861      	subs	r0, #97	; 0x61
 8007278:	280d      	cmp	r0, #13
 800727a:	d8e6      	bhi.n	800724a <_scanf_float+0x62>
 800727c:	f7f8 ff5c 	bl	8000138 <__gnu_thumb1_case_shi>
 8007280:	ffe50083 	.word	0xffe50083
 8007284:	ffe5ffe5 	.word	0xffe5ffe5
 8007288:	00a200b6 	.word	0x00a200b6
 800728c:	ffe5ffe5 	.word	0xffe5ffe5
 8007290:	ffe50089 	.word	0xffe50089
 8007294:	ffe5ffe5 	.word	0xffe5ffe5
 8007298:	0065ffe5 	.word	0x0065ffe5
 800729c:	3841      	subs	r0, #65	; 0x41
 800729e:	e7eb      	b.n	8007278 <_scanf_float+0x90>
 80072a0:	280e      	cmp	r0, #14
 80072a2:	d8d2      	bhi.n	800724a <_scanf_float+0x62>
 80072a4:	f7f8 ff48 	bl	8000138 <__gnu_thumb1_case_shi>
 80072a8:	ffd1004b 	.word	0xffd1004b
 80072ac:	0098004b 	.word	0x0098004b
 80072b0:	0020ffd1 	.word	0x0020ffd1
 80072b4:	00400040 	.word	0x00400040
 80072b8:	00400040 	.word	0x00400040
 80072bc:	00400040 	.word	0x00400040
 80072c0:	00400040 	.word	0x00400040
 80072c4:	0040      	.short	0x0040
 80072c6:	2b6e      	cmp	r3, #110	; 0x6e
 80072c8:	d809      	bhi.n	80072de <_scanf_float+0xf6>
 80072ca:	2b60      	cmp	r3, #96	; 0x60
 80072cc:	d8d2      	bhi.n	8007274 <_scanf_float+0x8c>
 80072ce:	2b54      	cmp	r3, #84	; 0x54
 80072d0:	d07d      	beq.n	80073ce <_scanf_float+0x1e6>
 80072d2:	2b59      	cmp	r3, #89	; 0x59
 80072d4:	d1b9      	bne.n	800724a <_scanf_float+0x62>
 80072d6:	2c07      	cmp	r4, #7
 80072d8:	d1b7      	bne.n	800724a <_scanf_float+0x62>
 80072da:	2408      	movs	r4, #8
 80072dc:	e02c      	b.n	8007338 <_scanf_float+0x150>
 80072de:	2b74      	cmp	r3, #116	; 0x74
 80072e0:	d075      	beq.n	80073ce <_scanf_float+0x1e6>
 80072e2:	2b79      	cmp	r3, #121	; 0x79
 80072e4:	d0f7      	beq.n	80072d6 <_scanf_float+0xee>
 80072e6:	e7b0      	b.n	800724a <_scanf_float+0x62>
 80072e8:	6831      	ldr	r1, [r6, #0]
 80072ea:	05c8      	lsls	r0, r1, #23
 80072ec:	d51c      	bpl.n	8007328 <_scanf_float+0x140>
 80072ee:	2380      	movs	r3, #128	; 0x80
 80072f0:	4399      	bics	r1, r3
 80072f2:	9b00      	ldr	r3, [sp, #0]
 80072f4:	6031      	str	r1, [r6, #0]
 80072f6:	3301      	adds	r3, #1
 80072f8:	9300      	str	r3, [sp, #0]
 80072fa:	9b05      	ldr	r3, [sp, #20]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d003      	beq.n	8007308 <_scanf_float+0x120>
 8007300:	3b01      	subs	r3, #1
 8007302:	3201      	adds	r2, #1
 8007304:	9305      	str	r3, [sp, #20]
 8007306:	60b2      	str	r2, [r6, #8]
 8007308:	68b3      	ldr	r3, [r6, #8]
 800730a:	3b01      	subs	r3, #1
 800730c:	60b3      	str	r3, [r6, #8]
 800730e:	6933      	ldr	r3, [r6, #16]
 8007310:	3301      	adds	r3, #1
 8007312:	6133      	str	r3, [r6, #16]
 8007314:	686b      	ldr	r3, [r5, #4]
 8007316:	3b01      	subs	r3, #1
 8007318:	606b      	str	r3, [r5, #4]
 800731a:	2b00      	cmp	r3, #0
 800731c:	dc00      	bgt.n	8007320 <_scanf_float+0x138>
 800731e:	e086      	b.n	800742e <_scanf_float+0x246>
 8007320:	682b      	ldr	r3, [r5, #0]
 8007322:	3301      	adds	r3, #1
 8007324:	602b      	str	r3, [r5, #0]
 8007326:	e782      	b.n	800722e <_scanf_float+0x46>
 8007328:	9a02      	ldr	r2, [sp, #8]
 800732a:	1912      	adds	r2, r2, r4
 800732c:	2a00      	cmp	r2, #0
 800732e:	d18c      	bne.n	800724a <_scanf_float+0x62>
 8007330:	4a6d      	ldr	r2, [pc, #436]	; (80074e8 <_scanf_float+0x300>)
 8007332:	6831      	ldr	r1, [r6, #0]
 8007334:	400a      	ands	r2, r1
 8007336:	6032      	str	r2, [r6, #0]
 8007338:	703b      	strb	r3, [r7, #0]
 800733a:	3701      	adds	r7, #1
 800733c:	e7e4      	b.n	8007308 <_scanf_float+0x120>
 800733e:	2180      	movs	r1, #128	; 0x80
 8007340:	6832      	ldr	r2, [r6, #0]
 8007342:	420a      	tst	r2, r1
 8007344:	d081      	beq.n	800724a <_scanf_float+0x62>
 8007346:	438a      	bics	r2, r1
 8007348:	e7f5      	b.n	8007336 <_scanf_float+0x14e>
 800734a:	9a02      	ldr	r2, [sp, #8]
 800734c:	2a00      	cmp	r2, #0
 800734e:	d10f      	bne.n	8007370 <_scanf_float+0x188>
 8007350:	9a00      	ldr	r2, [sp, #0]
 8007352:	2a00      	cmp	r2, #0
 8007354:	d10f      	bne.n	8007376 <_scanf_float+0x18e>
 8007356:	6832      	ldr	r2, [r6, #0]
 8007358:	21e0      	movs	r1, #224	; 0xe0
 800735a:	0010      	movs	r0, r2
 800735c:	00c9      	lsls	r1, r1, #3
 800735e:	4008      	ands	r0, r1
 8007360:	4288      	cmp	r0, r1
 8007362:	d108      	bne.n	8007376 <_scanf_float+0x18e>
 8007364:	4961      	ldr	r1, [pc, #388]	; (80074ec <_scanf_float+0x304>)
 8007366:	400a      	ands	r2, r1
 8007368:	6032      	str	r2, [r6, #0]
 800736a:	2201      	movs	r2, #1
 800736c:	9202      	str	r2, [sp, #8]
 800736e:	e7e3      	b.n	8007338 <_scanf_float+0x150>
 8007370:	9a02      	ldr	r2, [sp, #8]
 8007372:	2a02      	cmp	r2, #2
 8007374:	d059      	beq.n	800742a <_scanf_float+0x242>
 8007376:	2c01      	cmp	r4, #1
 8007378:	d002      	beq.n	8007380 <_scanf_float+0x198>
 800737a:	2c04      	cmp	r4, #4
 800737c:	d000      	beq.n	8007380 <_scanf_float+0x198>
 800737e:	e764      	b.n	800724a <_scanf_float+0x62>
 8007380:	3401      	adds	r4, #1
 8007382:	b2e4      	uxtb	r4, r4
 8007384:	e7d8      	b.n	8007338 <_scanf_float+0x150>
 8007386:	9a02      	ldr	r2, [sp, #8]
 8007388:	2a01      	cmp	r2, #1
 800738a:	d000      	beq.n	800738e <_scanf_float+0x1a6>
 800738c:	e75d      	b.n	800724a <_scanf_float+0x62>
 800738e:	2202      	movs	r2, #2
 8007390:	e7ec      	b.n	800736c <_scanf_float+0x184>
 8007392:	2c00      	cmp	r4, #0
 8007394:	d110      	bne.n	80073b8 <_scanf_float+0x1d0>
 8007396:	9a00      	ldr	r2, [sp, #0]
 8007398:	2a00      	cmp	r2, #0
 800739a:	d000      	beq.n	800739e <_scanf_float+0x1b6>
 800739c:	e758      	b.n	8007250 <_scanf_float+0x68>
 800739e:	6832      	ldr	r2, [r6, #0]
 80073a0:	21e0      	movs	r1, #224	; 0xe0
 80073a2:	0010      	movs	r0, r2
 80073a4:	00c9      	lsls	r1, r1, #3
 80073a6:	4008      	ands	r0, r1
 80073a8:	4288      	cmp	r0, r1
 80073aa:	d000      	beq.n	80073ae <_scanf_float+0x1c6>
 80073ac:	e754      	b.n	8007258 <_scanf_float+0x70>
 80073ae:	494f      	ldr	r1, [pc, #316]	; (80074ec <_scanf_float+0x304>)
 80073b0:	3401      	adds	r4, #1
 80073b2:	400a      	ands	r2, r1
 80073b4:	6032      	str	r2, [r6, #0]
 80073b6:	e7bf      	b.n	8007338 <_scanf_float+0x150>
 80073b8:	21fd      	movs	r1, #253	; 0xfd
 80073ba:	1ee2      	subs	r2, r4, #3
 80073bc:	420a      	tst	r2, r1
 80073be:	d000      	beq.n	80073c2 <_scanf_float+0x1da>
 80073c0:	e743      	b.n	800724a <_scanf_float+0x62>
 80073c2:	e7dd      	b.n	8007380 <_scanf_float+0x198>
 80073c4:	2c02      	cmp	r4, #2
 80073c6:	d000      	beq.n	80073ca <_scanf_float+0x1e2>
 80073c8:	e73f      	b.n	800724a <_scanf_float+0x62>
 80073ca:	2403      	movs	r4, #3
 80073cc:	e7b4      	b.n	8007338 <_scanf_float+0x150>
 80073ce:	2c06      	cmp	r4, #6
 80073d0:	d000      	beq.n	80073d4 <_scanf_float+0x1ec>
 80073d2:	e73a      	b.n	800724a <_scanf_float+0x62>
 80073d4:	2407      	movs	r4, #7
 80073d6:	e7af      	b.n	8007338 <_scanf_float+0x150>
 80073d8:	6832      	ldr	r2, [r6, #0]
 80073da:	0591      	lsls	r1, r2, #22
 80073dc:	d400      	bmi.n	80073e0 <_scanf_float+0x1f8>
 80073de:	e734      	b.n	800724a <_scanf_float+0x62>
 80073e0:	4943      	ldr	r1, [pc, #268]	; (80074f0 <_scanf_float+0x308>)
 80073e2:	400a      	ands	r2, r1
 80073e4:	6032      	str	r2, [r6, #0]
 80073e6:	9a00      	ldr	r2, [sp, #0]
 80073e8:	9204      	str	r2, [sp, #16]
 80073ea:	e7a5      	b.n	8007338 <_scanf_float+0x150>
 80073ec:	21a0      	movs	r1, #160	; 0xa0
 80073ee:	2080      	movs	r0, #128	; 0x80
 80073f0:	6832      	ldr	r2, [r6, #0]
 80073f2:	00c9      	lsls	r1, r1, #3
 80073f4:	4011      	ands	r1, r2
 80073f6:	00c0      	lsls	r0, r0, #3
 80073f8:	4281      	cmp	r1, r0
 80073fa:	d006      	beq.n	800740a <_scanf_float+0x222>
 80073fc:	4202      	tst	r2, r0
 80073fe:	d100      	bne.n	8007402 <_scanf_float+0x21a>
 8007400:	e723      	b.n	800724a <_scanf_float+0x62>
 8007402:	9900      	ldr	r1, [sp, #0]
 8007404:	2900      	cmp	r1, #0
 8007406:	d100      	bne.n	800740a <_scanf_float+0x222>
 8007408:	e726      	b.n	8007258 <_scanf_float+0x70>
 800740a:	0591      	lsls	r1, r2, #22
 800740c:	d404      	bmi.n	8007418 <_scanf_float+0x230>
 800740e:	9900      	ldr	r1, [sp, #0]
 8007410:	9804      	ldr	r0, [sp, #16]
 8007412:	9708      	str	r7, [sp, #32]
 8007414:	1a09      	subs	r1, r1, r0
 8007416:	9107      	str	r1, [sp, #28]
 8007418:	4934      	ldr	r1, [pc, #208]	; (80074ec <_scanf_float+0x304>)
 800741a:	400a      	ands	r2, r1
 800741c:	21c0      	movs	r1, #192	; 0xc0
 800741e:	0049      	lsls	r1, r1, #1
 8007420:	430a      	orrs	r2, r1
 8007422:	6032      	str	r2, [r6, #0]
 8007424:	2200      	movs	r2, #0
 8007426:	9200      	str	r2, [sp, #0]
 8007428:	e786      	b.n	8007338 <_scanf_float+0x150>
 800742a:	2203      	movs	r2, #3
 800742c:	e79e      	b.n	800736c <_scanf_float+0x184>
 800742e:	23c0      	movs	r3, #192	; 0xc0
 8007430:	005b      	lsls	r3, r3, #1
 8007432:	0029      	movs	r1, r5
 8007434:	58f3      	ldr	r3, [r6, r3]
 8007436:	9801      	ldr	r0, [sp, #4]
 8007438:	4798      	blx	r3
 800743a:	2800      	cmp	r0, #0
 800743c:	d100      	bne.n	8007440 <_scanf_float+0x258>
 800743e:	e6f6      	b.n	800722e <_scanf_float+0x46>
 8007440:	e703      	b.n	800724a <_scanf_float+0x62>
 8007442:	3f01      	subs	r7, #1
 8007444:	5933      	ldr	r3, [r6, r4]
 8007446:	002a      	movs	r2, r5
 8007448:	7839      	ldrb	r1, [r7, #0]
 800744a:	9801      	ldr	r0, [sp, #4]
 800744c:	4798      	blx	r3
 800744e:	6933      	ldr	r3, [r6, #16]
 8007450:	3b01      	subs	r3, #1
 8007452:	6133      	str	r3, [r6, #16]
 8007454:	e707      	b.n	8007266 <_scanf_float+0x7e>
 8007456:	1e63      	subs	r3, r4, #1
 8007458:	2b06      	cmp	r3, #6
 800745a:	d80e      	bhi.n	800747a <_scanf_float+0x292>
 800745c:	9702      	str	r7, [sp, #8]
 800745e:	2c02      	cmp	r4, #2
 8007460:	d920      	bls.n	80074a4 <_scanf_float+0x2bc>
 8007462:	1be3      	subs	r3, r4, r7
 8007464:	b2db      	uxtb	r3, r3
 8007466:	9305      	str	r3, [sp, #20]
 8007468:	9b02      	ldr	r3, [sp, #8]
 800746a:	9a05      	ldr	r2, [sp, #20]
 800746c:	189b      	adds	r3, r3, r2
 800746e:	b2db      	uxtb	r3, r3
 8007470:	2b03      	cmp	r3, #3
 8007472:	d827      	bhi.n	80074c4 <_scanf_float+0x2dc>
 8007474:	3c03      	subs	r4, #3
 8007476:	b2e4      	uxtb	r4, r4
 8007478:	1b3f      	subs	r7, r7, r4
 800747a:	6833      	ldr	r3, [r6, #0]
 800747c:	05da      	lsls	r2, r3, #23
 800747e:	d554      	bpl.n	800752a <_scanf_float+0x342>
 8007480:	055b      	lsls	r3, r3, #21
 8007482:	d537      	bpl.n	80074f4 <_scanf_float+0x30c>
 8007484:	24be      	movs	r4, #190	; 0xbe
 8007486:	0064      	lsls	r4, r4, #1
 8007488:	9b03      	ldr	r3, [sp, #12]
 800748a:	429f      	cmp	r7, r3
 800748c:	d800      	bhi.n	8007490 <_scanf_float+0x2a8>
 800748e:	e6ee      	b.n	800726e <_scanf_float+0x86>
 8007490:	3f01      	subs	r7, #1
 8007492:	5933      	ldr	r3, [r6, r4]
 8007494:	002a      	movs	r2, r5
 8007496:	7839      	ldrb	r1, [r7, #0]
 8007498:	9801      	ldr	r0, [sp, #4]
 800749a:	4798      	blx	r3
 800749c:	6933      	ldr	r3, [r6, #16]
 800749e:	3b01      	subs	r3, #1
 80074a0:	6133      	str	r3, [r6, #16]
 80074a2:	e7f1      	b.n	8007488 <_scanf_float+0x2a0>
 80074a4:	24be      	movs	r4, #190	; 0xbe
 80074a6:	0064      	lsls	r4, r4, #1
 80074a8:	9b03      	ldr	r3, [sp, #12]
 80074aa:	429f      	cmp	r7, r3
 80074ac:	d800      	bhi.n	80074b0 <_scanf_float+0x2c8>
 80074ae:	e6de      	b.n	800726e <_scanf_float+0x86>
 80074b0:	3f01      	subs	r7, #1
 80074b2:	5933      	ldr	r3, [r6, r4]
 80074b4:	002a      	movs	r2, r5
 80074b6:	7839      	ldrb	r1, [r7, #0]
 80074b8:	9801      	ldr	r0, [sp, #4]
 80074ba:	4798      	blx	r3
 80074bc:	6933      	ldr	r3, [r6, #16]
 80074be:	3b01      	subs	r3, #1
 80074c0:	6133      	str	r3, [r6, #16]
 80074c2:	e7f1      	b.n	80074a8 <_scanf_float+0x2c0>
 80074c4:	9b02      	ldr	r3, [sp, #8]
 80074c6:	002a      	movs	r2, r5
 80074c8:	3b01      	subs	r3, #1
 80074ca:	7819      	ldrb	r1, [r3, #0]
 80074cc:	9302      	str	r3, [sp, #8]
 80074ce:	23be      	movs	r3, #190	; 0xbe
 80074d0:	005b      	lsls	r3, r3, #1
 80074d2:	58f3      	ldr	r3, [r6, r3]
 80074d4:	9801      	ldr	r0, [sp, #4]
 80074d6:	9309      	str	r3, [sp, #36]	; 0x24
 80074d8:	4798      	blx	r3
 80074da:	6933      	ldr	r3, [r6, #16]
 80074dc:	3b01      	subs	r3, #1
 80074de:	6133      	str	r3, [r6, #16]
 80074e0:	e7c2      	b.n	8007468 <_scanf_float+0x280>
 80074e2:	46c0      	nop			; (mov r8, r8)
 80074e4:	fffffeff 	.word	0xfffffeff
 80074e8:	fffffe7f 	.word	0xfffffe7f
 80074ec:	fffff87f 	.word	0xfffff87f
 80074f0:	fffffd7f 	.word	0xfffffd7f
 80074f4:	6933      	ldr	r3, [r6, #16]
 80074f6:	1e7c      	subs	r4, r7, #1
 80074f8:	7821      	ldrb	r1, [r4, #0]
 80074fa:	3b01      	subs	r3, #1
 80074fc:	6133      	str	r3, [r6, #16]
 80074fe:	2965      	cmp	r1, #101	; 0x65
 8007500:	d00c      	beq.n	800751c <_scanf_float+0x334>
 8007502:	2945      	cmp	r1, #69	; 0x45
 8007504:	d00a      	beq.n	800751c <_scanf_float+0x334>
 8007506:	23be      	movs	r3, #190	; 0xbe
 8007508:	005b      	lsls	r3, r3, #1
 800750a:	58f3      	ldr	r3, [r6, r3]
 800750c:	002a      	movs	r2, r5
 800750e:	9801      	ldr	r0, [sp, #4]
 8007510:	4798      	blx	r3
 8007512:	6933      	ldr	r3, [r6, #16]
 8007514:	1ebc      	subs	r4, r7, #2
 8007516:	3b01      	subs	r3, #1
 8007518:	7821      	ldrb	r1, [r4, #0]
 800751a:	6133      	str	r3, [r6, #16]
 800751c:	23be      	movs	r3, #190	; 0xbe
 800751e:	005b      	lsls	r3, r3, #1
 8007520:	002a      	movs	r2, r5
 8007522:	58f3      	ldr	r3, [r6, r3]
 8007524:	9801      	ldr	r0, [sp, #4]
 8007526:	4798      	blx	r3
 8007528:	0027      	movs	r7, r4
 800752a:	6832      	ldr	r2, [r6, #0]
 800752c:	2310      	movs	r3, #16
 800752e:	0011      	movs	r1, r2
 8007530:	4019      	ands	r1, r3
 8007532:	9102      	str	r1, [sp, #8]
 8007534:	421a      	tst	r2, r3
 8007536:	d158      	bne.n	80075ea <_scanf_float+0x402>
 8007538:	23c0      	movs	r3, #192	; 0xc0
 800753a:	7039      	strb	r1, [r7, #0]
 800753c:	6832      	ldr	r2, [r6, #0]
 800753e:	00db      	lsls	r3, r3, #3
 8007540:	4013      	ands	r3, r2
 8007542:	2280      	movs	r2, #128	; 0x80
 8007544:	00d2      	lsls	r2, r2, #3
 8007546:	4293      	cmp	r3, r2
 8007548:	d11d      	bne.n	8007586 <_scanf_float+0x39e>
 800754a:	9b04      	ldr	r3, [sp, #16]
 800754c:	9a00      	ldr	r2, [sp, #0]
 800754e:	9900      	ldr	r1, [sp, #0]
 8007550:	1a9a      	subs	r2, r3, r2
 8007552:	428b      	cmp	r3, r1
 8007554:	d124      	bne.n	80075a0 <_scanf_float+0x3b8>
 8007556:	2200      	movs	r2, #0
 8007558:	9903      	ldr	r1, [sp, #12]
 800755a:	9801      	ldr	r0, [sp, #4]
 800755c:	f000 ff28 	bl	80083b0 <_strtod_r>
 8007560:	9b06      	ldr	r3, [sp, #24]
 8007562:	000d      	movs	r5, r1
 8007564:	6831      	ldr	r1, [r6, #0]
 8007566:	0004      	movs	r4, r0
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	078a      	lsls	r2, r1, #30
 800756c:	d525      	bpl.n	80075ba <_scanf_float+0x3d2>
 800756e:	1d1a      	adds	r2, r3, #4
 8007570:	9906      	ldr	r1, [sp, #24]
 8007572:	600a      	str	r2, [r1, #0]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	601c      	str	r4, [r3, #0]
 8007578:	605d      	str	r5, [r3, #4]
 800757a:	68f3      	ldr	r3, [r6, #12]
 800757c:	3301      	adds	r3, #1
 800757e:	60f3      	str	r3, [r6, #12]
 8007580:	9802      	ldr	r0, [sp, #8]
 8007582:	b00b      	add	sp, #44	; 0x2c
 8007584:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007586:	9b07      	ldr	r3, [sp, #28]
 8007588:	2b00      	cmp	r3, #0
 800758a:	d0e4      	beq.n	8007556 <_scanf_float+0x36e>
 800758c:	9b08      	ldr	r3, [sp, #32]
 800758e:	9a02      	ldr	r2, [sp, #8]
 8007590:	1c59      	adds	r1, r3, #1
 8007592:	9801      	ldr	r0, [sp, #4]
 8007594:	230a      	movs	r3, #10
 8007596:	f000 ffa1 	bl	80084dc <_strtol_r>
 800759a:	9b07      	ldr	r3, [sp, #28]
 800759c:	9f08      	ldr	r7, [sp, #32]
 800759e:	1ac2      	subs	r2, r0, r3
 80075a0:	0033      	movs	r3, r6
 80075a2:	3370      	adds	r3, #112	; 0x70
 80075a4:	33ff      	adds	r3, #255	; 0xff
 80075a6:	429f      	cmp	r7, r3
 80075a8:	d302      	bcc.n	80075b0 <_scanf_float+0x3c8>
 80075aa:	0037      	movs	r7, r6
 80075ac:	376f      	adds	r7, #111	; 0x6f
 80075ae:	37ff      	adds	r7, #255	; 0xff
 80075b0:	0038      	movs	r0, r7
 80075b2:	490f      	ldr	r1, [pc, #60]	; (80075f0 <_scanf_float+0x408>)
 80075b4:	f000 f824 	bl	8007600 <siprintf>
 80075b8:	e7cd      	b.n	8007556 <_scanf_float+0x36e>
 80075ba:	1d1a      	adds	r2, r3, #4
 80075bc:	0749      	lsls	r1, r1, #29
 80075be:	d4d7      	bmi.n	8007570 <_scanf_float+0x388>
 80075c0:	9906      	ldr	r1, [sp, #24]
 80075c2:	0020      	movs	r0, r4
 80075c4:	600a      	str	r2, [r1, #0]
 80075c6:	681f      	ldr	r7, [r3, #0]
 80075c8:	0022      	movs	r2, r4
 80075ca:	002b      	movs	r3, r5
 80075cc:	0029      	movs	r1, r5
 80075ce:	f7fb fad9 	bl	8002b84 <__aeabi_dcmpun>
 80075d2:	2800      	cmp	r0, #0
 80075d4:	d004      	beq.n	80075e0 <_scanf_float+0x3f8>
 80075d6:	4807      	ldr	r0, [pc, #28]	; (80075f4 <_scanf_float+0x40c>)
 80075d8:	f000 f80e 	bl	80075f8 <nanf>
 80075dc:	6038      	str	r0, [r7, #0]
 80075de:	e7cc      	b.n	800757a <_scanf_float+0x392>
 80075e0:	0020      	movs	r0, r4
 80075e2:	0029      	movs	r1, r5
 80075e4:	f7fb fbc0 	bl	8002d68 <__aeabi_d2f>
 80075e8:	e7f8      	b.n	80075dc <_scanf_float+0x3f4>
 80075ea:	2300      	movs	r3, #0
 80075ec:	e640      	b.n	8007270 <_scanf_float+0x88>
 80075ee:	46c0      	nop			; (mov r8, r8)
 80075f0:	0800bf66 	.word	0x0800bf66
 80075f4:	0800c38b 	.word	0x0800c38b

080075f8 <nanf>:
 80075f8:	4800      	ldr	r0, [pc, #0]	; (80075fc <nanf+0x4>)
 80075fa:	4770      	bx	lr
 80075fc:	7fc00000 	.word	0x7fc00000

08007600 <siprintf>:
 8007600:	b40e      	push	{r1, r2, r3}
 8007602:	b500      	push	{lr}
 8007604:	490b      	ldr	r1, [pc, #44]	; (8007634 <siprintf+0x34>)
 8007606:	b09c      	sub	sp, #112	; 0x70
 8007608:	ab1d      	add	r3, sp, #116	; 0x74
 800760a:	9002      	str	r0, [sp, #8]
 800760c:	9006      	str	r0, [sp, #24]
 800760e:	9107      	str	r1, [sp, #28]
 8007610:	9104      	str	r1, [sp, #16]
 8007612:	4809      	ldr	r0, [pc, #36]	; (8007638 <siprintf+0x38>)
 8007614:	4909      	ldr	r1, [pc, #36]	; (800763c <siprintf+0x3c>)
 8007616:	cb04      	ldmia	r3!, {r2}
 8007618:	9105      	str	r1, [sp, #20]
 800761a:	6800      	ldr	r0, [r0, #0]
 800761c:	a902      	add	r1, sp, #8
 800761e:	9301      	str	r3, [sp, #4]
 8007620:	f003 f822 	bl	800a668 <_svfiprintf_r>
 8007624:	2300      	movs	r3, #0
 8007626:	9a02      	ldr	r2, [sp, #8]
 8007628:	7013      	strb	r3, [r2, #0]
 800762a:	b01c      	add	sp, #112	; 0x70
 800762c:	bc08      	pop	{r3}
 800762e:	b003      	add	sp, #12
 8007630:	4718      	bx	r3
 8007632:	46c0      	nop			; (mov r8, r8)
 8007634:	7fffffff 	.word	0x7fffffff
 8007638:	20000054 	.word	0x20000054
 800763c:	ffff0208 	.word	0xffff0208

08007640 <siscanf>:
 8007640:	b40e      	push	{r1, r2, r3}
 8007642:	b530      	push	{r4, r5, lr}
 8007644:	2381      	movs	r3, #129	; 0x81
 8007646:	b09c      	sub	sp, #112	; 0x70
 8007648:	466a      	mov	r2, sp
 800764a:	ac1f      	add	r4, sp, #124	; 0x7c
 800764c:	009b      	lsls	r3, r3, #2
 800764e:	cc20      	ldmia	r4!, {r5}
 8007650:	8293      	strh	r3, [r2, #20]
 8007652:	9002      	str	r0, [sp, #8]
 8007654:	9006      	str	r0, [sp, #24]
 8007656:	f7f8 fd5d 	bl	8000114 <strlen>
 800765a:	4b0b      	ldr	r3, [pc, #44]	; (8007688 <siscanf+0x48>)
 800765c:	466a      	mov	r2, sp
 800765e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007660:	2300      	movs	r3, #0
 8007662:	9003      	str	r0, [sp, #12]
 8007664:	9007      	str	r0, [sp, #28]
 8007666:	4809      	ldr	r0, [pc, #36]	; (800768c <siscanf+0x4c>)
 8007668:	930f      	str	r3, [sp, #60]	; 0x3c
 800766a:	9314      	str	r3, [sp, #80]	; 0x50
 800766c:	3b01      	subs	r3, #1
 800766e:	82d3      	strh	r3, [r2, #22]
 8007670:	a902      	add	r1, sp, #8
 8007672:	0023      	movs	r3, r4
 8007674:	002a      	movs	r2, r5
 8007676:	6800      	ldr	r0, [r0, #0]
 8007678:	9401      	str	r4, [sp, #4]
 800767a:	f003 f951 	bl	800a920 <__ssvfiscanf_r>
 800767e:	b01c      	add	sp, #112	; 0x70
 8007680:	bc30      	pop	{r4, r5}
 8007682:	bc08      	pop	{r3}
 8007684:	b003      	add	sp, #12
 8007686:	4718      	bx	r3
 8007688:	080076b9 	.word	0x080076b9
 800768c:	20000054 	.word	0x20000054

08007690 <__sread>:
 8007690:	b570      	push	{r4, r5, r6, lr}
 8007692:	000c      	movs	r4, r1
 8007694:	250e      	movs	r5, #14
 8007696:	5f49      	ldrsh	r1, [r1, r5]
 8007698:	f003 fc22 	bl	800aee0 <_read_r>
 800769c:	2800      	cmp	r0, #0
 800769e:	db03      	blt.n	80076a8 <__sread+0x18>
 80076a0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80076a2:	181b      	adds	r3, r3, r0
 80076a4:	6563      	str	r3, [r4, #84]	; 0x54
 80076a6:	bd70      	pop	{r4, r5, r6, pc}
 80076a8:	89a3      	ldrh	r3, [r4, #12]
 80076aa:	4a02      	ldr	r2, [pc, #8]	; (80076b4 <__sread+0x24>)
 80076ac:	4013      	ands	r3, r2
 80076ae:	81a3      	strh	r3, [r4, #12]
 80076b0:	e7f9      	b.n	80076a6 <__sread+0x16>
 80076b2:	46c0      	nop			; (mov r8, r8)
 80076b4:	ffffefff 	.word	0xffffefff

080076b8 <__seofread>:
 80076b8:	2000      	movs	r0, #0
 80076ba:	4770      	bx	lr

080076bc <__swrite>:
 80076bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076be:	001f      	movs	r7, r3
 80076c0:	898b      	ldrh	r3, [r1, #12]
 80076c2:	0005      	movs	r5, r0
 80076c4:	000c      	movs	r4, r1
 80076c6:	0016      	movs	r6, r2
 80076c8:	05db      	lsls	r3, r3, #23
 80076ca:	d505      	bpl.n	80076d8 <__swrite+0x1c>
 80076cc:	230e      	movs	r3, #14
 80076ce:	5ec9      	ldrsh	r1, [r1, r3]
 80076d0:	2200      	movs	r2, #0
 80076d2:	2302      	movs	r3, #2
 80076d4:	f002 f94a 	bl	800996c <_lseek_r>
 80076d8:	89a3      	ldrh	r3, [r4, #12]
 80076da:	4a05      	ldr	r2, [pc, #20]	; (80076f0 <__swrite+0x34>)
 80076dc:	0028      	movs	r0, r5
 80076de:	4013      	ands	r3, r2
 80076e0:	81a3      	strh	r3, [r4, #12]
 80076e2:	0032      	movs	r2, r6
 80076e4:	230e      	movs	r3, #14
 80076e6:	5ee1      	ldrsh	r1, [r4, r3]
 80076e8:	003b      	movs	r3, r7
 80076ea:	f000 fefb 	bl	80084e4 <_write_r>
 80076ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80076f0:	ffffefff 	.word	0xffffefff

080076f4 <__sseek>:
 80076f4:	b570      	push	{r4, r5, r6, lr}
 80076f6:	000c      	movs	r4, r1
 80076f8:	250e      	movs	r5, #14
 80076fa:	5f49      	ldrsh	r1, [r1, r5]
 80076fc:	f002 f936 	bl	800996c <_lseek_r>
 8007700:	89a3      	ldrh	r3, [r4, #12]
 8007702:	1c42      	adds	r2, r0, #1
 8007704:	d103      	bne.n	800770e <__sseek+0x1a>
 8007706:	4a05      	ldr	r2, [pc, #20]	; (800771c <__sseek+0x28>)
 8007708:	4013      	ands	r3, r2
 800770a:	81a3      	strh	r3, [r4, #12]
 800770c:	bd70      	pop	{r4, r5, r6, pc}
 800770e:	2280      	movs	r2, #128	; 0x80
 8007710:	0152      	lsls	r2, r2, #5
 8007712:	4313      	orrs	r3, r2
 8007714:	81a3      	strh	r3, [r4, #12]
 8007716:	6560      	str	r0, [r4, #84]	; 0x54
 8007718:	e7f8      	b.n	800770c <__sseek+0x18>
 800771a:	46c0      	nop			; (mov r8, r8)
 800771c:	ffffefff 	.word	0xffffefff

08007720 <__sclose>:
 8007720:	b510      	push	{r4, lr}
 8007722:	230e      	movs	r3, #14
 8007724:	5ec9      	ldrsh	r1, [r1, r3]
 8007726:	f000 fef1 	bl	800850c <_close_r>
 800772a:	bd10      	pop	{r4, pc}

0800772c <strstr>:
 800772c:	780a      	ldrb	r2, [r1, #0]
 800772e:	b530      	push	{r4, r5, lr}
 8007730:	2a00      	cmp	r2, #0
 8007732:	d10c      	bne.n	800774e <strstr+0x22>
 8007734:	bd30      	pop	{r4, r5, pc}
 8007736:	429a      	cmp	r2, r3
 8007738:	d108      	bne.n	800774c <strstr+0x20>
 800773a:	2301      	movs	r3, #1
 800773c:	5ccc      	ldrb	r4, [r1, r3]
 800773e:	2c00      	cmp	r4, #0
 8007740:	d0f8      	beq.n	8007734 <strstr+0x8>
 8007742:	5cc5      	ldrb	r5, [r0, r3]
 8007744:	42a5      	cmp	r5, r4
 8007746:	d101      	bne.n	800774c <strstr+0x20>
 8007748:	3301      	adds	r3, #1
 800774a:	e7f7      	b.n	800773c <strstr+0x10>
 800774c:	3001      	adds	r0, #1
 800774e:	7803      	ldrb	r3, [r0, #0]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d1f0      	bne.n	8007736 <strstr+0xa>
 8007754:	0018      	movs	r0, r3
 8007756:	e7ed      	b.n	8007734 <strstr+0x8>

08007758 <sulp>:
 8007758:	b570      	push	{r4, r5, r6, lr}
 800775a:	0016      	movs	r6, r2
 800775c:	000d      	movs	r5, r1
 800775e:	f002 fccd 	bl	800a0fc <__ulp>
 8007762:	2e00      	cmp	r6, #0
 8007764:	d00d      	beq.n	8007782 <sulp+0x2a>
 8007766:	236b      	movs	r3, #107	; 0x6b
 8007768:	006a      	lsls	r2, r5, #1
 800776a:	0d52      	lsrs	r2, r2, #21
 800776c:	1a9b      	subs	r3, r3, r2
 800776e:	2b00      	cmp	r3, #0
 8007770:	dd07      	ble.n	8007782 <sulp+0x2a>
 8007772:	2400      	movs	r4, #0
 8007774:	4a03      	ldr	r2, [pc, #12]	; (8007784 <sulp+0x2c>)
 8007776:	051b      	lsls	r3, r3, #20
 8007778:	189d      	adds	r5, r3, r2
 800777a:	002b      	movs	r3, r5
 800777c:	0022      	movs	r2, r4
 800777e:	f7fa fc03 	bl	8001f88 <__aeabi_dmul>
 8007782:	bd70      	pop	{r4, r5, r6, pc}
 8007784:	3ff00000 	.word	0x3ff00000

08007788 <_strtod_l>:
 8007788:	b5f0      	push	{r4, r5, r6, r7, lr}
 800778a:	001d      	movs	r5, r3
 800778c:	2300      	movs	r3, #0
 800778e:	b0a5      	sub	sp, #148	; 0x94
 8007790:	9320      	str	r3, [sp, #128]	; 0x80
 8007792:	4bac      	ldr	r3, [pc, #688]	; (8007a44 <_strtod_l+0x2bc>)
 8007794:	9005      	str	r0, [sp, #20]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	9108      	str	r1, [sp, #32]
 800779a:	0018      	movs	r0, r3
 800779c:	9307      	str	r3, [sp, #28]
 800779e:	921b      	str	r2, [sp, #108]	; 0x6c
 80077a0:	f7f8 fcb8 	bl	8000114 <strlen>
 80077a4:	2600      	movs	r6, #0
 80077a6:	0004      	movs	r4, r0
 80077a8:	2700      	movs	r7, #0
 80077aa:	9b08      	ldr	r3, [sp, #32]
 80077ac:	931f      	str	r3, [sp, #124]	; 0x7c
 80077ae:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80077b0:	7813      	ldrb	r3, [r2, #0]
 80077b2:	2b2b      	cmp	r3, #43	; 0x2b
 80077b4:	d058      	beq.n	8007868 <_strtod_l+0xe0>
 80077b6:	d844      	bhi.n	8007842 <_strtod_l+0xba>
 80077b8:	2b0d      	cmp	r3, #13
 80077ba:	d83d      	bhi.n	8007838 <_strtod_l+0xb0>
 80077bc:	2b08      	cmp	r3, #8
 80077be:	d83d      	bhi.n	800783c <_strtod_l+0xb4>
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d047      	beq.n	8007854 <_strtod_l+0xcc>
 80077c4:	2300      	movs	r3, #0
 80077c6:	930e      	str	r3, [sp, #56]	; 0x38
 80077c8:	2200      	movs	r2, #0
 80077ca:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80077cc:	920a      	str	r2, [sp, #40]	; 0x28
 80077ce:	9306      	str	r3, [sp, #24]
 80077d0:	781b      	ldrb	r3, [r3, #0]
 80077d2:	2b30      	cmp	r3, #48	; 0x30
 80077d4:	d000      	beq.n	80077d8 <_strtod_l+0x50>
 80077d6:	e07f      	b.n	80078d8 <_strtod_l+0x150>
 80077d8:	9b06      	ldr	r3, [sp, #24]
 80077da:	3220      	adds	r2, #32
 80077dc:	785b      	ldrb	r3, [r3, #1]
 80077de:	4393      	bics	r3, r2
 80077e0:	2b58      	cmp	r3, #88	; 0x58
 80077e2:	d000      	beq.n	80077e6 <_strtod_l+0x5e>
 80077e4:	e06e      	b.n	80078c4 <_strtod_l+0x13c>
 80077e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80077e8:	9502      	str	r5, [sp, #8]
 80077ea:	9301      	str	r3, [sp, #4]
 80077ec:	ab20      	add	r3, sp, #128	; 0x80
 80077ee:	9300      	str	r3, [sp, #0]
 80077f0:	4a95      	ldr	r2, [pc, #596]	; (8007a48 <_strtod_l+0x2c0>)
 80077f2:	ab21      	add	r3, sp, #132	; 0x84
 80077f4:	9805      	ldr	r0, [sp, #20]
 80077f6:	a91f      	add	r1, sp, #124	; 0x7c
 80077f8:	f001 fdaa 	bl	8009350 <__gethex>
 80077fc:	2307      	movs	r3, #7
 80077fe:	0005      	movs	r5, r0
 8007800:	0004      	movs	r4, r0
 8007802:	401d      	ands	r5, r3
 8007804:	4218      	tst	r0, r3
 8007806:	d006      	beq.n	8007816 <_strtod_l+0x8e>
 8007808:	2d06      	cmp	r5, #6
 800780a:	d12f      	bne.n	800786c <_strtod_l+0xe4>
 800780c:	9b06      	ldr	r3, [sp, #24]
 800780e:	3301      	adds	r3, #1
 8007810:	931f      	str	r3, [sp, #124]	; 0x7c
 8007812:	2300      	movs	r3, #0
 8007814:	930e      	str	r3, [sp, #56]	; 0x38
 8007816:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007818:	2b00      	cmp	r3, #0
 800781a:	d002      	beq.n	8007822 <_strtod_l+0x9a>
 800781c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800781e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8007820:	601a      	str	r2, [r3, #0]
 8007822:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007824:	2b00      	cmp	r3, #0
 8007826:	d01c      	beq.n	8007862 <_strtod_l+0xda>
 8007828:	2380      	movs	r3, #128	; 0x80
 800782a:	0032      	movs	r2, r6
 800782c:	061b      	lsls	r3, r3, #24
 800782e:	18fb      	adds	r3, r7, r3
 8007830:	0010      	movs	r0, r2
 8007832:	0019      	movs	r1, r3
 8007834:	b025      	add	sp, #148	; 0x94
 8007836:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007838:	2b20      	cmp	r3, #32
 800783a:	d1c3      	bne.n	80077c4 <_strtod_l+0x3c>
 800783c:	3201      	adds	r2, #1
 800783e:	921f      	str	r2, [sp, #124]	; 0x7c
 8007840:	e7b5      	b.n	80077ae <_strtod_l+0x26>
 8007842:	2b2d      	cmp	r3, #45	; 0x2d
 8007844:	d1be      	bne.n	80077c4 <_strtod_l+0x3c>
 8007846:	3b2c      	subs	r3, #44	; 0x2c
 8007848:	930e      	str	r3, [sp, #56]	; 0x38
 800784a:	1c53      	adds	r3, r2, #1
 800784c:	931f      	str	r3, [sp, #124]	; 0x7c
 800784e:	7853      	ldrb	r3, [r2, #1]
 8007850:	2b00      	cmp	r3, #0
 8007852:	d1b9      	bne.n	80077c8 <_strtod_l+0x40>
 8007854:	9b08      	ldr	r3, [sp, #32]
 8007856:	931f      	str	r3, [sp, #124]	; 0x7c
 8007858:	2300      	movs	r3, #0
 800785a:	930e      	str	r3, [sp, #56]	; 0x38
 800785c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800785e:	2b00      	cmp	r3, #0
 8007860:	d1dc      	bne.n	800781c <_strtod_l+0x94>
 8007862:	0032      	movs	r2, r6
 8007864:	003b      	movs	r3, r7
 8007866:	e7e3      	b.n	8007830 <_strtod_l+0xa8>
 8007868:	2300      	movs	r3, #0
 800786a:	e7ed      	b.n	8007848 <_strtod_l+0xc0>
 800786c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800786e:	2a00      	cmp	r2, #0
 8007870:	d007      	beq.n	8007882 <_strtod_l+0xfa>
 8007872:	2135      	movs	r1, #53	; 0x35
 8007874:	a822      	add	r0, sp, #136	; 0x88
 8007876:	f002 fd42 	bl	800a2fe <__copybits>
 800787a:	9920      	ldr	r1, [sp, #128]	; 0x80
 800787c:	9805      	ldr	r0, [sp, #20]
 800787e:	f002 f8fd 	bl	8009a7c <_Bfree>
 8007882:	1e68      	subs	r0, r5, #1
 8007884:	2804      	cmp	r0, #4
 8007886:	d806      	bhi.n	8007896 <_strtod_l+0x10e>
 8007888:	f7f8 fc4c 	bl	8000124 <__gnu_thumb1_case_uqi>
 800788c:	1816030b 	.word	0x1816030b
 8007890:	0b          	.byte	0x0b
 8007891:	00          	.byte	0x00
 8007892:	9e22      	ldr	r6, [sp, #136]	; 0x88
 8007894:	9f23      	ldr	r7, [sp, #140]	; 0x8c
 8007896:	0723      	lsls	r3, r4, #28
 8007898:	d5bd      	bpl.n	8007816 <_strtod_l+0x8e>
 800789a:	2380      	movs	r3, #128	; 0x80
 800789c:	061b      	lsls	r3, r3, #24
 800789e:	431f      	orrs	r7, r3
 80078a0:	e7b9      	b.n	8007816 <_strtod_l+0x8e>
 80078a2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80078a4:	4a69      	ldr	r2, [pc, #420]	; (8007a4c <_strtod_l+0x2c4>)
 80078a6:	496a      	ldr	r1, [pc, #424]	; (8007a50 <_strtod_l+0x2c8>)
 80078a8:	401a      	ands	r2, r3
 80078aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80078ac:	9e22      	ldr	r6, [sp, #136]	; 0x88
 80078ae:	185b      	adds	r3, r3, r1
 80078b0:	051b      	lsls	r3, r3, #20
 80078b2:	431a      	orrs	r2, r3
 80078b4:	0017      	movs	r7, r2
 80078b6:	e7ee      	b.n	8007896 <_strtod_l+0x10e>
 80078b8:	4f66      	ldr	r7, [pc, #408]	; (8007a54 <_strtod_l+0x2cc>)
 80078ba:	e7ec      	b.n	8007896 <_strtod_l+0x10e>
 80078bc:	2601      	movs	r6, #1
 80078be:	4f66      	ldr	r7, [pc, #408]	; (8007a58 <_strtod_l+0x2d0>)
 80078c0:	4276      	negs	r6, r6
 80078c2:	e7e8      	b.n	8007896 <_strtod_l+0x10e>
 80078c4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80078c6:	1c5a      	adds	r2, r3, #1
 80078c8:	921f      	str	r2, [sp, #124]	; 0x7c
 80078ca:	785b      	ldrb	r3, [r3, #1]
 80078cc:	2b30      	cmp	r3, #48	; 0x30
 80078ce:	d0f9      	beq.n	80078c4 <_strtod_l+0x13c>
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d0a0      	beq.n	8007816 <_strtod_l+0x8e>
 80078d4:	2301      	movs	r3, #1
 80078d6:	930a      	str	r3, [sp, #40]	; 0x28
 80078d8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80078da:	220a      	movs	r2, #10
 80078dc:	9310      	str	r3, [sp, #64]	; 0x40
 80078de:	2300      	movs	r3, #0
 80078e0:	930f      	str	r3, [sp, #60]	; 0x3c
 80078e2:	930b      	str	r3, [sp, #44]	; 0x2c
 80078e4:	9309      	str	r3, [sp, #36]	; 0x24
 80078e6:	981f      	ldr	r0, [sp, #124]	; 0x7c
 80078e8:	7805      	ldrb	r5, [r0, #0]
 80078ea:	002b      	movs	r3, r5
 80078ec:	3b30      	subs	r3, #48	; 0x30
 80078ee:	b2d9      	uxtb	r1, r3
 80078f0:	2909      	cmp	r1, #9
 80078f2:	d927      	bls.n	8007944 <_strtod_l+0x1bc>
 80078f4:	0022      	movs	r2, r4
 80078f6:	9907      	ldr	r1, [sp, #28]
 80078f8:	f003 fb5a 	bl	800afb0 <strncmp>
 80078fc:	2800      	cmp	r0, #0
 80078fe:	d033      	beq.n	8007968 <_strtod_l+0x1e0>
 8007900:	2000      	movs	r0, #0
 8007902:	002b      	movs	r3, r5
 8007904:	4684      	mov	ip, r0
 8007906:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007908:	900c      	str	r0, [sp, #48]	; 0x30
 800790a:	9206      	str	r2, [sp, #24]
 800790c:	2220      	movs	r2, #32
 800790e:	0019      	movs	r1, r3
 8007910:	4391      	bics	r1, r2
 8007912:	000a      	movs	r2, r1
 8007914:	2100      	movs	r1, #0
 8007916:	9107      	str	r1, [sp, #28]
 8007918:	2a45      	cmp	r2, #69	; 0x45
 800791a:	d000      	beq.n	800791e <_strtod_l+0x196>
 800791c:	e0c5      	b.n	8007aaa <_strtod_l+0x322>
 800791e:	9b06      	ldr	r3, [sp, #24]
 8007920:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007922:	4303      	orrs	r3, r0
 8007924:	4313      	orrs	r3, r2
 8007926:	428b      	cmp	r3, r1
 8007928:	d094      	beq.n	8007854 <_strtod_l+0xcc>
 800792a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800792c:	9308      	str	r3, [sp, #32]
 800792e:	3301      	adds	r3, #1
 8007930:	931f      	str	r3, [sp, #124]	; 0x7c
 8007932:	9b08      	ldr	r3, [sp, #32]
 8007934:	785b      	ldrb	r3, [r3, #1]
 8007936:	2b2b      	cmp	r3, #43	; 0x2b
 8007938:	d076      	beq.n	8007a28 <_strtod_l+0x2a0>
 800793a:	000c      	movs	r4, r1
 800793c:	2b2d      	cmp	r3, #45	; 0x2d
 800793e:	d179      	bne.n	8007a34 <_strtod_l+0x2ac>
 8007940:	2401      	movs	r4, #1
 8007942:	e072      	b.n	8007a2a <_strtod_l+0x2a2>
 8007944:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007946:	2908      	cmp	r1, #8
 8007948:	dc09      	bgt.n	800795e <_strtod_l+0x1d6>
 800794a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800794c:	4351      	muls	r1, r2
 800794e:	185b      	adds	r3, r3, r1
 8007950:	930b      	str	r3, [sp, #44]	; 0x2c
 8007952:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007954:	3001      	adds	r0, #1
 8007956:	3301      	adds	r3, #1
 8007958:	9309      	str	r3, [sp, #36]	; 0x24
 800795a:	901f      	str	r0, [sp, #124]	; 0x7c
 800795c:	e7c3      	b.n	80078e6 <_strtod_l+0x15e>
 800795e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007960:	4351      	muls	r1, r2
 8007962:	185b      	adds	r3, r3, r1
 8007964:	930f      	str	r3, [sp, #60]	; 0x3c
 8007966:	e7f4      	b.n	8007952 <_strtod_l+0x1ca>
 8007968:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800796a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800796c:	191c      	adds	r4, r3, r4
 800796e:	941f      	str	r4, [sp, #124]	; 0x7c
 8007970:	7823      	ldrb	r3, [r4, #0]
 8007972:	2a00      	cmp	r2, #0
 8007974:	d039      	beq.n	80079ea <_strtod_l+0x262>
 8007976:	900c      	str	r0, [sp, #48]	; 0x30
 8007978:	9206      	str	r2, [sp, #24]
 800797a:	001a      	movs	r2, r3
 800797c:	3a30      	subs	r2, #48	; 0x30
 800797e:	2a09      	cmp	r2, #9
 8007980:	d912      	bls.n	80079a8 <_strtod_l+0x220>
 8007982:	2201      	movs	r2, #1
 8007984:	4694      	mov	ip, r2
 8007986:	e7c1      	b.n	800790c <_strtod_l+0x184>
 8007988:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800798a:	3001      	adds	r0, #1
 800798c:	1c5a      	adds	r2, r3, #1
 800798e:	921f      	str	r2, [sp, #124]	; 0x7c
 8007990:	785b      	ldrb	r3, [r3, #1]
 8007992:	2b30      	cmp	r3, #48	; 0x30
 8007994:	d0f8      	beq.n	8007988 <_strtod_l+0x200>
 8007996:	001a      	movs	r2, r3
 8007998:	3a31      	subs	r2, #49	; 0x31
 800799a:	2a08      	cmp	r2, #8
 800799c:	d83f      	bhi.n	8007a1e <_strtod_l+0x296>
 800799e:	900c      	str	r0, [sp, #48]	; 0x30
 80079a0:	2000      	movs	r0, #0
 80079a2:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80079a4:	9006      	str	r0, [sp, #24]
 80079a6:	9210      	str	r2, [sp, #64]	; 0x40
 80079a8:	001a      	movs	r2, r3
 80079aa:	1c41      	adds	r1, r0, #1
 80079ac:	3a30      	subs	r2, #48	; 0x30
 80079ae:	2b30      	cmp	r3, #48	; 0x30
 80079b0:	d015      	beq.n	80079de <_strtod_l+0x256>
 80079b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80079b4:	185b      	adds	r3, r3, r1
 80079b6:	210a      	movs	r1, #10
 80079b8:	930c      	str	r3, [sp, #48]	; 0x30
 80079ba:	9b06      	ldr	r3, [sp, #24]
 80079bc:	18c4      	adds	r4, r0, r3
 80079be:	42a3      	cmp	r3, r4
 80079c0:	d115      	bne.n	80079ee <_strtod_l+0x266>
 80079c2:	9906      	ldr	r1, [sp, #24]
 80079c4:	9b06      	ldr	r3, [sp, #24]
 80079c6:	3101      	adds	r1, #1
 80079c8:	1809      	adds	r1, r1, r0
 80079ca:	181b      	adds	r3, r3, r0
 80079cc:	9106      	str	r1, [sp, #24]
 80079ce:	2b08      	cmp	r3, #8
 80079d0:	dc1b      	bgt.n	8007a0a <_strtod_l+0x282>
 80079d2:	230a      	movs	r3, #10
 80079d4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80079d6:	434b      	muls	r3, r1
 80079d8:	2100      	movs	r1, #0
 80079da:	18d3      	adds	r3, r2, r3
 80079dc:	930b      	str	r3, [sp, #44]	; 0x2c
 80079de:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80079e0:	0008      	movs	r0, r1
 80079e2:	1c5a      	adds	r2, r3, #1
 80079e4:	921f      	str	r2, [sp, #124]	; 0x7c
 80079e6:	785b      	ldrb	r3, [r3, #1]
 80079e8:	e7c7      	b.n	800797a <_strtod_l+0x1f2>
 80079ea:	9809      	ldr	r0, [sp, #36]	; 0x24
 80079ec:	e7d1      	b.n	8007992 <_strtod_l+0x20a>
 80079ee:	2b08      	cmp	r3, #8
 80079f0:	dc04      	bgt.n	80079fc <_strtod_l+0x274>
 80079f2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80079f4:	434d      	muls	r5, r1
 80079f6:	950b      	str	r5, [sp, #44]	; 0x2c
 80079f8:	3301      	adds	r3, #1
 80079fa:	e7e0      	b.n	80079be <_strtod_l+0x236>
 80079fc:	1c5d      	adds	r5, r3, #1
 80079fe:	2d10      	cmp	r5, #16
 8007a00:	dcfa      	bgt.n	80079f8 <_strtod_l+0x270>
 8007a02:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007a04:	434d      	muls	r5, r1
 8007a06:	950f      	str	r5, [sp, #60]	; 0x3c
 8007a08:	e7f6      	b.n	80079f8 <_strtod_l+0x270>
 8007a0a:	9b06      	ldr	r3, [sp, #24]
 8007a0c:	2100      	movs	r1, #0
 8007a0e:	2b10      	cmp	r3, #16
 8007a10:	dce5      	bgt.n	80079de <_strtod_l+0x256>
 8007a12:	230a      	movs	r3, #10
 8007a14:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8007a16:	4343      	muls	r3, r0
 8007a18:	18d3      	adds	r3, r2, r3
 8007a1a:	930f      	str	r3, [sp, #60]	; 0x3c
 8007a1c:	e7df      	b.n	80079de <_strtod_l+0x256>
 8007a1e:	2200      	movs	r2, #0
 8007a20:	920c      	str	r2, [sp, #48]	; 0x30
 8007a22:	9206      	str	r2, [sp, #24]
 8007a24:	3201      	adds	r2, #1
 8007a26:	e7ad      	b.n	8007984 <_strtod_l+0x1fc>
 8007a28:	2400      	movs	r4, #0
 8007a2a:	9b08      	ldr	r3, [sp, #32]
 8007a2c:	3302      	adds	r3, #2
 8007a2e:	931f      	str	r3, [sp, #124]	; 0x7c
 8007a30:	9b08      	ldr	r3, [sp, #32]
 8007a32:	789b      	ldrb	r3, [r3, #2]
 8007a34:	001a      	movs	r2, r3
 8007a36:	3a30      	subs	r2, #48	; 0x30
 8007a38:	2a09      	cmp	r2, #9
 8007a3a:	d913      	bls.n	8007a64 <_strtod_l+0x2dc>
 8007a3c:	9a08      	ldr	r2, [sp, #32]
 8007a3e:	921f      	str	r2, [sp, #124]	; 0x7c
 8007a40:	2200      	movs	r2, #0
 8007a42:	e031      	b.n	8007aa8 <_strtod_l+0x320>
 8007a44:	0800c1b8 	.word	0x0800c1b8
 8007a48:	0800bf6c 	.word	0x0800bf6c
 8007a4c:	ffefffff 	.word	0xffefffff
 8007a50:	00000433 	.word	0x00000433
 8007a54:	7ff00000 	.word	0x7ff00000
 8007a58:	7fffffff 	.word	0x7fffffff
 8007a5c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007a5e:	1c5a      	adds	r2, r3, #1
 8007a60:	921f      	str	r2, [sp, #124]	; 0x7c
 8007a62:	785b      	ldrb	r3, [r3, #1]
 8007a64:	2b30      	cmp	r3, #48	; 0x30
 8007a66:	d0f9      	beq.n	8007a5c <_strtod_l+0x2d4>
 8007a68:	2200      	movs	r2, #0
 8007a6a:	9207      	str	r2, [sp, #28]
 8007a6c:	001a      	movs	r2, r3
 8007a6e:	3a31      	subs	r2, #49	; 0x31
 8007a70:	2a08      	cmp	r2, #8
 8007a72:	d81a      	bhi.n	8007aaa <_strtod_l+0x322>
 8007a74:	3b30      	subs	r3, #48	; 0x30
 8007a76:	001a      	movs	r2, r3
 8007a78:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007a7a:	9307      	str	r3, [sp, #28]
 8007a7c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007a7e:	1c59      	adds	r1, r3, #1
 8007a80:	911f      	str	r1, [sp, #124]	; 0x7c
 8007a82:	785b      	ldrb	r3, [r3, #1]
 8007a84:	001d      	movs	r5, r3
 8007a86:	3d30      	subs	r5, #48	; 0x30
 8007a88:	2d09      	cmp	r5, #9
 8007a8a:	d939      	bls.n	8007b00 <_strtod_l+0x378>
 8007a8c:	9d07      	ldr	r5, [sp, #28]
 8007a8e:	1b49      	subs	r1, r1, r5
 8007a90:	4db0      	ldr	r5, [pc, #704]	; (8007d54 <_strtod_l+0x5cc>)
 8007a92:	9507      	str	r5, [sp, #28]
 8007a94:	2908      	cmp	r1, #8
 8007a96:	dc03      	bgt.n	8007aa0 <_strtod_l+0x318>
 8007a98:	9207      	str	r2, [sp, #28]
 8007a9a:	42aa      	cmp	r2, r5
 8007a9c:	dd00      	ble.n	8007aa0 <_strtod_l+0x318>
 8007a9e:	9507      	str	r5, [sp, #28]
 8007aa0:	2c00      	cmp	r4, #0
 8007aa2:	d002      	beq.n	8007aaa <_strtod_l+0x322>
 8007aa4:	9a07      	ldr	r2, [sp, #28]
 8007aa6:	4252      	negs	r2, r2
 8007aa8:	9207      	str	r2, [sp, #28]
 8007aaa:	9a06      	ldr	r2, [sp, #24]
 8007aac:	2a00      	cmp	r2, #0
 8007aae:	d14b      	bne.n	8007b48 <_strtod_l+0x3c0>
 8007ab0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007ab2:	4310      	orrs	r0, r2
 8007ab4:	d000      	beq.n	8007ab8 <_strtod_l+0x330>
 8007ab6:	e6ae      	b.n	8007816 <_strtod_l+0x8e>
 8007ab8:	4662      	mov	r2, ip
 8007aba:	2a00      	cmp	r2, #0
 8007abc:	d000      	beq.n	8007ac0 <_strtod_l+0x338>
 8007abe:	e6c9      	b.n	8007854 <_strtod_l+0xcc>
 8007ac0:	2b69      	cmp	r3, #105	; 0x69
 8007ac2:	d025      	beq.n	8007b10 <_strtod_l+0x388>
 8007ac4:	dc21      	bgt.n	8007b0a <_strtod_l+0x382>
 8007ac6:	2b49      	cmp	r3, #73	; 0x49
 8007ac8:	d022      	beq.n	8007b10 <_strtod_l+0x388>
 8007aca:	2b4e      	cmp	r3, #78	; 0x4e
 8007acc:	d000      	beq.n	8007ad0 <_strtod_l+0x348>
 8007ace:	e6c1      	b.n	8007854 <_strtod_l+0xcc>
 8007ad0:	49a1      	ldr	r1, [pc, #644]	; (8007d58 <_strtod_l+0x5d0>)
 8007ad2:	a81f      	add	r0, sp, #124	; 0x7c
 8007ad4:	f001 fe8a 	bl	80097ec <__match>
 8007ad8:	2800      	cmp	r0, #0
 8007ada:	d100      	bne.n	8007ade <_strtod_l+0x356>
 8007adc:	e6ba      	b.n	8007854 <_strtod_l+0xcc>
 8007ade:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007ae0:	781b      	ldrb	r3, [r3, #0]
 8007ae2:	2b28      	cmp	r3, #40	; 0x28
 8007ae4:	d12a      	bne.n	8007b3c <_strtod_l+0x3b4>
 8007ae6:	499d      	ldr	r1, [pc, #628]	; (8007d5c <_strtod_l+0x5d4>)
 8007ae8:	aa22      	add	r2, sp, #136	; 0x88
 8007aea:	a81f      	add	r0, sp, #124	; 0x7c
 8007aec:	f001 fe92 	bl	8009814 <__hexnan>
 8007af0:	2805      	cmp	r0, #5
 8007af2:	d123      	bne.n	8007b3c <_strtod_l+0x3b4>
 8007af4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007af6:	4a9a      	ldr	r2, [pc, #616]	; (8007d60 <_strtod_l+0x5d8>)
 8007af8:	9e22      	ldr	r6, [sp, #136]	; 0x88
 8007afa:	431a      	orrs	r2, r3
 8007afc:	0017      	movs	r7, r2
 8007afe:	e68a      	b.n	8007816 <_strtod_l+0x8e>
 8007b00:	210a      	movs	r1, #10
 8007b02:	434a      	muls	r2, r1
 8007b04:	18d2      	adds	r2, r2, r3
 8007b06:	3a30      	subs	r2, #48	; 0x30
 8007b08:	e7b8      	b.n	8007a7c <_strtod_l+0x2f4>
 8007b0a:	2b6e      	cmp	r3, #110	; 0x6e
 8007b0c:	d0e0      	beq.n	8007ad0 <_strtod_l+0x348>
 8007b0e:	e6a1      	b.n	8007854 <_strtod_l+0xcc>
 8007b10:	4994      	ldr	r1, [pc, #592]	; (8007d64 <_strtod_l+0x5dc>)
 8007b12:	a81f      	add	r0, sp, #124	; 0x7c
 8007b14:	f001 fe6a 	bl	80097ec <__match>
 8007b18:	2800      	cmp	r0, #0
 8007b1a:	d100      	bne.n	8007b1e <_strtod_l+0x396>
 8007b1c:	e69a      	b.n	8007854 <_strtod_l+0xcc>
 8007b1e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007b20:	4991      	ldr	r1, [pc, #580]	; (8007d68 <_strtod_l+0x5e0>)
 8007b22:	3b01      	subs	r3, #1
 8007b24:	a81f      	add	r0, sp, #124	; 0x7c
 8007b26:	931f      	str	r3, [sp, #124]	; 0x7c
 8007b28:	f001 fe60 	bl	80097ec <__match>
 8007b2c:	2800      	cmp	r0, #0
 8007b2e:	d102      	bne.n	8007b36 <_strtod_l+0x3ae>
 8007b30:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007b32:	3301      	adds	r3, #1
 8007b34:	931f      	str	r3, [sp, #124]	; 0x7c
 8007b36:	2600      	movs	r6, #0
 8007b38:	4f89      	ldr	r7, [pc, #548]	; (8007d60 <_strtod_l+0x5d8>)
 8007b3a:	e66c      	b.n	8007816 <_strtod_l+0x8e>
 8007b3c:	488b      	ldr	r0, [pc, #556]	; (8007d6c <_strtod_l+0x5e4>)
 8007b3e:	f003 f9e3 	bl	800af08 <nan>
 8007b42:	0006      	movs	r6, r0
 8007b44:	000f      	movs	r7, r1
 8007b46:	e666      	b.n	8007816 <_strtod_l+0x8e>
 8007b48:	9b07      	ldr	r3, [sp, #28]
 8007b4a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007b4c:	1a9b      	subs	r3, r3, r2
 8007b4e:	930a      	str	r3, [sp, #40]	; 0x28
 8007b50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d101      	bne.n	8007b5a <_strtod_l+0x3d2>
 8007b56:	9b06      	ldr	r3, [sp, #24]
 8007b58:	9309      	str	r3, [sp, #36]	; 0x24
 8007b5a:	9c06      	ldr	r4, [sp, #24]
 8007b5c:	2c10      	cmp	r4, #16
 8007b5e:	dd00      	ble.n	8007b62 <_strtod_l+0x3da>
 8007b60:	2410      	movs	r4, #16
 8007b62:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8007b64:	f7fb f892 	bl	8002c8c <__aeabi_ui2d>
 8007b68:	9b06      	ldr	r3, [sp, #24]
 8007b6a:	0006      	movs	r6, r0
 8007b6c:	000f      	movs	r7, r1
 8007b6e:	2b09      	cmp	r3, #9
 8007b70:	dd15      	ble.n	8007b9e <_strtod_l+0x416>
 8007b72:	0022      	movs	r2, r4
 8007b74:	4b7e      	ldr	r3, [pc, #504]	; (8007d70 <_strtod_l+0x5e8>)
 8007b76:	3a09      	subs	r2, #9
 8007b78:	00d2      	lsls	r2, r2, #3
 8007b7a:	189b      	adds	r3, r3, r2
 8007b7c:	681a      	ldr	r2, [r3, #0]
 8007b7e:	685b      	ldr	r3, [r3, #4]
 8007b80:	f7fa fa02 	bl	8001f88 <__aeabi_dmul>
 8007b84:	0006      	movs	r6, r0
 8007b86:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8007b88:	000f      	movs	r7, r1
 8007b8a:	f7fb f87f 	bl	8002c8c <__aeabi_ui2d>
 8007b8e:	0002      	movs	r2, r0
 8007b90:	000b      	movs	r3, r1
 8007b92:	0030      	movs	r0, r6
 8007b94:	0039      	movs	r1, r7
 8007b96:	f7f9 fab9 	bl	800110c <__aeabi_dadd>
 8007b9a:	0006      	movs	r6, r0
 8007b9c:	000f      	movs	r7, r1
 8007b9e:	9b06      	ldr	r3, [sp, #24]
 8007ba0:	2b0f      	cmp	r3, #15
 8007ba2:	dc39      	bgt.n	8007c18 <_strtod_l+0x490>
 8007ba4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d100      	bne.n	8007bac <_strtod_l+0x424>
 8007baa:	e634      	b.n	8007816 <_strtod_l+0x8e>
 8007bac:	dd24      	ble.n	8007bf8 <_strtod_l+0x470>
 8007bae:	2b16      	cmp	r3, #22
 8007bb0:	dc09      	bgt.n	8007bc6 <_strtod_l+0x43e>
 8007bb2:	496f      	ldr	r1, [pc, #444]	; (8007d70 <_strtod_l+0x5e8>)
 8007bb4:	00db      	lsls	r3, r3, #3
 8007bb6:	18c9      	adds	r1, r1, r3
 8007bb8:	0032      	movs	r2, r6
 8007bba:	6808      	ldr	r0, [r1, #0]
 8007bbc:	6849      	ldr	r1, [r1, #4]
 8007bbe:	003b      	movs	r3, r7
 8007bc0:	f7fa f9e2 	bl	8001f88 <__aeabi_dmul>
 8007bc4:	e7bd      	b.n	8007b42 <_strtod_l+0x3ba>
 8007bc6:	2325      	movs	r3, #37	; 0x25
 8007bc8:	9a06      	ldr	r2, [sp, #24]
 8007bca:	1a9b      	subs	r3, r3, r2
 8007bcc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007bce:	4293      	cmp	r3, r2
 8007bd0:	db22      	blt.n	8007c18 <_strtod_l+0x490>
 8007bd2:	240f      	movs	r4, #15
 8007bd4:	9b06      	ldr	r3, [sp, #24]
 8007bd6:	4d66      	ldr	r5, [pc, #408]	; (8007d70 <_strtod_l+0x5e8>)
 8007bd8:	1ae4      	subs	r4, r4, r3
 8007bda:	00e1      	lsls	r1, r4, #3
 8007bdc:	1869      	adds	r1, r5, r1
 8007bde:	0032      	movs	r2, r6
 8007be0:	6808      	ldr	r0, [r1, #0]
 8007be2:	6849      	ldr	r1, [r1, #4]
 8007be4:	003b      	movs	r3, r7
 8007be6:	f7fa f9cf 	bl	8001f88 <__aeabi_dmul>
 8007bea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007bec:	1b1c      	subs	r4, r3, r4
 8007bee:	00e4      	lsls	r4, r4, #3
 8007bf0:	192c      	adds	r4, r5, r4
 8007bf2:	6822      	ldr	r2, [r4, #0]
 8007bf4:	6863      	ldr	r3, [r4, #4]
 8007bf6:	e7e3      	b.n	8007bc0 <_strtod_l+0x438>
 8007bf8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007bfa:	3316      	adds	r3, #22
 8007bfc:	db0c      	blt.n	8007c18 <_strtod_l+0x490>
 8007bfe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007c00:	9a07      	ldr	r2, [sp, #28]
 8007c02:	0030      	movs	r0, r6
 8007c04:	1a9a      	subs	r2, r3, r2
 8007c06:	4b5a      	ldr	r3, [pc, #360]	; (8007d70 <_strtod_l+0x5e8>)
 8007c08:	00d2      	lsls	r2, r2, #3
 8007c0a:	189b      	adds	r3, r3, r2
 8007c0c:	0039      	movs	r1, r7
 8007c0e:	681a      	ldr	r2, [r3, #0]
 8007c10:	685b      	ldr	r3, [r3, #4]
 8007c12:	f7f9 fdb7 	bl	8001784 <__aeabi_ddiv>
 8007c16:	e794      	b.n	8007b42 <_strtod_l+0x3ba>
 8007c18:	9b06      	ldr	r3, [sp, #24]
 8007c1a:	1b1c      	subs	r4, r3, r4
 8007c1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c1e:	18e4      	adds	r4, r4, r3
 8007c20:	2c00      	cmp	r4, #0
 8007c22:	dd72      	ble.n	8007d0a <_strtod_l+0x582>
 8007c24:	230f      	movs	r3, #15
 8007c26:	0021      	movs	r1, r4
 8007c28:	4019      	ands	r1, r3
 8007c2a:	421c      	tst	r4, r3
 8007c2c:	d00a      	beq.n	8007c44 <_strtod_l+0x4bc>
 8007c2e:	00cb      	lsls	r3, r1, #3
 8007c30:	494f      	ldr	r1, [pc, #316]	; (8007d70 <_strtod_l+0x5e8>)
 8007c32:	0032      	movs	r2, r6
 8007c34:	18c9      	adds	r1, r1, r3
 8007c36:	6808      	ldr	r0, [r1, #0]
 8007c38:	6849      	ldr	r1, [r1, #4]
 8007c3a:	003b      	movs	r3, r7
 8007c3c:	f7fa f9a4 	bl	8001f88 <__aeabi_dmul>
 8007c40:	0006      	movs	r6, r0
 8007c42:	000f      	movs	r7, r1
 8007c44:	230f      	movs	r3, #15
 8007c46:	439c      	bics	r4, r3
 8007c48:	d04a      	beq.n	8007ce0 <_strtod_l+0x558>
 8007c4a:	3326      	adds	r3, #38	; 0x26
 8007c4c:	33ff      	adds	r3, #255	; 0xff
 8007c4e:	429c      	cmp	r4, r3
 8007c50:	dd22      	ble.n	8007c98 <_strtod_l+0x510>
 8007c52:	2300      	movs	r3, #0
 8007c54:	9306      	str	r3, [sp, #24]
 8007c56:	9307      	str	r3, [sp, #28]
 8007c58:	930b      	str	r3, [sp, #44]	; 0x2c
 8007c5a:	9309      	str	r3, [sp, #36]	; 0x24
 8007c5c:	2322      	movs	r3, #34	; 0x22
 8007c5e:	2600      	movs	r6, #0
 8007c60:	9a05      	ldr	r2, [sp, #20]
 8007c62:	4f3f      	ldr	r7, [pc, #252]	; (8007d60 <_strtod_l+0x5d8>)
 8007c64:	6013      	str	r3, [r2, #0]
 8007c66:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007c68:	42b3      	cmp	r3, r6
 8007c6a:	d100      	bne.n	8007c6e <_strtod_l+0x4e6>
 8007c6c:	e5d3      	b.n	8007816 <_strtod_l+0x8e>
 8007c6e:	9920      	ldr	r1, [sp, #128]	; 0x80
 8007c70:	9805      	ldr	r0, [sp, #20]
 8007c72:	f001 ff03 	bl	8009a7c <_Bfree>
 8007c76:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007c78:	9805      	ldr	r0, [sp, #20]
 8007c7a:	f001 feff 	bl	8009a7c <_Bfree>
 8007c7e:	9907      	ldr	r1, [sp, #28]
 8007c80:	9805      	ldr	r0, [sp, #20]
 8007c82:	f001 fefb 	bl	8009a7c <_Bfree>
 8007c86:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007c88:	9805      	ldr	r0, [sp, #20]
 8007c8a:	f001 fef7 	bl	8009a7c <_Bfree>
 8007c8e:	9906      	ldr	r1, [sp, #24]
 8007c90:	9805      	ldr	r0, [sp, #20]
 8007c92:	f001 fef3 	bl	8009a7c <_Bfree>
 8007c96:	e5be      	b.n	8007816 <_strtod_l+0x8e>
 8007c98:	2300      	movs	r3, #0
 8007c9a:	0030      	movs	r0, r6
 8007c9c:	0039      	movs	r1, r7
 8007c9e:	4d35      	ldr	r5, [pc, #212]	; (8007d74 <_strtod_l+0x5ec>)
 8007ca0:	1124      	asrs	r4, r4, #4
 8007ca2:	9308      	str	r3, [sp, #32]
 8007ca4:	2c01      	cmp	r4, #1
 8007ca6:	dc1e      	bgt.n	8007ce6 <_strtod_l+0x55e>
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d001      	beq.n	8007cb0 <_strtod_l+0x528>
 8007cac:	0006      	movs	r6, r0
 8007cae:	000f      	movs	r7, r1
 8007cb0:	4b31      	ldr	r3, [pc, #196]	; (8007d78 <_strtod_l+0x5f0>)
 8007cb2:	0032      	movs	r2, r6
 8007cb4:	18ff      	adds	r7, r7, r3
 8007cb6:	9b08      	ldr	r3, [sp, #32]
 8007cb8:	00dd      	lsls	r5, r3, #3
 8007cba:	4b2e      	ldr	r3, [pc, #184]	; (8007d74 <_strtod_l+0x5ec>)
 8007cbc:	195d      	adds	r5, r3, r5
 8007cbe:	6828      	ldr	r0, [r5, #0]
 8007cc0:	6869      	ldr	r1, [r5, #4]
 8007cc2:	003b      	movs	r3, r7
 8007cc4:	f7fa f960 	bl	8001f88 <__aeabi_dmul>
 8007cc8:	4b25      	ldr	r3, [pc, #148]	; (8007d60 <_strtod_l+0x5d8>)
 8007cca:	4a2c      	ldr	r2, [pc, #176]	; (8007d7c <_strtod_l+0x5f4>)
 8007ccc:	0006      	movs	r6, r0
 8007cce:	400b      	ands	r3, r1
 8007cd0:	4293      	cmp	r3, r2
 8007cd2:	d8be      	bhi.n	8007c52 <_strtod_l+0x4ca>
 8007cd4:	4a2a      	ldr	r2, [pc, #168]	; (8007d80 <_strtod_l+0x5f8>)
 8007cd6:	4293      	cmp	r3, r2
 8007cd8:	d913      	bls.n	8007d02 <_strtod_l+0x57a>
 8007cda:	2601      	movs	r6, #1
 8007cdc:	4f29      	ldr	r7, [pc, #164]	; (8007d84 <_strtod_l+0x5fc>)
 8007cde:	4276      	negs	r6, r6
 8007ce0:	2300      	movs	r3, #0
 8007ce2:	9308      	str	r3, [sp, #32]
 8007ce4:	e087      	b.n	8007df6 <_strtod_l+0x66e>
 8007ce6:	2201      	movs	r2, #1
 8007ce8:	4214      	tst	r4, r2
 8007cea:	d004      	beq.n	8007cf6 <_strtod_l+0x56e>
 8007cec:	682a      	ldr	r2, [r5, #0]
 8007cee:	686b      	ldr	r3, [r5, #4]
 8007cf0:	f7fa f94a 	bl	8001f88 <__aeabi_dmul>
 8007cf4:	2301      	movs	r3, #1
 8007cf6:	9a08      	ldr	r2, [sp, #32]
 8007cf8:	1064      	asrs	r4, r4, #1
 8007cfa:	3201      	adds	r2, #1
 8007cfc:	9208      	str	r2, [sp, #32]
 8007cfe:	3508      	adds	r5, #8
 8007d00:	e7d0      	b.n	8007ca4 <_strtod_l+0x51c>
 8007d02:	23d4      	movs	r3, #212	; 0xd4
 8007d04:	049b      	lsls	r3, r3, #18
 8007d06:	18cf      	adds	r7, r1, r3
 8007d08:	e7ea      	b.n	8007ce0 <_strtod_l+0x558>
 8007d0a:	2c00      	cmp	r4, #0
 8007d0c:	d0e8      	beq.n	8007ce0 <_strtod_l+0x558>
 8007d0e:	4264      	negs	r4, r4
 8007d10:	220f      	movs	r2, #15
 8007d12:	0023      	movs	r3, r4
 8007d14:	4013      	ands	r3, r2
 8007d16:	4214      	tst	r4, r2
 8007d18:	d00a      	beq.n	8007d30 <_strtod_l+0x5a8>
 8007d1a:	00da      	lsls	r2, r3, #3
 8007d1c:	4b14      	ldr	r3, [pc, #80]	; (8007d70 <_strtod_l+0x5e8>)
 8007d1e:	0030      	movs	r0, r6
 8007d20:	189b      	adds	r3, r3, r2
 8007d22:	0039      	movs	r1, r7
 8007d24:	681a      	ldr	r2, [r3, #0]
 8007d26:	685b      	ldr	r3, [r3, #4]
 8007d28:	f7f9 fd2c 	bl	8001784 <__aeabi_ddiv>
 8007d2c:	0006      	movs	r6, r0
 8007d2e:	000f      	movs	r7, r1
 8007d30:	1124      	asrs	r4, r4, #4
 8007d32:	d0d5      	beq.n	8007ce0 <_strtod_l+0x558>
 8007d34:	2c1f      	cmp	r4, #31
 8007d36:	dd27      	ble.n	8007d88 <_strtod_l+0x600>
 8007d38:	2300      	movs	r3, #0
 8007d3a:	9306      	str	r3, [sp, #24]
 8007d3c:	9307      	str	r3, [sp, #28]
 8007d3e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007d40:	9309      	str	r3, [sp, #36]	; 0x24
 8007d42:	2322      	movs	r3, #34	; 0x22
 8007d44:	9a05      	ldr	r2, [sp, #20]
 8007d46:	2600      	movs	r6, #0
 8007d48:	6013      	str	r3, [r2, #0]
 8007d4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007d4c:	2700      	movs	r7, #0
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d18d      	bne.n	8007c6e <_strtod_l+0x4e6>
 8007d52:	e560      	b.n	8007816 <_strtod_l+0x8e>
 8007d54:	00004e1f 	.word	0x00004e1f
 8007d58:	0800bf41 	.word	0x0800bf41
 8007d5c:	0800bf80 	.word	0x0800bf80
 8007d60:	7ff00000 	.word	0x7ff00000
 8007d64:	0800bf39 	.word	0x0800bf39
 8007d68:	0800c0c4 	.word	0x0800c0c4
 8007d6c:	0800c38b 	.word	0x0800c38b
 8007d70:	0800c250 	.word	0x0800c250
 8007d74:	0800c228 	.word	0x0800c228
 8007d78:	fcb00000 	.word	0xfcb00000
 8007d7c:	7ca00000 	.word	0x7ca00000
 8007d80:	7c900000 	.word	0x7c900000
 8007d84:	7fefffff 	.word	0x7fefffff
 8007d88:	2310      	movs	r3, #16
 8007d8a:	0022      	movs	r2, r4
 8007d8c:	401a      	ands	r2, r3
 8007d8e:	9208      	str	r2, [sp, #32]
 8007d90:	421c      	tst	r4, r3
 8007d92:	d001      	beq.n	8007d98 <_strtod_l+0x610>
 8007d94:	335a      	adds	r3, #90	; 0x5a
 8007d96:	9308      	str	r3, [sp, #32]
 8007d98:	0030      	movs	r0, r6
 8007d9a:	0039      	movs	r1, r7
 8007d9c:	2300      	movs	r3, #0
 8007d9e:	4dc5      	ldr	r5, [pc, #788]	; (80080b4 <_strtod_l+0x92c>)
 8007da0:	2201      	movs	r2, #1
 8007da2:	4214      	tst	r4, r2
 8007da4:	d004      	beq.n	8007db0 <_strtod_l+0x628>
 8007da6:	682a      	ldr	r2, [r5, #0]
 8007da8:	686b      	ldr	r3, [r5, #4]
 8007daa:	f7fa f8ed 	bl	8001f88 <__aeabi_dmul>
 8007dae:	2301      	movs	r3, #1
 8007db0:	1064      	asrs	r4, r4, #1
 8007db2:	3508      	adds	r5, #8
 8007db4:	2c00      	cmp	r4, #0
 8007db6:	d1f3      	bne.n	8007da0 <_strtod_l+0x618>
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d001      	beq.n	8007dc0 <_strtod_l+0x638>
 8007dbc:	0006      	movs	r6, r0
 8007dbe:	000f      	movs	r7, r1
 8007dc0:	9b08      	ldr	r3, [sp, #32]
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d00f      	beq.n	8007de6 <_strtod_l+0x65e>
 8007dc6:	236b      	movs	r3, #107	; 0x6b
 8007dc8:	007a      	lsls	r2, r7, #1
 8007dca:	0d52      	lsrs	r2, r2, #21
 8007dcc:	0039      	movs	r1, r7
 8007dce:	1a9b      	subs	r3, r3, r2
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	dd08      	ble.n	8007de6 <_strtod_l+0x65e>
 8007dd4:	2b1f      	cmp	r3, #31
 8007dd6:	dc00      	bgt.n	8007dda <_strtod_l+0x652>
 8007dd8:	e124      	b.n	8008024 <_strtod_l+0x89c>
 8007dda:	2600      	movs	r6, #0
 8007ddc:	2b34      	cmp	r3, #52	; 0x34
 8007dde:	dc00      	bgt.n	8007de2 <_strtod_l+0x65a>
 8007de0:	e119      	b.n	8008016 <_strtod_l+0x88e>
 8007de2:	27dc      	movs	r7, #220	; 0xdc
 8007de4:	04bf      	lsls	r7, r7, #18
 8007de6:	2200      	movs	r2, #0
 8007de8:	2300      	movs	r3, #0
 8007dea:	0030      	movs	r0, r6
 8007dec:	0039      	movs	r1, r7
 8007dee:	f7f8 fb33 	bl	8000458 <__aeabi_dcmpeq>
 8007df2:	2800      	cmp	r0, #0
 8007df4:	d1a0      	bne.n	8007d38 <_strtod_l+0x5b0>
 8007df6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007df8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007dfa:	9300      	str	r3, [sp, #0]
 8007dfc:	9910      	ldr	r1, [sp, #64]	; 0x40
 8007dfe:	9b06      	ldr	r3, [sp, #24]
 8007e00:	9805      	ldr	r0, [sp, #20]
 8007e02:	f001 fea3 	bl	8009b4c <__s2b>
 8007e06:	900b      	str	r0, [sp, #44]	; 0x2c
 8007e08:	2800      	cmp	r0, #0
 8007e0a:	d100      	bne.n	8007e0e <_strtod_l+0x686>
 8007e0c:	e721      	b.n	8007c52 <_strtod_l+0x4ca>
 8007e0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e10:	9907      	ldr	r1, [sp, #28]
 8007e12:	17da      	asrs	r2, r3, #31
 8007e14:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007e16:	1a5b      	subs	r3, r3, r1
 8007e18:	401a      	ands	r2, r3
 8007e1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e1c:	9215      	str	r2, [sp, #84]	; 0x54
 8007e1e:	43db      	mvns	r3, r3
 8007e20:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007e22:	17db      	asrs	r3, r3, #31
 8007e24:	401a      	ands	r2, r3
 8007e26:	2300      	movs	r3, #0
 8007e28:	921a      	str	r2, [sp, #104]	; 0x68
 8007e2a:	9306      	str	r3, [sp, #24]
 8007e2c:	9307      	str	r3, [sp, #28]
 8007e2e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007e30:	9805      	ldr	r0, [sp, #20]
 8007e32:	6859      	ldr	r1, [r3, #4]
 8007e34:	f001 fdde 	bl	80099f4 <_Balloc>
 8007e38:	9009      	str	r0, [sp, #36]	; 0x24
 8007e3a:	2800      	cmp	r0, #0
 8007e3c:	d100      	bne.n	8007e40 <_strtod_l+0x6b8>
 8007e3e:	e70d      	b.n	8007c5c <_strtod_l+0x4d4>
 8007e40:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007e42:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007e44:	691b      	ldr	r3, [r3, #16]
 8007e46:	310c      	adds	r1, #12
 8007e48:	1c9a      	adds	r2, r3, #2
 8007e4a:	0092      	lsls	r2, r2, #2
 8007e4c:	300c      	adds	r0, #12
 8007e4e:	930c      	str	r3, [sp, #48]	; 0x30
 8007e50:	f001 fdc7 	bl	80099e2 <memcpy>
 8007e54:	ab22      	add	r3, sp, #136	; 0x88
 8007e56:	9301      	str	r3, [sp, #4]
 8007e58:	ab21      	add	r3, sp, #132	; 0x84
 8007e5a:	9300      	str	r3, [sp, #0]
 8007e5c:	0032      	movs	r2, r6
 8007e5e:	003b      	movs	r3, r7
 8007e60:	9805      	ldr	r0, [sp, #20]
 8007e62:	9612      	str	r6, [sp, #72]	; 0x48
 8007e64:	9713      	str	r7, [sp, #76]	; 0x4c
 8007e66:	f002 f9bd 	bl	800a1e4 <__d2b>
 8007e6a:	9020      	str	r0, [sp, #128]	; 0x80
 8007e6c:	2800      	cmp	r0, #0
 8007e6e:	d100      	bne.n	8007e72 <_strtod_l+0x6ea>
 8007e70:	e6f4      	b.n	8007c5c <_strtod_l+0x4d4>
 8007e72:	2101      	movs	r1, #1
 8007e74:	9805      	ldr	r0, [sp, #20]
 8007e76:	f001 fefd 	bl	8009c74 <__i2b>
 8007e7a:	9007      	str	r0, [sp, #28]
 8007e7c:	2800      	cmp	r0, #0
 8007e7e:	d100      	bne.n	8007e82 <_strtod_l+0x6fa>
 8007e80:	e6ec      	b.n	8007c5c <_strtod_l+0x4d4>
 8007e82:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007e84:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007e86:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8007e88:	1ad4      	subs	r4, r2, r3
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	db01      	blt.n	8007e92 <_strtod_l+0x70a>
 8007e8e:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 8007e90:	195d      	adds	r5, r3, r5
 8007e92:	9908      	ldr	r1, [sp, #32]
 8007e94:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007e96:	1a5b      	subs	r3, r3, r1
 8007e98:	2136      	movs	r1, #54	; 0x36
 8007e9a:	189b      	adds	r3, r3, r2
 8007e9c:	1a8a      	subs	r2, r1, r2
 8007e9e:	4986      	ldr	r1, [pc, #536]	; (80080b8 <_strtod_l+0x930>)
 8007ea0:	2001      	movs	r0, #1
 8007ea2:	468c      	mov	ip, r1
 8007ea4:	2100      	movs	r1, #0
 8007ea6:	3b01      	subs	r3, #1
 8007ea8:	9110      	str	r1, [sp, #64]	; 0x40
 8007eaa:	9014      	str	r0, [sp, #80]	; 0x50
 8007eac:	4563      	cmp	r3, ip
 8007eae:	da07      	bge.n	8007ec0 <_strtod_l+0x738>
 8007eb0:	4661      	mov	r1, ip
 8007eb2:	1ac9      	subs	r1, r1, r3
 8007eb4:	1a52      	subs	r2, r2, r1
 8007eb6:	291f      	cmp	r1, #31
 8007eb8:	dd00      	ble.n	8007ebc <_strtod_l+0x734>
 8007eba:	e0b8      	b.n	800802e <_strtod_l+0x8a6>
 8007ebc:	4088      	lsls	r0, r1
 8007ebe:	9014      	str	r0, [sp, #80]	; 0x50
 8007ec0:	18ab      	adds	r3, r5, r2
 8007ec2:	930c      	str	r3, [sp, #48]	; 0x30
 8007ec4:	18a4      	adds	r4, r4, r2
 8007ec6:	9b08      	ldr	r3, [sp, #32]
 8007ec8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007eca:	191c      	adds	r4, r3, r4
 8007ecc:	002b      	movs	r3, r5
 8007ece:	4295      	cmp	r5, r2
 8007ed0:	dd00      	ble.n	8007ed4 <_strtod_l+0x74c>
 8007ed2:	0013      	movs	r3, r2
 8007ed4:	42a3      	cmp	r3, r4
 8007ed6:	dd00      	ble.n	8007eda <_strtod_l+0x752>
 8007ed8:	0023      	movs	r3, r4
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	dd04      	ble.n	8007ee8 <_strtod_l+0x760>
 8007ede:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007ee0:	1ae4      	subs	r4, r4, r3
 8007ee2:	1ad2      	subs	r2, r2, r3
 8007ee4:	920c      	str	r2, [sp, #48]	; 0x30
 8007ee6:	1aed      	subs	r5, r5, r3
 8007ee8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	dd17      	ble.n	8007f1e <_strtod_l+0x796>
 8007eee:	001a      	movs	r2, r3
 8007ef0:	9907      	ldr	r1, [sp, #28]
 8007ef2:	9805      	ldr	r0, [sp, #20]
 8007ef4:	f001 ff84 	bl	8009e00 <__pow5mult>
 8007ef8:	9007      	str	r0, [sp, #28]
 8007efa:	2800      	cmp	r0, #0
 8007efc:	d100      	bne.n	8007f00 <_strtod_l+0x778>
 8007efe:	e6ad      	b.n	8007c5c <_strtod_l+0x4d4>
 8007f00:	0001      	movs	r1, r0
 8007f02:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007f04:	9805      	ldr	r0, [sp, #20]
 8007f06:	f001 fecb 	bl	8009ca0 <__multiply>
 8007f0a:	900f      	str	r0, [sp, #60]	; 0x3c
 8007f0c:	2800      	cmp	r0, #0
 8007f0e:	d100      	bne.n	8007f12 <_strtod_l+0x78a>
 8007f10:	e6a4      	b.n	8007c5c <_strtod_l+0x4d4>
 8007f12:	9920      	ldr	r1, [sp, #128]	; 0x80
 8007f14:	9805      	ldr	r0, [sp, #20]
 8007f16:	f001 fdb1 	bl	8009a7c <_Bfree>
 8007f1a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007f1c:	9320      	str	r3, [sp, #128]	; 0x80
 8007f1e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	dd00      	ble.n	8007f26 <_strtod_l+0x79e>
 8007f24:	e089      	b.n	800803a <_strtod_l+0x8b2>
 8007f26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	dd08      	ble.n	8007f3e <_strtod_l+0x7b6>
 8007f2c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007f2e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007f30:	9805      	ldr	r0, [sp, #20]
 8007f32:	f001 ff65 	bl	8009e00 <__pow5mult>
 8007f36:	9009      	str	r0, [sp, #36]	; 0x24
 8007f38:	2800      	cmp	r0, #0
 8007f3a:	d100      	bne.n	8007f3e <_strtod_l+0x7b6>
 8007f3c:	e68e      	b.n	8007c5c <_strtod_l+0x4d4>
 8007f3e:	2c00      	cmp	r4, #0
 8007f40:	dd08      	ble.n	8007f54 <_strtod_l+0x7cc>
 8007f42:	0022      	movs	r2, r4
 8007f44:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007f46:	9805      	ldr	r0, [sp, #20]
 8007f48:	f001 ffb6 	bl	8009eb8 <__lshift>
 8007f4c:	9009      	str	r0, [sp, #36]	; 0x24
 8007f4e:	2800      	cmp	r0, #0
 8007f50:	d100      	bne.n	8007f54 <_strtod_l+0x7cc>
 8007f52:	e683      	b.n	8007c5c <_strtod_l+0x4d4>
 8007f54:	2d00      	cmp	r5, #0
 8007f56:	dd08      	ble.n	8007f6a <_strtod_l+0x7e2>
 8007f58:	002a      	movs	r2, r5
 8007f5a:	9907      	ldr	r1, [sp, #28]
 8007f5c:	9805      	ldr	r0, [sp, #20]
 8007f5e:	f001 ffab 	bl	8009eb8 <__lshift>
 8007f62:	9007      	str	r0, [sp, #28]
 8007f64:	2800      	cmp	r0, #0
 8007f66:	d100      	bne.n	8007f6a <_strtod_l+0x7e2>
 8007f68:	e678      	b.n	8007c5c <_strtod_l+0x4d4>
 8007f6a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007f6c:	9920      	ldr	r1, [sp, #128]	; 0x80
 8007f6e:	9805      	ldr	r0, [sp, #20]
 8007f70:	f002 f82c 	bl	8009fcc <__mdiff>
 8007f74:	9006      	str	r0, [sp, #24]
 8007f76:	2800      	cmp	r0, #0
 8007f78:	d100      	bne.n	8007f7c <_strtod_l+0x7f4>
 8007f7a:	e66f      	b.n	8007c5c <_strtod_l+0x4d4>
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	68c3      	ldr	r3, [r0, #12]
 8007f80:	9907      	ldr	r1, [sp, #28]
 8007f82:	60c2      	str	r2, [r0, #12]
 8007f84:	930f      	str	r3, [sp, #60]	; 0x3c
 8007f86:	f002 f805 	bl	8009f94 <__mcmp>
 8007f8a:	2800      	cmp	r0, #0
 8007f8c:	da5f      	bge.n	800804e <_strtod_l+0x8c6>
 8007f8e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007f90:	4333      	orrs	r3, r6
 8007f92:	d000      	beq.n	8007f96 <_strtod_l+0x80e>
 8007f94:	e08a      	b.n	80080ac <_strtod_l+0x924>
 8007f96:	033b      	lsls	r3, r7, #12
 8007f98:	d000      	beq.n	8007f9c <_strtod_l+0x814>
 8007f9a:	e087      	b.n	80080ac <_strtod_l+0x924>
 8007f9c:	22d6      	movs	r2, #214	; 0xd6
 8007f9e:	4b47      	ldr	r3, [pc, #284]	; (80080bc <_strtod_l+0x934>)
 8007fa0:	04d2      	lsls	r2, r2, #19
 8007fa2:	403b      	ands	r3, r7
 8007fa4:	4293      	cmp	r3, r2
 8007fa6:	d800      	bhi.n	8007faa <_strtod_l+0x822>
 8007fa8:	e080      	b.n	80080ac <_strtod_l+0x924>
 8007faa:	9b06      	ldr	r3, [sp, #24]
 8007fac:	695b      	ldr	r3, [r3, #20]
 8007fae:	930a      	str	r3, [sp, #40]	; 0x28
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d104      	bne.n	8007fbe <_strtod_l+0x836>
 8007fb4:	9b06      	ldr	r3, [sp, #24]
 8007fb6:	691b      	ldr	r3, [r3, #16]
 8007fb8:	930a      	str	r3, [sp, #40]	; 0x28
 8007fba:	2b01      	cmp	r3, #1
 8007fbc:	dd76      	ble.n	80080ac <_strtod_l+0x924>
 8007fbe:	9906      	ldr	r1, [sp, #24]
 8007fc0:	2201      	movs	r2, #1
 8007fc2:	9805      	ldr	r0, [sp, #20]
 8007fc4:	f001 ff78 	bl	8009eb8 <__lshift>
 8007fc8:	9907      	ldr	r1, [sp, #28]
 8007fca:	9006      	str	r0, [sp, #24]
 8007fcc:	f001 ffe2 	bl	8009f94 <__mcmp>
 8007fd0:	2800      	cmp	r0, #0
 8007fd2:	dd6b      	ble.n	80080ac <_strtod_l+0x924>
 8007fd4:	9908      	ldr	r1, [sp, #32]
 8007fd6:	003b      	movs	r3, r7
 8007fd8:	4a38      	ldr	r2, [pc, #224]	; (80080bc <_strtod_l+0x934>)
 8007fda:	2900      	cmp	r1, #0
 8007fdc:	d100      	bne.n	8007fe0 <_strtod_l+0x858>
 8007fde:	e092      	b.n	8008106 <_strtod_l+0x97e>
 8007fe0:	0011      	movs	r1, r2
 8007fe2:	20d6      	movs	r0, #214	; 0xd6
 8007fe4:	4039      	ands	r1, r7
 8007fe6:	04c0      	lsls	r0, r0, #19
 8007fe8:	4281      	cmp	r1, r0
 8007fea:	dd00      	ble.n	8007fee <_strtod_l+0x866>
 8007fec:	e08b      	b.n	8008106 <_strtod_l+0x97e>
 8007fee:	23dc      	movs	r3, #220	; 0xdc
 8007ff0:	049b      	lsls	r3, r3, #18
 8007ff2:	4299      	cmp	r1, r3
 8007ff4:	dc00      	bgt.n	8007ff8 <_strtod_l+0x870>
 8007ff6:	e6a4      	b.n	8007d42 <_strtod_l+0x5ba>
 8007ff8:	0030      	movs	r0, r6
 8007ffa:	0039      	movs	r1, r7
 8007ffc:	2200      	movs	r2, #0
 8007ffe:	4b30      	ldr	r3, [pc, #192]	; (80080c0 <_strtod_l+0x938>)
 8008000:	f7f9 ffc2 	bl	8001f88 <__aeabi_dmul>
 8008004:	0006      	movs	r6, r0
 8008006:	000f      	movs	r7, r1
 8008008:	4308      	orrs	r0, r1
 800800a:	d000      	beq.n	800800e <_strtod_l+0x886>
 800800c:	e62f      	b.n	8007c6e <_strtod_l+0x4e6>
 800800e:	2322      	movs	r3, #34	; 0x22
 8008010:	9a05      	ldr	r2, [sp, #20]
 8008012:	6013      	str	r3, [r2, #0]
 8008014:	e62b      	b.n	8007c6e <_strtod_l+0x4e6>
 8008016:	234b      	movs	r3, #75	; 0x4b
 8008018:	1a9a      	subs	r2, r3, r2
 800801a:	3b4c      	subs	r3, #76	; 0x4c
 800801c:	4093      	lsls	r3, r2
 800801e:	4019      	ands	r1, r3
 8008020:	000f      	movs	r7, r1
 8008022:	e6e0      	b.n	8007de6 <_strtod_l+0x65e>
 8008024:	2201      	movs	r2, #1
 8008026:	4252      	negs	r2, r2
 8008028:	409a      	lsls	r2, r3
 800802a:	4016      	ands	r6, r2
 800802c:	e6db      	b.n	8007de6 <_strtod_l+0x65e>
 800802e:	4925      	ldr	r1, [pc, #148]	; (80080c4 <_strtod_l+0x93c>)
 8008030:	1acb      	subs	r3, r1, r3
 8008032:	0001      	movs	r1, r0
 8008034:	4099      	lsls	r1, r3
 8008036:	9110      	str	r1, [sp, #64]	; 0x40
 8008038:	e741      	b.n	8007ebe <_strtod_l+0x736>
 800803a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800803c:	9920      	ldr	r1, [sp, #128]	; 0x80
 800803e:	9805      	ldr	r0, [sp, #20]
 8008040:	f001 ff3a 	bl	8009eb8 <__lshift>
 8008044:	9020      	str	r0, [sp, #128]	; 0x80
 8008046:	2800      	cmp	r0, #0
 8008048:	d000      	beq.n	800804c <_strtod_l+0x8c4>
 800804a:	e76c      	b.n	8007f26 <_strtod_l+0x79e>
 800804c:	e606      	b.n	8007c5c <_strtod_l+0x4d4>
 800804e:	970c      	str	r7, [sp, #48]	; 0x30
 8008050:	2800      	cmp	r0, #0
 8008052:	d176      	bne.n	8008142 <_strtod_l+0x9ba>
 8008054:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008056:	033b      	lsls	r3, r7, #12
 8008058:	0b1b      	lsrs	r3, r3, #12
 800805a:	2a00      	cmp	r2, #0
 800805c:	d038      	beq.n	80080d0 <_strtod_l+0x948>
 800805e:	4a1a      	ldr	r2, [pc, #104]	; (80080c8 <_strtod_l+0x940>)
 8008060:	4293      	cmp	r3, r2
 8008062:	d138      	bne.n	80080d6 <_strtod_l+0x94e>
 8008064:	2201      	movs	r2, #1
 8008066:	9b08      	ldr	r3, [sp, #32]
 8008068:	4252      	negs	r2, r2
 800806a:	0031      	movs	r1, r6
 800806c:	0010      	movs	r0, r2
 800806e:	2b00      	cmp	r3, #0
 8008070:	d00b      	beq.n	800808a <_strtod_l+0x902>
 8008072:	24d4      	movs	r4, #212	; 0xd4
 8008074:	4b11      	ldr	r3, [pc, #68]	; (80080bc <_strtod_l+0x934>)
 8008076:	0010      	movs	r0, r2
 8008078:	403b      	ands	r3, r7
 800807a:	04e4      	lsls	r4, r4, #19
 800807c:	42a3      	cmp	r3, r4
 800807e:	d804      	bhi.n	800808a <_strtod_l+0x902>
 8008080:	306c      	adds	r0, #108	; 0x6c
 8008082:	0d1b      	lsrs	r3, r3, #20
 8008084:	1ac3      	subs	r3, r0, r3
 8008086:	409a      	lsls	r2, r3
 8008088:	0010      	movs	r0, r2
 800808a:	4281      	cmp	r1, r0
 800808c:	d123      	bne.n	80080d6 <_strtod_l+0x94e>
 800808e:	4b0f      	ldr	r3, [pc, #60]	; (80080cc <_strtod_l+0x944>)
 8008090:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008092:	429a      	cmp	r2, r3
 8008094:	d102      	bne.n	800809c <_strtod_l+0x914>
 8008096:	1c4b      	adds	r3, r1, #1
 8008098:	d100      	bne.n	800809c <_strtod_l+0x914>
 800809a:	e5df      	b.n	8007c5c <_strtod_l+0x4d4>
 800809c:	4b07      	ldr	r3, [pc, #28]	; (80080bc <_strtod_l+0x934>)
 800809e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80080a0:	2600      	movs	r6, #0
 80080a2:	401a      	ands	r2, r3
 80080a4:	0013      	movs	r3, r2
 80080a6:	2280      	movs	r2, #128	; 0x80
 80080a8:	0352      	lsls	r2, r2, #13
 80080aa:	189f      	adds	r7, r3, r2
 80080ac:	9b08      	ldr	r3, [sp, #32]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d1a2      	bne.n	8007ff8 <_strtod_l+0x870>
 80080b2:	e5dc      	b.n	8007c6e <_strtod_l+0x4e6>
 80080b4:	0800bf98 	.word	0x0800bf98
 80080b8:	fffffc02 	.word	0xfffffc02
 80080bc:	7ff00000 	.word	0x7ff00000
 80080c0:	39500000 	.word	0x39500000
 80080c4:	fffffbe2 	.word	0xfffffbe2
 80080c8:	000fffff 	.word	0x000fffff
 80080cc:	7fefffff 	.word	0x7fefffff
 80080d0:	4333      	orrs	r3, r6
 80080d2:	d100      	bne.n	80080d6 <_strtod_l+0x94e>
 80080d4:	e77e      	b.n	8007fd4 <_strtod_l+0x84c>
 80080d6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d01d      	beq.n	8008118 <_strtod_l+0x990>
 80080dc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80080de:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80080e0:	4213      	tst	r3, r2
 80080e2:	d0e3      	beq.n	80080ac <_strtod_l+0x924>
 80080e4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80080e6:	0030      	movs	r0, r6
 80080e8:	0039      	movs	r1, r7
 80080ea:	9a08      	ldr	r2, [sp, #32]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d017      	beq.n	8008120 <_strtod_l+0x998>
 80080f0:	f7ff fb32 	bl	8007758 <sulp>
 80080f4:	0002      	movs	r2, r0
 80080f6:	000b      	movs	r3, r1
 80080f8:	9812      	ldr	r0, [sp, #72]	; 0x48
 80080fa:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80080fc:	f7f9 f806 	bl	800110c <__aeabi_dadd>
 8008100:	0006      	movs	r6, r0
 8008102:	000f      	movs	r7, r1
 8008104:	e7d2      	b.n	80080ac <_strtod_l+0x924>
 8008106:	2601      	movs	r6, #1
 8008108:	4013      	ands	r3, r2
 800810a:	4a99      	ldr	r2, [pc, #612]	; (8008370 <_strtod_l+0xbe8>)
 800810c:	4276      	negs	r6, r6
 800810e:	189b      	adds	r3, r3, r2
 8008110:	4a98      	ldr	r2, [pc, #608]	; (8008374 <_strtod_l+0xbec>)
 8008112:	431a      	orrs	r2, r3
 8008114:	0017      	movs	r7, r2
 8008116:	e7c9      	b.n	80080ac <_strtod_l+0x924>
 8008118:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800811a:	4233      	tst	r3, r6
 800811c:	d0c6      	beq.n	80080ac <_strtod_l+0x924>
 800811e:	e7e1      	b.n	80080e4 <_strtod_l+0x95c>
 8008120:	f7ff fb1a 	bl	8007758 <sulp>
 8008124:	0002      	movs	r2, r0
 8008126:	000b      	movs	r3, r1
 8008128:	9812      	ldr	r0, [sp, #72]	; 0x48
 800812a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800812c:	f7fa f998 	bl	8002460 <__aeabi_dsub>
 8008130:	2200      	movs	r2, #0
 8008132:	2300      	movs	r3, #0
 8008134:	0006      	movs	r6, r0
 8008136:	000f      	movs	r7, r1
 8008138:	f7f8 f98e 	bl	8000458 <__aeabi_dcmpeq>
 800813c:	2800      	cmp	r0, #0
 800813e:	d0b5      	beq.n	80080ac <_strtod_l+0x924>
 8008140:	e5ff      	b.n	8007d42 <_strtod_l+0x5ba>
 8008142:	9907      	ldr	r1, [sp, #28]
 8008144:	9806      	ldr	r0, [sp, #24]
 8008146:	f002 f8b1 	bl	800a2ac <__ratio>
 800814a:	2380      	movs	r3, #128	; 0x80
 800814c:	2200      	movs	r2, #0
 800814e:	05db      	lsls	r3, r3, #23
 8008150:	0004      	movs	r4, r0
 8008152:	000d      	movs	r5, r1
 8008154:	f7f8 f990 	bl	8000478 <__aeabi_dcmple>
 8008158:	2800      	cmp	r0, #0
 800815a:	d075      	beq.n	8008248 <_strtod_l+0xac0>
 800815c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800815e:	2b00      	cmp	r3, #0
 8008160:	d047      	beq.n	80081f2 <_strtod_l+0xa6a>
 8008162:	2300      	movs	r3, #0
 8008164:	4c84      	ldr	r4, [pc, #528]	; (8008378 <_strtod_l+0xbf0>)
 8008166:	2500      	movs	r5, #0
 8008168:	9310      	str	r3, [sp, #64]	; 0x40
 800816a:	9411      	str	r4, [sp, #68]	; 0x44
 800816c:	4c82      	ldr	r4, [pc, #520]	; (8008378 <_strtod_l+0xbf0>)
 800816e:	4a83      	ldr	r2, [pc, #524]	; (800837c <_strtod_l+0xbf4>)
 8008170:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008172:	4013      	ands	r3, r2
 8008174:	9314      	str	r3, [sp, #80]	; 0x50
 8008176:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008178:	4b81      	ldr	r3, [pc, #516]	; (8008380 <_strtod_l+0xbf8>)
 800817a:	429a      	cmp	r2, r3
 800817c:	d000      	beq.n	8008180 <_strtod_l+0x9f8>
 800817e:	e0ac      	b.n	80082da <_strtod_l+0xb52>
 8008180:	4a80      	ldr	r2, [pc, #512]	; (8008384 <_strtod_l+0xbfc>)
 8008182:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008184:	4694      	mov	ip, r2
 8008186:	4463      	add	r3, ip
 8008188:	001f      	movs	r7, r3
 800818a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800818c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800818e:	0030      	movs	r0, r6
 8008190:	0039      	movs	r1, r7
 8008192:	920c      	str	r2, [sp, #48]	; 0x30
 8008194:	930d      	str	r3, [sp, #52]	; 0x34
 8008196:	f001 ffb1 	bl	800a0fc <__ulp>
 800819a:	0002      	movs	r2, r0
 800819c:	000b      	movs	r3, r1
 800819e:	980c      	ldr	r0, [sp, #48]	; 0x30
 80081a0:	990d      	ldr	r1, [sp, #52]	; 0x34
 80081a2:	f7f9 fef1 	bl	8001f88 <__aeabi_dmul>
 80081a6:	0032      	movs	r2, r6
 80081a8:	003b      	movs	r3, r7
 80081aa:	f7f8 ffaf 	bl	800110c <__aeabi_dadd>
 80081ae:	4a73      	ldr	r2, [pc, #460]	; (800837c <_strtod_l+0xbf4>)
 80081b0:	4b75      	ldr	r3, [pc, #468]	; (8008388 <_strtod_l+0xc00>)
 80081b2:	0006      	movs	r6, r0
 80081b4:	400a      	ands	r2, r1
 80081b6:	429a      	cmp	r2, r3
 80081b8:	d95e      	bls.n	8008278 <_strtod_l+0xaf0>
 80081ba:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80081bc:	4b73      	ldr	r3, [pc, #460]	; (800838c <_strtod_l+0xc04>)
 80081be:	429a      	cmp	r2, r3
 80081c0:	d103      	bne.n	80081ca <_strtod_l+0xa42>
 80081c2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80081c4:	3301      	adds	r3, #1
 80081c6:	d100      	bne.n	80081ca <_strtod_l+0xa42>
 80081c8:	e548      	b.n	8007c5c <_strtod_l+0x4d4>
 80081ca:	2601      	movs	r6, #1
 80081cc:	4f6f      	ldr	r7, [pc, #444]	; (800838c <_strtod_l+0xc04>)
 80081ce:	4276      	negs	r6, r6
 80081d0:	9920      	ldr	r1, [sp, #128]	; 0x80
 80081d2:	9805      	ldr	r0, [sp, #20]
 80081d4:	f001 fc52 	bl	8009a7c <_Bfree>
 80081d8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80081da:	9805      	ldr	r0, [sp, #20]
 80081dc:	f001 fc4e 	bl	8009a7c <_Bfree>
 80081e0:	9907      	ldr	r1, [sp, #28]
 80081e2:	9805      	ldr	r0, [sp, #20]
 80081e4:	f001 fc4a 	bl	8009a7c <_Bfree>
 80081e8:	9906      	ldr	r1, [sp, #24]
 80081ea:	9805      	ldr	r0, [sp, #20]
 80081ec:	f001 fc46 	bl	8009a7c <_Bfree>
 80081f0:	e61d      	b.n	8007e2e <_strtod_l+0x6a6>
 80081f2:	2e00      	cmp	r6, #0
 80081f4:	d11c      	bne.n	8008230 <_strtod_l+0xaa8>
 80081f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80081f8:	031b      	lsls	r3, r3, #12
 80081fa:	d11f      	bne.n	800823c <_strtod_l+0xab4>
 80081fc:	2200      	movs	r2, #0
 80081fe:	0020      	movs	r0, r4
 8008200:	0029      	movs	r1, r5
 8008202:	4b5d      	ldr	r3, [pc, #372]	; (8008378 <_strtod_l+0xbf0>)
 8008204:	f7f8 f92e 	bl	8000464 <__aeabi_dcmplt>
 8008208:	2800      	cmp	r0, #0
 800820a:	d11a      	bne.n	8008242 <_strtod_l+0xaba>
 800820c:	0020      	movs	r0, r4
 800820e:	0029      	movs	r1, r5
 8008210:	2200      	movs	r2, #0
 8008212:	4b5f      	ldr	r3, [pc, #380]	; (8008390 <_strtod_l+0xc08>)
 8008214:	f7f9 feb8 	bl	8001f88 <__aeabi_dmul>
 8008218:	0005      	movs	r5, r0
 800821a:	000c      	movs	r4, r1
 800821c:	2380      	movs	r3, #128	; 0x80
 800821e:	061b      	lsls	r3, r3, #24
 8008220:	18e3      	adds	r3, r4, r3
 8008222:	951c      	str	r5, [sp, #112]	; 0x70
 8008224:	931d      	str	r3, [sp, #116]	; 0x74
 8008226:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8008228:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800822a:	9210      	str	r2, [sp, #64]	; 0x40
 800822c:	9311      	str	r3, [sp, #68]	; 0x44
 800822e:	e79e      	b.n	800816e <_strtod_l+0x9e6>
 8008230:	2e01      	cmp	r6, #1
 8008232:	d103      	bne.n	800823c <_strtod_l+0xab4>
 8008234:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008236:	2b00      	cmp	r3, #0
 8008238:	d100      	bne.n	800823c <_strtod_l+0xab4>
 800823a:	e582      	b.n	8007d42 <_strtod_l+0x5ba>
 800823c:	2300      	movs	r3, #0
 800823e:	4c55      	ldr	r4, [pc, #340]	; (8008394 <_strtod_l+0xc0c>)
 8008240:	e791      	b.n	8008166 <_strtod_l+0x9de>
 8008242:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008244:	4c52      	ldr	r4, [pc, #328]	; (8008390 <_strtod_l+0xc08>)
 8008246:	e7e9      	b.n	800821c <_strtod_l+0xa94>
 8008248:	2200      	movs	r2, #0
 800824a:	0020      	movs	r0, r4
 800824c:	0029      	movs	r1, r5
 800824e:	4b50      	ldr	r3, [pc, #320]	; (8008390 <_strtod_l+0xc08>)
 8008250:	f7f9 fe9a 	bl	8001f88 <__aeabi_dmul>
 8008254:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008256:	0005      	movs	r5, r0
 8008258:	000b      	movs	r3, r1
 800825a:	000c      	movs	r4, r1
 800825c:	2a00      	cmp	r2, #0
 800825e:	d107      	bne.n	8008270 <_strtod_l+0xae8>
 8008260:	2280      	movs	r2, #128	; 0x80
 8008262:	0612      	lsls	r2, r2, #24
 8008264:	188b      	adds	r3, r1, r2
 8008266:	9016      	str	r0, [sp, #88]	; 0x58
 8008268:	9317      	str	r3, [sp, #92]	; 0x5c
 800826a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800826c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800826e:	e7dc      	b.n	800822a <_strtod_l+0xaa2>
 8008270:	0002      	movs	r2, r0
 8008272:	9216      	str	r2, [sp, #88]	; 0x58
 8008274:	9317      	str	r3, [sp, #92]	; 0x5c
 8008276:	e7f8      	b.n	800826a <_strtod_l+0xae2>
 8008278:	23d4      	movs	r3, #212	; 0xd4
 800827a:	049b      	lsls	r3, r3, #18
 800827c:	18cf      	adds	r7, r1, r3
 800827e:	9b08      	ldr	r3, [sp, #32]
 8008280:	2b00      	cmp	r3, #0
 8008282:	d1a5      	bne.n	80081d0 <_strtod_l+0xa48>
 8008284:	4b3d      	ldr	r3, [pc, #244]	; (800837c <_strtod_l+0xbf4>)
 8008286:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008288:	403b      	ands	r3, r7
 800828a:	429a      	cmp	r2, r3
 800828c:	d1a0      	bne.n	80081d0 <_strtod_l+0xa48>
 800828e:	0028      	movs	r0, r5
 8008290:	0021      	movs	r1, r4
 8008292:	f7f8 f967 	bl	8000564 <__aeabi_d2lz>
 8008296:	f7f8 f9a1 	bl	80005dc <__aeabi_l2d>
 800829a:	0002      	movs	r2, r0
 800829c:	000b      	movs	r3, r1
 800829e:	0028      	movs	r0, r5
 80082a0:	0021      	movs	r1, r4
 80082a2:	f7fa f8dd 	bl	8002460 <__aeabi_dsub>
 80082a6:	033b      	lsls	r3, r7, #12
 80082a8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80082aa:	0b1b      	lsrs	r3, r3, #12
 80082ac:	4333      	orrs	r3, r6
 80082ae:	4313      	orrs	r3, r2
 80082b0:	0004      	movs	r4, r0
 80082b2:	000d      	movs	r5, r1
 80082b4:	4a38      	ldr	r2, [pc, #224]	; (8008398 <_strtod_l+0xc10>)
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d055      	beq.n	8008366 <_strtod_l+0xbde>
 80082ba:	4b38      	ldr	r3, [pc, #224]	; (800839c <_strtod_l+0xc14>)
 80082bc:	f7f8 f8d2 	bl	8000464 <__aeabi_dcmplt>
 80082c0:	2800      	cmp	r0, #0
 80082c2:	d000      	beq.n	80082c6 <_strtod_l+0xb3e>
 80082c4:	e4d3      	b.n	8007c6e <_strtod_l+0x4e6>
 80082c6:	0020      	movs	r0, r4
 80082c8:	0029      	movs	r1, r5
 80082ca:	4a35      	ldr	r2, [pc, #212]	; (80083a0 <_strtod_l+0xc18>)
 80082cc:	4b30      	ldr	r3, [pc, #192]	; (8008390 <_strtod_l+0xc08>)
 80082ce:	f7f8 f8dd 	bl	800048c <__aeabi_dcmpgt>
 80082d2:	2800      	cmp	r0, #0
 80082d4:	d100      	bne.n	80082d8 <_strtod_l+0xb50>
 80082d6:	e77b      	b.n	80081d0 <_strtod_l+0xa48>
 80082d8:	e4c9      	b.n	8007c6e <_strtod_l+0x4e6>
 80082da:	9b08      	ldr	r3, [sp, #32]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d02b      	beq.n	8008338 <_strtod_l+0xbb0>
 80082e0:	23d4      	movs	r3, #212	; 0xd4
 80082e2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80082e4:	04db      	lsls	r3, r3, #19
 80082e6:	429a      	cmp	r2, r3
 80082e8:	d826      	bhi.n	8008338 <_strtod_l+0xbb0>
 80082ea:	0028      	movs	r0, r5
 80082ec:	0021      	movs	r1, r4
 80082ee:	4a2d      	ldr	r2, [pc, #180]	; (80083a4 <_strtod_l+0xc1c>)
 80082f0:	4b2d      	ldr	r3, [pc, #180]	; (80083a8 <_strtod_l+0xc20>)
 80082f2:	f7f8 f8c1 	bl	8000478 <__aeabi_dcmple>
 80082f6:	2800      	cmp	r0, #0
 80082f8:	d017      	beq.n	800832a <_strtod_l+0xba2>
 80082fa:	0028      	movs	r0, r5
 80082fc:	0021      	movs	r1, r4
 80082fe:	f7f8 f913 	bl	8000528 <__aeabi_d2uiz>
 8008302:	2800      	cmp	r0, #0
 8008304:	d100      	bne.n	8008308 <_strtod_l+0xb80>
 8008306:	3001      	adds	r0, #1
 8008308:	f7fa fcc0 	bl	8002c8c <__aeabi_ui2d>
 800830c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800830e:	0005      	movs	r5, r0
 8008310:	000b      	movs	r3, r1
 8008312:	000c      	movs	r4, r1
 8008314:	2a00      	cmp	r2, #0
 8008316:	d122      	bne.n	800835e <_strtod_l+0xbd6>
 8008318:	2280      	movs	r2, #128	; 0x80
 800831a:	0612      	lsls	r2, r2, #24
 800831c:	188b      	adds	r3, r1, r2
 800831e:	9018      	str	r0, [sp, #96]	; 0x60
 8008320:	9319      	str	r3, [sp, #100]	; 0x64
 8008322:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008324:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008326:	9210      	str	r2, [sp, #64]	; 0x40
 8008328:	9311      	str	r3, [sp, #68]	; 0x44
 800832a:	22d6      	movs	r2, #214	; 0xd6
 800832c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800832e:	04d2      	lsls	r2, r2, #19
 8008330:	189b      	adds	r3, r3, r2
 8008332:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008334:	1a9b      	subs	r3, r3, r2
 8008336:	9311      	str	r3, [sp, #68]	; 0x44
 8008338:	9812      	ldr	r0, [sp, #72]	; 0x48
 800833a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800833c:	9e10      	ldr	r6, [sp, #64]	; 0x40
 800833e:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8008340:	f001 fedc 	bl	800a0fc <__ulp>
 8008344:	0002      	movs	r2, r0
 8008346:	000b      	movs	r3, r1
 8008348:	0030      	movs	r0, r6
 800834a:	0039      	movs	r1, r7
 800834c:	f7f9 fe1c 	bl	8001f88 <__aeabi_dmul>
 8008350:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008352:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008354:	f7f8 feda 	bl	800110c <__aeabi_dadd>
 8008358:	0006      	movs	r6, r0
 800835a:	000f      	movs	r7, r1
 800835c:	e78f      	b.n	800827e <_strtod_l+0xaf6>
 800835e:	0002      	movs	r2, r0
 8008360:	9218      	str	r2, [sp, #96]	; 0x60
 8008362:	9319      	str	r3, [sp, #100]	; 0x64
 8008364:	e7dd      	b.n	8008322 <_strtod_l+0xb9a>
 8008366:	4b11      	ldr	r3, [pc, #68]	; (80083ac <_strtod_l+0xc24>)
 8008368:	f7f8 f87c 	bl	8000464 <__aeabi_dcmplt>
 800836c:	e7b1      	b.n	80082d2 <_strtod_l+0xb4a>
 800836e:	46c0      	nop			; (mov r8, r8)
 8008370:	fff00000 	.word	0xfff00000
 8008374:	000fffff 	.word	0x000fffff
 8008378:	3ff00000 	.word	0x3ff00000
 800837c:	7ff00000 	.word	0x7ff00000
 8008380:	7fe00000 	.word	0x7fe00000
 8008384:	fcb00000 	.word	0xfcb00000
 8008388:	7c9fffff 	.word	0x7c9fffff
 800838c:	7fefffff 	.word	0x7fefffff
 8008390:	3fe00000 	.word	0x3fe00000
 8008394:	bff00000 	.word	0xbff00000
 8008398:	94a03595 	.word	0x94a03595
 800839c:	3fdfffff 	.word	0x3fdfffff
 80083a0:	35afe535 	.word	0x35afe535
 80083a4:	ffc00000 	.word	0xffc00000
 80083a8:	41dfffff 	.word	0x41dfffff
 80083ac:	3fcfffff 	.word	0x3fcfffff

080083b0 <_strtod_r>:
 80083b0:	b510      	push	{r4, lr}
 80083b2:	4b02      	ldr	r3, [pc, #8]	; (80083bc <_strtod_r+0xc>)
 80083b4:	f7ff f9e8 	bl	8007788 <_strtod_l>
 80083b8:	bd10      	pop	{r4, pc}
 80083ba:	46c0      	nop			; (mov r8, r8)
 80083bc:	200000bc 	.word	0x200000bc

080083c0 <_strtol_l.constprop.0>:
 80083c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80083c2:	b087      	sub	sp, #28
 80083c4:	001e      	movs	r6, r3
 80083c6:	9005      	str	r0, [sp, #20]
 80083c8:	9101      	str	r1, [sp, #4]
 80083ca:	9202      	str	r2, [sp, #8]
 80083cc:	2b01      	cmp	r3, #1
 80083ce:	d045      	beq.n	800845c <_strtol_l.constprop.0+0x9c>
 80083d0:	000b      	movs	r3, r1
 80083d2:	2e24      	cmp	r6, #36	; 0x24
 80083d4:	d842      	bhi.n	800845c <_strtol_l.constprop.0+0x9c>
 80083d6:	4a3f      	ldr	r2, [pc, #252]	; (80084d4 <_strtol_l.constprop.0+0x114>)
 80083d8:	2108      	movs	r1, #8
 80083da:	4694      	mov	ip, r2
 80083dc:	001a      	movs	r2, r3
 80083de:	4660      	mov	r0, ip
 80083e0:	7814      	ldrb	r4, [r2, #0]
 80083e2:	3301      	adds	r3, #1
 80083e4:	5d00      	ldrb	r0, [r0, r4]
 80083e6:	001d      	movs	r5, r3
 80083e8:	0007      	movs	r7, r0
 80083ea:	400f      	ands	r7, r1
 80083ec:	4208      	tst	r0, r1
 80083ee:	d1f5      	bne.n	80083dc <_strtol_l.constprop.0+0x1c>
 80083f0:	2c2d      	cmp	r4, #45	; 0x2d
 80083f2:	d13a      	bne.n	800846a <_strtol_l.constprop.0+0xaa>
 80083f4:	2701      	movs	r7, #1
 80083f6:	781c      	ldrb	r4, [r3, #0]
 80083f8:	1c95      	adds	r5, r2, #2
 80083fa:	2e00      	cmp	r6, #0
 80083fc:	d065      	beq.n	80084ca <_strtol_l.constprop.0+0x10a>
 80083fe:	2e10      	cmp	r6, #16
 8008400:	d109      	bne.n	8008416 <_strtol_l.constprop.0+0x56>
 8008402:	2c30      	cmp	r4, #48	; 0x30
 8008404:	d107      	bne.n	8008416 <_strtol_l.constprop.0+0x56>
 8008406:	2220      	movs	r2, #32
 8008408:	782b      	ldrb	r3, [r5, #0]
 800840a:	4393      	bics	r3, r2
 800840c:	2b58      	cmp	r3, #88	; 0x58
 800840e:	d157      	bne.n	80084c0 <_strtol_l.constprop.0+0x100>
 8008410:	2610      	movs	r6, #16
 8008412:	786c      	ldrb	r4, [r5, #1]
 8008414:	3502      	adds	r5, #2
 8008416:	4b30      	ldr	r3, [pc, #192]	; (80084d8 <_strtol_l.constprop.0+0x118>)
 8008418:	0031      	movs	r1, r6
 800841a:	18fb      	adds	r3, r7, r3
 800841c:	0018      	movs	r0, r3
 800841e:	9303      	str	r3, [sp, #12]
 8008420:	f7f7 ff1a 	bl	8000258 <__aeabi_uidivmod>
 8008424:	2300      	movs	r3, #0
 8008426:	2201      	movs	r2, #1
 8008428:	4684      	mov	ip, r0
 800842a:	0018      	movs	r0, r3
 800842c:	9104      	str	r1, [sp, #16]
 800842e:	4252      	negs	r2, r2
 8008430:	0021      	movs	r1, r4
 8008432:	3930      	subs	r1, #48	; 0x30
 8008434:	2909      	cmp	r1, #9
 8008436:	d81d      	bhi.n	8008474 <_strtol_l.constprop.0+0xb4>
 8008438:	000c      	movs	r4, r1
 800843a:	42a6      	cmp	r6, r4
 800843c:	dd28      	ble.n	8008490 <_strtol_l.constprop.0+0xd0>
 800843e:	2b00      	cmp	r3, #0
 8008440:	db24      	blt.n	800848c <_strtol_l.constprop.0+0xcc>
 8008442:	0013      	movs	r3, r2
 8008444:	4584      	cmp	ip, r0
 8008446:	d306      	bcc.n	8008456 <_strtol_l.constprop.0+0x96>
 8008448:	d102      	bne.n	8008450 <_strtol_l.constprop.0+0x90>
 800844a:	9904      	ldr	r1, [sp, #16]
 800844c:	42a1      	cmp	r1, r4
 800844e:	db02      	blt.n	8008456 <_strtol_l.constprop.0+0x96>
 8008450:	2301      	movs	r3, #1
 8008452:	4370      	muls	r0, r6
 8008454:	1820      	adds	r0, r4, r0
 8008456:	782c      	ldrb	r4, [r5, #0]
 8008458:	3501      	adds	r5, #1
 800845a:	e7e9      	b.n	8008430 <_strtol_l.constprop.0+0x70>
 800845c:	f7fe fa24 	bl	80068a8 <__errno>
 8008460:	2316      	movs	r3, #22
 8008462:	6003      	str	r3, [r0, #0]
 8008464:	2000      	movs	r0, #0
 8008466:	b007      	add	sp, #28
 8008468:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800846a:	2c2b      	cmp	r4, #43	; 0x2b
 800846c:	d1c5      	bne.n	80083fa <_strtol_l.constprop.0+0x3a>
 800846e:	781c      	ldrb	r4, [r3, #0]
 8008470:	1c95      	adds	r5, r2, #2
 8008472:	e7c2      	b.n	80083fa <_strtol_l.constprop.0+0x3a>
 8008474:	0021      	movs	r1, r4
 8008476:	3941      	subs	r1, #65	; 0x41
 8008478:	2919      	cmp	r1, #25
 800847a:	d801      	bhi.n	8008480 <_strtol_l.constprop.0+0xc0>
 800847c:	3c37      	subs	r4, #55	; 0x37
 800847e:	e7dc      	b.n	800843a <_strtol_l.constprop.0+0x7a>
 8008480:	0021      	movs	r1, r4
 8008482:	3961      	subs	r1, #97	; 0x61
 8008484:	2919      	cmp	r1, #25
 8008486:	d803      	bhi.n	8008490 <_strtol_l.constprop.0+0xd0>
 8008488:	3c57      	subs	r4, #87	; 0x57
 800848a:	e7d6      	b.n	800843a <_strtol_l.constprop.0+0x7a>
 800848c:	0013      	movs	r3, r2
 800848e:	e7e2      	b.n	8008456 <_strtol_l.constprop.0+0x96>
 8008490:	2b00      	cmp	r3, #0
 8008492:	da09      	bge.n	80084a8 <_strtol_l.constprop.0+0xe8>
 8008494:	2322      	movs	r3, #34	; 0x22
 8008496:	9a05      	ldr	r2, [sp, #20]
 8008498:	9803      	ldr	r0, [sp, #12]
 800849a:	6013      	str	r3, [r2, #0]
 800849c:	9b02      	ldr	r3, [sp, #8]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d0e1      	beq.n	8008466 <_strtol_l.constprop.0+0xa6>
 80084a2:	1e6b      	subs	r3, r5, #1
 80084a4:	9301      	str	r3, [sp, #4]
 80084a6:	e007      	b.n	80084b8 <_strtol_l.constprop.0+0xf8>
 80084a8:	2f00      	cmp	r7, #0
 80084aa:	d000      	beq.n	80084ae <_strtol_l.constprop.0+0xee>
 80084ac:	4240      	negs	r0, r0
 80084ae:	9a02      	ldr	r2, [sp, #8]
 80084b0:	2a00      	cmp	r2, #0
 80084b2:	d0d8      	beq.n	8008466 <_strtol_l.constprop.0+0xa6>
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d1f4      	bne.n	80084a2 <_strtol_l.constprop.0+0xe2>
 80084b8:	9b02      	ldr	r3, [sp, #8]
 80084ba:	9a01      	ldr	r2, [sp, #4]
 80084bc:	601a      	str	r2, [r3, #0]
 80084be:	e7d2      	b.n	8008466 <_strtol_l.constprop.0+0xa6>
 80084c0:	2430      	movs	r4, #48	; 0x30
 80084c2:	2e00      	cmp	r6, #0
 80084c4:	d1a7      	bne.n	8008416 <_strtol_l.constprop.0+0x56>
 80084c6:	3608      	adds	r6, #8
 80084c8:	e7a5      	b.n	8008416 <_strtol_l.constprop.0+0x56>
 80084ca:	2c30      	cmp	r4, #48	; 0x30
 80084cc:	d09b      	beq.n	8008406 <_strtol_l.constprop.0+0x46>
 80084ce:	260a      	movs	r6, #10
 80084d0:	e7a1      	b.n	8008416 <_strtol_l.constprop.0+0x56>
 80084d2:	46c0      	nop			; (mov r8, r8)
 80084d4:	0800bfc1 	.word	0x0800bfc1
 80084d8:	7fffffff 	.word	0x7fffffff

080084dc <_strtol_r>:
 80084dc:	b510      	push	{r4, lr}
 80084de:	f7ff ff6f 	bl	80083c0 <_strtol_l.constprop.0>
 80084e2:	bd10      	pop	{r4, pc}

080084e4 <_write_r>:
 80084e4:	b570      	push	{r4, r5, r6, lr}
 80084e6:	0004      	movs	r4, r0
 80084e8:	0008      	movs	r0, r1
 80084ea:	0011      	movs	r1, r2
 80084ec:	001a      	movs	r2, r3
 80084ee:	2300      	movs	r3, #0
 80084f0:	4d05      	ldr	r5, [pc, #20]	; (8008508 <_write_r+0x24>)
 80084f2:	602b      	str	r3, [r5, #0]
 80084f4:	f7fb fc19 	bl	8003d2a <_write>
 80084f8:	1c43      	adds	r3, r0, #1
 80084fa:	d103      	bne.n	8008504 <_write_r+0x20>
 80084fc:	682b      	ldr	r3, [r5, #0]
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d000      	beq.n	8008504 <_write_r+0x20>
 8008502:	6023      	str	r3, [r4, #0]
 8008504:	bd70      	pop	{r4, r5, r6, pc}
 8008506:	46c0      	nop			; (mov r8, r8)
 8008508:	200009e0 	.word	0x200009e0

0800850c <_close_r>:
 800850c:	2300      	movs	r3, #0
 800850e:	b570      	push	{r4, r5, r6, lr}
 8008510:	4d06      	ldr	r5, [pc, #24]	; (800852c <_close_r+0x20>)
 8008512:	0004      	movs	r4, r0
 8008514:	0008      	movs	r0, r1
 8008516:	602b      	str	r3, [r5, #0]
 8008518:	f7fb fc23 	bl	8003d62 <_close>
 800851c:	1c43      	adds	r3, r0, #1
 800851e:	d103      	bne.n	8008528 <_close_r+0x1c>
 8008520:	682b      	ldr	r3, [r5, #0]
 8008522:	2b00      	cmp	r3, #0
 8008524:	d000      	beq.n	8008528 <_close_r+0x1c>
 8008526:	6023      	str	r3, [r4, #0]
 8008528:	bd70      	pop	{r4, r5, r6, pc}
 800852a:	46c0      	nop			; (mov r8, r8)
 800852c:	200009e0 	.word	0x200009e0

08008530 <quorem>:
 8008530:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008532:	0006      	movs	r6, r0
 8008534:	690b      	ldr	r3, [r1, #16]
 8008536:	6932      	ldr	r2, [r6, #16]
 8008538:	b087      	sub	sp, #28
 800853a:	2000      	movs	r0, #0
 800853c:	9103      	str	r1, [sp, #12]
 800853e:	429a      	cmp	r2, r3
 8008540:	db65      	blt.n	800860e <quorem+0xde>
 8008542:	3b01      	subs	r3, #1
 8008544:	009c      	lsls	r4, r3, #2
 8008546:	9300      	str	r3, [sp, #0]
 8008548:	000b      	movs	r3, r1
 800854a:	3314      	adds	r3, #20
 800854c:	9305      	str	r3, [sp, #20]
 800854e:	191b      	adds	r3, r3, r4
 8008550:	9304      	str	r3, [sp, #16]
 8008552:	0033      	movs	r3, r6
 8008554:	3314      	adds	r3, #20
 8008556:	9302      	str	r3, [sp, #8]
 8008558:	191c      	adds	r4, r3, r4
 800855a:	9b04      	ldr	r3, [sp, #16]
 800855c:	6827      	ldr	r7, [r4, #0]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	0038      	movs	r0, r7
 8008562:	1c5d      	adds	r5, r3, #1
 8008564:	0029      	movs	r1, r5
 8008566:	9301      	str	r3, [sp, #4]
 8008568:	f7f7 fdf0 	bl	800014c <__udivsi3>
 800856c:	9001      	str	r0, [sp, #4]
 800856e:	42af      	cmp	r7, r5
 8008570:	d324      	bcc.n	80085bc <quorem+0x8c>
 8008572:	2500      	movs	r5, #0
 8008574:	46ac      	mov	ip, r5
 8008576:	9802      	ldr	r0, [sp, #8]
 8008578:	9f05      	ldr	r7, [sp, #20]
 800857a:	cf08      	ldmia	r7!, {r3}
 800857c:	9a01      	ldr	r2, [sp, #4]
 800857e:	b299      	uxth	r1, r3
 8008580:	4351      	muls	r1, r2
 8008582:	0c1b      	lsrs	r3, r3, #16
 8008584:	4353      	muls	r3, r2
 8008586:	1949      	adds	r1, r1, r5
 8008588:	0c0a      	lsrs	r2, r1, #16
 800858a:	189b      	adds	r3, r3, r2
 800858c:	6802      	ldr	r2, [r0, #0]
 800858e:	b289      	uxth	r1, r1
 8008590:	b292      	uxth	r2, r2
 8008592:	4462      	add	r2, ip
 8008594:	1a52      	subs	r2, r2, r1
 8008596:	6801      	ldr	r1, [r0, #0]
 8008598:	0c1d      	lsrs	r5, r3, #16
 800859a:	0c09      	lsrs	r1, r1, #16
 800859c:	b29b      	uxth	r3, r3
 800859e:	1acb      	subs	r3, r1, r3
 80085a0:	1411      	asrs	r1, r2, #16
 80085a2:	185b      	adds	r3, r3, r1
 80085a4:	1419      	asrs	r1, r3, #16
 80085a6:	b292      	uxth	r2, r2
 80085a8:	041b      	lsls	r3, r3, #16
 80085aa:	431a      	orrs	r2, r3
 80085ac:	9b04      	ldr	r3, [sp, #16]
 80085ae:	468c      	mov	ip, r1
 80085b0:	c004      	stmia	r0!, {r2}
 80085b2:	42bb      	cmp	r3, r7
 80085b4:	d2e1      	bcs.n	800857a <quorem+0x4a>
 80085b6:	6823      	ldr	r3, [r4, #0]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d030      	beq.n	800861e <quorem+0xee>
 80085bc:	0030      	movs	r0, r6
 80085be:	9903      	ldr	r1, [sp, #12]
 80085c0:	f001 fce8 	bl	8009f94 <__mcmp>
 80085c4:	2800      	cmp	r0, #0
 80085c6:	db21      	blt.n	800860c <quorem+0xdc>
 80085c8:	0030      	movs	r0, r6
 80085ca:	2400      	movs	r4, #0
 80085cc:	9b01      	ldr	r3, [sp, #4]
 80085ce:	9903      	ldr	r1, [sp, #12]
 80085d0:	3301      	adds	r3, #1
 80085d2:	9301      	str	r3, [sp, #4]
 80085d4:	3014      	adds	r0, #20
 80085d6:	3114      	adds	r1, #20
 80085d8:	6803      	ldr	r3, [r0, #0]
 80085da:	c920      	ldmia	r1!, {r5}
 80085dc:	b29a      	uxth	r2, r3
 80085de:	1914      	adds	r4, r2, r4
 80085e0:	b2aa      	uxth	r2, r5
 80085e2:	1aa2      	subs	r2, r4, r2
 80085e4:	0c1b      	lsrs	r3, r3, #16
 80085e6:	0c2d      	lsrs	r5, r5, #16
 80085e8:	1414      	asrs	r4, r2, #16
 80085ea:	1b5b      	subs	r3, r3, r5
 80085ec:	191b      	adds	r3, r3, r4
 80085ee:	141c      	asrs	r4, r3, #16
 80085f0:	b292      	uxth	r2, r2
 80085f2:	041b      	lsls	r3, r3, #16
 80085f4:	4313      	orrs	r3, r2
 80085f6:	c008      	stmia	r0!, {r3}
 80085f8:	9b04      	ldr	r3, [sp, #16]
 80085fa:	428b      	cmp	r3, r1
 80085fc:	d2ec      	bcs.n	80085d8 <quorem+0xa8>
 80085fe:	9b00      	ldr	r3, [sp, #0]
 8008600:	9a02      	ldr	r2, [sp, #8]
 8008602:	009b      	lsls	r3, r3, #2
 8008604:	18d3      	adds	r3, r2, r3
 8008606:	681a      	ldr	r2, [r3, #0]
 8008608:	2a00      	cmp	r2, #0
 800860a:	d015      	beq.n	8008638 <quorem+0x108>
 800860c:	9801      	ldr	r0, [sp, #4]
 800860e:	b007      	add	sp, #28
 8008610:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008612:	6823      	ldr	r3, [r4, #0]
 8008614:	2b00      	cmp	r3, #0
 8008616:	d106      	bne.n	8008626 <quorem+0xf6>
 8008618:	9b00      	ldr	r3, [sp, #0]
 800861a:	3b01      	subs	r3, #1
 800861c:	9300      	str	r3, [sp, #0]
 800861e:	9b02      	ldr	r3, [sp, #8]
 8008620:	3c04      	subs	r4, #4
 8008622:	42a3      	cmp	r3, r4
 8008624:	d3f5      	bcc.n	8008612 <quorem+0xe2>
 8008626:	9b00      	ldr	r3, [sp, #0]
 8008628:	6133      	str	r3, [r6, #16]
 800862a:	e7c7      	b.n	80085bc <quorem+0x8c>
 800862c:	681a      	ldr	r2, [r3, #0]
 800862e:	2a00      	cmp	r2, #0
 8008630:	d106      	bne.n	8008640 <quorem+0x110>
 8008632:	9a00      	ldr	r2, [sp, #0]
 8008634:	3a01      	subs	r2, #1
 8008636:	9200      	str	r2, [sp, #0]
 8008638:	9a02      	ldr	r2, [sp, #8]
 800863a:	3b04      	subs	r3, #4
 800863c:	429a      	cmp	r2, r3
 800863e:	d3f5      	bcc.n	800862c <quorem+0xfc>
 8008640:	9b00      	ldr	r3, [sp, #0]
 8008642:	6133      	str	r3, [r6, #16]
 8008644:	e7e2      	b.n	800860c <quorem+0xdc>
	...

08008648 <_dtoa_r>:
 8008648:	b5f0      	push	{r4, r5, r6, r7, lr}
 800864a:	b09d      	sub	sp, #116	; 0x74
 800864c:	9202      	str	r2, [sp, #8]
 800864e:	9303      	str	r3, [sp, #12]
 8008650:	9b02      	ldr	r3, [sp, #8]
 8008652:	9c03      	ldr	r4, [sp, #12]
 8008654:	9308      	str	r3, [sp, #32]
 8008656:	9409      	str	r4, [sp, #36]	; 0x24
 8008658:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800865a:	0007      	movs	r7, r0
 800865c:	9d25      	ldr	r5, [sp, #148]	; 0x94
 800865e:	2c00      	cmp	r4, #0
 8008660:	d10e      	bne.n	8008680 <_dtoa_r+0x38>
 8008662:	2010      	movs	r0, #16
 8008664:	f001 f996 	bl	8009994 <malloc>
 8008668:	1e02      	subs	r2, r0, #0
 800866a:	6278      	str	r0, [r7, #36]	; 0x24
 800866c:	d104      	bne.n	8008678 <_dtoa_r+0x30>
 800866e:	21ea      	movs	r1, #234	; 0xea
 8008670:	4bc7      	ldr	r3, [pc, #796]	; (8008990 <_dtoa_r+0x348>)
 8008672:	48c8      	ldr	r0, [pc, #800]	; (8008994 <_dtoa_r+0x34c>)
 8008674:	f002 fd88 	bl	800b188 <__assert_func>
 8008678:	6044      	str	r4, [r0, #4]
 800867a:	6084      	str	r4, [r0, #8]
 800867c:	6004      	str	r4, [r0, #0]
 800867e:	60c4      	str	r4, [r0, #12]
 8008680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008682:	6819      	ldr	r1, [r3, #0]
 8008684:	2900      	cmp	r1, #0
 8008686:	d00a      	beq.n	800869e <_dtoa_r+0x56>
 8008688:	685a      	ldr	r2, [r3, #4]
 800868a:	2301      	movs	r3, #1
 800868c:	4093      	lsls	r3, r2
 800868e:	604a      	str	r2, [r1, #4]
 8008690:	608b      	str	r3, [r1, #8]
 8008692:	0038      	movs	r0, r7
 8008694:	f001 f9f2 	bl	8009a7c <_Bfree>
 8008698:	2200      	movs	r2, #0
 800869a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800869c:	601a      	str	r2, [r3, #0]
 800869e:	9b03      	ldr	r3, [sp, #12]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	da20      	bge.n	80086e6 <_dtoa_r+0x9e>
 80086a4:	2301      	movs	r3, #1
 80086a6:	602b      	str	r3, [r5, #0]
 80086a8:	9b03      	ldr	r3, [sp, #12]
 80086aa:	005b      	lsls	r3, r3, #1
 80086ac:	085b      	lsrs	r3, r3, #1
 80086ae:	9309      	str	r3, [sp, #36]	; 0x24
 80086b0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80086b2:	4bb9      	ldr	r3, [pc, #740]	; (8008998 <_dtoa_r+0x350>)
 80086b4:	4ab8      	ldr	r2, [pc, #736]	; (8008998 <_dtoa_r+0x350>)
 80086b6:	402b      	ands	r3, r5
 80086b8:	4293      	cmp	r3, r2
 80086ba:	d117      	bne.n	80086ec <_dtoa_r+0xa4>
 80086bc:	4bb7      	ldr	r3, [pc, #732]	; (800899c <_dtoa_r+0x354>)
 80086be:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80086c0:	0328      	lsls	r0, r5, #12
 80086c2:	6013      	str	r3, [r2, #0]
 80086c4:	9b02      	ldr	r3, [sp, #8]
 80086c6:	0b00      	lsrs	r0, r0, #12
 80086c8:	4318      	orrs	r0, r3
 80086ca:	d101      	bne.n	80086d0 <_dtoa_r+0x88>
 80086cc:	f000 fdbf 	bl	800924e <_dtoa_r+0xc06>
 80086d0:	48b3      	ldr	r0, [pc, #716]	; (80089a0 <_dtoa_r+0x358>)
 80086d2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80086d4:	9006      	str	r0, [sp, #24]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d002      	beq.n	80086e0 <_dtoa_r+0x98>
 80086da:	4bb2      	ldr	r3, [pc, #712]	; (80089a4 <_dtoa_r+0x35c>)
 80086dc:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80086de:	6013      	str	r3, [r2, #0]
 80086e0:	9806      	ldr	r0, [sp, #24]
 80086e2:	b01d      	add	sp, #116	; 0x74
 80086e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80086e6:	2300      	movs	r3, #0
 80086e8:	602b      	str	r3, [r5, #0]
 80086ea:	e7e1      	b.n	80086b0 <_dtoa_r+0x68>
 80086ec:	9b08      	ldr	r3, [sp, #32]
 80086ee:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80086f0:	9312      	str	r3, [sp, #72]	; 0x48
 80086f2:	9413      	str	r4, [sp, #76]	; 0x4c
 80086f4:	9812      	ldr	r0, [sp, #72]	; 0x48
 80086f6:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80086f8:	2200      	movs	r2, #0
 80086fa:	2300      	movs	r3, #0
 80086fc:	f7f7 feac 	bl	8000458 <__aeabi_dcmpeq>
 8008700:	1e04      	subs	r4, r0, #0
 8008702:	d009      	beq.n	8008718 <_dtoa_r+0xd0>
 8008704:	2301      	movs	r3, #1
 8008706:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008708:	6013      	str	r3, [r2, #0]
 800870a:	4ba7      	ldr	r3, [pc, #668]	; (80089a8 <_dtoa_r+0x360>)
 800870c:	9306      	str	r3, [sp, #24]
 800870e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008710:	2b00      	cmp	r3, #0
 8008712:	d0e5      	beq.n	80086e0 <_dtoa_r+0x98>
 8008714:	4ba5      	ldr	r3, [pc, #660]	; (80089ac <_dtoa_r+0x364>)
 8008716:	e7e1      	b.n	80086dc <_dtoa_r+0x94>
 8008718:	ab1a      	add	r3, sp, #104	; 0x68
 800871a:	9301      	str	r3, [sp, #4]
 800871c:	ab1b      	add	r3, sp, #108	; 0x6c
 800871e:	9300      	str	r3, [sp, #0]
 8008720:	0038      	movs	r0, r7
 8008722:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008724:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008726:	f001 fd5d 	bl	800a1e4 <__d2b>
 800872a:	006e      	lsls	r6, r5, #1
 800872c:	9005      	str	r0, [sp, #20]
 800872e:	0d76      	lsrs	r6, r6, #21
 8008730:	d100      	bne.n	8008734 <_dtoa_r+0xec>
 8008732:	e07c      	b.n	800882e <_dtoa_r+0x1e6>
 8008734:	9812      	ldr	r0, [sp, #72]	; 0x48
 8008736:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8008738:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800873a:	4a9d      	ldr	r2, [pc, #628]	; (80089b0 <_dtoa_r+0x368>)
 800873c:	031b      	lsls	r3, r3, #12
 800873e:	0b1b      	lsrs	r3, r3, #12
 8008740:	431a      	orrs	r2, r3
 8008742:	0011      	movs	r1, r2
 8008744:	4b9b      	ldr	r3, [pc, #620]	; (80089b4 <_dtoa_r+0x36c>)
 8008746:	9418      	str	r4, [sp, #96]	; 0x60
 8008748:	18f6      	adds	r6, r6, r3
 800874a:	2200      	movs	r2, #0
 800874c:	4b9a      	ldr	r3, [pc, #616]	; (80089b8 <_dtoa_r+0x370>)
 800874e:	f7f9 fe87 	bl	8002460 <__aeabi_dsub>
 8008752:	4a9a      	ldr	r2, [pc, #616]	; (80089bc <_dtoa_r+0x374>)
 8008754:	4b9a      	ldr	r3, [pc, #616]	; (80089c0 <_dtoa_r+0x378>)
 8008756:	f7f9 fc17 	bl	8001f88 <__aeabi_dmul>
 800875a:	4a9a      	ldr	r2, [pc, #616]	; (80089c4 <_dtoa_r+0x37c>)
 800875c:	4b9a      	ldr	r3, [pc, #616]	; (80089c8 <_dtoa_r+0x380>)
 800875e:	f7f8 fcd5 	bl	800110c <__aeabi_dadd>
 8008762:	0004      	movs	r4, r0
 8008764:	0030      	movs	r0, r6
 8008766:	000d      	movs	r5, r1
 8008768:	f7fa fa60 	bl	8002c2c <__aeabi_i2d>
 800876c:	4a97      	ldr	r2, [pc, #604]	; (80089cc <_dtoa_r+0x384>)
 800876e:	4b98      	ldr	r3, [pc, #608]	; (80089d0 <_dtoa_r+0x388>)
 8008770:	f7f9 fc0a 	bl	8001f88 <__aeabi_dmul>
 8008774:	0002      	movs	r2, r0
 8008776:	000b      	movs	r3, r1
 8008778:	0020      	movs	r0, r4
 800877a:	0029      	movs	r1, r5
 800877c:	f7f8 fcc6 	bl	800110c <__aeabi_dadd>
 8008780:	0004      	movs	r4, r0
 8008782:	000d      	movs	r5, r1
 8008784:	f7fa fa1c 	bl	8002bc0 <__aeabi_d2iz>
 8008788:	2200      	movs	r2, #0
 800878a:	9002      	str	r0, [sp, #8]
 800878c:	2300      	movs	r3, #0
 800878e:	0020      	movs	r0, r4
 8008790:	0029      	movs	r1, r5
 8008792:	f7f7 fe67 	bl	8000464 <__aeabi_dcmplt>
 8008796:	2800      	cmp	r0, #0
 8008798:	d00b      	beq.n	80087b2 <_dtoa_r+0x16a>
 800879a:	9802      	ldr	r0, [sp, #8]
 800879c:	f7fa fa46 	bl	8002c2c <__aeabi_i2d>
 80087a0:	002b      	movs	r3, r5
 80087a2:	0022      	movs	r2, r4
 80087a4:	f7f7 fe58 	bl	8000458 <__aeabi_dcmpeq>
 80087a8:	4243      	negs	r3, r0
 80087aa:	4158      	adcs	r0, r3
 80087ac:	9b02      	ldr	r3, [sp, #8]
 80087ae:	1a1b      	subs	r3, r3, r0
 80087b0:	9302      	str	r3, [sp, #8]
 80087b2:	2301      	movs	r3, #1
 80087b4:	9316      	str	r3, [sp, #88]	; 0x58
 80087b6:	9b02      	ldr	r3, [sp, #8]
 80087b8:	2b16      	cmp	r3, #22
 80087ba:	d80f      	bhi.n	80087dc <_dtoa_r+0x194>
 80087bc:	9812      	ldr	r0, [sp, #72]	; 0x48
 80087be:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80087c0:	00da      	lsls	r2, r3, #3
 80087c2:	4b84      	ldr	r3, [pc, #528]	; (80089d4 <_dtoa_r+0x38c>)
 80087c4:	189b      	adds	r3, r3, r2
 80087c6:	681a      	ldr	r2, [r3, #0]
 80087c8:	685b      	ldr	r3, [r3, #4]
 80087ca:	f7f7 fe4b 	bl	8000464 <__aeabi_dcmplt>
 80087ce:	2800      	cmp	r0, #0
 80087d0:	d049      	beq.n	8008866 <_dtoa_r+0x21e>
 80087d2:	9b02      	ldr	r3, [sp, #8]
 80087d4:	3b01      	subs	r3, #1
 80087d6:	9302      	str	r3, [sp, #8]
 80087d8:	2300      	movs	r3, #0
 80087da:	9316      	str	r3, [sp, #88]	; 0x58
 80087dc:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80087de:	1b9e      	subs	r6, r3, r6
 80087e0:	2300      	movs	r3, #0
 80087e2:	930a      	str	r3, [sp, #40]	; 0x28
 80087e4:	0033      	movs	r3, r6
 80087e6:	3b01      	subs	r3, #1
 80087e8:	930d      	str	r3, [sp, #52]	; 0x34
 80087ea:	d504      	bpl.n	80087f6 <_dtoa_r+0x1ae>
 80087ec:	2301      	movs	r3, #1
 80087ee:	1b9b      	subs	r3, r3, r6
 80087f0:	930a      	str	r3, [sp, #40]	; 0x28
 80087f2:	2300      	movs	r3, #0
 80087f4:	930d      	str	r3, [sp, #52]	; 0x34
 80087f6:	9b02      	ldr	r3, [sp, #8]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	db36      	blt.n	800886a <_dtoa_r+0x222>
 80087fc:	9a02      	ldr	r2, [sp, #8]
 80087fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008800:	4694      	mov	ip, r2
 8008802:	4463      	add	r3, ip
 8008804:	930d      	str	r3, [sp, #52]	; 0x34
 8008806:	2300      	movs	r3, #0
 8008808:	9215      	str	r2, [sp, #84]	; 0x54
 800880a:	930e      	str	r3, [sp, #56]	; 0x38
 800880c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800880e:	2401      	movs	r4, #1
 8008810:	2b09      	cmp	r3, #9
 8008812:	d864      	bhi.n	80088de <_dtoa_r+0x296>
 8008814:	2b05      	cmp	r3, #5
 8008816:	dd02      	ble.n	800881e <_dtoa_r+0x1d6>
 8008818:	2400      	movs	r4, #0
 800881a:	3b04      	subs	r3, #4
 800881c:	9322      	str	r3, [sp, #136]	; 0x88
 800881e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008820:	1e98      	subs	r0, r3, #2
 8008822:	2803      	cmp	r0, #3
 8008824:	d864      	bhi.n	80088f0 <_dtoa_r+0x2a8>
 8008826:	f7f7 fc7d 	bl	8000124 <__gnu_thumb1_case_uqi>
 800882a:	3829      	.short	0x3829
 800882c:	5836      	.short	0x5836
 800882e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8008830:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8008832:	189e      	adds	r6, r3, r2
 8008834:	4b68      	ldr	r3, [pc, #416]	; (80089d8 <_dtoa_r+0x390>)
 8008836:	18f2      	adds	r2, r6, r3
 8008838:	2a20      	cmp	r2, #32
 800883a:	dd0f      	ble.n	800885c <_dtoa_r+0x214>
 800883c:	2340      	movs	r3, #64	; 0x40
 800883e:	1a9b      	subs	r3, r3, r2
 8008840:	409d      	lsls	r5, r3
 8008842:	4b66      	ldr	r3, [pc, #408]	; (80089dc <_dtoa_r+0x394>)
 8008844:	9802      	ldr	r0, [sp, #8]
 8008846:	18f3      	adds	r3, r6, r3
 8008848:	40d8      	lsrs	r0, r3
 800884a:	4328      	orrs	r0, r5
 800884c:	f7fa fa1e 	bl	8002c8c <__aeabi_ui2d>
 8008850:	2301      	movs	r3, #1
 8008852:	4c63      	ldr	r4, [pc, #396]	; (80089e0 <_dtoa_r+0x398>)
 8008854:	3e01      	subs	r6, #1
 8008856:	1909      	adds	r1, r1, r4
 8008858:	9318      	str	r3, [sp, #96]	; 0x60
 800885a:	e776      	b.n	800874a <_dtoa_r+0x102>
 800885c:	2320      	movs	r3, #32
 800885e:	9802      	ldr	r0, [sp, #8]
 8008860:	1a9b      	subs	r3, r3, r2
 8008862:	4098      	lsls	r0, r3
 8008864:	e7f2      	b.n	800884c <_dtoa_r+0x204>
 8008866:	9016      	str	r0, [sp, #88]	; 0x58
 8008868:	e7b8      	b.n	80087dc <_dtoa_r+0x194>
 800886a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800886c:	9a02      	ldr	r2, [sp, #8]
 800886e:	1a9b      	subs	r3, r3, r2
 8008870:	930a      	str	r3, [sp, #40]	; 0x28
 8008872:	4253      	negs	r3, r2
 8008874:	930e      	str	r3, [sp, #56]	; 0x38
 8008876:	2300      	movs	r3, #0
 8008878:	9315      	str	r3, [sp, #84]	; 0x54
 800887a:	e7c7      	b.n	800880c <_dtoa_r+0x1c4>
 800887c:	2300      	movs	r3, #0
 800887e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008880:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008882:	930c      	str	r3, [sp, #48]	; 0x30
 8008884:	9307      	str	r3, [sp, #28]
 8008886:	2b00      	cmp	r3, #0
 8008888:	dc13      	bgt.n	80088b2 <_dtoa_r+0x26a>
 800888a:	2301      	movs	r3, #1
 800888c:	001a      	movs	r2, r3
 800888e:	930c      	str	r3, [sp, #48]	; 0x30
 8008890:	9307      	str	r3, [sp, #28]
 8008892:	9223      	str	r2, [sp, #140]	; 0x8c
 8008894:	e00d      	b.n	80088b2 <_dtoa_r+0x26a>
 8008896:	2301      	movs	r3, #1
 8008898:	e7f1      	b.n	800887e <_dtoa_r+0x236>
 800889a:	2300      	movs	r3, #0
 800889c:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800889e:	930f      	str	r3, [sp, #60]	; 0x3c
 80088a0:	4694      	mov	ip, r2
 80088a2:	9b02      	ldr	r3, [sp, #8]
 80088a4:	4463      	add	r3, ip
 80088a6:	930c      	str	r3, [sp, #48]	; 0x30
 80088a8:	3301      	adds	r3, #1
 80088aa:	9307      	str	r3, [sp, #28]
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	dc00      	bgt.n	80088b2 <_dtoa_r+0x26a>
 80088b0:	2301      	movs	r3, #1
 80088b2:	2200      	movs	r2, #0
 80088b4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80088b6:	6042      	str	r2, [r0, #4]
 80088b8:	3204      	adds	r2, #4
 80088ba:	0015      	movs	r5, r2
 80088bc:	3514      	adds	r5, #20
 80088be:	6841      	ldr	r1, [r0, #4]
 80088c0:	429d      	cmp	r5, r3
 80088c2:	d919      	bls.n	80088f8 <_dtoa_r+0x2b0>
 80088c4:	0038      	movs	r0, r7
 80088c6:	f001 f895 	bl	80099f4 <_Balloc>
 80088ca:	9006      	str	r0, [sp, #24]
 80088cc:	2800      	cmp	r0, #0
 80088ce:	d117      	bne.n	8008900 <_dtoa_r+0x2b8>
 80088d0:	21d5      	movs	r1, #213	; 0xd5
 80088d2:	0002      	movs	r2, r0
 80088d4:	4b43      	ldr	r3, [pc, #268]	; (80089e4 <_dtoa_r+0x39c>)
 80088d6:	0049      	lsls	r1, r1, #1
 80088d8:	e6cb      	b.n	8008672 <_dtoa_r+0x2a>
 80088da:	2301      	movs	r3, #1
 80088dc:	e7de      	b.n	800889c <_dtoa_r+0x254>
 80088de:	2300      	movs	r3, #0
 80088e0:	940f      	str	r4, [sp, #60]	; 0x3c
 80088e2:	9322      	str	r3, [sp, #136]	; 0x88
 80088e4:	3b01      	subs	r3, #1
 80088e6:	930c      	str	r3, [sp, #48]	; 0x30
 80088e8:	9307      	str	r3, [sp, #28]
 80088ea:	2200      	movs	r2, #0
 80088ec:	3313      	adds	r3, #19
 80088ee:	e7d0      	b.n	8008892 <_dtoa_r+0x24a>
 80088f0:	2301      	movs	r3, #1
 80088f2:	930f      	str	r3, [sp, #60]	; 0x3c
 80088f4:	3b02      	subs	r3, #2
 80088f6:	e7f6      	b.n	80088e6 <_dtoa_r+0x29e>
 80088f8:	3101      	adds	r1, #1
 80088fa:	6041      	str	r1, [r0, #4]
 80088fc:	0052      	lsls	r2, r2, #1
 80088fe:	e7dc      	b.n	80088ba <_dtoa_r+0x272>
 8008900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008902:	9a06      	ldr	r2, [sp, #24]
 8008904:	601a      	str	r2, [r3, #0]
 8008906:	9b07      	ldr	r3, [sp, #28]
 8008908:	2b0e      	cmp	r3, #14
 800890a:	d900      	bls.n	800890e <_dtoa_r+0x2c6>
 800890c:	e0eb      	b.n	8008ae6 <_dtoa_r+0x49e>
 800890e:	2c00      	cmp	r4, #0
 8008910:	d100      	bne.n	8008914 <_dtoa_r+0x2cc>
 8008912:	e0e8      	b.n	8008ae6 <_dtoa_r+0x49e>
 8008914:	9b02      	ldr	r3, [sp, #8]
 8008916:	2b00      	cmp	r3, #0
 8008918:	dd68      	ble.n	80089ec <_dtoa_r+0x3a4>
 800891a:	001a      	movs	r2, r3
 800891c:	210f      	movs	r1, #15
 800891e:	4b2d      	ldr	r3, [pc, #180]	; (80089d4 <_dtoa_r+0x38c>)
 8008920:	400a      	ands	r2, r1
 8008922:	00d2      	lsls	r2, r2, #3
 8008924:	189b      	adds	r3, r3, r2
 8008926:	681d      	ldr	r5, [r3, #0]
 8008928:	685e      	ldr	r6, [r3, #4]
 800892a:	9b02      	ldr	r3, [sp, #8]
 800892c:	111c      	asrs	r4, r3, #4
 800892e:	2302      	movs	r3, #2
 8008930:	9310      	str	r3, [sp, #64]	; 0x40
 8008932:	9b02      	ldr	r3, [sp, #8]
 8008934:	05db      	lsls	r3, r3, #23
 8008936:	d50b      	bpl.n	8008950 <_dtoa_r+0x308>
 8008938:	4b2b      	ldr	r3, [pc, #172]	; (80089e8 <_dtoa_r+0x3a0>)
 800893a:	400c      	ands	r4, r1
 800893c:	6a1a      	ldr	r2, [r3, #32]
 800893e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008940:	9812      	ldr	r0, [sp, #72]	; 0x48
 8008942:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8008944:	f7f8 ff1e 	bl	8001784 <__aeabi_ddiv>
 8008948:	2303      	movs	r3, #3
 800894a:	9008      	str	r0, [sp, #32]
 800894c:	9109      	str	r1, [sp, #36]	; 0x24
 800894e:	9310      	str	r3, [sp, #64]	; 0x40
 8008950:	4b25      	ldr	r3, [pc, #148]	; (80089e8 <_dtoa_r+0x3a0>)
 8008952:	9314      	str	r3, [sp, #80]	; 0x50
 8008954:	2c00      	cmp	r4, #0
 8008956:	d108      	bne.n	800896a <_dtoa_r+0x322>
 8008958:	9808      	ldr	r0, [sp, #32]
 800895a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800895c:	002a      	movs	r2, r5
 800895e:	0033      	movs	r3, r6
 8008960:	f7f8 ff10 	bl	8001784 <__aeabi_ddiv>
 8008964:	9008      	str	r0, [sp, #32]
 8008966:	9109      	str	r1, [sp, #36]	; 0x24
 8008968:	e05c      	b.n	8008a24 <_dtoa_r+0x3dc>
 800896a:	2301      	movs	r3, #1
 800896c:	421c      	tst	r4, r3
 800896e:	d00b      	beq.n	8008988 <_dtoa_r+0x340>
 8008970:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008972:	0028      	movs	r0, r5
 8008974:	3301      	adds	r3, #1
 8008976:	9310      	str	r3, [sp, #64]	; 0x40
 8008978:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800897a:	0031      	movs	r1, r6
 800897c:	681a      	ldr	r2, [r3, #0]
 800897e:	685b      	ldr	r3, [r3, #4]
 8008980:	f7f9 fb02 	bl	8001f88 <__aeabi_dmul>
 8008984:	0005      	movs	r5, r0
 8008986:	000e      	movs	r6, r1
 8008988:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800898a:	1064      	asrs	r4, r4, #1
 800898c:	3308      	adds	r3, #8
 800898e:	e7e0      	b.n	8008952 <_dtoa_r+0x30a>
 8008990:	0800c0ce 	.word	0x0800c0ce
 8008994:	0800c0e5 	.word	0x0800c0e5
 8008998:	7ff00000 	.word	0x7ff00000
 800899c:	0000270f 	.word	0x0000270f
 80089a0:	0800c0ca 	.word	0x0800c0ca
 80089a4:	0800c0cd 	.word	0x0800c0cd
 80089a8:	0800c339 	.word	0x0800c339
 80089ac:	0800c33a 	.word	0x0800c33a
 80089b0:	3ff00000 	.word	0x3ff00000
 80089b4:	fffffc01 	.word	0xfffffc01
 80089b8:	3ff80000 	.word	0x3ff80000
 80089bc:	636f4361 	.word	0x636f4361
 80089c0:	3fd287a7 	.word	0x3fd287a7
 80089c4:	8b60c8b3 	.word	0x8b60c8b3
 80089c8:	3fc68a28 	.word	0x3fc68a28
 80089cc:	509f79fb 	.word	0x509f79fb
 80089d0:	3fd34413 	.word	0x3fd34413
 80089d4:	0800c250 	.word	0x0800c250
 80089d8:	00000432 	.word	0x00000432
 80089dc:	00000412 	.word	0x00000412
 80089e0:	fe100000 	.word	0xfe100000
 80089e4:	0800c140 	.word	0x0800c140
 80089e8:	0800c228 	.word	0x0800c228
 80089ec:	2302      	movs	r3, #2
 80089ee:	9310      	str	r3, [sp, #64]	; 0x40
 80089f0:	9b02      	ldr	r3, [sp, #8]
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d016      	beq.n	8008a24 <_dtoa_r+0x3dc>
 80089f6:	9812      	ldr	r0, [sp, #72]	; 0x48
 80089f8:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80089fa:	425c      	negs	r4, r3
 80089fc:	230f      	movs	r3, #15
 80089fe:	4ab6      	ldr	r2, [pc, #728]	; (8008cd8 <_dtoa_r+0x690>)
 8008a00:	4023      	ands	r3, r4
 8008a02:	00db      	lsls	r3, r3, #3
 8008a04:	18d3      	adds	r3, r2, r3
 8008a06:	681a      	ldr	r2, [r3, #0]
 8008a08:	685b      	ldr	r3, [r3, #4]
 8008a0a:	f7f9 fabd 	bl	8001f88 <__aeabi_dmul>
 8008a0e:	2601      	movs	r6, #1
 8008a10:	2300      	movs	r3, #0
 8008a12:	9008      	str	r0, [sp, #32]
 8008a14:	9109      	str	r1, [sp, #36]	; 0x24
 8008a16:	4db1      	ldr	r5, [pc, #708]	; (8008cdc <_dtoa_r+0x694>)
 8008a18:	1124      	asrs	r4, r4, #4
 8008a1a:	2c00      	cmp	r4, #0
 8008a1c:	d000      	beq.n	8008a20 <_dtoa_r+0x3d8>
 8008a1e:	e094      	b.n	8008b4a <_dtoa_r+0x502>
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d19f      	bne.n	8008964 <_dtoa_r+0x31c>
 8008a24:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d100      	bne.n	8008a2c <_dtoa_r+0x3e4>
 8008a2a:	e09b      	b.n	8008b64 <_dtoa_r+0x51c>
 8008a2c:	9c08      	ldr	r4, [sp, #32]
 8008a2e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008a30:	2200      	movs	r2, #0
 8008a32:	0020      	movs	r0, r4
 8008a34:	0029      	movs	r1, r5
 8008a36:	4baa      	ldr	r3, [pc, #680]	; (8008ce0 <_dtoa_r+0x698>)
 8008a38:	f7f7 fd14 	bl	8000464 <__aeabi_dcmplt>
 8008a3c:	2800      	cmp	r0, #0
 8008a3e:	d100      	bne.n	8008a42 <_dtoa_r+0x3fa>
 8008a40:	e090      	b.n	8008b64 <_dtoa_r+0x51c>
 8008a42:	9b07      	ldr	r3, [sp, #28]
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d100      	bne.n	8008a4a <_dtoa_r+0x402>
 8008a48:	e08c      	b.n	8008b64 <_dtoa_r+0x51c>
 8008a4a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	dd46      	ble.n	8008ade <_dtoa_r+0x496>
 8008a50:	9b02      	ldr	r3, [sp, #8]
 8008a52:	2200      	movs	r2, #0
 8008a54:	0020      	movs	r0, r4
 8008a56:	0029      	movs	r1, r5
 8008a58:	1e5e      	subs	r6, r3, #1
 8008a5a:	4ba2      	ldr	r3, [pc, #648]	; (8008ce4 <_dtoa_r+0x69c>)
 8008a5c:	f7f9 fa94 	bl	8001f88 <__aeabi_dmul>
 8008a60:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008a62:	9008      	str	r0, [sp, #32]
 8008a64:	9109      	str	r1, [sp, #36]	; 0x24
 8008a66:	3301      	adds	r3, #1
 8008a68:	9310      	str	r3, [sp, #64]	; 0x40
 8008a6a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008a6c:	9810      	ldr	r0, [sp, #64]	; 0x40
 8008a6e:	9c08      	ldr	r4, [sp, #32]
 8008a70:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008a72:	9314      	str	r3, [sp, #80]	; 0x50
 8008a74:	f7fa f8da 	bl	8002c2c <__aeabi_i2d>
 8008a78:	0022      	movs	r2, r4
 8008a7a:	002b      	movs	r3, r5
 8008a7c:	f7f9 fa84 	bl	8001f88 <__aeabi_dmul>
 8008a80:	2200      	movs	r2, #0
 8008a82:	4b99      	ldr	r3, [pc, #612]	; (8008ce8 <_dtoa_r+0x6a0>)
 8008a84:	f7f8 fb42 	bl	800110c <__aeabi_dadd>
 8008a88:	9010      	str	r0, [sp, #64]	; 0x40
 8008a8a:	9111      	str	r1, [sp, #68]	; 0x44
 8008a8c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008a8e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008a90:	9208      	str	r2, [sp, #32]
 8008a92:	9309      	str	r3, [sp, #36]	; 0x24
 8008a94:	4a95      	ldr	r2, [pc, #596]	; (8008cec <_dtoa_r+0x6a4>)
 8008a96:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008a98:	4694      	mov	ip, r2
 8008a9a:	4463      	add	r3, ip
 8008a9c:	9317      	str	r3, [sp, #92]	; 0x5c
 8008a9e:	9309      	str	r3, [sp, #36]	; 0x24
 8008aa0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d161      	bne.n	8008b6a <_dtoa_r+0x522>
 8008aa6:	2200      	movs	r2, #0
 8008aa8:	0020      	movs	r0, r4
 8008aaa:	0029      	movs	r1, r5
 8008aac:	4b90      	ldr	r3, [pc, #576]	; (8008cf0 <_dtoa_r+0x6a8>)
 8008aae:	f7f9 fcd7 	bl	8002460 <__aeabi_dsub>
 8008ab2:	9a08      	ldr	r2, [sp, #32]
 8008ab4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008ab6:	0004      	movs	r4, r0
 8008ab8:	000d      	movs	r5, r1
 8008aba:	f7f7 fce7 	bl	800048c <__aeabi_dcmpgt>
 8008abe:	2800      	cmp	r0, #0
 8008ac0:	d000      	beq.n	8008ac4 <_dtoa_r+0x47c>
 8008ac2:	e2af      	b.n	8009024 <_dtoa_r+0x9dc>
 8008ac4:	488b      	ldr	r0, [pc, #556]	; (8008cf4 <_dtoa_r+0x6ac>)
 8008ac6:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008ac8:	4684      	mov	ip, r0
 8008aca:	4461      	add	r1, ip
 8008acc:	000b      	movs	r3, r1
 8008ace:	0020      	movs	r0, r4
 8008ad0:	0029      	movs	r1, r5
 8008ad2:	9a08      	ldr	r2, [sp, #32]
 8008ad4:	f7f7 fcc6 	bl	8000464 <__aeabi_dcmplt>
 8008ad8:	2800      	cmp	r0, #0
 8008ada:	d000      	beq.n	8008ade <_dtoa_r+0x496>
 8008adc:	e29f      	b.n	800901e <_dtoa_r+0x9d6>
 8008ade:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008ae0:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8008ae2:	9308      	str	r3, [sp, #32]
 8008ae4:	9409      	str	r4, [sp, #36]	; 0x24
 8008ae6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	da00      	bge.n	8008aee <_dtoa_r+0x4a6>
 8008aec:	e172      	b.n	8008dd4 <_dtoa_r+0x78c>
 8008aee:	9a02      	ldr	r2, [sp, #8]
 8008af0:	2a0e      	cmp	r2, #14
 8008af2:	dd00      	ble.n	8008af6 <_dtoa_r+0x4ae>
 8008af4:	e16e      	b.n	8008dd4 <_dtoa_r+0x78c>
 8008af6:	4b78      	ldr	r3, [pc, #480]	; (8008cd8 <_dtoa_r+0x690>)
 8008af8:	00d2      	lsls	r2, r2, #3
 8008afa:	189b      	adds	r3, r3, r2
 8008afc:	685c      	ldr	r4, [r3, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	930a      	str	r3, [sp, #40]	; 0x28
 8008b02:	940b      	str	r4, [sp, #44]	; 0x2c
 8008b04:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	db00      	blt.n	8008b0c <_dtoa_r+0x4c4>
 8008b0a:	e0f7      	b.n	8008cfc <_dtoa_r+0x6b4>
 8008b0c:	9b07      	ldr	r3, [sp, #28]
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	dd00      	ble.n	8008b14 <_dtoa_r+0x4cc>
 8008b12:	e0f3      	b.n	8008cfc <_dtoa_r+0x6b4>
 8008b14:	d000      	beq.n	8008b18 <_dtoa_r+0x4d0>
 8008b16:	e282      	b.n	800901e <_dtoa_r+0x9d6>
 8008b18:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008b1a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008b1c:	2200      	movs	r2, #0
 8008b1e:	4b74      	ldr	r3, [pc, #464]	; (8008cf0 <_dtoa_r+0x6a8>)
 8008b20:	f7f9 fa32 	bl	8001f88 <__aeabi_dmul>
 8008b24:	9a08      	ldr	r2, [sp, #32]
 8008b26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b28:	f7f7 fcba 	bl	80004a0 <__aeabi_dcmpge>
 8008b2c:	9e07      	ldr	r6, [sp, #28]
 8008b2e:	0035      	movs	r5, r6
 8008b30:	2800      	cmp	r0, #0
 8008b32:	d000      	beq.n	8008b36 <_dtoa_r+0x4ee>
 8008b34:	e259      	b.n	8008fea <_dtoa_r+0x9a2>
 8008b36:	9b06      	ldr	r3, [sp, #24]
 8008b38:	9a06      	ldr	r2, [sp, #24]
 8008b3a:	3301      	adds	r3, #1
 8008b3c:	9308      	str	r3, [sp, #32]
 8008b3e:	2331      	movs	r3, #49	; 0x31
 8008b40:	7013      	strb	r3, [r2, #0]
 8008b42:	9b02      	ldr	r3, [sp, #8]
 8008b44:	3301      	adds	r3, #1
 8008b46:	9302      	str	r3, [sp, #8]
 8008b48:	e254      	b.n	8008ff4 <_dtoa_r+0x9ac>
 8008b4a:	4234      	tst	r4, r6
 8008b4c:	d007      	beq.n	8008b5e <_dtoa_r+0x516>
 8008b4e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008b50:	3301      	adds	r3, #1
 8008b52:	9310      	str	r3, [sp, #64]	; 0x40
 8008b54:	682a      	ldr	r2, [r5, #0]
 8008b56:	686b      	ldr	r3, [r5, #4]
 8008b58:	f7f9 fa16 	bl	8001f88 <__aeabi_dmul>
 8008b5c:	0033      	movs	r3, r6
 8008b5e:	1064      	asrs	r4, r4, #1
 8008b60:	3508      	adds	r5, #8
 8008b62:	e75a      	b.n	8008a1a <_dtoa_r+0x3d2>
 8008b64:	9e02      	ldr	r6, [sp, #8]
 8008b66:	9b07      	ldr	r3, [sp, #28]
 8008b68:	e780      	b.n	8008a6c <_dtoa_r+0x424>
 8008b6a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008b6c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008b6e:	1e5a      	subs	r2, r3, #1
 8008b70:	4b59      	ldr	r3, [pc, #356]	; (8008cd8 <_dtoa_r+0x690>)
 8008b72:	00d2      	lsls	r2, r2, #3
 8008b74:	189b      	adds	r3, r3, r2
 8008b76:	681a      	ldr	r2, [r3, #0]
 8008b78:	685b      	ldr	r3, [r3, #4]
 8008b7a:	2900      	cmp	r1, #0
 8008b7c:	d051      	beq.n	8008c22 <_dtoa_r+0x5da>
 8008b7e:	2000      	movs	r0, #0
 8008b80:	495d      	ldr	r1, [pc, #372]	; (8008cf8 <_dtoa_r+0x6b0>)
 8008b82:	f7f8 fdff 	bl	8001784 <__aeabi_ddiv>
 8008b86:	9a08      	ldr	r2, [sp, #32]
 8008b88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b8a:	f7f9 fc69 	bl	8002460 <__aeabi_dsub>
 8008b8e:	9a06      	ldr	r2, [sp, #24]
 8008b90:	9b06      	ldr	r3, [sp, #24]
 8008b92:	4694      	mov	ip, r2
 8008b94:	9317      	str	r3, [sp, #92]	; 0x5c
 8008b96:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008b98:	9010      	str	r0, [sp, #64]	; 0x40
 8008b9a:	9111      	str	r1, [sp, #68]	; 0x44
 8008b9c:	4463      	add	r3, ip
 8008b9e:	9319      	str	r3, [sp, #100]	; 0x64
 8008ba0:	0029      	movs	r1, r5
 8008ba2:	0020      	movs	r0, r4
 8008ba4:	f7fa f80c 	bl	8002bc0 <__aeabi_d2iz>
 8008ba8:	9014      	str	r0, [sp, #80]	; 0x50
 8008baa:	f7fa f83f 	bl	8002c2c <__aeabi_i2d>
 8008bae:	0002      	movs	r2, r0
 8008bb0:	000b      	movs	r3, r1
 8008bb2:	0020      	movs	r0, r4
 8008bb4:	0029      	movs	r1, r5
 8008bb6:	f7f9 fc53 	bl	8002460 <__aeabi_dsub>
 8008bba:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008bbc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008bbe:	3301      	adds	r3, #1
 8008bc0:	9308      	str	r3, [sp, #32]
 8008bc2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008bc4:	0004      	movs	r4, r0
 8008bc6:	3330      	adds	r3, #48	; 0x30
 8008bc8:	7013      	strb	r3, [r2, #0]
 8008bca:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008bcc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008bce:	000d      	movs	r5, r1
 8008bd0:	f7f7 fc48 	bl	8000464 <__aeabi_dcmplt>
 8008bd4:	2800      	cmp	r0, #0
 8008bd6:	d175      	bne.n	8008cc4 <_dtoa_r+0x67c>
 8008bd8:	0022      	movs	r2, r4
 8008bda:	002b      	movs	r3, r5
 8008bdc:	2000      	movs	r0, #0
 8008bde:	4940      	ldr	r1, [pc, #256]	; (8008ce0 <_dtoa_r+0x698>)
 8008be0:	f7f9 fc3e 	bl	8002460 <__aeabi_dsub>
 8008be4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008be6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008be8:	f7f7 fc3c 	bl	8000464 <__aeabi_dcmplt>
 8008bec:	2800      	cmp	r0, #0
 8008bee:	d000      	beq.n	8008bf2 <_dtoa_r+0x5aa>
 8008bf0:	e0d2      	b.n	8008d98 <_dtoa_r+0x750>
 8008bf2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008bf4:	9a08      	ldr	r2, [sp, #32]
 8008bf6:	4293      	cmp	r3, r2
 8008bf8:	d100      	bne.n	8008bfc <_dtoa_r+0x5b4>
 8008bfa:	e770      	b.n	8008ade <_dtoa_r+0x496>
 8008bfc:	9810      	ldr	r0, [sp, #64]	; 0x40
 8008bfe:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008c00:	2200      	movs	r2, #0
 8008c02:	4b38      	ldr	r3, [pc, #224]	; (8008ce4 <_dtoa_r+0x69c>)
 8008c04:	f7f9 f9c0 	bl	8001f88 <__aeabi_dmul>
 8008c08:	4b36      	ldr	r3, [pc, #216]	; (8008ce4 <_dtoa_r+0x69c>)
 8008c0a:	9010      	str	r0, [sp, #64]	; 0x40
 8008c0c:	9111      	str	r1, [sp, #68]	; 0x44
 8008c0e:	2200      	movs	r2, #0
 8008c10:	0020      	movs	r0, r4
 8008c12:	0029      	movs	r1, r5
 8008c14:	f7f9 f9b8 	bl	8001f88 <__aeabi_dmul>
 8008c18:	9b08      	ldr	r3, [sp, #32]
 8008c1a:	0004      	movs	r4, r0
 8008c1c:	000d      	movs	r5, r1
 8008c1e:	9317      	str	r3, [sp, #92]	; 0x5c
 8008c20:	e7be      	b.n	8008ba0 <_dtoa_r+0x558>
 8008c22:	9808      	ldr	r0, [sp, #32]
 8008c24:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008c26:	f7f9 f9af 	bl	8001f88 <__aeabi_dmul>
 8008c2a:	9a06      	ldr	r2, [sp, #24]
 8008c2c:	9b06      	ldr	r3, [sp, #24]
 8008c2e:	4694      	mov	ip, r2
 8008c30:	9308      	str	r3, [sp, #32]
 8008c32:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008c34:	9010      	str	r0, [sp, #64]	; 0x40
 8008c36:	9111      	str	r1, [sp, #68]	; 0x44
 8008c38:	4463      	add	r3, ip
 8008c3a:	9319      	str	r3, [sp, #100]	; 0x64
 8008c3c:	0029      	movs	r1, r5
 8008c3e:	0020      	movs	r0, r4
 8008c40:	f7f9 ffbe 	bl	8002bc0 <__aeabi_d2iz>
 8008c44:	9017      	str	r0, [sp, #92]	; 0x5c
 8008c46:	f7f9 fff1 	bl	8002c2c <__aeabi_i2d>
 8008c4a:	0002      	movs	r2, r0
 8008c4c:	000b      	movs	r3, r1
 8008c4e:	0020      	movs	r0, r4
 8008c50:	0029      	movs	r1, r5
 8008c52:	f7f9 fc05 	bl	8002460 <__aeabi_dsub>
 8008c56:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008c58:	9a08      	ldr	r2, [sp, #32]
 8008c5a:	3330      	adds	r3, #48	; 0x30
 8008c5c:	7013      	strb	r3, [r2, #0]
 8008c5e:	0013      	movs	r3, r2
 8008c60:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008c62:	3301      	adds	r3, #1
 8008c64:	0004      	movs	r4, r0
 8008c66:	000d      	movs	r5, r1
 8008c68:	9308      	str	r3, [sp, #32]
 8008c6a:	4293      	cmp	r3, r2
 8008c6c:	d12c      	bne.n	8008cc8 <_dtoa_r+0x680>
 8008c6e:	9810      	ldr	r0, [sp, #64]	; 0x40
 8008c70:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008c72:	9a06      	ldr	r2, [sp, #24]
 8008c74:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008c76:	4694      	mov	ip, r2
 8008c78:	4463      	add	r3, ip
 8008c7a:	2200      	movs	r2, #0
 8008c7c:	9308      	str	r3, [sp, #32]
 8008c7e:	4b1e      	ldr	r3, [pc, #120]	; (8008cf8 <_dtoa_r+0x6b0>)
 8008c80:	f7f8 fa44 	bl	800110c <__aeabi_dadd>
 8008c84:	0002      	movs	r2, r0
 8008c86:	000b      	movs	r3, r1
 8008c88:	0020      	movs	r0, r4
 8008c8a:	0029      	movs	r1, r5
 8008c8c:	f7f7 fbfe 	bl	800048c <__aeabi_dcmpgt>
 8008c90:	2800      	cmp	r0, #0
 8008c92:	d000      	beq.n	8008c96 <_dtoa_r+0x64e>
 8008c94:	e080      	b.n	8008d98 <_dtoa_r+0x750>
 8008c96:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008c98:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008c9a:	2000      	movs	r0, #0
 8008c9c:	4916      	ldr	r1, [pc, #88]	; (8008cf8 <_dtoa_r+0x6b0>)
 8008c9e:	f7f9 fbdf 	bl	8002460 <__aeabi_dsub>
 8008ca2:	0002      	movs	r2, r0
 8008ca4:	000b      	movs	r3, r1
 8008ca6:	0020      	movs	r0, r4
 8008ca8:	0029      	movs	r1, r5
 8008caa:	f7f7 fbdb 	bl	8000464 <__aeabi_dcmplt>
 8008cae:	2800      	cmp	r0, #0
 8008cb0:	d100      	bne.n	8008cb4 <_dtoa_r+0x66c>
 8008cb2:	e714      	b.n	8008ade <_dtoa_r+0x496>
 8008cb4:	9b08      	ldr	r3, [sp, #32]
 8008cb6:	001a      	movs	r2, r3
 8008cb8:	3a01      	subs	r2, #1
 8008cba:	9208      	str	r2, [sp, #32]
 8008cbc:	7812      	ldrb	r2, [r2, #0]
 8008cbe:	2a30      	cmp	r2, #48	; 0x30
 8008cc0:	d0f8      	beq.n	8008cb4 <_dtoa_r+0x66c>
 8008cc2:	9308      	str	r3, [sp, #32]
 8008cc4:	9602      	str	r6, [sp, #8]
 8008cc6:	e055      	b.n	8008d74 <_dtoa_r+0x72c>
 8008cc8:	2200      	movs	r2, #0
 8008cca:	4b06      	ldr	r3, [pc, #24]	; (8008ce4 <_dtoa_r+0x69c>)
 8008ccc:	f7f9 f95c 	bl	8001f88 <__aeabi_dmul>
 8008cd0:	0004      	movs	r4, r0
 8008cd2:	000d      	movs	r5, r1
 8008cd4:	e7b2      	b.n	8008c3c <_dtoa_r+0x5f4>
 8008cd6:	46c0      	nop			; (mov r8, r8)
 8008cd8:	0800c250 	.word	0x0800c250
 8008cdc:	0800c228 	.word	0x0800c228
 8008ce0:	3ff00000 	.word	0x3ff00000
 8008ce4:	40240000 	.word	0x40240000
 8008ce8:	401c0000 	.word	0x401c0000
 8008cec:	fcc00000 	.word	0xfcc00000
 8008cf0:	40140000 	.word	0x40140000
 8008cf4:	7cc00000 	.word	0x7cc00000
 8008cf8:	3fe00000 	.word	0x3fe00000
 8008cfc:	9b07      	ldr	r3, [sp, #28]
 8008cfe:	9e06      	ldr	r6, [sp, #24]
 8008d00:	3b01      	subs	r3, #1
 8008d02:	199b      	adds	r3, r3, r6
 8008d04:	930c      	str	r3, [sp, #48]	; 0x30
 8008d06:	9c08      	ldr	r4, [sp, #32]
 8008d08:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008d0a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008d0c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008d0e:	0020      	movs	r0, r4
 8008d10:	0029      	movs	r1, r5
 8008d12:	f7f8 fd37 	bl	8001784 <__aeabi_ddiv>
 8008d16:	f7f9 ff53 	bl	8002bc0 <__aeabi_d2iz>
 8008d1a:	9007      	str	r0, [sp, #28]
 8008d1c:	f7f9 ff86 	bl	8002c2c <__aeabi_i2d>
 8008d20:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008d22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008d24:	f7f9 f930 	bl	8001f88 <__aeabi_dmul>
 8008d28:	0002      	movs	r2, r0
 8008d2a:	000b      	movs	r3, r1
 8008d2c:	0020      	movs	r0, r4
 8008d2e:	0029      	movs	r1, r5
 8008d30:	f7f9 fb96 	bl	8002460 <__aeabi_dsub>
 8008d34:	0033      	movs	r3, r6
 8008d36:	9a07      	ldr	r2, [sp, #28]
 8008d38:	3601      	adds	r6, #1
 8008d3a:	3230      	adds	r2, #48	; 0x30
 8008d3c:	701a      	strb	r2, [r3, #0]
 8008d3e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008d40:	9608      	str	r6, [sp, #32]
 8008d42:	429a      	cmp	r2, r3
 8008d44:	d139      	bne.n	8008dba <_dtoa_r+0x772>
 8008d46:	0002      	movs	r2, r0
 8008d48:	000b      	movs	r3, r1
 8008d4a:	f7f8 f9df 	bl	800110c <__aeabi_dadd>
 8008d4e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008d50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008d52:	0004      	movs	r4, r0
 8008d54:	000d      	movs	r5, r1
 8008d56:	f7f7 fb99 	bl	800048c <__aeabi_dcmpgt>
 8008d5a:	2800      	cmp	r0, #0
 8008d5c:	d11b      	bne.n	8008d96 <_dtoa_r+0x74e>
 8008d5e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008d60:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008d62:	0020      	movs	r0, r4
 8008d64:	0029      	movs	r1, r5
 8008d66:	f7f7 fb77 	bl	8000458 <__aeabi_dcmpeq>
 8008d6a:	2800      	cmp	r0, #0
 8008d6c:	d002      	beq.n	8008d74 <_dtoa_r+0x72c>
 8008d6e:	9b07      	ldr	r3, [sp, #28]
 8008d70:	07db      	lsls	r3, r3, #31
 8008d72:	d410      	bmi.n	8008d96 <_dtoa_r+0x74e>
 8008d74:	0038      	movs	r0, r7
 8008d76:	9905      	ldr	r1, [sp, #20]
 8008d78:	f000 fe80 	bl	8009a7c <_Bfree>
 8008d7c:	2300      	movs	r3, #0
 8008d7e:	9a08      	ldr	r2, [sp, #32]
 8008d80:	9802      	ldr	r0, [sp, #8]
 8008d82:	7013      	strb	r3, [r2, #0]
 8008d84:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008d86:	3001      	adds	r0, #1
 8008d88:	6018      	str	r0, [r3, #0]
 8008d8a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d100      	bne.n	8008d92 <_dtoa_r+0x74a>
 8008d90:	e4a6      	b.n	80086e0 <_dtoa_r+0x98>
 8008d92:	601a      	str	r2, [r3, #0]
 8008d94:	e4a4      	b.n	80086e0 <_dtoa_r+0x98>
 8008d96:	9e02      	ldr	r6, [sp, #8]
 8008d98:	9b08      	ldr	r3, [sp, #32]
 8008d9a:	9308      	str	r3, [sp, #32]
 8008d9c:	3b01      	subs	r3, #1
 8008d9e:	781a      	ldrb	r2, [r3, #0]
 8008da0:	2a39      	cmp	r2, #57	; 0x39
 8008da2:	d106      	bne.n	8008db2 <_dtoa_r+0x76a>
 8008da4:	9a06      	ldr	r2, [sp, #24]
 8008da6:	429a      	cmp	r2, r3
 8008da8:	d1f7      	bne.n	8008d9a <_dtoa_r+0x752>
 8008daa:	2230      	movs	r2, #48	; 0x30
 8008dac:	9906      	ldr	r1, [sp, #24]
 8008dae:	3601      	adds	r6, #1
 8008db0:	700a      	strb	r2, [r1, #0]
 8008db2:	781a      	ldrb	r2, [r3, #0]
 8008db4:	3201      	adds	r2, #1
 8008db6:	701a      	strb	r2, [r3, #0]
 8008db8:	e784      	b.n	8008cc4 <_dtoa_r+0x67c>
 8008dba:	2200      	movs	r2, #0
 8008dbc:	4baa      	ldr	r3, [pc, #680]	; (8009068 <_dtoa_r+0xa20>)
 8008dbe:	f7f9 f8e3 	bl	8001f88 <__aeabi_dmul>
 8008dc2:	2200      	movs	r2, #0
 8008dc4:	2300      	movs	r3, #0
 8008dc6:	0004      	movs	r4, r0
 8008dc8:	000d      	movs	r5, r1
 8008dca:	f7f7 fb45 	bl	8000458 <__aeabi_dcmpeq>
 8008dce:	2800      	cmp	r0, #0
 8008dd0:	d09b      	beq.n	8008d0a <_dtoa_r+0x6c2>
 8008dd2:	e7cf      	b.n	8008d74 <_dtoa_r+0x72c>
 8008dd4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008dd6:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8008dd8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008dda:	2d00      	cmp	r5, #0
 8008ddc:	d012      	beq.n	8008e04 <_dtoa_r+0x7bc>
 8008dde:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008de0:	2a01      	cmp	r2, #1
 8008de2:	dc66      	bgt.n	8008eb2 <_dtoa_r+0x86a>
 8008de4:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008de6:	2a00      	cmp	r2, #0
 8008de8:	d05d      	beq.n	8008ea6 <_dtoa_r+0x85e>
 8008dea:	4aa0      	ldr	r2, [pc, #640]	; (800906c <_dtoa_r+0xa24>)
 8008dec:	189b      	adds	r3, r3, r2
 8008dee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008df0:	2101      	movs	r1, #1
 8008df2:	18d2      	adds	r2, r2, r3
 8008df4:	920a      	str	r2, [sp, #40]	; 0x28
 8008df6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008df8:	0038      	movs	r0, r7
 8008dfa:	18d3      	adds	r3, r2, r3
 8008dfc:	930d      	str	r3, [sp, #52]	; 0x34
 8008dfe:	f000 ff39 	bl	8009c74 <__i2b>
 8008e02:	0005      	movs	r5, r0
 8008e04:	2c00      	cmp	r4, #0
 8008e06:	dd0e      	ble.n	8008e26 <_dtoa_r+0x7de>
 8008e08:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	dd0b      	ble.n	8008e26 <_dtoa_r+0x7de>
 8008e0e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008e10:	0023      	movs	r3, r4
 8008e12:	4294      	cmp	r4, r2
 8008e14:	dd00      	ble.n	8008e18 <_dtoa_r+0x7d0>
 8008e16:	0013      	movs	r3, r2
 8008e18:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008e1a:	1ae4      	subs	r4, r4, r3
 8008e1c:	1ad2      	subs	r2, r2, r3
 8008e1e:	920a      	str	r2, [sp, #40]	; 0x28
 8008e20:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008e22:	1ad3      	subs	r3, r2, r3
 8008e24:	930d      	str	r3, [sp, #52]	; 0x34
 8008e26:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d01f      	beq.n	8008e6c <_dtoa_r+0x824>
 8008e2c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d054      	beq.n	8008edc <_dtoa_r+0x894>
 8008e32:	2e00      	cmp	r6, #0
 8008e34:	dd11      	ble.n	8008e5a <_dtoa_r+0x812>
 8008e36:	0029      	movs	r1, r5
 8008e38:	0032      	movs	r2, r6
 8008e3a:	0038      	movs	r0, r7
 8008e3c:	f000 ffe0 	bl	8009e00 <__pow5mult>
 8008e40:	9a05      	ldr	r2, [sp, #20]
 8008e42:	0001      	movs	r1, r0
 8008e44:	0005      	movs	r5, r0
 8008e46:	0038      	movs	r0, r7
 8008e48:	f000 ff2a 	bl	8009ca0 <__multiply>
 8008e4c:	9905      	ldr	r1, [sp, #20]
 8008e4e:	9014      	str	r0, [sp, #80]	; 0x50
 8008e50:	0038      	movs	r0, r7
 8008e52:	f000 fe13 	bl	8009a7c <_Bfree>
 8008e56:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008e58:	9305      	str	r3, [sp, #20]
 8008e5a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008e5c:	1b9a      	subs	r2, r3, r6
 8008e5e:	42b3      	cmp	r3, r6
 8008e60:	d004      	beq.n	8008e6c <_dtoa_r+0x824>
 8008e62:	0038      	movs	r0, r7
 8008e64:	9905      	ldr	r1, [sp, #20]
 8008e66:	f000 ffcb 	bl	8009e00 <__pow5mult>
 8008e6a:	9005      	str	r0, [sp, #20]
 8008e6c:	2101      	movs	r1, #1
 8008e6e:	0038      	movs	r0, r7
 8008e70:	f000 ff00 	bl	8009c74 <__i2b>
 8008e74:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008e76:	0006      	movs	r6, r0
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	dd31      	ble.n	8008ee0 <_dtoa_r+0x898>
 8008e7c:	001a      	movs	r2, r3
 8008e7e:	0001      	movs	r1, r0
 8008e80:	0038      	movs	r0, r7
 8008e82:	f000 ffbd 	bl	8009e00 <__pow5mult>
 8008e86:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008e88:	0006      	movs	r6, r0
 8008e8a:	2b01      	cmp	r3, #1
 8008e8c:	dd2d      	ble.n	8008eea <_dtoa_r+0x8a2>
 8008e8e:	2300      	movs	r3, #0
 8008e90:	930e      	str	r3, [sp, #56]	; 0x38
 8008e92:	6933      	ldr	r3, [r6, #16]
 8008e94:	3303      	adds	r3, #3
 8008e96:	009b      	lsls	r3, r3, #2
 8008e98:	18f3      	adds	r3, r6, r3
 8008e9a:	6858      	ldr	r0, [r3, #4]
 8008e9c:	f000 fea2 	bl	8009be4 <__hi0bits>
 8008ea0:	2320      	movs	r3, #32
 8008ea2:	1a18      	subs	r0, r3, r0
 8008ea4:	e039      	b.n	8008f1a <_dtoa_r+0x8d2>
 8008ea6:	2336      	movs	r3, #54	; 0x36
 8008ea8:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008eaa:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8008eac:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008eae:	1a9b      	subs	r3, r3, r2
 8008eb0:	e79d      	b.n	8008dee <_dtoa_r+0x7a6>
 8008eb2:	9b07      	ldr	r3, [sp, #28]
 8008eb4:	1e5e      	subs	r6, r3, #1
 8008eb6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008eb8:	42b3      	cmp	r3, r6
 8008eba:	db07      	blt.n	8008ecc <_dtoa_r+0x884>
 8008ebc:	1b9e      	subs	r6, r3, r6
 8008ebe:	9b07      	ldr	r3, [sp, #28]
 8008ec0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	da93      	bge.n	8008dee <_dtoa_r+0x7a6>
 8008ec6:	1ae4      	subs	r4, r4, r3
 8008ec8:	2300      	movs	r3, #0
 8008eca:	e790      	b.n	8008dee <_dtoa_r+0x7a6>
 8008ecc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008ece:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008ed0:	1af3      	subs	r3, r6, r3
 8008ed2:	18d3      	adds	r3, r2, r3
 8008ed4:	960e      	str	r6, [sp, #56]	; 0x38
 8008ed6:	9315      	str	r3, [sp, #84]	; 0x54
 8008ed8:	2600      	movs	r6, #0
 8008eda:	e7f0      	b.n	8008ebe <_dtoa_r+0x876>
 8008edc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008ede:	e7c0      	b.n	8008e62 <_dtoa_r+0x81a>
 8008ee0:	2300      	movs	r3, #0
 8008ee2:	930e      	str	r3, [sp, #56]	; 0x38
 8008ee4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008ee6:	2b01      	cmp	r3, #1
 8008ee8:	dc13      	bgt.n	8008f12 <_dtoa_r+0x8ca>
 8008eea:	2300      	movs	r3, #0
 8008eec:	930e      	str	r3, [sp, #56]	; 0x38
 8008eee:	9b08      	ldr	r3, [sp, #32]
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d10e      	bne.n	8008f12 <_dtoa_r+0x8ca>
 8008ef4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ef6:	031b      	lsls	r3, r3, #12
 8008ef8:	d10b      	bne.n	8008f12 <_dtoa_r+0x8ca>
 8008efa:	4b5d      	ldr	r3, [pc, #372]	; (8009070 <_dtoa_r+0xa28>)
 8008efc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008efe:	4213      	tst	r3, r2
 8008f00:	d007      	beq.n	8008f12 <_dtoa_r+0x8ca>
 8008f02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f04:	3301      	adds	r3, #1
 8008f06:	930a      	str	r3, [sp, #40]	; 0x28
 8008f08:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008f0a:	3301      	adds	r3, #1
 8008f0c:	930d      	str	r3, [sp, #52]	; 0x34
 8008f0e:	2301      	movs	r3, #1
 8008f10:	930e      	str	r3, [sp, #56]	; 0x38
 8008f12:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008f14:	2001      	movs	r0, #1
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d1bb      	bne.n	8008e92 <_dtoa_r+0x84a>
 8008f1a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008f1c:	221f      	movs	r2, #31
 8008f1e:	1818      	adds	r0, r3, r0
 8008f20:	0003      	movs	r3, r0
 8008f22:	4013      	ands	r3, r2
 8008f24:	4210      	tst	r0, r2
 8008f26:	d046      	beq.n	8008fb6 <_dtoa_r+0x96e>
 8008f28:	3201      	adds	r2, #1
 8008f2a:	1ad2      	subs	r2, r2, r3
 8008f2c:	2a04      	cmp	r2, #4
 8008f2e:	dd3f      	ble.n	8008fb0 <_dtoa_r+0x968>
 8008f30:	221c      	movs	r2, #28
 8008f32:	1ad3      	subs	r3, r2, r3
 8008f34:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008f36:	18e4      	adds	r4, r4, r3
 8008f38:	18d2      	adds	r2, r2, r3
 8008f3a:	920a      	str	r2, [sp, #40]	; 0x28
 8008f3c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008f3e:	18d3      	adds	r3, r2, r3
 8008f40:	930d      	str	r3, [sp, #52]	; 0x34
 8008f42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	dd05      	ble.n	8008f54 <_dtoa_r+0x90c>
 8008f48:	001a      	movs	r2, r3
 8008f4a:	0038      	movs	r0, r7
 8008f4c:	9905      	ldr	r1, [sp, #20]
 8008f4e:	f000 ffb3 	bl	8009eb8 <__lshift>
 8008f52:	9005      	str	r0, [sp, #20]
 8008f54:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	dd05      	ble.n	8008f66 <_dtoa_r+0x91e>
 8008f5a:	0031      	movs	r1, r6
 8008f5c:	001a      	movs	r2, r3
 8008f5e:	0038      	movs	r0, r7
 8008f60:	f000 ffaa 	bl	8009eb8 <__lshift>
 8008f64:	0006      	movs	r6, r0
 8008f66:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d026      	beq.n	8008fba <_dtoa_r+0x972>
 8008f6c:	0031      	movs	r1, r6
 8008f6e:	9805      	ldr	r0, [sp, #20]
 8008f70:	f001 f810 	bl	8009f94 <__mcmp>
 8008f74:	2800      	cmp	r0, #0
 8008f76:	da20      	bge.n	8008fba <_dtoa_r+0x972>
 8008f78:	9b02      	ldr	r3, [sp, #8]
 8008f7a:	220a      	movs	r2, #10
 8008f7c:	3b01      	subs	r3, #1
 8008f7e:	9302      	str	r3, [sp, #8]
 8008f80:	0038      	movs	r0, r7
 8008f82:	2300      	movs	r3, #0
 8008f84:	9905      	ldr	r1, [sp, #20]
 8008f86:	f000 fd9d 	bl	8009ac4 <__multadd>
 8008f8a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008f8c:	9005      	str	r0, [sp, #20]
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d100      	bne.n	8008f94 <_dtoa_r+0x94c>
 8008f92:	e166      	b.n	8009262 <_dtoa_r+0xc1a>
 8008f94:	2300      	movs	r3, #0
 8008f96:	0029      	movs	r1, r5
 8008f98:	220a      	movs	r2, #10
 8008f9a:	0038      	movs	r0, r7
 8008f9c:	f000 fd92 	bl	8009ac4 <__multadd>
 8008fa0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008fa2:	0005      	movs	r5, r0
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	dc47      	bgt.n	8009038 <_dtoa_r+0x9f0>
 8008fa8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008faa:	2b02      	cmp	r3, #2
 8008fac:	dc0d      	bgt.n	8008fca <_dtoa_r+0x982>
 8008fae:	e043      	b.n	8009038 <_dtoa_r+0x9f0>
 8008fb0:	2a04      	cmp	r2, #4
 8008fb2:	d0c6      	beq.n	8008f42 <_dtoa_r+0x8fa>
 8008fb4:	0013      	movs	r3, r2
 8008fb6:	331c      	adds	r3, #28
 8008fb8:	e7bc      	b.n	8008f34 <_dtoa_r+0x8ec>
 8008fba:	9b07      	ldr	r3, [sp, #28]
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	dc35      	bgt.n	800902c <_dtoa_r+0x9e4>
 8008fc0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008fc2:	2b02      	cmp	r3, #2
 8008fc4:	dd32      	ble.n	800902c <_dtoa_r+0x9e4>
 8008fc6:	9b07      	ldr	r3, [sp, #28]
 8008fc8:	930c      	str	r3, [sp, #48]	; 0x30
 8008fca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d10c      	bne.n	8008fea <_dtoa_r+0x9a2>
 8008fd0:	0031      	movs	r1, r6
 8008fd2:	2205      	movs	r2, #5
 8008fd4:	0038      	movs	r0, r7
 8008fd6:	f000 fd75 	bl	8009ac4 <__multadd>
 8008fda:	0006      	movs	r6, r0
 8008fdc:	0001      	movs	r1, r0
 8008fde:	9805      	ldr	r0, [sp, #20]
 8008fe0:	f000 ffd8 	bl	8009f94 <__mcmp>
 8008fe4:	2800      	cmp	r0, #0
 8008fe6:	dd00      	ble.n	8008fea <_dtoa_r+0x9a2>
 8008fe8:	e5a5      	b.n	8008b36 <_dtoa_r+0x4ee>
 8008fea:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008fec:	43db      	mvns	r3, r3
 8008fee:	9302      	str	r3, [sp, #8]
 8008ff0:	9b06      	ldr	r3, [sp, #24]
 8008ff2:	9308      	str	r3, [sp, #32]
 8008ff4:	2400      	movs	r4, #0
 8008ff6:	0031      	movs	r1, r6
 8008ff8:	0038      	movs	r0, r7
 8008ffa:	f000 fd3f 	bl	8009a7c <_Bfree>
 8008ffe:	2d00      	cmp	r5, #0
 8009000:	d100      	bne.n	8009004 <_dtoa_r+0x9bc>
 8009002:	e6b7      	b.n	8008d74 <_dtoa_r+0x72c>
 8009004:	2c00      	cmp	r4, #0
 8009006:	d005      	beq.n	8009014 <_dtoa_r+0x9cc>
 8009008:	42ac      	cmp	r4, r5
 800900a:	d003      	beq.n	8009014 <_dtoa_r+0x9cc>
 800900c:	0021      	movs	r1, r4
 800900e:	0038      	movs	r0, r7
 8009010:	f000 fd34 	bl	8009a7c <_Bfree>
 8009014:	0029      	movs	r1, r5
 8009016:	0038      	movs	r0, r7
 8009018:	f000 fd30 	bl	8009a7c <_Bfree>
 800901c:	e6aa      	b.n	8008d74 <_dtoa_r+0x72c>
 800901e:	2600      	movs	r6, #0
 8009020:	0035      	movs	r5, r6
 8009022:	e7e2      	b.n	8008fea <_dtoa_r+0x9a2>
 8009024:	9602      	str	r6, [sp, #8]
 8009026:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8009028:	0035      	movs	r5, r6
 800902a:	e584      	b.n	8008b36 <_dtoa_r+0x4ee>
 800902c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800902e:	2b00      	cmp	r3, #0
 8009030:	d100      	bne.n	8009034 <_dtoa_r+0x9ec>
 8009032:	e0ce      	b.n	80091d2 <_dtoa_r+0xb8a>
 8009034:	9b07      	ldr	r3, [sp, #28]
 8009036:	930c      	str	r3, [sp, #48]	; 0x30
 8009038:	2c00      	cmp	r4, #0
 800903a:	dd05      	ble.n	8009048 <_dtoa_r+0xa00>
 800903c:	0029      	movs	r1, r5
 800903e:	0022      	movs	r2, r4
 8009040:	0038      	movs	r0, r7
 8009042:	f000 ff39 	bl	8009eb8 <__lshift>
 8009046:	0005      	movs	r5, r0
 8009048:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800904a:	0028      	movs	r0, r5
 800904c:	2b00      	cmp	r3, #0
 800904e:	d022      	beq.n	8009096 <_dtoa_r+0xa4e>
 8009050:	0038      	movs	r0, r7
 8009052:	6869      	ldr	r1, [r5, #4]
 8009054:	f000 fcce 	bl	80099f4 <_Balloc>
 8009058:	1e04      	subs	r4, r0, #0
 800905a:	d10f      	bne.n	800907c <_dtoa_r+0xa34>
 800905c:	0002      	movs	r2, r0
 800905e:	4b05      	ldr	r3, [pc, #20]	; (8009074 <_dtoa_r+0xa2c>)
 8009060:	4905      	ldr	r1, [pc, #20]	; (8009078 <_dtoa_r+0xa30>)
 8009062:	f7ff fb06 	bl	8008672 <_dtoa_r+0x2a>
 8009066:	46c0      	nop			; (mov r8, r8)
 8009068:	40240000 	.word	0x40240000
 800906c:	00000433 	.word	0x00000433
 8009070:	7ff00000 	.word	0x7ff00000
 8009074:	0800c140 	.word	0x0800c140
 8009078:	000002ea 	.word	0x000002ea
 800907c:	0029      	movs	r1, r5
 800907e:	692b      	ldr	r3, [r5, #16]
 8009080:	310c      	adds	r1, #12
 8009082:	1c9a      	adds	r2, r3, #2
 8009084:	0092      	lsls	r2, r2, #2
 8009086:	300c      	adds	r0, #12
 8009088:	f000 fcab 	bl	80099e2 <memcpy>
 800908c:	2201      	movs	r2, #1
 800908e:	0021      	movs	r1, r4
 8009090:	0038      	movs	r0, r7
 8009092:	f000 ff11 	bl	8009eb8 <__lshift>
 8009096:	9b06      	ldr	r3, [sp, #24]
 8009098:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800909a:	930a      	str	r3, [sp, #40]	; 0x28
 800909c:	3b01      	subs	r3, #1
 800909e:	189b      	adds	r3, r3, r2
 80090a0:	2201      	movs	r2, #1
 80090a2:	002c      	movs	r4, r5
 80090a4:	0005      	movs	r5, r0
 80090a6:	9314      	str	r3, [sp, #80]	; 0x50
 80090a8:	9b08      	ldr	r3, [sp, #32]
 80090aa:	4013      	ands	r3, r2
 80090ac:	930f      	str	r3, [sp, #60]	; 0x3c
 80090ae:	0031      	movs	r1, r6
 80090b0:	9805      	ldr	r0, [sp, #20]
 80090b2:	f7ff fa3d 	bl	8008530 <quorem>
 80090b6:	0003      	movs	r3, r0
 80090b8:	0021      	movs	r1, r4
 80090ba:	3330      	adds	r3, #48	; 0x30
 80090bc:	900d      	str	r0, [sp, #52]	; 0x34
 80090be:	9805      	ldr	r0, [sp, #20]
 80090c0:	9307      	str	r3, [sp, #28]
 80090c2:	f000 ff67 	bl	8009f94 <__mcmp>
 80090c6:	002a      	movs	r2, r5
 80090c8:	900e      	str	r0, [sp, #56]	; 0x38
 80090ca:	0031      	movs	r1, r6
 80090cc:	0038      	movs	r0, r7
 80090ce:	f000 ff7d 	bl	8009fcc <__mdiff>
 80090d2:	68c3      	ldr	r3, [r0, #12]
 80090d4:	9008      	str	r0, [sp, #32]
 80090d6:	9310      	str	r3, [sp, #64]	; 0x40
 80090d8:	2301      	movs	r3, #1
 80090da:	930c      	str	r3, [sp, #48]	; 0x30
 80090dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d104      	bne.n	80090ec <_dtoa_r+0xaa4>
 80090e2:	0001      	movs	r1, r0
 80090e4:	9805      	ldr	r0, [sp, #20]
 80090e6:	f000 ff55 	bl	8009f94 <__mcmp>
 80090ea:	900c      	str	r0, [sp, #48]	; 0x30
 80090ec:	0038      	movs	r0, r7
 80090ee:	9908      	ldr	r1, [sp, #32]
 80090f0:	f000 fcc4 	bl	8009a7c <_Bfree>
 80090f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80090f6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80090f8:	3301      	adds	r3, #1
 80090fa:	9308      	str	r3, [sp, #32]
 80090fc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80090fe:	4313      	orrs	r3, r2
 8009100:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009102:	4313      	orrs	r3, r2
 8009104:	d10c      	bne.n	8009120 <_dtoa_r+0xad8>
 8009106:	9b07      	ldr	r3, [sp, #28]
 8009108:	2b39      	cmp	r3, #57	; 0x39
 800910a:	d026      	beq.n	800915a <_dtoa_r+0xb12>
 800910c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800910e:	2b00      	cmp	r3, #0
 8009110:	dd02      	ble.n	8009118 <_dtoa_r+0xad0>
 8009112:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009114:	3331      	adds	r3, #49	; 0x31
 8009116:	9307      	str	r3, [sp, #28]
 8009118:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800911a:	9a07      	ldr	r2, [sp, #28]
 800911c:	701a      	strb	r2, [r3, #0]
 800911e:	e76a      	b.n	8008ff6 <_dtoa_r+0x9ae>
 8009120:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009122:	2b00      	cmp	r3, #0
 8009124:	db04      	blt.n	8009130 <_dtoa_r+0xae8>
 8009126:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8009128:	4313      	orrs	r3, r2
 800912a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800912c:	4313      	orrs	r3, r2
 800912e:	d11f      	bne.n	8009170 <_dtoa_r+0xb28>
 8009130:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009132:	2b00      	cmp	r3, #0
 8009134:	ddf0      	ble.n	8009118 <_dtoa_r+0xad0>
 8009136:	9905      	ldr	r1, [sp, #20]
 8009138:	2201      	movs	r2, #1
 800913a:	0038      	movs	r0, r7
 800913c:	f000 febc 	bl	8009eb8 <__lshift>
 8009140:	0031      	movs	r1, r6
 8009142:	9005      	str	r0, [sp, #20]
 8009144:	f000 ff26 	bl	8009f94 <__mcmp>
 8009148:	2800      	cmp	r0, #0
 800914a:	dc03      	bgt.n	8009154 <_dtoa_r+0xb0c>
 800914c:	d1e4      	bne.n	8009118 <_dtoa_r+0xad0>
 800914e:	9b07      	ldr	r3, [sp, #28]
 8009150:	07db      	lsls	r3, r3, #31
 8009152:	d5e1      	bpl.n	8009118 <_dtoa_r+0xad0>
 8009154:	9b07      	ldr	r3, [sp, #28]
 8009156:	2b39      	cmp	r3, #57	; 0x39
 8009158:	d1db      	bne.n	8009112 <_dtoa_r+0xaca>
 800915a:	2339      	movs	r3, #57	; 0x39
 800915c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800915e:	7013      	strb	r3, [r2, #0]
 8009160:	9b08      	ldr	r3, [sp, #32]
 8009162:	9308      	str	r3, [sp, #32]
 8009164:	3b01      	subs	r3, #1
 8009166:	781a      	ldrb	r2, [r3, #0]
 8009168:	2a39      	cmp	r2, #57	; 0x39
 800916a:	d068      	beq.n	800923e <_dtoa_r+0xbf6>
 800916c:	3201      	adds	r2, #1
 800916e:	e7d5      	b.n	800911c <_dtoa_r+0xad4>
 8009170:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009172:	2b00      	cmp	r3, #0
 8009174:	dd07      	ble.n	8009186 <_dtoa_r+0xb3e>
 8009176:	9b07      	ldr	r3, [sp, #28]
 8009178:	2b39      	cmp	r3, #57	; 0x39
 800917a:	d0ee      	beq.n	800915a <_dtoa_r+0xb12>
 800917c:	9b07      	ldr	r3, [sp, #28]
 800917e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009180:	3301      	adds	r3, #1
 8009182:	7013      	strb	r3, [r2, #0]
 8009184:	e737      	b.n	8008ff6 <_dtoa_r+0x9ae>
 8009186:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009188:	9a07      	ldr	r2, [sp, #28]
 800918a:	701a      	strb	r2, [r3, #0]
 800918c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800918e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009190:	4293      	cmp	r3, r2
 8009192:	d03e      	beq.n	8009212 <_dtoa_r+0xbca>
 8009194:	2300      	movs	r3, #0
 8009196:	220a      	movs	r2, #10
 8009198:	9905      	ldr	r1, [sp, #20]
 800919a:	0038      	movs	r0, r7
 800919c:	f000 fc92 	bl	8009ac4 <__multadd>
 80091a0:	2300      	movs	r3, #0
 80091a2:	9005      	str	r0, [sp, #20]
 80091a4:	220a      	movs	r2, #10
 80091a6:	0021      	movs	r1, r4
 80091a8:	0038      	movs	r0, r7
 80091aa:	42ac      	cmp	r4, r5
 80091ac:	d106      	bne.n	80091bc <_dtoa_r+0xb74>
 80091ae:	f000 fc89 	bl	8009ac4 <__multadd>
 80091b2:	0004      	movs	r4, r0
 80091b4:	0005      	movs	r5, r0
 80091b6:	9b08      	ldr	r3, [sp, #32]
 80091b8:	930a      	str	r3, [sp, #40]	; 0x28
 80091ba:	e778      	b.n	80090ae <_dtoa_r+0xa66>
 80091bc:	f000 fc82 	bl	8009ac4 <__multadd>
 80091c0:	0029      	movs	r1, r5
 80091c2:	0004      	movs	r4, r0
 80091c4:	2300      	movs	r3, #0
 80091c6:	220a      	movs	r2, #10
 80091c8:	0038      	movs	r0, r7
 80091ca:	f000 fc7b 	bl	8009ac4 <__multadd>
 80091ce:	0005      	movs	r5, r0
 80091d0:	e7f1      	b.n	80091b6 <_dtoa_r+0xb6e>
 80091d2:	9b07      	ldr	r3, [sp, #28]
 80091d4:	930c      	str	r3, [sp, #48]	; 0x30
 80091d6:	2400      	movs	r4, #0
 80091d8:	0031      	movs	r1, r6
 80091da:	9805      	ldr	r0, [sp, #20]
 80091dc:	f7ff f9a8 	bl	8008530 <quorem>
 80091e0:	9b06      	ldr	r3, [sp, #24]
 80091e2:	3030      	adds	r0, #48	; 0x30
 80091e4:	5518      	strb	r0, [r3, r4]
 80091e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80091e8:	3401      	adds	r4, #1
 80091ea:	9007      	str	r0, [sp, #28]
 80091ec:	42a3      	cmp	r3, r4
 80091ee:	dd07      	ble.n	8009200 <_dtoa_r+0xbb8>
 80091f0:	2300      	movs	r3, #0
 80091f2:	220a      	movs	r2, #10
 80091f4:	0038      	movs	r0, r7
 80091f6:	9905      	ldr	r1, [sp, #20]
 80091f8:	f000 fc64 	bl	8009ac4 <__multadd>
 80091fc:	9005      	str	r0, [sp, #20]
 80091fe:	e7eb      	b.n	80091d8 <_dtoa_r+0xb90>
 8009200:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009202:	2001      	movs	r0, #1
 8009204:	2b00      	cmp	r3, #0
 8009206:	dd00      	ble.n	800920a <_dtoa_r+0xbc2>
 8009208:	0018      	movs	r0, r3
 800920a:	2400      	movs	r4, #0
 800920c:	9b06      	ldr	r3, [sp, #24]
 800920e:	181b      	adds	r3, r3, r0
 8009210:	9308      	str	r3, [sp, #32]
 8009212:	9905      	ldr	r1, [sp, #20]
 8009214:	2201      	movs	r2, #1
 8009216:	0038      	movs	r0, r7
 8009218:	f000 fe4e 	bl	8009eb8 <__lshift>
 800921c:	0031      	movs	r1, r6
 800921e:	9005      	str	r0, [sp, #20]
 8009220:	f000 feb8 	bl	8009f94 <__mcmp>
 8009224:	2800      	cmp	r0, #0
 8009226:	dc9b      	bgt.n	8009160 <_dtoa_r+0xb18>
 8009228:	d102      	bne.n	8009230 <_dtoa_r+0xbe8>
 800922a:	9b07      	ldr	r3, [sp, #28]
 800922c:	07db      	lsls	r3, r3, #31
 800922e:	d497      	bmi.n	8009160 <_dtoa_r+0xb18>
 8009230:	9b08      	ldr	r3, [sp, #32]
 8009232:	9308      	str	r3, [sp, #32]
 8009234:	3b01      	subs	r3, #1
 8009236:	781a      	ldrb	r2, [r3, #0]
 8009238:	2a30      	cmp	r2, #48	; 0x30
 800923a:	d0fa      	beq.n	8009232 <_dtoa_r+0xbea>
 800923c:	e6db      	b.n	8008ff6 <_dtoa_r+0x9ae>
 800923e:	9a06      	ldr	r2, [sp, #24]
 8009240:	429a      	cmp	r2, r3
 8009242:	d18e      	bne.n	8009162 <_dtoa_r+0xb1a>
 8009244:	9b02      	ldr	r3, [sp, #8]
 8009246:	3301      	adds	r3, #1
 8009248:	9302      	str	r3, [sp, #8]
 800924a:	2331      	movs	r3, #49	; 0x31
 800924c:	e799      	b.n	8009182 <_dtoa_r+0xb3a>
 800924e:	4b09      	ldr	r3, [pc, #36]	; (8009274 <_dtoa_r+0xc2c>)
 8009250:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8009252:	9306      	str	r3, [sp, #24]
 8009254:	4b08      	ldr	r3, [pc, #32]	; (8009278 <_dtoa_r+0xc30>)
 8009256:	2a00      	cmp	r2, #0
 8009258:	d001      	beq.n	800925e <_dtoa_r+0xc16>
 800925a:	f7ff fa3f 	bl	80086dc <_dtoa_r+0x94>
 800925e:	f7ff fa3f 	bl	80086e0 <_dtoa_r+0x98>
 8009262:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009264:	2b00      	cmp	r3, #0
 8009266:	dcb6      	bgt.n	80091d6 <_dtoa_r+0xb8e>
 8009268:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800926a:	2b02      	cmp	r3, #2
 800926c:	dd00      	ble.n	8009270 <_dtoa_r+0xc28>
 800926e:	e6ac      	b.n	8008fca <_dtoa_r+0x982>
 8009270:	e7b1      	b.n	80091d6 <_dtoa_r+0xb8e>
 8009272:	46c0      	nop			; (mov r8, r8)
 8009274:	0800c0c1 	.word	0x0800c0c1
 8009278:	0800c0c9 	.word	0x0800c0c9

0800927c <rshift>:
 800927c:	0002      	movs	r2, r0
 800927e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009280:	6904      	ldr	r4, [r0, #16]
 8009282:	3214      	adds	r2, #20
 8009284:	0013      	movs	r3, r2
 8009286:	b085      	sub	sp, #20
 8009288:	114f      	asrs	r7, r1, #5
 800928a:	42bc      	cmp	r4, r7
 800928c:	dd31      	ble.n	80092f2 <rshift+0x76>
 800928e:	00bb      	lsls	r3, r7, #2
 8009290:	18d3      	adds	r3, r2, r3
 8009292:	261f      	movs	r6, #31
 8009294:	9301      	str	r3, [sp, #4]
 8009296:	000b      	movs	r3, r1
 8009298:	00a5      	lsls	r5, r4, #2
 800929a:	4033      	ands	r3, r6
 800929c:	1955      	adds	r5, r2, r5
 800929e:	9302      	str	r3, [sp, #8]
 80092a0:	4231      	tst	r1, r6
 80092a2:	d10c      	bne.n	80092be <rshift+0x42>
 80092a4:	0016      	movs	r6, r2
 80092a6:	9901      	ldr	r1, [sp, #4]
 80092a8:	428d      	cmp	r5, r1
 80092aa:	d838      	bhi.n	800931e <rshift+0xa2>
 80092ac:	9901      	ldr	r1, [sp, #4]
 80092ae:	2300      	movs	r3, #0
 80092b0:	3903      	subs	r1, #3
 80092b2:	428d      	cmp	r5, r1
 80092b4:	d301      	bcc.n	80092ba <rshift+0x3e>
 80092b6:	1be3      	subs	r3, r4, r7
 80092b8:	009b      	lsls	r3, r3, #2
 80092ba:	18d3      	adds	r3, r2, r3
 80092bc:	e019      	b.n	80092f2 <rshift+0x76>
 80092be:	2120      	movs	r1, #32
 80092c0:	9b02      	ldr	r3, [sp, #8]
 80092c2:	9e01      	ldr	r6, [sp, #4]
 80092c4:	1acb      	subs	r3, r1, r3
 80092c6:	9303      	str	r3, [sp, #12]
 80092c8:	ce02      	ldmia	r6!, {r1}
 80092ca:	9b02      	ldr	r3, [sp, #8]
 80092cc:	4694      	mov	ip, r2
 80092ce:	40d9      	lsrs	r1, r3
 80092d0:	9100      	str	r1, [sp, #0]
 80092d2:	42b5      	cmp	r5, r6
 80092d4:	d816      	bhi.n	8009304 <rshift+0x88>
 80092d6:	9e01      	ldr	r6, [sp, #4]
 80092d8:	2300      	movs	r3, #0
 80092da:	3601      	adds	r6, #1
 80092dc:	42b5      	cmp	r5, r6
 80092de:	d302      	bcc.n	80092e6 <rshift+0x6a>
 80092e0:	1be3      	subs	r3, r4, r7
 80092e2:	009b      	lsls	r3, r3, #2
 80092e4:	3b04      	subs	r3, #4
 80092e6:	9900      	ldr	r1, [sp, #0]
 80092e8:	18d3      	adds	r3, r2, r3
 80092ea:	6019      	str	r1, [r3, #0]
 80092ec:	2900      	cmp	r1, #0
 80092ee:	d000      	beq.n	80092f2 <rshift+0x76>
 80092f0:	3304      	adds	r3, #4
 80092f2:	1a99      	subs	r1, r3, r2
 80092f4:	1089      	asrs	r1, r1, #2
 80092f6:	6101      	str	r1, [r0, #16]
 80092f8:	4293      	cmp	r3, r2
 80092fa:	d101      	bne.n	8009300 <rshift+0x84>
 80092fc:	2300      	movs	r3, #0
 80092fe:	6143      	str	r3, [r0, #20]
 8009300:	b005      	add	sp, #20
 8009302:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009304:	6833      	ldr	r3, [r6, #0]
 8009306:	9903      	ldr	r1, [sp, #12]
 8009308:	408b      	lsls	r3, r1
 800930a:	9900      	ldr	r1, [sp, #0]
 800930c:	4319      	orrs	r1, r3
 800930e:	4663      	mov	r3, ip
 8009310:	c302      	stmia	r3!, {r1}
 8009312:	469c      	mov	ip, r3
 8009314:	ce02      	ldmia	r6!, {r1}
 8009316:	9b02      	ldr	r3, [sp, #8]
 8009318:	40d9      	lsrs	r1, r3
 800931a:	9100      	str	r1, [sp, #0]
 800931c:	e7d9      	b.n	80092d2 <rshift+0x56>
 800931e:	c908      	ldmia	r1!, {r3}
 8009320:	c608      	stmia	r6!, {r3}
 8009322:	e7c1      	b.n	80092a8 <rshift+0x2c>

08009324 <__hexdig_fun>:
 8009324:	0002      	movs	r2, r0
 8009326:	3a30      	subs	r2, #48	; 0x30
 8009328:	0003      	movs	r3, r0
 800932a:	2a09      	cmp	r2, #9
 800932c:	d802      	bhi.n	8009334 <__hexdig_fun+0x10>
 800932e:	3b20      	subs	r3, #32
 8009330:	b2d8      	uxtb	r0, r3
 8009332:	4770      	bx	lr
 8009334:	0002      	movs	r2, r0
 8009336:	3a61      	subs	r2, #97	; 0x61
 8009338:	2a05      	cmp	r2, #5
 800933a:	d801      	bhi.n	8009340 <__hexdig_fun+0x1c>
 800933c:	3b47      	subs	r3, #71	; 0x47
 800933e:	e7f7      	b.n	8009330 <__hexdig_fun+0xc>
 8009340:	001a      	movs	r2, r3
 8009342:	3a41      	subs	r2, #65	; 0x41
 8009344:	2000      	movs	r0, #0
 8009346:	2a05      	cmp	r2, #5
 8009348:	d8f3      	bhi.n	8009332 <__hexdig_fun+0xe>
 800934a:	3b27      	subs	r3, #39	; 0x27
 800934c:	e7f0      	b.n	8009330 <__hexdig_fun+0xc>
	...

08009350 <__gethex>:
 8009350:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009352:	b08d      	sub	sp, #52	; 0x34
 8009354:	930a      	str	r3, [sp, #40]	; 0x28
 8009356:	4bbf      	ldr	r3, [pc, #764]	; (8009654 <__gethex+0x304>)
 8009358:	9005      	str	r0, [sp, #20]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	9109      	str	r1, [sp, #36]	; 0x24
 800935e:	0018      	movs	r0, r3
 8009360:	9202      	str	r2, [sp, #8]
 8009362:	9307      	str	r3, [sp, #28]
 8009364:	f7f6 fed6 	bl	8000114 <strlen>
 8009368:	2202      	movs	r2, #2
 800936a:	9b07      	ldr	r3, [sp, #28]
 800936c:	4252      	negs	r2, r2
 800936e:	181b      	adds	r3, r3, r0
 8009370:	3b01      	subs	r3, #1
 8009372:	781b      	ldrb	r3, [r3, #0]
 8009374:	9003      	str	r0, [sp, #12]
 8009376:	930b      	str	r3, [sp, #44]	; 0x2c
 8009378:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800937a:	6819      	ldr	r1, [r3, #0]
 800937c:	1c8b      	adds	r3, r1, #2
 800937e:	1a52      	subs	r2, r2, r1
 8009380:	18d1      	adds	r1, r2, r3
 8009382:	9301      	str	r3, [sp, #4]
 8009384:	9108      	str	r1, [sp, #32]
 8009386:	9901      	ldr	r1, [sp, #4]
 8009388:	3301      	adds	r3, #1
 800938a:	7808      	ldrb	r0, [r1, #0]
 800938c:	2830      	cmp	r0, #48	; 0x30
 800938e:	d0f7      	beq.n	8009380 <__gethex+0x30>
 8009390:	f7ff ffc8 	bl	8009324 <__hexdig_fun>
 8009394:	2300      	movs	r3, #0
 8009396:	001c      	movs	r4, r3
 8009398:	9304      	str	r3, [sp, #16]
 800939a:	4298      	cmp	r0, r3
 800939c:	d11f      	bne.n	80093de <__gethex+0x8e>
 800939e:	9a03      	ldr	r2, [sp, #12]
 80093a0:	9907      	ldr	r1, [sp, #28]
 80093a2:	9801      	ldr	r0, [sp, #4]
 80093a4:	f001 fe04 	bl	800afb0 <strncmp>
 80093a8:	0007      	movs	r7, r0
 80093aa:	42a0      	cmp	r0, r4
 80093ac:	d000      	beq.n	80093b0 <__gethex+0x60>
 80093ae:	e06b      	b.n	8009488 <__gethex+0x138>
 80093b0:	9b01      	ldr	r3, [sp, #4]
 80093b2:	9a03      	ldr	r2, [sp, #12]
 80093b4:	5c98      	ldrb	r0, [r3, r2]
 80093b6:	189d      	adds	r5, r3, r2
 80093b8:	f7ff ffb4 	bl	8009324 <__hexdig_fun>
 80093bc:	2301      	movs	r3, #1
 80093be:	9304      	str	r3, [sp, #16]
 80093c0:	42a0      	cmp	r0, r4
 80093c2:	d030      	beq.n	8009426 <__gethex+0xd6>
 80093c4:	9501      	str	r5, [sp, #4]
 80093c6:	9b01      	ldr	r3, [sp, #4]
 80093c8:	7818      	ldrb	r0, [r3, #0]
 80093ca:	2830      	cmp	r0, #48	; 0x30
 80093cc:	d009      	beq.n	80093e2 <__gethex+0x92>
 80093ce:	f7ff ffa9 	bl	8009324 <__hexdig_fun>
 80093d2:	4242      	negs	r2, r0
 80093d4:	4142      	adcs	r2, r0
 80093d6:	2301      	movs	r3, #1
 80093d8:	002c      	movs	r4, r5
 80093da:	9204      	str	r2, [sp, #16]
 80093dc:	9308      	str	r3, [sp, #32]
 80093de:	9d01      	ldr	r5, [sp, #4]
 80093e0:	e004      	b.n	80093ec <__gethex+0x9c>
 80093e2:	9b01      	ldr	r3, [sp, #4]
 80093e4:	3301      	adds	r3, #1
 80093e6:	9301      	str	r3, [sp, #4]
 80093e8:	e7ed      	b.n	80093c6 <__gethex+0x76>
 80093ea:	3501      	adds	r5, #1
 80093ec:	7828      	ldrb	r0, [r5, #0]
 80093ee:	f7ff ff99 	bl	8009324 <__hexdig_fun>
 80093f2:	1e07      	subs	r7, r0, #0
 80093f4:	d1f9      	bne.n	80093ea <__gethex+0x9a>
 80093f6:	0028      	movs	r0, r5
 80093f8:	9a03      	ldr	r2, [sp, #12]
 80093fa:	9907      	ldr	r1, [sp, #28]
 80093fc:	f001 fdd8 	bl	800afb0 <strncmp>
 8009400:	2800      	cmp	r0, #0
 8009402:	d10e      	bne.n	8009422 <__gethex+0xd2>
 8009404:	2c00      	cmp	r4, #0
 8009406:	d107      	bne.n	8009418 <__gethex+0xc8>
 8009408:	9b03      	ldr	r3, [sp, #12]
 800940a:	18ed      	adds	r5, r5, r3
 800940c:	002c      	movs	r4, r5
 800940e:	7828      	ldrb	r0, [r5, #0]
 8009410:	f7ff ff88 	bl	8009324 <__hexdig_fun>
 8009414:	2800      	cmp	r0, #0
 8009416:	d102      	bne.n	800941e <__gethex+0xce>
 8009418:	1b64      	subs	r4, r4, r5
 800941a:	00a7      	lsls	r7, r4, #2
 800941c:	e003      	b.n	8009426 <__gethex+0xd6>
 800941e:	3501      	adds	r5, #1
 8009420:	e7f5      	b.n	800940e <__gethex+0xbe>
 8009422:	2c00      	cmp	r4, #0
 8009424:	d1f8      	bne.n	8009418 <__gethex+0xc8>
 8009426:	2220      	movs	r2, #32
 8009428:	782b      	ldrb	r3, [r5, #0]
 800942a:	002e      	movs	r6, r5
 800942c:	4393      	bics	r3, r2
 800942e:	2b50      	cmp	r3, #80	; 0x50
 8009430:	d11d      	bne.n	800946e <__gethex+0x11e>
 8009432:	786b      	ldrb	r3, [r5, #1]
 8009434:	2b2b      	cmp	r3, #43	; 0x2b
 8009436:	d02c      	beq.n	8009492 <__gethex+0x142>
 8009438:	2b2d      	cmp	r3, #45	; 0x2d
 800943a:	d02e      	beq.n	800949a <__gethex+0x14a>
 800943c:	2300      	movs	r3, #0
 800943e:	1c6e      	adds	r6, r5, #1
 8009440:	9306      	str	r3, [sp, #24]
 8009442:	7830      	ldrb	r0, [r6, #0]
 8009444:	f7ff ff6e 	bl	8009324 <__hexdig_fun>
 8009448:	1e43      	subs	r3, r0, #1
 800944a:	b2db      	uxtb	r3, r3
 800944c:	2b18      	cmp	r3, #24
 800944e:	d82b      	bhi.n	80094a8 <__gethex+0x158>
 8009450:	3810      	subs	r0, #16
 8009452:	0004      	movs	r4, r0
 8009454:	7870      	ldrb	r0, [r6, #1]
 8009456:	f7ff ff65 	bl	8009324 <__hexdig_fun>
 800945a:	1e43      	subs	r3, r0, #1
 800945c:	b2db      	uxtb	r3, r3
 800945e:	3601      	adds	r6, #1
 8009460:	2b18      	cmp	r3, #24
 8009462:	d91c      	bls.n	800949e <__gethex+0x14e>
 8009464:	9b06      	ldr	r3, [sp, #24]
 8009466:	2b00      	cmp	r3, #0
 8009468:	d000      	beq.n	800946c <__gethex+0x11c>
 800946a:	4264      	negs	r4, r4
 800946c:	193f      	adds	r7, r7, r4
 800946e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009470:	601e      	str	r6, [r3, #0]
 8009472:	9b04      	ldr	r3, [sp, #16]
 8009474:	2b00      	cmp	r3, #0
 8009476:	d019      	beq.n	80094ac <__gethex+0x15c>
 8009478:	2600      	movs	r6, #0
 800947a:	9b08      	ldr	r3, [sp, #32]
 800947c:	42b3      	cmp	r3, r6
 800947e:	d100      	bne.n	8009482 <__gethex+0x132>
 8009480:	3606      	adds	r6, #6
 8009482:	0030      	movs	r0, r6
 8009484:	b00d      	add	sp, #52	; 0x34
 8009486:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009488:	2301      	movs	r3, #1
 800948a:	2700      	movs	r7, #0
 800948c:	9d01      	ldr	r5, [sp, #4]
 800948e:	9304      	str	r3, [sp, #16]
 8009490:	e7c9      	b.n	8009426 <__gethex+0xd6>
 8009492:	2300      	movs	r3, #0
 8009494:	9306      	str	r3, [sp, #24]
 8009496:	1cae      	adds	r6, r5, #2
 8009498:	e7d3      	b.n	8009442 <__gethex+0xf2>
 800949a:	2301      	movs	r3, #1
 800949c:	e7fa      	b.n	8009494 <__gethex+0x144>
 800949e:	230a      	movs	r3, #10
 80094a0:	435c      	muls	r4, r3
 80094a2:	1824      	adds	r4, r4, r0
 80094a4:	3c10      	subs	r4, #16
 80094a6:	e7d5      	b.n	8009454 <__gethex+0x104>
 80094a8:	002e      	movs	r6, r5
 80094aa:	e7e0      	b.n	800946e <__gethex+0x11e>
 80094ac:	9b01      	ldr	r3, [sp, #4]
 80094ae:	9904      	ldr	r1, [sp, #16]
 80094b0:	1aeb      	subs	r3, r5, r3
 80094b2:	3b01      	subs	r3, #1
 80094b4:	2b07      	cmp	r3, #7
 80094b6:	dc0a      	bgt.n	80094ce <__gethex+0x17e>
 80094b8:	9805      	ldr	r0, [sp, #20]
 80094ba:	f000 fa9b 	bl	80099f4 <_Balloc>
 80094be:	1e04      	subs	r4, r0, #0
 80094c0:	d108      	bne.n	80094d4 <__gethex+0x184>
 80094c2:	0002      	movs	r2, r0
 80094c4:	21de      	movs	r1, #222	; 0xde
 80094c6:	4b64      	ldr	r3, [pc, #400]	; (8009658 <__gethex+0x308>)
 80094c8:	4864      	ldr	r0, [pc, #400]	; (800965c <__gethex+0x30c>)
 80094ca:	f001 fe5d 	bl	800b188 <__assert_func>
 80094ce:	3101      	adds	r1, #1
 80094d0:	105b      	asrs	r3, r3, #1
 80094d2:	e7ef      	b.n	80094b4 <__gethex+0x164>
 80094d4:	0003      	movs	r3, r0
 80094d6:	3314      	adds	r3, #20
 80094d8:	9304      	str	r3, [sp, #16]
 80094da:	9309      	str	r3, [sp, #36]	; 0x24
 80094dc:	2300      	movs	r3, #0
 80094de:	001e      	movs	r6, r3
 80094e0:	9306      	str	r3, [sp, #24]
 80094e2:	9b01      	ldr	r3, [sp, #4]
 80094e4:	42ab      	cmp	r3, r5
 80094e6:	d340      	bcc.n	800956a <__gethex+0x21a>
 80094e8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80094ea:	9b04      	ldr	r3, [sp, #16]
 80094ec:	c540      	stmia	r5!, {r6}
 80094ee:	1aed      	subs	r5, r5, r3
 80094f0:	10ad      	asrs	r5, r5, #2
 80094f2:	0030      	movs	r0, r6
 80094f4:	6125      	str	r5, [r4, #16]
 80094f6:	f000 fb75 	bl	8009be4 <__hi0bits>
 80094fa:	9b02      	ldr	r3, [sp, #8]
 80094fc:	016d      	lsls	r5, r5, #5
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	1a2e      	subs	r6, r5, r0
 8009502:	9301      	str	r3, [sp, #4]
 8009504:	429e      	cmp	r6, r3
 8009506:	dd5a      	ble.n	80095be <__gethex+0x26e>
 8009508:	1af6      	subs	r6, r6, r3
 800950a:	0031      	movs	r1, r6
 800950c:	0020      	movs	r0, r4
 800950e:	f000 ff17 	bl	800a340 <__any_on>
 8009512:	1e05      	subs	r5, r0, #0
 8009514:	d016      	beq.n	8009544 <__gethex+0x1f4>
 8009516:	2501      	movs	r5, #1
 8009518:	211f      	movs	r1, #31
 800951a:	0028      	movs	r0, r5
 800951c:	1e73      	subs	r3, r6, #1
 800951e:	4019      	ands	r1, r3
 8009520:	4088      	lsls	r0, r1
 8009522:	0001      	movs	r1, r0
 8009524:	115a      	asrs	r2, r3, #5
 8009526:	9804      	ldr	r0, [sp, #16]
 8009528:	0092      	lsls	r2, r2, #2
 800952a:	5812      	ldr	r2, [r2, r0]
 800952c:	420a      	tst	r2, r1
 800952e:	d009      	beq.n	8009544 <__gethex+0x1f4>
 8009530:	42ab      	cmp	r3, r5
 8009532:	dd06      	ble.n	8009542 <__gethex+0x1f2>
 8009534:	0020      	movs	r0, r4
 8009536:	1eb1      	subs	r1, r6, #2
 8009538:	f000 ff02 	bl	800a340 <__any_on>
 800953c:	3502      	adds	r5, #2
 800953e:	2800      	cmp	r0, #0
 8009540:	d100      	bne.n	8009544 <__gethex+0x1f4>
 8009542:	2502      	movs	r5, #2
 8009544:	0031      	movs	r1, r6
 8009546:	0020      	movs	r0, r4
 8009548:	f7ff fe98 	bl	800927c <rshift>
 800954c:	19bf      	adds	r7, r7, r6
 800954e:	9b02      	ldr	r3, [sp, #8]
 8009550:	689b      	ldr	r3, [r3, #8]
 8009552:	9303      	str	r3, [sp, #12]
 8009554:	42bb      	cmp	r3, r7
 8009556:	da42      	bge.n	80095de <__gethex+0x28e>
 8009558:	0021      	movs	r1, r4
 800955a:	9805      	ldr	r0, [sp, #20]
 800955c:	f000 fa8e 	bl	8009a7c <_Bfree>
 8009560:	2300      	movs	r3, #0
 8009562:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009564:	26a3      	movs	r6, #163	; 0xa3
 8009566:	6013      	str	r3, [r2, #0]
 8009568:	e78b      	b.n	8009482 <__gethex+0x132>
 800956a:	1e6b      	subs	r3, r5, #1
 800956c:	9308      	str	r3, [sp, #32]
 800956e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009570:	781b      	ldrb	r3, [r3, #0]
 8009572:	4293      	cmp	r3, r2
 8009574:	d014      	beq.n	80095a0 <__gethex+0x250>
 8009576:	9b06      	ldr	r3, [sp, #24]
 8009578:	2b20      	cmp	r3, #32
 800957a:	d104      	bne.n	8009586 <__gethex+0x236>
 800957c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800957e:	c340      	stmia	r3!, {r6}
 8009580:	2600      	movs	r6, #0
 8009582:	9309      	str	r3, [sp, #36]	; 0x24
 8009584:	9606      	str	r6, [sp, #24]
 8009586:	9b08      	ldr	r3, [sp, #32]
 8009588:	7818      	ldrb	r0, [r3, #0]
 800958a:	f7ff fecb 	bl	8009324 <__hexdig_fun>
 800958e:	230f      	movs	r3, #15
 8009590:	4018      	ands	r0, r3
 8009592:	9b06      	ldr	r3, [sp, #24]
 8009594:	9d08      	ldr	r5, [sp, #32]
 8009596:	4098      	lsls	r0, r3
 8009598:	3304      	adds	r3, #4
 800959a:	4306      	orrs	r6, r0
 800959c:	9306      	str	r3, [sp, #24]
 800959e:	e7a0      	b.n	80094e2 <__gethex+0x192>
 80095a0:	2301      	movs	r3, #1
 80095a2:	9a03      	ldr	r2, [sp, #12]
 80095a4:	1a9d      	subs	r5, r3, r2
 80095a6:	9b08      	ldr	r3, [sp, #32]
 80095a8:	195d      	adds	r5, r3, r5
 80095aa:	9b01      	ldr	r3, [sp, #4]
 80095ac:	429d      	cmp	r5, r3
 80095ae:	d3e2      	bcc.n	8009576 <__gethex+0x226>
 80095b0:	0028      	movs	r0, r5
 80095b2:	9907      	ldr	r1, [sp, #28]
 80095b4:	f001 fcfc 	bl	800afb0 <strncmp>
 80095b8:	2800      	cmp	r0, #0
 80095ba:	d1dc      	bne.n	8009576 <__gethex+0x226>
 80095bc:	e791      	b.n	80094e2 <__gethex+0x192>
 80095be:	9b01      	ldr	r3, [sp, #4]
 80095c0:	2500      	movs	r5, #0
 80095c2:	429e      	cmp	r6, r3
 80095c4:	dac3      	bge.n	800954e <__gethex+0x1fe>
 80095c6:	1b9e      	subs	r6, r3, r6
 80095c8:	0021      	movs	r1, r4
 80095ca:	0032      	movs	r2, r6
 80095cc:	9805      	ldr	r0, [sp, #20]
 80095ce:	f000 fc73 	bl	8009eb8 <__lshift>
 80095d2:	0003      	movs	r3, r0
 80095d4:	3314      	adds	r3, #20
 80095d6:	0004      	movs	r4, r0
 80095d8:	1bbf      	subs	r7, r7, r6
 80095da:	9304      	str	r3, [sp, #16]
 80095dc:	e7b7      	b.n	800954e <__gethex+0x1fe>
 80095de:	9b02      	ldr	r3, [sp, #8]
 80095e0:	685e      	ldr	r6, [r3, #4]
 80095e2:	42be      	cmp	r6, r7
 80095e4:	dd71      	ble.n	80096ca <__gethex+0x37a>
 80095e6:	9b01      	ldr	r3, [sp, #4]
 80095e8:	1bf6      	subs	r6, r6, r7
 80095ea:	42b3      	cmp	r3, r6
 80095ec:	dc38      	bgt.n	8009660 <__gethex+0x310>
 80095ee:	9b02      	ldr	r3, [sp, #8]
 80095f0:	68db      	ldr	r3, [r3, #12]
 80095f2:	2b02      	cmp	r3, #2
 80095f4:	d026      	beq.n	8009644 <__gethex+0x2f4>
 80095f6:	2b03      	cmp	r3, #3
 80095f8:	d028      	beq.n	800964c <__gethex+0x2fc>
 80095fa:	2b01      	cmp	r3, #1
 80095fc:	d119      	bne.n	8009632 <__gethex+0x2e2>
 80095fe:	9b01      	ldr	r3, [sp, #4]
 8009600:	42b3      	cmp	r3, r6
 8009602:	d116      	bne.n	8009632 <__gethex+0x2e2>
 8009604:	2b01      	cmp	r3, #1
 8009606:	d10d      	bne.n	8009624 <__gethex+0x2d4>
 8009608:	9b02      	ldr	r3, [sp, #8]
 800960a:	2662      	movs	r6, #98	; 0x62
 800960c:	685b      	ldr	r3, [r3, #4]
 800960e:	9301      	str	r3, [sp, #4]
 8009610:	9a01      	ldr	r2, [sp, #4]
 8009612:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009614:	601a      	str	r2, [r3, #0]
 8009616:	2301      	movs	r3, #1
 8009618:	9a04      	ldr	r2, [sp, #16]
 800961a:	6123      	str	r3, [r4, #16]
 800961c:	6013      	str	r3, [r2, #0]
 800961e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009620:	601c      	str	r4, [r3, #0]
 8009622:	e72e      	b.n	8009482 <__gethex+0x132>
 8009624:	9901      	ldr	r1, [sp, #4]
 8009626:	0020      	movs	r0, r4
 8009628:	3901      	subs	r1, #1
 800962a:	f000 fe89 	bl	800a340 <__any_on>
 800962e:	2800      	cmp	r0, #0
 8009630:	d1ea      	bne.n	8009608 <__gethex+0x2b8>
 8009632:	0021      	movs	r1, r4
 8009634:	9805      	ldr	r0, [sp, #20]
 8009636:	f000 fa21 	bl	8009a7c <_Bfree>
 800963a:	2300      	movs	r3, #0
 800963c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800963e:	2650      	movs	r6, #80	; 0x50
 8009640:	6013      	str	r3, [r2, #0]
 8009642:	e71e      	b.n	8009482 <__gethex+0x132>
 8009644:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009646:	2b00      	cmp	r3, #0
 8009648:	d1f3      	bne.n	8009632 <__gethex+0x2e2>
 800964a:	e7dd      	b.n	8009608 <__gethex+0x2b8>
 800964c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800964e:	2b00      	cmp	r3, #0
 8009650:	d1da      	bne.n	8009608 <__gethex+0x2b8>
 8009652:	e7ee      	b.n	8009632 <__gethex+0x2e2>
 8009654:	0800c1b8 	.word	0x0800c1b8
 8009658:	0800c140 	.word	0x0800c140
 800965c:	0800c151 	.word	0x0800c151
 8009660:	1e77      	subs	r7, r6, #1
 8009662:	2d00      	cmp	r5, #0
 8009664:	d12f      	bne.n	80096c6 <__gethex+0x376>
 8009666:	2f00      	cmp	r7, #0
 8009668:	d004      	beq.n	8009674 <__gethex+0x324>
 800966a:	0039      	movs	r1, r7
 800966c:	0020      	movs	r0, r4
 800966e:	f000 fe67 	bl	800a340 <__any_on>
 8009672:	0005      	movs	r5, r0
 8009674:	231f      	movs	r3, #31
 8009676:	117a      	asrs	r2, r7, #5
 8009678:	401f      	ands	r7, r3
 800967a:	3b1e      	subs	r3, #30
 800967c:	40bb      	lsls	r3, r7
 800967e:	9904      	ldr	r1, [sp, #16]
 8009680:	0092      	lsls	r2, r2, #2
 8009682:	5852      	ldr	r2, [r2, r1]
 8009684:	421a      	tst	r2, r3
 8009686:	d001      	beq.n	800968c <__gethex+0x33c>
 8009688:	2302      	movs	r3, #2
 800968a:	431d      	orrs	r5, r3
 800968c:	9b01      	ldr	r3, [sp, #4]
 800968e:	0031      	movs	r1, r6
 8009690:	1b9b      	subs	r3, r3, r6
 8009692:	2602      	movs	r6, #2
 8009694:	0020      	movs	r0, r4
 8009696:	9301      	str	r3, [sp, #4]
 8009698:	f7ff fdf0 	bl	800927c <rshift>
 800969c:	9b02      	ldr	r3, [sp, #8]
 800969e:	685f      	ldr	r7, [r3, #4]
 80096a0:	2d00      	cmp	r5, #0
 80096a2:	d041      	beq.n	8009728 <__gethex+0x3d8>
 80096a4:	9b02      	ldr	r3, [sp, #8]
 80096a6:	68db      	ldr	r3, [r3, #12]
 80096a8:	2b02      	cmp	r3, #2
 80096aa:	d010      	beq.n	80096ce <__gethex+0x37e>
 80096ac:	2b03      	cmp	r3, #3
 80096ae:	d012      	beq.n	80096d6 <__gethex+0x386>
 80096b0:	2b01      	cmp	r3, #1
 80096b2:	d106      	bne.n	80096c2 <__gethex+0x372>
 80096b4:	07aa      	lsls	r2, r5, #30
 80096b6:	d504      	bpl.n	80096c2 <__gethex+0x372>
 80096b8:	9a04      	ldr	r2, [sp, #16]
 80096ba:	6810      	ldr	r0, [r2, #0]
 80096bc:	4305      	orrs	r5, r0
 80096be:	421d      	tst	r5, r3
 80096c0:	d10c      	bne.n	80096dc <__gethex+0x38c>
 80096c2:	2310      	movs	r3, #16
 80096c4:	e02f      	b.n	8009726 <__gethex+0x3d6>
 80096c6:	2501      	movs	r5, #1
 80096c8:	e7d4      	b.n	8009674 <__gethex+0x324>
 80096ca:	2601      	movs	r6, #1
 80096cc:	e7e8      	b.n	80096a0 <__gethex+0x350>
 80096ce:	2301      	movs	r3, #1
 80096d0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80096d2:	1a9b      	subs	r3, r3, r2
 80096d4:	9313      	str	r3, [sp, #76]	; 0x4c
 80096d6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d0f2      	beq.n	80096c2 <__gethex+0x372>
 80096dc:	6923      	ldr	r3, [r4, #16]
 80096de:	2000      	movs	r0, #0
 80096e0:	9303      	str	r3, [sp, #12]
 80096e2:	009b      	lsls	r3, r3, #2
 80096e4:	9304      	str	r3, [sp, #16]
 80096e6:	0023      	movs	r3, r4
 80096e8:	9a04      	ldr	r2, [sp, #16]
 80096ea:	3314      	adds	r3, #20
 80096ec:	1899      	adds	r1, r3, r2
 80096ee:	681a      	ldr	r2, [r3, #0]
 80096f0:	1c55      	adds	r5, r2, #1
 80096f2:	d01e      	beq.n	8009732 <__gethex+0x3e2>
 80096f4:	3201      	adds	r2, #1
 80096f6:	601a      	str	r2, [r3, #0]
 80096f8:	0023      	movs	r3, r4
 80096fa:	3314      	adds	r3, #20
 80096fc:	2e02      	cmp	r6, #2
 80096fe:	d140      	bne.n	8009782 <__gethex+0x432>
 8009700:	9a02      	ldr	r2, [sp, #8]
 8009702:	9901      	ldr	r1, [sp, #4]
 8009704:	6812      	ldr	r2, [r2, #0]
 8009706:	3a01      	subs	r2, #1
 8009708:	428a      	cmp	r2, r1
 800970a:	d10b      	bne.n	8009724 <__gethex+0x3d4>
 800970c:	114a      	asrs	r2, r1, #5
 800970e:	211f      	movs	r1, #31
 8009710:	9801      	ldr	r0, [sp, #4]
 8009712:	0092      	lsls	r2, r2, #2
 8009714:	4001      	ands	r1, r0
 8009716:	2001      	movs	r0, #1
 8009718:	0005      	movs	r5, r0
 800971a:	408d      	lsls	r5, r1
 800971c:	58d3      	ldr	r3, [r2, r3]
 800971e:	422b      	tst	r3, r5
 8009720:	d000      	beq.n	8009724 <__gethex+0x3d4>
 8009722:	2601      	movs	r6, #1
 8009724:	2320      	movs	r3, #32
 8009726:	431e      	orrs	r6, r3
 8009728:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800972a:	601c      	str	r4, [r3, #0]
 800972c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800972e:	601f      	str	r7, [r3, #0]
 8009730:	e6a7      	b.n	8009482 <__gethex+0x132>
 8009732:	c301      	stmia	r3!, {r0}
 8009734:	4299      	cmp	r1, r3
 8009736:	d8da      	bhi.n	80096ee <__gethex+0x39e>
 8009738:	9b03      	ldr	r3, [sp, #12]
 800973a:	68a2      	ldr	r2, [r4, #8]
 800973c:	4293      	cmp	r3, r2
 800973e:	db17      	blt.n	8009770 <__gethex+0x420>
 8009740:	6863      	ldr	r3, [r4, #4]
 8009742:	9805      	ldr	r0, [sp, #20]
 8009744:	1c59      	adds	r1, r3, #1
 8009746:	f000 f955 	bl	80099f4 <_Balloc>
 800974a:	1e05      	subs	r5, r0, #0
 800974c:	d103      	bne.n	8009756 <__gethex+0x406>
 800974e:	0002      	movs	r2, r0
 8009750:	2184      	movs	r1, #132	; 0x84
 8009752:	4b1c      	ldr	r3, [pc, #112]	; (80097c4 <__gethex+0x474>)
 8009754:	e6b8      	b.n	80094c8 <__gethex+0x178>
 8009756:	0021      	movs	r1, r4
 8009758:	6923      	ldr	r3, [r4, #16]
 800975a:	310c      	adds	r1, #12
 800975c:	1c9a      	adds	r2, r3, #2
 800975e:	0092      	lsls	r2, r2, #2
 8009760:	300c      	adds	r0, #12
 8009762:	f000 f93e 	bl	80099e2 <memcpy>
 8009766:	0021      	movs	r1, r4
 8009768:	9805      	ldr	r0, [sp, #20]
 800976a:	f000 f987 	bl	8009a7c <_Bfree>
 800976e:	002c      	movs	r4, r5
 8009770:	6923      	ldr	r3, [r4, #16]
 8009772:	1c5a      	adds	r2, r3, #1
 8009774:	6122      	str	r2, [r4, #16]
 8009776:	2201      	movs	r2, #1
 8009778:	3304      	adds	r3, #4
 800977a:	009b      	lsls	r3, r3, #2
 800977c:	18e3      	adds	r3, r4, r3
 800977e:	605a      	str	r2, [r3, #4]
 8009780:	e7ba      	b.n	80096f8 <__gethex+0x3a8>
 8009782:	6922      	ldr	r2, [r4, #16]
 8009784:	9903      	ldr	r1, [sp, #12]
 8009786:	428a      	cmp	r2, r1
 8009788:	dd09      	ble.n	800979e <__gethex+0x44e>
 800978a:	2101      	movs	r1, #1
 800978c:	0020      	movs	r0, r4
 800978e:	f7ff fd75 	bl	800927c <rshift>
 8009792:	9b02      	ldr	r3, [sp, #8]
 8009794:	3701      	adds	r7, #1
 8009796:	689b      	ldr	r3, [r3, #8]
 8009798:	42bb      	cmp	r3, r7
 800979a:	dac2      	bge.n	8009722 <__gethex+0x3d2>
 800979c:	e6dc      	b.n	8009558 <__gethex+0x208>
 800979e:	221f      	movs	r2, #31
 80097a0:	9d01      	ldr	r5, [sp, #4]
 80097a2:	9901      	ldr	r1, [sp, #4]
 80097a4:	2601      	movs	r6, #1
 80097a6:	4015      	ands	r5, r2
 80097a8:	4211      	tst	r1, r2
 80097aa:	d0bb      	beq.n	8009724 <__gethex+0x3d4>
 80097ac:	9a04      	ldr	r2, [sp, #16]
 80097ae:	189b      	adds	r3, r3, r2
 80097b0:	3b04      	subs	r3, #4
 80097b2:	6818      	ldr	r0, [r3, #0]
 80097b4:	f000 fa16 	bl	8009be4 <__hi0bits>
 80097b8:	2320      	movs	r3, #32
 80097ba:	1b5d      	subs	r5, r3, r5
 80097bc:	42a8      	cmp	r0, r5
 80097be:	dbe4      	blt.n	800978a <__gethex+0x43a>
 80097c0:	e7b0      	b.n	8009724 <__gethex+0x3d4>
 80097c2:	46c0      	nop			; (mov r8, r8)
 80097c4:	0800c140 	.word	0x0800c140

080097c8 <L_shift>:
 80097c8:	2308      	movs	r3, #8
 80097ca:	b570      	push	{r4, r5, r6, lr}
 80097cc:	2520      	movs	r5, #32
 80097ce:	1a9a      	subs	r2, r3, r2
 80097d0:	0092      	lsls	r2, r2, #2
 80097d2:	1aad      	subs	r5, r5, r2
 80097d4:	6843      	ldr	r3, [r0, #4]
 80097d6:	6806      	ldr	r6, [r0, #0]
 80097d8:	001c      	movs	r4, r3
 80097da:	40ac      	lsls	r4, r5
 80097dc:	40d3      	lsrs	r3, r2
 80097de:	4334      	orrs	r4, r6
 80097e0:	6004      	str	r4, [r0, #0]
 80097e2:	6043      	str	r3, [r0, #4]
 80097e4:	3004      	adds	r0, #4
 80097e6:	4288      	cmp	r0, r1
 80097e8:	d3f4      	bcc.n	80097d4 <L_shift+0xc>
 80097ea:	bd70      	pop	{r4, r5, r6, pc}

080097ec <__match>:
 80097ec:	b530      	push	{r4, r5, lr}
 80097ee:	6803      	ldr	r3, [r0, #0]
 80097f0:	780c      	ldrb	r4, [r1, #0]
 80097f2:	3301      	adds	r3, #1
 80097f4:	2c00      	cmp	r4, #0
 80097f6:	d102      	bne.n	80097fe <__match+0x12>
 80097f8:	6003      	str	r3, [r0, #0]
 80097fa:	2001      	movs	r0, #1
 80097fc:	bd30      	pop	{r4, r5, pc}
 80097fe:	781a      	ldrb	r2, [r3, #0]
 8009800:	0015      	movs	r5, r2
 8009802:	3d41      	subs	r5, #65	; 0x41
 8009804:	2d19      	cmp	r5, #25
 8009806:	d800      	bhi.n	800980a <__match+0x1e>
 8009808:	3220      	adds	r2, #32
 800980a:	3101      	adds	r1, #1
 800980c:	42a2      	cmp	r2, r4
 800980e:	d0ef      	beq.n	80097f0 <__match+0x4>
 8009810:	2000      	movs	r0, #0
 8009812:	e7f3      	b.n	80097fc <__match+0x10>

08009814 <__hexnan>:
 8009814:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009816:	680b      	ldr	r3, [r1, #0]
 8009818:	b08b      	sub	sp, #44	; 0x2c
 800981a:	9201      	str	r2, [sp, #4]
 800981c:	9901      	ldr	r1, [sp, #4]
 800981e:	115a      	asrs	r2, r3, #5
 8009820:	0092      	lsls	r2, r2, #2
 8009822:	188a      	adds	r2, r1, r2
 8009824:	9202      	str	r2, [sp, #8]
 8009826:	0019      	movs	r1, r3
 8009828:	221f      	movs	r2, #31
 800982a:	4011      	ands	r1, r2
 800982c:	9008      	str	r0, [sp, #32]
 800982e:	9106      	str	r1, [sp, #24]
 8009830:	4213      	tst	r3, r2
 8009832:	d002      	beq.n	800983a <__hexnan+0x26>
 8009834:	9b02      	ldr	r3, [sp, #8]
 8009836:	3304      	adds	r3, #4
 8009838:	9302      	str	r3, [sp, #8]
 800983a:	9b02      	ldr	r3, [sp, #8]
 800983c:	2500      	movs	r5, #0
 800983e:	1f1e      	subs	r6, r3, #4
 8009840:	0037      	movs	r7, r6
 8009842:	0034      	movs	r4, r6
 8009844:	9b08      	ldr	r3, [sp, #32]
 8009846:	6035      	str	r5, [r6, #0]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	9507      	str	r5, [sp, #28]
 800984c:	9305      	str	r3, [sp, #20]
 800984e:	9503      	str	r5, [sp, #12]
 8009850:	9b05      	ldr	r3, [sp, #20]
 8009852:	3301      	adds	r3, #1
 8009854:	9309      	str	r3, [sp, #36]	; 0x24
 8009856:	9b05      	ldr	r3, [sp, #20]
 8009858:	785b      	ldrb	r3, [r3, #1]
 800985a:	9304      	str	r3, [sp, #16]
 800985c:	2b00      	cmp	r3, #0
 800985e:	d028      	beq.n	80098b2 <__hexnan+0x9e>
 8009860:	9804      	ldr	r0, [sp, #16]
 8009862:	f7ff fd5f 	bl	8009324 <__hexdig_fun>
 8009866:	2800      	cmp	r0, #0
 8009868:	d154      	bne.n	8009914 <__hexnan+0x100>
 800986a:	9b04      	ldr	r3, [sp, #16]
 800986c:	2b20      	cmp	r3, #32
 800986e:	d819      	bhi.n	80098a4 <__hexnan+0x90>
 8009870:	9b03      	ldr	r3, [sp, #12]
 8009872:	9a07      	ldr	r2, [sp, #28]
 8009874:	4293      	cmp	r3, r2
 8009876:	dd12      	ble.n	800989e <__hexnan+0x8a>
 8009878:	42bc      	cmp	r4, r7
 800987a:	d206      	bcs.n	800988a <__hexnan+0x76>
 800987c:	2d07      	cmp	r5, #7
 800987e:	dc04      	bgt.n	800988a <__hexnan+0x76>
 8009880:	002a      	movs	r2, r5
 8009882:	0039      	movs	r1, r7
 8009884:	0020      	movs	r0, r4
 8009886:	f7ff ff9f 	bl	80097c8 <L_shift>
 800988a:	9b01      	ldr	r3, [sp, #4]
 800988c:	2508      	movs	r5, #8
 800988e:	429c      	cmp	r4, r3
 8009890:	d905      	bls.n	800989e <__hexnan+0x8a>
 8009892:	1f27      	subs	r7, r4, #4
 8009894:	2500      	movs	r5, #0
 8009896:	003c      	movs	r4, r7
 8009898:	9b03      	ldr	r3, [sp, #12]
 800989a:	603d      	str	r5, [r7, #0]
 800989c:	9307      	str	r3, [sp, #28]
 800989e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80098a0:	9305      	str	r3, [sp, #20]
 80098a2:	e7d5      	b.n	8009850 <__hexnan+0x3c>
 80098a4:	9b04      	ldr	r3, [sp, #16]
 80098a6:	2b29      	cmp	r3, #41	; 0x29
 80098a8:	d159      	bne.n	800995e <__hexnan+0x14a>
 80098aa:	9b05      	ldr	r3, [sp, #20]
 80098ac:	9a08      	ldr	r2, [sp, #32]
 80098ae:	3302      	adds	r3, #2
 80098b0:	6013      	str	r3, [r2, #0]
 80098b2:	9b03      	ldr	r3, [sp, #12]
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d052      	beq.n	800995e <__hexnan+0x14a>
 80098b8:	42bc      	cmp	r4, r7
 80098ba:	d206      	bcs.n	80098ca <__hexnan+0xb6>
 80098bc:	2d07      	cmp	r5, #7
 80098be:	dc04      	bgt.n	80098ca <__hexnan+0xb6>
 80098c0:	002a      	movs	r2, r5
 80098c2:	0039      	movs	r1, r7
 80098c4:	0020      	movs	r0, r4
 80098c6:	f7ff ff7f 	bl	80097c8 <L_shift>
 80098ca:	9b01      	ldr	r3, [sp, #4]
 80098cc:	429c      	cmp	r4, r3
 80098ce:	d935      	bls.n	800993c <__hexnan+0x128>
 80098d0:	001a      	movs	r2, r3
 80098d2:	0023      	movs	r3, r4
 80098d4:	cb02      	ldmia	r3!, {r1}
 80098d6:	c202      	stmia	r2!, {r1}
 80098d8:	429e      	cmp	r6, r3
 80098da:	d2fb      	bcs.n	80098d4 <__hexnan+0xc0>
 80098dc:	9b02      	ldr	r3, [sp, #8]
 80098de:	1c61      	adds	r1, r4, #1
 80098e0:	1eda      	subs	r2, r3, #3
 80098e2:	2304      	movs	r3, #4
 80098e4:	4291      	cmp	r1, r2
 80098e6:	d805      	bhi.n	80098f4 <__hexnan+0xe0>
 80098e8:	9b02      	ldr	r3, [sp, #8]
 80098ea:	3b04      	subs	r3, #4
 80098ec:	1b1b      	subs	r3, r3, r4
 80098ee:	089b      	lsrs	r3, r3, #2
 80098f0:	3301      	adds	r3, #1
 80098f2:	009b      	lsls	r3, r3, #2
 80098f4:	9a01      	ldr	r2, [sp, #4]
 80098f6:	18d3      	adds	r3, r2, r3
 80098f8:	2200      	movs	r2, #0
 80098fa:	c304      	stmia	r3!, {r2}
 80098fc:	429e      	cmp	r6, r3
 80098fe:	d2fc      	bcs.n	80098fa <__hexnan+0xe6>
 8009900:	6833      	ldr	r3, [r6, #0]
 8009902:	2b00      	cmp	r3, #0
 8009904:	d104      	bne.n	8009910 <__hexnan+0xfc>
 8009906:	9b01      	ldr	r3, [sp, #4]
 8009908:	429e      	cmp	r6, r3
 800990a:	d126      	bne.n	800995a <__hexnan+0x146>
 800990c:	2301      	movs	r3, #1
 800990e:	6033      	str	r3, [r6, #0]
 8009910:	2005      	movs	r0, #5
 8009912:	e025      	b.n	8009960 <__hexnan+0x14c>
 8009914:	9b03      	ldr	r3, [sp, #12]
 8009916:	3501      	adds	r5, #1
 8009918:	3301      	adds	r3, #1
 800991a:	9303      	str	r3, [sp, #12]
 800991c:	2d08      	cmp	r5, #8
 800991e:	dd06      	ble.n	800992e <__hexnan+0x11a>
 8009920:	9b01      	ldr	r3, [sp, #4]
 8009922:	429c      	cmp	r4, r3
 8009924:	d9bb      	bls.n	800989e <__hexnan+0x8a>
 8009926:	2300      	movs	r3, #0
 8009928:	2501      	movs	r5, #1
 800992a:	3c04      	subs	r4, #4
 800992c:	6023      	str	r3, [r4, #0]
 800992e:	220f      	movs	r2, #15
 8009930:	6823      	ldr	r3, [r4, #0]
 8009932:	4010      	ands	r0, r2
 8009934:	011b      	lsls	r3, r3, #4
 8009936:	4318      	orrs	r0, r3
 8009938:	6020      	str	r0, [r4, #0]
 800993a:	e7b0      	b.n	800989e <__hexnan+0x8a>
 800993c:	9b06      	ldr	r3, [sp, #24]
 800993e:	2b00      	cmp	r3, #0
 8009940:	d0de      	beq.n	8009900 <__hexnan+0xec>
 8009942:	2120      	movs	r1, #32
 8009944:	9a06      	ldr	r2, [sp, #24]
 8009946:	9b02      	ldr	r3, [sp, #8]
 8009948:	1a89      	subs	r1, r1, r2
 800994a:	2201      	movs	r2, #1
 800994c:	4252      	negs	r2, r2
 800994e:	40ca      	lsrs	r2, r1
 8009950:	3b04      	subs	r3, #4
 8009952:	6819      	ldr	r1, [r3, #0]
 8009954:	400a      	ands	r2, r1
 8009956:	601a      	str	r2, [r3, #0]
 8009958:	e7d2      	b.n	8009900 <__hexnan+0xec>
 800995a:	3e04      	subs	r6, #4
 800995c:	e7d0      	b.n	8009900 <__hexnan+0xec>
 800995e:	2004      	movs	r0, #4
 8009960:	b00b      	add	sp, #44	; 0x2c
 8009962:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009964 <_localeconv_r>:
 8009964:	4800      	ldr	r0, [pc, #0]	; (8009968 <_localeconv_r+0x4>)
 8009966:	4770      	bx	lr
 8009968:	200001ac 	.word	0x200001ac

0800996c <_lseek_r>:
 800996c:	b570      	push	{r4, r5, r6, lr}
 800996e:	0004      	movs	r4, r0
 8009970:	0008      	movs	r0, r1
 8009972:	0011      	movs	r1, r2
 8009974:	001a      	movs	r2, r3
 8009976:	2300      	movs	r3, #0
 8009978:	4d05      	ldr	r5, [pc, #20]	; (8009990 <_lseek_r+0x24>)
 800997a:	602b      	str	r3, [r5, #0]
 800997c:	f7fa fa12 	bl	8003da4 <_lseek>
 8009980:	1c43      	adds	r3, r0, #1
 8009982:	d103      	bne.n	800998c <_lseek_r+0x20>
 8009984:	682b      	ldr	r3, [r5, #0]
 8009986:	2b00      	cmp	r3, #0
 8009988:	d000      	beq.n	800998c <_lseek_r+0x20>
 800998a:	6023      	str	r3, [r4, #0]
 800998c:	bd70      	pop	{r4, r5, r6, pc}
 800998e:	46c0      	nop			; (mov r8, r8)
 8009990:	200009e0 	.word	0x200009e0

08009994 <malloc>:
 8009994:	b510      	push	{r4, lr}
 8009996:	4b03      	ldr	r3, [pc, #12]	; (80099a4 <malloc+0x10>)
 8009998:	0001      	movs	r1, r0
 800999a:	6818      	ldr	r0, [r3, #0]
 800999c:	f000 fd8c 	bl	800a4b8 <_malloc_r>
 80099a0:	bd10      	pop	{r4, pc}
 80099a2:	46c0      	nop			; (mov r8, r8)
 80099a4:	20000054 	.word	0x20000054

080099a8 <__ascii_mbtowc>:
 80099a8:	b082      	sub	sp, #8
 80099aa:	2900      	cmp	r1, #0
 80099ac:	d100      	bne.n	80099b0 <__ascii_mbtowc+0x8>
 80099ae:	a901      	add	r1, sp, #4
 80099b0:	1e10      	subs	r0, r2, #0
 80099b2:	d006      	beq.n	80099c2 <__ascii_mbtowc+0x1a>
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d006      	beq.n	80099c6 <__ascii_mbtowc+0x1e>
 80099b8:	7813      	ldrb	r3, [r2, #0]
 80099ba:	600b      	str	r3, [r1, #0]
 80099bc:	7810      	ldrb	r0, [r2, #0]
 80099be:	1e43      	subs	r3, r0, #1
 80099c0:	4198      	sbcs	r0, r3
 80099c2:	b002      	add	sp, #8
 80099c4:	4770      	bx	lr
 80099c6:	2002      	movs	r0, #2
 80099c8:	4240      	negs	r0, r0
 80099ca:	e7fa      	b.n	80099c2 <__ascii_mbtowc+0x1a>

080099cc <memchr>:
 80099cc:	b2c9      	uxtb	r1, r1
 80099ce:	1882      	adds	r2, r0, r2
 80099d0:	4290      	cmp	r0, r2
 80099d2:	d101      	bne.n	80099d8 <memchr+0xc>
 80099d4:	2000      	movs	r0, #0
 80099d6:	4770      	bx	lr
 80099d8:	7803      	ldrb	r3, [r0, #0]
 80099da:	428b      	cmp	r3, r1
 80099dc:	d0fb      	beq.n	80099d6 <memchr+0xa>
 80099de:	3001      	adds	r0, #1
 80099e0:	e7f6      	b.n	80099d0 <memchr+0x4>

080099e2 <memcpy>:
 80099e2:	2300      	movs	r3, #0
 80099e4:	b510      	push	{r4, lr}
 80099e6:	429a      	cmp	r2, r3
 80099e8:	d100      	bne.n	80099ec <memcpy+0xa>
 80099ea:	bd10      	pop	{r4, pc}
 80099ec:	5ccc      	ldrb	r4, [r1, r3]
 80099ee:	54c4      	strb	r4, [r0, r3]
 80099f0:	3301      	adds	r3, #1
 80099f2:	e7f8      	b.n	80099e6 <memcpy+0x4>

080099f4 <_Balloc>:
 80099f4:	b570      	push	{r4, r5, r6, lr}
 80099f6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80099f8:	0006      	movs	r6, r0
 80099fa:	000c      	movs	r4, r1
 80099fc:	2d00      	cmp	r5, #0
 80099fe:	d10e      	bne.n	8009a1e <_Balloc+0x2a>
 8009a00:	2010      	movs	r0, #16
 8009a02:	f7ff ffc7 	bl	8009994 <malloc>
 8009a06:	1e02      	subs	r2, r0, #0
 8009a08:	6270      	str	r0, [r6, #36]	; 0x24
 8009a0a:	d104      	bne.n	8009a16 <_Balloc+0x22>
 8009a0c:	2166      	movs	r1, #102	; 0x66
 8009a0e:	4b19      	ldr	r3, [pc, #100]	; (8009a74 <_Balloc+0x80>)
 8009a10:	4819      	ldr	r0, [pc, #100]	; (8009a78 <_Balloc+0x84>)
 8009a12:	f001 fbb9 	bl	800b188 <__assert_func>
 8009a16:	6045      	str	r5, [r0, #4]
 8009a18:	6085      	str	r5, [r0, #8]
 8009a1a:	6005      	str	r5, [r0, #0]
 8009a1c:	60c5      	str	r5, [r0, #12]
 8009a1e:	6a75      	ldr	r5, [r6, #36]	; 0x24
 8009a20:	68eb      	ldr	r3, [r5, #12]
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d013      	beq.n	8009a4e <_Balloc+0x5a>
 8009a26:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8009a28:	00a2      	lsls	r2, r4, #2
 8009a2a:	68db      	ldr	r3, [r3, #12]
 8009a2c:	189b      	adds	r3, r3, r2
 8009a2e:	6818      	ldr	r0, [r3, #0]
 8009a30:	2800      	cmp	r0, #0
 8009a32:	d118      	bne.n	8009a66 <_Balloc+0x72>
 8009a34:	2101      	movs	r1, #1
 8009a36:	000d      	movs	r5, r1
 8009a38:	40a5      	lsls	r5, r4
 8009a3a:	1d6a      	adds	r2, r5, #5
 8009a3c:	0030      	movs	r0, r6
 8009a3e:	0092      	lsls	r2, r2, #2
 8009a40:	f000 fca1 	bl	800a386 <_calloc_r>
 8009a44:	2800      	cmp	r0, #0
 8009a46:	d00c      	beq.n	8009a62 <_Balloc+0x6e>
 8009a48:	6044      	str	r4, [r0, #4]
 8009a4a:	6085      	str	r5, [r0, #8]
 8009a4c:	e00d      	b.n	8009a6a <_Balloc+0x76>
 8009a4e:	2221      	movs	r2, #33	; 0x21
 8009a50:	2104      	movs	r1, #4
 8009a52:	0030      	movs	r0, r6
 8009a54:	f000 fc97 	bl	800a386 <_calloc_r>
 8009a58:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8009a5a:	60e8      	str	r0, [r5, #12]
 8009a5c:	68db      	ldr	r3, [r3, #12]
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d1e1      	bne.n	8009a26 <_Balloc+0x32>
 8009a62:	2000      	movs	r0, #0
 8009a64:	bd70      	pop	{r4, r5, r6, pc}
 8009a66:	6802      	ldr	r2, [r0, #0]
 8009a68:	601a      	str	r2, [r3, #0]
 8009a6a:	2300      	movs	r3, #0
 8009a6c:	6103      	str	r3, [r0, #16]
 8009a6e:	60c3      	str	r3, [r0, #12]
 8009a70:	e7f8      	b.n	8009a64 <_Balloc+0x70>
 8009a72:	46c0      	nop			; (mov r8, r8)
 8009a74:	0800c0ce 	.word	0x0800c0ce
 8009a78:	0800c1cc 	.word	0x0800c1cc

08009a7c <_Bfree>:
 8009a7c:	b570      	push	{r4, r5, r6, lr}
 8009a7e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009a80:	0005      	movs	r5, r0
 8009a82:	000c      	movs	r4, r1
 8009a84:	2e00      	cmp	r6, #0
 8009a86:	d10e      	bne.n	8009aa6 <_Bfree+0x2a>
 8009a88:	2010      	movs	r0, #16
 8009a8a:	f7ff ff83 	bl	8009994 <malloc>
 8009a8e:	1e02      	subs	r2, r0, #0
 8009a90:	6268      	str	r0, [r5, #36]	; 0x24
 8009a92:	d104      	bne.n	8009a9e <_Bfree+0x22>
 8009a94:	218a      	movs	r1, #138	; 0x8a
 8009a96:	4b09      	ldr	r3, [pc, #36]	; (8009abc <_Bfree+0x40>)
 8009a98:	4809      	ldr	r0, [pc, #36]	; (8009ac0 <_Bfree+0x44>)
 8009a9a:	f001 fb75 	bl	800b188 <__assert_func>
 8009a9e:	6046      	str	r6, [r0, #4]
 8009aa0:	6086      	str	r6, [r0, #8]
 8009aa2:	6006      	str	r6, [r0, #0]
 8009aa4:	60c6      	str	r6, [r0, #12]
 8009aa6:	2c00      	cmp	r4, #0
 8009aa8:	d007      	beq.n	8009aba <_Bfree+0x3e>
 8009aaa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009aac:	6862      	ldr	r2, [r4, #4]
 8009aae:	68db      	ldr	r3, [r3, #12]
 8009ab0:	0092      	lsls	r2, r2, #2
 8009ab2:	189b      	adds	r3, r3, r2
 8009ab4:	681a      	ldr	r2, [r3, #0]
 8009ab6:	6022      	str	r2, [r4, #0]
 8009ab8:	601c      	str	r4, [r3, #0]
 8009aba:	bd70      	pop	{r4, r5, r6, pc}
 8009abc:	0800c0ce 	.word	0x0800c0ce
 8009ac0:	0800c1cc 	.word	0x0800c1cc

08009ac4 <__multadd>:
 8009ac4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009ac6:	000e      	movs	r6, r1
 8009ac8:	9001      	str	r0, [sp, #4]
 8009aca:	000c      	movs	r4, r1
 8009acc:	001d      	movs	r5, r3
 8009ace:	2000      	movs	r0, #0
 8009ad0:	690f      	ldr	r7, [r1, #16]
 8009ad2:	3614      	adds	r6, #20
 8009ad4:	6833      	ldr	r3, [r6, #0]
 8009ad6:	3001      	adds	r0, #1
 8009ad8:	b299      	uxth	r1, r3
 8009ada:	4351      	muls	r1, r2
 8009adc:	0c1b      	lsrs	r3, r3, #16
 8009ade:	4353      	muls	r3, r2
 8009ae0:	1949      	adds	r1, r1, r5
 8009ae2:	0c0d      	lsrs	r5, r1, #16
 8009ae4:	195b      	adds	r3, r3, r5
 8009ae6:	0c1d      	lsrs	r5, r3, #16
 8009ae8:	b289      	uxth	r1, r1
 8009aea:	041b      	lsls	r3, r3, #16
 8009aec:	185b      	adds	r3, r3, r1
 8009aee:	c608      	stmia	r6!, {r3}
 8009af0:	4287      	cmp	r7, r0
 8009af2:	dcef      	bgt.n	8009ad4 <__multadd+0x10>
 8009af4:	2d00      	cmp	r5, #0
 8009af6:	d022      	beq.n	8009b3e <__multadd+0x7a>
 8009af8:	68a3      	ldr	r3, [r4, #8]
 8009afa:	42bb      	cmp	r3, r7
 8009afc:	dc19      	bgt.n	8009b32 <__multadd+0x6e>
 8009afe:	6863      	ldr	r3, [r4, #4]
 8009b00:	9801      	ldr	r0, [sp, #4]
 8009b02:	1c59      	adds	r1, r3, #1
 8009b04:	f7ff ff76 	bl	80099f4 <_Balloc>
 8009b08:	1e06      	subs	r6, r0, #0
 8009b0a:	d105      	bne.n	8009b18 <__multadd+0x54>
 8009b0c:	0002      	movs	r2, r0
 8009b0e:	21b5      	movs	r1, #181	; 0xb5
 8009b10:	4b0c      	ldr	r3, [pc, #48]	; (8009b44 <__multadd+0x80>)
 8009b12:	480d      	ldr	r0, [pc, #52]	; (8009b48 <__multadd+0x84>)
 8009b14:	f001 fb38 	bl	800b188 <__assert_func>
 8009b18:	0021      	movs	r1, r4
 8009b1a:	6923      	ldr	r3, [r4, #16]
 8009b1c:	310c      	adds	r1, #12
 8009b1e:	1c9a      	adds	r2, r3, #2
 8009b20:	0092      	lsls	r2, r2, #2
 8009b22:	300c      	adds	r0, #12
 8009b24:	f7ff ff5d 	bl	80099e2 <memcpy>
 8009b28:	0021      	movs	r1, r4
 8009b2a:	9801      	ldr	r0, [sp, #4]
 8009b2c:	f7ff ffa6 	bl	8009a7c <_Bfree>
 8009b30:	0034      	movs	r4, r6
 8009b32:	1d3b      	adds	r3, r7, #4
 8009b34:	009b      	lsls	r3, r3, #2
 8009b36:	18e3      	adds	r3, r4, r3
 8009b38:	605d      	str	r5, [r3, #4]
 8009b3a:	1c7b      	adds	r3, r7, #1
 8009b3c:	6123      	str	r3, [r4, #16]
 8009b3e:	0020      	movs	r0, r4
 8009b40:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009b42:	46c0      	nop			; (mov r8, r8)
 8009b44:	0800c140 	.word	0x0800c140
 8009b48:	0800c1cc 	.word	0x0800c1cc

08009b4c <__s2b>:
 8009b4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009b4e:	0006      	movs	r6, r0
 8009b50:	0018      	movs	r0, r3
 8009b52:	000c      	movs	r4, r1
 8009b54:	3008      	adds	r0, #8
 8009b56:	2109      	movs	r1, #9
 8009b58:	9301      	str	r3, [sp, #4]
 8009b5a:	0015      	movs	r5, r2
 8009b5c:	f7f6 fb80 	bl	8000260 <__divsi3>
 8009b60:	2301      	movs	r3, #1
 8009b62:	2100      	movs	r1, #0
 8009b64:	4283      	cmp	r3, r0
 8009b66:	db0a      	blt.n	8009b7e <__s2b+0x32>
 8009b68:	0030      	movs	r0, r6
 8009b6a:	f7ff ff43 	bl	80099f4 <_Balloc>
 8009b6e:	1e01      	subs	r1, r0, #0
 8009b70:	d108      	bne.n	8009b84 <__s2b+0x38>
 8009b72:	0002      	movs	r2, r0
 8009b74:	4b19      	ldr	r3, [pc, #100]	; (8009bdc <__s2b+0x90>)
 8009b76:	481a      	ldr	r0, [pc, #104]	; (8009be0 <__s2b+0x94>)
 8009b78:	31ce      	adds	r1, #206	; 0xce
 8009b7a:	f001 fb05 	bl	800b188 <__assert_func>
 8009b7e:	005b      	lsls	r3, r3, #1
 8009b80:	3101      	adds	r1, #1
 8009b82:	e7ef      	b.n	8009b64 <__s2b+0x18>
 8009b84:	9b08      	ldr	r3, [sp, #32]
 8009b86:	6143      	str	r3, [r0, #20]
 8009b88:	2301      	movs	r3, #1
 8009b8a:	6103      	str	r3, [r0, #16]
 8009b8c:	2d09      	cmp	r5, #9
 8009b8e:	dd18      	ble.n	8009bc2 <__s2b+0x76>
 8009b90:	0023      	movs	r3, r4
 8009b92:	3309      	adds	r3, #9
 8009b94:	001f      	movs	r7, r3
 8009b96:	9300      	str	r3, [sp, #0]
 8009b98:	1964      	adds	r4, r4, r5
 8009b9a:	783b      	ldrb	r3, [r7, #0]
 8009b9c:	220a      	movs	r2, #10
 8009b9e:	0030      	movs	r0, r6
 8009ba0:	3b30      	subs	r3, #48	; 0x30
 8009ba2:	f7ff ff8f 	bl	8009ac4 <__multadd>
 8009ba6:	3701      	adds	r7, #1
 8009ba8:	0001      	movs	r1, r0
 8009baa:	42a7      	cmp	r7, r4
 8009bac:	d1f5      	bne.n	8009b9a <__s2b+0x4e>
 8009bae:	002c      	movs	r4, r5
 8009bb0:	9b00      	ldr	r3, [sp, #0]
 8009bb2:	3c08      	subs	r4, #8
 8009bb4:	191c      	adds	r4, r3, r4
 8009bb6:	002f      	movs	r7, r5
 8009bb8:	9b01      	ldr	r3, [sp, #4]
 8009bba:	429f      	cmp	r7, r3
 8009bbc:	db04      	blt.n	8009bc8 <__s2b+0x7c>
 8009bbe:	0008      	movs	r0, r1
 8009bc0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009bc2:	2509      	movs	r5, #9
 8009bc4:	340a      	adds	r4, #10
 8009bc6:	e7f6      	b.n	8009bb6 <__s2b+0x6a>
 8009bc8:	1b63      	subs	r3, r4, r5
 8009bca:	5ddb      	ldrb	r3, [r3, r7]
 8009bcc:	220a      	movs	r2, #10
 8009bce:	0030      	movs	r0, r6
 8009bd0:	3b30      	subs	r3, #48	; 0x30
 8009bd2:	f7ff ff77 	bl	8009ac4 <__multadd>
 8009bd6:	3701      	adds	r7, #1
 8009bd8:	0001      	movs	r1, r0
 8009bda:	e7ed      	b.n	8009bb8 <__s2b+0x6c>
 8009bdc:	0800c140 	.word	0x0800c140
 8009be0:	0800c1cc 	.word	0x0800c1cc

08009be4 <__hi0bits>:
 8009be4:	0003      	movs	r3, r0
 8009be6:	0c02      	lsrs	r2, r0, #16
 8009be8:	2000      	movs	r0, #0
 8009bea:	4282      	cmp	r2, r0
 8009bec:	d101      	bne.n	8009bf2 <__hi0bits+0xe>
 8009bee:	041b      	lsls	r3, r3, #16
 8009bf0:	3010      	adds	r0, #16
 8009bf2:	0e1a      	lsrs	r2, r3, #24
 8009bf4:	d101      	bne.n	8009bfa <__hi0bits+0x16>
 8009bf6:	3008      	adds	r0, #8
 8009bf8:	021b      	lsls	r3, r3, #8
 8009bfa:	0f1a      	lsrs	r2, r3, #28
 8009bfc:	d101      	bne.n	8009c02 <__hi0bits+0x1e>
 8009bfe:	3004      	adds	r0, #4
 8009c00:	011b      	lsls	r3, r3, #4
 8009c02:	0f9a      	lsrs	r2, r3, #30
 8009c04:	d101      	bne.n	8009c0a <__hi0bits+0x26>
 8009c06:	3002      	adds	r0, #2
 8009c08:	009b      	lsls	r3, r3, #2
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	db03      	blt.n	8009c16 <__hi0bits+0x32>
 8009c0e:	3001      	adds	r0, #1
 8009c10:	005b      	lsls	r3, r3, #1
 8009c12:	d400      	bmi.n	8009c16 <__hi0bits+0x32>
 8009c14:	2020      	movs	r0, #32
 8009c16:	4770      	bx	lr

08009c18 <__lo0bits>:
 8009c18:	6803      	ldr	r3, [r0, #0]
 8009c1a:	0002      	movs	r2, r0
 8009c1c:	2107      	movs	r1, #7
 8009c1e:	0018      	movs	r0, r3
 8009c20:	4008      	ands	r0, r1
 8009c22:	420b      	tst	r3, r1
 8009c24:	d00d      	beq.n	8009c42 <__lo0bits+0x2a>
 8009c26:	3906      	subs	r1, #6
 8009c28:	2000      	movs	r0, #0
 8009c2a:	420b      	tst	r3, r1
 8009c2c:	d105      	bne.n	8009c3a <__lo0bits+0x22>
 8009c2e:	3002      	adds	r0, #2
 8009c30:	4203      	tst	r3, r0
 8009c32:	d003      	beq.n	8009c3c <__lo0bits+0x24>
 8009c34:	40cb      	lsrs	r3, r1
 8009c36:	0008      	movs	r0, r1
 8009c38:	6013      	str	r3, [r2, #0]
 8009c3a:	4770      	bx	lr
 8009c3c:	089b      	lsrs	r3, r3, #2
 8009c3e:	6013      	str	r3, [r2, #0]
 8009c40:	e7fb      	b.n	8009c3a <__lo0bits+0x22>
 8009c42:	b299      	uxth	r1, r3
 8009c44:	2900      	cmp	r1, #0
 8009c46:	d101      	bne.n	8009c4c <__lo0bits+0x34>
 8009c48:	2010      	movs	r0, #16
 8009c4a:	0c1b      	lsrs	r3, r3, #16
 8009c4c:	b2d9      	uxtb	r1, r3
 8009c4e:	2900      	cmp	r1, #0
 8009c50:	d101      	bne.n	8009c56 <__lo0bits+0x3e>
 8009c52:	3008      	adds	r0, #8
 8009c54:	0a1b      	lsrs	r3, r3, #8
 8009c56:	0719      	lsls	r1, r3, #28
 8009c58:	d101      	bne.n	8009c5e <__lo0bits+0x46>
 8009c5a:	3004      	adds	r0, #4
 8009c5c:	091b      	lsrs	r3, r3, #4
 8009c5e:	0799      	lsls	r1, r3, #30
 8009c60:	d101      	bne.n	8009c66 <__lo0bits+0x4e>
 8009c62:	3002      	adds	r0, #2
 8009c64:	089b      	lsrs	r3, r3, #2
 8009c66:	07d9      	lsls	r1, r3, #31
 8009c68:	d4e9      	bmi.n	8009c3e <__lo0bits+0x26>
 8009c6a:	3001      	adds	r0, #1
 8009c6c:	085b      	lsrs	r3, r3, #1
 8009c6e:	d1e6      	bne.n	8009c3e <__lo0bits+0x26>
 8009c70:	2020      	movs	r0, #32
 8009c72:	e7e2      	b.n	8009c3a <__lo0bits+0x22>

08009c74 <__i2b>:
 8009c74:	b510      	push	{r4, lr}
 8009c76:	000c      	movs	r4, r1
 8009c78:	2101      	movs	r1, #1
 8009c7a:	f7ff febb 	bl	80099f4 <_Balloc>
 8009c7e:	2800      	cmp	r0, #0
 8009c80:	d106      	bne.n	8009c90 <__i2b+0x1c>
 8009c82:	21a0      	movs	r1, #160	; 0xa0
 8009c84:	0002      	movs	r2, r0
 8009c86:	4b04      	ldr	r3, [pc, #16]	; (8009c98 <__i2b+0x24>)
 8009c88:	4804      	ldr	r0, [pc, #16]	; (8009c9c <__i2b+0x28>)
 8009c8a:	0049      	lsls	r1, r1, #1
 8009c8c:	f001 fa7c 	bl	800b188 <__assert_func>
 8009c90:	2301      	movs	r3, #1
 8009c92:	6144      	str	r4, [r0, #20]
 8009c94:	6103      	str	r3, [r0, #16]
 8009c96:	bd10      	pop	{r4, pc}
 8009c98:	0800c140 	.word	0x0800c140
 8009c9c:	0800c1cc 	.word	0x0800c1cc

08009ca0 <__multiply>:
 8009ca0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009ca2:	690b      	ldr	r3, [r1, #16]
 8009ca4:	0014      	movs	r4, r2
 8009ca6:	6912      	ldr	r2, [r2, #16]
 8009ca8:	000d      	movs	r5, r1
 8009caa:	b089      	sub	sp, #36	; 0x24
 8009cac:	4293      	cmp	r3, r2
 8009cae:	da01      	bge.n	8009cb4 <__multiply+0x14>
 8009cb0:	0025      	movs	r5, r4
 8009cb2:	000c      	movs	r4, r1
 8009cb4:	692f      	ldr	r7, [r5, #16]
 8009cb6:	6926      	ldr	r6, [r4, #16]
 8009cb8:	6869      	ldr	r1, [r5, #4]
 8009cba:	19bb      	adds	r3, r7, r6
 8009cbc:	9302      	str	r3, [sp, #8]
 8009cbe:	68ab      	ldr	r3, [r5, #8]
 8009cc0:	19ba      	adds	r2, r7, r6
 8009cc2:	4293      	cmp	r3, r2
 8009cc4:	da00      	bge.n	8009cc8 <__multiply+0x28>
 8009cc6:	3101      	adds	r1, #1
 8009cc8:	f7ff fe94 	bl	80099f4 <_Balloc>
 8009ccc:	9001      	str	r0, [sp, #4]
 8009cce:	2800      	cmp	r0, #0
 8009cd0:	d106      	bne.n	8009ce0 <__multiply+0x40>
 8009cd2:	215e      	movs	r1, #94	; 0x5e
 8009cd4:	0002      	movs	r2, r0
 8009cd6:	4b48      	ldr	r3, [pc, #288]	; (8009df8 <__multiply+0x158>)
 8009cd8:	4848      	ldr	r0, [pc, #288]	; (8009dfc <__multiply+0x15c>)
 8009cda:	31ff      	adds	r1, #255	; 0xff
 8009cdc:	f001 fa54 	bl	800b188 <__assert_func>
 8009ce0:	9b01      	ldr	r3, [sp, #4]
 8009ce2:	2200      	movs	r2, #0
 8009ce4:	3314      	adds	r3, #20
 8009ce6:	469c      	mov	ip, r3
 8009ce8:	19bb      	adds	r3, r7, r6
 8009cea:	009b      	lsls	r3, r3, #2
 8009cec:	4463      	add	r3, ip
 8009cee:	9303      	str	r3, [sp, #12]
 8009cf0:	4663      	mov	r3, ip
 8009cf2:	9903      	ldr	r1, [sp, #12]
 8009cf4:	428b      	cmp	r3, r1
 8009cf6:	d32c      	bcc.n	8009d52 <__multiply+0xb2>
 8009cf8:	002b      	movs	r3, r5
 8009cfa:	0022      	movs	r2, r4
 8009cfc:	3314      	adds	r3, #20
 8009cfe:	00bf      	lsls	r7, r7, #2
 8009d00:	3214      	adds	r2, #20
 8009d02:	9306      	str	r3, [sp, #24]
 8009d04:	00b6      	lsls	r6, r6, #2
 8009d06:	19db      	adds	r3, r3, r7
 8009d08:	9304      	str	r3, [sp, #16]
 8009d0a:	1993      	adds	r3, r2, r6
 8009d0c:	9307      	str	r3, [sp, #28]
 8009d0e:	2304      	movs	r3, #4
 8009d10:	9305      	str	r3, [sp, #20]
 8009d12:	002b      	movs	r3, r5
 8009d14:	9904      	ldr	r1, [sp, #16]
 8009d16:	3315      	adds	r3, #21
 8009d18:	9200      	str	r2, [sp, #0]
 8009d1a:	4299      	cmp	r1, r3
 8009d1c:	d305      	bcc.n	8009d2a <__multiply+0x8a>
 8009d1e:	1b4b      	subs	r3, r1, r5
 8009d20:	3b15      	subs	r3, #21
 8009d22:	089b      	lsrs	r3, r3, #2
 8009d24:	3301      	adds	r3, #1
 8009d26:	009b      	lsls	r3, r3, #2
 8009d28:	9305      	str	r3, [sp, #20]
 8009d2a:	9b07      	ldr	r3, [sp, #28]
 8009d2c:	9a00      	ldr	r2, [sp, #0]
 8009d2e:	429a      	cmp	r2, r3
 8009d30:	d311      	bcc.n	8009d56 <__multiply+0xb6>
 8009d32:	9b02      	ldr	r3, [sp, #8]
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	dd06      	ble.n	8009d46 <__multiply+0xa6>
 8009d38:	9b03      	ldr	r3, [sp, #12]
 8009d3a:	3b04      	subs	r3, #4
 8009d3c:	9303      	str	r3, [sp, #12]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	9300      	str	r3, [sp, #0]
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d053      	beq.n	8009dee <__multiply+0x14e>
 8009d46:	9b01      	ldr	r3, [sp, #4]
 8009d48:	9a02      	ldr	r2, [sp, #8]
 8009d4a:	0018      	movs	r0, r3
 8009d4c:	611a      	str	r2, [r3, #16]
 8009d4e:	b009      	add	sp, #36	; 0x24
 8009d50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009d52:	c304      	stmia	r3!, {r2}
 8009d54:	e7cd      	b.n	8009cf2 <__multiply+0x52>
 8009d56:	9b00      	ldr	r3, [sp, #0]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	b298      	uxth	r0, r3
 8009d5c:	2800      	cmp	r0, #0
 8009d5e:	d01b      	beq.n	8009d98 <__multiply+0xf8>
 8009d60:	4667      	mov	r7, ip
 8009d62:	2400      	movs	r4, #0
 8009d64:	9e06      	ldr	r6, [sp, #24]
 8009d66:	ce02      	ldmia	r6!, {r1}
 8009d68:	683a      	ldr	r2, [r7, #0]
 8009d6a:	b28b      	uxth	r3, r1
 8009d6c:	4343      	muls	r3, r0
 8009d6e:	b292      	uxth	r2, r2
 8009d70:	189b      	adds	r3, r3, r2
 8009d72:	191b      	adds	r3, r3, r4
 8009d74:	0c0c      	lsrs	r4, r1, #16
 8009d76:	4344      	muls	r4, r0
 8009d78:	683a      	ldr	r2, [r7, #0]
 8009d7a:	0c11      	lsrs	r1, r2, #16
 8009d7c:	1861      	adds	r1, r4, r1
 8009d7e:	0c1c      	lsrs	r4, r3, #16
 8009d80:	1909      	adds	r1, r1, r4
 8009d82:	0c0c      	lsrs	r4, r1, #16
 8009d84:	b29b      	uxth	r3, r3
 8009d86:	0409      	lsls	r1, r1, #16
 8009d88:	430b      	orrs	r3, r1
 8009d8a:	c708      	stmia	r7!, {r3}
 8009d8c:	9b04      	ldr	r3, [sp, #16]
 8009d8e:	42b3      	cmp	r3, r6
 8009d90:	d8e9      	bhi.n	8009d66 <__multiply+0xc6>
 8009d92:	4663      	mov	r3, ip
 8009d94:	9a05      	ldr	r2, [sp, #20]
 8009d96:	509c      	str	r4, [r3, r2]
 8009d98:	9b00      	ldr	r3, [sp, #0]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	0c1e      	lsrs	r6, r3, #16
 8009d9e:	d020      	beq.n	8009de2 <__multiply+0x142>
 8009da0:	4663      	mov	r3, ip
 8009da2:	002c      	movs	r4, r5
 8009da4:	4660      	mov	r0, ip
 8009da6:	2700      	movs	r7, #0
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	3414      	adds	r4, #20
 8009dac:	6822      	ldr	r2, [r4, #0]
 8009dae:	b29b      	uxth	r3, r3
 8009db0:	b291      	uxth	r1, r2
 8009db2:	4371      	muls	r1, r6
 8009db4:	6802      	ldr	r2, [r0, #0]
 8009db6:	0c12      	lsrs	r2, r2, #16
 8009db8:	1889      	adds	r1, r1, r2
 8009dba:	19cf      	adds	r7, r1, r7
 8009dbc:	0439      	lsls	r1, r7, #16
 8009dbe:	430b      	orrs	r3, r1
 8009dc0:	6003      	str	r3, [r0, #0]
 8009dc2:	cc02      	ldmia	r4!, {r1}
 8009dc4:	6843      	ldr	r3, [r0, #4]
 8009dc6:	0c09      	lsrs	r1, r1, #16
 8009dc8:	4371      	muls	r1, r6
 8009dca:	b29b      	uxth	r3, r3
 8009dcc:	0c3f      	lsrs	r7, r7, #16
 8009dce:	18cb      	adds	r3, r1, r3
 8009dd0:	9a04      	ldr	r2, [sp, #16]
 8009dd2:	19db      	adds	r3, r3, r7
 8009dd4:	0c1f      	lsrs	r7, r3, #16
 8009dd6:	3004      	adds	r0, #4
 8009dd8:	42a2      	cmp	r2, r4
 8009dda:	d8e7      	bhi.n	8009dac <__multiply+0x10c>
 8009ddc:	4662      	mov	r2, ip
 8009dde:	9905      	ldr	r1, [sp, #20]
 8009de0:	5053      	str	r3, [r2, r1]
 8009de2:	9b00      	ldr	r3, [sp, #0]
 8009de4:	3304      	adds	r3, #4
 8009de6:	9300      	str	r3, [sp, #0]
 8009de8:	2304      	movs	r3, #4
 8009dea:	449c      	add	ip, r3
 8009dec:	e79d      	b.n	8009d2a <__multiply+0x8a>
 8009dee:	9b02      	ldr	r3, [sp, #8]
 8009df0:	3b01      	subs	r3, #1
 8009df2:	9302      	str	r3, [sp, #8]
 8009df4:	e79d      	b.n	8009d32 <__multiply+0x92>
 8009df6:	46c0      	nop			; (mov r8, r8)
 8009df8:	0800c140 	.word	0x0800c140
 8009dfc:	0800c1cc 	.word	0x0800c1cc

08009e00 <__pow5mult>:
 8009e00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009e02:	2303      	movs	r3, #3
 8009e04:	0015      	movs	r5, r2
 8009e06:	0007      	movs	r7, r0
 8009e08:	000e      	movs	r6, r1
 8009e0a:	401a      	ands	r2, r3
 8009e0c:	421d      	tst	r5, r3
 8009e0e:	d008      	beq.n	8009e22 <__pow5mult+0x22>
 8009e10:	4925      	ldr	r1, [pc, #148]	; (8009ea8 <__pow5mult+0xa8>)
 8009e12:	3a01      	subs	r2, #1
 8009e14:	0092      	lsls	r2, r2, #2
 8009e16:	5852      	ldr	r2, [r2, r1]
 8009e18:	2300      	movs	r3, #0
 8009e1a:	0031      	movs	r1, r6
 8009e1c:	f7ff fe52 	bl	8009ac4 <__multadd>
 8009e20:	0006      	movs	r6, r0
 8009e22:	10ad      	asrs	r5, r5, #2
 8009e24:	d03d      	beq.n	8009ea2 <__pow5mult+0xa2>
 8009e26:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8009e28:	2c00      	cmp	r4, #0
 8009e2a:	d10f      	bne.n	8009e4c <__pow5mult+0x4c>
 8009e2c:	2010      	movs	r0, #16
 8009e2e:	f7ff fdb1 	bl	8009994 <malloc>
 8009e32:	1e02      	subs	r2, r0, #0
 8009e34:	6278      	str	r0, [r7, #36]	; 0x24
 8009e36:	d105      	bne.n	8009e44 <__pow5mult+0x44>
 8009e38:	21d7      	movs	r1, #215	; 0xd7
 8009e3a:	4b1c      	ldr	r3, [pc, #112]	; (8009eac <__pow5mult+0xac>)
 8009e3c:	481c      	ldr	r0, [pc, #112]	; (8009eb0 <__pow5mult+0xb0>)
 8009e3e:	0049      	lsls	r1, r1, #1
 8009e40:	f001 f9a2 	bl	800b188 <__assert_func>
 8009e44:	6044      	str	r4, [r0, #4]
 8009e46:	6084      	str	r4, [r0, #8]
 8009e48:	6004      	str	r4, [r0, #0]
 8009e4a:	60c4      	str	r4, [r0, #12]
 8009e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e4e:	689c      	ldr	r4, [r3, #8]
 8009e50:	9301      	str	r3, [sp, #4]
 8009e52:	2c00      	cmp	r4, #0
 8009e54:	d108      	bne.n	8009e68 <__pow5mult+0x68>
 8009e56:	0038      	movs	r0, r7
 8009e58:	4916      	ldr	r1, [pc, #88]	; (8009eb4 <__pow5mult+0xb4>)
 8009e5a:	f7ff ff0b 	bl	8009c74 <__i2b>
 8009e5e:	9b01      	ldr	r3, [sp, #4]
 8009e60:	0004      	movs	r4, r0
 8009e62:	6098      	str	r0, [r3, #8]
 8009e64:	2300      	movs	r3, #0
 8009e66:	6003      	str	r3, [r0, #0]
 8009e68:	2301      	movs	r3, #1
 8009e6a:	421d      	tst	r5, r3
 8009e6c:	d00a      	beq.n	8009e84 <__pow5mult+0x84>
 8009e6e:	0031      	movs	r1, r6
 8009e70:	0022      	movs	r2, r4
 8009e72:	0038      	movs	r0, r7
 8009e74:	f7ff ff14 	bl	8009ca0 <__multiply>
 8009e78:	0031      	movs	r1, r6
 8009e7a:	9001      	str	r0, [sp, #4]
 8009e7c:	0038      	movs	r0, r7
 8009e7e:	f7ff fdfd 	bl	8009a7c <_Bfree>
 8009e82:	9e01      	ldr	r6, [sp, #4]
 8009e84:	106d      	asrs	r5, r5, #1
 8009e86:	d00c      	beq.n	8009ea2 <__pow5mult+0xa2>
 8009e88:	6820      	ldr	r0, [r4, #0]
 8009e8a:	2800      	cmp	r0, #0
 8009e8c:	d107      	bne.n	8009e9e <__pow5mult+0x9e>
 8009e8e:	0022      	movs	r2, r4
 8009e90:	0021      	movs	r1, r4
 8009e92:	0038      	movs	r0, r7
 8009e94:	f7ff ff04 	bl	8009ca0 <__multiply>
 8009e98:	2300      	movs	r3, #0
 8009e9a:	6020      	str	r0, [r4, #0]
 8009e9c:	6003      	str	r3, [r0, #0]
 8009e9e:	0004      	movs	r4, r0
 8009ea0:	e7e2      	b.n	8009e68 <__pow5mult+0x68>
 8009ea2:	0030      	movs	r0, r6
 8009ea4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009ea6:	46c0      	nop			; (mov r8, r8)
 8009ea8:	0800c318 	.word	0x0800c318
 8009eac:	0800c0ce 	.word	0x0800c0ce
 8009eb0:	0800c1cc 	.word	0x0800c1cc
 8009eb4:	00000271 	.word	0x00000271

08009eb8 <__lshift>:
 8009eb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009eba:	000c      	movs	r4, r1
 8009ebc:	0017      	movs	r7, r2
 8009ebe:	6923      	ldr	r3, [r4, #16]
 8009ec0:	1155      	asrs	r5, r2, #5
 8009ec2:	b087      	sub	sp, #28
 8009ec4:	18eb      	adds	r3, r5, r3
 8009ec6:	9302      	str	r3, [sp, #8]
 8009ec8:	3301      	adds	r3, #1
 8009eca:	9301      	str	r3, [sp, #4]
 8009ecc:	6849      	ldr	r1, [r1, #4]
 8009ece:	68a3      	ldr	r3, [r4, #8]
 8009ed0:	9004      	str	r0, [sp, #16]
 8009ed2:	9a01      	ldr	r2, [sp, #4]
 8009ed4:	4293      	cmp	r3, r2
 8009ed6:	db10      	blt.n	8009efa <__lshift+0x42>
 8009ed8:	9804      	ldr	r0, [sp, #16]
 8009eda:	f7ff fd8b 	bl	80099f4 <_Balloc>
 8009ede:	2300      	movs	r3, #0
 8009ee0:	0002      	movs	r2, r0
 8009ee2:	0006      	movs	r6, r0
 8009ee4:	0019      	movs	r1, r3
 8009ee6:	3214      	adds	r2, #20
 8009ee8:	4298      	cmp	r0, r3
 8009eea:	d10c      	bne.n	8009f06 <__lshift+0x4e>
 8009eec:	21da      	movs	r1, #218	; 0xda
 8009eee:	0002      	movs	r2, r0
 8009ef0:	4b26      	ldr	r3, [pc, #152]	; (8009f8c <__lshift+0xd4>)
 8009ef2:	4827      	ldr	r0, [pc, #156]	; (8009f90 <__lshift+0xd8>)
 8009ef4:	31ff      	adds	r1, #255	; 0xff
 8009ef6:	f001 f947 	bl	800b188 <__assert_func>
 8009efa:	3101      	adds	r1, #1
 8009efc:	005b      	lsls	r3, r3, #1
 8009efe:	e7e8      	b.n	8009ed2 <__lshift+0x1a>
 8009f00:	0098      	lsls	r0, r3, #2
 8009f02:	5011      	str	r1, [r2, r0]
 8009f04:	3301      	adds	r3, #1
 8009f06:	42ab      	cmp	r3, r5
 8009f08:	dbfa      	blt.n	8009f00 <__lshift+0x48>
 8009f0a:	43eb      	mvns	r3, r5
 8009f0c:	17db      	asrs	r3, r3, #31
 8009f0e:	401d      	ands	r5, r3
 8009f10:	211f      	movs	r1, #31
 8009f12:	0023      	movs	r3, r4
 8009f14:	0038      	movs	r0, r7
 8009f16:	00ad      	lsls	r5, r5, #2
 8009f18:	1955      	adds	r5, r2, r5
 8009f1a:	6922      	ldr	r2, [r4, #16]
 8009f1c:	3314      	adds	r3, #20
 8009f1e:	0092      	lsls	r2, r2, #2
 8009f20:	4008      	ands	r0, r1
 8009f22:	4684      	mov	ip, r0
 8009f24:	189a      	adds	r2, r3, r2
 8009f26:	420f      	tst	r7, r1
 8009f28:	d02a      	beq.n	8009f80 <__lshift+0xc8>
 8009f2a:	3101      	adds	r1, #1
 8009f2c:	1a09      	subs	r1, r1, r0
 8009f2e:	9105      	str	r1, [sp, #20]
 8009f30:	2100      	movs	r1, #0
 8009f32:	9503      	str	r5, [sp, #12]
 8009f34:	4667      	mov	r7, ip
 8009f36:	6818      	ldr	r0, [r3, #0]
 8009f38:	40b8      	lsls	r0, r7
 8009f3a:	4301      	orrs	r1, r0
 8009f3c:	9803      	ldr	r0, [sp, #12]
 8009f3e:	c002      	stmia	r0!, {r1}
 8009f40:	cb02      	ldmia	r3!, {r1}
 8009f42:	9003      	str	r0, [sp, #12]
 8009f44:	9805      	ldr	r0, [sp, #20]
 8009f46:	40c1      	lsrs	r1, r0
 8009f48:	429a      	cmp	r2, r3
 8009f4a:	d8f3      	bhi.n	8009f34 <__lshift+0x7c>
 8009f4c:	0020      	movs	r0, r4
 8009f4e:	3015      	adds	r0, #21
 8009f50:	2304      	movs	r3, #4
 8009f52:	4282      	cmp	r2, r0
 8009f54:	d304      	bcc.n	8009f60 <__lshift+0xa8>
 8009f56:	1b13      	subs	r3, r2, r4
 8009f58:	3b15      	subs	r3, #21
 8009f5a:	089b      	lsrs	r3, r3, #2
 8009f5c:	3301      	adds	r3, #1
 8009f5e:	009b      	lsls	r3, r3, #2
 8009f60:	50e9      	str	r1, [r5, r3]
 8009f62:	2900      	cmp	r1, #0
 8009f64:	d002      	beq.n	8009f6c <__lshift+0xb4>
 8009f66:	9b02      	ldr	r3, [sp, #8]
 8009f68:	3302      	adds	r3, #2
 8009f6a:	9301      	str	r3, [sp, #4]
 8009f6c:	9b01      	ldr	r3, [sp, #4]
 8009f6e:	9804      	ldr	r0, [sp, #16]
 8009f70:	3b01      	subs	r3, #1
 8009f72:	0021      	movs	r1, r4
 8009f74:	6133      	str	r3, [r6, #16]
 8009f76:	f7ff fd81 	bl	8009a7c <_Bfree>
 8009f7a:	0030      	movs	r0, r6
 8009f7c:	b007      	add	sp, #28
 8009f7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009f80:	cb02      	ldmia	r3!, {r1}
 8009f82:	c502      	stmia	r5!, {r1}
 8009f84:	429a      	cmp	r2, r3
 8009f86:	d8fb      	bhi.n	8009f80 <__lshift+0xc8>
 8009f88:	e7f0      	b.n	8009f6c <__lshift+0xb4>
 8009f8a:	46c0      	nop			; (mov r8, r8)
 8009f8c:	0800c140 	.word	0x0800c140
 8009f90:	0800c1cc 	.word	0x0800c1cc

08009f94 <__mcmp>:
 8009f94:	6902      	ldr	r2, [r0, #16]
 8009f96:	690b      	ldr	r3, [r1, #16]
 8009f98:	b530      	push	{r4, r5, lr}
 8009f9a:	0004      	movs	r4, r0
 8009f9c:	1ad0      	subs	r0, r2, r3
 8009f9e:	429a      	cmp	r2, r3
 8009fa0:	d10d      	bne.n	8009fbe <__mcmp+0x2a>
 8009fa2:	009b      	lsls	r3, r3, #2
 8009fa4:	3414      	adds	r4, #20
 8009fa6:	3114      	adds	r1, #20
 8009fa8:	18e2      	adds	r2, r4, r3
 8009faa:	18c9      	adds	r1, r1, r3
 8009fac:	3a04      	subs	r2, #4
 8009fae:	3904      	subs	r1, #4
 8009fb0:	6815      	ldr	r5, [r2, #0]
 8009fb2:	680b      	ldr	r3, [r1, #0]
 8009fb4:	429d      	cmp	r5, r3
 8009fb6:	d003      	beq.n	8009fc0 <__mcmp+0x2c>
 8009fb8:	2001      	movs	r0, #1
 8009fba:	429d      	cmp	r5, r3
 8009fbc:	d303      	bcc.n	8009fc6 <__mcmp+0x32>
 8009fbe:	bd30      	pop	{r4, r5, pc}
 8009fc0:	4294      	cmp	r4, r2
 8009fc2:	d3f3      	bcc.n	8009fac <__mcmp+0x18>
 8009fc4:	e7fb      	b.n	8009fbe <__mcmp+0x2a>
 8009fc6:	4240      	negs	r0, r0
 8009fc8:	e7f9      	b.n	8009fbe <__mcmp+0x2a>
	...

08009fcc <__mdiff>:
 8009fcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009fce:	000e      	movs	r6, r1
 8009fd0:	0007      	movs	r7, r0
 8009fd2:	0011      	movs	r1, r2
 8009fd4:	0030      	movs	r0, r6
 8009fd6:	b087      	sub	sp, #28
 8009fd8:	0014      	movs	r4, r2
 8009fda:	f7ff ffdb 	bl	8009f94 <__mcmp>
 8009fde:	1e05      	subs	r5, r0, #0
 8009fe0:	d110      	bne.n	800a004 <__mdiff+0x38>
 8009fe2:	0001      	movs	r1, r0
 8009fe4:	0038      	movs	r0, r7
 8009fe6:	f7ff fd05 	bl	80099f4 <_Balloc>
 8009fea:	1e02      	subs	r2, r0, #0
 8009fec:	d104      	bne.n	8009ff8 <__mdiff+0x2c>
 8009fee:	4b40      	ldr	r3, [pc, #256]	; (800a0f0 <__mdiff+0x124>)
 8009ff0:	4940      	ldr	r1, [pc, #256]	; (800a0f4 <__mdiff+0x128>)
 8009ff2:	4841      	ldr	r0, [pc, #260]	; (800a0f8 <__mdiff+0x12c>)
 8009ff4:	f001 f8c8 	bl	800b188 <__assert_func>
 8009ff8:	2301      	movs	r3, #1
 8009ffa:	6145      	str	r5, [r0, #20]
 8009ffc:	6103      	str	r3, [r0, #16]
 8009ffe:	0010      	movs	r0, r2
 800a000:	b007      	add	sp, #28
 800a002:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a004:	2301      	movs	r3, #1
 800a006:	9301      	str	r3, [sp, #4]
 800a008:	2800      	cmp	r0, #0
 800a00a:	db04      	blt.n	800a016 <__mdiff+0x4a>
 800a00c:	0023      	movs	r3, r4
 800a00e:	0034      	movs	r4, r6
 800a010:	001e      	movs	r6, r3
 800a012:	2300      	movs	r3, #0
 800a014:	9301      	str	r3, [sp, #4]
 800a016:	0038      	movs	r0, r7
 800a018:	6861      	ldr	r1, [r4, #4]
 800a01a:	f7ff fceb 	bl	80099f4 <_Balloc>
 800a01e:	1e02      	subs	r2, r0, #0
 800a020:	d103      	bne.n	800a02a <__mdiff+0x5e>
 800a022:	2190      	movs	r1, #144	; 0x90
 800a024:	4b32      	ldr	r3, [pc, #200]	; (800a0f0 <__mdiff+0x124>)
 800a026:	0089      	lsls	r1, r1, #2
 800a028:	e7e3      	b.n	8009ff2 <__mdiff+0x26>
 800a02a:	9b01      	ldr	r3, [sp, #4]
 800a02c:	2700      	movs	r7, #0
 800a02e:	60c3      	str	r3, [r0, #12]
 800a030:	6920      	ldr	r0, [r4, #16]
 800a032:	3414      	adds	r4, #20
 800a034:	9401      	str	r4, [sp, #4]
 800a036:	9b01      	ldr	r3, [sp, #4]
 800a038:	0084      	lsls	r4, r0, #2
 800a03a:	191b      	adds	r3, r3, r4
 800a03c:	0034      	movs	r4, r6
 800a03e:	9302      	str	r3, [sp, #8]
 800a040:	6933      	ldr	r3, [r6, #16]
 800a042:	3414      	adds	r4, #20
 800a044:	0099      	lsls	r1, r3, #2
 800a046:	1863      	adds	r3, r4, r1
 800a048:	9303      	str	r3, [sp, #12]
 800a04a:	0013      	movs	r3, r2
 800a04c:	3314      	adds	r3, #20
 800a04e:	469c      	mov	ip, r3
 800a050:	9305      	str	r3, [sp, #20]
 800a052:	9b01      	ldr	r3, [sp, #4]
 800a054:	9304      	str	r3, [sp, #16]
 800a056:	9b04      	ldr	r3, [sp, #16]
 800a058:	cc02      	ldmia	r4!, {r1}
 800a05a:	cb20      	ldmia	r3!, {r5}
 800a05c:	9304      	str	r3, [sp, #16]
 800a05e:	b2ab      	uxth	r3, r5
 800a060:	19df      	adds	r7, r3, r7
 800a062:	b28b      	uxth	r3, r1
 800a064:	1afb      	subs	r3, r7, r3
 800a066:	0c09      	lsrs	r1, r1, #16
 800a068:	0c2d      	lsrs	r5, r5, #16
 800a06a:	1a6d      	subs	r5, r5, r1
 800a06c:	1419      	asrs	r1, r3, #16
 800a06e:	186d      	adds	r5, r5, r1
 800a070:	4661      	mov	r1, ip
 800a072:	142f      	asrs	r7, r5, #16
 800a074:	b29b      	uxth	r3, r3
 800a076:	042d      	lsls	r5, r5, #16
 800a078:	432b      	orrs	r3, r5
 800a07a:	c108      	stmia	r1!, {r3}
 800a07c:	9b03      	ldr	r3, [sp, #12]
 800a07e:	468c      	mov	ip, r1
 800a080:	42a3      	cmp	r3, r4
 800a082:	d8e8      	bhi.n	800a056 <__mdiff+0x8a>
 800a084:	0031      	movs	r1, r6
 800a086:	9c03      	ldr	r4, [sp, #12]
 800a088:	3115      	adds	r1, #21
 800a08a:	2304      	movs	r3, #4
 800a08c:	428c      	cmp	r4, r1
 800a08e:	d304      	bcc.n	800a09a <__mdiff+0xce>
 800a090:	1ba3      	subs	r3, r4, r6
 800a092:	3b15      	subs	r3, #21
 800a094:	089b      	lsrs	r3, r3, #2
 800a096:	3301      	adds	r3, #1
 800a098:	009b      	lsls	r3, r3, #2
 800a09a:	9901      	ldr	r1, [sp, #4]
 800a09c:	18cc      	adds	r4, r1, r3
 800a09e:	9905      	ldr	r1, [sp, #20]
 800a0a0:	0026      	movs	r6, r4
 800a0a2:	18cb      	adds	r3, r1, r3
 800a0a4:	469c      	mov	ip, r3
 800a0a6:	9902      	ldr	r1, [sp, #8]
 800a0a8:	428e      	cmp	r6, r1
 800a0aa:	d310      	bcc.n	800a0ce <__mdiff+0x102>
 800a0ac:	9e02      	ldr	r6, [sp, #8]
 800a0ae:	1ee1      	subs	r1, r4, #3
 800a0b0:	2500      	movs	r5, #0
 800a0b2:	428e      	cmp	r6, r1
 800a0b4:	d304      	bcc.n	800a0c0 <__mdiff+0xf4>
 800a0b6:	0031      	movs	r1, r6
 800a0b8:	3103      	adds	r1, #3
 800a0ba:	1b0c      	subs	r4, r1, r4
 800a0bc:	08a4      	lsrs	r4, r4, #2
 800a0be:	00a5      	lsls	r5, r4, #2
 800a0c0:	195b      	adds	r3, r3, r5
 800a0c2:	3b04      	subs	r3, #4
 800a0c4:	6819      	ldr	r1, [r3, #0]
 800a0c6:	2900      	cmp	r1, #0
 800a0c8:	d00f      	beq.n	800a0ea <__mdiff+0x11e>
 800a0ca:	6110      	str	r0, [r2, #16]
 800a0cc:	e797      	b.n	8009ffe <__mdiff+0x32>
 800a0ce:	ce02      	ldmia	r6!, {r1}
 800a0d0:	b28d      	uxth	r5, r1
 800a0d2:	19ed      	adds	r5, r5, r7
 800a0d4:	0c0f      	lsrs	r7, r1, #16
 800a0d6:	1429      	asrs	r1, r5, #16
 800a0d8:	1879      	adds	r1, r7, r1
 800a0da:	140f      	asrs	r7, r1, #16
 800a0dc:	b2ad      	uxth	r5, r5
 800a0de:	0409      	lsls	r1, r1, #16
 800a0e0:	430d      	orrs	r5, r1
 800a0e2:	4661      	mov	r1, ip
 800a0e4:	c120      	stmia	r1!, {r5}
 800a0e6:	468c      	mov	ip, r1
 800a0e8:	e7dd      	b.n	800a0a6 <__mdiff+0xda>
 800a0ea:	3801      	subs	r0, #1
 800a0ec:	e7e9      	b.n	800a0c2 <__mdiff+0xf6>
 800a0ee:	46c0      	nop			; (mov r8, r8)
 800a0f0:	0800c140 	.word	0x0800c140
 800a0f4:	00000232 	.word	0x00000232
 800a0f8:	0800c1cc 	.word	0x0800c1cc

0800a0fc <__ulp>:
 800a0fc:	4b0f      	ldr	r3, [pc, #60]	; (800a13c <__ulp+0x40>)
 800a0fe:	4019      	ands	r1, r3
 800a100:	4b0f      	ldr	r3, [pc, #60]	; (800a140 <__ulp+0x44>)
 800a102:	18c9      	adds	r1, r1, r3
 800a104:	2900      	cmp	r1, #0
 800a106:	dd04      	ble.n	800a112 <__ulp+0x16>
 800a108:	2200      	movs	r2, #0
 800a10a:	000b      	movs	r3, r1
 800a10c:	0010      	movs	r0, r2
 800a10e:	0019      	movs	r1, r3
 800a110:	4770      	bx	lr
 800a112:	4249      	negs	r1, r1
 800a114:	2200      	movs	r2, #0
 800a116:	2300      	movs	r3, #0
 800a118:	1509      	asrs	r1, r1, #20
 800a11a:	2913      	cmp	r1, #19
 800a11c:	dc04      	bgt.n	800a128 <__ulp+0x2c>
 800a11e:	2080      	movs	r0, #128	; 0x80
 800a120:	0300      	lsls	r0, r0, #12
 800a122:	4108      	asrs	r0, r1
 800a124:	0003      	movs	r3, r0
 800a126:	e7f1      	b.n	800a10c <__ulp+0x10>
 800a128:	3914      	subs	r1, #20
 800a12a:	2001      	movs	r0, #1
 800a12c:	291e      	cmp	r1, #30
 800a12e:	dc02      	bgt.n	800a136 <__ulp+0x3a>
 800a130:	2080      	movs	r0, #128	; 0x80
 800a132:	0600      	lsls	r0, r0, #24
 800a134:	40c8      	lsrs	r0, r1
 800a136:	0002      	movs	r2, r0
 800a138:	e7e8      	b.n	800a10c <__ulp+0x10>
 800a13a:	46c0      	nop			; (mov r8, r8)
 800a13c:	7ff00000 	.word	0x7ff00000
 800a140:	fcc00000 	.word	0xfcc00000

0800a144 <__b2d>:
 800a144:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a146:	0006      	movs	r6, r0
 800a148:	6903      	ldr	r3, [r0, #16]
 800a14a:	3614      	adds	r6, #20
 800a14c:	009b      	lsls	r3, r3, #2
 800a14e:	18f3      	adds	r3, r6, r3
 800a150:	1f1d      	subs	r5, r3, #4
 800a152:	682c      	ldr	r4, [r5, #0]
 800a154:	000f      	movs	r7, r1
 800a156:	0020      	movs	r0, r4
 800a158:	9301      	str	r3, [sp, #4]
 800a15a:	f7ff fd43 	bl	8009be4 <__hi0bits>
 800a15e:	2320      	movs	r3, #32
 800a160:	1a1b      	subs	r3, r3, r0
 800a162:	491f      	ldr	r1, [pc, #124]	; (800a1e0 <__b2d+0x9c>)
 800a164:	603b      	str	r3, [r7, #0]
 800a166:	280a      	cmp	r0, #10
 800a168:	dc16      	bgt.n	800a198 <__b2d+0x54>
 800a16a:	230b      	movs	r3, #11
 800a16c:	0027      	movs	r7, r4
 800a16e:	1a1b      	subs	r3, r3, r0
 800a170:	40df      	lsrs	r7, r3
 800a172:	4339      	orrs	r1, r7
 800a174:	469c      	mov	ip, r3
 800a176:	000b      	movs	r3, r1
 800a178:	2100      	movs	r1, #0
 800a17a:	42ae      	cmp	r6, r5
 800a17c:	d202      	bcs.n	800a184 <__b2d+0x40>
 800a17e:	9901      	ldr	r1, [sp, #4]
 800a180:	3908      	subs	r1, #8
 800a182:	6809      	ldr	r1, [r1, #0]
 800a184:	3015      	adds	r0, #21
 800a186:	4084      	lsls	r4, r0
 800a188:	4660      	mov	r0, ip
 800a18a:	40c1      	lsrs	r1, r0
 800a18c:	430c      	orrs	r4, r1
 800a18e:	0022      	movs	r2, r4
 800a190:	0010      	movs	r0, r2
 800a192:	0019      	movs	r1, r3
 800a194:	b003      	add	sp, #12
 800a196:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a198:	2700      	movs	r7, #0
 800a19a:	42ae      	cmp	r6, r5
 800a19c:	d202      	bcs.n	800a1a4 <__b2d+0x60>
 800a19e:	9d01      	ldr	r5, [sp, #4]
 800a1a0:	3d08      	subs	r5, #8
 800a1a2:	682f      	ldr	r7, [r5, #0]
 800a1a4:	230b      	movs	r3, #11
 800a1a6:	425b      	negs	r3, r3
 800a1a8:	469c      	mov	ip, r3
 800a1aa:	4484      	add	ip, r0
 800a1ac:	280b      	cmp	r0, #11
 800a1ae:	d013      	beq.n	800a1d8 <__b2d+0x94>
 800a1b0:	4663      	mov	r3, ip
 800a1b2:	2020      	movs	r0, #32
 800a1b4:	409c      	lsls	r4, r3
 800a1b6:	1ac0      	subs	r0, r0, r3
 800a1b8:	003b      	movs	r3, r7
 800a1ba:	40c3      	lsrs	r3, r0
 800a1bc:	431c      	orrs	r4, r3
 800a1be:	4321      	orrs	r1, r4
 800a1c0:	000b      	movs	r3, r1
 800a1c2:	2100      	movs	r1, #0
 800a1c4:	42b5      	cmp	r5, r6
 800a1c6:	d901      	bls.n	800a1cc <__b2d+0x88>
 800a1c8:	3d04      	subs	r5, #4
 800a1ca:	6829      	ldr	r1, [r5, #0]
 800a1cc:	4664      	mov	r4, ip
 800a1ce:	40c1      	lsrs	r1, r0
 800a1d0:	40a7      	lsls	r7, r4
 800a1d2:	430f      	orrs	r7, r1
 800a1d4:	003a      	movs	r2, r7
 800a1d6:	e7db      	b.n	800a190 <__b2d+0x4c>
 800a1d8:	4321      	orrs	r1, r4
 800a1da:	000b      	movs	r3, r1
 800a1dc:	e7fa      	b.n	800a1d4 <__b2d+0x90>
 800a1de:	46c0      	nop			; (mov r8, r8)
 800a1e0:	3ff00000 	.word	0x3ff00000

0800a1e4 <__d2b>:
 800a1e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a1e6:	2101      	movs	r1, #1
 800a1e8:	0014      	movs	r4, r2
 800a1ea:	001e      	movs	r6, r3
 800a1ec:	9f08      	ldr	r7, [sp, #32]
 800a1ee:	f7ff fc01 	bl	80099f4 <_Balloc>
 800a1f2:	1e05      	subs	r5, r0, #0
 800a1f4:	d105      	bne.n	800a202 <__d2b+0x1e>
 800a1f6:	0002      	movs	r2, r0
 800a1f8:	4b26      	ldr	r3, [pc, #152]	; (800a294 <__d2b+0xb0>)
 800a1fa:	4927      	ldr	r1, [pc, #156]	; (800a298 <__d2b+0xb4>)
 800a1fc:	4827      	ldr	r0, [pc, #156]	; (800a29c <__d2b+0xb8>)
 800a1fe:	f000 ffc3 	bl	800b188 <__assert_func>
 800a202:	0333      	lsls	r3, r6, #12
 800a204:	0076      	lsls	r6, r6, #1
 800a206:	0b1b      	lsrs	r3, r3, #12
 800a208:	0d76      	lsrs	r6, r6, #21
 800a20a:	d124      	bne.n	800a256 <__d2b+0x72>
 800a20c:	9301      	str	r3, [sp, #4]
 800a20e:	2c00      	cmp	r4, #0
 800a210:	d027      	beq.n	800a262 <__d2b+0x7e>
 800a212:	4668      	mov	r0, sp
 800a214:	9400      	str	r4, [sp, #0]
 800a216:	f7ff fcff 	bl	8009c18 <__lo0bits>
 800a21a:	9c00      	ldr	r4, [sp, #0]
 800a21c:	2800      	cmp	r0, #0
 800a21e:	d01e      	beq.n	800a25e <__d2b+0x7a>
 800a220:	9b01      	ldr	r3, [sp, #4]
 800a222:	2120      	movs	r1, #32
 800a224:	001a      	movs	r2, r3
 800a226:	1a09      	subs	r1, r1, r0
 800a228:	408a      	lsls	r2, r1
 800a22a:	40c3      	lsrs	r3, r0
 800a22c:	4322      	orrs	r2, r4
 800a22e:	616a      	str	r2, [r5, #20]
 800a230:	9301      	str	r3, [sp, #4]
 800a232:	9c01      	ldr	r4, [sp, #4]
 800a234:	61ac      	str	r4, [r5, #24]
 800a236:	1e63      	subs	r3, r4, #1
 800a238:	419c      	sbcs	r4, r3
 800a23a:	3401      	adds	r4, #1
 800a23c:	612c      	str	r4, [r5, #16]
 800a23e:	2e00      	cmp	r6, #0
 800a240:	d018      	beq.n	800a274 <__d2b+0x90>
 800a242:	4b17      	ldr	r3, [pc, #92]	; (800a2a0 <__d2b+0xbc>)
 800a244:	18f6      	adds	r6, r6, r3
 800a246:	2335      	movs	r3, #53	; 0x35
 800a248:	1836      	adds	r6, r6, r0
 800a24a:	1a18      	subs	r0, r3, r0
 800a24c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a24e:	603e      	str	r6, [r7, #0]
 800a250:	6018      	str	r0, [r3, #0]
 800a252:	0028      	movs	r0, r5
 800a254:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a256:	2280      	movs	r2, #128	; 0x80
 800a258:	0352      	lsls	r2, r2, #13
 800a25a:	4313      	orrs	r3, r2
 800a25c:	e7d6      	b.n	800a20c <__d2b+0x28>
 800a25e:	616c      	str	r4, [r5, #20]
 800a260:	e7e7      	b.n	800a232 <__d2b+0x4e>
 800a262:	a801      	add	r0, sp, #4
 800a264:	f7ff fcd8 	bl	8009c18 <__lo0bits>
 800a268:	2401      	movs	r4, #1
 800a26a:	9b01      	ldr	r3, [sp, #4]
 800a26c:	612c      	str	r4, [r5, #16]
 800a26e:	616b      	str	r3, [r5, #20]
 800a270:	3020      	adds	r0, #32
 800a272:	e7e4      	b.n	800a23e <__d2b+0x5a>
 800a274:	4b0b      	ldr	r3, [pc, #44]	; (800a2a4 <__d2b+0xc0>)
 800a276:	18c0      	adds	r0, r0, r3
 800a278:	4b0b      	ldr	r3, [pc, #44]	; (800a2a8 <__d2b+0xc4>)
 800a27a:	6038      	str	r0, [r7, #0]
 800a27c:	18e3      	adds	r3, r4, r3
 800a27e:	009b      	lsls	r3, r3, #2
 800a280:	18eb      	adds	r3, r5, r3
 800a282:	6958      	ldr	r0, [r3, #20]
 800a284:	f7ff fcae 	bl	8009be4 <__hi0bits>
 800a288:	0164      	lsls	r4, r4, #5
 800a28a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a28c:	1a24      	subs	r4, r4, r0
 800a28e:	601c      	str	r4, [r3, #0]
 800a290:	e7df      	b.n	800a252 <__d2b+0x6e>
 800a292:	46c0      	nop			; (mov r8, r8)
 800a294:	0800c140 	.word	0x0800c140
 800a298:	0000030a 	.word	0x0000030a
 800a29c:	0800c1cc 	.word	0x0800c1cc
 800a2a0:	fffffbcd 	.word	0xfffffbcd
 800a2a4:	fffffbce 	.word	0xfffffbce
 800a2a8:	3fffffff 	.word	0x3fffffff

0800a2ac <__ratio>:
 800a2ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a2ae:	b087      	sub	sp, #28
 800a2b0:	000f      	movs	r7, r1
 800a2b2:	a904      	add	r1, sp, #16
 800a2b4:	0006      	movs	r6, r0
 800a2b6:	f7ff ff45 	bl	800a144 <__b2d>
 800a2ba:	9000      	str	r0, [sp, #0]
 800a2bc:	9101      	str	r1, [sp, #4]
 800a2be:	9c00      	ldr	r4, [sp, #0]
 800a2c0:	9d01      	ldr	r5, [sp, #4]
 800a2c2:	0038      	movs	r0, r7
 800a2c4:	a905      	add	r1, sp, #20
 800a2c6:	f7ff ff3d 	bl	800a144 <__b2d>
 800a2ca:	9002      	str	r0, [sp, #8]
 800a2cc:	9103      	str	r1, [sp, #12]
 800a2ce:	9a02      	ldr	r2, [sp, #8]
 800a2d0:	9b03      	ldr	r3, [sp, #12]
 800a2d2:	6931      	ldr	r1, [r6, #16]
 800a2d4:	6938      	ldr	r0, [r7, #16]
 800a2d6:	9e05      	ldr	r6, [sp, #20]
 800a2d8:	1a08      	subs	r0, r1, r0
 800a2da:	9904      	ldr	r1, [sp, #16]
 800a2dc:	0140      	lsls	r0, r0, #5
 800a2de:	1b89      	subs	r1, r1, r6
 800a2e0:	1841      	adds	r1, r0, r1
 800a2e2:	0508      	lsls	r0, r1, #20
 800a2e4:	2900      	cmp	r1, #0
 800a2e6:	dd07      	ble.n	800a2f8 <__ratio+0x4c>
 800a2e8:	9901      	ldr	r1, [sp, #4]
 800a2ea:	1845      	adds	r5, r0, r1
 800a2ec:	0020      	movs	r0, r4
 800a2ee:	0029      	movs	r1, r5
 800a2f0:	f7f7 fa48 	bl	8001784 <__aeabi_ddiv>
 800a2f4:	b007      	add	sp, #28
 800a2f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a2f8:	9903      	ldr	r1, [sp, #12]
 800a2fa:	1a0b      	subs	r3, r1, r0
 800a2fc:	e7f6      	b.n	800a2ec <__ratio+0x40>

0800a2fe <__copybits>:
 800a2fe:	b570      	push	{r4, r5, r6, lr}
 800a300:	0014      	movs	r4, r2
 800a302:	0005      	movs	r5, r0
 800a304:	3901      	subs	r1, #1
 800a306:	6913      	ldr	r3, [r2, #16]
 800a308:	1149      	asrs	r1, r1, #5
 800a30a:	3101      	adds	r1, #1
 800a30c:	0089      	lsls	r1, r1, #2
 800a30e:	3414      	adds	r4, #20
 800a310:	009b      	lsls	r3, r3, #2
 800a312:	1841      	adds	r1, r0, r1
 800a314:	18e3      	adds	r3, r4, r3
 800a316:	42a3      	cmp	r3, r4
 800a318:	d80d      	bhi.n	800a336 <__copybits+0x38>
 800a31a:	0014      	movs	r4, r2
 800a31c:	3411      	adds	r4, #17
 800a31e:	2500      	movs	r5, #0
 800a320:	429c      	cmp	r4, r3
 800a322:	d803      	bhi.n	800a32c <__copybits+0x2e>
 800a324:	1a9b      	subs	r3, r3, r2
 800a326:	3b11      	subs	r3, #17
 800a328:	089b      	lsrs	r3, r3, #2
 800a32a:	009d      	lsls	r5, r3, #2
 800a32c:	2300      	movs	r3, #0
 800a32e:	1940      	adds	r0, r0, r5
 800a330:	4281      	cmp	r1, r0
 800a332:	d803      	bhi.n	800a33c <__copybits+0x3e>
 800a334:	bd70      	pop	{r4, r5, r6, pc}
 800a336:	cc40      	ldmia	r4!, {r6}
 800a338:	c540      	stmia	r5!, {r6}
 800a33a:	e7ec      	b.n	800a316 <__copybits+0x18>
 800a33c:	c008      	stmia	r0!, {r3}
 800a33e:	e7f7      	b.n	800a330 <__copybits+0x32>

0800a340 <__any_on>:
 800a340:	0002      	movs	r2, r0
 800a342:	6900      	ldr	r0, [r0, #16]
 800a344:	b510      	push	{r4, lr}
 800a346:	3214      	adds	r2, #20
 800a348:	114b      	asrs	r3, r1, #5
 800a34a:	4298      	cmp	r0, r3
 800a34c:	db13      	blt.n	800a376 <__any_on+0x36>
 800a34e:	dd0c      	ble.n	800a36a <__any_on+0x2a>
 800a350:	241f      	movs	r4, #31
 800a352:	0008      	movs	r0, r1
 800a354:	4020      	ands	r0, r4
 800a356:	4221      	tst	r1, r4
 800a358:	d007      	beq.n	800a36a <__any_on+0x2a>
 800a35a:	0099      	lsls	r1, r3, #2
 800a35c:	588c      	ldr	r4, [r1, r2]
 800a35e:	0021      	movs	r1, r4
 800a360:	40c1      	lsrs	r1, r0
 800a362:	4081      	lsls	r1, r0
 800a364:	2001      	movs	r0, #1
 800a366:	428c      	cmp	r4, r1
 800a368:	d104      	bne.n	800a374 <__any_on+0x34>
 800a36a:	009b      	lsls	r3, r3, #2
 800a36c:	18d3      	adds	r3, r2, r3
 800a36e:	4293      	cmp	r3, r2
 800a370:	d803      	bhi.n	800a37a <__any_on+0x3a>
 800a372:	2000      	movs	r0, #0
 800a374:	bd10      	pop	{r4, pc}
 800a376:	0003      	movs	r3, r0
 800a378:	e7f7      	b.n	800a36a <__any_on+0x2a>
 800a37a:	3b04      	subs	r3, #4
 800a37c:	6819      	ldr	r1, [r3, #0]
 800a37e:	2900      	cmp	r1, #0
 800a380:	d0f5      	beq.n	800a36e <__any_on+0x2e>
 800a382:	2001      	movs	r0, #1
 800a384:	e7f6      	b.n	800a374 <__any_on+0x34>

0800a386 <_calloc_r>:
 800a386:	b570      	push	{r4, r5, r6, lr}
 800a388:	0c13      	lsrs	r3, r2, #16
 800a38a:	0c0d      	lsrs	r5, r1, #16
 800a38c:	d11e      	bne.n	800a3cc <_calloc_r+0x46>
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d10c      	bne.n	800a3ac <_calloc_r+0x26>
 800a392:	b289      	uxth	r1, r1
 800a394:	b294      	uxth	r4, r2
 800a396:	434c      	muls	r4, r1
 800a398:	0021      	movs	r1, r4
 800a39a:	f000 f88d 	bl	800a4b8 <_malloc_r>
 800a39e:	1e05      	subs	r5, r0, #0
 800a3a0:	d01b      	beq.n	800a3da <_calloc_r+0x54>
 800a3a2:	0022      	movs	r2, r4
 800a3a4:	2100      	movs	r1, #0
 800a3a6:	f7fc faa9 	bl	80068fc <memset>
 800a3aa:	e016      	b.n	800a3da <_calloc_r+0x54>
 800a3ac:	1c1d      	adds	r5, r3, #0
 800a3ae:	1c0b      	adds	r3, r1, #0
 800a3b0:	b292      	uxth	r2, r2
 800a3b2:	b289      	uxth	r1, r1
 800a3b4:	b29c      	uxth	r4, r3
 800a3b6:	4351      	muls	r1, r2
 800a3b8:	b2ab      	uxth	r3, r5
 800a3ba:	4363      	muls	r3, r4
 800a3bc:	0c0c      	lsrs	r4, r1, #16
 800a3be:	191c      	adds	r4, r3, r4
 800a3c0:	0c22      	lsrs	r2, r4, #16
 800a3c2:	d107      	bne.n	800a3d4 <_calloc_r+0x4e>
 800a3c4:	0424      	lsls	r4, r4, #16
 800a3c6:	b289      	uxth	r1, r1
 800a3c8:	430c      	orrs	r4, r1
 800a3ca:	e7e5      	b.n	800a398 <_calloc_r+0x12>
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d101      	bne.n	800a3d4 <_calloc_r+0x4e>
 800a3d0:	1c13      	adds	r3, r2, #0
 800a3d2:	e7ed      	b.n	800a3b0 <_calloc_r+0x2a>
 800a3d4:	230c      	movs	r3, #12
 800a3d6:	2500      	movs	r5, #0
 800a3d8:	6003      	str	r3, [r0, #0]
 800a3da:	0028      	movs	r0, r5
 800a3dc:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a3e0 <_free_r>:
 800a3e0:	b570      	push	{r4, r5, r6, lr}
 800a3e2:	0005      	movs	r5, r0
 800a3e4:	2900      	cmp	r1, #0
 800a3e6:	d010      	beq.n	800a40a <_free_r+0x2a>
 800a3e8:	1f0c      	subs	r4, r1, #4
 800a3ea:	6823      	ldr	r3, [r4, #0]
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	da00      	bge.n	800a3f2 <_free_r+0x12>
 800a3f0:	18e4      	adds	r4, r4, r3
 800a3f2:	0028      	movs	r0, r5
 800a3f4:	f001 f8da 	bl	800b5ac <__malloc_lock>
 800a3f8:	4a1d      	ldr	r2, [pc, #116]	; (800a470 <_free_r+0x90>)
 800a3fa:	6813      	ldr	r3, [r2, #0]
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d105      	bne.n	800a40c <_free_r+0x2c>
 800a400:	6063      	str	r3, [r4, #4]
 800a402:	6014      	str	r4, [r2, #0]
 800a404:	0028      	movs	r0, r5
 800a406:	f001 f8d9 	bl	800b5bc <__malloc_unlock>
 800a40a:	bd70      	pop	{r4, r5, r6, pc}
 800a40c:	42a3      	cmp	r3, r4
 800a40e:	d908      	bls.n	800a422 <_free_r+0x42>
 800a410:	6821      	ldr	r1, [r4, #0]
 800a412:	1860      	adds	r0, r4, r1
 800a414:	4283      	cmp	r3, r0
 800a416:	d1f3      	bne.n	800a400 <_free_r+0x20>
 800a418:	6818      	ldr	r0, [r3, #0]
 800a41a:	685b      	ldr	r3, [r3, #4]
 800a41c:	1841      	adds	r1, r0, r1
 800a41e:	6021      	str	r1, [r4, #0]
 800a420:	e7ee      	b.n	800a400 <_free_r+0x20>
 800a422:	001a      	movs	r2, r3
 800a424:	685b      	ldr	r3, [r3, #4]
 800a426:	2b00      	cmp	r3, #0
 800a428:	d001      	beq.n	800a42e <_free_r+0x4e>
 800a42a:	42a3      	cmp	r3, r4
 800a42c:	d9f9      	bls.n	800a422 <_free_r+0x42>
 800a42e:	6811      	ldr	r1, [r2, #0]
 800a430:	1850      	adds	r0, r2, r1
 800a432:	42a0      	cmp	r0, r4
 800a434:	d10b      	bne.n	800a44e <_free_r+0x6e>
 800a436:	6820      	ldr	r0, [r4, #0]
 800a438:	1809      	adds	r1, r1, r0
 800a43a:	1850      	adds	r0, r2, r1
 800a43c:	6011      	str	r1, [r2, #0]
 800a43e:	4283      	cmp	r3, r0
 800a440:	d1e0      	bne.n	800a404 <_free_r+0x24>
 800a442:	6818      	ldr	r0, [r3, #0]
 800a444:	685b      	ldr	r3, [r3, #4]
 800a446:	1841      	adds	r1, r0, r1
 800a448:	6011      	str	r1, [r2, #0]
 800a44a:	6053      	str	r3, [r2, #4]
 800a44c:	e7da      	b.n	800a404 <_free_r+0x24>
 800a44e:	42a0      	cmp	r0, r4
 800a450:	d902      	bls.n	800a458 <_free_r+0x78>
 800a452:	230c      	movs	r3, #12
 800a454:	602b      	str	r3, [r5, #0]
 800a456:	e7d5      	b.n	800a404 <_free_r+0x24>
 800a458:	6821      	ldr	r1, [r4, #0]
 800a45a:	1860      	adds	r0, r4, r1
 800a45c:	4283      	cmp	r3, r0
 800a45e:	d103      	bne.n	800a468 <_free_r+0x88>
 800a460:	6818      	ldr	r0, [r3, #0]
 800a462:	685b      	ldr	r3, [r3, #4]
 800a464:	1841      	adds	r1, r0, r1
 800a466:	6021      	str	r1, [r4, #0]
 800a468:	6063      	str	r3, [r4, #4]
 800a46a:	6054      	str	r4, [r2, #4]
 800a46c:	e7ca      	b.n	800a404 <_free_r+0x24>
 800a46e:	46c0      	nop			; (mov r8, r8)
 800a470:	200009d8 	.word	0x200009d8

0800a474 <sbrk_aligned>:
 800a474:	b570      	push	{r4, r5, r6, lr}
 800a476:	4e0f      	ldr	r6, [pc, #60]	; (800a4b4 <sbrk_aligned+0x40>)
 800a478:	000d      	movs	r5, r1
 800a47a:	6831      	ldr	r1, [r6, #0]
 800a47c:	0004      	movs	r4, r0
 800a47e:	2900      	cmp	r1, #0
 800a480:	d102      	bne.n	800a488 <sbrk_aligned+0x14>
 800a482:	f000 fd47 	bl	800af14 <_sbrk_r>
 800a486:	6030      	str	r0, [r6, #0]
 800a488:	0029      	movs	r1, r5
 800a48a:	0020      	movs	r0, r4
 800a48c:	f000 fd42 	bl	800af14 <_sbrk_r>
 800a490:	1c43      	adds	r3, r0, #1
 800a492:	d00a      	beq.n	800a4aa <sbrk_aligned+0x36>
 800a494:	2303      	movs	r3, #3
 800a496:	1cc5      	adds	r5, r0, #3
 800a498:	439d      	bics	r5, r3
 800a49a:	42a8      	cmp	r0, r5
 800a49c:	d007      	beq.n	800a4ae <sbrk_aligned+0x3a>
 800a49e:	1a29      	subs	r1, r5, r0
 800a4a0:	0020      	movs	r0, r4
 800a4a2:	f000 fd37 	bl	800af14 <_sbrk_r>
 800a4a6:	1c43      	adds	r3, r0, #1
 800a4a8:	d101      	bne.n	800a4ae <sbrk_aligned+0x3a>
 800a4aa:	2501      	movs	r5, #1
 800a4ac:	426d      	negs	r5, r5
 800a4ae:	0028      	movs	r0, r5
 800a4b0:	bd70      	pop	{r4, r5, r6, pc}
 800a4b2:	46c0      	nop			; (mov r8, r8)
 800a4b4:	200009dc 	.word	0x200009dc

0800a4b8 <_malloc_r>:
 800a4b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a4ba:	2203      	movs	r2, #3
 800a4bc:	1ccb      	adds	r3, r1, #3
 800a4be:	4393      	bics	r3, r2
 800a4c0:	3308      	adds	r3, #8
 800a4c2:	0006      	movs	r6, r0
 800a4c4:	001f      	movs	r7, r3
 800a4c6:	2b0c      	cmp	r3, #12
 800a4c8:	d232      	bcs.n	800a530 <_malloc_r+0x78>
 800a4ca:	270c      	movs	r7, #12
 800a4cc:	42b9      	cmp	r1, r7
 800a4ce:	d831      	bhi.n	800a534 <_malloc_r+0x7c>
 800a4d0:	0030      	movs	r0, r6
 800a4d2:	f001 f86b 	bl	800b5ac <__malloc_lock>
 800a4d6:	4d32      	ldr	r5, [pc, #200]	; (800a5a0 <_malloc_r+0xe8>)
 800a4d8:	682b      	ldr	r3, [r5, #0]
 800a4da:	001c      	movs	r4, r3
 800a4dc:	2c00      	cmp	r4, #0
 800a4de:	d12e      	bne.n	800a53e <_malloc_r+0x86>
 800a4e0:	0039      	movs	r1, r7
 800a4e2:	0030      	movs	r0, r6
 800a4e4:	f7ff ffc6 	bl	800a474 <sbrk_aligned>
 800a4e8:	0004      	movs	r4, r0
 800a4ea:	1c43      	adds	r3, r0, #1
 800a4ec:	d11e      	bne.n	800a52c <_malloc_r+0x74>
 800a4ee:	682c      	ldr	r4, [r5, #0]
 800a4f0:	0025      	movs	r5, r4
 800a4f2:	2d00      	cmp	r5, #0
 800a4f4:	d14a      	bne.n	800a58c <_malloc_r+0xd4>
 800a4f6:	6823      	ldr	r3, [r4, #0]
 800a4f8:	0029      	movs	r1, r5
 800a4fa:	18e3      	adds	r3, r4, r3
 800a4fc:	0030      	movs	r0, r6
 800a4fe:	9301      	str	r3, [sp, #4]
 800a500:	f000 fd08 	bl	800af14 <_sbrk_r>
 800a504:	9b01      	ldr	r3, [sp, #4]
 800a506:	4283      	cmp	r3, r0
 800a508:	d143      	bne.n	800a592 <_malloc_r+0xda>
 800a50a:	6823      	ldr	r3, [r4, #0]
 800a50c:	3703      	adds	r7, #3
 800a50e:	1aff      	subs	r7, r7, r3
 800a510:	2303      	movs	r3, #3
 800a512:	439f      	bics	r7, r3
 800a514:	3708      	adds	r7, #8
 800a516:	2f0c      	cmp	r7, #12
 800a518:	d200      	bcs.n	800a51c <_malloc_r+0x64>
 800a51a:	270c      	movs	r7, #12
 800a51c:	0039      	movs	r1, r7
 800a51e:	0030      	movs	r0, r6
 800a520:	f7ff ffa8 	bl	800a474 <sbrk_aligned>
 800a524:	1c43      	adds	r3, r0, #1
 800a526:	d034      	beq.n	800a592 <_malloc_r+0xda>
 800a528:	6823      	ldr	r3, [r4, #0]
 800a52a:	19df      	adds	r7, r3, r7
 800a52c:	6027      	str	r7, [r4, #0]
 800a52e:	e013      	b.n	800a558 <_malloc_r+0xa0>
 800a530:	2b00      	cmp	r3, #0
 800a532:	dacb      	bge.n	800a4cc <_malloc_r+0x14>
 800a534:	230c      	movs	r3, #12
 800a536:	2500      	movs	r5, #0
 800a538:	6033      	str	r3, [r6, #0]
 800a53a:	0028      	movs	r0, r5
 800a53c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a53e:	6822      	ldr	r2, [r4, #0]
 800a540:	1bd1      	subs	r1, r2, r7
 800a542:	d420      	bmi.n	800a586 <_malloc_r+0xce>
 800a544:	290b      	cmp	r1, #11
 800a546:	d917      	bls.n	800a578 <_malloc_r+0xc0>
 800a548:	19e2      	adds	r2, r4, r7
 800a54a:	6027      	str	r7, [r4, #0]
 800a54c:	42a3      	cmp	r3, r4
 800a54e:	d111      	bne.n	800a574 <_malloc_r+0xbc>
 800a550:	602a      	str	r2, [r5, #0]
 800a552:	6863      	ldr	r3, [r4, #4]
 800a554:	6011      	str	r1, [r2, #0]
 800a556:	6053      	str	r3, [r2, #4]
 800a558:	0030      	movs	r0, r6
 800a55a:	0025      	movs	r5, r4
 800a55c:	f001 f82e 	bl	800b5bc <__malloc_unlock>
 800a560:	2207      	movs	r2, #7
 800a562:	350b      	adds	r5, #11
 800a564:	1d23      	adds	r3, r4, #4
 800a566:	4395      	bics	r5, r2
 800a568:	1aea      	subs	r2, r5, r3
 800a56a:	429d      	cmp	r5, r3
 800a56c:	d0e5      	beq.n	800a53a <_malloc_r+0x82>
 800a56e:	1b5b      	subs	r3, r3, r5
 800a570:	50a3      	str	r3, [r4, r2]
 800a572:	e7e2      	b.n	800a53a <_malloc_r+0x82>
 800a574:	605a      	str	r2, [r3, #4]
 800a576:	e7ec      	b.n	800a552 <_malloc_r+0x9a>
 800a578:	6862      	ldr	r2, [r4, #4]
 800a57a:	42a3      	cmp	r3, r4
 800a57c:	d101      	bne.n	800a582 <_malloc_r+0xca>
 800a57e:	602a      	str	r2, [r5, #0]
 800a580:	e7ea      	b.n	800a558 <_malloc_r+0xa0>
 800a582:	605a      	str	r2, [r3, #4]
 800a584:	e7e8      	b.n	800a558 <_malloc_r+0xa0>
 800a586:	0023      	movs	r3, r4
 800a588:	6864      	ldr	r4, [r4, #4]
 800a58a:	e7a7      	b.n	800a4dc <_malloc_r+0x24>
 800a58c:	002c      	movs	r4, r5
 800a58e:	686d      	ldr	r5, [r5, #4]
 800a590:	e7af      	b.n	800a4f2 <_malloc_r+0x3a>
 800a592:	230c      	movs	r3, #12
 800a594:	0030      	movs	r0, r6
 800a596:	6033      	str	r3, [r6, #0]
 800a598:	f001 f810 	bl	800b5bc <__malloc_unlock>
 800a59c:	e7cd      	b.n	800a53a <_malloc_r+0x82>
 800a59e:	46c0      	nop			; (mov r8, r8)
 800a5a0:	200009d8 	.word	0x200009d8

0800a5a4 <__ssputs_r>:
 800a5a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a5a6:	688e      	ldr	r6, [r1, #8]
 800a5a8:	b085      	sub	sp, #20
 800a5aa:	0007      	movs	r7, r0
 800a5ac:	000c      	movs	r4, r1
 800a5ae:	9203      	str	r2, [sp, #12]
 800a5b0:	9301      	str	r3, [sp, #4]
 800a5b2:	429e      	cmp	r6, r3
 800a5b4:	d83c      	bhi.n	800a630 <__ssputs_r+0x8c>
 800a5b6:	2390      	movs	r3, #144	; 0x90
 800a5b8:	898a      	ldrh	r2, [r1, #12]
 800a5ba:	00db      	lsls	r3, r3, #3
 800a5bc:	421a      	tst	r2, r3
 800a5be:	d034      	beq.n	800a62a <__ssputs_r+0x86>
 800a5c0:	6909      	ldr	r1, [r1, #16]
 800a5c2:	6823      	ldr	r3, [r4, #0]
 800a5c4:	6960      	ldr	r0, [r4, #20]
 800a5c6:	1a5b      	subs	r3, r3, r1
 800a5c8:	9302      	str	r3, [sp, #8]
 800a5ca:	2303      	movs	r3, #3
 800a5cc:	4343      	muls	r3, r0
 800a5ce:	0fdd      	lsrs	r5, r3, #31
 800a5d0:	18ed      	adds	r5, r5, r3
 800a5d2:	9b01      	ldr	r3, [sp, #4]
 800a5d4:	9802      	ldr	r0, [sp, #8]
 800a5d6:	3301      	adds	r3, #1
 800a5d8:	181b      	adds	r3, r3, r0
 800a5da:	106d      	asrs	r5, r5, #1
 800a5dc:	42ab      	cmp	r3, r5
 800a5de:	d900      	bls.n	800a5e2 <__ssputs_r+0x3e>
 800a5e0:	001d      	movs	r5, r3
 800a5e2:	0553      	lsls	r3, r2, #21
 800a5e4:	d532      	bpl.n	800a64c <__ssputs_r+0xa8>
 800a5e6:	0029      	movs	r1, r5
 800a5e8:	0038      	movs	r0, r7
 800a5ea:	f7ff ff65 	bl	800a4b8 <_malloc_r>
 800a5ee:	1e06      	subs	r6, r0, #0
 800a5f0:	d109      	bne.n	800a606 <__ssputs_r+0x62>
 800a5f2:	230c      	movs	r3, #12
 800a5f4:	603b      	str	r3, [r7, #0]
 800a5f6:	2340      	movs	r3, #64	; 0x40
 800a5f8:	2001      	movs	r0, #1
 800a5fa:	89a2      	ldrh	r2, [r4, #12]
 800a5fc:	4240      	negs	r0, r0
 800a5fe:	4313      	orrs	r3, r2
 800a600:	81a3      	strh	r3, [r4, #12]
 800a602:	b005      	add	sp, #20
 800a604:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a606:	9a02      	ldr	r2, [sp, #8]
 800a608:	6921      	ldr	r1, [r4, #16]
 800a60a:	f7ff f9ea 	bl	80099e2 <memcpy>
 800a60e:	89a3      	ldrh	r3, [r4, #12]
 800a610:	4a14      	ldr	r2, [pc, #80]	; (800a664 <__ssputs_r+0xc0>)
 800a612:	401a      	ands	r2, r3
 800a614:	2380      	movs	r3, #128	; 0x80
 800a616:	4313      	orrs	r3, r2
 800a618:	81a3      	strh	r3, [r4, #12]
 800a61a:	9b02      	ldr	r3, [sp, #8]
 800a61c:	6126      	str	r6, [r4, #16]
 800a61e:	18f6      	adds	r6, r6, r3
 800a620:	6026      	str	r6, [r4, #0]
 800a622:	6165      	str	r5, [r4, #20]
 800a624:	9e01      	ldr	r6, [sp, #4]
 800a626:	1aed      	subs	r5, r5, r3
 800a628:	60a5      	str	r5, [r4, #8]
 800a62a:	9b01      	ldr	r3, [sp, #4]
 800a62c:	429e      	cmp	r6, r3
 800a62e:	d900      	bls.n	800a632 <__ssputs_r+0x8e>
 800a630:	9e01      	ldr	r6, [sp, #4]
 800a632:	0032      	movs	r2, r6
 800a634:	9903      	ldr	r1, [sp, #12]
 800a636:	6820      	ldr	r0, [r4, #0]
 800a638:	f000 ffa5 	bl	800b586 <memmove>
 800a63c:	68a3      	ldr	r3, [r4, #8]
 800a63e:	2000      	movs	r0, #0
 800a640:	1b9b      	subs	r3, r3, r6
 800a642:	60a3      	str	r3, [r4, #8]
 800a644:	6823      	ldr	r3, [r4, #0]
 800a646:	199e      	adds	r6, r3, r6
 800a648:	6026      	str	r6, [r4, #0]
 800a64a:	e7da      	b.n	800a602 <__ssputs_r+0x5e>
 800a64c:	002a      	movs	r2, r5
 800a64e:	0038      	movs	r0, r7
 800a650:	f000 ffbc 	bl	800b5cc <_realloc_r>
 800a654:	1e06      	subs	r6, r0, #0
 800a656:	d1e0      	bne.n	800a61a <__ssputs_r+0x76>
 800a658:	0038      	movs	r0, r7
 800a65a:	6921      	ldr	r1, [r4, #16]
 800a65c:	f7ff fec0 	bl	800a3e0 <_free_r>
 800a660:	e7c7      	b.n	800a5f2 <__ssputs_r+0x4e>
 800a662:	46c0      	nop			; (mov r8, r8)
 800a664:	fffffb7f 	.word	0xfffffb7f

0800a668 <_svfiprintf_r>:
 800a668:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a66a:	b0a1      	sub	sp, #132	; 0x84
 800a66c:	9003      	str	r0, [sp, #12]
 800a66e:	001d      	movs	r5, r3
 800a670:	898b      	ldrh	r3, [r1, #12]
 800a672:	000f      	movs	r7, r1
 800a674:	0016      	movs	r6, r2
 800a676:	061b      	lsls	r3, r3, #24
 800a678:	d511      	bpl.n	800a69e <_svfiprintf_r+0x36>
 800a67a:	690b      	ldr	r3, [r1, #16]
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d10e      	bne.n	800a69e <_svfiprintf_r+0x36>
 800a680:	2140      	movs	r1, #64	; 0x40
 800a682:	f7ff ff19 	bl	800a4b8 <_malloc_r>
 800a686:	6038      	str	r0, [r7, #0]
 800a688:	6138      	str	r0, [r7, #16]
 800a68a:	2800      	cmp	r0, #0
 800a68c:	d105      	bne.n	800a69a <_svfiprintf_r+0x32>
 800a68e:	230c      	movs	r3, #12
 800a690:	9a03      	ldr	r2, [sp, #12]
 800a692:	3801      	subs	r0, #1
 800a694:	6013      	str	r3, [r2, #0]
 800a696:	b021      	add	sp, #132	; 0x84
 800a698:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a69a:	2340      	movs	r3, #64	; 0x40
 800a69c:	617b      	str	r3, [r7, #20]
 800a69e:	2300      	movs	r3, #0
 800a6a0:	ac08      	add	r4, sp, #32
 800a6a2:	6163      	str	r3, [r4, #20]
 800a6a4:	3320      	adds	r3, #32
 800a6a6:	7663      	strb	r3, [r4, #25]
 800a6a8:	3310      	adds	r3, #16
 800a6aa:	76a3      	strb	r3, [r4, #26]
 800a6ac:	9507      	str	r5, [sp, #28]
 800a6ae:	0035      	movs	r5, r6
 800a6b0:	782b      	ldrb	r3, [r5, #0]
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d001      	beq.n	800a6ba <_svfiprintf_r+0x52>
 800a6b6:	2b25      	cmp	r3, #37	; 0x25
 800a6b8:	d147      	bne.n	800a74a <_svfiprintf_r+0xe2>
 800a6ba:	1bab      	subs	r3, r5, r6
 800a6bc:	9305      	str	r3, [sp, #20]
 800a6be:	42b5      	cmp	r5, r6
 800a6c0:	d00c      	beq.n	800a6dc <_svfiprintf_r+0x74>
 800a6c2:	0032      	movs	r2, r6
 800a6c4:	0039      	movs	r1, r7
 800a6c6:	9803      	ldr	r0, [sp, #12]
 800a6c8:	f7ff ff6c 	bl	800a5a4 <__ssputs_r>
 800a6cc:	1c43      	adds	r3, r0, #1
 800a6ce:	d100      	bne.n	800a6d2 <_svfiprintf_r+0x6a>
 800a6d0:	e0ae      	b.n	800a830 <_svfiprintf_r+0x1c8>
 800a6d2:	6962      	ldr	r2, [r4, #20]
 800a6d4:	9b05      	ldr	r3, [sp, #20]
 800a6d6:	4694      	mov	ip, r2
 800a6d8:	4463      	add	r3, ip
 800a6da:	6163      	str	r3, [r4, #20]
 800a6dc:	782b      	ldrb	r3, [r5, #0]
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d100      	bne.n	800a6e4 <_svfiprintf_r+0x7c>
 800a6e2:	e0a5      	b.n	800a830 <_svfiprintf_r+0x1c8>
 800a6e4:	2201      	movs	r2, #1
 800a6e6:	2300      	movs	r3, #0
 800a6e8:	4252      	negs	r2, r2
 800a6ea:	6062      	str	r2, [r4, #4]
 800a6ec:	a904      	add	r1, sp, #16
 800a6ee:	3254      	adds	r2, #84	; 0x54
 800a6f0:	1852      	adds	r2, r2, r1
 800a6f2:	1c6e      	adds	r6, r5, #1
 800a6f4:	6023      	str	r3, [r4, #0]
 800a6f6:	60e3      	str	r3, [r4, #12]
 800a6f8:	60a3      	str	r3, [r4, #8]
 800a6fa:	7013      	strb	r3, [r2, #0]
 800a6fc:	65a3      	str	r3, [r4, #88]	; 0x58
 800a6fe:	2205      	movs	r2, #5
 800a700:	7831      	ldrb	r1, [r6, #0]
 800a702:	4854      	ldr	r0, [pc, #336]	; (800a854 <_svfiprintf_r+0x1ec>)
 800a704:	f7ff f962 	bl	80099cc <memchr>
 800a708:	1c75      	adds	r5, r6, #1
 800a70a:	2800      	cmp	r0, #0
 800a70c:	d11f      	bne.n	800a74e <_svfiprintf_r+0xe6>
 800a70e:	6822      	ldr	r2, [r4, #0]
 800a710:	06d3      	lsls	r3, r2, #27
 800a712:	d504      	bpl.n	800a71e <_svfiprintf_r+0xb6>
 800a714:	2353      	movs	r3, #83	; 0x53
 800a716:	a904      	add	r1, sp, #16
 800a718:	185b      	adds	r3, r3, r1
 800a71a:	2120      	movs	r1, #32
 800a71c:	7019      	strb	r1, [r3, #0]
 800a71e:	0713      	lsls	r3, r2, #28
 800a720:	d504      	bpl.n	800a72c <_svfiprintf_r+0xc4>
 800a722:	2353      	movs	r3, #83	; 0x53
 800a724:	a904      	add	r1, sp, #16
 800a726:	185b      	adds	r3, r3, r1
 800a728:	212b      	movs	r1, #43	; 0x2b
 800a72a:	7019      	strb	r1, [r3, #0]
 800a72c:	7833      	ldrb	r3, [r6, #0]
 800a72e:	2b2a      	cmp	r3, #42	; 0x2a
 800a730:	d016      	beq.n	800a760 <_svfiprintf_r+0xf8>
 800a732:	0035      	movs	r5, r6
 800a734:	2100      	movs	r1, #0
 800a736:	200a      	movs	r0, #10
 800a738:	68e3      	ldr	r3, [r4, #12]
 800a73a:	782a      	ldrb	r2, [r5, #0]
 800a73c:	1c6e      	adds	r6, r5, #1
 800a73e:	3a30      	subs	r2, #48	; 0x30
 800a740:	2a09      	cmp	r2, #9
 800a742:	d94e      	bls.n	800a7e2 <_svfiprintf_r+0x17a>
 800a744:	2900      	cmp	r1, #0
 800a746:	d111      	bne.n	800a76c <_svfiprintf_r+0x104>
 800a748:	e017      	b.n	800a77a <_svfiprintf_r+0x112>
 800a74a:	3501      	adds	r5, #1
 800a74c:	e7b0      	b.n	800a6b0 <_svfiprintf_r+0x48>
 800a74e:	4b41      	ldr	r3, [pc, #260]	; (800a854 <_svfiprintf_r+0x1ec>)
 800a750:	6822      	ldr	r2, [r4, #0]
 800a752:	1ac0      	subs	r0, r0, r3
 800a754:	2301      	movs	r3, #1
 800a756:	4083      	lsls	r3, r0
 800a758:	4313      	orrs	r3, r2
 800a75a:	002e      	movs	r6, r5
 800a75c:	6023      	str	r3, [r4, #0]
 800a75e:	e7ce      	b.n	800a6fe <_svfiprintf_r+0x96>
 800a760:	9b07      	ldr	r3, [sp, #28]
 800a762:	1d19      	adds	r1, r3, #4
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	9107      	str	r1, [sp, #28]
 800a768:	2b00      	cmp	r3, #0
 800a76a:	db01      	blt.n	800a770 <_svfiprintf_r+0x108>
 800a76c:	930b      	str	r3, [sp, #44]	; 0x2c
 800a76e:	e004      	b.n	800a77a <_svfiprintf_r+0x112>
 800a770:	425b      	negs	r3, r3
 800a772:	60e3      	str	r3, [r4, #12]
 800a774:	2302      	movs	r3, #2
 800a776:	4313      	orrs	r3, r2
 800a778:	6023      	str	r3, [r4, #0]
 800a77a:	782b      	ldrb	r3, [r5, #0]
 800a77c:	2b2e      	cmp	r3, #46	; 0x2e
 800a77e:	d10a      	bne.n	800a796 <_svfiprintf_r+0x12e>
 800a780:	786b      	ldrb	r3, [r5, #1]
 800a782:	2b2a      	cmp	r3, #42	; 0x2a
 800a784:	d135      	bne.n	800a7f2 <_svfiprintf_r+0x18a>
 800a786:	9b07      	ldr	r3, [sp, #28]
 800a788:	3502      	adds	r5, #2
 800a78a:	1d1a      	adds	r2, r3, #4
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	9207      	str	r2, [sp, #28]
 800a790:	2b00      	cmp	r3, #0
 800a792:	db2b      	blt.n	800a7ec <_svfiprintf_r+0x184>
 800a794:	9309      	str	r3, [sp, #36]	; 0x24
 800a796:	4e30      	ldr	r6, [pc, #192]	; (800a858 <_svfiprintf_r+0x1f0>)
 800a798:	2203      	movs	r2, #3
 800a79a:	0030      	movs	r0, r6
 800a79c:	7829      	ldrb	r1, [r5, #0]
 800a79e:	f7ff f915 	bl	80099cc <memchr>
 800a7a2:	2800      	cmp	r0, #0
 800a7a4:	d006      	beq.n	800a7b4 <_svfiprintf_r+0x14c>
 800a7a6:	2340      	movs	r3, #64	; 0x40
 800a7a8:	1b80      	subs	r0, r0, r6
 800a7aa:	4083      	lsls	r3, r0
 800a7ac:	6822      	ldr	r2, [r4, #0]
 800a7ae:	3501      	adds	r5, #1
 800a7b0:	4313      	orrs	r3, r2
 800a7b2:	6023      	str	r3, [r4, #0]
 800a7b4:	7829      	ldrb	r1, [r5, #0]
 800a7b6:	2206      	movs	r2, #6
 800a7b8:	4828      	ldr	r0, [pc, #160]	; (800a85c <_svfiprintf_r+0x1f4>)
 800a7ba:	1c6e      	adds	r6, r5, #1
 800a7bc:	7621      	strb	r1, [r4, #24]
 800a7be:	f7ff f905 	bl	80099cc <memchr>
 800a7c2:	2800      	cmp	r0, #0
 800a7c4:	d03c      	beq.n	800a840 <_svfiprintf_r+0x1d8>
 800a7c6:	4b26      	ldr	r3, [pc, #152]	; (800a860 <_svfiprintf_r+0x1f8>)
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d125      	bne.n	800a818 <_svfiprintf_r+0x1b0>
 800a7cc:	2207      	movs	r2, #7
 800a7ce:	9b07      	ldr	r3, [sp, #28]
 800a7d0:	3307      	adds	r3, #7
 800a7d2:	4393      	bics	r3, r2
 800a7d4:	3308      	adds	r3, #8
 800a7d6:	9307      	str	r3, [sp, #28]
 800a7d8:	6963      	ldr	r3, [r4, #20]
 800a7da:	9a04      	ldr	r2, [sp, #16]
 800a7dc:	189b      	adds	r3, r3, r2
 800a7de:	6163      	str	r3, [r4, #20]
 800a7e0:	e765      	b.n	800a6ae <_svfiprintf_r+0x46>
 800a7e2:	4343      	muls	r3, r0
 800a7e4:	0035      	movs	r5, r6
 800a7e6:	2101      	movs	r1, #1
 800a7e8:	189b      	adds	r3, r3, r2
 800a7ea:	e7a6      	b.n	800a73a <_svfiprintf_r+0xd2>
 800a7ec:	2301      	movs	r3, #1
 800a7ee:	425b      	negs	r3, r3
 800a7f0:	e7d0      	b.n	800a794 <_svfiprintf_r+0x12c>
 800a7f2:	2300      	movs	r3, #0
 800a7f4:	200a      	movs	r0, #10
 800a7f6:	001a      	movs	r2, r3
 800a7f8:	3501      	adds	r5, #1
 800a7fa:	6063      	str	r3, [r4, #4]
 800a7fc:	7829      	ldrb	r1, [r5, #0]
 800a7fe:	1c6e      	adds	r6, r5, #1
 800a800:	3930      	subs	r1, #48	; 0x30
 800a802:	2909      	cmp	r1, #9
 800a804:	d903      	bls.n	800a80e <_svfiprintf_r+0x1a6>
 800a806:	2b00      	cmp	r3, #0
 800a808:	d0c5      	beq.n	800a796 <_svfiprintf_r+0x12e>
 800a80a:	9209      	str	r2, [sp, #36]	; 0x24
 800a80c:	e7c3      	b.n	800a796 <_svfiprintf_r+0x12e>
 800a80e:	4342      	muls	r2, r0
 800a810:	0035      	movs	r5, r6
 800a812:	2301      	movs	r3, #1
 800a814:	1852      	adds	r2, r2, r1
 800a816:	e7f1      	b.n	800a7fc <_svfiprintf_r+0x194>
 800a818:	ab07      	add	r3, sp, #28
 800a81a:	9300      	str	r3, [sp, #0]
 800a81c:	003a      	movs	r2, r7
 800a81e:	0021      	movs	r1, r4
 800a820:	4b10      	ldr	r3, [pc, #64]	; (800a864 <_svfiprintf_r+0x1fc>)
 800a822:	9803      	ldr	r0, [sp, #12]
 800a824:	f7fc f91c 	bl	8006a60 <_printf_float>
 800a828:	9004      	str	r0, [sp, #16]
 800a82a:	9b04      	ldr	r3, [sp, #16]
 800a82c:	3301      	adds	r3, #1
 800a82e:	d1d3      	bne.n	800a7d8 <_svfiprintf_r+0x170>
 800a830:	89bb      	ldrh	r3, [r7, #12]
 800a832:	980d      	ldr	r0, [sp, #52]	; 0x34
 800a834:	065b      	lsls	r3, r3, #25
 800a836:	d400      	bmi.n	800a83a <_svfiprintf_r+0x1d2>
 800a838:	e72d      	b.n	800a696 <_svfiprintf_r+0x2e>
 800a83a:	2001      	movs	r0, #1
 800a83c:	4240      	negs	r0, r0
 800a83e:	e72a      	b.n	800a696 <_svfiprintf_r+0x2e>
 800a840:	ab07      	add	r3, sp, #28
 800a842:	9300      	str	r3, [sp, #0]
 800a844:	003a      	movs	r2, r7
 800a846:	0021      	movs	r1, r4
 800a848:	4b06      	ldr	r3, [pc, #24]	; (800a864 <_svfiprintf_r+0x1fc>)
 800a84a:	9803      	ldr	r0, [sp, #12]
 800a84c:	f7fc fbba 	bl	8006fc4 <_printf_i>
 800a850:	e7ea      	b.n	800a828 <_svfiprintf_r+0x1c0>
 800a852:	46c0      	nop			; (mov r8, r8)
 800a854:	0800c324 	.word	0x0800c324
 800a858:	0800c32a 	.word	0x0800c32a
 800a85c:	0800c32e 	.word	0x0800c32e
 800a860:	08006a61 	.word	0x08006a61
 800a864:	0800a5a5 	.word	0x0800a5a5

0800a868 <_sungetc_r>:
 800a868:	b570      	push	{r4, r5, r6, lr}
 800a86a:	0014      	movs	r4, r2
 800a86c:	1c4b      	adds	r3, r1, #1
 800a86e:	d103      	bne.n	800a878 <_sungetc_r+0x10>
 800a870:	2501      	movs	r5, #1
 800a872:	426d      	negs	r5, r5
 800a874:	0028      	movs	r0, r5
 800a876:	bd70      	pop	{r4, r5, r6, pc}
 800a878:	8993      	ldrh	r3, [r2, #12]
 800a87a:	2220      	movs	r2, #32
 800a87c:	4393      	bics	r3, r2
 800a87e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800a880:	81a3      	strh	r3, [r4, #12]
 800a882:	b2ce      	uxtb	r6, r1
 800a884:	6863      	ldr	r3, [r4, #4]
 800a886:	b2cd      	uxtb	r5, r1
 800a888:	2a00      	cmp	r2, #0
 800a88a:	d010      	beq.n	800a8ae <_sungetc_r+0x46>
 800a88c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800a88e:	429a      	cmp	r2, r3
 800a890:	dd07      	ble.n	800a8a2 <_sungetc_r+0x3a>
 800a892:	6823      	ldr	r3, [r4, #0]
 800a894:	3b01      	subs	r3, #1
 800a896:	6023      	str	r3, [r4, #0]
 800a898:	701e      	strb	r6, [r3, #0]
 800a89a:	6863      	ldr	r3, [r4, #4]
 800a89c:	3301      	adds	r3, #1
 800a89e:	6063      	str	r3, [r4, #4]
 800a8a0:	e7e8      	b.n	800a874 <_sungetc_r+0xc>
 800a8a2:	0021      	movs	r1, r4
 800a8a4:	f000 fc24 	bl	800b0f0 <__submore>
 800a8a8:	2800      	cmp	r0, #0
 800a8aa:	d0f2      	beq.n	800a892 <_sungetc_r+0x2a>
 800a8ac:	e7e0      	b.n	800a870 <_sungetc_r+0x8>
 800a8ae:	6921      	ldr	r1, [r4, #16]
 800a8b0:	6822      	ldr	r2, [r4, #0]
 800a8b2:	2900      	cmp	r1, #0
 800a8b4:	d007      	beq.n	800a8c6 <_sungetc_r+0x5e>
 800a8b6:	4291      	cmp	r1, r2
 800a8b8:	d205      	bcs.n	800a8c6 <_sungetc_r+0x5e>
 800a8ba:	1e51      	subs	r1, r2, #1
 800a8bc:	7808      	ldrb	r0, [r1, #0]
 800a8be:	42a8      	cmp	r0, r5
 800a8c0:	d101      	bne.n	800a8c6 <_sungetc_r+0x5e>
 800a8c2:	6021      	str	r1, [r4, #0]
 800a8c4:	e7ea      	b.n	800a89c <_sungetc_r+0x34>
 800a8c6:	6423      	str	r3, [r4, #64]	; 0x40
 800a8c8:	0023      	movs	r3, r4
 800a8ca:	3344      	adds	r3, #68	; 0x44
 800a8cc:	6363      	str	r3, [r4, #52]	; 0x34
 800a8ce:	2303      	movs	r3, #3
 800a8d0:	63a3      	str	r3, [r4, #56]	; 0x38
 800a8d2:	0023      	movs	r3, r4
 800a8d4:	3346      	adds	r3, #70	; 0x46
 800a8d6:	63e2      	str	r2, [r4, #60]	; 0x3c
 800a8d8:	701e      	strb	r6, [r3, #0]
 800a8da:	6023      	str	r3, [r4, #0]
 800a8dc:	2301      	movs	r3, #1
 800a8de:	e7de      	b.n	800a89e <_sungetc_r+0x36>

0800a8e0 <__ssrefill_r>:
 800a8e0:	b510      	push	{r4, lr}
 800a8e2:	000c      	movs	r4, r1
 800a8e4:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800a8e6:	2900      	cmp	r1, #0
 800a8e8:	d00e      	beq.n	800a908 <__ssrefill_r+0x28>
 800a8ea:	0023      	movs	r3, r4
 800a8ec:	3344      	adds	r3, #68	; 0x44
 800a8ee:	4299      	cmp	r1, r3
 800a8f0:	d001      	beq.n	800a8f6 <__ssrefill_r+0x16>
 800a8f2:	f7ff fd75 	bl	800a3e0 <_free_r>
 800a8f6:	2000      	movs	r0, #0
 800a8f8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a8fa:	6360      	str	r0, [r4, #52]	; 0x34
 800a8fc:	6063      	str	r3, [r4, #4]
 800a8fe:	4283      	cmp	r3, r0
 800a900:	d002      	beq.n	800a908 <__ssrefill_r+0x28>
 800a902:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a904:	6023      	str	r3, [r4, #0]
 800a906:	bd10      	pop	{r4, pc}
 800a908:	6923      	ldr	r3, [r4, #16]
 800a90a:	2001      	movs	r0, #1
 800a90c:	6023      	str	r3, [r4, #0]
 800a90e:	2300      	movs	r3, #0
 800a910:	89a2      	ldrh	r2, [r4, #12]
 800a912:	6063      	str	r3, [r4, #4]
 800a914:	3320      	adds	r3, #32
 800a916:	4313      	orrs	r3, r2
 800a918:	81a3      	strh	r3, [r4, #12]
 800a91a:	4240      	negs	r0, r0
 800a91c:	e7f3      	b.n	800a906 <__ssrefill_r+0x26>
	...

0800a920 <__ssvfiscanf_r>:
 800a920:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a922:	4cb8      	ldr	r4, [pc, #736]	; (800ac04 <__ssvfiscanf_r+0x2e4>)
 800a924:	0006      	movs	r6, r0
 800a926:	44a5      	add	sp, r4
 800a928:	000c      	movs	r4, r1
 800a92a:	2100      	movs	r1, #0
 800a92c:	9146      	str	r1, [sp, #280]	; 0x118
 800a92e:	9147      	str	r1, [sp, #284]	; 0x11c
 800a930:	a903      	add	r1, sp, #12
 800a932:	9148      	str	r1, [sp, #288]	; 0x120
 800a934:	21be      	movs	r1, #190	; 0xbe
 800a936:	48b4      	ldr	r0, [pc, #720]	; (800ac08 <__ssvfiscanf_r+0x2e8>)
 800a938:	0049      	lsls	r1, r1, #1
 800a93a:	ad43      	add	r5, sp, #268	; 0x10c
 800a93c:	5068      	str	r0, [r5, r1]
 800a93e:	25c0      	movs	r5, #192	; 0xc0
 800a940:	49b2      	ldr	r1, [pc, #712]	; (800ac0c <__ssvfiscanf_r+0x2ec>)
 800a942:	006d      	lsls	r5, r5, #1
 800a944:	a843      	add	r0, sp, #268	; 0x10c
 800a946:	5141      	str	r1, [r0, r5]
 800a948:	9302      	str	r3, [sp, #8]
 800a94a:	7813      	ldrb	r3, [r2, #0]
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d100      	bne.n	800a952 <__ssvfiscanf_r+0x32>
 800a950:	e155      	b.n	800abfe <__ssvfiscanf_r+0x2de>
 800a952:	49af      	ldr	r1, [pc, #700]	; (800ac10 <__ssvfiscanf_r+0x2f0>)
 800a954:	2508      	movs	r5, #8
 800a956:	5cc8      	ldrb	r0, [r1, r3]
 800a958:	2108      	movs	r1, #8
 800a95a:	1c57      	adds	r7, r2, #1
 800a95c:	4001      	ands	r1, r0
 800a95e:	4228      	tst	r0, r5
 800a960:	d020      	beq.n	800a9a4 <__ssvfiscanf_r+0x84>
 800a962:	6863      	ldr	r3, [r4, #4]
 800a964:	2b00      	cmp	r3, #0
 800a966:	dd12      	ble.n	800a98e <__ssvfiscanf_r+0x6e>
 800a968:	6823      	ldr	r3, [r4, #0]
 800a96a:	49a9      	ldr	r1, [pc, #676]	; (800ac10 <__ssvfiscanf_r+0x2f0>)
 800a96c:	781a      	ldrb	r2, [r3, #0]
 800a96e:	5c8a      	ldrb	r2, [r1, r2]
 800a970:	2108      	movs	r1, #8
 800a972:	420a      	tst	r2, r1
 800a974:	d101      	bne.n	800a97a <__ssvfiscanf_r+0x5a>
 800a976:	003a      	movs	r2, r7
 800a978:	e7e7      	b.n	800a94a <__ssvfiscanf_r+0x2a>
 800a97a:	9a47      	ldr	r2, [sp, #284]	; 0x11c
 800a97c:	3301      	adds	r3, #1
 800a97e:	9200      	str	r2, [sp, #0]
 800a980:	3201      	adds	r2, #1
 800a982:	9247      	str	r2, [sp, #284]	; 0x11c
 800a984:	6862      	ldr	r2, [r4, #4]
 800a986:	6023      	str	r3, [r4, #0]
 800a988:	3a01      	subs	r2, #1
 800a98a:	6062      	str	r2, [r4, #4]
 800a98c:	e7e9      	b.n	800a962 <__ssvfiscanf_r+0x42>
 800a98e:	22c0      	movs	r2, #192	; 0xc0
 800a990:	ab43      	add	r3, sp, #268	; 0x10c
 800a992:	0052      	lsls	r2, r2, #1
 800a994:	589b      	ldr	r3, [r3, r2]
 800a996:	0021      	movs	r1, r4
 800a998:	0030      	movs	r0, r6
 800a99a:	9300      	str	r3, [sp, #0]
 800a99c:	4798      	blx	r3
 800a99e:	2800      	cmp	r0, #0
 800a9a0:	d0e2      	beq.n	800a968 <__ssvfiscanf_r+0x48>
 800a9a2:	e7e8      	b.n	800a976 <__ssvfiscanf_r+0x56>
 800a9a4:	001d      	movs	r5, r3
 800a9a6:	2b25      	cmp	r3, #37	; 0x25
 800a9a8:	d164      	bne.n	800aa74 <__ssvfiscanf_r+0x154>
 800a9aa:	9145      	str	r1, [sp, #276]	; 0x114
 800a9ac:	9143      	str	r1, [sp, #268]	; 0x10c
 800a9ae:	7853      	ldrb	r3, [r2, #1]
 800a9b0:	2b2a      	cmp	r3, #42	; 0x2a
 800a9b2:	d102      	bne.n	800a9ba <__ssvfiscanf_r+0x9a>
 800a9b4:	3b1a      	subs	r3, #26
 800a9b6:	9343      	str	r3, [sp, #268]	; 0x10c
 800a9b8:	1c97      	adds	r7, r2, #2
 800a9ba:	003d      	movs	r5, r7
 800a9bc:	220a      	movs	r2, #10
 800a9be:	7829      	ldrb	r1, [r5, #0]
 800a9c0:	1c6b      	adds	r3, r5, #1
 800a9c2:	9300      	str	r3, [sp, #0]
 800a9c4:	000b      	movs	r3, r1
 800a9c6:	3b30      	subs	r3, #48	; 0x30
 800a9c8:	2b09      	cmp	r3, #9
 800a9ca:	d91f      	bls.n	800aa0c <__ssvfiscanf_r+0xec>
 800a9cc:	4f91      	ldr	r7, [pc, #580]	; (800ac14 <__ssvfiscanf_r+0x2f4>)
 800a9ce:	2203      	movs	r2, #3
 800a9d0:	0038      	movs	r0, r7
 800a9d2:	f7fe fffb 	bl	80099cc <memchr>
 800a9d6:	2800      	cmp	r0, #0
 800a9d8:	d007      	beq.n	800a9ea <__ssvfiscanf_r+0xca>
 800a9da:	2301      	movs	r3, #1
 800a9dc:	1bc0      	subs	r0, r0, r7
 800a9de:	4083      	lsls	r3, r0
 800a9e0:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 800a9e2:	9d00      	ldr	r5, [sp, #0]
 800a9e4:	4313      	orrs	r3, r2
 800a9e6:	9201      	str	r2, [sp, #4]
 800a9e8:	9343      	str	r3, [sp, #268]	; 0x10c
 800a9ea:	1c6f      	adds	r7, r5, #1
 800a9ec:	782d      	ldrb	r5, [r5, #0]
 800a9ee:	2d78      	cmp	r5, #120	; 0x78
 800a9f0:	d807      	bhi.n	800aa02 <__ssvfiscanf_r+0xe2>
 800a9f2:	2d57      	cmp	r5, #87	; 0x57
 800a9f4:	d812      	bhi.n	800aa1c <__ssvfiscanf_r+0xfc>
 800a9f6:	2d25      	cmp	r5, #37	; 0x25
 800a9f8:	d03c      	beq.n	800aa74 <__ssvfiscanf_r+0x154>
 800a9fa:	d836      	bhi.n	800aa6a <__ssvfiscanf_r+0x14a>
 800a9fc:	2d00      	cmp	r5, #0
 800a9fe:	d100      	bne.n	800aa02 <__ssvfiscanf_r+0xe2>
 800aa00:	e0fa      	b.n	800abf8 <__ssvfiscanf_r+0x2d8>
 800aa02:	2303      	movs	r3, #3
 800aa04:	9349      	str	r3, [sp, #292]	; 0x124
 800aa06:	3307      	adds	r3, #7
 800aa08:	9344      	str	r3, [sp, #272]	; 0x110
 800aa0a:	e06d      	b.n	800aae8 <__ssvfiscanf_r+0x1c8>
 800aa0c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800aa0e:	9d00      	ldr	r5, [sp, #0]
 800aa10:	9301      	str	r3, [sp, #4]
 800aa12:	4353      	muls	r3, r2
 800aa14:	3b30      	subs	r3, #48	; 0x30
 800aa16:	185b      	adds	r3, r3, r1
 800aa18:	9345      	str	r3, [sp, #276]	; 0x114
 800aa1a:	e7d0      	b.n	800a9be <__ssvfiscanf_r+0x9e>
 800aa1c:	0028      	movs	r0, r5
 800aa1e:	3858      	subs	r0, #88	; 0x58
 800aa20:	2820      	cmp	r0, #32
 800aa22:	d8ee      	bhi.n	800aa02 <__ssvfiscanf_r+0xe2>
 800aa24:	f7f5 fb88 	bl	8000138 <__gnu_thumb1_case_shi>
 800aa28:	ffed0051 	.word	0xffed0051
 800aa2c:	0087ffed 	.word	0x0087ffed
 800aa30:	ffedffed 	.word	0xffedffed
 800aa34:	ffedffed 	.word	0xffedffed
 800aa38:	ffedffed 	.word	0xffedffed
 800aa3c:	0095ffed 	.word	0x0095ffed
 800aa40:	0024007d 	.word	0x0024007d
 800aa44:	00240024 	.word	0x00240024
 800aa48:	007fffed 	.word	0x007fffed
 800aa4c:	ffedffed 	.word	0xffedffed
 800aa50:	ffedffed 	.word	0xffedffed
 800aa54:	0083009f 	.word	0x0083009f
 800aa58:	ffed004b 	.word	0xffed004b
 800aa5c:	009dffed 	.word	0x009dffed
 800aa60:	007dffed 	.word	0x007dffed
 800aa64:	ffedffed 	.word	0xffedffed
 800aa68:	0051      	.short	0x0051
 800aa6a:	3d45      	subs	r5, #69	; 0x45
 800aa6c:	2d02      	cmp	r5, #2
 800aa6e:	d8c8      	bhi.n	800aa02 <__ssvfiscanf_r+0xe2>
 800aa70:	2305      	movs	r3, #5
 800aa72:	e06c      	b.n	800ab4e <__ssvfiscanf_r+0x22e>
 800aa74:	6863      	ldr	r3, [r4, #4]
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	dd0e      	ble.n	800aa98 <__ssvfiscanf_r+0x178>
 800aa7a:	6823      	ldr	r3, [r4, #0]
 800aa7c:	781a      	ldrb	r2, [r3, #0]
 800aa7e:	42aa      	cmp	r2, r5
 800aa80:	d000      	beq.n	800aa84 <__ssvfiscanf_r+0x164>
 800aa82:	e0bc      	b.n	800abfe <__ssvfiscanf_r+0x2de>
 800aa84:	3301      	adds	r3, #1
 800aa86:	6862      	ldr	r2, [r4, #4]
 800aa88:	6023      	str	r3, [r4, #0]
 800aa8a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800aa8c:	3a01      	subs	r2, #1
 800aa8e:	9300      	str	r3, [sp, #0]
 800aa90:	3301      	adds	r3, #1
 800aa92:	6062      	str	r2, [r4, #4]
 800aa94:	9347      	str	r3, [sp, #284]	; 0x11c
 800aa96:	e76e      	b.n	800a976 <__ssvfiscanf_r+0x56>
 800aa98:	22c0      	movs	r2, #192	; 0xc0
 800aa9a:	ab43      	add	r3, sp, #268	; 0x10c
 800aa9c:	0052      	lsls	r2, r2, #1
 800aa9e:	589b      	ldr	r3, [r3, r2]
 800aaa0:	0021      	movs	r1, r4
 800aaa2:	0030      	movs	r0, r6
 800aaa4:	9300      	str	r3, [sp, #0]
 800aaa6:	4798      	blx	r3
 800aaa8:	2800      	cmp	r0, #0
 800aaaa:	d0e6      	beq.n	800aa7a <__ssvfiscanf_r+0x15a>
 800aaac:	9846      	ldr	r0, [sp, #280]	; 0x118
 800aaae:	2800      	cmp	r0, #0
 800aab0:	d000      	beq.n	800aab4 <__ssvfiscanf_r+0x194>
 800aab2:	e09d      	b.n	800abf0 <__ssvfiscanf_r+0x2d0>
 800aab4:	3801      	subs	r0, #1
 800aab6:	23a5      	movs	r3, #165	; 0xa5
 800aab8:	009b      	lsls	r3, r3, #2
 800aaba:	449d      	add	sp, r3
 800aabc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aabe:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800aac0:	9300      	str	r3, [sp, #0]
 800aac2:	2320      	movs	r3, #32
 800aac4:	9a00      	ldr	r2, [sp, #0]
 800aac6:	4313      	orrs	r3, r2
 800aac8:	9343      	str	r3, [sp, #268]	; 0x10c
 800aaca:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800aacc:	9300      	str	r3, [sp, #0]
 800aace:	2380      	movs	r3, #128	; 0x80
 800aad0:	9a00      	ldr	r2, [sp, #0]
 800aad2:	009b      	lsls	r3, r3, #2
 800aad4:	4313      	orrs	r3, r2
 800aad6:	9343      	str	r3, [sp, #268]	; 0x10c
 800aad8:	2310      	movs	r3, #16
 800aada:	9344      	str	r3, [sp, #272]	; 0x110
 800aadc:	236e      	movs	r3, #110	; 0x6e
 800aade:	42ab      	cmp	r3, r5
 800aae0:	41ad      	sbcs	r5, r5
 800aae2:	426d      	negs	r5, r5
 800aae4:	3503      	adds	r5, #3
 800aae6:	9549      	str	r5, [sp, #292]	; 0x124
 800aae8:	6863      	ldr	r3, [r4, #4]
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	dd4a      	ble.n	800ab84 <__ssvfiscanf_r+0x264>
 800aaee:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800aaf0:	9300      	str	r3, [sp, #0]
 800aaf2:	065b      	lsls	r3, r3, #25
 800aaf4:	d406      	bmi.n	800ab04 <__ssvfiscanf_r+0x1e4>
 800aaf6:	6823      	ldr	r3, [r4, #0]
 800aaf8:	4945      	ldr	r1, [pc, #276]	; (800ac10 <__ssvfiscanf_r+0x2f0>)
 800aafa:	781a      	ldrb	r2, [r3, #0]
 800aafc:	5c8a      	ldrb	r2, [r1, r2]
 800aafe:	2108      	movs	r1, #8
 800ab00:	420a      	tst	r2, r1
 800ab02:	d14a      	bne.n	800ab9a <__ssvfiscanf_r+0x27a>
 800ab04:	9b49      	ldr	r3, [sp, #292]	; 0x124
 800ab06:	2b02      	cmp	r3, #2
 800ab08:	dc5e      	bgt.n	800abc8 <__ssvfiscanf_r+0x2a8>
 800ab0a:	0022      	movs	r2, r4
 800ab0c:	0030      	movs	r0, r6
 800ab0e:	ab02      	add	r3, sp, #8
 800ab10:	a943      	add	r1, sp, #268	; 0x10c
 800ab12:	f000 f883 	bl	800ac1c <_scanf_chars>
 800ab16:	2801      	cmp	r0, #1
 800ab18:	d071      	beq.n	800abfe <__ssvfiscanf_r+0x2de>
 800ab1a:	2802      	cmp	r0, #2
 800ab1c:	d000      	beq.n	800ab20 <__ssvfiscanf_r+0x200>
 800ab1e:	e72a      	b.n	800a976 <__ssvfiscanf_r+0x56>
 800ab20:	e7c4      	b.n	800aaac <__ssvfiscanf_r+0x18c>
 800ab22:	230a      	movs	r3, #10
 800ab24:	e7d9      	b.n	800aada <__ssvfiscanf_r+0x1ba>
 800ab26:	2300      	movs	r3, #0
 800ab28:	2503      	movs	r5, #3
 800ab2a:	9344      	str	r3, [sp, #272]	; 0x110
 800ab2c:	e7db      	b.n	800aae6 <__ssvfiscanf_r+0x1c6>
 800ab2e:	2308      	movs	r3, #8
 800ab30:	2504      	movs	r5, #4
 800ab32:	9344      	str	r3, [sp, #272]	; 0x110
 800ab34:	e7d7      	b.n	800aae6 <__ssvfiscanf_r+0x1c6>
 800ab36:	0039      	movs	r1, r7
 800ab38:	a803      	add	r0, sp, #12
 800ab3a:	f000 f9fd 	bl	800af38 <__sccl>
 800ab3e:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800ab40:	0007      	movs	r7, r0
 800ab42:	9300      	str	r3, [sp, #0]
 800ab44:	2340      	movs	r3, #64	; 0x40
 800ab46:	9a00      	ldr	r2, [sp, #0]
 800ab48:	4313      	orrs	r3, r2
 800ab4a:	9343      	str	r3, [sp, #268]	; 0x10c
 800ab4c:	2301      	movs	r3, #1
 800ab4e:	9349      	str	r3, [sp, #292]	; 0x124
 800ab50:	e7ca      	b.n	800aae8 <__ssvfiscanf_r+0x1c8>
 800ab52:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800ab54:	9300      	str	r3, [sp, #0]
 800ab56:	2340      	movs	r3, #64	; 0x40
 800ab58:	9a00      	ldr	r2, [sp, #0]
 800ab5a:	4313      	orrs	r3, r2
 800ab5c:	9343      	str	r3, [sp, #268]	; 0x10c
 800ab5e:	2300      	movs	r3, #0
 800ab60:	e7f5      	b.n	800ab4e <__ssvfiscanf_r+0x22e>
 800ab62:	2302      	movs	r3, #2
 800ab64:	e7f3      	b.n	800ab4e <__ssvfiscanf_r+0x22e>
 800ab66:	9843      	ldr	r0, [sp, #268]	; 0x10c
 800ab68:	06c3      	lsls	r3, r0, #27
 800ab6a:	d500      	bpl.n	800ab6e <__ssvfiscanf_r+0x24e>
 800ab6c:	e703      	b.n	800a976 <__ssvfiscanf_r+0x56>
 800ab6e:	9b02      	ldr	r3, [sp, #8]
 800ab70:	9a47      	ldr	r2, [sp, #284]	; 0x11c
 800ab72:	1d19      	adds	r1, r3, #4
 800ab74:	9102      	str	r1, [sp, #8]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	07c5      	lsls	r5, r0, #31
 800ab7a:	d501      	bpl.n	800ab80 <__ssvfiscanf_r+0x260>
 800ab7c:	801a      	strh	r2, [r3, #0]
 800ab7e:	e6fa      	b.n	800a976 <__ssvfiscanf_r+0x56>
 800ab80:	601a      	str	r2, [r3, #0]
 800ab82:	e6f8      	b.n	800a976 <__ssvfiscanf_r+0x56>
 800ab84:	22c0      	movs	r2, #192	; 0xc0
 800ab86:	ab43      	add	r3, sp, #268	; 0x10c
 800ab88:	0052      	lsls	r2, r2, #1
 800ab8a:	589b      	ldr	r3, [r3, r2]
 800ab8c:	0021      	movs	r1, r4
 800ab8e:	0030      	movs	r0, r6
 800ab90:	9300      	str	r3, [sp, #0]
 800ab92:	4798      	blx	r3
 800ab94:	2800      	cmp	r0, #0
 800ab96:	d0aa      	beq.n	800aaee <__ssvfiscanf_r+0x1ce>
 800ab98:	e788      	b.n	800aaac <__ssvfiscanf_r+0x18c>
 800ab9a:	9a47      	ldr	r2, [sp, #284]	; 0x11c
 800ab9c:	9200      	str	r2, [sp, #0]
 800ab9e:	3201      	adds	r2, #1
 800aba0:	9247      	str	r2, [sp, #284]	; 0x11c
 800aba2:	6862      	ldr	r2, [r4, #4]
 800aba4:	3a01      	subs	r2, #1
 800aba6:	6062      	str	r2, [r4, #4]
 800aba8:	2a00      	cmp	r2, #0
 800abaa:	dd02      	ble.n	800abb2 <__ssvfiscanf_r+0x292>
 800abac:	3301      	adds	r3, #1
 800abae:	6023      	str	r3, [r4, #0]
 800abb0:	e7a1      	b.n	800aaf6 <__ssvfiscanf_r+0x1d6>
 800abb2:	22c0      	movs	r2, #192	; 0xc0
 800abb4:	ab43      	add	r3, sp, #268	; 0x10c
 800abb6:	0052      	lsls	r2, r2, #1
 800abb8:	589b      	ldr	r3, [r3, r2]
 800abba:	0021      	movs	r1, r4
 800abbc:	0030      	movs	r0, r6
 800abbe:	9300      	str	r3, [sp, #0]
 800abc0:	4798      	blx	r3
 800abc2:	2800      	cmp	r0, #0
 800abc4:	d097      	beq.n	800aaf6 <__ssvfiscanf_r+0x1d6>
 800abc6:	e771      	b.n	800aaac <__ssvfiscanf_r+0x18c>
 800abc8:	2b04      	cmp	r3, #4
 800abca:	dc06      	bgt.n	800abda <__ssvfiscanf_r+0x2ba>
 800abcc:	0022      	movs	r2, r4
 800abce:	0030      	movs	r0, r6
 800abd0:	ab02      	add	r3, sp, #8
 800abd2:	a943      	add	r1, sp, #268	; 0x10c
 800abd4:	f000 f880 	bl	800acd8 <_scanf_i>
 800abd8:	e79d      	b.n	800ab16 <__ssvfiscanf_r+0x1f6>
 800abda:	4b0f      	ldr	r3, [pc, #60]	; (800ac18 <__ssvfiscanf_r+0x2f8>)
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d100      	bne.n	800abe2 <__ssvfiscanf_r+0x2c2>
 800abe0:	e6c9      	b.n	800a976 <__ssvfiscanf_r+0x56>
 800abe2:	0022      	movs	r2, r4
 800abe4:	0030      	movs	r0, r6
 800abe6:	ab02      	add	r3, sp, #8
 800abe8:	a943      	add	r1, sp, #268	; 0x10c
 800abea:	f7fc fafd 	bl	80071e8 <_scanf_float>
 800abee:	e792      	b.n	800ab16 <__ssvfiscanf_r+0x1f6>
 800abf0:	89a3      	ldrh	r3, [r4, #12]
 800abf2:	065b      	lsls	r3, r3, #25
 800abf4:	d400      	bmi.n	800abf8 <__ssvfiscanf_r+0x2d8>
 800abf6:	e75e      	b.n	800aab6 <__ssvfiscanf_r+0x196>
 800abf8:	2001      	movs	r0, #1
 800abfa:	4240      	negs	r0, r0
 800abfc:	e75b      	b.n	800aab6 <__ssvfiscanf_r+0x196>
 800abfe:	9846      	ldr	r0, [sp, #280]	; 0x118
 800ac00:	e759      	b.n	800aab6 <__ssvfiscanf_r+0x196>
 800ac02:	46c0      	nop			; (mov r8, r8)
 800ac04:	fffffd6c 	.word	0xfffffd6c
 800ac08:	0800a869 	.word	0x0800a869
 800ac0c:	0800a8e1 	.word	0x0800a8e1
 800ac10:	0800bfc1 	.word	0x0800bfc1
 800ac14:	0800c32a 	.word	0x0800c32a
 800ac18:	080071e9 	.word	0x080071e9

0800ac1c <_scanf_chars>:
 800ac1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ac1e:	0015      	movs	r5, r2
 800ac20:	688a      	ldr	r2, [r1, #8]
 800ac22:	000c      	movs	r4, r1
 800ac24:	9001      	str	r0, [sp, #4]
 800ac26:	2a00      	cmp	r2, #0
 800ac28:	d105      	bne.n	800ac36 <_scanf_chars+0x1a>
 800ac2a:	6989      	ldr	r1, [r1, #24]
 800ac2c:	3201      	adds	r2, #1
 800ac2e:	2900      	cmp	r1, #0
 800ac30:	d000      	beq.n	800ac34 <_scanf_chars+0x18>
 800ac32:	3a02      	subs	r2, #2
 800ac34:	60a2      	str	r2, [r4, #8]
 800ac36:	6822      	ldr	r2, [r4, #0]
 800ac38:	06d2      	lsls	r2, r2, #27
 800ac3a:	d403      	bmi.n	800ac44 <_scanf_chars+0x28>
 800ac3c:	681a      	ldr	r2, [r3, #0]
 800ac3e:	1d11      	adds	r1, r2, #4
 800ac40:	6019      	str	r1, [r3, #0]
 800ac42:	6817      	ldr	r7, [r2, #0]
 800ac44:	2600      	movs	r6, #0
 800ac46:	69a0      	ldr	r0, [r4, #24]
 800ac48:	2800      	cmp	r0, #0
 800ac4a:	d013      	beq.n	800ac74 <_scanf_chars+0x58>
 800ac4c:	2801      	cmp	r0, #1
 800ac4e:	d108      	bne.n	800ac62 <_scanf_chars+0x46>
 800ac50:	682b      	ldr	r3, [r5, #0]
 800ac52:	6962      	ldr	r2, [r4, #20]
 800ac54:	781b      	ldrb	r3, [r3, #0]
 800ac56:	5cd3      	ldrb	r3, [r2, r3]
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d10b      	bne.n	800ac74 <_scanf_chars+0x58>
 800ac5c:	2e00      	cmp	r6, #0
 800ac5e:	d038      	beq.n	800acd2 <_scanf_chars+0xb6>
 800ac60:	e026      	b.n	800acb0 <_scanf_chars+0x94>
 800ac62:	2802      	cmp	r0, #2
 800ac64:	d124      	bne.n	800acb0 <_scanf_chars+0x94>
 800ac66:	682b      	ldr	r3, [r5, #0]
 800ac68:	4a1a      	ldr	r2, [pc, #104]	; (800acd4 <_scanf_chars+0xb8>)
 800ac6a:	781b      	ldrb	r3, [r3, #0]
 800ac6c:	5cd3      	ldrb	r3, [r2, r3]
 800ac6e:	2208      	movs	r2, #8
 800ac70:	4213      	tst	r3, r2
 800ac72:	d11d      	bne.n	800acb0 <_scanf_chars+0x94>
 800ac74:	2210      	movs	r2, #16
 800ac76:	6823      	ldr	r3, [r4, #0]
 800ac78:	3601      	adds	r6, #1
 800ac7a:	4213      	tst	r3, r2
 800ac7c:	d103      	bne.n	800ac86 <_scanf_chars+0x6a>
 800ac7e:	682b      	ldr	r3, [r5, #0]
 800ac80:	781b      	ldrb	r3, [r3, #0]
 800ac82:	703b      	strb	r3, [r7, #0]
 800ac84:	3701      	adds	r7, #1
 800ac86:	682a      	ldr	r2, [r5, #0]
 800ac88:	686b      	ldr	r3, [r5, #4]
 800ac8a:	3201      	adds	r2, #1
 800ac8c:	602a      	str	r2, [r5, #0]
 800ac8e:	68a2      	ldr	r2, [r4, #8]
 800ac90:	3b01      	subs	r3, #1
 800ac92:	3a01      	subs	r2, #1
 800ac94:	606b      	str	r3, [r5, #4]
 800ac96:	60a2      	str	r2, [r4, #8]
 800ac98:	2a00      	cmp	r2, #0
 800ac9a:	d009      	beq.n	800acb0 <_scanf_chars+0x94>
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	dcd2      	bgt.n	800ac46 <_scanf_chars+0x2a>
 800aca0:	23c0      	movs	r3, #192	; 0xc0
 800aca2:	005b      	lsls	r3, r3, #1
 800aca4:	0029      	movs	r1, r5
 800aca6:	58e3      	ldr	r3, [r4, r3]
 800aca8:	9801      	ldr	r0, [sp, #4]
 800acaa:	4798      	blx	r3
 800acac:	2800      	cmp	r0, #0
 800acae:	d0ca      	beq.n	800ac46 <_scanf_chars+0x2a>
 800acb0:	6822      	ldr	r2, [r4, #0]
 800acb2:	2310      	movs	r3, #16
 800acb4:	0011      	movs	r1, r2
 800acb6:	4019      	ands	r1, r3
 800acb8:	421a      	tst	r2, r3
 800acba:	d106      	bne.n	800acca <_scanf_chars+0xae>
 800acbc:	68e3      	ldr	r3, [r4, #12]
 800acbe:	3301      	adds	r3, #1
 800acc0:	60e3      	str	r3, [r4, #12]
 800acc2:	69a3      	ldr	r3, [r4, #24]
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d000      	beq.n	800acca <_scanf_chars+0xae>
 800acc8:	7039      	strb	r1, [r7, #0]
 800acca:	2000      	movs	r0, #0
 800accc:	6923      	ldr	r3, [r4, #16]
 800acce:	199e      	adds	r6, r3, r6
 800acd0:	6126      	str	r6, [r4, #16]
 800acd2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800acd4:	0800bfc1 	.word	0x0800bfc1

0800acd8 <_scanf_i>:
 800acd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800acda:	000c      	movs	r4, r1
 800acdc:	b08d      	sub	sp, #52	; 0x34
 800acde:	9302      	str	r3, [sp, #8]
 800ace0:	4b79      	ldr	r3, [pc, #484]	; (800aec8 <_scanf_i+0x1f0>)
 800ace2:	0016      	movs	r6, r2
 800ace4:	9005      	str	r0, [sp, #20]
 800ace6:	aa09      	add	r2, sp, #36	; 0x24
 800ace8:	cb23      	ldmia	r3!, {r0, r1, r5}
 800acea:	c223      	stmia	r2!, {r0, r1, r5}
 800acec:	4b77      	ldr	r3, [pc, #476]	; (800aecc <_scanf_i+0x1f4>)
 800acee:	9306      	str	r3, [sp, #24]
 800acf0:	69a3      	ldr	r3, [r4, #24]
 800acf2:	2b03      	cmp	r3, #3
 800acf4:	d001      	beq.n	800acfa <_scanf_i+0x22>
 800acf6:	4b76      	ldr	r3, [pc, #472]	; (800aed0 <_scanf_i+0x1f8>)
 800acf8:	9306      	str	r3, [sp, #24]
 800acfa:	22ae      	movs	r2, #174	; 0xae
 800acfc:	2000      	movs	r0, #0
 800acfe:	68a3      	ldr	r3, [r4, #8]
 800ad00:	0052      	lsls	r2, r2, #1
 800ad02:	1e59      	subs	r1, r3, #1
 800ad04:	9004      	str	r0, [sp, #16]
 800ad06:	4291      	cmp	r1, r2
 800ad08:	d905      	bls.n	800ad16 <_scanf_i+0x3e>
 800ad0a:	3b5e      	subs	r3, #94	; 0x5e
 800ad0c:	3bff      	subs	r3, #255	; 0xff
 800ad0e:	9304      	str	r3, [sp, #16]
 800ad10:	235e      	movs	r3, #94	; 0x5e
 800ad12:	33ff      	adds	r3, #255	; 0xff
 800ad14:	60a3      	str	r3, [r4, #8]
 800ad16:	0023      	movs	r3, r4
 800ad18:	331c      	adds	r3, #28
 800ad1a:	9301      	str	r3, [sp, #4]
 800ad1c:	23d0      	movs	r3, #208	; 0xd0
 800ad1e:	2700      	movs	r7, #0
 800ad20:	6822      	ldr	r2, [r4, #0]
 800ad22:	011b      	lsls	r3, r3, #4
 800ad24:	4313      	orrs	r3, r2
 800ad26:	6023      	str	r3, [r4, #0]
 800ad28:	9b01      	ldr	r3, [sp, #4]
 800ad2a:	9303      	str	r3, [sp, #12]
 800ad2c:	6833      	ldr	r3, [r6, #0]
 800ad2e:	a809      	add	r0, sp, #36	; 0x24
 800ad30:	7819      	ldrb	r1, [r3, #0]
 800ad32:	00bb      	lsls	r3, r7, #2
 800ad34:	2202      	movs	r2, #2
 800ad36:	5818      	ldr	r0, [r3, r0]
 800ad38:	f7fe fe48 	bl	80099cc <memchr>
 800ad3c:	2800      	cmp	r0, #0
 800ad3e:	d02b      	beq.n	800ad98 <_scanf_i+0xc0>
 800ad40:	2f01      	cmp	r7, #1
 800ad42:	d162      	bne.n	800ae0a <_scanf_i+0x132>
 800ad44:	6863      	ldr	r3, [r4, #4]
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d106      	bne.n	800ad58 <_scanf_i+0x80>
 800ad4a:	3308      	adds	r3, #8
 800ad4c:	6822      	ldr	r2, [r4, #0]
 800ad4e:	6063      	str	r3, [r4, #4]
 800ad50:	33f9      	adds	r3, #249	; 0xf9
 800ad52:	33ff      	adds	r3, #255	; 0xff
 800ad54:	4313      	orrs	r3, r2
 800ad56:	6023      	str	r3, [r4, #0]
 800ad58:	4b5e      	ldr	r3, [pc, #376]	; (800aed4 <_scanf_i+0x1fc>)
 800ad5a:	6822      	ldr	r2, [r4, #0]
 800ad5c:	4013      	ands	r3, r2
 800ad5e:	6023      	str	r3, [r4, #0]
 800ad60:	68a3      	ldr	r3, [r4, #8]
 800ad62:	1e5a      	subs	r2, r3, #1
 800ad64:	60a2      	str	r2, [r4, #8]
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d016      	beq.n	800ad98 <_scanf_i+0xc0>
 800ad6a:	6833      	ldr	r3, [r6, #0]
 800ad6c:	1c5a      	adds	r2, r3, #1
 800ad6e:	6032      	str	r2, [r6, #0]
 800ad70:	781b      	ldrb	r3, [r3, #0]
 800ad72:	9a03      	ldr	r2, [sp, #12]
 800ad74:	7013      	strb	r3, [r2, #0]
 800ad76:	6873      	ldr	r3, [r6, #4]
 800ad78:	1c55      	adds	r5, r2, #1
 800ad7a:	3b01      	subs	r3, #1
 800ad7c:	6073      	str	r3, [r6, #4]
 800ad7e:	9503      	str	r5, [sp, #12]
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	dc09      	bgt.n	800ad98 <_scanf_i+0xc0>
 800ad84:	23c0      	movs	r3, #192	; 0xc0
 800ad86:	005b      	lsls	r3, r3, #1
 800ad88:	58e3      	ldr	r3, [r4, r3]
 800ad8a:	0031      	movs	r1, r6
 800ad8c:	9805      	ldr	r0, [sp, #20]
 800ad8e:	9307      	str	r3, [sp, #28]
 800ad90:	4798      	blx	r3
 800ad92:	2800      	cmp	r0, #0
 800ad94:	d000      	beq.n	800ad98 <_scanf_i+0xc0>
 800ad96:	e081      	b.n	800ae9c <_scanf_i+0x1c4>
 800ad98:	3701      	adds	r7, #1
 800ad9a:	2f03      	cmp	r7, #3
 800ad9c:	d1c6      	bne.n	800ad2c <_scanf_i+0x54>
 800ad9e:	6863      	ldr	r3, [r4, #4]
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d101      	bne.n	800ada8 <_scanf_i+0xd0>
 800ada4:	330a      	adds	r3, #10
 800ada6:	6063      	str	r3, [r4, #4]
 800ada8:	2110      	movs	r1, #16
 800adaa:	2700      	movs	r7, #0
 800adac:	6863      	ldr	r3, [r4, #4]
 800adae:	6960      	ldr	r0, [r4, #20]
 800adb0:	1ac9      	subs	r1, r1, r3
 800adb2:	4b49      	ldr	r3, [pc, #292]	; (800aed8 <_scanf_i+0x200>)
 800adb4:	18c9      	adds	r1, r1, r3
 800adb6:	f000 f8bf 	bl	800af38 <__sccl>
 800adba:	9d03      	ldr	r5, [sp, #12]
 800adbc:	68a3      	ldr	r3, [r4, #8]
 800adbe:	6822      	ldr	r2, [r4, #0]
 800adc0:	9303      	str	r3, [sp, #12]
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d041      	beq.n	800ae4a <_scanf_i+0x172>
 800adc6:	6831      	ldr	r1, [r6, #0]
 800adc8:	6963      	ldr	r3, [r4, #20]
 800adca:	7808      	ldrb	r0, [r1, #0]
 800adcc:	5c1b      	ldrb	r3, [r3, r0]
 800adce:	2b00      	cmp	r3, #0
 800add0:	d03b      	beq.n	800ae4a <_scanf_i+0x172>
 800add2:	2830      	cmp	r0, #48	; 0x30
 800add4:	d129      	bne.n	800ae2a <_scanf_i+0x152>
 800add6:	2380      	movs	r3, #128	; 0x80
 800add8:	011b      	lsls	r3, r3, #4
 800adda:	421a      	tst	r2, r3
 800addc:	d025      	beq.n	800ae2a <_scanf_i+0x152>
 800adde:	9b04      	ldr	r3, [sp, #16]
 800ade0:	3701      	adds	r7, #1
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d005      	beq.n	800adf2 <_scanf_i+0x11a>
 800ade6:	001a      	movs	r2, r3
 800ade8:	9b03      	ldr	r3, [sp, #12]
 800adea:	3a01      	subs	r2, #1
 800adec:	3301      	adds	r3, #1
 800adee:	9204      	str	r2, [sp, #16]
 800adf0:	60a3      	str	r3, [r4, #8]
 800adf2:	6873      	ldr	r3, [r6, #4]
 800adf4:	3b01      	subs	r3, #1
 800adf6:	6073      	str	r3, [r6, #4]
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	dd1d      	ble.n	800ae38 <_scanf_i+0x160>
 800adfc:	6833      	ldr	r3, [r6, #0]
 800adfe:	3301      	adds	r3, #1
 800ae00:	6033      	str	r3, [r6, #0]
 800ae02:	68a3      	ldr	r3, [r4, #8]
 800ae04:	3b01      	subs	r3, #1
 800ae06:	60a3      	str	r3, [r4, #8]
 800ae08:	e7d8      	b.n	800adbc <_scanf_i+0xe4>
 800ae0a:	2f02      	cmp	r7, #2
 800ae0c:	d1a8      	bne.n	800ad60 <_scanf_i+0x88>
 800ae0e:	21c0      	movs	r1, #192	; 0xc0
 800ae10:	2380      	movs	r3, #128	; 0x80
 800ae12:	6822      	ldr	r2, [r4, #0]
 800ae14:	00c9      	lsls	r1, r1, #3
 800ae16:	4011      	ands	r1, r2
 800ae18:	009b      	lsls	r3, r3, #2
 800ae1a:	4299      	cmp	r1, r3
 800ae1c:	d1bf      	bne.n	800ad9e <_scanf_i+0xc6>
 800ae1e:	3bf1      	subs	r3, #241	; 0xf1
 800ae20:	3bff      	subs	r3, #255	; 0xff
 800ae22:	6063      	str	r3, [r4, #4]
 800ae24:	33f0      	adds	r3, #240	; 0xf0
 800ae26:	4313      	orrs	r3, r2
 800ae28:	e799      	b.n	800ad5e <_scanf_i+0x86>
 800ae2a:	4b2c      	ldr	r3, [pc, #176]	; (800aedc <_scanf_i+0x204>)
 800ae2c:	4013      	ands	r3, r2
 800ae2e:	6023      	str	r3, [r4, #0]
 800ae30:	780b      	ldrb	r3, [r1, #0]
 800ae32:	702b      	strb	r3, [r5, #0]
 800ae34:	3501      	adds	r5, #1
 800ae36:	e7dc      	b.n	800adf2 <_scanf_i+0x11a>
 800ae38:	23c0      	movs	r3, #192	; 0xc0
 800ae3a:	005b      	lsls	r3, r3, #1
 800ae3c:	58e3      	ldr	r3, [r4, r3]
 800ae3e:	0031      	movs	r1, r6
 800ae40:	9805      	ldr	r0, [sp, #20]
 800ae42:	9303      	str	r3, [sp, #12]
 800ae44:	4798      	blx	r3
 800ae46:	2800      	cmp	r0, #0
 800ae48:	d0db      	beq.n	800ae02 <_scanf_i+0x12a>
 800ae4a:	6823      	ldr	r3, [r4, #0]
 800ae4c:	05db      	lsls	r3, r3, #23
 800ae4e:	d50e      	bpl.n	800ae6e <_scanf_i+0x196>
 800ae50:	9b01      	ldr	r3, [sp, #4]
 800ae52:	429d      	cmp	r5, r3
 800ae54:	d907      	bls.n	800ae66 <_scanf_i+0x18e>
 800ae56:	23be      	movs	r3, #190	; 0xbe
 800ae58:	3d01      	subs	r5, #1
 800ae5a:	005b      	lsls	r3, r3, #1
 800ae5c:	0032      	movs	r2, r6
 800ae5e:	7829      	ldrb	r1, [r5, #0]
 800ae60:	58e3      	ldr	r3, [r4, r3]
 800ae62:	9805      	ldr	r0, [sp, #20]
 800ae64:	4798      	blx	r3
 800ae66:	9b01      	ldr	r3, [sp, #4]
 800ae68:	2001      	movs	r0, #1
 800ae6a:	429d      	cmp	r5, r3
 800ae6c:	d029      	beq.n	800aec2 <_scanf_i+0x1ea>
 800ae6e:	6821      	ldr	r1, [r4, #0]
 800ae70:	2310      	movs	r3, #16
 800ae72:	000a      	movs	r2, r1
 800ae74:	401a      	ands	r2, r3
 800ae76:	4219      	tst	r1, r3
 800ae78:	d11c      	bne.n	800aeb4 <_scanf_i+0x1dc>
 800ae7a:	702a      	strb	r2, [r5, #0]
 800ae7c:	6863      	ldr	r3, [r4, #4]
 800ae7e:	9901      	ldr	r1, [sp, #4]
 800ae80:	9805      	ldr	r0, [sp, #20]
 800ae82:	9e06      	ldr	r6, [sp, #24]
 800ae84:	47b0      	blx	r6
 800ae86:	9b02      	ldr	r3, [sp, #8]
 800ae88:	6821      	ldr	r1, [r4, #0]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	068a      	lsls	r2, r1, #26
 800ae8e:	d507      	bpl.n	800aea0 <_scanf_i+0x1c8>
 800ae90:	1d1a      	adds	r2, r3, #4
 800ae92:	9902      	ldr	r1, [sp, #8]
 800ae94:	600a      	str	r2, [r1, #0]
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	6018      	str	r0, [r3, #0]
 800ae9a:	e008      	b.n	800aeae <_scanf_i+0x1d6>
 800ae9c:	2700      	movs	r7, #0
 800ae9e:	e7d4      	b.n	800ae4a <_scanf_i+0x172>
 800aea0:	1d1a      	adds	r2, r3, #4
 800aea2:	07ce      	lsls	r6, r1, #31
 800aea4:	d5f5      	bpl.n	800ae92 <_scanf_i+0x1ba>
 800aea6:	9902      	ldr	r1, [sp, #8]
 800aea8:	600a      	str	r2, [r1, #0]
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	8018      	strh	r0, [r3, #0]
 800aeae:	68e3      	ldr	r3, [r4, #12]
 800aeb0:	3301      	adds	r3, #1
 800aeb2:	60e3      	str	r3, [r4, #12]
 800aeb4:	2000      	movs	r0, #0
 800aeb6:	9b01      	ldr	r3, [sp, #4]
 800aeb8:	1aed      	subs	r5, r5, r3
 800aeba:	6923      	ldr	r3, [r4, #16]
 800aebc:	19ef      	adds	r7, r5, r7
 800aebe:	19df      	adds	r7, r3, r7
 800aec0:	6127      	str	r7, [r4, #16]
 800aec2:	b00d      	add	sp, #52	; 0x34
 800aec4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aec6:	46c0      	nop			; (mov r8, r8)
 800aec8:	0800bd9c 	.word	0x0800bd9c
 800aecc:	080084dd 	.word	0x080084dd
 800aed0:	0800b0e9 	.word	0x0800b0e9
 800aed4:	fffffaff 	.word	0xfffffaff
 800aed8:	0800c33e 	.word	0x0800c33e
 800aedc:	fffff6ff 	.word	0xfffff6ff

0800aee0 <_read_r>:
 800aee0:	b570      	push	{r4, r5, r6, lr}
 800aee2:	0004      	movs	r4, r0
 800aee4:	0008      	movs	r0, r1
 800aee6:	0011      	movs	r1, r2
 800aee8:	001a      	movs	r2, r3
 800aeea:	2300      	movs	r3, #0
 800aeec:	4d05      	ldr	r5, [pc, #20]	; (800af04 <_read_r+0x24>)
 800aeee:	602b      	str	r3, [r5, #0]
 800aef0:	f7f8 fefe 	bl	8003cf0 <_read>
 800aef4:	1c43      	adds	r3, r0, #1
 800aef6:	d103      	bne.n	800af00 <_read_r+0x20>
 800aef8:	682b      	ldr	r3, [r5, #0]
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d000      	beq.n	800af00 <_read_r+0x20>
 800aefe:	6023      	str	r3, [r4, #0]
 800af00:	bd70      	pop	{r4, r5, r6, pc}
 800af02:	46c0      	nop			; (mov r8, r8)
 800af04:	200009e0 	.word	0x200009e0

0800af08 <nan>:
 800af08:	2000      	movs	r0, #0
 800af0a:	4901      	ldr	r1, [pc, #4]	; (800af10 <nan+0x8>)
 800af0c:	4770      	bx	lr
 800af0e:	46c0      	nop			; (mov r8, r8)
 800af10:	7ff80000 	.word	0x7ff80000

0800af14 <_sbrk_r>:
 800af14:	2300      	movs	r3, #0
 800af16:	b570      	push	{r4, r5, r6, lr}
 800af18:	4d06      	ldr	r5, [pc, #24]	; (800af34 <_sbrk_r+0x20>)
 800af1a:	0004      	movs	r4, r0
 800af1c:	0008      	movs	r0, r1
 800af1e:	602b      	str	r3, [r5, #0]
 800af20:	f7f8 ff4c 	bl	8003dbc <_sbrk>
 800af24:	1c43      	adds	r3, r0, #1
 800af26:	d103      	bne.n	800af30 <_sbrk_r+0x1c>
 800af28:	682b      	ldr	r3, [r5, #0]
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d000      	beq.n	800af30 <_sbrk_r+0x1c>
 800af2e:	6023      	str	r3, [r4, #0]
 800af30:	bd70      	pop	{r4, r5, r6, pc}
 800af32:	46c0      	nop			; (mov r8, r8)
 800af34:	200009e0 	.word	0x200009e0

0800af38 <__sccl>:
 800af38:	b5f0      	push	{r4, r5, r6, r7, lr}
 800af3a:	780b      	ldrb	r3, [r1, #0]
 800af3c:	0004      	movs	r4, r0
 800af3e:	2b5e      	cmp	r3, #94	; 0x5e
 800af40:	d00c      	beq.n	800af5c <__sccl+0x24>
 800af42:	1c48      	adds	r0, r1, #1
 800af44:	2100      	movs	r1, #0
 800af46:	0022      	movs	r2, r4
 800af48:	1c65      	adds	r5, r4, #1
 800af4a:	35ff      	adds	r5, #255	; 0xff
 800af4c:	7011      	strb	r1, [r2, #0]
 800af4e:	3201      	adds	r2, #1
 800af50:	42aa      	cmp	r2, r5
 800af52:	d1fb      	bne.n	800af4c <__sccl+0x14>
 800af54:	2b00      	cmp	r3, #0
 800af56:	d105      	bne.n	800af64 <__sccl+0x2c>
 800af58:	3801      	subs	r0, #1
 800af5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800af5c:	784b      	ldrb	r3, [r1, #1]
 800af5e:	1c88      	adds	r0, r1, #2
 800af60:	2101      	movs	r1, #1
 800af62:	e7f0      	b.n	800af46 <__sccl+0xe>
 800af64:	2201      	movs	r2, #1
 800af66:	262d      	movs	r6, #45	; 0x2d
 800af68:	4051      	eors	r1, r2
 800af6a:	0002      	movs	r2, r0
 800af6c:	54e1      	strb	r1, [r4, r3]
 800af6e:	7815      	ldrb	r5, [r2, #0]
 800af70:	1c50      	adds	r0, r2, #1
 800af72:	2d2d      	cmp	r5, #45	; 0x2d
 800af74:	d009      	beq.n	800af8a <__sccl+0x52>
 800af76:	2d5d      	cmp	r5, #93	; 0x5d
 800af78:	d0ef      	beq.n	800af5a <__sccl+0x22>
 800af7a:	2d00      	cmp	r5, #0
 800af7c:	d101      	bne.n	800af82 <__sccl+0x4a>
 800af7e:	0010      	movs	r0, r2
 800af80:	e7eb      	b.n	800af5a <__sccl+0x22>
 800af82:	002b      	movs	r3, r5
 800af84:	e7f1      	b.n	800af6a <__sccl+0x32>
 800af86:	0033      	movs	r3, r6
 800af88:	e7ef      	b.n	800af6a <__sccl+0x32>
 800af8a:	7855      	ldrb	r5, [r2, #1]
 800af8c:	2d5d      	cmp	r5, #93	; 0x5d
 800af8e:	d0fa      	beq.n	800af86 <__sccl+0x4e>
 800af90:	42ab      	cmp	r3, r5
 800af92:	dcf8      	bgt.n	800af86 <__sccl+0x4e>
 800af94:	0018      	movs	r0, r3
 800af96:	3202      	adds	r2, #2
 800af98:	3001      	adds	r0, #1
 800af9a:	5421      	strb	r1, [r4, r0]
 800af9c:	4285      	cmp	r5, r0
 800af9e:	dcfb      	bgt.n	800af98 <__sccl+0x60>
 800afa0:	2000      	movs	r0, #0
 800afa2:	1c5f      	adds	r7, r3, #1
 800afa4:	42ab      	cmp	r3, r5
 800afa6:	da01      	bge.n	800afac <__sccl+0x74>
 800afa8:	1ae8      	subs	r0, r5, r3
 800afaa:	3801      	subs	r0, #1
 800afac:	183b      	adds	r3, r7, r0
 800afae:	e7de      	b.n	800af6e <__sccl+0x36>

0800afb0 <strncmp>:
 800afb0:	b530      	push	{r4, r5, lr}
 800afb2:	0005      	movs	r5, r0
 800afb4:	1e10      	subs	r0, r2, #0
 800afb6:	d008      	beq.n	800afca <strncmp+0x1a>
 800afb8:	2400      	movs	r4, #0
 800afba:	3a01      	subs	r2, #1
 800afbc:	5d2b      	ldrb	r3, [r5, r4]
 800afbe:	5d08      	ldrb	r0, [r1, r4]
 800afc0:	4283      	cmp	r3, r0
 800afc2:	d101      	bne.n	800afc8 <strncmp+0x18>
 800afc4:	4294      	cmp	r4, r2
 800afc6:	d101      	bne.n	800afcc <strncmp+0x1c>
 800afc8:	1a18      	subs	r0, r3, r0
 800afca:	bd30      	pop	{r4, r5, pc}
 800afcc:	3401      	adds	r4, #1
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d1f4      	bne.n	800afbc <strncmp+0xc>
 800afd2:	e7f9      	b.n	800afc8 <strncmp+0x18>

0800afd4 <_strtoul_l.constprop.0>:
 800afd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800afd6:	b087      	sub	sp, #28
 800afd8:	9202      	str	r2, [sp, #8]
 800afda:	4a42      	ldr	r2, [pc, #264]	; (800b0e4 <_strtoul_l.constprop.0+0x110>)
 800afdc:	001e      	movs	r6, r3
 800afde:	9101      	str	r1, [sp, #4]
 800afe0:	000b      	movs	r3, r1
 800afe2:	4694      	mov	ip, r2
 800afe4:	2108      	movs	r1, #8
 800afe6:	9005      	str	r0, [sp, #20]
 800afe8:	001a      	movs	r2, r3
 800afea:	4660      	mov	r0, ip
 800afec:	7814      	ldrb	r4, [r2, #0]
 800afee:	3301      	adds	r3, #1
 800aff0:	5d00      	ldrb	r0, [r0, r4]
 800aff2:	001d      	movs	r5, r3
 800aff4:	0007      	movs	r7, r0
 800aff6:	400f      	ands	r7, r1
 800aff8:	4208      	tst	r0, r1
 800affa:	d1f5      	bne.n	800afe8 <_strtoul_l.constprop.0+0x14>
 800affc:	2c2d      	cmp	r4, #45	; 0x2d
 800affe:	d13a      	bne.n	800b076 <_strtoul_l.constprop.0+0xa2>
 800b000:	2701      	movs	r7, #1
 800b002:	781c      	ldrb	r4, [r3, #0]
 800b004:	1c95      	adds	r5, r2, #2
 800b006:	2e00      	cmp	r6, #0
 800b008:	d067      	beq.n	800b0da <_strtoul_l.constprop.0+0x106>
 800b00a:	2e10      	cmp	r6, #16
 800b00c:	d109      	bne.n	800b022 <_strtoul_l.constprop.0+0x4e>
 800b00e:	2c30      	cmp	r4, #48	; 0x30
 800b010:	d107      	bne.n	800b022 <_strtoul_l.constprop.0+0x4e>
 800b012:	2220      	movs	r2, #32
 800b014:	782b      	ldrb	r3, [r5, #0]
 800b016:	4393      	bics	r3, r2
 800b018:	2b58      	cmp	r3, #88	; 0x58
 800b01a:	d159      	bne.n	800b0d0 <_strtoul_l.constprop.0+0xfc>
 800b01c:	2610      	movs	r6, #16
 800b01e:	786c      	ldrb	r4, [r5, #1]
 800b020:	3502      	adds	r5, #2
 800b022:	2001      	movs	r0, #1
 800b024:	0031      	movs	r1, r6
 800b026:	4240      	negs	r0, r0
 800b028:	f7f5 f890 	bl	800014c <__udivsi3>
 800b02c:	9003      	str	r0, [sp, #12]
 800b02e:	2001      	movs	r0, #1
 800b030:	0031      	movs	r1, r6
 800b032:	4240      	negs	r0, r0
 800b034:	f7f5 f910 	bl	8000258 <__aeabi_uidivmod>
 800b038:	2300      	movs	r3, #0
 800b03a:	9104      	str	r1, [sp, #16]
 800b03c:	2101      	movs	r1, #1
 800b03e:	2201      	movs	r2, #1
 800b040:	0018      	movs	r0, r3
 800b042:	468c      	mov	ip, r1
 800b044:	4252      	negs	r2, r2
 800b046:	0021      	movs	r1, r4
 800b048:	3930      	subs	r1, #48	; 0x30
 800b04a:	2909      	cmp	r1, #9
 800b04c:	d818      	bhi.n	800b080 <_strtoul_l.constprop.0+0xac>
 800b04e:	000c      	movs	r4, r1
 800b050:	42a6      	cmp	r6, r4
 800b052:	dd23      	ble.n	800b09c <_strtoul_l.constprop.0+0xc8>
 800b054:	2b00      	cmp	r3, #0
 800b056:	db1f      	blt.n	800b098 <_strtoul_l.constprop.0+0xc4>
 800b058:	9903      	ldr	r1, [sp, #12]
 800b05a:	0013      	movs	r3, r2
 800b05c:	4281      	cmp	r1, r0
 800b05e:	d307      	bcc.n	800b070 <_strtoul_l.constprop.0+0x9c>
 800b060:	d103      	bne.n	800b06a <_strtoul_l.constprop.0+0x96>
 800b062:	9904      	ldr	r1, [sp, #16]
 800b064:	0013      	movs	r3, r2
 800b066:	42a1      	cmp	r1, r4
 800b068:	db02      	blt.n	800b070 <_strtoul_l.constprop.0+0x9c>
 800b06a:	4663      	mov	r3, ip
 800b06c:	4370      	muls	r0, r6
 800b06e:	1820      	adds	r0, r4, r0
 800b070:	782c      	ldrb	r4, [r5, #0]
 800b072:	3501      	adds	r5, #1
 800b074:	e7e7      	b.n	800b046 <_strtoul_l.constprop.0+0x72>
 800b076:	2c2b      	cmp	r4, #43	; 0x2b
 800b078:	d1c5      	bne.n	800b006 <_strtoul_l.constprop.0+0x32>
 800b07a:	781c      	ldrb	r4, [r3, #0]
 800b07c:	1c95      	adds	r5, r2, #2
 800b07e:	e7c2      	b.n	800b006 <_strtoul_l.constprop.0+0x32>
 800b080:	0021      	movs	r1, r4
 800b082:	3941      	subs	r1, #65	; 0x41
 800b084:	2919      	cmp	r1, #25
 800b086:	d801      	bhi.n	800b08c <_strtoul_l.constprop.0+0xb8>
 800b088:	3c37      	subs	r4, #55	; 0x37
 800b08a:	e7e1      	b.n	800b050 <_strtoul_l.constprop.0+0x7c>
 800b08c:	0021      	movs	r1, r4
 800b08e:	3961      	subs	r1, #97	; 0x61
 800b090:	2919      	cmp	r1, #25
 800b092:	d803      	bhi.n	800b09c <_strtoul_l.constprop.0+0xc8>
 800b094:	3c57      	subs	r4, #87	; 0x57
 800b096:	e7db      	b.n	800b050 <_strtoul_l.constprop.0+0x7c>
 800b098:	0013      	movs	r3, r2
 800b09a:	e7e9      	b.n	800b070 <_strtoul_l.constprop.0+0x9c>
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	da09      	bge.n	800b0b4 <_strtoul_l.constprop.0+0xe0>
 800b0a0:	2322      	movs	r3, #34	; 0x22
 800b0a2:	2001      	movs	r0, #1
 800b0a4:	9a05      	ldr	r2, [sp, #20]
 800b0a6:	4240      	negs	r0, r0
 800b0a8:	6013      	str	r3, [r2, #0]
 800b0aa:	9b02      	ldr	r3, [sp, #8]
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d109      	bne.n	800b0c4 <_strtoul_l.constprop.0+0xf0>
 800b0b0:	b007      	add	sp, #28
 800b0b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b0b4:	2f00      	cmp	r7, #0
 800b0b6:	d000      	beq.n	800b0ba <_strtoul_l.constprop.0+0xe6>
 800b0b8:	4240      	negs	r0, r0
 800b0ba:	9a02      	ldr	r2, [sp, #8]
 800b0bc:	2a00      	cmp	r2, #0
 800b0be:	d0f7      	beq.n	800b0b0 <_strtoul_l.constprop.0+0xdc>
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d001      	beq.n	800b0c8 <_strtoul_l.constprop.0+0xf4>
 800b0c4:	1e6b      	subs	r3, r5, #1
 800b0c6:	9301      	str	r3, [sp, #4]
 800b0c8:	9b02      	ldr	r3, [sp, #8]
 800b0ca:	9a01      	ldr	r2, [sp, #4]
 800b0cc:	601a      	str	r2, [r3, #0]
 800b0ce:	e7ef      	b.n	800b0b0 <_strtoul_l.constprop.0+0xdc>
 800b0d0:	2430      	movs	r4, #48	; 0x30
 800b0d2:	2e00      	cmp	r6, #0
 800b0d4:	d1a5      	bne.n	800b022 <_strtoul_l.constprop.0+0x4e>
 800b0d6:	3608      	adds	r6, #8
 800b0d8:	e7a3      	b.n	800b022 <_strtoul_l.constprop.0+0x4e>
 800b0da:	2c30      	cmp	r4, #48	; 0x30
 800b0dc:	d099      	beq.n	800b012 <_strtoul_l.constprop.0+0x3e>
 800b0de:	260a      	movs	r6, #10
 800b0e0:	e79f      	b.n	800b022 <_strtoul_l.constprop.0+0x4e>
 800b0e2:	46c0      	nop			; (mov r8, r8)
 800b0e4:	0800bfc1 	.word	0x0800bfc1

0800b0e8 <_strtoul_r>:
 800b0e8:	b510      	push	{r4, lr}
 800b0ea:	f7ff ff73 	bl	800afd4 <_strtoul_l.constprop.0>
 800b0ee:	bd10      	pop	{r4, pc}

0800b0f0 <__submore>:
 800b0f0:	000b      	movs	r3, r1
 800b0f2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b0f4:	6b4d      	ldr	r5, [r1, #52]	; 0x34
 800b0f6:	3344      	adds	r3, #68	; 0x44
 800b0f8:	000c      	movs	r4, r1
 800b0fa:	429d      	cmp	r5, r3
 800b0fc:	d11c      	bne.n	800b138 <__submore+0x48>
 800b0fe:	2680      	movs	r6, #128	; 0x80
 800b100:	00f6      	lsls	r6, r6, #3
 800b102:	0031      	movs	r1, r6
 800b104:	f7ff f9d8 	bl	800a4b8 <_malloc_r>
 800b108:	2800      	cmp	r0, #0
 800b10a:	d102      	bne.n	800b112 <__submore+0x22>
 800b10c:	2001      	movs	r0, #1
 800b10e:	4240      	negs	r0, r0
 800b110:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b112:	0023      	movs	r3, r4
 800b114:	6360      	str	r0, [r4, #52]	; 0x34
 800b116:	63a6      	str	r6, [r4, #56]	; 0x38
 800b118:	3346      	adds	r3, #70	; 0x46
 800b11a:	781a      	ldrb	r2, [r3, #0]
 800b11c:	4b10      	ldr	r3, [pc, #64]	; (800b160 <__submore+0x70>)
 800b11e:	54c2      	strb	r2, [r0, r3]
 800b120:	0023      	movs	r3, r4
 800b122:	3345      	adds	r3, #69	; 0x45
 800b124:	781a      	ldrb	r2, [r3, #0]
 800b126:	4b0f      	ldr	r3, [pc, #60]	; (800b164 <__submore+0x74>)
 800b128:	54c2      	strb	r2, [r0, r3]
 800b12a:	782a      	ldrb	r2, [r5, #0]
 800b12c:	4b0e      	ldr	r3, [pc, #56]	; (800b168 <__submore+0x78>)
 800b12e:	54c2      	strb	r2, [r0, r3]
 800b130:	18c0      	adds	r0, r0, r3
 800b132:	6020      	str	r0, [r4, #0]
 800b134:	2000      	movs	r0, #0
 800b136:	e7eb      	b.n	800b110 <__submore+0x20>
 800b138:	6b8e      	ldr	r6, [r1, #56]	; 0x38
 800b13a:	0029      	movs	r1, r5
 800b13c:	0073      	lsls	r3, r6, #1
 800b13e:	001a      	movs	r2, r3
 800b140:	9301      	str	r3, [sp, #4]
 800b142:	f000 fa43 	bl	800b5cc <_realloc_r>
 800b146:	1e05      	subs	r5, r0, #0
 800b148:	d0e0      	beq.n	800b10c <__submore+0x1c>
 800b14a:	1987      	adds	r7, r0, r6
 800b14c:	0001      	movs	r1, r0
 800b14e:	0032      	movs	r2, r6
 800b150:	0038      	movs	r0, r7
 800b152:	f7fe fc46 	bl	80099e2 <memcpy>
 800b156:	9b01      	ldr	r3, [sp, #4]
 800b158:	6027      	str	r7, [r4, #0]
 800b15a:	6365      	str	r5, [r4, #52]	; 0x34
 800b15c:	63a3      	str	r3, [r4, #56]	; 0x38
 800b15e:	e7e9      	b.n	800b134 <__submore+0x44>
 800b160:	000003ff 	.word	0x000003ff
 800b164:	000003fe 	.word	0x000003fe
 800b168:	000003fd 	.word	0x000003fd

0800b16c <__ascii_wctomb>:
 800b16c:	0003      	movs	r3, r0
 800b16e:	1e08      	subs	r0, r1, #0
 800b170:	d005      	beq.n	800b17e <__ascii_wctomb+0x12>
 800b172:	2aff      	cmp	r2, #255	; 0xff
 800b174:	d904      	bls.n	800b180 <__ascii_wctomb+0x14>
 800b176:	228a      	movs	r2, #138	; 0x8a
 800b178:	2001      	movs	r0, #1
 800b17a:	601a      	str	r2, [r3, #0]
 800b17c:	4240      	negs	r0, r0
 800b17e:	4770      	bx	lr
 800b180:	2001      	movs	r0, #1
 800b182:	700a      	strb	r2, [r1, #0]
 800b184:	e7fb      	b.n	800b17e <__ascii_wctomb+0x12>
	...

0800b188 <__assert_func>:
 800b188:	b530      	push	{r4, r5, lr}
 800b18a:	0014      	movs	r4, r2
 800b18c:	001a      	movs	r2, r3
 800b18e:	4b09      	ldr	r3, [pc, #36]	; (800b1b4 <__assert_func+0x2c>)
 800b190:	0005      	movs	r5, r0
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	b085      	sub	sp, #20
 800b196:	68d8      	ldr	r0, [r3, #12]
 800b198:	4b07      	ldr	r3, [pc, #28]	; (800b1b8 <__assert_func+0x30>)
 800b19a:	2c00      	cmp	r4, #0
 800b19c:	d101      	bne.n	800b1a2 <__assert_func+0x1a>
 800b19e:	4b07      	ldr	r3, [pc, #28]	; (800b1bc <__assert_func+0x34>)
 800b1a0:	001c      	movs	r4, r3
 800b1a2:	9301      	str	r3, [sp, #4]
 800b1a4:	9100      	str	r1, [sp, #0]
 800b1a6:	002b      	movs	r3, r5
 800b1a8:	4905      	ldr	r1, [pc, #20]	; (800b1c0 <__assert_func+0x38>)
 800b1aa:	9402      	str	r4, [sp, #8]
 800b1ac:	f000 f9b8 	bl	800b520 <fiprintf>
 800b1b0:	f000 fc6a 	bl	800ba88 <abort>
 800b1b4:	20000054 	.word	0x20000054
 800b1b8:	0800c350 	.word	0x0800c350
 800b1bc:	0800c38b 	.word	0x0800c38b
 800b1c0:	0800c35d 	.word	0x0800c35d

0800b1c4 <__sflush_r>:
 800b1c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b1c6:	898b      	ldrh	r3, [r1, #12]
 800b1c8:	0005      	movs	r5, r0
 800b1ca:	000c      	movs	r4, r1
 800b1cc:	071a      	lsls	r2, r3, #28
 800b1ce:	d45f      	bmi.n	800b290 <__sflush_r+0xcc>
 800b1d0:	684a      	ldr	r2, [r1, #4]
 800b1d2:	2a00      	cmp	r2, #0
 800b1d4:	dc04      	bgt.n	800b1e0 <__sflush_r+0x1c>
 800b1d6:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800b1d8:	2a00      	cmp	r2, #0
 800b1da:	dc01      	bgt.n	800b1e0 <__sflush_r+0x1c>
 800b1dc:	2000      	movs	r0, #0
 800b1de:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b1e0:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800b1e2:	2f00      	cmp	r7, #0
 800b1e4:	d0fa      	beq.n	800b1dc <__sflush_r+0x18>
 800b1e6:	2200      	movs	r2, #0
 800b1e8:	2180      	movs	r1, #128	; 0x80
 800b1ea:	682e      	ldr	r6, [r5, #0]
 800b1ec:	602a      	str	r2, [r5, #0]
 800b1ee:	001a      	movs	r2, r3
 800b1f0:	0149      	lsls	r1, r1, #5
 800b1f2:	400a      	ands	r2, r1
 800b1f4:	420b      	tst	r3, r1
 800b1f6:	d034      	beq.n	800b262 <__sflush_r+0x9e>
 800b1f8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b1fa:	89a3      	ldrh	r3, [r4, #12]
 800b1fc:	075b      	lsls	r3, r3, #29
 800b1fe:	d506      	bpl.n	800b20e <__sflush_r+0x4a>
 800b200:	6863      	ldr	r3, [r4, #4]
 800b202:	1ac0      	subs	r0, r0, r3
 800b204:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b206:	2b00      	cmp	r3, #0
 800b208:	d001      	beq.n	800b20e <__sflush_r+0x4a>
 800b20a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b20c:	1ac0      	subs	r0, r0, r3
 800b20e:	0002      	movs	r2, r0
 800b210:	6a21      	ldr	r1, [r4, #32]
 800b212:	2300      	movs	r3, #0
 800b214:	0028      	movs	r0, r5
 800b216:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800b218:	47b8      	blx	r7
 800b21a:	89a1      	ldrh	r1, [r4, #12]
 800b21c:	1c43      	adds	r3, r0, #1
 800b21e:	d106      	bne.n	800b22e <__sflush_r+0x6a>
 800b220:	682b      	ldr	r3, [r5, #0]
 800b222:	2b1d      	cmp	r3, #29
 800b224:	d831      	bhi.n	800b28a <__sflush_r+0xc6>
 800b226:	4a2c      	ldr	r2, [pc, #176]	; (800b2d8 <__sflush_r+0x114>)
 800b228:	40da      	lsrs	r2, r3
 800b22a:	07d3      	lsls	r3, r2, #31
 800b22c:	d52d      	bpl.n	800b28a <__sflush_r+0xc6>
 800b22e:	2300      	movs	r3, #0
 800b230:	6063      	str	r3, [r4, #4]
 800b232:	6923      	ldr	r3, [r4, #16]
 800b234:	6023      	str	r3, [r4, #0]
 800b236:	04cb      	lsls	r3, r1, #19
 800b238:	d505      	bpl.n	800b246 <__sflush_r+0x82>
 800b23a:	1c43      	adds	r3, r0, #1
 800b23c:	d102      	bne.n	800b244 <__sflush_r+0x80>
 800b23e:	682b      	ldr	r3, [r5, #0]
 800b240:	2b00      	cmp	r3, #0
 800b242:	d100      	bne.n	800b246 <__sflush_r+0x82>
 800b244:	6560      	str	r0, [r4, #84]	; 0x54
 800b246:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b248:	602e      	str	r6, [r5, #0]
 800b24a:	2900      	cmp	r1, #0
 800b24c:	d0c6      	beq.n	800b1dc <__sflush_r+0x18>
 800b24e:	0023      	movs	r3, r4
 800b250:	3344      	adds	r3, #68	; 0x44
 800b252:	4299      	cmp	r1, r3
 800b254:	d002      	beq.n	800b25c <__sflush_r+0x98>
 800b256:	0028      	movs	r0, r5
 800b258:	f7ff f8c2 	bl	800a3e0 <_free_r>
 800b25c:	2000      	movs	r0, #0
 800b25e:	6360      	str	r0, [r4, #52]	; 0x34
 800b260:	e7bd      	b.n	800b1de <__sflush_r+0x1a>
 800b262:	2301      	movs	r3, #1
 800b264:	0028      	movs	r0, r5
 800b266:	6a21      	ldr	r1, [r4, #32]
 800b268:	47b8      	blx	r7
 800b26a:	1c43      	adds	r3, r0, #1
 800b26c:	d1c5      	bne.n	800b1fa <__sflush_r+0x36>
 800b26e:	682b      	ldr	r3, [r5, #0]
 800b270:	2b00      	cmp	r3, #0
 800b272:	d0c2      	beq.n	800b1fa <__sflush_r+0x36>
 800b274:	2b1d      	cmp	r3, #29
 800b276:	d001      	beq.n	800b27c <__sflush_r+0xb8>
 800b278:	2b16      	cmp	r3, #22
 800b27a:	d101      	bne.n	800b280 <__sflush_r+0xbc>
 800b27c:	602e      	str	r6, [r5, #0]
 800b27e:	e7ad      	b.n	800b1dc <__sflush_r+0x18>
 800b280:	2340      	movs	r3, #64	; 0x40
 800b282:	89a2      	ldrh	r2, [r4, #12]
 800b284:	4313      	orrs	r3, r2
 800b286:	81a3      	strh	r3, [r4, #12]
 800b288:	e7a9      	b.n	800b1de <__sflush_r+0x1a>
 800b28a:	2340      	movs	r3, #64	; 0x40
 800b28c:	430b      	orrs	r3, r1
 800b28e:	e7fa      	b.n	800b286 <__sflush_r+0xc2>
 800b290:	690f      	ldr	r7, [r1, #16]
 800b292:	2f00      	cmp	r7, #0
 800b294:	d0a2      	beq.n	800b1dc <__sflush_r+0x18>
 800b296:	680a      	ldr	r2, [r1, #0]
 800b298:	600f      	str	r7, [r1, #0]
 800b29a:	1bd2      	subs	r2, r2, r7
 800b29c:	9201      	str	r2, [sp, #4]
 800b29e:	2200      	movs	r2, #0
 800b2a0:	079b      	lsls	r3, r3, #30
 800b2a2:	d100      	bne.n	800b2a6 <__sflush_r+0xe2>
 800b2a4:	694a      	ldr	r2, [r1, #20]
 800b2a6:	60a2      	str	r2, [r4, #8]
 800b2a8:	9b01      	ldr	r3, [sp, #4]
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	dc00      	bgt.n	800b2b0 <__sflush_r+0xec>
 800b2ae:	e795      	b.n	800b1dc <__sflush_r+0x18>
 800b2b0:	003a      	movs	r2, r7
 800b2b2:	0028      	movs	r0, r5
 800b2b4:	9b01      	ldr	r3, [sp, #4]
 800b2b6:	6a21      	ldr	r1, [r4, #32]
 800b2b8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b2ba:	47b0      	blx	r6
 800b2bc:	2800      	cmp	r0, #0
 800b2be:	dc06      	bgt.n	800b2ce <__sflush_r+0x10a>
 800b2c0:	2340      	movs	r3, #64	; 0x40
 800b2c2:	2001      	movs	r0, #1
 800b2c4:	89a2      	ldrh	r2, [r4, #12]
 800b2c6:	4240      	negs	r0, r0
 800b2c8:	4313      	orrs	r3, r2
 800b2ca:	81a3      	strh	r3, [r4, #12]
 800b2cc:	e787      	b.n	800b1de <__sflush_r+0x1a>
 800b2ce:	9b01      	ldr	r3, [sp, #4]
 800b2d0:	183f      	adds	r7, r7, r0
 800b2d2:	1a1b      	subs	r3, r3, r0
 800b2d4:	9301      	str	r3, [sp, #4]
 800b2d6:	e7e7      	b.n	800b2a8 <__sflush_r+0xe4>
 800b2d8:	20400001 	.word	0x20400001

0800b2dc <_fflush_r>:
 800b2dc:	690b      	ldr	r3, [r1, #16]
 800b2de:	b570      	push	{r4, r5, r6, lr}
 800b2e0:	0005      	movs	r5, r0
 800b2e2:	000c      	movs	r4, r1
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d102      	bne.n	800b2ee <_fflush_r+0x12>
 800b2e8:	2500      	movs	r5, #0
 800b2ea:	0028      	movs	r0, r5
 800b2ec:	bd70      	pop	{r4, r5, r6, pc}
 800b2ee:	2800      	cmp	r0, #0
 800b2f0:	d004      	beq.n	800b2fc <_fflush_r+0x20>
 800b2f2:	6983      	ldr	r3, [r0, #24]
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d101      	bne.n	800b2fc <_fflush_r+0x20>
 800b2f8:	f000 f892 	bl	800b420 <__sinit>
 800b2fc:	4b14      	ldr	r3, [pc, #80]	; (800b350 <_fflush_r+0x74>)
 800b2fe:	429c      	cmp	r4, r3
 800b300:	d11b      	bne.n	800b33a <_fflush_r+0x5e>
 800b302:	686c      	ldr	r4, [r5, #4]
 800b304:	220c      	movs	r2, #12
 800b306:	5ea3      	ldrsh	r3, [r4, r2]
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d0ed      	beq.n	800b2e8 <_fflush_r+0xc>
 800b30c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b30e:	07d2      	lsls	r2, r2, #31
 800b310:	d404      	bmi.n	800b31c <_fflush_r+0x40>
 800b312:	059b      	lsls	r3, r3, #22
 800b314:	d402      	bmi.n	800b31c <_fflush_r+0x40>
 800b316:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b318:	f000 f933 	bl	800b582 <__retarget_lock_acquire_recursive>
 800b31c:	0028      	movs	r0, r5
 800b31e:	0021      	movs	r1, r4
 800b320:	f7ff ff50 	bl	800b1c4 <__sflush_r>
 800b324:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b326:	0005      	movs	r5, r0
 800b328:	07db      	lsls	r3, r3, #31
 800b32a:	d4de      	bmi.n	800b2ea <_fflush_r+0xe>
 800b32c:	89a3      	ldrh	r3, [r4, #12]
 800b32e:	059b      	lsls	r3, r3, #22
 800b330:	d4db      	bmi.n	800b2ea <_fflush_r+0xe>
 800b332:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b334:	f000 f926 	bl	800b584 <__retarget_lock_release_recursive>
 800b338:	e7d7      	b.n	800b2ea <_fflush_r+0xe>
 800b33a:	4b06      	ldr	r3, [pc, #24]	; (800b354 <_fflush_r+0x78>)
 800b33c:	429c      	cmp	r4, r3
 800b33e:	d101      	bne.n	800b344 <_fflush_r+0x68>
 800b340:	68ac      	ldr	r4, [r5, #8]
 800b342:	e7df      	b.n	800b304 <_fflush_r+0x28>
 800b344:	4b04      	ldr	r3, [pc, #16]	; (800b358 <_fflush_r+0x7c>)
 800b346:	429c      	cmp	r4, r3
 800b348:	d1dc      	bne.n	800b304 <_fflush_r+0x28>
 800b34a:	68ec      	ldr	r4, [r5, #12]
 800b34c:	e7da      	b.n	800b304 <_fflush_r+0x28>
 800b34e:	46c0      	nop			; (mov r8, r8)
 800b350:	0800c3ac 	.word	0x0800c3ac
 800b354:	0800c3cc 	.word	0x0800c3cc
 800b358:	0800c38c 	.word	0x0800c38c

0800b35c <std>:
 800b35c:	2300      	movs	r3, #0
 800b35e:	b510      	push	{r4, lr}
 800b360:	0004      	movs	r4, r0
 800b362:	6003      	str	r3, [r0, #0]
 800b364:	6043      	str	r3, [r0, #4]
 800b366:	6083      	str	r3, [r0, #8]
 800b368:	8181      	strh	r1, [r0, #12]
 800b36a:	6643      	str	r3, [r0, #100]	; 0x64
 800b36c:	0019      	movs	r1, r3
 800b36e:	81c2      	strh	r2, [r0, #14]
 800b370:	6103      	str	r3, [r0, #16]
 800b372:	6143      	str	r3, [r0, #20]
 800b374:	6183      	str	r3, [r0, #24]
 800b376:	2208      	movs	r2, #8
 800b378:	305c      	adds	r0, #92	; 0x5c
 800b37a:	f7fb fabf 	bl	80068fc <memset>
 800b37e:	4b05      	ldr	r3, [pc, #20]	; (800b394 <std+0x38>)
 800b380:	6224      	str	r4, [r4, #32]
 800b382:	6263      	str	r3, [r4, #36]	; 0x24
 800b384:	4b04      	ldr	r3, [pc, #16]	; (800b398 <std+0x3c>)
 800b386:	62a3      	str	r3, [r4, #40]	; 0x28
 800b388:	4b04      	ldr	r3, [pc, #16]	; (800b39c <std+0x40>)
 800b38a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b38c:	4b04      	ldr	r3, [pc, #16]	; (800b3a0 <std+0x44>)
 800b38e:	6323      	str	r3, [r4, #48]	; 0x30
 800b390:	bd10      	pop	{r4, pc}
 800b392:	46c0      	nop			; (mov r8, r8)
 800b394:	08007691 	.word	0x08007691
 800b398:	080076bd 	.word	0x080076bd
 800b39c:	080076f5 	.word	0x080076f5
 800b3a0:	08007721 	.word	0x08007721

0800b3a4 <_cleanup_r>:
 800b3a4:	b510      	push	{r4, lr}
 800b3a6:	4902      	ldr	r1, [pc, #8]	; (800b3b0 <_cleanup_r+0xc>)
 800b3a8:	f000 f8ca 	bl	800b540 <_fwalk_reent>
 800b3ac:	bd10      	pop	{r4, pc}
 800b3ae:	46c0      	nop			; (mov r8, r8)
 800b3b0:	0800b2dd 	.word	0x0800b2dd

0800b3b4 <__sfmoreglue>:
 800b3b4:	b570      	push	{r4, r5, r6, lr}
 800b3b6:	2568      	movs	r5, #104	; 0x68
 800b3b8:	1e4a      	subs	r2, r1, #1
 800b3ba:	4355      	muls	r5, r2
 800b3bc:	000e      	movs	r6, r1
 800b3be:	0029      	movs	r1, r5
 800b3c0:	3174      	adds	r1, #116	; 0x74
 800b3c2:	f7ff f879 	bl	800a4b8 <_malloc_r>
 800b3c6:	1e04      	subs	r4, r0, #0
 800b3c8:	d008      	beq.n	800b3dc <__sfmoreglue+0x28>
 800b3ca:	2100      	movs	r1, #0
 800b3cc:	002a      	movs	r2, r5
 800b3ce:	6001      	str	r1, [r0, #0]
 800b3d0:	6046      	str	r6, [r0, #4]
 800b3d2:	300c      	adds	r0, #12
 800b3d4:	60a0      	str	r0, [r4, #8]
 800b3d6:	3268      	adds	r2, #104	; 0x68
 800b3d8:	f7fb fa90 	bl	80068fc <memset>
 800b3dc:	0020      	movs	r0, r4
 800b3de:	bd70      	pop	{r4, r5, r6, pc}

0800b3e0 <__sfp_lock_acquire>:
 800b3e0:	b510      	push	{r4, lr}
 800b3e2:	4802      	ldr	r0, [pc, #8]	; (800b3ec <__sfp_lock_acquire+0xc>)
 800b3e4:	f000 f8cd 	bl	800b582 <__retarget_lock_acquire_recursive>
 800b3e8:	bd10      	pop	{r4, pc}
 800b3ea:	46c0      	nop			; (mov r8, r8)
 800b3ec:	200009e5 	.word	0x200009e5

0800b3f0 <__sfp_lock_release>:
 800b3f0:	b510      	push	{r4, lr}
 800b3f2:	4802      	ldr	r0, [pc, #8]	; (800b3fc <__sfp_lock_release+0xc>)
 800b3f4:	f000 f8c6 	bl	800b584 <__retarget_lock_release_recursive>
 800b3f8:	bd10      	pop	{r4, pc}
 800b3fa:	46c0      	nop			; (mov r8, r8)
 800b3fc:	200009e5 	.word	0x200009e5

0800b400 <__sinit_lock_acquire>:
 800b400:	b510      	push	{r4, lr}
 800b402:	4802      	ldr	r0, [pc, #8]	; (800b40c <__sinit_lock_acquire+0xc>)
 800b404:	f000 f8bd 	bl	800b582 <__retarget_lock_acquire_recursive>
 800b408:	bd10      	pop	{r4, pc}
 800b40a:	46c0      	nop			; (mov r8, r8)
 800b40c:	200009e6 	.word	0x200009e6

0800b410 <__sinit_lock_release>:
 800b410:	b510      	push	{r4, lr}
 800b412:	4802      	ldr	r0, [pc, #8]	; (800b41c <__sinit_lock_release+0xc>)
 800b414:	f000 f8b6 	bl	800b584 <__retarget_lock_release_recursive>
 800b418:	bd10      	pop	{r4, pc}
 800b41a:	46c0      	nop			; (mov r8, r8)
 800b41c:	200009e6 	.word	0x200009e6

0800b420 <__sinit>:
 800b420:	b513      	push	{r0, r1, r4, lr}
 800b422:	0004      	movs	r4, r0
 800b424:	f7ff ffec 	bl	800b400 <__sinit_lock_acquire>
 800b428:	69a3      	ldr	r3, [r4, #24]
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d002      	beq.n	800b434 <__sinit+0x14>
 800b42e:	f7ff ffef 	bl	800b410 <__sinit_lock_release>
 800b432:	bd13      	pop	{r0, r1, r4, pc}
 800b434:	64a3      	str	r3, [r4, #72]	; 0x48
 800b436:	64e3      	str	r3, [r4, #76]	; 0x4c
 800b438:	6523      	str	r3, [r4, #80]	; 0x50
 800b43a:	4b13      	ldr	r3, [pc, #76]	; (800b488 <__sinit+0x68>)
 800b43c:	4a13      	ldr	r2, [pc, #76]	; (800b48c <__sinit+0x6c>)
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	62a2      	str	r2, [r4, #40]	; 0x28
 800b442:	9301      	str	r3, [sp, #4]
 800b444:	42a3      	cmp	r3, r4
 800b446:	d101      	bne.n	800b44c <__sinit+0x2c>
 800b448:	2301      	movs	r3, #1
 800b44a:	61a3      	str	r3, [r4, #24]
 800b44c:	0020      	movs	r0, r4
 800b44e:	f000 f81f 	bl	800b490 <__sfp>
 800b452:	6060      	str	r0, [r4, #4]
 800b454:	0020      	movs	r0, r4
 800b456:	f000 f81b 	bl	800b490 <__sfp>
 800b45a:	60a0      	str	r0, [r4, #8]
 800b45c:	0020      	movs	r0, r4
 800b45e:	f000 f817 	bl	800b490 <__sfp>
 800b462:	2200      	movs	r2, #0
 800b464:	2104      	movs	r1, #4
 800b466:	60e0      	str	r0, [r4, #12]
 800b468:	6860      	ldr	r0, [r4, #4]
 800b46a:	f7ff ff77 	bl	800b35c <std>
 800b46e:	2201      	movs	r2, #1
 800b470:	2109      	movs	r1, #9
 800b472:	68a0      	ldr	r0, [r4, #8]
 800b474:	f7ff ff72 	bl	800b35c <std>
 800b478:	2202      	movs	r2, #2
 800b47a:	2112      	movs	r1, #18
 800b47c:	68e0      	ldr	r0, [r4, #12]
 800b47e:	f7ff ff6d 	bl	800b35c <std>
 800b482:	2301      	movs	r3, #1
 800b484:	61a3      	str	r3, [r4, #24]
 800b486:	e7d2      	b.n	800b42e <__sinit+0xe>
 800b488:	0800bf30 	.word	0x0800bf30
 800b48c:	0800b3a5 	.word	0x0800b3a5

0800b490 <__sfp>:
 800b490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b492:	0007      	movs	r7, r0
 800b494:	f7ff ffa4 	bl	800b3e0 <__sfp_lock_acquire>
 800b498:	4b1f      	ldr	r3, [pc, #124]	; (800b518 <__sfp+0x88>)
 800b49a:	681e      	ldr	r6, [r3, #0]
 800b49c:	69b3      	ldr	r3, [r6, #24]
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d102      	bne.n	800b4a8 <__sfp+0x18>
 800b4a2:	0030      	movs	r0, r6
 800b4a4:	f7ff ffbc 	bl	800b420 <__sinit>
 800b4a8:	3648      	adds	r6, #72	; 0x48
 800b4aa:	68b4      	ldr	r4, [r6, #8]
 800b4ac:	6873      	ldr	r3, [r6, #4]
 800b4ae:	3b01      	subs	r3, #1
 800b4b0:	d504      	bpl.n	800b4bc <__sfp+0x2c>
 800b4b2:	6833      	ldr	r3, [r6, #0]
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d022      	beq.n	800b4fe <__sfp+0x6e>
 800b4b8:	6836      	ldr	r6, [r6, #0]
 800b4ba:	e7f6      	b.n	800b4aa <__sfp+0x1a>
 800b4bc:	220c      	movs	r2, #12
 800b4be:	5ea5      	ldrsh	r5, [r4, r2]
 800b4c0:	2d00      	cmp	r5, #0
 800b4c2:	d11a      	bne.n	800b4fa <__sfp+0x6a>
 800b4c4:	0020      	movs	r0, r4
 800b4c6:	4b15      	ldr	r3, [pc, #84]	; (800b51c <__sfp+0x8c>)
 800b4c8:	3058      	adds	r0, #88	; 0x58
 800b4ca:	60e3      	str	r3, [r4, #12]
 800b4cc:	6665      	str	r5, [r4, #100]	; 0x64
 800b4ce:	f000 f857 	bl	800b580 <__retarget_lock_init_recursive>
 800b4d2:	f7ff ff8d 	bl	800b3f0 <__sfp_lock_release>
 800b4d6:	0020      	movs	r0, r4
 800b4d8:	2208      	movs	r2, #8
 800b4da:	0029      	movs	r1, r5
 800b4dc:	6025      	str	r5, [r4, #0]
 800b4de:	60a5      	str	r5, [r4, #8]
 800b4e0:	6065      	str	r5, [r4, #4]
 800b4e2:	6125      	str	r5, [r4, #16]
 800b4e4:	6165      	str	r5, [r4, #20]
 800b4e6:	61a5      	str	r5, [r4, #24]
 800b4e8:	305c      	adds	r0, #92	; 0x5c
 800b4ea:	f7fb fa07 	bl	80068fc <memset>
 800b4ee:	6365      	str	r5, [r4, #52]	; 0x34
 800b4f0:	63a5      	str	r5, [r4, #56]	; 0x38
 800b4f2:	64a5      	str	r5, [r4, #72]	; 0x48
 800b4f4:	64e5      	str	r5, [r4, #76]	; 0x4c
 800b4f6:	0020      	movs	r0, r4
 800b4f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b4fa:	3468      	adds	r4, #104	; 0x68
 800b4fc:	e7d7      	b.n	800b4ae <__sfp+0x1e>
 800b4fe:	2104      	movs	r1, #4
 800b500:	0038      	movs	r0, r7
 800b502:	f7ff ff57 	bl	800b3b4 <__sfmoreglue>
 800b506:	1e04      	subs	r4, r0, #0
 800b508:	6030      	str	r0, [r6, #0]
 800b50a:	d1d5      	bne.n	800b4b8 <__sfp+0x28>
 800b50c:	f7ff ff70 	bl	800b3f0 <__sfp_lock_release>
 800b510:	230c      	movs	r3, #12
 800b512:	603b      	str	r3, [r7, #0]
 800b514:	e7ef      	b.n	800b4f6 <__sfp+0x66>
 800b516:	46c0      	nop			; (mov r8, r8)
 800b518:	0800bf30 	.word	0x0800bf30
 800b51c:	ffff0001 	.word	0xffff0001

0800b520 <fiprintf>:
 800b520:	b40e      	push	{r1, r2, r3}
 800b522:	b503      	push	{r0, r1, lr}
 800b524:	0001      	movs	r1, r0
 800b526:	ab03      	add	r3, sp, #12
 800b528:	4804      	ldr	r0, [pc, #16]	; (800b53c <fiprintf+0x1c>)
 800b52a:	cb04      	ldmia	r3!, {r2}
 800b52c:	6800      	ldr	r0, [r0, #0]
 800b52e:	9301      	str	r3, [sp, #4]
 800b530:	f000 f8a2 	bl	800b678 <_vfiprintf_r>
 800b534:	b002      	add	sp, #8
 800b536:	bc08      	pop	{r3}
 800b538:	b003      	add	sp, #12
 800b53a:	4718      	bx	r3
 800b53c:	20000054 	.word	0x20000054

0800b540 <_fwalk_reent>:
 800b540:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b542:	0004      	movs	r4, r0
 800b544:	0006      	movs	r6, r0
 800b546:	2700      	movs	r7, #0
 800b548:	9101      	str	r1, [sp, #4]
 800b54a:	3448      	adds	r4, #72	; 0x48
 800b54c:	6863      	ldr	r3, [r4, #4]
 800b54e:	68a5      	ldr	r5, [r4, #8]
 800b550:	9300      	str	r3, [sp, #0]
 800b552:	9b00      	ldr	r3, [sp, #0]
 800b554:	3b01      	subs	r3, #1
 800b556:	9300      	str	r3, [sp, #0]
 800b558:	d504      	bpl.n	800b564 <_fwalk_reent+0x24>
 800b55a:	6824      	ldr	r4, [r4, #0]
 800b55c:	2c00      	cmp	r4, #0
 800b55e:	d1f5      	bne.n	800b54c <_fwalk_reent+0xc>
 800b560:	0038      	movs	r0, r7
 800b562:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b564:	89ab      	ldrh	r3, [r5, #12]
 800b566:	2b01      	cmp	r3, #1
 800b568:	d908      	bls.n	800b57c <_fwalk_reent+0x3c>
 800b56a:	220e      	movs	r2, #14
 800b56c:	5eab      	ldrsh	r3, [r5, r2]
 800b56e:	3301      	adds	r3, #1
 800b570:	d004      	beq.n	800b57c <_fwalk_reent+0x3c>
 800b572:	0029      	movs	r1, r5
 800b574:	0030      	movs	r0, r6
 800b576:	9b01      	ldr	r3, [sp, #4]
 800b578:	4798      	blx	r3
 800b57a:	4307      	orrs	r7, r0
 800b57c:	3568      	adds	r5, #104	; 0x68
 800b57e:	e7e8      	b.n	800b552 <_fwalk_reent+0x12>

0800b580 <__retarget_lock_init_recursive>:
 800b580:	4770      	bx	lr

0800b582 <__retarget_lock_acquire_recursive>:
 800b582:	4770      	bx	lr

0800b584 <__retarget_lock_release_recursive>:
 800b584:	4770      	bx	lr

0800b586 <memmove>:
 800b586:	b510      	push	{r4, lr}
 800b588:	4288      	cmp	r0, r1
 800b58a:	d902      	bls.n	800b592 <memmove+0xc>
 800b58c:	188b      	adds	r3, r1, r2
 800b58e:	4298      	cmp	r0, r3
 800b590:	d303      	bcc.n	800b59a <memmove+0x14>
 800b592:	2300      	movs	r3, #0
 800b594:	e007      	b.n	800b5a6 <memmove+0x20>
 800b596:	5c8b      	ldrb	r3, [r1, r2]
 800b598:	5483      	strb	r3, [r0, r2]
 800b59a:	3a01      	subs	r2, #1
 800b59c:	d2fb      	bcs.n	800b596 <memmove+0x10>
 800b59e:	bd10      	pop	{r4, pc}
 800b5a0:	5ccc      	ldrb	r4, [r1, r3]
 800b5a2:	54c4      	strb	r4, [r0, r3]
 800b5a4:	3301      	adds	r3, #1
 800b5a6:	429a      	cmp	r2, r3
 800b5a8:	d1fa      	bne.n	800b5a0 <memmove+0x1a>
 800b5aa:	e7f8      	b.n	800b59e <memmove+0x18>

0800b5ac <__malloc_lock>:
 800b5ac:	b510      	push	{r4, lr}
 800b5ae:	4802      	ldr	r0, [pc, #8]	; (800b5b8 <__malloc_lock+0xc>)
 800b5b0:	f7ff ffe7 	bl	800b582 <__retarget_lock_acquire_recursive>
 800b5b4:	bd10      	pop	{r4, pc}
 800b5b6:	46c0      	nop			; (mov r8, r8)
 800b5b8:	200009e4 	.word	0x200009e4

0800b5bc <__malloc_unlock>:
 800b5bc:	b510      	push	{r4, lr}
 800b5be:	4802      	ldr	r0, [pc, #8]	; (800b5c8 <__malloc_unlock+0xc>)
 800b5c0:	f7ff ffe0 	bl	800b584 <__retarget_lock_release_recursive>
 800b5c4:	bd10      	pop	{r4, pc}
 800b5c6:	46c0      	nop			; (mov r8, r8)
 800b5c8:	200009e4 	.word	0x200009e4

0800b5cc <_realloc_r>:
 800b5cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b5ce:	0007      	movs	r7, r0
 800b5d0:	000e      	movs	r6, r1
 800b5d2:	0014      	movs	r4, r2
 800b5d4:	2900      	cmp	r1, #0
 800b5d6:	d105      	bne.n	800b5e4 <_realloc_r+0x18>
 800b5d8:	0011      	movs	r1, r2
 800b5da:	f7fe ff6d 	bl	800a4b8 <_malloc_r>
 800b5de:	0005      	movs	r5, r0
 800b5e0:	0028      	movs	r0, r5
 800b5e2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b5e4:	2a00      	cmp	r2, #0
 800b5e6:	d103      	bne.n	800b5f0 <_realloc_r+0x24>
 800b5e8:	f7fe fefa 	bl	800a3e0 <_free_r>
 800b5ec:	0025      	movs	r5, r4
 800b5ee:	e7f7      	b.n	800b5e0 <_realloc_r+0x14>
 800b5f0:	f000 fabe 	bl	800bb70 <_malloc_usable_size_r>
 800b5f4:	9001      	str	r0, [sp, #4]
 800b5f6:	4284      	cmp	r4, r0
 800b5f8:	d803      	bhi.n	800b602 <_realloc_r+0x36>
 800b5fa:	0035      	movs	r5, r6
 800b5fc:	0843      	lsrs	r3, r0, #1
 800b5fe:	42a3      	cmp	r3, r4
 800b600:	d3ee      	bcc.n	800b5e0 <_realloc_r+0x14>
 800b602:	0021      	movs	r1, r4
 800b604:	0038      	movs	r0, r7
 800b606:	f7fe ff57 	bl	800a4b8 <_malloc_r>
 800b60a:	1e05      	subs	r5, r0, #0
 800b60c:	d0e8      	beq.n	800b5e0 <_realloc_r+0x14>
 800b60e:	9b01      	ldr	r3, [sp, #4]
 800b610:	0022      	movs	r2, r4
 800b612:	429c      	cmp	r4, r3
 800b614:	d900      	bls.n	800b618 <_realloc_r+0x4c>
 800b616:	001a      	movs	r2, r3
 800b618:	0031      	movs	r1, r6
 800b61a:	0028      	movs	r0, r5
 800b61c:	f7fe f9e1 	bl	80099e2 <memcpy>
 800b620:	0031      	movs	r1, r6
 800b622:	0038      	movs	r0, r7
 800b624:	f7fe fedc 	bl	800a3e0 <_free_r>
 800b628:	e7da      	b.n	800b5e0 <_realloc_r+0x14>

0800b62a <__sfputc_r>:
 800b62a:	6893      	ldr	r3, [r2, #8]
 800b62c:	b510      	push	{r4, lr}
 800b62e:	3b01      	subs	r3, #1
 800b630:	6093      	str	r3, [r2, #8]
 800b632:	2b00      	cmp	r3, #0
 800b634:	da04      	bge.n	800b640 <__sfputc_r+0x16>
 800b636:	6994      	ldr	r4, [r2, #24]
 800b638:	42a3      	cmp	r3, r4
 800b63a:	db07      	blt.n	800b64c <__sfputc_r+0x22>
 800b63c:	290a      	cmp	r1, #10
 800b63e:	d005      	beq.n	800b64c <__sfputc_r+0x22>
 800b640:	6813      	ldr	r3, [r2, #0]
 800b642:	1c58      	adds	r0, r3, #1
 800b644:	6010      	str	r0, [r2, #0]
 800b646:	7019      	strb	r1, [r3, #0]
 800b648:	0008      	movs	r0, r1
 800b64a:	bd10      	pop	{r4, pc}
 800b64c:	f000 f94e 	bl	800b8ec <__swbuf_r>
 800b650:	0001      	movs	r1, r0
 800b652:	e7f9      	b.n	800b648 <__sfputc_r+0x1e>

0800b654 <__sfputs_r>:
 800b654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b656:	0006      	movs	r6, r0
 800b658:	000f      	movs	r7, r1
 800b65a:	0014      	movs	r4, r2
 800b65c:	18d5      	adds	r5, r2, r3
 800b65e:	42ac      	cmp	r4, r5
 800b660:	d101      	bne.n	800b666 <__sfputs_r+0x12>
 800b662:	2000      	movs	r0, #0
 800b664:	e007      	b.n	800b676 <__sfputs_r+0x22>
 800b666:	7821      	ldrb	r1, [r4, #0]
 800b668:	003a      	movs	r2, r7
 800b66a:	0030      	movs	r0, r6
 800b66c:	f7ff ffdd 	bl	800b62a <__sfputc_r>
 800b670:	3401      	adds	r4, #1
 800b672:	1c43      	adds	r3, r0, #1
 800b674:	d1f3      	bne.n	800b65e <__sfputs_r+0xa>
 800b676:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b678 <_vfiprintf_r>:
 800b678:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b67a:	b0a1      	sub	sp, #132	; 0x84
 800b67c:	0006      	movs	r6, r0
 800b67e:	000c      	movs	r4, r1
 800b680:	001f      	movs	r7, r3
 800b682:	9203      	str	r2, [sp, #12]
 800b684:	2800      	cmp	r0, #0
 800b686:	d004      	beq.n	800b692 <_vfiprintf_r+0x1a>
 800b688:	6983      	ldr	r3, [r0, #24]
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d101      	bne.n	800b692 <_vfiprintf_r+0x1a>
 800b68e:	f7ff fec7 	bl	800b420 <__sinit>
 800b692:	4b8e      	ldr	r3, [pc, #568]	; (800b8cc <_vfiprintf_r+0x254>)
 800b694:	429c      	cmp	r4, r3
 800b696:	d11c      	bne.n	800b6d2 <_vfiprintf_r+0x5a>
 800b698:	6874      	ldr	r4, [r6, #4]
 800b69a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b69c:	07db      	lsls	r3, r3, #31
 800b69e:	d405      	bmi.n	800b6ac <_vfiprintf_r+0x34>
 800b6a0:	89a3      	ldrh	r3, [r4, #12]
 800b6a2:	059b      	lsls	r3, r3, #22
 800b6a4:	d402      	bmi.n	800b6ac <_vfiprintf_r+0x34>
 800b6a6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b6a8:	f7ff ff6b 	bl	800b582 <__retarget_lock_acquire_recursive>
 800b6ac:	89a3      	ldrh	r3, [r4, #12]
 800b6ae:	071b      	lsls	r3, r3, #28
 800b6b0:	d502      	bpl.n	800b6b8 <_vfiprintf_r+0x40>
 800b6b2:	6923      	ldr	r3, [r4, #16]
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d11d      	bne.n	800b6f4 <_vfiprintf_r+0x7c>
 800b6b8:	0021      	movs	r1, r4
 800b6ba:	0030      	movs	r0, r6
 800b6bc:	f000 f96c 	bl	800b998 <__swsetup_r>
 800b6c0:	2800      	cmp	r0, #0
 800b6c2:	d017      	beq.n	800b6f4 <_vfiprintf_r+0x7c>
 800b6c4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b6c6:	07db      	lsls	r3, r3, #31
 800b6c8:	d50d      	bpl.n	800b6e6 <_vfiprintf_r+0x6e>
 800b6ca:	2001      	movs	r0, #1
 800b6cc:	4240      	negs	r0, r0
 800b6ce:	b021      	add	sp, #132	; 0x84
 800b6d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b6d2:	4b7f      	ldr	r3, [pc, #508]	; (800b8d0 <_vfiprintf_r+0x258>)
 800b6d4:	429c      	cmp	r4, r3
 800b6d6:	d101      	bne.n	800b6dc <_vfiprintf_r+0x64>
 800b6d8:	68b4      	ldr	r4, [r6, #8]
 800b6da:	e7de      	b.n	800b69a <_vfiprintf_r+0x22>
 800b6dc:	4b7d      	ldr	r3, [pc, #500]	; (800b8d4 <_vfiprintf_r+0x25c>)
 800b6de:	429c      	cmp	r4, r3
 800b6e0:	d1db      	bne.n	800b69a <_vfiprintf_r+0x22>
 800b6e2:	68f4      	ldr	r4, [r6, #12]
 800b6e4:	e7d9      	b.n	800b69a <_vfiprintf_r+0x22>
 800b6e6:	89a3      	ldrh	r3, [r4, #12]
 800b6e8:	059b      	lsls	r3, r3, #22
 800b6ea:	d4ee      	bmi.n	800b6ca <_vfiprintf_r+0x52>
 800b6ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b6ee:	f7ff ff49 	bl	800b584 <__retarget_lock_release_recursive>
 800b6f2:	e7ea      	b.n	800b6ca <_vfiprintf_r+0x52>
 800b6f4:	2300      	movs	r3, #0
 800b6f6:	ad08      	add	r5, sp, #32
 800b6f8:	616b      	str	r3, [r5, #20]
 800b6fa:	3320      	adds	r3, #32
 800b6fc:	766b      	strb	r3, [r5, #25]
 800b6fe:	3310      	adds	r3, #16
 800b700:	76ab      	strb	r3, [r5, #26]
 800b702:	9707      	str	r7, [sp, #28]
 800b704:	9f03      	ldr	r7, [sp, #12]
 800b706:	783b      	ldrb	r3, [r7, #0]
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d001      	beq.n	800b710 <_vfiprintf_r+0x98>
 800b70c:	2b25      	cmp	r3, #37	; 0x25
 800b70e:	d14e      	bne.n	800b7ae <_vfiprintf_r+0x136>
 800b710:	9b03      	ldr	r3, [sp, #12]
 800b712:	1afb      	subs	r3, r7, r3
 800b714:	9305      	str	r3, [sp, #20]
 800b716:	9b03      	ldr	r3, [sp, #12]
 800b718:	429f      	cmp	r7, r3
 800b71a:	d00d      	beq.n	800b738 <_vfiprintf_r+0xc0>
 800b71c:	9b05      	ldr	r3, [sp, #20]
 800b71e:	0021      	movs	r1, r4
 800b720:	0030      	movs	r0, r6
 800b722:	9a03      	ldr	r2, [sp, #12]
 800b724:	f7ff ff96 	bl	800b654 <__sfputs_r>
 800b728:	1c43      	adds	r3, r0, #1
 800b72a:	d100      	bne.n	800b72e <_vfiprintf_r+0xb6>
 800b72c:	e0b5      	b.n	800b89a <_vfiprintf_r+0x222>
 800b72e:	696a      	ldr	r2, [r5, #20]
 800b730:	9b05      	ldr	r3, [sp, #20]
 800b732:	4694      	mov	ip, r2
 800b734:	4463      	add	r3, ip
 800b736:	616b      	str	r3, [r5, #20]
 800b738:	783b      	ldrb	r3, [r7, #0]
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d100      	bne.n	800b740 <_vfiprintf_r+0xc8>
 800b73e:	e0ac      	b.n	800b89a <_vfiprintf_r+0x222>
 800b740:	2201      	movs	r2, #1
 800b742:	1c7b      	adds	r3, r7, #1
 800b744:	9303      	str	r3, [sp, #12]
 800b746:	2300      	movs	r3, #0
 800b748:	4252      	negs	r2, r2
 800b74a:	606a      	str	r2, [r5, #4]
 800b74c:	a904      	add	r1, sp, #16
 800b74e:	3254      	adds	r2, #84	; 0x54
 800b750:	1852      	adds	r2, r2, r1
 800b752:	602b      	str	r3, [r5, #0]
 800b754:	60eb      	str	r3, [r5, #12]
 800b756:	60ab      	str	r3, [r5, #8]
 800b758:	7013      	strb	r3, [r2, #0]
 800b75a:	65ab      	str	r3, [r5, #88]	; 0x58
 800b75c:	9b03      	ldr	r3, [sp, #12]
 800b75e:	2205      	movs	r2, #5
 800b760:	7819      	ldrb	r1, [r3, #0]
 800b762:	485d      	ldr	r0, [pc, #372]	; (800b8d8 <_vfiprintf_r+0x260>)
 800b764:	f7fe f932 	bl	80099cc <memchr>
 800b768:	9b03      	ldr	r3, [sp, #12]
 800b76a:	1c5f      	adds	r7, r3, #1
 800b76c:	2800      	cmp	r0, #0
 800b76e:	d120      	bne.n	800b7b2 <_vfiprintf_r+0x13a>
 800b770:	682a      	ldr	r2, [r5, #0]
 800b772:	06d3      	lsls	r3, r2, #27
 800b774:	d504      	bpl.n	800b780 <_vfiprintf_r+0x108>
 800b776:	2353      	movs	r3, #83	; 0x53
 800b778:	a904      	add	r1, sp, #16
 800b77a:	185b      	adds	r3, r3, r1
 800b77c:	2120      	movs	r1, #32
 800b77e:	7019      	strb	r1, [r3, #0]
 800b780:	0713      	lsls	r3, r2, #28
 800b782:	d504      	bpl.n	800b78e <_vfiprintf_r+0x116>
 800b784:	2353      	movs	r3, #83	; 0x53
 800b786:	a904      	add	r1, sp, #16
 800b788:	185b      	adds	r3, r3, r1
 800b78a:	212b      	movs	r1, #43	; 0x2b
 800b78c:	7019      	strb	r1, [r3, #0]
 800b78e:	9b03      	ldr	r3, [sp, #12]
 800b790:	781b      	ldrb	r3, [r3, #0]
 800b792:	2b2a      	cmp	r3, #42	; 0x2a
 800b794:	d016      	beq.n	800b7c4 <_vfiprintf_r+0x14c>
 800b796:	2100      	movs	r1, #0
 800b798:	68eb      	ldr	r3, [r5, #12]
 800b79a:	9f03      	ldr	r7, [sp, #12]
 800b79c:	783a      	ldrb	r2, [r7, #0]
 800b79e:	1c78      	adds	r0, r7, #1
 800b7a0:	3a30      	subs	r2, #48	; 0x30
 800b7a2:	4684      	mov	ip, r0
 800b7a4:	2a09      	cmp	r2, #9
 800b7a6:	d94f      	bls.n	800b848 <_vfiprintf_r+0x1d0>
 800b7a8:	2900      	cmp	r1, #0
 800b7aa:	d111      	bne.n	800b7d0 <_vfiprintf_r+0x158>
 800b7ac:	e017      	b.n	800b7de <_vfiprintf_r+0x166>
 800b7ae:	3701      	adds	r7, #1
 800b7b0:	e7a9      	b.n	800b706 <_vfiprintf_r+0x8e>
 800b7b2:	4b49      	ldr	r3, [pc, #292]	; (800b8d8 <_vfiprintf_r+0x260>)
 800b7b4:	682a      	ldr	r2, [r5, #0]
 800b7b6:	1ac0      	subs	r0, r0, r3
 800b7b8:	2301      	movs	r3, #1
 800b7ba:	4083      	lsls	r3, r0
 800b7bc:	4313      	orrs	r3, r2
 800b7be:	602b      	str	r3, [r5, #0]
 800b7c0:	9703      	str	r7, [sp, #12]
 800b7c2:	e7cb      	b.n	800b75c <_vfiprintf_r+0xe4>
 800b7c4:	9b07      	ldr	r3, [sp, #28]
 800b7c6:	1d19      	adds	r1, r3, #4
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	9107      	str	r1, [sp, #28]
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	db01      	blt.n	800b7d4 <_vfiprintf_r+0x15c>
 800b7d0:	930b      	str	r3, [sp, #44]	; 0x2c
 800b7d2:	e004      	b.n	800b7de <_vfiprintf_r+0x166>
 800b7d4:	425b      	negs	r3, r3
 800b7d6:	60eb      	str	r3, [r5, #12]
 800b7d8:	2302      	movs	r3, #2
 800b7da:	4313      	orrs	r3, r2
 800b7dc:	602b      	str	r3, [r5, #0]
 800b7de:	783b      	ldrb	r3, [r7, #0]
 800b7e0:	2b2e      	cmp	r3, #46	; 0x2e
 800b7e2:	d10a      	bne.n	800b7fa <_vfiprintf_r+0x182>
 800b7e4:	787b      	ldrb	r3, [r7, #1]
 800b7e6:	2b2a      	cmp	r3, #42	; 0x2a
 800b7e8:	d137      	bne.n	800b85a <_vfiprintf_r+0x1e2>
 800b7ea:	9b07      	ldr	r3, [sp, #28]
 800b7ec:	3702      	adds	r7, #2
 800b7ee:	1d1a      	adds	r2, r3, #4
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	9207      	str	r2, [sp, #28]
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	db2d      	blt.n	800b854 <_vfiprintf_r+0x1dc>
 800b7f8:	9309      	str	r3, [sp, #36]	; 0x24
 800b7fa:	2203      	movs	r2, #3
 800b7fc:	7839      	ldrb	r1, [r7, #0]
 800b7fe:	4837      	ldr	r0, [pc, #220]	; (800b8dc <_vfiprintf_r+0x264>)
 800b800:	f7fe f8e4 	bl	80099cc <memchr>
 800b804:	2800      	cmp	r0, #0
 800b806:	d007      	beq.n	800b818 <_vfiprintf_r+0x1a0>
 800b808:	4b34      	ldr	r3, [pc, #208]	; (800b8dc <_vfiprintf_r+0x264>)
 800b80a:	682a      	ldr	r2, [r5, #0]
 800b80c:	1ac0      	subs	r0, r0, r3
 800b80e:	2340      	movs	r3, #64	; 0x40
 800b810:	4083      	lsls	r3, r0
 800b812:	4313      	orrs	r3, r2
 800b814:	3701      	adds	r7, #1
 800b816:	602b      	str	r3, [r5, #0]
 800b818:	7839      	ldrb	r1, [r7, #0]
 800b81a:	1c7b      	adds	r3, r7, #1
 800b81c:	2206      	movs	r2, #6
 800b81e:	4830      	ldr	r0, [pc, #192]	; (800b8e0 <_vfiprintf_r+0x268>)
 800b820:	9303      	str	r3, [sp, #12]
 800b822:	7629      	strb	r1, [r5, #24]
 800b824:	f7fe f8d2 	bl	80099cc <memchr>
 800b828:	2800      	cmp	r0, #0
 800b82a:	d045      	beq.n	800b8b8 <_vfiprintf_r+0x240>
 800b82c:	4b2d      	ldr	r3, [pc, #180]	; (800b8e4 <_vfiprintf_r+0x26c>)
 800b82e:	2b00      	cmp	r3, #0
 800b830:	d127      	bne.n	800b882 <_vfiprintf_r+0x20a>
 800b832:	2207      	movs	r2, #7
 800b834:	9b07      	ldr	r3, [sp, #28]
 800b836:	3307      	adds	r3, #7
 800b838:	4393      	bics	r3, r2
 800b83a:	3308      	adds	r3, #8
 800b83c:	9307      	str	r3, [sp, #28]
 800b83e:	696b      	ldr	r3, [r5, #20]
 800b840:	9a04      	ldr	r2, [sp, #16]
 800b842:	189b      	adds	r3, r3, r2
 800b844:	616b      	str	r3, [r5, #20]
 800b846:	e75d      	b.n	800b704 <_vfiprintf_r+0x8c>
 800b848:	210a      	movs	r1, #10
 800b84a:	434b      	muls	r3, r1
 800b84c:	4667      	mov	r7, ip
 800b84e:	189b      	adds	r3, r3, r2
 800b850:	3909      	subs	r1, #9
 800b852:	e7a3      	b.n	800b79c <_vfiprintf_r+0x124>
 800b854:	2301      	movs	r3, #1
 800b856:	425b      	negs	r3, r3
 800b858:	e7ce      	b.n	800b7f8 <_vfiprintf_r+0x180>
 800b85a:	2300      	movs	r3, #0
 800b85c:	001a      	movs	r2, r3
 800b85e:	3701      	adds	r7, #1
 800b860:	606b      	str	r3, [r5, #4]
 800b862:	7839      	ldrb	r1, [r7, #0]
 800b864:	1c78      	adds	r0, r7, #1
 800b866:	3930      	subs	r1, #48	; 0x30
 800b868:	4684      	mov	ip, r0
 800b86a:	2909      	cmp	r1, #9
 800b86c:	d903      	bls.n	800b876 <_vfiprintf_r+0x1fe>
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d0c3      	beq.n	800b7fa <_vfiprintf_r+0x182>
 800b872:	9209      	str	r2, [sp, #36]	; 0x24
 800b874:	e7c1      	b.n	800b7fa <_vfiprintf_r+0x182>
 800b876:	230a      	movs	r3, #10
 800b878:	435a      	muls	r2, r3
 800b87a:	4667      	mov	r7, ip
 800b87c:	1852      	adds	r2, r2, r1
 800b87e:	3b09      	subs	r3, #9
 800b880:	e7ef      	b.n	800b862 <_vfiprintf_r+0x1ea>
 800b882:	ab07      	add	r3, sp, #28
 800b884:	9300      	str	r3, [sp, #0]
 800b886:	0022      	movs	r2, r4
 800b888:	0029      	movs	r1, r5
 800b88a:	0030      	movs	r0, r6
 800b88c:	4b16      	ldr	r3, [pc, #88]	; (800b8e8 <_vfiprintf_r+0x270>)
 800b88e:	f7fb f8e7 	bl	8006a60 <_printf_float>
 800b892:	9004      	str	r0, [sp, #16]
 800b894:	9b04      	ldr	r3, [sp, #16]
 800b896:	3301      	adds	r3, #1
 800b898:	d1d1      	bne.n	800b83e <_vfiprintf_r+0x1c6>
 800b89a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b89c:	07db      	lsls	r3, r3, #31
 800b89e:	d405      	bmi.n	800b8ac <_vfiprintf_r+0x234>
 800b8a0:	89a3      	ldrh	r3, [r4, #12]
 800b8a2:	059b      	lsls	r3, r3, #22
 800b8a4:	d402      	bmi.n	800b8ac <_vfiprintf_r+0x234>
 800b8a6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b8a8:	f7ff fe6c 	bl	800b584 <__retarget_lock_release_recursive>
 800b8ac:	89a3      	ldrh	r3, [r4, #12]
 800b8ae:	065b      	lsls	r3, r3, #25
 800b8b0:	d500      	bpl.n	800b8b4 <_vfiprintf_r+0x23c>
 800b8b2:	e70a      	b.n	800b6ca <_vfiprintf_r+0x52>
 800b8b4:	980d      	ldr	r0, [sp, #52]	; 0x34
 800b8b6:	e70a      	b.n	800b6ce <_vfiprintf_r+0x56>
 800b8b8:	ab07      	add	r3, sp, #28
 800b8ba:	9300      	str	r3, [sp, #0]
 800b8bc:	0022      	movs	r2, r4
 800b8be:	0029      	movs	r1, r5
 800b8c0:	0030      	movs	r0, r6
 800b8c2:	4b09      	ldr	r3, [pc, #36]	; (800b8e8 <_vfiprintf_r+0x270>)
 800b8c4:	f7fb fb7e 	bl	8006fc4 <_printf_i>
 800b8c8:	e7e3      	b.n	800b892 <_vfiprintf_r+0x21a>
 800b8ca:	46c0      	nop			; (mov r8, r8)
 800b8cc:	0800c3ac 	.word	0x0800c3ac
 800b8d0:	0800c3cc 	.word	0x0800c3cc
 800b8d4:	0800c38c 	.word	0x0800c38c
 800b8d8:	0800c324 	.word	0x0800c324
 800b8dc:	0800c32a 	.word	0x0800c32a
 800b8e0:	0800c32e 	.word	0x0800c32e
 800b8e4:	08006a61 	.word	0x08006a61
 800b8e8:	0800b655 	.word	0x0800b655

0800b8ec <__swbuf_r>:
 800b8ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8ee:	0005      	movs	r5, r0
 800b8f0:	000e      	movs	r6, r1
 800b8f2:	0014      	movs	r4, r2
 800b8f4:	2800      	cmp	r0, #0
 800b8f6:	d004      	beq.n	800b902 <__swbuf_r+0x16>
 800b8f8:	6983      	ldr	r3, [r0, #24]
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d101      	bne.n	800b902 <__swbuf_r+0x16>
 800b8fe:	f7ff fd8f 	bl	800b420 <__sinit>
 800b902:	4b22      	ldr	r3, [pc, #136]	; (800b98c <__swbuf_r+0xa0>)
 800b904:	429c      	cmp	r4, r3
 800b906:	d12e      	bne.n	800b966 <__swbuf_r+0x7a>
 800b908:	686c      	ldr	r4, [r5, #4]
 800b90a:	69a3      	ldr	r3, [r4, #24]
 800b90c:	60a3      	str	r3, [r4, #8]
 800b90e:	89a3      	ldrh	r3, [r4, #12]
 800b910:	071b      	lsls	r3, r3, #28
 800b912:	d532      	bpl.n	800b97a <__swbuf_r+0x8e>
 800b914:	6923      	ldr	r3, [r4, #16]
 800b916:	2b00      	cmp	r3, #0
 800b918:	d02f      	beq.n	800b97a <__swbuf_r+0x8e>
 800b91a:	6823      	ldr	r3, [r4, #0]
 800b91c:	6922      	ldr	r2, [r4, #16]
 800b91e:	b2f7      	uxtb	r7, r6
 800b920:	1a98      	subs	r0, r3, r2
 800b922:	6963      	ldr	r3, [r4, #20]
 800b924:	b2f6      	uxtb	r6, r6
 800b926:	4283      	cmp	r3, r0
 800b928:	dc05      	bgt.n	800b936 <__swbuf_r+0x4a>
 800b92a:	0021      	movs	r1, r4
 800b92c:	0028      	movs	r0, r5
 800b92e:	f7ff fcd5 	bl	800b2dc <_fflush_r>
 800b932:	2800      	cmp	r0, #0
 800b934:	d127      	bne.n	800b986 <__swbuf_r+0x9a>
 800b936:	68a3      	ldr	r3, [r4, #8]
 800b938:	3001      	adds	r0, #1
 800b93a:	3b01      	subs	r3, #1
 800b93c:	60a3      	str	r3, [r4, #8]
 800b93e:	6823      	ldr	r3, [r4, #0]
 800b940:	1c5a      	adds	r2, r3, #1
 800b942:	6022      	str	r2, [r4, #0]
 800b944:	701f      	strb	r7, [r3, #0]
 800b946:	6963      	ldr	r3, [r4, #20]
 800b948:	4283      	cmp	r3, r0
 800b94a:	d004      	beq.n	800b956 <__swbuf_r+0x6a>
 800b94c:	89a3      	ldrh	r3, [r4, #12]
 800b94e:	07db      	lsls	r3, r3, #31
 800b950:	d507      	bpl.n	800b962 <__swbuf_r+0x76>
 800b952:	2e0a      	cmp	r6, #10
 800b954:	d105      	bne.n	800b962 <__swbuf_r+0x76>
 800b956:	0021      	movs	r1, r4
 800b958:	0028      	movs	r0, r5
 800b95a:	f7ff fcbf 	bl	800b2dc <_fflush_r>
 800b95e:	2800      	cmp	r0, #0
 800b960:	d111      	bne.n	800b986 <__swbuf_r+0x9a>
 800b962:	0030      	movs	r0, r6
 800b964:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b966:	4b0a      	ldr	r3, [pc, #40]	; (800b990 <__swbuf_r+0xa4>)
 800b968:	429c      	cmp	r4, r3
 800b96a:	d101      	bne.n	800b970 <__swbuf_r+0x84>
 800b96c:	68ac      	ldr	r4, [r5, #8]
 800b96e:	e7cc      	b.n	800b90a <__swbuf_r+0x1e>
 800b970:	4b08      	ldr	r3, [pc, #32]	; (800b994 <__swbuf_r+0xa8>)
 800b972:	429c      	cmp	r4, r3
 800b974:	d1c9      	bne.n	800b90a <__swbuf_r+0x1e>
 800b976:	68ec      	ldr	r4, [r5, #12]
 800b978:	e7c7      	b.n	800b90a <__swbuf_r+0x1e>
 800b97a:	0021      	movs	r1, r4
 800b97c:	0028      	movs	r0, r5
 800b97e:	f000 f80b 	bl	800b998 <__swsetup_r>
 800b982:	2800      	cmp	r0, #0
 800b984:	d0c9      	beq.n	800b91a <__swbuf_r+0x2e>
 800b986:	2601      	movs	r6, #1
 800b988:	4276      	negs	r6, r6
 800b98a:	e7ea      	b.n	800b962 <__swbuf_r+0x76>
 800b98c:	0800c3ac 	.word	0x0800c3ac
 800b990:	0800c3cc 	.word	0x0800c3cc
 800b994:	0800c38c 	.word	0x0800c38c

0800b998 <__swsetup_r>:
 800b998:	4b37      	ldr	r3, [pc, #220]	; (800ba78 <__swsetup_r+0xe0>)
 800b99a:	b570      	push	{r4, r5, r6, lr}
 800b99c:	681d      	ldr	r5, [r3, #0]
 800b99e:	0006      	movs	r6, r0
 800b9a0:	000c      	movs	r4, r1
 800b9a2:	2d00      	cmp	r5, #0
 800b9a4:	d005      	beq.n	800b9b2 <__swsetup_r+0x1a>
 800b9a6:	69ab      	ldr	r3, [r5, #24]
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d102      	bne.n	800b9b2 <__swsetup_r+0x1a>
 800b9ac:	0028      	movs	r0, r5
 800b9ae:	f7ff fd37 	bl	800b420 <__sinit>
 800b9b2:	4b32      	ldr	r3, [pc, #200]	; (800ba7c <__swsetup_r+0xe4>)
 800b9b4:	429c      	cmp	r4, r3
 800b9b6:	d10f      	bne.n	800b9d8 <__swsetup_r+0x40>
 800b9b8:	686c      	ldr	r4, [r5, #4]
 800b9ba:	230c      	movs	r3, #12
 800b9bc:	5ee2      	ldrsh	r2, [r4, r3]
 800b9be:	b293      	uxth	r3, r2
 800b9c0:	0711      	lsls	r1, r2, #28
 800b9c2:	d42d      	bmi.n	800ba20 <__swsetup_r+0x88>
 800b9c4:	06d9      	lsls	r1, r3, #27
 800b9c6:	d411      	bmi.n	800b9ec <__swsetup_r+0x54>
 800b9c8:	2309      	movs	r3, #9
 800b9ca:	2001      	movs	r0, #1
 800b9cc:	6033      	str	r3, [r6, #0]
 800b9ce:	3337      	adds	r3, #55	; 0x37
 800b9d0:	4313      	orrs	r3, r2
 800b9d2:	81a3      	strh	r3, [r4, #12]
 800b9d4:	4240      	negs	r0, r0
 800b9d6:	bd70      	pop	{r4, r5, r6, pc}
 800b9d8:	4b29      	ldr	r3, [pc, #164]	; (800ba80 <__swsetup_r+0xe8>)
 800b9da:	429c      	cmp	r4, r3
 800b9dc:	d101      	bne.n	800b9e2 <__swsetup_r+0x4a>
 800b9de:	68ac      	ldr	r4, [r5, #8]
 800b9e0:	e7eb      	b.n	800b9ba <__swsetup_r+0x22>
 800b9e2:	4b28      	ldr	r3, [pc, #160]	; (800ba84 <__swsetup_r+0xec>)
 800b9e4:	429c      	cmp	r4, r3
 800b9e6:	d1e8      	bne.n	800b9ba <__swsetup_r+0x22>
 800b9e8:	68ec      	ldr	r4, [r5, #12]
 800b9ea:	e7e6      	b.n	800b9ba <__swsetup_r+0x22>
 800b9ec:	075b      	lsls	r3, r3, #29
 800b9ee:	d513      	bpl.n	800ba18 <__swsetup_r+0x80>
 800b9f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b9f2:	2900      	cmp	r1, #0
 800b9f4:	d008      	beq.n	800ba08 <__swsetup_r+0x70>
 800b9f6:	0023      	movs	r3, r4
 800b9f8:	3344      	adds	r3, #68	; 0x44
 800b9fa:	4299      	cmp	r1, r3
 800b9fc:	d002      	beq.n	800ba04 <__swsetup_r+0x6c>
 800b9fe:	0030      	movs	r0, r6
 800ba00:	f7fe fcee 	bl	800a3e0 <_free_r>
 800ba04:	2300      	movs	r3, #0
 800ba06:	6363      	str	r3, [r4, #52]	; 0x34
 800ba08:	2224      	movs	r2, #36	; 0x24
 800ba0a:	89a3      	ldrh	r3, [r4, #12]
 800ba0c:	4393      	bics	r3, r2
 800ba0e:	81a3      	strh	r3, [r4, #12]
 800ba10:	2300      	movs	r3, #0
 800ba12:	6063      	str	r3, [r4, #4]
 800ba14:	6923      	ldr	r3, [r4, #16]
 800ba16:	6023      	str	r3, [r4, #0]
 800ba18:	2308      	movs	r3, #8
 800ba1a:	89a2      	ldrh	r2, [r4, #12]
 800ba1c:	4313      	orrs	r3, r2
 800ba1e:	81a3      	strh	r3, [r4, #12]
 800ba20:	6923      	ldr	r3, [r4, #16]
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d10b      	bne.n	800ba3e <__swsetup_r+0xa6>
 800ba26:	21a0      	movs	r1, #160	; 0xa0
 800ba28:	2280      	movs	r2, #128	; 0x80
 800ba2a:	89a3      	ldrh	r3, [r4, #12]
 800ba2c:	0089      	lsls	r1, r1, #2
 800ba2e:	0092      	lsls	r2, r2, #2
 800ba30:	400b      	ands	r3, r1
 800ba32:	4293      	cmp	r3, r2
 800ba34:	d003      	beq.n	800ba3e <__swsetup_r+0xa6>
 800ba36:	0021      	movs	r1, r4
 800ba38:	0030      	movs	r0, r6
 800ba3a:	f000 f855 	bl	800bae8 <__smakebuf_r>
 800ba3e:	220c      	movs	r2, #12
 800ba40:	5ea3      	ldrsh	r3, [r4, r2]
 800ba42:	2001      	movs	r0, #1
 800ba44:	001a      	movs	r2, r3
 800ba46:	b299      	uxth	r1, r3
 800ba48:	4002      	ands	r2, r0
 800ba4a:	4203      	tst	r3, r0
 800ba4c:	d00f      	beq.n	800ba6e <__swsetup_r+0xd6>
 800ba4e:	2200      	movs	r2, #0
 800ba50:	60a2      	str	r2, [r4, #8]
 800ba52:	6962      	ldr	r2, [r4, #20]
 800ba54:	4252      	negs	r2, r2
 800ba56:	61a2      	str	r2, [r4, #24]
 800ba58:	2000      	movs	r0, #0
 800ba5a:	6922      	ldr	r2, [r4, #16]
 800ba5c:	4282      	cmp	r2, r0
 800ba5e:	d1ba      	bne.n	800b9d6 <__swsetup_r+0x3e>
 800ba60:	060a      	lsls	r2, r1, #24
 800ba62:	d5b8      	bpl.n	800b9d6 <__swsetup_r+0x3e>
 800ba64:	2240      	movs	r2, #64	; 0x40
 800ba66:	4313      	orrs	r3, r2
 800ba68:	81a3      	strh	r3, [r4, #12]
 800ba6a:	3801      	subs	r0, #1
 800ba6c:	e7b3      	b.n	800b9d6 <__swsetup_r+0x3e>
 800ba6e:	0788      	lsls	r0, r1, #30
 800ba70:	d400      	bmi.n	800ba74 <__swsetup_r+0xdc>
 800ba72:	6962      	ldr	r2, [r4, #20]
 800ba74:	60a2      	str	r2, [r4, #8]
 800ba76:	e7ef      	b.n	800ba58 <__swsetup_r+0xc0>
 800ba78:	20000054 	.word	0x20000054
 800ba7c:	0800c3ac 	.word	0x0800c3ac
 800ba80:	0800c3cc 	.word	0x0800c3cc
 800ba84:	0800c38c 	.word	0x0800c38c

0800ba88 <abort>:
 800ba88:	2006      	movs	r0, #6
 800ba8a:	b510      	push	{r4, lr}
 800ba8c:	f000 f8a2 	bl	800bbd4 <raise>
 800ba90:	2001      	movs	r0, #1
 800ba92:	f7f8 f921 	bl	8003cd8 <_exit>
	...

0800ba98 <__swhatbuf_r>:
 800ba98:	b570      	push	{r4, r5, r6, lr}
 800ba9a:	000e      	movs	r6, r1
 800ba9c:	001d      	movs	r5, r3
 800ba9e:	230e      	movs	r3, #14
 800baa0:	5ec9      	ldrsh	r1, [r1, r3]
 800baa2:	0014      	movs	r4, r2
 800baa4:	b096      	sub	sp, #88	; 0x58
 800baa6:	2900      	cmp	r1, #0
 800baa8:	da08      	bge.n	800babc <__swhatbuf_r+0x24>
 800baaa:	220c      	movs	r2, #12
 800baac:	5eb3      	ldrsh	r3, [r6, r2]
 800baae:	2200      	movs	r2, #0
 800bab0:	602a      	str	r2, [r5, #0]
 800bab2:	061b      	lsls	r3, r3, #24
 800bab4:	d411      	bmi.n	800bada <__swhatbuf_r+0x42>
 800bab6:	2380      	movs	r3, #128	; 0x80
 800bab8:	00db      	lsls	r3, r3, #3
 800baba:	e00f      	b.n	800badc <__swhatbuf_r+0x44>
 800babc:	466a      	mov	r2, sp
 800babe:	f000 f8a9 	bl	800bc14 <_fstat_r>
 800bac2:	2800      	cmp	r0, #0
 800bac4:	dbf1      	blt.n	800baaa <__swhatbuf_r+0x12>
 800bac6:	23f0      	movs	r3, #240	; 0xf0
 800bac8:	9901      	ldr	r1, [sp, #4]
 800baca:	021b      	lsls	r3, r3, #8
 800bacc:	4019      	ands	r1, r3
 800bace:	4b05      	ldr	r3, [pc, #20]	; (800bae4 <__swhatbuf_r+0x4c>)
 800bad0:	18c9      	adds	r1, r1, r3
 800bad2:	424b      	negs	r3, r1
 800bad4:	4159      	adcs	r1, r3
 800bad6:	6029      	str	r1, [r5, #0]
 800bad8:	e7ed      	b.n	800bab6 <__swhatbuf_r+0x1e>
 800bada:	2340      	movs	r3, #64	; 0x40
 800badc:	2000      	movs	r0, #0
 800bade:	6023      	str	r3, [r4, #0]
 800bae0:	b016      	add	sp, #88	; 0x58
 800bae2:	bd70      	pop	{r4, r5, r6, pc}
 800bae4:	ffffe000 	.word	0xffffe000

0800bae8 <__smakebuf_r>:
 800bae8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800baea:	2602      	movs	r6, #2
 800baec:	898b      	ldrh	r3, [r1, #12]
 800baee:	0005      	movs	r5, r0
 800baf0:	000c      	movs	r4, r1
 800baf2:	4233      	tst	r3, r6
 800baf4:	d006      	beq.n	800bb04 <__smakebuf_r+0x1c>
 800baf6:	0023      	movs	r3, r4
 800baf8:	3347      	adds	r3, #71	; 0x47
 800bafa:	6023      	str	r3, [r4, #0]
 800bafc:	6123      	str	r3, [r4, #16]
 800bafe:	2301      	movs	r3, #1
 800bb00:	6163      	str	r3, [r4, #20]
 800bb02:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800bb04:	466a      	mov	r2, sp
 800bb06:	ab01      	add	r3, sp, #4
 800bb08:	f7ff ffc6 	bl	800ba98 <__swhatbuf_r>
 800bb0c:	9900      	ldr	r1, [sp, #0]
 800bb0e:	0007      	movs	r7, r0
 800bb10:	0028      	movs	r0, r5
 800bb12:	f7fe fcd1 	bl	800a4b8 <_malloc_r>
 800bb16:	2800      	cmp	r0, #0
 800bb18:	d108      	bne.n	800bb2c <__smakebuf_r+0x44>
 800bb1a:	220c      	movs	r2, #12
 800bb1c:	5ea3      	ldrsh	r3, [r4, r2]
 800bb1e:	059a      	lsls	r2, r3, #22
 800bb20:	d4ef      	bmi.n	800bb02 <__smakebuf_r+0x1a>
 800bb22:	2203      	movs	r2, #3
 800bb24:	4393      	bics	r3, r2
 800bb26:	431e      	orrs	r6, r3
 800bb28:	81a6      	strh	r6, [r4, #12]
 800bb2a:	e7e4      	b.n	800baf6 <__smakebuf_r+0xe>
 800bb2c:	4b0f      	ldr	r3, [pc, #60]	; (800bb6c <__smakebuf_r+0x84>)
 800bb2e:	62ab      	str	r3, [r5, #40]	; 0x28
 800bb30:	2380      	movs	r3, #128	; 0x80
 800bb32:	89a2      	ldrh	r2, [r4, #12]
 800bb34:	6020      	str	r0, [r4, #0]
 800bb36:	4313      	orrs	r3, r2
 800bb38:	81a3      	strh	r3, [r4, #12]
 800bb3a:	9b00      	ldr	r3, [sp, #0]
 800bb3c:	6120      	str	r0, [r4, #16]
 800bb3e:	6163      	str	r3, [r4, #20]
 800bb40:	9b01      	ldr	r3, [sp, #4]
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d00d      	beq.n	800bb62 <__smakebuf_r+0x7a>
 800bb46:	0028      	movs	r0, r5
 800bb48:	230e      	movs	r3, #14
 800bb4a:	5ee1      	ldrsh	r1, [r4, r3]
 800bb4c:	f000 f874 	bl	800bc38 <_isatty_r>
 800bb50:	2800      	cmp	r0, #0
 800bb52:	d006      	beq.n	800bb62 <__smakebuf_r+0x7a>
 800bb54:	2203      	movs	r2, #3
 800bb56:	89a3      	ldrh	r3, [r4, #12]
 800bb58:	4393      	bics	r3, r2
 800bb5a:	001a      	movs	r2, r3
 800bb5c:	2301      	movs	r3, #1
 800bb5e:	4313      	orrs	r3, r2
 800bb60:	81a3      	strh	r3, [r4, #12]
 800bb62:	89a0      	ldrh	r0, [r4, #12]
 800bb64:	4307      	orrs	r7, r0
 800bb66:	81a7      	strh	r7, [r4, #12]
 800bb68:	e7cb      	b.n	800bb02 <__smakebuf_r+0x1a>
 800bb6a:	46c0      	nop			; (mov r8, r8)
 800bb6c:	0800b3a5 	.word	0x0800b3a5

0800bb70 <_malloc_usable_size_r>:
 800bb70:	1f0b      	subs	r3, r1, #4
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	1f18      	subs	r0, r3, #4
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	da01      	bge.n	800bb7e <_malloc_usable_size_r+0xe>
 800bb7a:	580b      	ldr	r3, [r1, r0]
 800bb7c:	18c0      	adds	r0, r0, r3
 800bb7e:	4770      	bx	lr

0800bb80 <_raise_r>:
 800bb80:	b570      	push	{r4, r5, r6, lr}
 800bb82:	0004      	movs	r4, r0
 800bb84:	000d      	movs	r5, r1
 800bb86:	291f      	cmp	r1, #31
 800bb88:	d904      	bls.n	800bb94 <_raise_r+0x14>
 800bb8a:	2316      	movs	r3, #22
 800bb8c:	6003      	str	r3, [r0, #0]
 800bb8e:	2001      	movs	r0, #1
 800bb90:	4240      	negs	r0, r0
 800bb92:	bd70      	pop	{r4, r5, r6, pc}
 800bb94:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d004      	beq.n	800bba4 <_raise_r+0x24>
 800bb9a:	008a      	lsls	r2, r1, #2
 800bb9c:	189b      	adds	r3, r3, r2
 800bb9e:	681a      	ldr	r2, [r3, #0]
 800bba0:	2a00      	cmp	r2, #0
 800bba2:	d108      	bne.n	800bbb6 <_raise_r+0x36>
 800bba4:	0020      	movs	r0, r4
 800bba6:	f000 f831 	bl	800bc0c <_getpid_r>
 800bbaa:	002a      	movs	r2, r5
 800bbac:	0001      	movs	r1, r0
 800bbae:	0020      	movs	r0, r4
 800bbb0:	f000 f81a 	bl	800bbe8 <_kill_r>
 800bbb4:	e7ed      	b.n	800bb92 <_raise_r+0x12>
 800bbb6:	2000      	movs	r0, #0
 800bbb8:	2a01      	cmp	r2, #1
 800bbba:	d0ea      	beq.n	800bb92 <_raise_r+0x12>
 800bbbc:	1c51      	adds	r1, r2, #1
 800bbbe:	d103      	bne.n	800bbc8 <_raise_r+0x48>
 800bbc0:	2316      	movs	r3, #22
 800bbc2:	3001      	adds	r0, #1
 800bbc4:	6023      	str	r3, [r4, #0]
 800bbc6:	e7e4      	b.n	800bb92 <_raise_r+0x12>
 800bbc8:	2400      	movs	r4, #0
 800bbca:	0028      	movs	r0, r5
 800bbcc:	601c      	str	r4, [r3, #0]
 800bbce:	4790      	blx	r2
 800bbd0:	0020      	movs	r0, r4
 800bbd2:	e7de      	b.n	800bb92 <_raise_r+0x12>

0800bbd4 <raise>:
 800bbd4:	b510      	push	{r4, lr}
 800bbd6:	4b03      	ldr	r3, [pc, #12]	; (800bbe4 <raise+0x10>)
 800bbd8:	0001      	movs	r1, r0
 800bbda:	6818      	ldr	r0, [r3, #0]
 800bbdc:	f7ff ffd0 	bl	800bb80 <_raise_r>
 800bbe0:	bd10      	pop	{r4, pc}
 800bbe2:	46c0      	nop			; (mov r8, r8)
 800bbe4:	20000054 	.word	0x20000054

0800bbe8 <_kill_r>:
 800bbe8:	2300      	movs	r3, #0
 800bbea:	b570      	push	{r4, r5, r6, lr}
 800bbec:	4d06      	ldr	r5, [pc, #24]	; (800bc08 <_kill_r+0x20>)
 800bbee:	0004      	movs	r4, r0
 800bbf0:	0008      	movs	r0, r1
 800bbf2:	0011      	movs	r1, r2
 800bbf4:	602b      	str	r3, [r5, #0]
 800bbf6:	f7f8 f85f 	bl	8003cb8 <_kill>
 800bbfa:	1c43      	adds	r3, r0, #1
 800bbfc:	d103      	bne.n	800bc06 <_kill_r+0x1e>
 800bbfe:	682b      	ldr	r3, [r5, #0]
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d000      	beq.n	800bc06 <_kill_r+0x1e>
 800bc04:	6023      	str	r3, [r4, #0]
 800bc06:	bd70      	pop	{r4, r5, r6, pc}
 800bc08:	200009e0 	.word	0x200009e0

0800bc0c <_getpid_r>:
 800bc0c:	b510      	push	{r4, lr}
 800bc0e:	f7f8 f84d 	bl	8003cac <_getpid>
 800bc12:	bd10      	pop	{r4, pc}

0800bc14 <_fstat_r>:
 800bc14:	2300      	movs	r3, #0
 800bc16:	b570      	push	{r4, r5, r6, lr}
 800bc18:	4d06      	ldr	r5, [pc, #24]	; (800bc34 <_fstat_r+0x20>)
 800bc1a:	0004      	movs	r4, r0
 800bc1c:	0008      	movs	r0, r1
 800bc1e:	0011      	movs	r1, r2
 800bc20:	602b      	str	r3, [r5, #0]
 800bc22:	f7f8 f8a8 	bl	8003d76 <_fstat>
 800bc26:	1c43      	adds	r3, r0, #1
 800bc28:	d103      	bne.n	800bc32 <_fstat_r+0x1e>
 800bc2a:	682b      	ldr	r3, [r5, #0]
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d000      	beq.n	800bc32 <_fstat_r+0x1e>
 800bc30:	6023      	str	r3, [r4, #0]
 800bc32:	bd70      	pop	{r4, r5, r6, pc}
 800bc34:	200009e0 	.word	0x200009e0

0800bc38 <_isatty_r>:
 800bc38:	2300      	movs	r3, #0
 800bc3a:	b570      	push	{r4, r5, r6, lr}
 800bc3c:	4d06      	ldr	r5, [pc, #24]	; (800bc58 <_isatty_r+0x20>)
 800bc3e:	0004      	movs	r4, r0
 800bc40:	0008      	movs	r0, r1
 800bc42:	602b      	str	r3, [r5, #0]
 800bc44:	f7f8 f8a5 	bl	8003d92 <_isatty>
 800bc48:	1c43      	adds	r3, r0, #1
 800bc4a:	d103      	bne.n	800bc54 <_isatty_r+0x1c>
 800bc4c:	682b      	ldr	r3, [r5, #0]
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d000      	beq.n	800bc54 <_isatty_r+0x1c>
 800bc52:	6023      	str	r3, [r4, #0]
 800bc54:	bd70      	pop	{r4, r5, r6, pc}
 800bc56:	46c0      	nop			; (mov r8, r8)
 800bc58:	200009e0 	.word	0x200009e0

0800bc5c <_init>:
 800bc5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc5e:	46c0      	nop			; (mov r8, r8)
 800bc60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc62:	bc08      	pop	{r3}
 800bc64:	469e      	mov	lr, r3
 800bc66:	4770      	bx	lr

0800bc68 <_fini>:
 800bc68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc6a:	46c0      	nop			; (mov r8, r8)
 800bc6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc6e:	bc08      	pop	{r3}
 800bc70:	469e      	mov	lr, r3
 800bc72:	4770      	bx	lr
