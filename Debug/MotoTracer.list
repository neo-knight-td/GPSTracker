
MotoTracer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dad8  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000914  0800db90  0800db90  0001db90  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e4a4  0800e4a4  00020224  2**0
                  CONTENTS
  4 .ARM          00000000  0800e4a4  0800e4a4  00020224  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800e4a4  0800e4a4  00020224  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e4a4  0800e4a4  0001e4a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e4a8  0800e4a8  0001e4a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000224  20000000  0800e4ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000080c  20000224  0800e6d0  00020224  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000a30  0800e6d0  00020a30  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY
 12 .debug_info   000121d7  00000000  00000000  0002024c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002aab  00000000  00000000  00032423  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d48  00000000  00000000  00034ed0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c20  00000000  00000000  00035c18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000175c6  00000000  00000000  00036838  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000125c8  00000000  00000000  0004ddfe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008890a  00000000  00000000  000603c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e8cd0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004788  00000000  00000000  000e8d20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000224 	.word	0x20000224
 80000d8:	00000000 	.word	0x00000000
 80000dc:	0800db78 	.word	0x0800db78

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000228 	.word	0x20000228
 80000fc:	0800db78 	.word	0x0800db78

08000100 <strcmp>:
 8000100:	7802      	ldrb	r2, [r0, #0]
 8000102:	780b      	ldrb	r3, [r1, #0]
 8000104:	2a00      	cmp	r2, #0
 8000106:	d003      	beq.n	8000110 <strcmp+0x10>
 8000108:	3001      	adds	r0, #1
 800010a:	3101      	adds	r1, #1
 800010c:	429a      	cmp	r2, r3
 800010e:	d0f7      	beq.n	8000100 <strcmp>
 8000110:	1ad0      	subs	r0, r2, r3
 8000112:	4770      	bx	lr

08000114 <strlen>:
 8000114:	2300      	movs	r3, #0
 8000116:	5cc2      	ldrb	r2, [r0, r3]
 8000118:	3301      	adds	r3, #1
 800011a:	2a00      	cmp	r2, #0
 800011c:	d1fb      	bne.n	8000116 <strlen+0x2>
 800011e:	1e58      	subs	r0, r3, #1
 8000120:	4770      	bx	lr
	...

08000124 <__gnu_thumb1_case_uqi>:
 8000124:	b402      	push	{r1}
 8000126:	4671      	mov	r1, lr
 8000128:	0849      	lsrs	r1, r1, #1
 800012a:	0049      	lsls	r1, r1, #1
 800012c:	5c09      	ldrb	r1, [r1, r0]
 800012e:	0049      	lsls	r1, r1, #1
 8000130:	448e      	add	lr, r1
 8000132:	bc02      	pop	{r1}
 8000134:	4770      	bx	lr
 8000136:	46c0      	nop			; (mov r8, r8)

08000138 <__gnu_thumb1_case_shi>:
 8000138:	b403      	push	{r0, r1}
 800013a:	4671      	mov	r1, lr
 800013c:	0849      	lsrs	r1, r1, #1
 800013e:	0040      	lsls	r0, r0, #1
 8000140:	0049      	lsls	r1, r1, #1
 8000142:	5e09      	ldrsh	r1, [r1, r0]
 8000144:	0049      	lsls	r1, r1, #1
 8000146:	448e      	add	lr, r1
 8000148:	bc03      	pop	{r0, r1}
 800014a:	4770      	bx	lr

0800014c <__udivsi3>:
 800014c:	2200      	movs	r2, #0
 800014e:	0843      	lsrs	r3, r0, #1
 8000150:	428b      	cmp	r3, r1
 8000152:	d374      	bcc.n	800023e <__udivsi3+0xf2>
 8000154:	0903      	lsrs	r3, r0, #4
 8000156:	428b      	cmp	r3, r1
 8000158:	d35f      	bcc.n	800021a <__udivsi3+0xce>
 800015a:	0a03      	lsrs	r3, r0, #8
 800015c:	428b      	cmp	r3, r1
 800015e:	d344      	bcc.n	80001ea <__udivsi3+0x9e>
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d328      	bcc.n	80001b8 <__udivsi3+0x6c>
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d30d      	bcc.n	8000188 <__udivsi3+0x3c>
 800016c:	22ff      	movs	r2, #255	; 0xff
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	ba12      	rev	r2, r2
 8000172:	0c03      	lsrs	r3, r0, #16
 8000174:	428b      	cmp	r3, r1
 8000176:	d302      	bcc.n	800017e <__udivsi3+0x32>
 8000178:	1212      	asrs	r2, r2, #8
 800017a:	0209      	lsls	r1, r1, #8
 800017c:	d065      	beq.n	800024a <__udivsi3+0xfe>
 800017e:	0b03      	lsrs	r3, r0, #12
 8000180:	428b      	cmp	r3, r1
 8000182:	d319      	bcc.n	80001b8 <__udivsi3+0x6c>
 8000184:	e000      	b.n	8000188 <__udivsi3+0x3c>
 8000186:	0a09      	lsrs	r1, r1, #8
 8000188:	0bc3      	lsrs	r3, r0, #15
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x46>
 800018e:	03cb      	lsls	r3, r1, #15
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b83      	lsrs	r3, r0, #14
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x52>
 800019a:	038b      	lsls	r3, r1, #14
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b43      	lsrs	r3, r0, #13
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x5e>
 80001a6:	034b      	lsls	r3, r1, #13
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0b03      	lsrs	r3, r0, #12
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x6a>
 80001b2:	030b      	lsls	r3, r1, #12
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0ac3      	lsrs	r3, r0, #11
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x76>
 80001be:	02cb      	lsls	r3, r1, #11
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a83      	lsrs	r3, r0, #10
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x82>
 80001ca:	028b      	lsls	r3, r1, #10
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a43      	lsrs	r3, r0, #9
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x8e>
 80001d6:	024b      	lsls	r3, r1, #9
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	0a03      	lsrs	r3, r0, #8
 80001de:	428b      	cmp	r3, r1
 80001e0:	d301      	bcc.n	80001e6 <__udivsi3+0x9a>
 80001e2:	020b      	lsls	r3, r1, #8
 80001e4:	1ac0      	subs	r0, r0, r3
 80001e6:	4152      	adcs	r2, r2
 80001e8:	d2cd      	bcs.n	8000186 <__udivsi3+0x3a>
 80001ea:	09c3      	lsrs	r3, r0, #7
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xa8>
 80001f0:	01cb      	lsls	r3, r1, #7
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0983      	lsrs	r3, r0, #6
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xb4>
 80001fc:	018b      	lsls	r3, r1, #6
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0943      	lsrs	r3, r0, #5
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xc0>
 8000208:	014b      	lsls	r3, r1, #5
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	0903      	lsrs	r3, r0, #4
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xcc>
 8000214:	010b      	lsls	r3, r1, #4
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	08c3      	lsrs	r3, r0, #3
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xd8>
 8000220:	00cb      	lsls	r3, r1, #3
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0883      	lsrs	r3, r0, #2
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xe4>
 800022c:	008b      	lsls	r3, r1, #2
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	0843      	lsrs	r3, r0, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d301      	bcc.n	800023c <__udivsi3+0xf0>
 8000238:	004b      	lsls	r3, r1, #1
 800023a:	1ac0      	subs	r0, r0, r3
 800023c:	4152      	adcs	r2, r2
 800023e:	1a41      	subs	r1, r0, r1
 8000240:	d200      	bcs.n	8000244 <__udivsi3+0xf8>
 8000242:	4601      	mov	r1, r0
 8000244:	4152      	adcs	r2, r2
 8000246:	4610      	mov	r0, r2
 8000248:	4770      	bx	lr
 800024a:	e7ff      	b.n	800024c <__udivsi3+0x100>
 800024c:	b501      	push	{r0, lr}
 800024e:	2000      	movs	r0, #0
 8000250:	f000 f8f0 	bl	8000434 <__aeabi_idiv0>
 8000254:	bd02      	pop	{r1, pc}
 8000256:	46c0      	nop			; (mov r8, r8)

08000258 <__aeabi_uidivmod>:
 8000258:	2900      	cmp	r1, #0
 800025a:	d0f7      	beq.n	800024c <__udivsi3+0x100>
 800025c:	e776      	b.n	800014c <__udivsi3>
 800025e:	4770      	bx	lr

08000260 <__divsi3>:
 8000260:	4603      	mov	r3, r0
 8000262:	430b      	orrs	r3, r1
 8000264:	d47f      	bmi.n	8000366 <__divsi3+0x106>
 8000266:	2200      	movs	r2, #0
 8000268:	0843      	lsrs	r3, r0, #1
 800026a:	428b      	cmp	r3, r1
 800026c:	d374      	bcc.n	8000358 <__divsi3+0xf8>
 800026e:	0903      	lsrs	r3, r0, #4
 8000270:	428b      	cmp	r3, r1
 8000272:	d35f      	bcc.n	8000334 <__divsi3+0xd4>
 8000274:	0a03      	lsrs	r3, r0, #8
 8000276:	428b      	cmp	r3, r1
 8000278:	d344      	bcc.n	8000304 <__divsi3+0xa4>
 800027a:	0b03      	lsrs	r3, r0, #12
 800027c:	428b      	cmp	r3, r1
 800027e:	d328      	bcc.n	80002d2 <__divsi3+0x72>
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d30d      	bcc.n	80002a2 <__divsi3+0x42>
 8000286:	22ff      	movs	r2, #255	; 0xff
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	ba12      	rev	r2, r2
 800028c:	0c03      	lsrs	r3, r0, #16
 800028e:	428b      	cmp	r3, r1
 8000290:	d302      	bcc.n	8000298 <__divsi3+0x38>
 8000292:	1212      	asrs	r2, r2, #8
 8000294:	0209      	lsls	r1, r1, #8
 8000296:	d065      	beq.n	8000364 <__divsi3+0x104>
 8000298:	0b03      	lsrs	r3, r0, #12
 800029a:	428b      	cmp	r3, r1
 800029c:	d319      	bcc.n	80002d2 <__divsi3+0x72>
 800029e:	e000      	b.n	80002a2 <__divsi3+0x42>
 80002a0:	0a09      	lsrs	r1, r1, #8
 80002a2:	0bc3      	lsrs	r3, r0, #15
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x4c>
 80002a8:	03cb      	lsls	r3, r1, #15
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b83      	lsrs	r3, r0, #14
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x58>
 80002b4:	038b      	lsls	r3, r1, #14
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b43      	lsrs	r3, r0, #13
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x64>
 80002c0:	034b      	lsls	r3, r1, #13
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0b03      	lsrs	r3, r0, #12
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x70>
 80002cc:	030b      	lsls	r3, r1, #12
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0ac3      	lsrs	r3, r0, #11
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x7c>
 80002d8:	02cb      	lsls	r3, r1, #11
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a83      	lsrs	r3, r0, #10
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x88>
 80002e4:	028b      	lsls	r3, r1, #10
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a43      	lsrs	r3, r0, #9
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0x94>
 80002f0:	024b      	lsls	r3, r1, #9
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	0a03      	lsrs	r3, r0, #8
 80002f8:	428b      	cmp	r3, r1
 80002fa:	d301      	bcc.n	8000300 <__divsi3+0xa0>
 80002fc:	020b      	lsls	r3, r1, #8
 80002fe:	1ac0      	subs	r0, r0, r3
 8000300:	4152      	adcs	r2, r2
 8000302:	d2cd      	bcs.n	80002a0 <__divsi3+0x40>
 8000304:	09c3      	lsrs	r3, r0, #7
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xae>
 800030a:	01cb      	lsls	r3, r1, #7
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0983      	lsrs	r3, r0, #6
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xba>
 8000316:	018b      	lsls	r3, r1, #6
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0943      	lsrs	r3, r0, #5
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xc6>
 8000322:	014b      	lsls	r3, r1, #5
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	0903      	lsrs	r3, r0, #4
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xd2>
 800032e:	010b      	lsls	r3, r1, #4
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	08c3      	lsrs	r3, r0, #3
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xde>
 800033a:	00cb      	lsls	r3, r1, #3
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0883      	lsrs	r3, r0, #2
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xea>
 8000346:	008b      	lsls	r3, r1, #2
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	0843      	lsrs	r3, r0, #1
 800034e:	428b      	cmp	r3, r1
 8000350:	d301      	bcc.n	8000356 <__divsi3+0xf6>
 8000352:	004b      	lsls	r3, r1, #1
 8000354:	1ac0      	subs	r0, r0, r3
 8000356:	4152      	adcs	r2, r2
 8000358:	1a41      	subs	r1, r0, r1
 800035a:	d200      	bcs.n	800035e <__divsi3+0xfe>
 800035c:	4601      	mov	r1, r0
 800035e:	4152      	adcs	r2, r2
 8000360:	4610      	mov	r0, r2
 8000362:	4770      	bx	lr
 8000364:	e05d      	b.n	8000422 <__divsi3+0x1c2>
 8000366:	0fca      	lsrs	r2, r1, #31
 8000368:	d000      	beq.n	800036c <__divsi3+0x10c>
 800036a:	4249      	negs	r1, r1
 800036c:	1003      	asrs	r3, r0, #32
 800036e:	d300      	bcc.n	8000372 <__divsi3+0x112>
 8000370:	4240      	negs	r0, r0
 8000372:	4053      	eors	r3, r2
 8000374:	2200      	movs	r2, #0
 8000376:	469c      	mov	ip, r3
 8000378:	0903      	lsrs	r3, r0, #4
 800037a:	428b      	cmp	r3, r1
 800037c:	d32d      	bcc.n	80003da <__divsi3+0x17a>
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d312      	bcc.n	80003aa <__divsi3+0x14a>
 8000384:	22fc      	movs	r2, #252	; 0xfc
 8000386:	0189      	lsls	r1, r1, #6
 8000388:	ba12      	rev	r2, r2
 800038a:	0a03      	lsrs	r3, r0, #8
 800038c:	428b      	cmp	r3, r1
 800038e:	d30c      	bcc.n	80003aa <__divsi3+0x14a>
 8000390:	0189      	lsls	r1, r1, #6
 8000392:	1192      	asrs	r2, r2, #6
 8000394:	428b      	cmp	r3, r1
 8000396:	d308      	bcc.n	80003aa <__divsi3+0x14a>
 8000398:	0189      	lsls	r1, r1, #6
 800039a:	1192      	asrs	r2, r2, #6
 800039c:	428b      	cmp	r3, r1
 800039e:	d304      	bcc.n	80003aa <__divsi3+0x14a>
 80003a0:	0189      	lsls	r1, r1, #6
 80003a2:	d03a      	beq.n	800041a <__divsi3+0x1ba>
 80003a4:	1192      	asrs	r2, r2, #6
 80003a6:	e000      	b.n	80003aa <__divsi3+0x14a>
 80003a8:	0989      	lsrs	r1, r1, #6
 80003aa:	09c3      	lsrs	r3, r0, #7
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x154>
 80003b0:	01cb      	lsls	r3, r1, #7
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0983      	lsrs	r3, r0, #6
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x160>
 80003bc:	018b      	lsls	r3, r1, #6
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0943      	lsrs	r3, r0, #5
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x16c>
 80003c8:	014b      	lsls	r3, r1, #5
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	0903      	lsrs	r3, r0, #4
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x178>
 80003d4:	010b      	lsls	r3, r1, #4
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	08c3      	lsrs	r3, r0, #3
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x184>
 80003e0:	00cb      	lsls	r3, r1, #3
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	0883      	lsrs	r3, r0, #2
 80003e8:	428b      	cmp	r3, r1
 80003ea:	d301      	bcc.n	80003f0 <__divsi3+0x190>
 80003ec:	008b      	lsls	r3, r1, #2
 80003ee:	1ac0      	subs	r0, r0, r3
 80003f0:	4152      	adcs	r2, r2
 80003f2:	d2d9      	bcs.n	80003a8 <__divsi3+0x148>
 80003f4:	0843      	lsrs	r3, r0, #1
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d301      	bcc.n	80003fe <__divsi3+0x19e>
 80003fa:	004b      	lsls	r3, r1, #1
 80003fc:	1ac0      	subs	r0, r0, r3
 80003fe:	4152      	adcs	r2, r2
 8000400:	1a41      	subs	r1, r0, r1
 8000402:	d200      	bcs.n	8000406 <__divsi3+0x1a6>
 8000404:	4601      	mov	r1, r0
 8000406:	4663      	mov	r3, ip
 8000408:	4152      	adcs	r2, r2
 800040a:	105b      	asrs	r3, r3, #1
 800040c:	4610      	mov	r0, r2
 800040e:	d301      	bcc.n	8000414 <__divsi3+0x1b4>
 8000410:	4240      	negs	r0, r0
 8000412:	2b00      	cmp	r3, #0
 8000414:	d500      	bpl.n	8000418 <__divsi3+0x1b8>
 8000416:	4249      	negs	r1, r1
 8000418:	4770      	bx	lr
 800041a:	4663      	mov	r3, ip
 800041c:	105b      	asrs	r3, r3, #1
 800041e:	d300      	bcc.n	8000422 <__divsi3+0x1c2>
 8000420:	4240      	negs	r0, r0
 8000422:	b501      	push	{r0, lr}
 8000424:	2000      	movs	r0, #0
 8000426:	f000 f805 	bl	8000434 <__aeabi_idiv0>
 800042a:	bd02      	pop	{r1, pc}

0800042c <__aeabi_idivmod>:
 800042c:	2900      	cmp	r1, #0
 800042e:	d0f8      	beq.n	8000422 <__divsi3+0x1c2>
 8000430:	e716      	b.n	8000260 <__divsi3>
 8000432:	4770      	bx	lr

08000434 <__aeabi_idiv0>:
 8000434:	4770      	bx	lr
 8000436:	46c0      	nop			; (mov r8, r8)

08000438 <__aeabi_cdrcmple>:
 8000438:	4684      	mov	ip, r0
 800043a:	0010      	movs	r0, r2
 800043c:	4662      	mov	r2, ip
 800043e:	468c      	mov	ip, r1
 8000440:	0019      	movs	r1, r3
 8000442:	4663      	mov	r3, ip
 8000444:	e000      	b.n	8000448 <__aeabi_cdcmpeq>
 8000446:	46c0      	nop			; (mov r8, r8)

08000448 <__aeabi_cdcmpeq>:
 8000448:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800044a:	f001 fd39 	bl	8001ec0 <__ledf2>
 800044e:	2800      	cmp	r0, #0
 8000450:	d401      	bmi.n	8000456 <__aeabi_cdcmpeq+0xe>
 8000452:	2100      	movs	r1, #0
 8000454:	42c8      	cmn	r0, r1
 8000456:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000458 <__aeabi_dcmpeq>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 fc89 	bl	8001d70 <__eqdf2>
 800045e:	4240      	negs	r0, r0
 8000460:	3001      	adds	r0, #1
 8000462:	bd10      	pop	{r4, pc}

08000464 <__aeabi_dcmplt>:
 8000464:	b510      	push	{r4, lr}
 8000466:	f001 fd2b 	bl	8001ec0 <__ledf2>
 800046a:	2800      	cmp	r0, #0
 800046c:	db01      	blt.n	8000472 <__aeabi_dcmplt+0xe>
 800046e:	2000      	movs	r0, #0
 8000470:	bd10      	pop	{r4, pc}
 8000472:	2001      	movs	r0, #1
 8000474:	bd10      	pop	{r4, pc}
 8000476:	46c0      	nop			; (mov r8, r8)

08000478 <__aeabi_dcmple>:
 8000478:	b510      	push	{r4, lr}
 800047a:	f001 fd21 	bl	8001ec0 <__ledf2>
 800047e:	2800      	cmp	r0, #0
 8000480:	dd01      	ble.n	8000486 <__aeabi_dcmple+0xe>
 8000482:	2000      	movs	r0, #0
 8000484:	bd10      	pop	{r4, pc}
 8000486:	2001      	movs	r0, #1
 8000488:	bd10      	pop	{r4, pc}
 800048a:	46c0      	nop			; (mov r8, r8)

0800048c <__aeabi_dcmpgt>:
 800048c:	b510      	push	{r4, lr}
 800048e:	f001 fcb1 	bl	8001df4 <__gedf2>
 8000492:	2800      	cmp	r0, #0
 8000494:	dc01      	bgt.n	800049a <__aeabi_dcmpgt+0xe>
 8000496:	2000      	movs	r0, #0
 8000498:	bd10      	pop	{r4, pc}
 800049a:	2001      	movs	r0, #1
 800049c:	bd10      	pop	{r4, pc}
 800049e:	46c0      	nop			; (mov r8, r8)

080004a0 <__aeabi_dcmpge>:
 80004a0:	b510      	push	{r4, lr}
 80004a2:	f001 fca7 	bl	8001df4 <__gedf2>
 80004a6:	2800      	cmp	r0, #0
 80004a8:	da01      	bge.n	80004ae <__aeabi_dcmpge+0xe>
 80004aa:	2000      	movs	r0, #0
 80004ac:	bd10      	pop	{r4, pc}
 80004ae:	2001      	movs	r0, #1
 80004b0:	bd10      	pop	{r4, pc}
 80004b2:	46c0      	nop			; (mov r8, r8)

080004b4 <__aeabi_cfrcmple>:
 80004b4:	4684      	mov	ip, r0
 80004b6:	0008      	movs	r0, r1
 80004b8:	4661      	mov	r1, ip
 80004ba:	e7ff      	b.n	80004bc <__aeabi_cfcmpeq>

080004bc <__aeabi_cfcmpeq>:
 80004bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004be:	f000 fbc5 	bl	8000c4c <__lesf2>
 80004c2:	2800      	cmp	r0, #0
 80004c4:	d401      	bmi.n	80004ca <__aeabi_cfcmpeq+0xe>
 80004c6:	2100      	movs	r1, #0
 80004c8:	42c8      	cmn	r0, r1
 80004ca:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004cc <__aeabi_fcmpeq>:
 80004cc:	b510      	push	{r4, lr}
 80004ce:	f000 fb51 	bl	8000b74 <__eqsf2>
 80004d2:	4240      	negs	r0, r0
 80004d4:	3001      	adds	r0, #1
 80004d6:	bd10      	pop	{r4, pc}

080004d8 <__aeabi_fcmplt>:
 80004d8:	b510      	push	{r4, lr}
 80004da:	f000 fbb7 	bl	8000c4c <__lesf2>
 80004de:	2800      	cmp	r0, #0
 80004e0:	db01      	blt.n	80004e6 <__aeabi_fcmplt+0xe>
 80004e2:	2000      	movs	r0, #0
 80004e4:	bd10      	pop	{r4, pc}
 80004e6:	2001      	movs	r0, #1
 80004e8:	bd10      	pop	{r4, pc}
 80004ea:	46c0      	nop			; (mov r8, r8)

080004ec <__aeabi_fcmple>:
 80004ec:	b510      	push	{r4, lr}
 80004ee:	f000 fbad 	bl	8000c4c <__lesf2>
 80004f2:	2800      	cmp	r0, #0
 80004f4:	dd01      	ble.n	80004fa <__aeabi_fcmple+0xe>
 80004f6:	2000      	movs	r0, #0
 80004f8:	bd10      	pop	{r4, pc}
 80004fa:	2001      	movs	r0, #1
 80004fc:	bd10      	pop	{r4, pc}
 80004fe:	46c0      	nop			; (mov r8, r8)

08000500 <__aeabi_fcmpgt>:
 8000500:	b510      	push	{r4, lr}
 8000502:	f000 fb5d 	bl	8000bc0 <__gesf2>
 8000506:	2800      	cmp	r0, #0
 8000508:	dc01      	bgt.n	800050e <__aeabi_fcmpgt+0xe>
 800050a:	2000      	movs	r0, #0
 800050c:	bd10      	pop	{r4, pc}
 800050e:	2001      	movs	r0, #1
 8000510:	bd10      	pop	{r4, pc}
 8000512:	46c0      	nop			; (mov r8, r8)

08000514 <__aeabi_fcmpge>:
 8000514:	b510      	push	{r4, lr}
 8000516:	f000 fb53 	bl	8000bc0 <__gesf2>
 800051a:	2800      	cmp	r0, #0
 800051c:	da01      	bge.n	8000522 <__aeabi_fcmpge+0xe>
 800051e:	2000      	movs	r0, #0
 8000520:	bd10      	pop	{r4, pc}
 8000522:	2001      	movs	r0, #1
 8000524:	bd10      	pop	{r4, pc}
 8000526:	46c0      	nop			; (mov r8, r8)

08000528 <__aeabi_d2uiz>:
 8000528:	b570      	push	{r4, r5, r6, lr}
 800052a:	2200      	movs	r2, #0
 800052c:	4b0c      	ldr	r3, [pc, #48]	; (8000560 <__aeabi_d2uiz+0x38>)
 800052e:	0004      	movs	r4, r0
 8000530:	000d      	movs	r5, r1
 8000532:	f7ff ffb5 	bl	80004a0 <__aeabi_dcmpge>
 8000536:	2800      	cmp	r0, #0
 8000538:	d104      	bne.n	8000544 <__aeabi_d2uiz+0x1c>
 800053a:	0020      	movs	r0, r4
 800053c:	0029      	movs	r1, r5
 800053e:	f002 fb3f 	bl	8002bc0 <__aeabi_d2iz>
 8000542:	bd70      	pop	{r4, r5, r6, pc}
 8000544:	4b06      	ldr	r3, [pc, #24]	; (8000560 <__aeabi_d2uiz+0x38>)
 8000546:	2200      	movs	r2, #0
 8000548:	0020      	movs	r0, r4
 800054a:	0029      	movs	r1, r5
 800054c:	f001 ff88 	bl	8002460 <__aeabi_dsub>
 8000550:	f002 fb36 	bl	8002bc0 <__aeabi_d2iz>
 8000554:	2380      	movs	r3, #128	; 0x80
 8000556:	061b      	lsls	r3, r3, #24
 8000558:	469c      	mov	ip, r3
 800055a:	4460      	add	r0, ip
 800055c:	e7f1      	b.n	8000542 <__aeabi_d2uiz+0x1a>
 800055e:	46c0      	nop			; (mov r8, r8)
 8000560:	41e00000 	.word	0x41e00000

08000564 <__aeabi_d2lz>:
 8000564:	b570      	push	{r4, r5, r6, lr}
 8000566:	0005      	movs	r5, r0
 8000568:	000c      	movs	r4, r1
 800056a:	2200      	movs	r2, #0
 800056c:	2300      	movs	r3, #0
 800056e:	0028      	movs	r0, r5
 8000570:	0021      	movs	r1, r4
 8000572:	f7ff ff77 	bl	8000464 <__aeabi_dcmplt>
 8000576:	2800      	cmp	r0, #0
 8000578:	d108      	bne.n	800058c <__aeabi_d2lz+0x28>
 800057a:	0028      	movs	r0, r5
 800057c:	0021      	movs	r1, r4
 800057e:	f000 f80f 	bl	80005a0 <__aeabi_d2ulz>
 8000582:	0002      	movs	r2, r0
 8000584:	000b      	movs	r3, r1
 8000586:	0010      	movs	r0, r2
 8000588:	0019      	movs	r1, r3
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	2380      	movs	r3, #128	; 0x80
 800058e:	061b      	lsls	r3, r3, #24
 8000590:	18e1      	adds	r1, r4, r3
 8000592:	0028      	movs	r0, r5
 8000594:	f000 f804 	bl	80005a0 <__aeabi_d2ulz>
 8000598:	2300      	movs	r3, #0
 800059a:	4242      	negs	r2, r0
 800059c:	418b      	sbcs	r3, r1
 800059e:	e7f2      	b.n	8000586 <__aeabi_d2lz+0x22>

080005a0 <__aeabi_d2ulz>:
 80005a0:	b570      	push	{r4, r5, r6, lr}
 80005a2:	2200      	movs	r2, #0
 80005a4:	4b0b      	ldr	r3, [pc, #44]	; (80005d4 <__aeabi_d2ulz+0x34>)
 80005a6:	000d      	movs	r5, r1
 80005a8:	0004      	movs	r4, r0
 80005aa:	f001 fced 	bl	8001f88 <__aeabi_dmul>
 80005ae:	f7ff ffbb 	bl	8000528 <__aeabi_d2uiz>
 80005b2:	0006      	movs	r6, r0
 80005b4:	f002 fb6a 	bl	8002c8c <__aeabi_ui2d>
 80005b8:	2200      	movs	r2, #0
 80005ba:	4b07      	ldr	r3, [pc, #28]	; (80005d8 <__aeabi_d2ulz+0x38>)
 80005bc:	f001 fce4 	bl	8001f88 <__aeabi_dmul>
 80005c0:	0002      	movs	r2, r0
 80005c2:	000b      	movs	r3, r1
 80005c4:	0020      	movs	r0, r4
 80005c6:	0029      	movs	r1, r5
 80005c8:	f001 ff4a 	bl	8002460 <__aeabi_dsub>
 80005cc:	f7ff ffac 	bl	8000528 <__aeabi_d2uiz>
 80005d0:	0031      	movs	r1, r6
 80005d2:	bd70      	pop	{r4, r5, r6, pc}
 80005d4:	3df00000 	.word	0x3df00000
 80005d8:	41f00000 	.word	0x41f00000

080005dc <__aeabi_l2d>:
 80005dc:	b570      	push	{r4, r5, r6, lr}
 80005de:	0006      	movs	r6, r0
 80005e0:	0008      	movs	r0, r1
 80005e2:	f002 fb23 	bl	8002c2c <__aeabi_i2d>
 80005e6:	2200      	movs	r2, #0
 80005e8:	4b06      	ldr	r3, [pc, #24]	; (8000604 <__aeabi_l2d+0x28>)
 80005ea:	f001 fccd 	bl	8001f88 <__aeabi_dmul>
 80005ee:	000d      	movs	r5, r1
 80005f0:	0004      	movs	r4, r0
 80005f2:	0030      	movs	r0, r6
 80005f4:	f002 fb4a 	bl	8002c8c <__aeabi_ui2d>
 80005f8:	002b      	movs	r3, r5
 80005fa:	0022      	movs	r2, r4
 80005fc:	f000 fd86 	bl	800110c <__aeabi_dadd>
 8000600:	bd70      	pop	{r4, r5, r6, pc}
 8000602:	46c0      	nop			; (mov r8, r8)
 8000604:	41f00000 	.word	0x41f00000

08000608 <__aeabi_fadd>:
 8000608:	b5f0      	push	{r4, r5, r6, r7, lr}
 800060a:	46c6      	mov	lr, r8
 800060c:	0243      	lsls	r3, r0, #9
 800060e:	0a5b      	lsrs	r3, r3, #9
 8000610:	024e      	lsls	r6, r1, #9
 8000612:	0045      	lsls	r5, r0, #1
 8000614:	004f      	lsls	r7, r1, #1
 8000616:	00da      	lsls	r2, r3, #3
 8000618:	0fc4      	lsrs	r4, r0, #31
 800061a:	469c      	mov	ip, r3
 800061c:	0a70      	lsrs	r0, r6, #9
 800061e:	4690      	mov	r8, r2
 8000620:	b500      	push	{lr}
 8000622:	0e2d      	lsrs	r5, r5, #24
 8000624:	0e3f      	lsrs	r7, r7, #24
 8000626:	0fc9      	lsrs	r1, r1, #31
 8000628:	09b6      	lsrs	r6, r6, #6
 800062a:	428c      	cmp	r4, r1
 800062c:	d04b      	beq.n	80006c6 <__aeabi_fadd+0xbe>
 800062e:	1bea      	subs	r2, r5, r7
 8000630:	2a00      	cmp	r2, #0
 8000632:	dd36      	ble.n	80006a2 <__aeabi_fadd+0x9a>
 8000634:	2f00      	cmp	r7, #0
 8000636:	d061      	beq.n	80006fc <__aeabi_fadd+0xf4>
 8000638:	2dff      	cmp	r5, #255	; 0xff
 800063a:	d100      	bne.n	800063e <__aeabi_fadd+0x36>
 800063c:	e0ad      	b.n	800079a <__aeabi_fadd+0x192>
 800063e:	2380      	movs	r3, #128	; 0x80
 8000640:	04db      	lsls	r3, r3, #19
 8000642:	431e      	orrs	r6, r3
 8000644:	2a1b      	cmp	r2, #27
 8000646:	dc00      	bgt.n	800064a <__aeabi_fadd+0x42>
 8000648:	e0d3      	b.n	80007f2 <__aeabi_fadd+0x1ea>
 800064a:	2001      	movs	r0, #1
 800064c:	4643      	mov	r3, r8
 800064e:	1a18      	subs	r0, r3, r0
 8000650:	0143      	lsls	r3, r0, #5
 8000652:	d400      	bmi.n	8000656 <__aeabi_fadd+0x4e>
 8000654:	e08c      	b.n	8000770 <__aeabi_fadd+0x168>
 8000656:	0180      	lsls	r0, r0, #6
 8000658:	0987      	lsrs	r7, r0, #6
 800065a:	0038      	movs	r0, r7
 800065c:	f002 fc0c 	bl	8002e78 <__clzsi2>
 8000660:	3805      	subs	r0, #5
 8000662:	4087      	lsls	r7, r0
 8000664:	4285      	cmp	r5, r0
 8000666:	dc00      	bgt.n	800066a <__aeabi_fadd+0x62>
 8000668:	e0b6      	b.n	80007d8 <__aeabi_fadd+0x1d0>
 800066a:	1a2d      	subs	r5, r5, r0
 800066c:	48b3      	ldr	r0, [pc, #716]	; (800093c <__aeabi_fadd+0x334>)
 800066e:	4038      	ands	r0, r7
 8000670:	0743      	lsls	r3, r0, #29
 8000672:	d004      	beq.n	800067e <__aeabi_fadd+0x76>
 8000674:	230f      	movs	r3, #15
 8000676:	4003      	ands	r3, r0
 8000678:	2b04      	cmp	r3, #4
 800067a:	d000      	beq.n	800067e <__aeabi_fadd+0x76>
 800067c:	3004      	adds	r0, #4
 800067e:	0143      	lsls	r3, r0, #5
 8000680:	d400      	bmi.n	8000684 <__aeabi_fadd+0x7c>
 8000682:	e078      	b.n	8000776 <__aeabi_fadd+0x16e>
 8000684:	1c6a      	adds	r2, r5, #1
 8000686:	2dfe      	cmp	r5, #254	; 0xfe
 8000688:	d065      	beq.n	8000756 <__aeabi_fadd+0x14e>
 800068a:	0180      	lsls	r0, r0, #6
 800068c:	0a43      	lsrs	r3, r0, #9
 800068e:	469c      	mov	ip, r3
 8000690:	b2d2      	uxtb	r2, r2
 8000692:	4663      	mov	r3, ip
 8000694:	05d0      	lsls	r0, r2, #23
 8000696:	4318      	orrs	r0, r3
 8000698:	07e4      	lsls	r4, r4, #31
 800069a:	4320      	orrs	r0, r4
 800069c:	bc80      	pop	{r7}
 800069e:	46b8      	mov	r8, r7
 80006a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006a2:	2a00      	cmp	r2, #0
 80006a4:	d035      	beq.n	8000712 <__aeabi_fadd+0x10a>
 80006a6:	1b7a      	subs	r2, r7, r5
 80006a8:	2d00      	cmp	r5, #0
 80006aa:	d000      	beq.n	80006ae <__aeabi_fadd+0xa6>
 80006ac:	e0af      	b.n	800080e <__aeabi_fadd+0x206>
 80006ae:	4643      	mov	r3, r8
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d100      	bne.n	80006b6 <__aeabi_fadd+0xae>
 80006b4:	e0a7      	b.n	8000806 <__aeabi_fadd+0x1fe>
 80006b6:	1e53      	subs	r3, r2, #1
 80006b8:	2a01      	cmp	r2, #1
 80006ba:	d100      	bne.n	80006be <__aeabi_fadd+0xb6>
 80006bc:	e12f      	b.n	800091e <__aeabi_fadd+0x316>
 80006be:	2aff      	cmp	r2, #255	; 0xff
 80006c0:	d069      	beq.n	8000796 <__aeabi_fadd+0x18e>
 80006c2:	001a      	movs	r2, r3
 80006c4:	e0aa      	b.n	800081c <__aeabi_fadd+0x214>
 80006c6:	1be9      	subs	r1, r5, r7
 80006c8:	2900      	cmp	r1, #0
 80006ca:	dd70      	ble.n	80007ae <__aeabi_fadd+0x1a6>
 80006cc:	2f00      	cmp	r7, #0
 80006ce:	d037      	beq.n	8000740 <__aeabi_fadd+0x138>
 80006d0:	2dff      	cmp	r5, #255	; 0xff
 80006d2:	d062      	beq.n	800079a <__aeabi_fadd+0x192>
 80006d4:	2380      	movs	r3, #128	; 0x80
 80006d6:	04db      	lsls	r3, r3, #19
 80006d8:	431e      	orrs	r6, r3
 80006da:	291b      	cmp	r1, #27
 80006dc:	dc00      	bgt.n	80006e0 <__aeabi_fadd+0xd8>
 80006de:	e0b0      	b.n	8000842 <__aeabi_fadd+0x23a>
 80006e0:	2001      	movs	r0, #1
 80006e2:	4440      	add	r0, r8
 80006e4:	0143      	lsls	r3, r0, #5
 80006e6:	d543      	bpl.n	8000770 <__aeabi_fadd+0x168>
 80006e8:	3501      	adds	r5, #1
 80006ea:	2dff      	cmp	r5, #255	; 0xff
 80006ec:	d033      	beq.n	8000756 <__aeabi_fadd+0x14e>
 80006ee:	2301      	movs	r3, #1
 80006f0:	4a93      	ldr	r2, [pc, #588]	; (8000940 <__aeabi_fadd+0x338>)
 80006f2:	4003      	ands	r3, r0
 80006f4:	0840      	lsrs	r0, r0, #1
 80006f6:	4010      	ands	r0, r2
 80006f8:	4318      	orrs	r0, r3
 80006fa:	e7b9      	b.n	8000670 <__aeabi_fadd+0x68>
 80006fc:	2e00      	cmp	r6, #0
 80006fe:	d100      	bne.n	8000702 <__aeabi_fadd+0xfa>
 8000700:	e083      	b.n	800080a <__aeabi_fadd+0x202>
 8000702:	1e51      	subs	r1, r2, #1
 8000704:	2a01      	cmp	r2, #1
 8000706:	d100      	bne.n	800070a <__aeabi_fadd+0x102>
 8000708:	e0d8      	b.n	80008bc <__aeabi_fadd+0x2b4>
 800070a:	2aff      	cmp	r2, #255	; 0xff
 800070c:	d045      	beq.n	800079a <__aeabi_fadd+0x192>
 800070e:	000a      	movs	r2, r1
 8000710:	e798      	b.n	8000644 <__aeabi_fadd+0x3c>
 8000712:	27fe      	movs	r7, #254	; 0xfe
 8000714:	1c6a      	adds	r2, r5, #1
 8000716:	4217      	tst	r7, r2
 8000718:	d000      	beq.n	800071c <__aeabi_fadd+0x114>
 800071a:	e086      	b.n	800082a <__aeabi_fadd+0x222>
 800071c:	2d00      	cmp	r5, #0
 800071e:	d000      	beq.n	8000722 <__aeabi_fadd+0x11a>
 8000720:	e0b7      	b.n	8000892 <__aeabi_fadd+0x28a>
 8000722:	4643      	mov	r3, r8
 8000724:	2b00      	cmp	r3, #0
 8000726:	d100      	bne.n	800072a <__aeabi_fadd+0x122>
 8000728:	e0f3      	b.n	8000912 <__aeabi_fadd+0x30a>
 800072a:	2200      	movs	r2, #0
 800072c:	2e00      	cmp	r6, #0
 800072e:	d0b0      	beq.n	8000692 <__aeabi_fadd+0x8a>
 8000730:	1b98      	subs	r0, r3, r6
 8000732:	0143      	lsls	r3, r0, #5
 8000734:	d400      	bmi.n	8000738 <__aeabi_fadd+0x130>
 8000736:	e0fa      	b.n	800092e <__aeabi_fadd+0x326>
 8000738:	4643      	mov	r3, r8
 800073a:	000c      	movs	r4, r1
 800073c:	1af0      	subs	r0, r6, r3
 800073e:	e797      	b.n	8000670 <__aeabi_fadd+0x68>
 8000740:	2e00      	cmp	r6, #0
 8000742:	d100      	bne.n	8000746 <__aeabi_fadd+0x13e>
 8000744:	e0c8      	b.n	80008d8 <__aeabi_fadd+0x2d0>
 8000746:	1e4a      	subs	r2, r1, #1
 8000748:	2901      	cmp	r1, #1
 800074a:	d100      	bne.n	800074e <__aeabi_fadd+0x146>
 800074c:	e0ae      	b.n	80008ac <__aeabi_fadd+0x2a4>
 800074e:	29ff      	cmp	r1, #255	; 0xff
 8000750:	d023      	beq.n	800079a <__aeabi_fadd+0x192>
 8000752:	0011      	movs	r1, r2
 8000754:	e7c1      	b.n	80006da <__aeabi_fadd+0xd2>
 8000756:	2300      	movs	r3, #0
 8000758:	22ff      	movs	r2, #255	; 0xff
 800075a:	469c      	mov	ip, r3
 800075c:	e799      	b.n	8000692 <__aeabi_fadd+0x8a>
 800075e:	21fe      	movs	r1, #254	; 0xfe
 8000760:	1c6a      	adds	r2, r5, #1
 8000762:	4211      	tst	r1, r2
 8000764:	d077      	beq.n	8000856 <__aeabi_fadd+0x24e>
 8000766:	2aff      	cmp	r2, #255	; 0xff
 8000768:	d0f5      	beq.n	8000756 <__aeabi_fadd+0x14e>
 800076a:	0015      	movs	r5, r2
 800076c:	4446      	add	r6, r8
 800076e:	0870      	lsrs	r0, r6, #1
 8000770:	0743      	lsls	r3, r0, #29
 8000772:	d000      	beq.n	8000776 <__aeabi_fadd+0x16e>
 8000774:	e77e      	b.n	8000674 <__aeabi_fadd+0x6c>
 8000776:	08c3      	lsrs	r3, r0, #3
 8000778:	2dff      	cmp	r5, #255	; 0xff
 800077a:	d00e      	beq.n	800079a <__aeabi_fadd+0x192>
 800077c:	025b      	lsls	r3, r3, #9
 800077e:	0a5b      	lsrs	r3, r3, #9
 8000780:	469c      	mov	ip, r3
 8000782:	b2ea      	uxtb	r2, r5
 8000784:	e785      	b.n	8000692 <__aeabi_fadd+0x8a>
 8000786:	2e00      	cmp	r6, #0
 8000788:	d007      	beq.n	800079a <__aeabi_fadd+0x192>
 800078a:	2280      	movs	r2, #128	; 0x80
 800078c:	03d2      	lsls	r2, r2, #15
 800078e:	4213      	tst	r3, r2
 8000790:	d003      	beq.n	800079a <__aeabi_fadd+0x192>
 8000792:	4210      	tst	r0, r2
 8000794:	d101      	bne.n	800079a <__aeabi_fadd+0x192>
 8000796:	000c      	movs	r4, r1
 8000798:	0003      	movs	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d0db      	beq.n	8000756 <__aeabi_fadd+0x14e>
 800079e:	2080      	movs	r0, #128	; 0x80
 80007a0:	03c0      	lsls	r0, r0, #15
 80007a2:	4318      	orrs	r0, r3
 80007a4:	0240      	lsls	r0, r0, #9
 80007a6:	0a43      	lsrs	r3, r0, #9
 80007a8:	469c      	mov	ip, r3
 80007aa:	22ff      	movs	r2, #255	; 0xff
 80007ac:	e771      	b.n	8000692 <__aeabi_fadd+0x8a>
 80007ae:	2900      	cmp	r1, #0
 80007b0:	d0d5      	beq.n	800075e <__aeabi_fadd+0x156>
 80007b2:	1b7a      	subs	r2, r7, r5
 80007b4:	2d00      	cmp	r5, #0
 80007b6:	d160      	bne.n	800087a <__aeabi_fadd+0x272>
 80007b8:	4643      	mov	r3, r8
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d024      	beq.n	8000808 <__aeabi_fadd+0x200>
 80007be:	1e53      	subs	r3, r2, #1
 80007c0:	2a01      	cmp	r2, #1
 80007c2:	d073      	beq.n	80008ac <__aeabi_fadd+0x2a4>
 80007c4:	2aff      	cmp	r2, #255	; 0xff
 80007c6:	d0e7      	beq.n	8000798 <__aeabi_fadd+0x190>
 80007c8:	001a      	movs	r2, r3
 80007ca:	2a1b      	cmp	r2, #27
 80007cc:	dc00      	bgt.n	80007d0 <__aeabi_fadd+0x1c8>
 80007ce:	e085      	b.n	80008dc <__aeabi_fadd+0x2d4>
 80007d0:	2001      	movs	r0, #1
 80007d2:	003d      	movs	r5, r7
 80007d4:	1980      	adds	r0, r0, r6
 80007d6:	e785      	b.n	80006e4 <__aeabi_fadd+0xdc>
 80007d8:	2320      	movs	r3, #32
 80007da:	003a      	movs	r2, r7
 80007dc:	1b45      	subs	r5, r0, r5
 80007de:	0038      	movs	r0, r7
 80007e0:	3501      	adds	r5, #1
 80007e2:	40ea      	lsrs	r2, r5
 80007e4:	1b5d      	subs	r5, r3, r5
 80007e6:	40a8      	lsls	r0, r5
 80007e8:	1e43      	subs	r3, r0, #1
 80007ea:	4198      	sbcs	r0, r3
 80007ec:	2500      	movs	r5, #0
 80007ee:	4310      	orrs	r0, r2
 80007f0:	e73e      	b.n	8000670 <__aeabi_fadd+0x68>
 80007f2:	2320      	movs	r3, #32
 80007f4:	0030      	movs	r0, r6
 80007f6:	1a9b      	subs	r3, r3, r2
 80007f8:	0031      	movs	r1, r6
 80007fa:	4098      	lsls	r0, r3
 80007fc:	40d1      	lsrs	r1, r2
 80007fe:	1e43      	subs	r3, r0, #1
 8000800:	4198      	sbcs	r0, r3
 8000802:	4308      	orrs	r0, r1
 8000804:	e722      	b.n	800064c <__aeabi_fadd+0x44>
 8000806:	000c      	movs	r4, r1
 8000808:	0003      	movs	r3, r0
 800080a:	0015      	movs	r5, r2
 800080c:	e7b4      	b.n	8000778 <__aeabi_fadd+0x170>
 800080e:	2fff      	cmp	r7, #255	; 0xff
 8000810:	d0c1      	beq.n	8000796 <__aeabi_fadd+0x18e>
 8000812:	2380      	movs	r3, #128	; 0x80
 8000814:	4640      	mov	r0, r8
 8000816:	04db      	lsls	r3, r3, #19
 8000818:	4318      	orrs	r0, r3
 800081a:	4680      	mov	r8, r0
 800081c:	2a1b      	cmp	r2, #27
 800081e:	dd51      	ble.n	80008c4 <__aeabi_fadd+0x2bc>
 8000820:	2001      	movs	r0, #1
 8000822:	000c      	movs	r4, r1
 8000824:	003d      	movs	r5, r7
 8000826:	1a30      	subs	r0, r6, r0
 8000828:	e712      	b.n	8000650 <__aeabi_fadd+0x48>
 800082a:	4643      	mov	r3, r8
 800082c:	1b9f      	subs	r7, r3, r6
 800082e:	017b      	lsls	r3, r7, #5
 8000830:	d42b      	bmi.n	800088a <__aeabi_fadd+0x282>
 8000832:	2f00      	cmp	r7, #0
 8000834:	d000      	beq.n	8000838 <__aeabi_fadd+0x230>
 8000836:	e710      	b.n	800065a <__aeabi_fadd+0x52>
 8000838:	2300      	movs	r3, #0
 800083a:	2400      	movs	r4, #0
 800083c:	2200      	movs	r2, #0
 800083e:	469c      	mov	ip, r3
 8000840:	e727      	b.n	8000692 <__aeabi_fadd+0x8a>
 8000842:	2320      	movs	r3, #32
 8000844:	0032      	movs	r2, r6
 8000846:	0030      	movs	r0, r6
 8000848:	40ca      	lsrs	r2, r1
 800084a:	1a59      	subs	r1, r3, r1
 800084c:	4088      	lsls	r0, r1
 800084e:	1e43      	subs	r3, r0, #1
 8000850:	4198      	sbcs	r0, r3
 8000852:	4310      	orrs	r0, r2
 8000854:	e745      	b.n	80006e2 <__aeabi_fadd+0xda>
 8000856:	2d00      	cmp	r5, #0
 8000858:	d14a      	bne.n	80008f0 <__aeabi_fadd+0x2e8>
 800085a:	4643      	mov	r3, r8
 800085c:	2b00      	cmp	r3, #0
 800085e:	d063      	beq.n	8000928 <__aeabi_fadd+0x320>
 8000860:	2200      	movs	r2, #0
 8000862:	2e00      	cmp	r6, #0
 8000864:	d100      	bne.n	8000868 <__aeabi_fadd+0x260>
 8000866:	e714      	b.n	8000692 <__aeabi_fadd+0x8a>
 8000868:	0030      	movs	r0, r6
 800086a:	4440      	add	r0, r8
 800086c:	0143      	lsls	r3, r0, #5
 800086e:	d400      	bmi.n	8000872 <__aeabi_fadd+0x26a>
 8000870:	e77e      	b.n	8000770 <__aeabi_fadd+0x168>
 8000872:	4b32      	ldr	r3, [pc, #200]	; (800093c <__aeabi_fadd+0x334>)
 8000874:	3501      	adds	r5, #1
 8000876:	4018      	ands	r0, r3
 8000878:	e77a      	b.n	8000770 <__aeabi_fadd+0x168>
 800087a:	2fff      	cmp	r7, #255	; 0xff
 800087c:	d08c      	beq.n	8000798 <__aeabi_fadd+0x190>
 800087e:	2380      	movs	r3, #128	; 0x80
 8000880:	4641      	mov	r1, r8
 8000882:	04db      	lsls	r3, r3, #19
 8000884:	4319      	orrs	r1, r3
 8000886:	4688      	mov	r8, r1
 8000888:	e79f      	b.n	80007ca <__aeabi_fadd+0x1c2>
 800088a:	4643      	mov	r3, r8
 800088c:	000c      	movs	r4, r1
 800088e:	1af7      	subs	r7, r6, r3
 8000890:	e6e3      	b.n	800065a <__aeabi_fadd+0x52>
 8000892:	4642      	mov	r2, r8
 8000894:	2a00      	cmp	r2, #0
 8000896:	d000      	beq.n	800089a <__aeabi_fadd+0x292>
 8000898:	e775      	b.n	8000786 <__aeabi_fadd+0x17e>
 800089a:	2e00      	cmp	r6, #0
 800089c:	d000      	beq.n	80008a0 <__aeabi_fadd+0x298>
 800089e:	e77a      	b.n	8000796 <__aeabi_fadd+0x18e>
 80008a0:	2380      	movs	r3, #128	; 0x80
 80008a2:	03db      	lsls	r3, r3, #15
 80008a4:	2400      	movs	r4, #0
 80008a6:	469c      	mov	ip, r3
 80008a8:	22ff      	movs	r2, #255	; 0xff
 80008aa:	e6f2      	b.n	8000692 <__aeabi_fadd+0x8a>
 80008ac:	0030      	movs	r0, r6
 80008ae:	4440      	add	r0, r8
 80008b0:	2501      	movs	r5, #1
 80008b2:	0143      	lsls	r3, r0, #5
 80008b4:	d400      	bmi.n	80008b8 <__aeabi_fadd+0x2b0>
 80008b6:	e75b      	b.n	8000770 <__aeabi_fadd+0x168>
 80008b8:	2502      	movs	r5, #2
 80008ba:	e718      	b.n	80006ee <__aeabi_fadd+0xe6>
 80008bc:	4643      	mov	r3, r8
 80008be:	2501      	movs	r5, #1
 80008c0:	1b98      	subs	r0, r3, r6
 80008c2:	e6c5      	b.n	8000650 <__aeabi_fadd+0x48>
 80008c4:	2320      	movs	r3, #32
 80008c6:	4644      	mov	r4, r8
 80008c8:	4640      	mov	r0, r8
 80008ca:	40d4      	lsrs	r4, r2
 80008cc:	1a9a      	subs	r2, r3, r2
 80008ce:	4090      	lsls	r0, r2
 80008d0:	1e43      	subs	r3, r0, #1
 80008d2:	4198      	sbcs	r0, r3
 80008d4:	4320      	orrs	r0, r4
 80008d6:	e7a4      	b.n	8000822 <__aeabi_fadd+0x21a>
 80008d8:	000d      	movs	r5, r1
 80008da:	e74d      	b.n	8000778 <__aeabi_fadd+0x170>
 80008dc:	2320      	movs	r3, #32
 80008de:	4641      	mov	r1, r8
 80008e0:	4640      	mov	r0, r8
 80008e2:	40d1      	lsrs	r1, r2
 80008e4:	1a9a      	subs	r2, r3, r2
 80008e6:	4090      	lsls	r0, r2
 80008e8:	1e43      	subs	r3, r0, #1
 80008ea:	4198      	sbcs	r0, r3
 80008ec:	4308      	orrs	r0, r1
 80008ee:	e770      	b.n	80007d2 <__aeabi_fadd+0x1ca>
 80008f0:	4642      	mov	r2, r8
 80008f2:	2a00      	cmp	r2, #0
 80008f4:	d100      	bne.n	80008f8 <__aeabi_fadd+0x2f0>
 80008f6:	e74f      	b.n	8000798 <__aeabi_fadd+0x190>
 80008f8:	2e00      	cmp	r6, #0
 80008fa:	d100      	bne.n	80008fe <__aeabi_fadd+0x2f6>
 80008fc:	e74d      	b.n	800079a <__aeabi_fadd+0x192>
 80008fe:	2280      	movs	r2, #128	; 0x80
 8000900:	03d2      	lsls	r2, r2, #15
 8000902:	4213      	tst	r3, r2
 8000904:	d100      	bne.n	8000908 <__aeabi_fadd+0x300>
 8000906:	e748      	b.n	800079a <__aeabi_fadd+0x192>
 8000908:	4210      	tst	r0, r2
 800090a:	d000      	beq.n	800090e <__aeabi_fadd+0x306>
 800090c:	e745      	b.n	800079a <__aeabi_fadd+0x192>
 800090e:	0003      	movs	r3, r0
 8000910:	e743      	b.n	800079a <__aeabi_fadd+0x192>
 8000912:	2e00      	cmp	r6, #0
 8000914:	d090      	beq.n	8000838 <__aeabi_fadd+0x230>
 8000916:	000c      	movs	r4, r1
 8000918:	4684      	mov	ip, r0
 800091a:	2200      	movs	r2, #0
 800091c:	e6b9      	b.n	8000692 <__aeabi_fadd+0x8a>
 800091e:	4643      	mov	r3, r8
 8000920:	000c      	movs	r4, r1
 8000922:	1af0      	subs	r0, r6, r3
 8000924:	3501      	adds	r5, #1
 8000926:	e693      	b.n	8000650 <__aeabi_fadd+0x48>
 8000928:	4684      	mov	ip, r0
 800092a:	2200      	movs	r2, #0
 800092c:	e6b1      	b.n	8000692 <__aeabi_fadd+0x8a>
 800092e:	2800      	cmp	r0, #0
 8000930:	d000      	beq.n	8000934 <__aeabi_fadd+0x32c>
 8000932:	e71d      	b.n	8000770 <__aeabi_fadd+0x168>
 8000934:	2300      	movs	r3, #0
 8000936:	2400      	movs	r4, #0
 8000938:	469c      	mov	ip, r3
 800093a:	e6aa      	b.n	8000692 <__aeabi_fadd+0x8a>
 800093c:	fbffffff 	.word	0xfbffffff
 8000940:	7dffffff 	.word	0x7dffffff

08000944 <__aeabi_fdiv>:
 8000944:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000946:	464f      	mov	r7, r9
 8000948:	4646      	mov	r6, r8
 800094a:	46d6      	mov	lr, sl
 800094c:	0245      	lsls	r5, r0, #9
 800094e:	b5c0      	push	{r6, r7, lr}
 8000950:	0047      	lsls	r7, r0, #1
 8000952:	1c0c      	adds	r4, r1, #0
 8000954:	0a6d      	lsrs	r5, r5, #9
 8000956:	0e3f      	lsrs	r7, r7, #24
 8000958:	0fc6      	lsrs	r6, r0, #31
 800095a:	2f00      	cmp	r7, #0
 800095c:	d100      	bne.n	8000960 <__aeabi_fdiv+0x1c>
 800095e:	e070      	b.n	8000a42 <__aeabi_fdiv+0xfe>
 8000960:	2fff      	cmp	r7, #255	; 0xff
 8000962:	d100      	bne.n	8000966 <__aeabi_fdiv+0x22>
 8000964:	e075      	b.n	8000a52 <__aeabi_fdiv+0x10e>
 8000966:	00eb      	lsls	r3, r5, #3
 8000968:	2580      	movs	r5, #128	; 0x80
 800096a:	04ed      	lsls	r5, r5, #19
 800096c:	431d      	orrs	r5, r3
 800096e:	2300      	movs	r3, #0
 8000970:	4699      	mov	r9, r3
 8000972:	469a      	mov	sl, r3
 8000974:	3f7f      	subs	r7, #127	; 0x7f
 8000976:	0260      	lsls	r0, r4, #9
 8000978:	0a43      	lsrs	r3, r0, #9
 800097a:	4698      	mov	r8, r3
 800097c:	0063      	lsls	r3, r4, #1
 800097e:	0e1b      	lsrs	r3, r3, #24
 8000980:	0fe4      	lsrs	r4, r4, #31
 8000982:	2b00      	cmp	r3, #0
 8000984:	d04e      	beq.n	8000a24 <__aeabi_fdiv+0xe0>
 8000986:	2bff      	cmp	r3, #255	; 0xff
 8000988:	d046      	beq.n	8000a18 <__aeabi_fdiv+0xd4>
 800098a:	4642      	mov	r2, r8
 800098c:	00d0      	lsls	r0, r2, #3
 800098e:	2280      	movs	r2, #128	; 0x80
 8000990:	04d2      	lsls	r2, r2, #19
 8000992:	4302      	orrs	r2, r0
 8000994:	4690      	mov	r8, r2
 8000996:	2200      	movs	r2, #0
 8000998:	3b7f      	subs	r3, #127	; 0x7f
 800099a:	0031      	movs	r1, r6
 800099c:	1aff      	subs	r7, r7, r3
 800099e:	464b      	mov	r3, r9
 80009a0:	4061      	eors	r1, r4
 80009a2:	b2c9      	uxtb	r1, r1
 80009a4:	4313      	orrs	r3, r2
 80009a6:	2b0f      	cmp	r3, #15
 80009a8:	d900      	bls.n	80009ac <__aeabi_fdiv+0x68>
 80009aa:	e0b5      	b.n	8000b18 <__aeabi_fdiv+0x1d4>
 80009ac:	486e      	ldr	r0, [pc, #440]	; (8000b68 <__aeabi_fdiv+0x224>)
 80009ae:	009b      	lsls	r3, r3, #2
 80009b0:	58c3      	ldr	r3, [r0, r3]
 80009b2:	469f      	mov	pc, r3
 80009b4:	2300      	movs	r3, #0
 80009b6:	4698      	mov	r8, r3
 80009b8:	0026      	movs	r6, r4
 80009ba:	4645      	mov	r5, r8
 80009bc:	4692      	mov	sl, r2
 80009be:	4653      	mov	r3, sl
 80009c0:	2b02      	cmp	r3, #2
 80009c2:	d100      	bne.n	80009c6 <__aeabi_fdiv+0x82>
 80009c4:	e089      	b.n	8000ada <__aeabi_fdiv+0x196>
 80009c6:	2b03      	cmp	r3, #3
 80009c8:	d100      	bne.n	80009cc <__aeabi_fdiv+0x88>
 80009ca:	e09e      	b.n	8000b0a <__aeabi_fdiv+0x1c6>
 80009cc:	2b01      	cmp	r3, #1
 80009ce:	d018      	beq.n	8000a02 <__aeabi_fdiv+0xbe>
 80009d0:	003b      	movs	r3, r7
 80009d2:	337f      	adds	r3, #127	; 0x7f
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	dd69      	ble.n	8000aac <__aeabi_fdiv+0x168>
 80009d8:	076a      	lsls	r2, r5, #29
 80009da:	d004      	beq.n	80009e6 <__aeabi_fdiv+0xa2>
 80009dc:	220f      	movs	r2, #15
 80009de:	402a      	ands	r2, r5
 80009e0:	2a04      	cmp	r2, #4
 80009e2:	d000      	beq.n	80009e6 <__aeabi_fdiv+0xa2>
 80009e4:	3504      	adds	r5, #4
 80009e6:	012a      	lsls	r2, r5, #4
 80009e8:	d503      	bpl.n	80009f2 <__aeabi_fdiv+0xae>
 80009ea:	4b60      	ldr	r3, [pc, #384]	; (8000b6c <__aeabi_fdiv+0x228>)
 80009ec:	401d      	ands	r5, r3
 80009ee:	003b      	movs	r3, r7
 80009f0:	3380      	adds	r3, #128	; 0x80
 80009f2:	2bfe      	cmp	r3, #254	; 0xfe
 80009f4:	dd00      	ble.n	80009f8 <__aeabi_fdiv+0xb4>
 80009f6:	e070      	b.n	8000ada <__aeabi_fdiv+0x196>
 80009f8:	01ad      	lsls	r5, r5, #6
 80009fa:	0a6d      	lsrs	r5, r5, #9
 80009fc:	b2d8      	uxtb	r0, r3
 80009fe:	e002      	b.n	8000a06 <__aeabi_fdiv+0xc2>
 8000a00:	000e      	movs	r6, r1
 8000a02:	2000      	movs	r0, #0
 8000a04:	2500      	movs	r5, #0
 8000a06:	05c0      	lsls	r0, r0, #23
 8000a08:	4328      	orrs	r0, r5
 8000a0a:	07f6      	lsls	r6, r6, #31
 8000a0c:	4330      	orrs	r0, r6
 8000a0e:	bce0      	pop	{r5, r6, r7}
 8000a10:	46ba      	mov	sl, r7
 8000a12:	46b1      	mov	r9, r6
 8000a14:	46a8      	mov	r8, r5
 8000a16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a18:	4643      	mov	r3, r8
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d13f      	bne.n	8000a9e <__aeabi_fdiv+0x15a>
 8000a1e:	2202      	movs	r2, #2
 8000a20:	3fff      	subs	r7, #255	; 0xff
 8000a22:	e003      	b.n	8000a2c <__aeabi_fdiv+0xe8>
 8000a24:	4643      	mov	r3, r8
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d12d      	bne.n	8000a86 <__aeabi_fdiv+0x142>
 8000a2a:	2201      	movs	r2, #1
 8000a2c:	0031      	movs	r1, r6
 8000a2e:	464b      	mov	r3, r9
 8000a30:	4061      	eors	r1, r4
 8000a32:	b2c9      	uxtb	r1, r1
 8000a34:	4313      	orrs	r3, r2
 8000a36:	2b0f      	cmp	r3, #15
 8000a38:	d834      	bhi.n	8000aa4 <__aeabi_fdiv+0x160>
 8000a3a:	484d      	ldr	r0, [pc, #308]	; (8000b70 <__aeabi_fdiv+0x22c>)
 8000a3c:	009b      	lsls	r3, r3, #2
 8000a3e:	58c3      	ldr	r3, [r0, r3]
 8000a40:	469f      	mov	pc, r3
 8000a42:	2d00      	cmp	r5, #0
 8000a44:	d113      	bne.n	8000a6e <__aeabi_fdiv+0x12a>
 8000a46:	2304      	movs	r3, #4
 8000a48:	4699      	mov	r9, r3
 8000a4a:	3b03      	subs	r3, #3
 8000a4c:	2700      	movs	r7, #0
 8000a4e:	469a      	mov	sl, r3
 8000a50:	e791      	b.n	8000976 <__aeabi_fdiv+0x32>
 8000a52:	2d00      	cmp	r5, #0
 8000a54:	d105      	bne.n	8000a62 <__aeabi_fdiv+0x11e>
 8000a56:	2308      	movs	r3, #8
 8000a58:	4699      	mov	r9, r3
 8000a5a:	3b06      	subs	r3, #6
 8000a5c:	27ff      	movs	r7, #255	; 0xff
 8000a5e:	469a      	mov	sl, r3
 8000a60:	e789      	b.n	8000976 <__aeabi_fdiv+0x32>
 8000a62:	230c      	movs	r3, #12
 8000a64:	4699      	mov	r9, r3
 8000a66:	3b09      	subs	r3, #9
 8000a68:	27ff      	movs	r7, #255	; 0xff
 8000a6a:	469a      	mov	sl, r3
 8000a6c:	e783      	b.n	8000976 <__aeabi_fdiv+0x32>
 8000a6e:	0028      	movs	r0, r5
 8000a70:	f002 fa02 	bl	8002e78 <__clzsi2>
 8000a74:	2776      	movs	r7, #118	; 0x76
 8000a76:	1f43      	subs	r3, r0, #5
 8000a78:	409d      	lsls	r5, r3
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	427f      	negs	r7, r7
 8000a7e:	4699      	mov	r9, r3
 8000a80:	469a      	mov	sl, r3
 8000a82:	1a3f      	subs	r7, r7, r0
 8000a84:	e777      	b.n	8000976 <__aeabi_fdiv+0x32>
 8000a86:	4640      	mov	r0, r8
 8000a88:	f002 f9f6 	bl	8002e78 <__clzsi2>
 8000a8c:	4642      	mov	r2, r8
 8000a8e:	1f43      	subs	r3, r0, #5
 8000a90:	409a      	lsls	r2, r3
 8000a92:	2376      	movs	r3, #118	; 0x76
 8000a94:	425b      	negs	r3, r3
 8000a96:	4690      	mov	r8, r2
 8000a98:	1a1b      	subs	r3, r3, r0
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	e77d      	b.n	800099a <__aeabi_fdiv+0x56>
 8000a9e:	23ff      	movs	r3, #255	; 0xff
 8000aa0:	2203      	movs	r2, #3
 8000aa2:	e77a      	b.n	800099a <__aeabi_fdiv+0x56>
 8000aa4:	000e      	movs	r6, r1
 8000aa6:	20ff      	movs	r0, #255	; 0xff
 8000aa8:	2500      	movs	r5, #0
 8000aaa:	e7ac      	b.n	8000a06 <__aeabi_fdiv+0xc2>
 8000aac:	2001      	movs	r0, #1
 8000aae:	1ac0      	subs	r0, r0, r3
 8000ab0:	281b      	cmp	r0, #27
 8000ab2:	dca6      	bgt.n	8000a02 <__aeabi_fdiv+0xbe>
 8000ab4:	379e      	adds	r7, #158	; 0x9e
 8000ab6:	002a      	movs	r2, r5
 8000ab8:	40bd      	lsls	r5, r7
 8000aba:	40c2      	lsrs	r2, r0
 8000abc:	1e6b      	subs	r3, r5, #1
 8000abe:	419d      	sbcs	r5, r3
 8000ac0:	4315      	orrs	r5, r2
 8000ac2:	076b      	lsls	r3, r5, #29
 8000ac4:	d004      	beq.n	8000ad0 <__aeabi_fdiv+0x18c>
 8000ac6:	230f      	movs	r3, #15
 8000ac8:	402b      	ands	r3, r5
 8000aca:	2b04      	cmp	r3, #4
 8000acc:	d000      	beq.n	8000ad0 <__aeabi_fdiv+0x18c>
 8000ace:	3504      	adds	r5, #4
 8000ad0:	016b      	lsls	r3, r5, #5
 8000ad2:	d544      	bpl.n	8000b5e <__aeabi_fdiv+0x21a>
 8000ad4:	2001      	movs	r0, #1
 8000ad6:	2500      	movs	r5, #0
 8000ad8:	e795      	b.n	8000a06 <__aeabi_fdiv+0xc2>
 8000ada:	20ff      	movs	r0, #255	; 0xff
 8000adc:	2500      	movs	r5, #0
 8000ade:	e792      	b.n	8000a06 <__aeabi_fdiv+0xc2>
 8000ae0:	2580      	movs	r5, #128	; 0x80
 8000ae2:	2600      	movs	r6, #0
 8000ae4:	20ff      	movs	r0, #255	; 0xff
 8000ae6:	03ed      	lsls	r5, r5, #15
 8000ae8:	e78d      	b.n	8000a06 <__aeabi_fdiv+0xc2>
 8000aea:	2300      	movs	r3, #0
 8000aec:	4698      	mov	r8, r3
 8000aee:	2080      	movs	r0, #128	; 0x80
 8000af0:	03c0      	lsls	r0, r0, #15
 8000af2:	4205      	tst	r5, r0
 8000af4:	d009      	beq.n	8000b0a <__aeabi_fdiv+0x1c6>
 8000af6:	4643      	mov	r3, r8
 8000af8:	4203      	tst	r3, r0
 8000afa:	d106      	bne.n	8000b0a <__aeabi_fdiv+0x1c6>
 8000afc:	4645      	mov	r5, r8
 8000afe:	4305      	orrs	r5, r0
 8000b00:	026d      	lsls	r5, r5, #9
 8000b02:	0026      	movs	r6, r4
 8000b04:	20ff      	movs	r0, #255	; 0xff
 8000b06:	0a6d      	lsrs	r5, r5, #9
 8000b08:	e77d      	b.n	8000a06 <__aeabi_fdiv+0xc2>
 8000b0a:	2080      	movs	r0, #128	; 0x80
 8000b0c:	03c0      	lsls	r0, r0, #15
 8000b0e:	4305      	orrs	r5, r0
 8000b10:	026d      	lsls	r5, r5, #9
 8000b12:	20ff      	movs	r0, #255	; 0xff
 8000b14:	0a6d      	lsrs	r5, r5, #9
 8000b16:	e776      	b.n	8000a06 <__aeabi_fdiv+0xc2>
 8000b18:	4642      	mov	r2, r8
 8000b1a:	016b      	lsls	r3, r5, #5
 8000b1c:	0150      	lsls	r0, r2, #5
 8000b1e:	4283      	cmp	r3, r0
 8000b20:	d219      	bcs.n	8000b56 <__aeabi_fdiv+0x212>
 8000b22:	221b      	movs	r2, #27
 8000b24:	2500      	movs	r5, #0
 8000b26:	3f01      	subs	r7, #1
 8000b28:	2601      	movs	r6, #1
 8000b2a:	001c      	movs	r4, r3
 8000b2c:	006d      	lsls	r5, r5, #1
 8000b2e:	005b      	lsls	r3, r3, #1
 8000b30:	2c00      	cmp	r4, #0
 8000b32:	db01      	blt.n	8000b38 <__aeabi_fdiv+0x1f4>
 8000b34:	4298      	cmp	r0, r3
 8000b36:	d801      	bhi.n	8000b3c <__aeabi_fdiv+0x1f8>
 8000b38:	1a1b      	subs	r3, r3, r0
 8000b3a:	4335      	orrs	r5, r6
 8000b3c:	3a01      	subs	r2, #1
 8000b3e:	2a00      	cmp	r2, #0
 8000b40:	d1f3      	bne.n	8000b2a <__aeabi_fdiv+0x1e6>
 8000b42:	1e5a      	subs	r2, r3, #1
 8000b44:	4193      	sbcs	r3, r2
 8000b46:	431d      	orrs	r5, r3
 8000b48:	003b      	movs	r3, r7
 8000b4a:	337f      	adds	r3, #127	; 0x7f
 8000b4c:	000e      	movs	r6, r1
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	dd00      	ble.n	8000b54 <__aeabi_fdiv+0x210>
 8000b52:	e741      	b.n	80009d8 <__aeabi_fdiv+0x94>
 8000b54:	e7aa      	b.n	8000aac <__aeabi_fdiv+0x168>
 8000b56:	221a      	movs	r2, #26
 8000b58:	2501      	movs	r5, #1
 8000b5a:	1a1b      	subs	r3, r3, r0
 8000b5c:	e7e4      	b.n	8000b28 <__aeabi_fdiv+0x1e4>
 8000b5e:	01ad      	lsls	r5, r5, #6
 8000b60:	2000      	movs	r0, #0
 8000b62:	0a6d      	lsrs	r5, r5, #9
 8000b64:	e74f      	b.n	8000a06 <__aeabi_fdiv+0xc2>
 8000b66:	46c0      	nop			; (mov r8, r8)
 8000b68:	0800de60 	.word	0x0800de60
 8000b6c:	f7ffffff 	.word	0xf7ffffff
 8000b70:	0800dea0 	.word	0x0800dea0

08000b74 <__eqsf2>:
 8000b74:	b570      	push	{r4, r5, r6, lr}
 8000b76:	0042      	lsls	r2, r0, #1
 8000b78:	0245      	lsls	r5, r0, #9
 8000b7a:	024e      	lsls	r6, r1, #9
 8000b7c:	004c      	lsls	r4, r1, #1
 8000b7e:	0fc3      	lsrs	r3, r0, #31
 8000b80:	0a6d      	lsrs	r5, r5, #9
 8000b82:	2001      	movs	r0, #1
 8000b84:	0e12      	lsrs	r2, r2, #24
 8000b86:	0a76      	lsrs	r6, r6, #9
 8000b88:	0e24      	lsrs	r4, r4, #24
 8000b8a:	0fc9      	lsrs	r1, r1, #31
 8000b8c:	2aff      	cmp	r2, #255	; 0xff
 8000b8e:	d006      	beq.n	8000b9e <__eqsf2+0x2a>
 8000b90:	2cff      	cmp	r4, #255	; 0xff
 8000b92:	d003      	beq.n	8000b9c <__eqsf2+0x28>
 8000b94:	42a2      	cmp	r2, r4
 8000b96:	d101      	bne.n	8000b9c <__eqsf2+0x28>
 8000b98:	42b5      	cmp	r5, r6
 8000b9a:	d006      	beq.n	8000baa <__eqsf2+0x36>
 8000b9c:	bd70      	pop	{r4, r5, r6, pc}
 8000b9e:	2d00      	cmp	r5, #0
 8000ba0:	d1fc      	bne.n	8000b9c <__eqsf2+0x28>
 8000ba2:	2cff      	cmp	r4, #255	; 0xff
 8000ba4:	d1fa      	bne.n	8000b9c <__eqsf2+0x28>
 8000ba6:	2e00      	cmp	r6, #0
 8000ba8:	d1f8      	bne.n	8000b9c <__eqsf2+0x28>
 8000baa:	428b      	cmp	r3, r1
 8000bac:	d006      	beq.n	8000bbc <__eqsf2+0x48>
 8000bae:	2001      	movs	r0, #1
 8000bb0:	2a00      	cmp	r2, #0
 8000bb2:	d1f3      	bne.n	8000b9c <__eqsf2+0x28>
 8000bb4:	0028      	movs	r0, r5
 8000bb6:	1e43      	subs	r3, r0, #1
 8000bb8:	4198      	sbcs	r0, r3
 8000bba:	e7ef      	b.n	8000b9c <__eqsf2+0x28>
 8000bbc:	2000      	movs	r0, #0
 8000bbe:	e7ed      	b.n	8000b9c <__eqsf2+0x28>

08000bc0 <__gesf2>:
 8000bc0:	b570      	push	{r4, r5, r6, lr}
 8000bc2:	0042      	lsls	r2, r0, #1
 8000bc4:	0245      	lsls	r5, r0, #9
 8000bc6:	024e      	lsls	r6, r1, #9
 8000bc8:	004c      	lsls	r4, r1, #1
 8000bca:	0fc3      	lsrs	r3, r0, #31
 8000bcc:	0a6d      	lsrs	r5, r5, #9
 8000bce:	0e12      	lsrs	r2, r2, #24
 8000bd0:	0a76      	lsrs	r6, r6, #9
 8000bd2:	0e24      	lsrs	r4, r4, #24
 8000bd4:	0fc8      	lsrs	r0, r1, #31
 8000bd6:	2aff      	cmp	r2, #255	; 0xff
 8000bd8:	d01b      	beq.n	8000c12 <__gesf2+0x52>
 8000bda:	2cff      	cmp	r4, #255	; 0xff
 8000bdc:	d00e      	beq.n	8000bfc <__gesf2+0x3c>
 8000bde:	2a00      	cmp	r2, #0
 8000be0:	d11b      	bne.n	8000c1a <__gesf2+0x5a>
 8000be2:	2c00      	cmp	r4, #0
 8000be4:	d101      	bne.n	8000bea <__gesf2+0x2a>
 8000be6:	2e00      	cmp	r6, #0
 8000be8:	d01c      	beq.n	8000c24 <__gesf2+0x64>
 8000bea:	2d00      	cmp	r5, #0
 8000bec:	d00c      	beq.n	8000c08 <__gesf2+0x48>
 8000bee:	4283      	cmp	r3, r0
 8000bf0:	d01c      	beq.n	8000c2c <__gesf2+0x6c>
 8000bf2:	2102      	movs	r1, #2
 8000bf4:	1e58      	subs	r0, r3, #1
 8000bf6:	4008      	ands	r0, r1
 8000bf8:	3801      	subs	r0, #1
 8000bfa:	bd70      	pop	{r4, r5, r6, pc}
 8000bfc:	2e00      	cmp	r6, #0
 8000bfe:	d122      	bne.n	8000c46 <__gesf2+0x86>
 8000c00:	2a00      	cmp	r2, #0
 8000c02:	d1f4      	bne.n	8000bee <__gesf2+0x2e>
 8000c04:	2d00      	cmp	r5, #0
 8000c06:	d1f2      	bne.n	8000bee <__gesf2+0x2e>
 8000c08:	2800      	cmp	r0, #0
 8000c0a:	d1f6      	bne.n	8000bfa <__gesf2+0x3a>
 8000c0c:	2001      	movs	r0, #1
 8000c0e:	4240      	negs	r0, r0
 8000c10:	e7f3      	b.n	8000bfa <__gesf2+0x3a>
 8000c12:	2d00      	cmp	r5, #0
 8000c14:	d117      	bne.n	8000c46 <__gesf2+0x86>
 8000c16:	2cff      	cmp	r4, #255	; 0xff
 8000c18:	d0f0      	beq.n	8000bfc <__gesf2+0x3c>
 8000c1a:	2c00      	cmp	r4, #0
 8000c1c:	d1e7      	bne.n	8000bee <__gesf2+0x2e>
 8000c1e:	2e00      	cmp	r6, #0
 8000c20:	d1e5      	bne.n	8000bee <__gesf2+0x2e>
 8000c22:	e7e6      	b.n	8000bf2 <__gesf2+0x32>
 8000c24:	2000      	movs	r0, #0
 8000c26:	2d00      	cmp	r5, #0
 8000c28:	d0e7      	beq.n	8000bfa <__gesf2+0x3a>
 8000c2a:	e7e2      	b.n	8000bf2 <__gesf2+0x32>
 8000c2c:	42a2      	cmp	r2, r4
 8000c2e:	dc05      	bgt.n	8000c3c <__gesf2+0x7c>
 8000c30:	dbea      	blt.n	8000c08 <__gesf2+0x48>
 8000c32:	42b5      	cmp	r5, r6
 8000c34:	d802      	bhi.n	8000c3c <__gesf2+0x7c>
 8000c36:	d3e7      	bcc.n	8000c08 <__gesf2+0x48>
 8000c38:	2000      	movs	r0, #0
 8000c3a:	e7de      	b.n	8000bfa <__gesf2+0x3a>
 8000c3c:	4243      	negs	r3, r0
 8000c3e:	4158      	adcs	r0, r3
 8000c40:	0040      	lsls	r0, r0, #1
 8000c42:	3801      	subs	r0, #1
 8000c44:	e7d9      	b.n	8000bfa <__gesf2+0x3a>
 8000c46:	2002      	movs	r0, #2
 8000c48:	4240      	negs	r0, r0
 8000c4a:	e7d6      	b.n	8000bfa <__gesf2+0x3a>

08000c4c <__lesf2>:
 8000c4c:	b570      	push	{r4, r5, r6, lr}
 8000c4e:	0042      	lsls	r2, r0, #1
 8000c50:	0245      	lsls	r5, r0, #9
 8000c52:	024e      	lsls	r6, r1, #9
 8000c54:	004c      	lsls	r4, r1, #1
 8000c56:	0fc3      	lsrs	r3, r0, #31
 8000c58:	0a6d      	lsrs	r5, r5, #9
 8000c5a:	0e12      	lsrs	r2, r2, #24
 8000c5c:	0a76      	lsrs	r6, r6, #9
 8000c5e:	0e24      	lsrs	r4, r4, #24
 8000c60:	0fc8      	lsrs	r0, r1, #31
 8000c62:	2aff      	cmp	r2, #255	; 0xff
 8000c64:	d00b      	beq.n	8000c7e <__lesf2+0x32>
 8000c66:	2cff      	cmp	r4, #255	; 0xff
 8000c68:	d00d      	beq.n	8000c86 <__lesf2+0x3a>
 8000c6a:	2a00      	cmp	r2, #0
 8000c6c:	d11f      	bne.n	8000cae <__lesf2+0x62>
 8000c6e:	2c00      	cmp	r4, #0
 8000c70:	d116      	bne.n	8000ca0 <__lesf2+0x54>
 8000c72:	2e00      	cmp	r6, #0
 8000c74:	d114      	bne.n	8000ca0 <__lesf2+0x54>
 8000c76:	2000      	movs	r0, #0
 8000c78:	2d00      	cmp	r5, #0
 8000c7a:	d010      	beq.n	8000c9e <__lesf2+0x52>
 8000c7c:	e009      	b.n	8000c92 <__lesf2+0x46>
 8000c7e:	2d00      	cmp	r5, #0
 8000c80:	d10c      	bne.n	8000c9c <__lesf2+0x50>
 8000c82:	2cff      	cmp	r4, #255	; 0xff
 8000c84:	d113      	bne.n	8000cae <__lesf2+0x62>
 8000c86:	2e00      	cmp	r6, #0
 8000c88:	d108      	bne.n	8000c9c <__lesf2+0x50>
 8000c8a:	2a00      	cmp	r2, #0
 8000c8c:	d008      	beq.n	8000ca0 <__lesf2+0x54>
 8000c8e:	4283      	cmp	r3, r0
 8000c90:	d012      	beq.n	8000cb8 <__lesf2+0x6c>
 8000c92:	2102      	movs	r1, #2
 8000c94:	1e58      	subs	r0, r3, #1
 8000c96:	4008      	ands	r0, r1
 8000c98:	3801      	subs	r0, #1
 8000c9a:	e000      	b.n	8000c9e <__lesf2+0x52>
 8000c9c:	2002      	movs	r0, #2
 8000c9e:	bd70      	pop	{r4, r5, r6, pc}
 8000ca0:	2d00      	cmp	r5, #0
 8000ca2:	d1f4      	bne.n	8000c8e <__lesf2+0x42>
 8000ca4:	2800      	cmp	r0, #0
 8000ca6:	d1fa      	bne.n	8000c9e <__lesf2+0x52>
 8000ca8:	2001      	movs	r0, #1
 8000caa:	4240      	negs	r0, r0
 8000cac:	e7f7      	b.n	8000c9e <__lesf2+0x52>
 8000cae:	2c00      	cmp	r4, #0
 8000cb0:	d1ed      	bne.n	8000c8e <__lesf2+0x42>
 8000cb2:	2e00      	cmp	r6, #0
 8000cb4:	d1eb      	bne.n	8000c8e <__lesf2+0x42>
 8000cb6:	e7ec      	b.n	8000c92 <__lesf2+0x46>
 8000cb8:	42a2      	cmp	r2, r4
 8000cba:	dc05      	bgt.n	8000cc8 <__lesf2+0x7c>
 8000cbc:	dbf2      	blt.n	8000ca4 <__lesf2+0x58>
 8000cbe:	42b5      	cmp	r5, r6
 8000cc0:	d802      	bhi.n	8000cc8 <__lesf2+0x7c>
 8000cc2:	d3ef      	bcc.n	8000ca4 <__lesf2+0x58>
 8000cc4:	2000      	movs	r0, #0
 8000cc6:	e7ea      	b.n	8000c9e <__lesf2+0x52>
 8000cc8:	4243      	negs	r3, r0
 8000cca:	4158      	adcs	r0, r3
 8000ccc:	0040      	lsls	r0, r0, #1
 8000cce:	3801      	subs	r0, #1
 8000cd0:	e7e5      	b.n	8000c9e <__lesf2+0x52>
 8000cd2:	46c0      	nop			; (mov r8, r8)

08000cd4 <__aeabi_fsub>:
 8000cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cd6:	46ce      	mov	lr, r9
 8000cd8:	4647      	mov	r7, r8
 8000cda:	0243      	lsls	r3, r0, #9
 8000cdc:	0a5b      	lsrs	r3, r3, #9
 8000cde:	024e      	lsls	r6, r1, #9
 8000ce0:	00da      	lsls	r2, r3, #3
 8000ce2:	4694      	mov	ip, r2
 8000ce4:	0a72      	lsrs	r2, r6, #9
 8000ce6:	4691      	mov	r9, r2
 8000ce8:	0045      	lsls	r5, r0, #1
 8000cea:	004a      	lsls	r2, r1, #1
 8000cec:	b580      	push	{r7, lr}
 8000cee:	0e2d      	lsrs	r5, r5, #24
 8000cf0:	001f      	movs	r7, r3
 8000cf2:	0fc4      	lsrs	r4, r0, #31
 8000cf4:	0e12      	lsrs	r2, r2, #24
 8000cf6:	0fc9      	lsrs	r1, r1, #31
 8000cf8:	09b6      	lsrs	r6, r6, #6
 8000cfa:	2aff      	cmp	r2, #255	; 0xff
 8000cfc:	d05b      	beq.n	8000db6 <__aeabi_fsub+0xe2>
 8000cfe:	2001      	movs	r0, #1
 8000d00:	4041      	eors	r1, r0
 8000d02:	428c      	cmp	r4, r1
 8000d04:	d039      	beq.n	8000d7a <__aeabi_fsub+0xa6>
 8000d06:	1aa8      	subs	r0, r5, r2
 8000d08:	2800      	cmp	r0, #0
 8000d0a:	dd5a      	ble.n	8000dc2 <__aeabi_fsub+0xee>
 8000d0c:	2a00      	cmp	r2, #0
 8000d0e:	d06a      	beq.n	8000de6 <__aeabi_fsub+0x112>
 8000d10:	2dff      	cmp	r5, #255	; 0xff
 8000d12:	d100      	bne.n	8000d16 <__aeabi_fsub+0x42>
 8000d14:	e0d9      	b.n	8000eca <__aeabi_fsub+0x1f6>
 8000d16:	2280      	movs	r2, #128	; 0x80
 8000d18:	04d2      	lsls	r2, r2, #19
 8000d1a:	4316      	orrs	r6, r2
 8000d1c:	281b      	cmp	r0, #27
 8000d1e:	dc00      	bgt.n	8000d22 <__aeabi_fsub+0x4e>
 8000d20:	e0e9      	b.n	8000ef6 <__aeabi_fsub+0x222>
 8000d22:	2001      	movs	r0, #1
 8000d24:	4663      	mov	r3, ip
 8000d26:	1a18      	subs	r0, r3, r0
 8000d28:	0143      	lsls	r3, r0, #5
 8000d2a:	d400      	bmi.n	8000d2e <__aeabi_fsub+0x5a>
 8000d2c:	e0b4      	b.n	8000e98 <__aeabi_fsub+0x1c4>
 8000d2e:	0180      	lsls	r0, r0, #6
 8000d30:	0987      	lsrs	r7, r0, #6
 8000d32:	0038      	movs	r0, r7
 8000d34:	f002 f8a0 	bl	8002e78 <__clzsi2>
 8000d38:	3805      	subs	r0, #5
 8000d3a:	4087      	lsls	r7, r0
 8000d3c:	4285      	cmp	r5, r0
 8000d3e:	dc00      	bgt.n	8000d42 <__aeabi_fsub+0x6e>
 8000d40:	e0cc      	b.n	8000edc <__aeabi_fsub+0x208>
 8000d42:	1a2d      	subs	r5, r5, r0
 8000d44:	48b5      	ldr	r0, [pc, #724]	; (800101c <__aeabi_fsub+0x348>)
 8000d46:	4038      	ands	r0, r7
 8000d48:	0743      	lsls	r3, r0, #29
 8000d4a:	d004      	beq.n	8000d56 <__aeabi_fsub+0x82>
 8000d4c:	230f      	movs	r3, #15
 8000d4e:	4003      	ands	r3, r0
 8000d50:	2b04      	cmp	r3, #4
 8000d52:	d000      	beq.n	8000d56 <__aeabi_fsub+0x82>
 8000d54:	3004      	adds	r0, #4
 8000d56:	0143      	lsls	r3, r0, #5
 8000d58:	d400      	bmi.n	8000d5c <__aeabi_fsub+0x88>
 8000d5a:	e0a0      	b.n	8000e9e <__aeabi_fsub+0x1ca>
 8000d5c:	1c6a      	adds	r2, r5, #1
 8000d5e:	2dfe      	cmp	r5, #254	; 0xfe
 8000d60:	d100      	bne.n	8000d64 <__aeabi_fsub+0x90>
 8000d62:	e08d      	b.n	8000e80 <__aeabi_fsub+0x1ac>
 8000d64:	0180      	lsls	r0, r0, #6
 8000d66:	0a47      	lsrs	r7, r0, #9
 8000d68:	b2d2      	uxtb	r2, r2
 8000d6a:	05d0      	lsls	r0, r2, #23
 8000d6c:	4338      	orrs	r0, r7
 8000d6e:	07e4      	lsls	r4, r4, #31
 8000d70:	4320      	orrs	r0, r4
 8000d72:	bcc0      	pop	{r6, r7}
 8000d74:	46b9      	mov	r9, r7
 8000d76:	46b0      	mov	r8, r6
 8000d78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000d7a:	1aa8      	subs	r0, r5, r2
 8000d7c:	4680      	mov	r8, r0
 8000d7e:	2800      	cmp	r0, #0
 8000d80:	dd45      	ble.n	8000e0e <__aeabi_fsub+0x13a>
 8000d82:	2a00      	cmp	r2, #0
 8000d84:	d070      	beq.n	8000e68 <__aeabi_fsub+0x194>
 8000d86:	2dff      	cmp	r5, #255	; 0xff
 8000d88:	d100      	bne.n	8000d8c <__aeabi_fsub+0xb8>
 8000d8a:	e09e      	b.n	8000eca <__aeabi_fsub+0x1f6>
 8000d8c:	2380      	movs	r3, #128	; 0x80
 8000d8e:	04db      	lsls	r3, r3, #19
 8000d90:	431e      	orrs	r6, r3
 8000d92:	4643      	mov	r3, r8
 8000d94:	2b1b      	cmp	r3, #27
 8000d96:	dc00      	bgt.n	8000d9a <__aeabi_fsub+0xc6>
 8000d98:	e0d2      	b.n	8000f40 <__aeabi_fsub+0x26c>
 8000d9a:	2001      	movs	r0, #1
 8000d9c:	4460      	add	r0, ip
 8000d9e:	0143      	lsls	r3, r0, #5
 8000da0:	d57a      	bpl.n	8000e98 <__aeabi_fsub+0x1c4>
 8000da2:	3501      	adds	r5, #1
 8000da4:	2dff      	cmp	r5, #255	; 0xff
 8000da6:	d06b      	beq.n	8000e80 <__aeabi_fsub+0x1ac>
 8000da8:	2301      	movs	r3, #1
 8000daa:	4a9d      	ldr	r2, [pc, #628]	; (8001020 <__aeabi_fsub+0x34c>)
 8000dac:	4003      	ands	r3, r0
 8000dae:	0840      	lsrs	r0, r0, #1
 8000db0:	4010      	ands	r0, r2
 8000db2:	4318      	orrs	r0, r3
 8000db4:	e7c8      	b.n	8000d48 <__aeabi_fsub+0x74>
 8000db6:	2e00      	cmp	r6, #0
 8000db8:	d020      	beq.n	8000dfc <__aeabi_fsub+0x128>
 8000dba:	428c      	cmp	r4, r1
 8000dbc:	d023      	beq.n	8000e06 <__aeabi_fsub+0x132>
 8000dbe:	0028      	movs	r0, r5
 8000dc0:	38ff      	subs	r0, #255	; 0xff
 8000dc2:	2800      	cmp	r0, #0
 8000dc4:	d039      	beq.n	8000e3a <__aeabi_fsub+0x166>
 8000dc6:	1b57      	subs	r7, r2, r5
 8000dc8:	2d00      	cmp	r5, #0
 8000dca:	d000      	beq.n	8000dce <__aeabi_fsub+0xfa>
 8000dcc:	e09d      	b.n	8000f0a <__aeabi_fsub+0x236>
 8000dce:	4663      	mov	r3, ip
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d100      	bne.n	8000dd6 <__aeabi_fsub+0x102>
 8000dd4:	e0db      	b.n	8000f8e <__aeabi_fsub+0x2ba>
 8000dd6:	1e7b      	subs	r3, r7, #1
 8000dd8:	2f01      	cmp	r7, #1
 8000dda:	d100      	bne.n	8000dde <__aeabi_fsub+0x10a>
 8000ddc:	e10d      	b.n	8000ffa <__aeabi_fsub+0x326>
 8000dde:	2fff      	cmp	r7, #255	; 0xff
 8000de0:	d071      	beq.n	8000ec6 <__aeabi_fsub+0x1f2>
 8000de2:	001f      	movs	r7, r3
 8000de4:	e098      	b.n	8000f18 <__aeabi_fsub+0x244>
 8000de6:	2e00      	cmp	r6, #0
 8000de8:	d100      	bne.n	8000dec <__aeabi_fsub+0x118>
 8000dea:	e0a7      	b.n	8000f3c <__aeabi_fsub+0x268>
 8000dec:	1e42      	subs	r2, r0, #1
 8000dee:	2801      	cmp	r0, #1
 8000df0:	d100      	bne.n	8000df4 <__aeabi_fsub+0x120>
 8000df2:	e0e6      	b.n	8000fc2 <__aeabi_fsub+0x2ee>
 8000df4:	28ff      	cmp	r0, #255	; 0xff
 8000df6:	d068      	beq.n	8000eca <__aeabi_fsub+0x1f6>
 8000df8:	0010      	movs	r0, r2
 8000dfa:	e78f      	b.n	8000d1c <__aeabi_fsub+0x48>
 8000dfc:	2001      	movs	r0, #1
 8000dfe:	4041      	eors	r1, r0
 8000e00:	42a1      	cmp	r1, r4
 8000e02:	d000      	beq.n	8000e06 <__aeabi_fsub+0x132>
 8000e04:	e77f      	b.n	8000d06 <__aeabi_fsub+0x32>
 8000e06:	20ff      	movs	r0, #255	; 0xff
 8000e08:	4240      	negs	r0, r0
 8000e0a:	4680      	mov	r8, r0
 8000e0c:	44a8      	add	r8, r5
 8000e0e:	4640      	mov	r0, r8
 8000e10:	2800      	cmp	r0, #0
 8000e12:	d038      	beq.n	8000e86 <__aeabi_fsub+0x1b2>
 8000e14:	1b51      	subs	r1, r2, r5
 8000e16:	2d00      	cmp	r5, #0
 8000e18:	d100      	bne.n	8000e1c <__aeabi_fsub+0x148>
 8000e1a:	e0ae      	b.n	8000f7a <__aeabi_fsub+0x2a6>
 8000e1c:	2aff      	cmp	r2, #255	; 0xff
 8000e1e:	d100      	bne.n	8000e22 <__aeabi_fsub+0x14e>
 8000e20:	e0df      	b.n	8000fe2 <__aeabi_fsub+0x30e>
 8000e22:	2380      	movs	r3, #128	; 0x80
 8000e24:	4660      	mov	r0, ip
 8000e26:	04db      	lsls	r3, r3, #19
 8000e28:	4318      	orrs	r0, r3
 8000e2a:	4684      	mov	ip, r0
 8000e2c:	291b      	cmp	r1, #27
 8000e2e:	dc00      	bgt.n	8000e32 <__aeabi_fsub+0x15e>
 8000e30:	e0d9      	b.n	8000fe6 <__aeabi_fsub+0x312>
 8000e32:	2001      	movs	r0, #1
 8000e34:	0015      	movs	r5, r2
 8000e36:	1980      	adds	r0, r0, r6
 8000e38:	e7b1      	b.n	8000d9e <__aeabi_fsub+0xca>
 8000e3a:	20fe      	movs	r0, #254	; 0xfe
 8000e3c:	1c6a      	adds	r2, r5, #1
 8000e3e:	4210      	tst	r0, r2
 8000e40:	d171      	bne.n	8000f26 <__aeabi_fsub+0x252>
 8000e42:	2d00      	cmp	r5, #0
 8000e44:	d000      	beq.n	8000e48 <__aeabi_fsub+0x174>
 8000e46:	e0a6      	b.n	8000f96 <__aeabi_fsub+0x2c2>
 8000e48:	4663      	mov	r3, ip
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d100      	bne.n	8000e50 <__aeabi_fsub+0x17c>
 8000e4e:	e0d9      	b.n	8001004 <__aeabi_fsub+0x330>
 8000e50:	2200      	movs	r2, #0
 8000e52:	2e00      	cmp	r6, #0
 8000e54:	d100      	bne.n	8000e58 <__aeabi_fsub+0x184>
 8000e56:	e788      	b.n	8000d6a <__aeabi_fsub+0x96>
 8000e58:	1b98      	subs	r0, r3, r6
 8000e5a:	0143      	lsls	r3, r0, #5
 8000e5c:	d400      	bmi.n	8000e60 <__aeabi_fsub+0x18c>
 8000e5e:	e0e1      	b.n	8001024 <__aeabi_fsub+0x350>
 8000e60:	4663      	mov	r3, ip
 8000e62:	000c      	movs	r4, r1
 8000e64:	1af0      	subs	r0, r6, r3
 8000e66:	e76f      	b.n	8000d48 <__aeabi_fsub+0x74>
 8000e68:	2e00      	cmp	r6, #0
 8000e6a:	d100      	bne.n	8000e6e <__aeabi_fsub+0x19a>
 8000e6c:	e0b7      	b.n	8000fde <__aeabi_fsub+0x30a>
 8000e6e:	0002      	movs	r2, r0
 8000e70:	3a01      	subs	r2, #1
 8000e72:	2801      	cmp	r0, #1
 8000e74:	d100      	bne.n	8000e78 <__aeabi_fsub+0x1a4>
 8000e76:	e09c      	b.n	8000fb2 <__aeabi_fsub+0x2de>
 8000e78:	28ff      	cmp	r0, #255	; 0xff
 8000e7a:	d026      	beq.n	8000eca <__aeabi_fsub+0x1f6>
 8000e7c:	4690      	mov	r8, r2
 8000e7e:	e788      	b.n	8000d92 <__aeabi_fsub+0xbe>
 8000e80:	22ff      	movs	r2, #255	; 0xff
 8000e82:	2700      	movs	r7, #0
 8000e84:	e771      	b.n	8000d6a <__aeabi_fsub+0x96>
 8000e86:	20fe      	movs	r0, #254	; 0xfe
 8000e88:	1c6a      	adds	r2, r5, #1
 8000e8a:	4210      	tst	r0, r2
 8000e8c:	d064      	beq.n	8000f58 <__aeabi_fsub+0x284>
 8000e8e:	2aff      	cmp	r2, #255	; 0xff
 8000e90:	d0f6      	beq.n	8000e80 <__aeabi_fsub+0x1ac>
 8000e92:	0015      	movs	r5, r2
 8000e94:	4466      	add	r6, ip
 8000e96:	0870      	lsrs	r0, r6, #1
 8000e98:	0743      	lsls	r3, r0, #29
 8000e9a:	d000      	beq.n	8000e9e <__aeabi_fsub+0x1ca>
 8000e9c:	e756      	b.n	8000d4c <__aeabi_fsub+0x78>
 8000e9e:	08c3      	lsrs	r3, r0, #3
 8000ea0:	2dff      	cmp	r5, #255	; 0xff
 8000ea2:	d012      	beq.n	8000eca <__aeabi_fsub+0x1f6>
 8000ea4:	025b      	lsls	r3, r3, #9
 8000ea6:	0a5f      	lsrs	r7, r3, #9
 8000ea8:	b2ea      	uxtb	r2, r5
 8000eaa:	e75e      	b.n	8000d6a <__aeabi_fsub+0x96>
 8000eac:	4662      	mov	r2, ip
 8000eae:	2a00      	cmp	r2, #0
 8000eb0:	d100      	bne.n	8000eb4 <__aeabi_fsub+0x1e0>
 8000eb2:	e096      	b.n	8000fe2 <__aeabi_fsub+0x30e>
 8000eb4:	2e00      	cmp	r6, #0
 8000eb6:	d008      	beq.n	8000eca <__aeabi_fsub+0x1f6>
 8000eb8:	2280      	movs	r2, #128	; 0x80
 8000eba:	03d2      	lsls	r2, r2, #15
 8000ebc:	4213      	tst	r3, r2
 8000ebe:	d004      	beq.n	8000eca <__aeabi_fsub+0x1f6>
 8000ec0:	4648      	mov	r0, r9
 8000ec2:	4210      	tst	r0, r2
 8000ec4:	d101      	bne.n	8000eca <__aeabi_fsub+0x1f6>
 8000ec6:	000c      	movs	r4, r1
 8000ec8:	464b      	mov	r3, r9
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d0d8      	beq.n	8000e80 <__aeabi_fsub+0x1ac>
 8000ece:	2780      	movs	r7, #128	; 0x80
 8000ed0:	03ff      	lsls	r7, r7, #15
 8000ed2:	431f      	orrs	r7, r3
 8000ed4:	027f      	lsls	r7, r7, #9
 8000ed6:	22ff      	movs	r2, #255	; 0xff
 8000ed8:	0a7f      	lsrs	r7, r7, #9
 8000eda:	e746      	b.n	8000d6a <__aeabi_fsub+0x96>
 8000edc:	2320      	movs	r3, #32
 8000ede:	003a      	movs	r2, r7
 8000ee0:	1b45      	subs	r5, r0, r5
 8000ee2:	0038      	movs	r0, r7
 8000ee4:	3501      	adds	r5, #1
 8000ee6:	40ea      	lsrs	r2, r5
 8000ee8:	1b5d      	subs	r5, r3, r5
 8000eea:	40a8      	lsls	r0, r5
 8000eec:	1e43      	subs	r3, r0, #1
 8000eee:	4198      	sbcs	r0, r3
 8000ef0:	2500      	movs	r5, #0
 8000ef2:	4310      	orrs	r0, r2
 8000ef4:	e728      	b.n	8000d48 <__aeabi_fsub+0x74>
 8000ef6:	2320      	movs	r3, #32
 8000ef8:	1a1b      	subs	r3, r3, r0
 8000efa:	0032      	movs	r2, r6
 8000efc:	409e      	lsls	r6, r3
 8000efe:	40c2      	lsrs	r2, r0
 8000f00:	0030      	movs	r0, r6
 8000f02:	1e43      	subs	r3, r0, #1
 8000f04:	4198      	sbcs	r0, r3
 8000f06:	4310      	orrs	r0, r2
 8000f08:	e70c      	b.n	8000d24 <__aeabi_fsub+0x50>
 8000f0a:	2aff      	cmp	r2, #255	; 0xff
 8000f0c:	d0db      	beq.n	8000ec6 <__aeabi_fsub+0x1f2>
 8000f0e:	2380      	movs	r3, #128	; 0x80
 8000f10:	4660      	mov	r0, ip
 8000f12:	04db      	lsls	r3, r3, #19
 8000f14:	4318      	orrs	r0, r3
 8000f16:	4684      	mov	ip, r0
 8000f18:	2f1b      	cmp	r7, #27
 8000f1a:	dd56      	ble.n	8000fca <__aeabi_fsub+0x2f6>
 8000f1c:	2001      	movs	r0, #1
 8000f1e:	000c      	movs	r4, r1
 8000f20:	0015      	movs	r5, r2
 8000f22:	1a30      	subs	r0, r6, r0
 8000f24:	e700      	b.n	8000d28 <__aeabi_fsub+0x54>
 8000f26:	4663      	mov	r3, ip
 8000f28:	1b9f      	subs	r7, r3, r6
 8000f2a:	017b      	lsls	r3, r7, #5
 8000f2c:	d43d      	bmi.n	8000faa <__aeabi_fsub+0x2d6>
 8000f2e:	2f00      	cmp	r7, #0
 8000f30:	d000      	beq.n	8000f34 <__aeabi_fsub+0x260>
 8000f32:	e6fe      	b.n	8000d32 <__aeabi_fsub+0x5e>
 8000f34:	2400      	movs	r4, #0
 8000f36:	2200      	movs	r2, #0
 8000f38:	2700      	movs	r7, #0
 8000f3a:	e716      	b.n	8000d6a <__aeabi_fsub+0x96>
 8000f3c:	0005      	movs	r5, r0
 8000f3e:	e7af      	b.n	8000ea0 <__aeabi_fsub+0x1cc>
 8000f40:	0032      	movs	r2, r6
 8000f42:	4643      	mov	r3, r8
 8000f44:	4641      	mov	r1, r8
 8000f46:	40da      	lsrs	r2, r3
 8000f48:	2320      	movs	r3, #32
 8000f4a:	1a5b      	subs	r3, r3, r1
 8000f4c:	409e      	lsls	r6, r3
 8000f4e:	0030      	movs	r0, r6
 8000f50:	1e43      	subs	r3, r0, #1
 8000f52:	4198      	sbcs	r0, r3
 8000f54:	4310      	orrs	r0, r2
 8000f56:	e721      	b.n	8000d9c <__aeabi_fsub+0xc8>
 8000f58:	2d00      	cmp	r5, #0
 8000f5a:	d1a7      	bne.n	8000eac <__aeabi_fsub+0x1d8>
 8000f5c:	4663      	mov	r3, ip
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d059      	beq.n	8001016 <__aeabi_fsub+0x342>
 8000f62:	2200      	movs	r2, #0
 8000f64:	2e00      	cmp	r6, #0
 8000f66:	d100      	bne.n	8000f6a <__aeabi_fsub+0x296>
 8000f68:	e6ff      	b.n	8000d6a <__aeabi_fsub+0x96>
 8000f6a:	0030      	movs	r0, r6
 8000f6c:	4460      	add	r0, ip
 8000f6e:	0143      	lsls	r3, r0, #5
 8000f70:	d592      	bpl.n	8000e98 <__aeabi_fsub+0x1c4>
 8000f72:	4b2a      	ldr	r3, [pc, #168]	; (800101c <__aeabi_fsub+0x348>)
 8000f74:	3501      	adds	r5, #1
 8000f76:	4018      	ands	r0, r3
 8000f78:	e78e      	b.n	8000e98 <__aeabi_fsub+0x1c4>
 8000f7a:	4663      	mov	r3, ip
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d047      	beq.n	8001010 <__aeabi_fsub+0x33c>
 8000f80:	1e4b      	subs	r3, r1, #1
 8000f82:	2901      	cmp	r1, #1
 8000f84:	d015      	beq.n	8000fb2 <__aeabi_fsub+0x2de>
 8000f86:	29ff      	cmp	r1, #255	; 0xff
 8000f88:	d02b      	beq.n	8000fe2 <__aeabi_fsub+0x30e>
 8000f8a:	0019      	movs	r1, r3
 8000f8c:	e74e      	b.n	8000e2c <__aeabi_fsub+0x158>
 8000f8e:	000c      	movs	r4, r1
 8000f90:	464b      	mov	r3, r9
 8000f92:	003d      	movs	r5, r7
 8000f94:	e784      	b.n	8000ea0 <__aeabi_fsub+0x1cc>
 8000f96:	4662      	mov	r2, ip
 8000f98:	2a00      	cmp	r2, #0
 8000f9a:	d18b      	bne.n	8000eb4 <__aeabi_fsub+0x1e0>
 8000f9c:	2e00      	cmp	r6, #0
 8000f9e:	d192      	bne.n	8000ec6 <__aeabi_fsub+0x1f2>
 8000fa0:	2780      	movs	r7, #128	; 0x80
 8000fa2:	2400      	movs	r4, #0
 8000fa4:	22ff      	movs	r2, #255	; 0xff
 8000fa6:	03ff      	lsls	r7, r7, #15
 8000fa8:	e6df      	b.n	8000d6a <__aeabi_fsub+0x96>
 8000faa:	4663      	mov	r3, ip
 8000fac:	000c      	movs	r4, r1
 8000fae:	1af7      	subs	r7, r6, r3
 8000fb0:	e6bf      	b.n	8000d32 <__aeabi_fsub+0x5e>
 8000fb2:	0030      	movs	r0, r6
 8000fb4:	4460      	add	r0, ip
 8000fb6:	2501      	movs	r5, #1
 8000fb8:	0143      	lsls	r3, r0, #5
 8000fba:	d400      	bmi.n	8000fbe <__aeabi_fsub+0x2ea>
 8000fbc:	e76c      	b.n	8000e98 <__aeabi_fsub+0x1c4>
 8000fbe:	2502      	movs	r5, #2
 8000fc0:	e6f2      	b.n	8000da8 <__aeabi_fsub+0xd4>
 8000fc2:	4663      	mov	r3, ip
 8000fc4:	2501      	movs	r5, #1
 8000fc6:	1b98      	subs	r0, r3, r6
 8000fc8:	e6ae      	b.n	8000d28 <__aeabi_fsub+0x54>
 8000fca:	2320      	movs	r3, #32
 8000fcc:	4664      	mov	r4, ip
 8000fce:	4660      	mov	r0, ip
 8000fd0:	40fc      	lsrs	r4, r7
 8000fd2:	1bdf      	subs	r7, r3, r7
 8000fd4:	40b8      	lsls	r0, r7
 8000fd6:	1e43      	subs	r3, r0, #1
 8000fd8:	4198      	sbcs	r0, r3
 8000fda:	4320      	orrs	r0, r4
 8000fdc:	e79f      	b.n	8000f1e <__aeabi_fsub+0x24a>
 8000fde:	0005      	movs	r5, r0
 8000fe0:	e75e      	b.n	8000ea0 <__aeabi_fsub+0x1cc>
 8000fe2:	464b      	mov	r3, r9
 8000fe4:	e771      	b.n	8000eca <__aeabi_fsub+0x1f6>
 8000fe6:	2320      	movs	r3, #32
 8000fe8:	4665      	mov	r5, ip
 8000fea:	4660      	mov	r0, ip
 8000fec:	40cd      	lsrs	r5, r1
 8000fee:	1a59      	subs	r1, r3, r1
 8000ff0:	4088      	lsls	r0, r1
 8000ff2:	1e43      	subs	r3, r0, #1
 8000ff4:	4198      	sbcs	r0, r3
 8000ff6:	4328      	orrs	r0, r5
 8000ff8:	e71c      	b.n	8000e34 <__aeabi_fsub+0x160>
 8000ffa:	4663      	mov	r3, ip
 8000ffc:	000c      	movs	r4, r1
 8000ffe:	2501      	movs	r5, #1
 8001000:	1af0      	subs	r0, r6, r3
 8001002:	e691      	b.n	8000d28 <__aeabi_fsub+0x54>
 8001004:	2e00      	cmp	r6, #0
 8001006:	d095      	beq.n	8000f34 <__aeabi_fsub+0x260>
 8001008:	000c      	movs	r4, r1
 800100a:	464f      	mov	r7, r9
 800100c:	2200      	movs	r2, #0
 800100e:	e6ac      	b.n	8000d6a <__aeabi_fsub+0x96>
 8001010:	464b      	mov	r3, r9
 8001012:	000d      	movs	r5, r1
 8001014:	e744      	b.n	8000ea0 <__aeabi_fsub+0x1cc>
 8001016:	464f      	mov	r7, r9
 8001018:	2200      	movs	r2, #0
 800101a:	e6a6      	b.n	8000d6a <__aeabi_fsub+0x96>
 800101c:	fbffffff 	.word	0xfbffffff
 8001020:	7dffffff 	.word	0x7dffffff
 8001024:	2800      	cmp	r0, #0
 8001026:	d000      	beq.n	800102a <__aeabi_fsub+0x356>
 8001028:	e736      	b.n	8000e98 <__aeabi_fsub+0x1c4>
 800102a:	2400      	movs	r4, #0
 800102c:	2700      	movs	r7, #0
 800102e:	e69c      	b.n	8000d6a <__aeabi_fsub+0x96>

08001030 <__aeabi_f2iz>:
 8001030:	0241      	lsls	r1, r0, #9
 8001032:	0042      	lsls	r2, r0, #1
 8001034:	0fc3      	lsrs	r3, r0, #31
 8001036:	0a49      	lsrs	r1, r1, #9
 8001038:	2000      	movs	r0, #0
 800103a:	0e12      	lsrs	r2, r2, #24
 800103c:	2a7e      	cmp	r2, #126	; 0x7e
 800103e:	dd03      	ble.n	8001048 <__aeabi_f2iz+0x18>
 8001040:	2a9d      	cmp	r2, #157	; 0x9d
 8001042:	dd02      	ble.n	800104a <__aeabi_f2iz+0x1a>
 8001044:	4a09      	ldr	r2, [pc, #36]	; (800106c <__aeabi_f2iz+0x3c>)
 8001046:	1898      	adds	r0, r3, r2
 8001048:	4770      	bx	lr
 800104a:	2080      	movs	r0, #128	; 0x80
 800104c:	0400      	lsls	r0, r0, #16
 800104e:	4301      	orrs	r1, r0
 8001050:	2a95      	cmp	r2, #149	; 0x95
 8001052:	dc07      	bgt.n	8001064 <__aeabi_f2iz+0x34>
 8001054:	2096      	movs	r0, #150	; 0x96
 8001056:	1a82      	subs	r2, r0, r2
 8001058:	40d1      	lsrs	r1, r2
 800105a:	4248      	negs	r0, r1
 800105c:	2b00      	cmp	r3, #0
 800105e:	d1f3      	bne.n	8001048 <__aeabi_f2iz+0x18>
 8001060:	0008      	movs	r0, r1
 8001062:	e7f1      	b.n	8001048 <__aeabi_f2iz+0x18>
 8001064:	3a96      	subs	r2, #150	; 0x96
 8001066:	4091      	lsls	r1, r2
 8001068:	e7f7      	b.n	800105a <__aeabi_f2iz+0x2a>
 800106a:	46c0      	nop			; (mov r8, r8)
 800106c:	7fffffff 	.word	0x7fffffff

08001070 <__aeabi_i2f>:
 8001070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001072:	2800      	cmp	r0, #0
 8001074:	d013      	beq.n	800109e <__aeabi_i2f+0x2e>
 8001076:	17c3      	asrs	r3, r0, #31
 8001078:	18c6      	adds	r6, r0, r3
 800107a:	405e      	eors	r6, r3
 800107c:	0fc4      	lsrs	r4, r0, #31
 800107e:	0030      	movs	r0, r6
 8001080:	f001 fefa 	bl	8002e78 <__clzsi2>
 8001084:	239e      	movs	r3, #158	; 0x9e
 8001086:	0005      	movs	r5, r0
 8001088:	1a1b      	subs	r3, r3, r0
 800108a:	2b96      	cmp	r3, #150	; 0x96
 800108c:	dc0f      	bgt.n	80010ae <__aeabi_i2f+0x3e>
 800108e:	2808      	cmp	r0, #8
 8001090:	dd01      	ble.n	8001096 <__aeabi_i2f+0x26>
 8001092:	3d08      	subs	r5, #8
 8001094:	40ae      	lsls	r6, r5
 8001096:	0276      	lsls	r6, r6, #9
 8001098:	0a76      	lsrs	r6, r6, #9
 800109a:	b2d8      	uxtb	r0, r3
 800109c:	e002      	b.n	80010a4 <__aeabi_i2f+0x34>
 800109e:	2400      	movs	r4, #0
 80010a0:	2000      	movs	r0, #0
 80010a2:	2600      	movs	r6, #0
 80010a4:	05c0      	lsls	r0, r0, #23
 80010a6:	4330      	orrs	r0, r6
 80010a8:	07e4      	lsls	r4, r4, #31
 80010aa:	4320      	orrs	r0, r4
 80010ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80010ae:	2b99      	cmp	r3, #153	; 0x99
 80010b0:	dd0c      	ble.n	80010cc <__aeabi_i2f+0x5c>
 80010b2:	2205      	movs	r2, #5
 80010b4:	0031      	movs	r1, r6
 80010b6:	1a12      	subs	r2, r2, r0
 80010b8:	40d1      	lsrs	r1, r2
 80010ba:	000a      	movs	r2, r1
 80010bc:	0001      	movs	r1, r0
 80010be:	0030      	movs	r0, r6
 80010c0:	311b      	adds	r1, #27
 80010c2:	4088      	lsls	r0, r1
 80010c4:	1e41      	subs	r1, r0, #1
 80010c6:	4188      	sbcs	r0, r1
 80010c8:	4302      	orrs	r2, r0
 80010ca:	0016      	movs	r6, r2
 80010cc:	2d05      	cmp	r5, #5
 80010ce:	dc12      	bgt.n	80010f6 <__aeabi_i2f+0x86>
 80010d0:	0031      	movs	r1, r6
 80010d2:	4f0d      	ldr	r7, [pc, #52]	; (8001108 <__aeabi_i2f+0x98>)
 80010d4:	4039      	ands	r1, r7
 80010d6:	0772      	lsls	r2, r6, #29
 80010d8:	d009      	beq.n	80010ee <__aeabi_i2f+0x7e>
 80010da:	200f      	movs	r0, #15
 80010dc:	4030      	ands	r0, r6
 80010de:	2804      	cmp	r0, #4
 80010e0:	d005      	beq.n	80010ee <__aeabi_i2f+0x7e>
 80010e2:	3104      	adds	r1, #4
 80010e4:	014a      	lsls	r2, r1, #5
 80010e6:	d502      	bpl.n	80010ee <__aeabi_i2f+0x7e>
 80010e8:	239f      	movs	r3, #159	; 0x9f
 80010ea:	4039      	ands	r1, r7
 80010ec:	1b5b      	subs	r3, r3, r5
 80010ee:	0189      	lsls	r1, r1, #6
 80010f0:	0a4e      	lsrs	r6, r1, #9
 80010f2:	b2d8      	uxtb	r0, r3
 80010f4:	e7d6      	b.n	80010a4 <__aeabi_i2f+0x34>
 80010f6:	1f6a      	subs	r2, r5, #5
 80010f8:	4096      	lsls	r6, r2
 80010fa:	0031      	movs	r1, r6
 80010fc:	4f02      	ldr	r7, [pc, #8]	; (8001108 <__aeabi_i2f+0x98>)
 80010fe:	4039      	ands	r1, r7
 8001100:	0772      	lsls	r2, r6, #29
 8001102:	d0f4      	beq.n	80010ee <__aeabi_i2f+0x7e>
 8001104:	e7e9      	b.n	80010da <__aeabi_i2f+0x6a>
 8001106:	46c0      	nop			; (mov r8, r8)
 8001108:	fbffffff 	.word	0xfbffffff

0800110c <__aeabi_dadd>:
 800110c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800110e:	464f      	mov	r7, r9
 8001110:	4646      	mov	r6, r8
 8001112:	46d6      	mov	lr, sl
 8001114:	000d      	movs	r5, r1
 8001116:	0004      	movs	r4, r0
 8001118:	b5c0      	push	{r6, r7, lr}
 800111a:	001f      	movs	r7, r3
 800111c:	0011      	movs	r1, r2
 800111e:	0328      	lsls	r0, r5, #12
 8001120:	0f62      	lsrs	r2, r4, #29
 8001122:	0a40      	lsrs	r0, r0, #9
 8001124:	4310      	orrs	r0, r2
 8001126:	007a      	lsls	r2, r7, #1
 8001128:	0d52      	lsrs	r2, r2, #21
 800112a:	00e3      	lsls	r3, r4, #3
 800112c:	033c      	lsls	r4, r7, #12
 800112e:	4691      	mov	r9, r2
 8001130:	0a64      	lsrs	r4, r4, #9
 8001132:	0ffa      	lsrs	r2, r7, #31
 8001134:	0f4f      	lsrs	r7, r1, #29
 8001136:	006e      	lsls	r6, r5, #1
 8001138:	4327      	orrs	r7, r4
 800113a:	4692      	mov	sl, r2
 800113c:	46b8      	mov	r8, r7
 800113e:	0d76      	lsrs	r6, r6, #21
 8001140:	0fed      	lsrs	r5, r5, #31
 8001142:	00c9      	lsls	r1, r1, #3
 8001144:	4295      	cmp	r5, r2
 8001146:	d100      	bne.n	800114a <__aeabi_dadd+0x3e>
 8001148:	e099      	b.n	800127e <__aeabi_dadd+0x172>
 800114a:	464c      	mov	r4, r9
 800114c:	1b34      	subs	r4, r6, r4
 800114e:	46a4      	mov	ip, r4
 8001150:	2c00      	cmp	r4, #0
 8001152:	dc00      	bgt.n	8001156 <__aeabi_dadd+0x4a>
 8001154:	e07c      	b.n	8001250 <__aeabi_dadd+0x144>
 8001156:	464a      	mov	r2, r9
 8001158:	2a00      	cmp	r2, #0
 800115a:	d100      	bne.n	800115e <__aeabi_dadd+0x52>
 800115c:	e0b8      	b.n	80012d0 <__aeabi_dadd+0x1c4>
 800115e:	4ac5      	ldr	r2, [pc, #788]	; (8001474 <__aeabi_dadd+0x368>)
 8001160:	4296      	cmp	r6, r2
 8001162:	d100      	bne.n	8001166 <__aeabi_dadd+0x5a>
 8001164:	e11c      	b.n	80013a0 <__aeabi_dadd+0x294>
 8001166:	2280      	movs	r2, #128	; 0x80
 8001168:	003c      	movs	r4, r7
 800116a:	0412      	lsls	r2, r2, #16
 800116c:	4314      	orrs	r4, r2
 800116e:	46a0      	mov	r8, r4
 8001170:	4662      	mov	r2, ip
 8001172:	2a38      	cmp	r2, #56	; 0x38
 8001174:	dd00      	ble.n	8001178 <__aeabi_dadd+0x6c>
 8001176:	e161      	b.n	800143c <__aeabi_dadd+0x330>
 8001178:	2a1f      	cmp	r2, #31
 800117a:	dd00      	ble.n	800117e <__aeabi_dadd+0x72>
 800117c:	e1cc      	b.n	8001518 <__aeabi_dadd+0x40c>
 800117e:	4664      	mov	r4, ip
 8001180:	2220      	movs	r2, #32
 8001182:	1b12      	subs	r2, r2, r4
 8001184:	4644      	mov	r4, r8
 8001186:	4094      	lsls	r4, r2
 8001188:	000f      	movs	r7, r1
 800118a:	46a1      	mov	r9, r4
 800118c:	4664      	mov	r4, ip
 800118e:	4091      	lsls	r1, r2
 8001190:	40e7      	lsrs	r7, r4
 8001192:	464c      	mov	r4, r9
 8001194:	1e4a      	subs	r2, r1, #1
 8001196:	4191      	sbcs	r1, r2
 8001198:	433c      	orrs	r4, r7
 800119a:	4642      	mov	r2, r8
 800119c:	4321      	orrs	r1, r4
 800119e:	4664      	mov	r4, ip
 80011a0:	40e2      	lsrs	r2, r4
 80011a2:	1a80      	subs	r0, r0, r2
 80011a4:	1a5c      	subs	r4, r3, r1
 80011a6:	42a3      	cmp	r3, r4
 80011a8:	419b      	sbcs	r3, r3
 80011aa:	425f      	negs	r7, r3
 80011ac:	1bc7      	subs	r7, r0, r7
 80011ae:	023b      	lsls	r3, r7, #8
 80011b0:	d400      	bmi.n	80011b4 <__aeabi_dadd+0xa8>
 80011b2:	e0d0      	b.n	8001356 <__aeabi_dadd+0x24a>
 80011b4:	027f      	lsls	r7, r7, #9
 80011b6:	0a7f      	lsrs	r7, r7, #9
 80011b8:	2f00      	cmp	r7, #0
 80011ba:	d100      	bne.n	80011be <__aeabi_dadd+0xb2>
 80011bc:	e0ff      	b.n	80013be <__aeabi_dadd+0x2b2>
 80011be:	0038      	movs	r0, r7
 80011c0:	f001 fe5a 	bl	8002e78 <__clzsi2>
 80011c4:	0001      	movs	r1, r0
 80011c6:	3908      	subs	r1, #8
 80011c8:	2320      	movs	r3, #32
 80011ca:	0022      	movs	r2, r4
 80011cc:	1a5b      	subs	r3, r3, r1
 80011ce:	408f      	lsls	r7, r1
 80011d0:	40da      	lsrs	r2, r3
 80011d2:	408c      	lsls	r4, r1
 80011d4:	4317      	orrs	r7, r2
 80011d6:	42b1      	cmp	r1, r6
 80011d8:	da00      	bge.n	80011dc <__aeabi_dadd+0xd0>
 80011da:	e0ff      	b.n	80013dc <__aeabi_dadd+0x2d0>
 80011dc:	1b89      	subs	r1, r1, r6
 80011de:	1c4b      	adds	r3, r1, #1
 80011e0:	2b1f      	cmp	r3, #31
 80011e2:	dd00      	ble.n	80011e6 <__aeabi_dadd+0xda>
 80011e4:	e0a8      	b.n	8001338 <__aeabi_dadd+0x22c>
 80011e6:	2220      	movs	r2, #32
 80011e8:	0039      	movs	r1, r7
 80011ea:	1ad2      	subs	r2, r2, r3
 80011ec:	0020      	movs	r0, r4
 80011ee:	4094      	lsls	r4, r2
 80011f0:	4091      	lsls	r1, r2
 80011f2:	40d8      	lsrs	r0, r3
 80011f4:	1e62      	subs	r2, r4, #1
 80011f6:	4194      	sbcs	r4, r2
 80011f8:	40df      	lsrs	r7, r3
 80011fa:	2600      	movs	r6, #0
 80011fc:	4301      	orrs	r1, r0
 80011fe:	430c      	orrs	r4, r1
 8001200:	0763      	lsls	r3, r4, #29
 8001202:	d009      	beq.n	8001218 <__aeabi_dadd+0x10c>
 8001204:	230f      	movs	r3, #15
 8001206:	4023      	ands	r3, r4
 8001208:	2b04      	cmp	r3, #4
 800120a:	d005      	beq.n	8001218 <__aeabi_dadd+0x10c>
 800120c:	1d23      	adds	r3, r4, #4
 800120e:	42a3      	cmp	r3, r4
 8001210:	41a4      	sbcs	r4, r4
 8001212:	4264      	negs	r4, r4
 8001214:	193f      	adds	r7, r7, r4
 8001216:	001c      	movs	r4, r3
 8001218:	023b      	lsls	r3, r7, #8
 800121a:	d400      	bmi.n	800121e <__aeabi_dadd+0x112>
 800121c:	e09e      	b.n	800135c <__aeabi_dadd+0x250>
 800121e:	4b95      	ldr	r3, [pc, #596]	; (8001474 <__aeabi_dadd+0x368>)
 8001220:	3601      	adds	r6, #1
 8001222:	429e      	cmp	r6, r3
 8001224:	d100      	bne.n	8001228 <__aeabi_dadd+0x11c>
 8001226:	e0b7      	b.n	8001398 <__aeabi_dadd+0x28c>
 8001228:	4a93      	ldr	r2, [pc, #588]	; (8001478 <__aeabi_dadd+0x36c>)
 800122a:	08e4      	lsrs	r4, r4, #3
 800122c:	4017      	ands	r7, r2
 800122e:	077b      	lsls	r3, r7, #29
 8001230:	0571      	lsls	r1, r6, #21
 8001232:	027f      	lsls	r7, r7, #9
 8001234:	4323      	orrs	r3, r4
 8001236:	0b3f      	lsrs	r7, r7, #12
 8001238:	0d4a      	lsrs	r2, r1, #21
 800123a:	0512      	lsls	r2, r2, #20
 800123c:	433a      	orrs	r2, r7
 800123e:	07ed      	lsls	r5, r5, #31
 8001240:	432a      	orrs	r2, r5
 8001242:	0018      	movs	r0, r3
 8001244:	0011      	movs	r1, r2
 8001246:	bce0      	pop	{r5, r6, r7}
 8001248:	46ba      	mov	sl, r7
 800124a:	46b1      	mov	r9, r6
 800124c:	46a8      	mov	r8, r5
 800124e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001250:	2c00      	cmp	r4, #0
 8001252:	d04b      	beq.n	80012ec <__aeabi_dadd+0x1e0>
 8001254:	464c      	mov	r4, r9
 8001256:	1ba4      	subs	r4, r4, r6
 8001258:	46a4      	mov	ip, r4
 800125a:	2e00      	cmp	r6, #0
 800125c:	d000      	beq.n	8001260 <__aeabi_dadd+0x154>
 800125e:	e123      	b.n	80014a8 <__aeabi_dadd+0x39c>
 8001260:	0004      	movs	r4, r0
 8001262:	431c      	orrs	r4, r3
 8001264:	d100      	bne.n	8001268 <__aeabi_dadd+0x15c>
 8001266:	e1af      	b.n	80015c8 <__aeabi_dadd+0x4bc>
 8001268:	4662      	mov	r2, ip
 800126a:	1e54      	subs	r4, r2, #1
 800126c:	2a01      	cmp	r2, #1
 800126e:	d100      	bne.n	8001272 <__aeabi_dadd+0x166>
 8001270:	e215      	b.n	800169e <__aeabi_dadd+0x592>
 8001272:	4d80      	ldr	r5, [pc, #512]	; (8001474 <__aeabi_dadd+0x368>)
 8001274:	45ac      	cmp	ip, r5
 8001276:	d100      	bne.n	800127a <__aeabi_dadd+0x16e>
 8001278:	e1c8      	b.n	800160c <__aeabi_dadd+0x500>
 800127a:	46a4      	mov	ip, r4
 800127c:	e11b      	b.n	80014b6 <__aeabi_dadd+0x3aa>
 800127e:	464a      	mov	r2, r9
 8001280:	1ab2      	subs	r2, r6, r2
 8001282:	4694      	mov	ip, r2
 8001284:	2a00      	cmp	r2, #0
 8001286:	dc00      	bgt.n	800128a <__aeabi_dadd+0x17e>
 8001288:	e0ac      	b.n	80013e4 <__aeabi_dadd+0x2d8>
 800128a:	464a      	mov	r2, r9
 800128c:	2a00      	cmp	r2, #0
 800128e:	d043      	beq.n	8001318 <__aeabi_dadd+0x20c>
 8001290:	4a78      	ldr	r2, [pc, #480]	; (8001474 <__aeabi_dadd+0x368>)
 8001292:	4296      	cmp	r6, r2
 8001294:	d100      	bne.n	8001298 <__aeabi_dadd+0x18c>
 8001296:	e1af      	b.n	80015f8 <__aeabi_dadd+0x4ec>
 8001298:	2280      	movs	r2, #128	; 0x80
 800129a:	003c      	movs	r4, r7
 800129c:	0412      	lsls	r2, r2, #16
 800129e:	4314      	orrs	r4, r2
 80012a0:	46a0      	mov	r8, r4
 80012a2:	4662      	mov	r2, ip
 80012a4:	2a38      	cmp	r2, #56	; 0x38
 80012a6:	dc67      	bgt.n	8001378 <__aeabi_dadd+0x26c>
 80012a8:	2a1f      	cmp	r2, #31
 80012aa:	dc00      	bgt.n	80012ae <__aeabi_dadd+0x1a2>
 80012ac:	e15f      	b.n	800156e <__aeabi_dadd+0x462>
 80012ae:	4647      	mov	r7, r8
 80012b0:	3a20      	subs	r2, #32
 80012b2:	40d7      	lsrs	r7, r2
 80012b4:	4662      	mov	r2, ip
 80012b6:	2a20      	cmp	r2, #32
 80012b8:	d005      	beq.n	80012c6 <__aeabi_dadd+0x1ba>
 80012ba:	4664      	mov	r4, ip
 80012bc:	2240      	movs	r2, #64	; 0x40
 80012be:	1b12      	subs	r2, r2, r4
 80012c0:	4644      	mov	r4, r8
 80012c2:	4094      	lsls	r4, r2
 80012c4:	4321      	orrs	r1, r4
 80012c6:	1e4a      	subs	r2, r1, #1
 80012c8:	4191      	sbcs	r1, r2
 80012ca:	000c      	movs	r4, r1
 80012cc:	433c      	orrs	r4, r7
 80012ce:	e057      	b.n	8001380 <__aeabi_dadd+0x274>
 80012d0:	003a      	movs	r2, r7
 80012d2:	430a      	orrs	r2, r1
 80012d4:	d100      	bne.n	80012d8 <__aeabi_dadd+0x1cc>
 80012d6:	e105      	b.n	80014e4 <__aeabi_dadd+0x3d8>
 80012d8:	0022      	movs	r2, r4
 80012da:	3a01      	subs	r2, #1
 80012dc:	2c01      	cmp	r4, #1
 80012de:	d100      	bne.n	80012e2 <__aeabi_dadd+0x1d6>
 80012e0:	e182      	b.n	80015e8 <__aeabi_dadd+0x4dc>
 80012e2:	4c64      	ldr	r4, [pc, #400]	; (8001474 <__aeabi_dadd+0x368>)
 80012e4:	45a4      	cmp	ip, r4
 80012e6:	d05b      	beq.n	80013a0 <__aeabi_dadd+0x294>
 80012e8:	4694      	mov	ip, r2
 80012ea:	e741      	b.n	8001170 <__aeabi_dadd+0x64>
 80012ec:	4c63      	ldr	r4, [pc, #396]	; (800147c <__aeabi_dadd+0x370>)
 80012ee:	1c77      	adds	r7, r6, #1
 80012f0:	4227      	tst	r7, r4
 80012f2:	d000      	beq.n	80012f6 <__aeabi_dadd+0x1ea>
 80012f4:	e0c4      	b.n	8001480 <__aeabi_dadd+0x374>
 80012f6:	0004      	movs	r4, r0
 80012f8:	431c      	orrs	r4, r3
 80012fa:	2e00      	cmp	r6, #0
 80012fc:	d000      	beq.n	8001300 <__aeabi_dadd+0x1f4>
 80012fe:	e169      	b.n	80015d4 <__aeabi_dadd+0x4c8>
 8001300:	2c00      	cmp	r4, #0
 8001302:	d100      	bne.n	8001306 <__aeabi_dadd+0x1fa>
 8001304:	e1bf      	b.n	8001686 <__aeabi_dadd+0x57a>
 8001306:	4644      	mov	r4, r8
 8001308:	430c      	orrs	r4, r1
 800130a:	d000      	beq.n	800130e <__aeabi_dadd+0x202>
 800130c:	e1d0      	b.n	80016b0 <__aeabi_dadd+0x5a4>
 800130e:	0742      	lsls	r2, r0, #29
 8001310:	08db      	lsrs	r3, r3, #3
 8001312:	4313      	orrs	r3, r2
 8001314:	08c0      	lsrs	r0, r0, #3
 8001316:	e029      	b.n	800136c <__aeabi_dadd+0x260>
 8001318:	003a      	movs	r2, r7
 800131a:	430a      	orrs	r2, r1
 800131c:	d100      	bne.n	8001320 <__aeabi_dadd+0x214>
 800131e:	e170      	b.n	8001602 <__aeabi_dadd+0x4f6>
 8001320:	4662      	mov	r2, ip
 8001322:	4664      	mov	r4, ip
 8001324:	3a01      	subs	r2, #1
 8001326:	2c01      	cmp	r4, #1
 8001328:	d100      	bne.n	800132c <__aeabi_dadd+0x220>
 800132a:	e0e0      	b.n	80014ee <__aeabi_dadd+0x3e2>
 800132c:	4c51      	ldr	r4, [pc, #324]	; (8001474 <__aeabi_dadd+0x368>)
 800132e:	45a4      	cmp	ip, r4
 8001330:	d100      	bne.n	8001334 <__aeabi_dadd+0x228>
 8001332:	e161      	b.n	80015f8 <__aeabi_dadd+0x4ec>
 8001334:	4694      	mov	ip, r2
 8001336:	e7b4      	b.n	80012a2 <__aeabi_dadd+0x196>
 8001338:	003a      	movs	r2, r7
 800133a:	391f      	subs	r1, #31
 800133c:	40ca      	lsrs	r2, r1
 800133e:	0011      	movs	r1, r2
 8001340:	2b20      	cmp	r3, #32
 8001342:	d003      	beq.n	800134c <__aeabi_dadd+0x240>
 8001344:	2240      	movs	r2, #64	; 0x40
 8001346:	1ad3      	subs	r3, r2, r3
 8001348:	409f      	lsls	r7, r3
 800134a:	433c      	orrs	r4, r7
 800134c:	1e63      	subs	r3, r4, #1
 800134e:	419c      	sbcs	r4, r3
 8001350:	2700      	movs	r7, #0
 8001352:	2600      	movs	r6, #0
 8001354:	430c      	orrs	r4, r1
 8001356:	0763      	lsls	r3, r4, #29
 8001358:	d000      	beq.n	800135c <__aeabi_dadd+0x250>
 800135a:	e753      	b.n	8001204 <__aeabi_dadd+0xf8>
 800135c:	46b4      	mov	ip, r6
 800135e:	08e4      	lsrs	r4, r4, #3
 8001360:	077b      	lsls	r3, r7, #29
 8001362:	4323      	orrs	r3, r4
 8001364:	08f8      	lsrs	r0, r7, #3
 8001366:	4a43      	ldr	r2, [pc, #268]	; (8001474 <__aeabi_dadd+0x368>)
 8001368:	4594      	cmp	ip, r2
 800136a:	d01d      	beq.n	80013a8 <__aeabi_dadd+0x29c>
 800136c:	4662      	mov	r2, ip
 800136e:	0307      	lsls	r7, r0, #12
 8001370:	0552      	lsls	r2, r2, #21
 8001372:	0b3f      	lsrs	r7, r7, #12
 8001374:	0d52      	lsrs	r2, r2, #21
 8001376:	e760      	b.n	800123a <__aeabi_dadd+0x12e>
 8001378:	4644      	mov	r4, r8
 800137a:	430c      	orrs	r4, r1
 800137c:	1e62      	subs	r2, r4, #1
 800137e:	4194      	sbcs	r4, r2
 8001380:	18e4      	adds	r4, r4, r3
 8001382:	429c      	cmp	r4, r3
 8001384:	419b      	sbcs	r3, r3
 8001386:	425f      	negs	r7, r3
 8001388:	183f      	adds	r7, r7, r0
 800138a:	023b      	lsls	r3, r7, #8
 800138c:	d5e3      	bpl.n	8001356 <__aeabi_dadd+0x24a>
 800138e:	4b39      	ldr	r3, [pc, #228]	; (8001474 <__aeabi_dadd+0x368>)
 8001390:	3601      	adds	r6, #1
 8001392:	429e      	cmp	r6, r3
 8001394:	d000      	beq.n	8001398 <__aeabi_dadd+0x28c>
 8001396:	e0b5      	b.n	8001504 <__aeabi_dadd+0x3f8>
 8001398:	0032      	movs	r2, r6
 800139a:	2700      	movs	r7, #0
 800139c:	2300      	movs	r3, #0
 800139e:	e74c      	b.n	800123a <__aeabi_dadd+0x12e>
 80013a0:	0742      	lsls	r2, r0, #29
 80013a2:	08db      	lsrs	r3, r3, #3
 80013a4:	4313      	orrs	r3, r2
 80013a6:	08c0      	lsrs	r0, r0, #3
 80013a8:	001a      	movs	r2, r3
 80013aa:	4302      	orrs	r2, r0
 80013ac:	d100      	bne.n	80013b0 <__aeabi_dadd+0x2a4>
 80013ae:	e1e1      	b.n	8001774 <__aeabi_dadd+0x668>
 80013b0:	2780      	movs	r7, #128	; 0x80
 80013b2:	033f      	lsls	r7, r7, #12
 80013b4:	4307      	orrs	r7, r0
 80013b6:	033f      	lsls	r7, r7, #12
 80013b8:	4a2e      	ldr	r2, [pc, #184]	; (8001474 <__aeabi_dadd+0x368>)
 80013ba:	0b3f      	lsrs	r7, r7, #12
 80013bc:	e73d      	b.n	800123a <__aeabi_dadd+0x12e>
 80013be:	0020      	movs	r0, r4
 80013c0:	f001 fd5a 	bl	8002e78 <__clzsi2>
 80013c4:	0001      	movs	r1, r0
 80013c6:	3118      	adds	r1, #24
 80013c8:	291f      	cmp	r1, #31
 80013ca:	dc00      	bgt.n	80013ce <__aeabi_dadd+0x2c2>
 80013cc:	e6fc      	b.n	80011c8 <__aeabi_dadd+0xbc>
 80013ce:	3808      	subs	r0, #8
 80013d0:	4084      	lsls	r4, r0
 80013d2:	0027      	movs	r7, r4
 80013d4:	2400      	movs	r4, #0
 80013d6:	42b1      	cmp	r1, r6
 80013d8:	db00      	blt.n	80013dc <__aeabi_dadd+0x2d0>
 80013da:	e6ff      	b.n	80011dc <__aeabi_dadd+0xd0>
 80013dc:	4a26      	ldr	r2, [pc, #152]	; (8001478 <__aeabi_dadd+0x36c>)
 80013de:	1a76      	subs	r6, r6, r1
 80013e0:	4017      	ands	r7, r2
 80013e2:	e70d      	b.n	8001200 <__aeabi_dadd+0xf4>
 80013e4:	2a00      	cmp	r2, #0
 80013e6:	d02f      	beq.n	8001448 <__aeabi_dadd+0x33c>
 80013e8:	464a      	mov	r2, r9
 80013ea:	1b92      	subs	r2, r2, r6
 80013ec:	4694      	mov	ip, r2
 80013ee:	2e00      	cmp	r6, #0
 80013f0:	d100      	bne.n	80013f4 <__aeabi_dadd+0x2e8>
 80013f2:	e0ad      	b.n	8001550 <__aeabi_dadd+0x444>
 80013f4:	4a1f      	ldr	r2, [pc, #124]	; (8001474 <__aeabi_dadd+0x368>)
 80013f6:	4591      	cmp	r9, r2
 80013f8:	d100      	bne.n	80013fc <__aeabi_dadd+0x2f0>
 80013fa:	e10f      	b.n	800161c <__aeabi_dadd+0x510>
 80013fc:	2280      	movs	r2, #128	; 0x80
 80013fe:	0412      	lsls	r2, r2, #16
 8001400:	4310      	orrs	r0, r2
 8001402:	4662      	mov	r2, ip
 8001404:	2a38      	cmp	r2, #56	; 0x38
 8001406:	dd00      	ble.n	800140a <__aeabi_dadd+0x2fe>
 8001408:	e10f      	b.n	800162a <__aeabi_dadd+0x51e>
 800140a:	2a1f      	cmp	r2, #31
 800140c:	dd00      	ble.n	8001410 <__aeabi_dadd+0x304>
 800140e:	e180      	b.n	8001712 <__aeabi_dadd+0x606>
 8001410:	4664      	mov	r4, ip
 8001412:	2220      	movs	r2, #32
 8001414:	001e      	movs	r6, r3
 8001416:	1b12      	subs	r2, r2, r4
 8001418:	4667      	mov	r7, ip
 800141a:	0004      	movs	r4, r0
 800141c:	4093      	lsls	r3, r2
 800141e:	4094      	lsls	r4, r2
 8001420:	40fe      	lsrs	r6, r7
 8001422:	1e5a      	subs	r2, r3, #1
 8001424:	4193      	sbcs	r3, r2
 8001426:	40f8      	lsrs	r0, r7
 8001428:	4334      	orrs	r4, r6
 800142a:	431c      	orrs	r4, r3
 800142c:	4480      	add	r8, r0
 800142e:	1864      	adds	r4, r4, r1
 8001430:	428c      	cmp	r4, r1
 8001432:	41bf      	sbcs	r7, r7
 8001434:	427f      	negs	r7, r7
 8001436:	464e      	mov	r6, r9
 8001438:	4447      	add	r7, r8
 800143a:	e7a6      	b.n	800138a <__aeabi_dadd+0x27e>
 800143c:	4642      	mov	r2, r8
 800143e:	430a      	orrs	r2, r1
 8001440:	0011      	movs	r1, r2
 8001442:	1e4a      	subs	r2, r1, #1
 8001444:	4191      	sbcs	r1, r2
 8001446:	e6ad      	b.n	80011a4 <__aeabi_dadd+0x98>
 8001448:	4c0c      	ldr	r4, [pc, #48]	; (800147c <__aeabi_dadd+0x370>)
 800144a:	1c72      	adds	r2, r6, #1
 800144c:	4222      	tst	r2, r4
 800144e:	d000      	beq.n	8001452 <__aeabi_dadd+0x346>
 8001450:	e0a1      	b.n	8001596 <__aeabi_dadd+0x48a>
 8001452:	0002      	movs	r2, r0
 8001454:	431a      	orrs	r2, r3
 8001456:	2e00      	cmp	r6, #0
 8001458:	d000      	beq.n	800145c <__aeabi_dadd+0x350>
 800145a:	e0fa      	b.n	8001652 <__aeabi_dadd+0x546>
 800145c:	2a00      	cmp	r2, #0
 800145e:	d100      	bne.n	8001462 <__aeabi_dadd+0x356>
 8001460:	e145      	b.n	80016ee <__aeabi_dadd+0x5e2>
 8001462:	003a      	movs	r2, r7
 8001464:	430a      	orrs	r2, r1
 8001466:	d000      	beq.n	800146a <__aeabi_dadd+0x35e>
 8001468:	e146      	b.n	80016f8 <__aeabi_dadd+0x5ec>
 800146a:	0742      	lsls	r2, r0, #29
 800146c:	08db      	lsrs	r3, r3, #3
 800146e:	4313      	orrs	r3, r2
 8001470:	08c0      	lsrs	r0, r0, #3
 8001472:	e77b      	b.n	800136c <__aeabi_dadd+0x260>
 8001474:	000007ff 	.word	0x000007ff
 8001478:	ff7fffff 	.word	0xff7fffff
 800147c:	000007fe 	.word	0x000007fe
 8001480:	4647      	mov	r7, r8
 8001482:	1a5c      	subs	r4, r3, r1
 8001484:	1bc2      	subs	r2, r0, r7
 8001486:	42a3      	cmp	r3, r4
 8001488:	41bf      	sbcs	r7, r7
 800148a:	427f      	negs	r7, r7
 800148c:	46b9      	mov	r9, r7
 800148e:	0017      	movs	r7, r2
 8001490:	464a      	mov	r2, r9
 8001492:	1abf      	subs	r7, r7, r2
 8001494:	023a      	lsls	r2, r7, #8
 8001496:	d500      	bpl.n	800149a <__aeabi_dadd+0x38e>
 8001498:	e08d      	b.n	80015b6 <__aeabi_dadd+0x4aa>
 800149a:	0023      	movs	r3, r4
 800149c:	433b      	orrs	r3, r7
 800149e:	d000      	beq.n	80014a2 <__aeabi_dadd+0x396>
 80014a0:	e68a      	b.n	80011b8 <__aeabi_dadd+0xac>
 80014a2:	2000      	movs	r0, #0
 80014a4:	2500      	movs	r5, #0
 80014a6:	e761      	b.n	800136c <__aeabi_dadd+0x260>
 80014a8:	4cb4      	ldr	r4, [pc, #720]	; (800177c <__aeabi_dadd+0x670>)
 80014aa:	45a1      	cmp	r9, r4
 80014ac:	d100      	bne.n	80014b0 <__aeabi_dadd+0x3a4>
 80014ae:	e0ad      	b.n	800160c <__aeabi_dadd+0x500>
 80014b0:	2480      	movs	r4, #128	; 0x80
 80014b2:	0424      	lsls	r4, r4, #16
 80014b4:	4320      	orrs	r0, r4
 80014b6:	4664      	mov	r4, ip
 80014b8:	2c38      	cmp	r4, #56	; 0x38
 80014ba:	dc3d      	bgt.n	8001538 <__aeabi_dadd+0x42c>
 80014bc:	4662      	mov	r2, ip
 80014be:	2c1f      	cmp	r4, #31
 80014c0:	dd00      	ble.n	80014c4 <__aeabi_dadd+0x3b8>
 80014c2:	e0b7      	b.n	8001634 <__aeabi_dadd+0x528>
 80014c4:	2520      	movs	r5, #32
 80014c6:	001e      	movs	r6, r3
 80014c8:	1b2d      	subs	r5, r5, r4
 80014ca:	0004      	movs	r4, r0
 80014cc:	40ab      	lsls	r3, r5
 80014ce:	40ac      	lsls	r4, r5
 80014d0:	40d6      	lsrs	r6, r2
 80014d2:	40d0      	lsrs	r0, r2
 80014d4:	4642      	mov	r2, r8
 80014d6:	1e5d      	subs	r5, r3, #1
 80014d8:	41ab      	sbcs	r3, r5
 80014da:	4334      	orrs	r4, r6
 80014dc:	1a12      	subs	r2, r2, r0
 80014de:	4690      	mov	r8, r2
 80014e0:	4323      	orrs	r3, r4
 80014e2:	e02c      	b.n	800153e <__aeabi_dadd+0x432>
 80014e4:	0742      	lsls	r2, r0, #29
 80014e6:	08db      	lsrs	r3, r3, #3
 80014e8:	4313      	orrs	r3, r2
 80014ea:	08c0      	lsrs	r0, r0, #3
 80014ec:	e73b      	b.n	8001366 <__aeabi_dadd+0x25a>
 80014ee:	185c      	adds	r4, r3, r1
 80014f0:	429c      	cmp	r4, r3
 80014f2:	419b      	sbcs	r3, r3
 80014f4:	4440      	add	r0, r8
 80014f6:	425b      	negs	r3, r3
 80014f8:	18c7      	adds	r7, r0, r3
 80014fa:	2601      	movs	r6, #1
 80014fc:	023b      	lsls	r3, r7, #8
 80014fe:	d400      	bmi.n	8001502 <__aeabi_dadd+0x3f6>
 8001500:	e729      	b.n	8001356 <__aeabi_dadd+0x24a>
 8001502:	2602      	movs	r6, #2
 8001504:	4a9e      	ldr	r2, [pc, #632]	; (8001780 <__aeabi_dadd+0x674>)
 8001506:	0863      	lsrs	r3, r4, #1
 8001508:	4017      	ands	r7, r2
 800150a:	2201      	movs	r2, #1
 800150c:	4014      	ands	r4, r2
 800150e:	431c      	orrs	r4, r3
 8001510:	07fb      	lsls	r3, r7, #31
 8001512:	431c      	orrs	r4, r3
 8001514:	087f      	lsrs	r7, r7, #1
 8001516:	e673      	b.n	8001200 <__aeabi_dadd+0xf4>
 8001518:	4644      	mov	r4, r8
 800151a:	3a20      	subs	r2, #32
 800151c:	40d4      	lsrs	r4, r2
 800151e:	4662      	mov	r2, ip
 8001520:	2a20      	cmp	r2, #32
 8001522:	d005      	beq.n	8001530 <__aeabi_dadd+0x424>
 8001524:	4667      	mov	r7, ip
 8001526:	2240      	movs	r2, #64	; 0x40
 8001528:	1bd2      	subs	r2, r2, r7
 800152a:	4647      	mov	r7, r8
 800152c:	4097      	lsls	r7, r2
 800152e:	4339      	orrs	r1, r7
 8001530:	1e4a      	subs	r2, r1, #1
 8001532:	4191      	sbcs	r1, r2
 8001534:	4321      	orrs	r1, r4
 8001536:	e635      	b.n	80011a4 <__aeabi_dadd+0x98>
 8001538:	4303      	orrs	r3, r0
 800153a:	1e58      	subs	r0, r3, #1
 800153c:	4183      	sbcs	r3, r0
 800153e:	1acc      	subs	r4, r1, r3
 8001540:	42a1      	cmp	r1, r4
 8001542:	41bf      	sbcs	r7, r7
 8001544:	4643      	mov	r3, r8
 8001546:	427f      	negs	r7, r7
 8001548:	4655      	mov	r5, sl
 800154a:	464e      	mov	r6, r9
 800154c:	1bdf      	subs	r7, r3, r7
 800154e:	e62e      	b.n	80011ae <__aeabi_dadd+0xa2>
 8001550:	0002      	movs	r2, r0
 8001552:	431a      	orrs	r2, r3
 8001554:	d100      	bne.n	8001558 <__aeabi_dadd+0x44c>
 8001556:	e0bd      	b.n	80016d4 <__aeabi_dadd+0x5c8>
 8001558:	4662      	mov	r2, ip
 800155a:	4664      	mov	r4, ip
 800155c:	3a01      	subs	r2, #1
 800155e:	2c01      	cmp	r4, #1
 8001560:	d100      	bne.n	8001564 <__aeabi_dadd+0x458>
 8001562:	e0e5      	b.n	8001730 <__aeabi_dadd+0x624>
 8001564:	4c85      	ldr	r4, [pc, #532]	; (800177c <__aeabi_dadd+0x670>)
 8001566:	45a4      	cmp	ip, r4
 8001568:	d058      	beq.n	800161c <__aeabi_dadd+0x510>
 800156a:	4694      	mov	ip, r2
 800156c:	e749      	b.n	8001402 <__aeabi_dadd+0x2f6>
 800156e:	4664      	mov	r4, ip
 8001570:	2220      	movs	r2, #32
 8001572:	1b12      	subs	r2, r2, r4
 8001574:	4644      	mov	r4, r8
 8001576:	4094      	lsls	r4, r2
 8001578:	000f      	movs	r7, r1
 800157a:	46a1      	mov	r9, r4
 800157c:	4664      	mov	r4, ip
 800157e:	4091      	lsls	r1, r2
 8001580:	40e7      	lsrs	r7, r4
 8001582:	464c      	mov	r4, r9
 8001584:	1e4a      	subs	r2, r1, #1
 8001586:	4191      	sbcs	r1, r2
 8001588:	433c      	orrs	r4, r7
 800158a:	4642      	mov	r2, r8
 800158c:	430c      	orrs	r4, r1
 800158e:	4661      	mov	r1, ip
 8001590:	40ca      	lsrs	r2, r1
 8001592:	1880      	adds	r0, r0, r2
 8001594:	e6f4      	b.n	8001380 <__aeabi_dadd+0x274>
 8001596:	4c79      	ldr	r4, [pc, #484]	; (800177c <__aeabi_dadd+0x670>)
 8001598:	42a2      	cmp	r2, r4
 800159a:	d100      	bne.n	800159e <__aeabi_dadd+0x492>
 800159c:	e6fd      	b.n	800139a <__aeabi_dadd+0x28e>
 800159e:	1859      	adds	r1, r3, r1
 80015a0:	4299      	cmp	r1, r3
 80015a2:	419b      	sbcs	r3, r3
 80015a4:	4440      	add	r0, r8
 80015a6:	425f      	negs	r7, r3
 80015a8:	19c7      	adds	r7, r0, r7
 80015aa:	07fc      	lsls	r4, r7, #31
 80015ac:	0849      	lsrs	r1, r1, #1
 80015ae:	0016      	movs	r6, r2
 80015b0:	430c      	orrs	r4, r1
 80015b2:	087f      	lsrs	r7, r7, #1
 80015b4:	e6cf      	b.n	8001356 <__aeabi_dadd+0x24a>
 80015b6:	1acc      	subs	r4, r1, r3
 80015b8:	42a1      	cmp	r1, r4
 80015ba:	41bf      	sbcs	r7, r7
 80015bc:	4643      	mov	r3, r8
 80015be:	427f      	negs	r7, r7
 80015c0:	1a18      	subs	r0, r3, r0
 80015c2:	4655      	mov	r5, sl
 80015c4:	1bc7      	subs	r7, r0, r7
 80015c6:	e5f7      	b.n	80011b8 <__aeabi_dadd+0xac>
 80015c8:	08c9      	lsrs	r1, r1, #3
 80015ca:	077b      	lsls	r3, r7, #29
 80015cc:	4655      	mov	r5, sl
 80015ce:	430b      	orrs	r3, r1
 80015d0:	08f8      	lsrs	r0, r7, #3
 80015d2:	e6c8      	b.n	8001366 <__aeabi_dadd+0x25a>
 80015d4:	2c00      	cmp	r4, #0
 80015d6:	d000      	beq.n	80015da <__aeabi_dadd+0x4ce>
 80015d8:	e081      	b.n	80016de <__aeabi_dadd+0x5d2>
 80015da:	4643      	mov	r3, r8
 80015dc:	430b      	orrs	r3, r1
 80015de:	d115      	bne.n	800160c <__aeabi_dadd+0x500>
 80015e0:	2080      	movs	r0, #128	; 0x80
 80015e2:	2500      	movs	r5, #0
 80015e4:	0300      	lsls	r0, r0, #12
 80015e6:	e6e3      	b.n	80013b0 <__aeabi_dadd+0x2a4>
 80015e8:	1a5c      	subs	r4, r3, r1
 80015ea:	42a3      	cmp	r3, r4
 80015ec:	419b      	sbcs	r3, r3
 80015ee:	1bc7      	subs	r7, r0, r7
 80015f0:	425b      	negs	r3, r3
 80015f2:	2601      	movs	r6, #1
 80015f4:	1aff      	subs	r7, r7, r3
 80015f6:	e5da      	b.n	80011ae <__aeabi_dadd+0xa2>
 80015f8:	0742      	lsls	r2, r0, #29
 80015fa:	08db      	lsrs	r3, r3, #3
 80015fc:	4313      	orrs	r3, r2
 80015fe:	08c0      	lsrs	r0, r0, #3
 8001600:	e6d2      	b.n	80013a8 <__aeabi_dadd+0x29c>
 8001602:	0742      	lsls	r2, r0, #29
 8001604:	08db      	lsrs	r3, r3, #3
 8001606:	4313      	orrs	r3, r2
 8001608:	08c0      	lsrs	r0, r0, #3
 800160a:	e6ac      	b.n	8001366 <__aeabi_dadd+0x25a>
 800160c:	4643      	mov	r3, r8
 800160e:	4642      	mov	r2, r8
 8001610:	08c9      	lsrs	r1, r1, #3
 8001612:	075b      	lsls	r3, r3, #29
 8001614:	4655      	mov	r5, sl
 8001616:	430b      	orrs	r3, r1
 8001618:	08d0      	lsrs	r0, r2, #3
 800161a:	e6c5      	b.n	80013a8 <__aeabi_dadd+0x29c>
 800161c:	4643      	mov	r3, r8
 800161e:	4642      	mov	r2, r8
 8001620:	075b      	lsls	r3, r3, #29
 8001622:	08c9      	lsrs	r1, r1, #3
 8001624:	430b      	orrs	r3, r1
 8001626:	08d0      	lsrs	r0, r2, #3
 8001628:	e6be      	b.n	80013a8 <__aeabi_dadd+0x29c>
 800162a:	4303      	orrs	r3, r0
 800162c:	001c      	movs	r4, r3
 800162e:	1e63      	subs	r3, r4, #1
 8001630:	419c      	sbcs	r4, r3
 8001632:	e6fc      	b.n	800142e <__aeabi_dadd+0x322>
 8001634:	0002      	movs	r2, r0
 8001636:	3c20      	subs	r4, #32
 8001638:	40e2      	lsrs	r2, r4
 800163a:	0014      	movs	r4, r2
 800163c:	4662      	mov	r2, ip
 800163e:	2a20      	cmp	r2, #32
 8001640:	d003      	beq.n	800164a <__aeabi_dadd+0x53e>
 8001642:	2540      	movs	r5, #64	; 0x40
 8001644:	1aad      	subs	r5, r5, r2
 8001646:	40a8      	lsls	r0, r5
 8001648:	4303      	orrs	r3, r0
 800164a:	1e58      	subs	r0, r3, #1
 800164c:	4183      	sbcs	r3, r0
 800164e:	4323      	orrs	r3, r4
 8001650:	e775      	b.n	800153e <__aeabi_dadd+0x432>
 8001652:	2a00      	cmp	r2, #0
 8001654:	d0e2      	beq.n	800161c <__aeabi_dadd+0x510>
 8001656:	003a      	movs	r2, r7
 8001658:	430a      	orrs	r2, r1
 800165a:	d0cd      	beq.n	80015f8 <__aeabi_dadd+0x4ec>
 800165c:	0742      	lsls	r2, r0, #29
 800165e:	08db      	lsrs	r3, r3, #3
 8001660:	4313      	orrs	r3, r2
 8001662:	2280      	movs	r2, #128	; 0x80
 8001664:	08c0      	lsrs	r0, r0, #3
 8001666:	0312      	lsls	r2, r2, #12
 8001668:	4210      	tst	r0, r2
 800166a:	d006      	beq.n	800167a <__aeabi_dadd+0x56e>
 800166c:	08fc      	lsrs	r4, r7, #3
 800166e:	4214      	tst	r4, r2
 8001670:	d103      	bne.n	800167a <__aeabi_dadd+0x56e>
 8001672:	0020      	movs	r0, r4
 8001674:	08cb      	lsrs	r3, r1, #3
 8001676:	077a      	lsls	r2, r7, #29
 8001678:	4313      	orrs	r3, r2
 800167a:	0f5a      	lsrs	r2, r3, #29
 800167c:	00db      	lsls	r3, r3, #3
 800167e:	0752      	lsls	r2, r2, #29
 8001680:	08db      	lsrs	r3, r3, #3
 8001682:	4313      	orrs	r3, r2
 8001684:	e690      	b.n	80013a8 <__aeabi_dadd+0x29c>
 8001686:	4643      	mov	r3, r8
 8001688:	430b      	orrs	r3, r1
 800168a:	d100      	bne.n	800168e <__aeabi_dadd+0x582>
 800168c:	e709      	b.n	80014a2 <__aeabi_dadd+0x396>
 800168e:	4643      	mov	r3, r8
 8001690:	4642      	mov	r2, r8
 8001692:	08c9      	lsrs	r1, r1, #3
 8001694:	075b      	lsls	r3, r3, #29
 8001696:	4655      	mov	r5, sl
 8001698:	430b      	orrs	r3, r1
 800169a:	08d0      	lsrs	r0, r2, #3
 800169c:	e666      	b.n	800136c <__aeabi_dadd+0x260>
 800169e:	1acc      	subs	r4, r1, r3
 80016a0:	42a1      	cmp	r1, r4
 80016a2:	4189      	sbcs	r1, r1
 80016a4:	1a3f      	subs	r7, r7, r0
 80016a6:	4249      	negs	r1, r1
 80016a8:	4655      	mov	r5, sl
 80016aa:	2601      	movs	r6, #1
 80016ac:	1a7f      	subs	r7, r7, r1
 80016ae:	e57e      	b.n	80011ae <__aeabi_dadd+0xa2>
 80016b0:	4642      	mov	r2, r8
 80016b2:	1a5c      	subs	r4, r3, r1
 80016b4:	1a87      	subs	r7, r0, r2
 80016b6:	42a3      	cmp	r3, r4
 80016b8:	4192      	sbcs	r2, r2
 80016ba:	4252      	negs	r2, r2
 80016bc:	1abf      	subs	r7, r7, r2
 80016be:	023a      	lsls	r2, r7, #8
 80016c0:	d53d      	bpl.n	800173e <__aeabi_dadd+0x632>
 80016c2:	1acc      	subs	r4, r1, r3
 80016c4:	42a1      	cmp	r1, r4
 80016c6:	4189      	sbcs	r1, r1
 80016c8:	4643      	mov	r3, r8
 80016ca:	4249      	negs	r1, r1
 80016cc:	1a1f      	subs	r7, r3, r0
 80016ce:	4655      	mov	r5, sl
 80016d0:	1a7f      	subs	r7, r7, r1
 80016d2:	e595      	b.n	8001200 <__aeabi_dadd+0xf4>
 80016d4:	077b      	lsls	r3, r7, #29
 80016d6:	08c9      	lsrs	r1, r1, #3
 80016d8:	430b      	orrs	r3, r1
 80016da:	08f8      	lsrs	r0, r7, #3
 80016dc:	e643      	b.n	8001366 <__aeabi_dadd+0x25a>
 80016de:	4644      	mov	r4, r8
 80016e0:	08db      	lsrs	r3, r3, #3
 80016e2:	430c      	orrs	r4, r1
 80016e4:	d130      	bne.n	8001748 <__aeabi_dadd+0x63c>
 80016e6:	0742      	lsls	r2, r0, #29
 80016e8:	4313      	orrs	r3, r2
 80016ea:	08c0      	lsrs	r0, r0, #3
 80016ec:	e65c      	b.n	80013a8 <__aeabi_dadd+0x29c>
 80016ee:	077b      	lsls	r3, r7, #29
 80016f0:	08c9      	lsrs	r1, r1, #3
 80016f2:	430b      	orrs	r3, r1
 80016f4:	08f8      	lsrs	r0, r7, #3
 80016f6:	e639      	b.n	800136c <__aeabi_dadd+0x260>
 80016f8:	185c      	adds	r4, r3, r1
 80016fa:	429c      	cmp	r4, r3
 80016fc:	419b      	sbcs	r3, r3
 80016fe:	4440      	add	r0, r8
 8001700:	425b      	negs	r3, r3
 8001702:	18c7      	adds	r7, r0, r3
 8001704:	023b      	lsls	r3, r7, #8
 8001706:	d400      	bmi.n	800170a <__aeabi_dadd+0x5fe>
 8001708:	e625      	b.n	8001356 <__aeabi_dadd+0x24a>
 800170a:	4b1d      	ldr	r3, [pc, #116]	; (8001780 <__aeabi_dadd+0x674>)
 800170c:	2601      	movs	r6, #1
 800170e:	401f      	ands	r7, r3
 8001710:	e621      	b.n	8001356 <__aeabi_dadd+0x24a>
 8001712:	0004      	movs	r4, r0
 8001714:	3a20      	subs	r2, #32
 8001716:	40d4      	lsrs	r4, r2
 8001718:	4662      	mov	r2, ip
 800171a:	2a20      	cmp	r2, #32
 800171c:	d004      	beq.n	8001728 <__aeabi_dadd+0x61c>
 800171e:	2240      	movs	r2, #64	; 0x40
 8001720:	4666      	mov	r6, ip
 8001722:	1b92      	subs	r2, r2, r6
 8001724:	4090      	lsls	r0, r2
 8001726:	4303      	orrs	r3, r0
 8001728:	1e5a      	subs	r2, r3, #1
 800172a:	4193      	sbcs	r3, r2
 800172c:	431c      	orrs	r4, r3
 800172e:	e67e      	b.n	800142e <__aeabi_dadd+0x322>
 8001730:	185c      	adds	r4, r3, r1
 8001732:	428c      	cmp	r4, r1
 8001734:	4189      	sbcs	r1, r1
 8001736:	4440      	add	r0, r8
 8001738:	4249      	negs	r1, r1
 800173a:	1847      	adds	r7, r0, r1
 800173c:	e6dd      	b.n	80014fa <__aeabi_dadd+0x3ee>
 800173e:	0023      	movs	r3, r4
 8001740:	433b      	orrs	r3, r7
 8001742:	d100      	bne.n	8001746 <__aeabi_dadd+0x63a>
 8001744:	e6ad      	b.n	80014a2 <__aeabi_dadd+0x396>
 8001746:	e606      	b.n	8001356 <__aeabi_dadd+0x24a>
 8001748:	0744      	lsls	r4, r0, #29
 800174a:	4323      	orrs	r3, r4
 800174c:	2480      	movs	r4, #128	; 0x80
 800174e:	08c0      	lsrs	r0, r0, #3
 8001750:	0324      	lsls	r4, r4, #12
 8001752:	4220      	tst	r0, r4
 8001754:	d008      	beq.n	8001768 <__aeabi_dadd+0x65c>
 8001756:	4642      	mov	r2, r8
 8001758:	08d6      	lsrs	r6, r2, #3
 800175a:	4226      	tst	r6, r4
 800175c:	d104      	bne.n	8001768 <__aeabi_dadd+0x65c>
 800175e:	4655      	mov	r5, sl
 8001760:	0030      	movs	r0, r6
 8001762:	08cb      	lsrs	r3, r1, #3
 8001764:	0751      	lsls	r1, r2, #29
 8001766:	430b      	orrs	r3, r1
 8001768:	0f5a      	lsrs	r2, r3, #29
 800176a:	00db      	lsls	r3, r3, #3
 800176c:	08db      	lsrs	r3, r3, #3
 800176e:	0752      	lsls	r2, r2, #29
 8001770:	4313      	orrs	r3, r2
 8001772:	e619      	b.n	80013a8 <__aeabi_dadd+0x29c>
 8001774:	2300      	movs	r3, #0
 8001776:	4a01      	ldr	r2, [pc, #4]	; (800177c <__aeabi_dadd+0x670>)
 8001778:	001f      	movs	r7, r3
 800177a:	e55e      	b.n	800123a <__aeabi_dadd+0x12e>
 800177c:	000007ff 	.word	0x000007ff
 8001780:	ff7fffff 	.word	0xff7fffff

08001784 <__aeabi_ddiv>:
 8001784:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001786:	4657      	mov	r7, sl
 8001788:	464e      	mov	r6, r9
 800178a:	4645      	mov	r5, r8
 800178c:	46de      	mov	lr, fp
 800178e:	b5e0      	push	{r5, r6, r7, lr}
 8001790:	4681      	mov	r9, r0
 8001792:	0005      	movs	r5, r0
 8001794:	030c      	lsls	r4, r1, #12
 8001796:	0048      	lsls	r0, r1, #1
 8001798:	4692      	mov	sl, r2
 800179a:	001f      	movs	r7, r3
 800179c:	b085      	sub	sp, #20
 800179e:	0b24      	lsrs	r4, r4, #12
 80017a0:	0d40      	lsrs	r0, r0, #21
 80017a2:	0fce      	lsrs	r6, r1, #31
 80017a4:	2800      	cmp	r0, #0
 80017a6:	d100      	bne.n	80017aa <__aeabi_ddiv+0x26>
 80017a8:	e156      	b.n	8001a58 <__aeabi_ddiv+0x2d4>
 80017aa:	4bd4      	ldr	r3, [pc, #848]	; (8001afc <__aeabi_ddiv+0x378>)
 80017ac:	4298      	cmp	r0, r3
 80017ae:	d100      	bne.n	80017b2 <__aeabi_ddiv+0x2e>
 80017b0:	e172      	b.n	8001a98 <__aeabi_ddiv+0x314>
 80017b2:	0f6b      	lsrs	r3, r5, #29
 80017b4:	00e4      	lsls	r4, r4, #3
 80017b6:	431c      	orrs	r4, r3
 80017b8:	2380      	movs	r3, #128	; 0x80
 80017ba:	041b      	lsls	r3, r3, #16
 80017bc:	4323      	orrs	r3, r4
 80017be:	4698      	mov	r8, r3
 80017c0:	4bcf      	ldr	r3, [pc, #828]	; (8001b00 <__aeabi_ddiv+0x37c>)
 80017c2:	00ed      	lsls	r5, r5, #3
 80017c4:	469b      	mov	fp, r3
 80017c6:	2300      	movs	r3, #0
 80017c8:	4699      	mov	r9, r3
 80017ca:	4483      	add	fp, r0
 80017cc:	9300      	str	r3, [sp, #0]
 80017ce:	033c      	lsls	r4, r7, #12
 80017d0:	007b      	lsls	r3, r7, #1
 80017d2:	4650      	mov	r0, sl
 80017d4:	0b24      	lsrs	r4, r4, #12
 80017d6:	0d5b      	lsrs	r3, r3, #21
 80017d8:	0fff      	lsrs	r7, r7, #31
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d100      	bne.n	80017e0 <__aeabi_ddiv+0x5c>
 80017de:	e11f      	b.n	8001a20 <__aeabi_ddiv+0x29c>
 80017e0:	4ac6      	ldr	r2, [pc, #792]	; (8001afc <__aeabi_ddiv+0x378>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d100      	bne.n	80017e8 <__aeabi_ddiv+0x64>
 80017e6:	e162      	b.n	8001aae <__aeabi_ddiv+0x32a>
 80017e8:	49c5      	ldr	r1, [pc, #788]	; (8001b00 <__aeabi_ddiv+0x37c>)
 80017ea:	0f42      	lsrs	r2, r0, #29
 80017ec:	468c      	mov	ip, r1
 80017ee:	00e4      	lsls	r4, r4, #3
 80017f0:	4659      	mov	r1, fp
 80017f2:	4314      	orrs	r4, r2
 80017f4:	2280      	movs	r2, #128	; 0x80
 80017f6:	4463      	add	r3, ip
 80017f8:	0412      	lsls	r2, r2, #16
 80017fa:	1acb      	subs	r3, r1, r3
 80017fc:	4314      	orrs	r4, r2
 80017fe:	469b      	mov	fp, r3
 8001800:	00c2      	lsls	r2, r0, #3
 8001802:	2000      	movs	r0, #0
 8001804:	0033      	movs	r3, r6
 8001806:	407b      	eors	r3, r7
 8001808:	469a      	mov	sl, r3
 800180a:	464b      	mov	r3, r9
 800180c:	2b0f      	cmp	r3, #15
 800180e:	d827      	bhi.n	8001860 <__aeabi_ddiv+0xdc>
 8001810:	49bc      	ldr	r1, [pc, #752]	; (8001b04 <__aeabi_ddiv+0x380>)
 8001812:	009b      	lsls	r3, r3, #2
 8001814:	58cb      	ldr	r3, [r1, r3]
 8001816:	469f      	mov	pc, r3
 8001818:	46b2      	mov	sl, r6
 800181a:	9b00      	ldr	r3, [sp, #0]
 800181c:	2b02      	cmp	r3, #2
 800181e:	d016      	beq.n	800184e <__aeabi_ddiv+0xca>
 8001820:	2b03      	cmp	r3, #3
 8001822:	d100      	bne.n	8001826 <__aeabi_ddiv+0xa2>
 8001824:	e28e      	b.n	8001d44 <__aeabi_ddiv+0x5c0>
 8001826:	2b01      	cmp	r3, #1
 8001828:	d000      	beq.n	800182c <__aeabi_ddiv+0xa8>
 800182a:	e0d9      	b.n	80019e0 <__aeabi_ddiv+0x25c>
 800182c:	2300      	movs	r3, #0
 800182e:	2400      	movs	r4, #0
 8001830:	2500      	movs	r5, #0
 8001832:	4652      	mov	r2, sl
 8001834:	051b      	lsls	r3, r3, #20
 8001836:	4323      	orrs	r3, r4
 8001838:	07d2      	lsls	r2, r2, #31
 800183a:	4313      	orrs	r3, r2
 800183c:	0028      	movs	r0, r5
 800183e:	0019      	movs	r1, r3
 8001840:	b005      	add	sp, #20
 8001842:	bcf0      	pop	{r4, r5, r6, r7}
 8001844:	46bb      	mov	fp, r7
 8001846:	46b2      	mov	sl, r6
 8001848:	46a9      	mov	r9, r5
 800184a:	46a0      	mov	r8, r4
 800184c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800184e:	2400      	movs	r4, #0
 8001850:	2500      	movs	r5, #0
 8001852:	4baa      	ldr	r3, [pc, #680]	; (8001afc <__aeabi_ddiv+0x378>)
 8001854:	e7ed      	b.n	8001832 <__aeabi_ddiv+0xae>
 8001856:	46ba      	mov	sl, r7
 8001858:	46a0      	mov	r8, r4
 800185a:	0015      	movs	r5, r2
 800185c:	9000      	str	r0, [sp, #0]
 800185e:	e7dc      	b.n	800181a <__aeabi_ddiv+0x96>
 8001860:	4544      	cmp	r4, r8
 8001862:	d200      	bcs.n	8001866 <__aeabi_ddiv+0xe2>
 8001864:	e1c7      	b.n	8001bf6 <__aeabi_ddiv+0x472>
 8001866:	d100      	bne.n	800186a <__aeabi_ddiv+0xe6>
 8001868:	e1c2      	b.n	8001bf0 <__aeabi_ddiv+0x46c>
 800186a:	2301      	movs	r3, #1
 800186c:	425b      	negs	r3, r3
 800186e:	469c      	mov	ip, r3
 8001870:	002e      	movs	r6, r5
 8001872:	4640      	mov	r0, r8
 8001874:	2500      	movs	r5, #0
 8001876:	44e3      	add	fp, ip
 8001878:	0223      	lsls	r3, r4, #8
 800187a:	0e14      	lsrs	r4, r2, #24
 800187c:	431c      	orrs	r4, r3
 800187e:	0c1b      	lsrs	r3, r3, #16
 8001880:	4699      	mov	r9, r3
 8001882:	0423      	lsls	r3, r4, #16
 8001884:	0c1f      	lsrs	r7, r3, #16
 8001886:	0212      	lsls	r2, r2, #8
 8001888:	4649      	mov	r1, r9
 800188a:	9200      	str	r2, [sp, #0]
 800188c:	9701      	str	r7, [sp, #4]
 800188e:	f7fe fce3 	bl	8000258 <__aeabi_uidivmod>
 8001892:	0002      	movs	r2, r0
 8001894:	437a      	muls	r2, r7
 8001896:	040b      	lsls	r3, r1, #16
 8001898:	0c31      	lsrs	r1, r6, #16
 800189a:	4680      	mov	r8, r0
 800189c:	4319      	orrs	r1, r3
 800189e:	428a      	cmp	r2, r1
 80018a0:	d907      	bls.n	80018b2 <__aeabi_ddiv+0x12e>
 80018a2:	2301      	movs	r3, #1
 80018a4:	425b      	negs	r3, r3
 80018a6:	469c      	mov	ip, r3
 80018a8:	1909      	adds	r1, r1, r4
 80018aa:	44e0      	add	r8, ip
 80018ac:	428c      	cmp	r4, r1
 80018ae:	d800      	bhi.n	80018b2 <__aeabi_ddiv+0x12e>
 80018b0:	e207      	b.n	8001cc2 <__aeabi_ddiv+0x53e>
 80018b2:	1a88      	subs	r0, r1, r2
 80018b4:	4649      	mov	r1, r9
 80018b6:	f7fe fccf 	bl	8000258 <__aeabi_uidivmod>
 80018ba:	0409      	lsls	r1, r1, #16
 80018bc:	468c      	mov	ip, r1
 80018be:	0431      	lsls	r1, r6, #16
 80018c0:	4666      	mov	r6, ip
 80018c2:	9a01      	ldr	r2, [sp, #4]
 80018c4:	0c09      	lsrs	r1, r1, #16
 80018c6:	4342      	muls	r2, r0
 80018c8:	0003      	movs	r3, r0
 80018ca:	4331      	orrs	r1, r6
 80018cc:	428a      	cmp	r2, r1
 80018ce:	d904      	bls.n	80018da <__aeabi_ddiv+0x156>
 80018d0:	1909      	adds	r1, r1, r4
 80018d2:	3b01      	subs	r3, #1
 80018d4:	428c      	cmp	r4, r1
 80018d6:	d800      	bhi.n	80018da <__aeabi_ddiv+0x156>
 80018d8:	e1ed      	b.n	8001cb6 <__aeabi_ddiv+0x532>
 80018da:	1a88      	subs	r0, r1, r2
 80018dc:	4642      	mov	r2, r8
 80018de:	0412      	lsls	r2, r2, #16
 80018e0:	431a      	orrs	r2, r3
 80018e2:	4690      	mov	r8, r2
 80018e4:	4641      	mov	r1, r8
 80018e6:	9b00      	ldr	r3, [sp, #0]
 80018e8:	040e      	lsls	r6, r1, #16
 80018ea:	0c1b      	lsrs	r3, r3, #16
 80018ec:	001f      	movs	r7, r3
 80018ee:	9302      	str	r3, [sp, #8]
 80018f0:	9b00      	ldr	r3, [sp, #0]
 80018f2:	0c36      	lsrs	r6, r6, #16
 80018f4:	041b      	lsls	r3, r3, #16
 80018f6:	0c19      	lsrs	r1, r3, #16
 80018f8:	000b      	movs	r3, r1
 80018fa:	4373      	muls	r3, r6
 80018fc:	0c12      	lsrs	r2, r2, #16
 80018fe:	437e      	muls	r6, r7
 8001900:	9103      	str	r1, [sp, #12]
 8001902:	4351      	muls	r1, r2
 8001904:	437a      	muls	r2, r7
 8001906:	0c1f      	lsrs	r7, r3, #16
 8001908:	46bc      	mov	ip, r7
 800190a:	1876      	adds	r6, r6, r1
 800190c:	4466      	add	r6, ip
 800190e:	42b1      	cmp	r1, r6
 8001910:	d903      	bls.n	800191a <__aeabi_ddiv+0x196>
 8001912:	2180      	movs	r1, #128	; 0x80
 8001914:	0249      	lsls	r1, r1, #9
 8001916:	468c      	mov	ip, r1
 8001918:	4462      	add	r2, ip
 800191a:	0c31      	lsrs	r1, r6, #16
 800191c:	188a      	adds	r2, r1, r2
 800191e:	0431      	lsls	r1, r6, #16
 8001920:	041e      	lsls	r6, r3, #16
 8001922:	0c36      	lsrs	r6, r6, #16
 8001924:	198e      	adds	r6, r1, r6
 8001926:	4290      	cmp	r0, r2
 8001928:	d302      	bcc.n	8001930 <__aeabi_ddiv+0x1ac>
 800192a:	d112      	bne.n	8001952 <__aeabi_ddiv+0x1ce>
 800192c:	42b5      	cmp	r5, r6
 800192e:	d210      	bcs.n	8001952 <__aeabi_ddiv+0x1ce>
 8001930:	4643      	mov	r3, r8
 8001932:	1e59      	subs	r1, r3, #1
 8001934:	9b00      	ldr	r3, [sp, #0]
 8001936:	469c      	mov	ip, r3
 8001938:	4465      	add	r5, ip
 800193a:	001f      	movs	r7, r3
 800193c:	429d      	cmp	r5, r3
 800193e:	419b      	sbcs	r3, r3
 8001940:	425b      	negs	r3, r3
 8001942:	191b      	adds	r3, r3, r4
 8001944:	18c0      	adds	r0, r0, r3
 8001946:	4284      	cmp	r4, r0
 8001948:	d200      	bcs.n	800194c <__aeabi_ddiv+0x1c8>
 800194a:	e1a0      	b.n	8001c8e <__aeabi_ddiv+0x50a>
 800194c:	d100      	bne.n	8001950 <__aeabi_ddiv+0x1cc>
 800194e:	e19b      	b.n	8001c88 <__aeabi_ddiv+0x504>
 8001950:	4688      	mov	r8, r1
 8001952:	1bae      	subs	r6, r5, r6
 8001954:	42b5      	cmp	r5, r6
 8001956:	41ad      	sbcs	r5, r5
 8001958:	1a80      	subs	r0, r0, r2
 800195a:	426d      	negs	r5, r5
 800195c:	1b40      	subs	r0, r0, r5
 800195e:	4284      	cmp	r4, r0
 8001960:	d100      	bne.n	8001964 <__aeabi_ddiv+0x1e0>
 8001962:	e1d5      	b.n	8001d10 <__aeabi_ddiv+0x58c>
 8001964:	4649      	mov	r1, r9
 8001966:	f7fe fc77 	bl	8000258 <__aeabi_uidivmod>
 800196a:	9a01      	ldr	r2, [sp, #4]
 800196c:	040b      	lsls	r3, r1, #16
 800196e:	4342      	muls	r2, r0
 8001970:	0c31      	lsrs	r1, r6, #16
 8001972:	0005      	movs	r5, r0
 8001974:	4319      	orrs	r1, r3
 8001976:	428a      	cmp	r2, r1
 8001978:	d900      	bls.n	800197c <__aeabi_ddiv+0x1f8>
 800197a:	e16c      	b.n	8001c56 <__aeabi_ddiv+0x4d2>
 800197c:	1a88      	subs	r0, r1, r2
 800197e:	4649      	mov	r1, r9
 8001980:	f7fe fc6a 	bl	8000258 <__aeabi_uidivmod>
 8001984:	9a01      	ldr	r2, [sp, #4]
 8001986:	0436      	lsls	r6, r6, #16
 8001988:	4342      	muls	r2, r0
 800198a:	0409      	lsls	r1, r1, #16
 800198c:	0c36      	lsrs	r6, r6, #16
 800198e:	0003      	movs	r3, r0
 8001990:	430e      	orrs	r6, r1
 8001992:	42b2      	cmp	r2, r6
 8001994:	d900      	bls.n	8001998 <__aeabi_ddiv+0x214>
 8001996:	e153      	b.n	8001c40 <__aeabi_ddiv+0x4bc>
 8001998:	9803      	ldr	r0, [sp, #12]
 800199a:	1ab6      	subs	r6, r6, r2
 800199c:	0002      	movs	r2, r0
 800199e:	042d      	lsls	r5, r5, #16
 80019a0:	431d      	orrs	r5, r3
 80019a2:	9f02      	ldr	r7, [sp, #8]
 80019a4:	042b      	lsls	r3, r5, #16
 80019a6:	0c1b      	lsrs	r3, r3, #16
 80019a8:	435a      	muls	r2, r3
 80019aa:	437b      	muls	r3, r7
 80019ac:	469c      	mov	ip, r3
 80019ae:	0c29      	lsrs	r1, r5, #16
 80019b0:	4348      	muls	r0, r1
 80019b2:	0c13      	lsrs	r3, r2, #16
 80019b4:	4484      	add	ip, r0
 80019b6:	4463      	add	r3, ip
 80019b8:	4379      	muls	r1, r7
 80019ba:	4298      	cmp	r0, r3
 80019bc:	d903      	bls.n	80019c6 <__aeabi_ddiv+0x242>
 80019be:	2080      	movs	r0, #128	; 0x80
 80019c0:	0240      	lsls	r0, r0, #9
 80019c2:	4684      	mov	ip, r0
 80019c4:	4461      	add	r1, ip
 80019c6:	0c18      	lsrs	r0, r3, #16
 80019c8:	0412      	lsls	r2, r2, #16
 80019ca:	041b      	lsls	r3, r3, #16
 80019cc:	0c12      	lsrs	r2, r2, #16
 80019ce:	1841      	adds	r1, r0, r1
 80019d0:	189b      	adds	r3, r3, r2
 80019d2:	428e      	cmp	r6, r1
 80019d4:	d200      	bcs.n	80019d8 <__aeabi_ddiv+0x254>
 80019d6:	e0ff      	b.n	8001bd8 <__aeabi_ddiv+0x454>
 80019d8:	d100      	bne.n	80019dc <__aeabi_ddiv+0x258>
 80019da:	e0fa      	b.n	8001bd2 <__aeabi_ddiv+0x44e>
 80019dc:	2301      	movs	r3, #1
 80019de:	431d      	orrs	r5, r3
 80019e0:	4a49      	ldr	r2, [pc, #292]	; (8001b08 <__aeabi_ddiv+0x384>)
 80019e2:	445a      	add	r2, fp
 80019e4:	2a00      	cmp	r2, #0
 80019e6:	dc00      	bgt.n	80019ea <__aeabi_ddiv+0x266>
 80019e8:	e0aa      	b.n	8001b40 <__aeabi_ddiv+0x3bc>
 80019ea:	076b      	lsls	r3, r5, #29
 80019ec:	d000      	beq.n	80019f0 <__aeabi_ddiv+0x26c>
 80019ee:	e13d      	b.n	8001c6c <__aeabi_ddiv+0x4e8>
 80019f0:	08ed      	lsrs	r5, r5, #3
 80019f2:	4643      	mov	r3, r8
 80019f4:	01db      	lsls	r3, r3, #7
 80019f6:	d506      	bpl.n	8001a06 <__aeabi_ddiv+0x282>
 80019f8:	4642      	mov	r2, r8
 80019fa:	4b44      	ldr	r3, [pc, #272]	; (8001b0c <__aeabi_ddiv+0x388>)
 80019fc:	401a      	ands	r2, r3
 80019fe:	4690      	mov	r8, r2
 8001a00:	2280      	movs	r2, #128	; 0x80
 8001a02:	00d2      	lsls	r2, r2, #3
 8001a04:	445a      	add	r2, fp
 8001a06:	4b42      	ldr	r3, [pc, #264]	; (8001b10 <__aeabi_ddiv+0x38c>)
 8001a08:	429a      	cmp	r2, r3
 8001a0a:	dd00      	ble.n	8001a0e <__aeabi_ddiv+0x28a>
 8001a0c:	e71f      	b.n	800184e <__aeabi_ddiv+0xca>
 8001a0e:	4643      	mov	r3, r8
 8001a10:	075b      	lsls	r3, r3, #29
 8001a12:	431d      	orrs	r5, r3
 8001a14:	4643      	mov	r3, r8
 8001a16:	0552      	lsls	r2, r2, #21
 8001a18:	025c      	lsls	r4, r3, #9
 8001a1a:	0b24      	lsrs	r4, r4, #12
 8001a1c:	0d53      	lsrs	r3, r2, #21
 8001a1e:	e708      	b.n	8001832 <__aeabi_ddiv+0xae>
 8001a20:	4652      	mov	r2, sl
 8001a22:	4322      	orrs	r2, r4
 8001a24:	d100      	bne.n	8001a28 <__aeabi_ddiv+0x2a4>
 8001a26:	e07b      	b.n	8001b20 <__aeabi_ddiv+0x39c>
 8001a28:	2c00      	cmp	r4, #0
 8001a2a:	d100      	bne.n	8001a2e <__aeabi_ddiv+0x2aa>
 8001a2c:	e0fa      	b.n	8001c24 <__aeabi_ddiv+0x4a0>
 8001a2e:	0020      	movs	r0, r4
 8001a30:	f001 fa22 	bl	8002e78 <__clzsi2>
 8001a34:	0002      	movs	r2, r0
 8001a36:	3a0b      	subs	r2, #11
 8001a38:	231d      	movs	r3, #29
 8001a3a:	0001      	movs	r1, r0
 8001a3c:	1a9b      	subs	r3, r3, r2
 8001a3e:	4652      	mov	r2, sl
 8001a40:	3908      	subs	r1, #8
 8001a42:	40da      	lsrs	r2, r3
 8001a44:	408c      	lsls	r4, r1
 8001a46:	4314      	orrs	r4, r2
 8001a48:	4652      	mov	r2, sl
 8001a4a:	408a      	lsls	r2, r1
 8001a4c:	4b31      	ldr	r3, [pc, #196]	; (8001b14 <__aeabi_ddiv+0x390>)
 8001a4e:	4458      	add	r0, fp
 8001a50:	469b      	mov	fp, r3
 8001a52:	4483      	add	fp, r0
 8001a54:	2000      	movs	r0, #0
 8001a56:	e6d5      	b.n	8001804 <__aeabi_ddiv+0x80>
 8001a58:	464b      	mov	r3, r9
 8001a5a:	4323      	orrs	r3, r4
 8001a5c:	4698      	mov	r8, r3
 8001a5e:	d044      	beq.n	8001aea <__aeabi_ddiv+0x366>
 8001a60:	2c00      	cmp	r4, #0
 8001a62:	d100      	bne.n	8001a66 <__aeabi_ddiv+0x2e2>
 8001a64:	e0ce      	b.n	8001c04 <__aeabi_ddiv+0x480>
 8001a66:	0020      	movs	r0, r4
 8001a68:	f001 fa06 	bl	8002e78 <__clzsi2>
 8001a6c:	0001      	movs	r1, r0
 8001a6e:	0002      	movs	r2, r0
 8001a70:	390b      	subs	r1, #11
 8001a72:	231d      	movs	r3, #29
 8001a74:	1a5b      	subs	r3, r3, r1
 8001a76:	4649      	mov	r1, r9
 8001a78:	0010      	movs	r0, r2
 8001a7a:	40d9      	lsrs	r1, r3
 8001a7c:	3808      	subs	r0, #8
 8001a7e:	4084      	lsls	r4, r0
 8001a80:	000b      	movs	r3, r1
 8001a82:	464d      	mov	r5, r9
 8001a84:	4323      	orrs	r3, r4
 8001a86:	4698      	mov	r8, r3
 8001a88:	4085      	lsls	r5, r0
 8001a8a:	4823      	ldr	r0, [pc, #140]	; (8001b18 <__aeabi_ddiv+0x394>)
 8001a8c:	1a83      	subs	r3, r0, r2
 8001a8e:	469b      	mov	fp, r3
 8001a90:	2300      	movs	r3, #0
 8001a92:	4699      	mov	r9, r3
 8001a94:	9300      	str	r3, [sp, #0]
 8001a96:	e69a      	b.n	80017ce <__aeabi_ddiv+0x4a>
 8001a98:	464b      	mov	r3, r9
 8001a9a:	4323      	orrs	r3, r4
 8001a9c:	4698      	mov	r8, r3
 8001a9e:	d11d      	bne.n	8001adc <__aeabi_ddiv+0x358>
 8001aa0:	2308      	movs	r3, #8
 8001aa2:	4699      	mov	r9, r3
 8001aa4:	3b06      	subs	r3, #6
 8001aa6:	2500      	movs	r5, #0
 8001aa8:	4683      	mov	fp, r0
 8001aaa:	9300      	str	r3, [sp, #0]
 8001aac:	e68f      	b.n	80017ce <__aeabi_ddiv+0x4a>
 8001aae:	4652      	mov	r2, sl
 8001ab0:	4322      	orrs	r2, r4
 8001ab2:	d109      	bne.n	8001ac8 <__aeabi_ddiv+0x344>
 8001ab4:	2302      	movs	r3, #2
 8001ab6:	4649      	mov	r1, r9
 8001ab8:	4319      	orrs	r1, r3
 8001aba:	4b18      	ldr	r3, [pc, #96]	; (8001b1c <__aeabi_ddiv+0x398>)
 8001abc:	4689      	mov	r9, r1
 8001abe:	469c      	mov	ip, r3
 8001ac0:	2400      	movs	r4, #0
 8001ac2:	2002      	movs	r0, #2
 8001ac4:	44e3      	add	fp, ip
 8001ac6:	e69d      	b.n	8001804 <__aeabi_ddiv+0x80>
 8001ac8:	2303      	movs	r3, #3
 8001aca:	464a      	mov	r2, r9
 8001acc:	431a      	orrs	r2, r3
 8001ace:	4b13      	ldr	r3, [pc, #76]	; (8001b1c <__aeabi_ddiv+0x398>)
 8001ad0:	4691      	mov	r9, r2
 8001ad2:	469c      	mov	ip, r3
 8001ad4:	4652      	mov	r2, sl
 8001ad6:	2003      	movs	r0, #3
 8001ad8:	44e3      	add	fp, ip
 8001ada:	e693      	b.n	8001804 <__aeabi_ddiv+0x80>
 8001adc:	230c      	movs	r3, #12
 8001ade:	4699      	mov	r9, r3
 8001ae0:	3b09      	subs	r3, #9
 8001ae2:	46a0      	mov	r8, r4
 8001ae4:	4683      	mov	fp, r0
 8001ae6:	9300      	str	r3, [sp, #0]
 8001ae8:	e671      	b.n	80017ce <__aeabi_ddiv+0x4a>
 8001aea:	2304      	movs	r3, #4
 8001aec:	4699      	mov	r9, r3
 8001aee:	2300      	movs	r3, #0
 8001af0:	469b      	mov	fp, r3
 8001af2:	3301      	adds	r3, #1
 8001af4:	2500      	movs	r5, #0
 8001af6:	9300      	str	r3, [sp, #0]
 8001af8:	e669      	b.n	80017ce <__aeabi_ddiv+0x4a>
 8001afa:	46c0      	nop			; (mov r8, r8)
 8001afc:	000007ff 	.word	0x000007ff
 8001b00:	fffffc01 	.word	0xfffffc01
 8001b04:	0800dee0 	.word	0x0800dee0
 8001b08:	000003ff 	.word	0x000003ff
 8001b0c:	feffffff 	.word	0xfeffffff
 8001b10:	000007fe 	.word	0x000007fe
 8001b14:	000003f3 	.word	0x000003f3
 8001b18:	fffffc0d 	.word	0xfffffc0d
 8001b1c:	fffff801 	.word	0xfffff801
 8001b20:	4649      	mov	r1, r9
 8001b22:	2301      	movs	r3, #1
 8001b24:	4319      	orrs	r1, r3
 8001b26:	4689      	mov	r9, r1
 8001b28:	2400      	movs	r4, #0
 8001b2a:	2001      	movs	r0, #1
 8001b2c:	e66a      	b.n	8001804 <__aeabi_ddiv+0x80>
 8001b2e:	2300      	movs	r3, #0
 8001b30:	2480      	movs	r4, #128	; 0x80
 8001b32:	469a      	mov	sl, r3
 8001b34:	2500      	movs	r5, #0
 8001b36:	4b8a      	ldr	r3, [pc, #552]	; (8001d60 <__aeabi_ddiv+0x5dc>)
 8001b38:	0324      	lsls	r4, r4, #12
 8001b3a:	e67a      	b.n	8001832 <__aeabi_ddiv+0xae>
 8001b3c:	2501      	movs	r5, #1
 8001b3e:	426d      	negs	r5, r5
 8001b40:	2301      	movs	r3, #1
 8001b42:	1a9b      	subs	r3, r3, r2
 8001b44:	2b38      	cmp	r3, #56	; 0x38
 8001b46:	dd00      	ble.n	8001b4a <__aeabi_ddiv+0x3c6>
 8001b48:	e670      	b.n	800182c <__aeabi_ddiv+0xa8>
 8001b4a:	2b1f      	cmp	r3, #31
 8001b4c:	dc00      	bgt.n	8001b50 <__aeabi_ddiv+0x3cc>
 8001b4e:	e0bf      	b.n	8001cd0 <__aeabi_ddiv+0x54c>
 8001b50:	211f      	movs	r1, #31
 8001b52:	4249      	negs	r1, r1
 8001b54:	1a8a      	subs	r2, r1, r2
 8001b56:	4641      	mov	r1, r8
 8001b58:	40d1      	lsrs	r1, r2
 8001b5a:	000a      	movs	r2, r1
 8001b5c:	2b20      	cmp	r3, #32
 8001b5e:	d004      	beq.n	8001b6a <__aeabi_ddiv+0x3e6>
 8001b60:	4641      	mov	r1, r8
 8001b62:	4b80      	ldr	r3, [pc, #512]	; (8001d64 <__aeabi_ddiv+0x5e0>)
 8001b64:	445b      	add	r3, fp
 8001b66:	4099      	lsls	r1, r3
 8001b68:	430d      	orrs	r5, r1
 8001b6a:	1e6b      	subs	r3, r5, #1
 8001b6c:	419d      	sbcs	r5, r3
 8001b6e:	2307      	movs	r3, #7
 8001b70:	432a      	orrs	r2, r5
 8001b72:	001d      	movs	r5, r3
 8001b74:	2400      	movs	r4, #0
 8001b76:	4015      	ands	r5, r2
 8001b78:	4213      	tst	r3, r2
 8001b7a:	d100      	bne.n	8001b7e <__aeabi_ddiv+0x3fa>
 8001b7c:	e0d4      	b.n	8001d28 <__aeabi_ddiv+0x5a4>
 8001b7e:	210f      	movs	r1, #15
 8001b80:	2300      	movs	r3, #0
 8001b82:	4011      	ands	r1, r2
 8001b84:	2904      	cmp	r1, #4
 8001b86:	d100      	bne.n	8001b8a <__aeabi_ddiv+0x406>
 8001b88:	e0cb      	b.n	8001d22 <__aeabi_ddiv+0x59e>
 8001b8a:	1d11      	adds	r1, r2, #4
 8001b8c:	4291      	cmp	r1, r2
 8001b8e:	4192      	sbcs	r2, r2
 8001b90:	4252      	negs	r2, r2
 8001b92:	189b      	adds	r3, r3, r2
 8001b94:	000a      	movs	r2, r1
 8001b96:	0219      	lsls	r1, r3, #8
 8001b98:	d400      	bmi.n	8001b9c <__aeabi_ddiv+0x418>
 8001b9a:	e0c2      	b.n	8001d22 <__aeabi_ddiv+0x59e>
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	2400      	movs	r4, #0
 8001ba0:	2500      	movs	r5, #0
 8001ba2:	e646      	b.n	8001832 <__aeabi_ddiv+0xae>
 8001ba4:	2380      	movs	r3, #128	; 0x80
 8001ba6:	4641      	mov	r1, r8
 8001ba8:	031b      	lsls	r3, r3, #12
 8001baa:	4219      	tst	r1, r3
 8001bac:	d008      	beq.n	8001bc0 <__aeabi_ddiv+0x43c>
 8001bae:	421c      	tst	r4, r3
 8001bb0:	d106      	bne.n	8001bc0 <__aeabi_ddiv+0x43c>
 8001bb2:	431c      	orrs	r4, r3
 8001bb4:	0324      	lsls	r4, r4, #12
 8001bb6:	46ba      	mov	sl, r7
 8001bb8:	0015      	movs	r5, r2
 8001bba:	4b69      	ldr	r3, [pc, #420]	; (8001d60 <__aeabi_ddiv+0x5dc>)
 8001bbc:	0b24      	lsrs	r4, r4, #12
 8001bbe:	e638      	b.n	8001832 <__aeabi_ddiv+0xae>
 8001bc0:	2480      	movs	r4, #128	; 0x80
 8001bc2:	4643      	mov	r3, r8
 8001bc4:	0324      	lsls	r4, r4, #12
 8001bc6:	431c      	orrs	r4, r3
 8001bc8:	0324      	lsls	r4, r4, #12
 8001bca:	46b2      	mov	sl, r6
 8001bcc:	4b64      	ldr	r3, [pc, #400]	; (8001d60 <__aeabi_ddiv+0x5dc>)
 8001bce:	0b24      	lsrs	r4, r4, #12
 8001bd0:	e62f      	b.n	8001832 <__aeabi_ddiv+0xae>
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d100      	bne.n	8001bd8 <__aeabi_ddiv+0x454>
 8001bd6:	e703      	b.n	80019e0 <__aeabi_ddiv+0x25c>
 8001bd8:	19a6      	adds	r6, r4, r6
 8001bda:	1e68      	subs	r0, r5, #1
 8001bdc:	42a6      	cmp	r6, r4
 8001bde:	d200      	bcs.n	8001be2 <__aeabi_ddiv+0x45e>
 8001be0:	e08d      	b.n	8001cfe <__aeabi_ddiv+0x57a>
 8001be2:	428e      	cmp	r6, r1
 8001be4:	d200      	bcs.n	8001be8 <__aeabi_ddiv+0x464>
 8001be6:	e0a3      	b.n	8001d30 <__aeabi_ddiv+0x5ac>
 8001be8:	d100      	bne.n	8001bec <__aeabi_ddiv+0x468>
 8001bea:	e0b3      	b.n	8001d54 <__aeabi_ddiv+0x5d0>
 8001bec:	0005      	movs	r5, r0
 8001bee:	e6f5      	b.n	80019dc <__aeabi_ddiv+0x258>
 8001bf0:	42aa      	cmp	r2, r5
 8001bf2:	d900      	bls.n	8001bf6 <__aeabi_ddiv+0x472>
 8001bf4:	e639      	b.n	800186a <__aeabi_ddiv+0xe6>
 8001bf6:	4643      	mov	r3, r8
 8001bf8:	07de      	lsls	r6, r3, #31
 8001bfa:	0858      	lsrs	r0, r3, #1
 8001bfc:	086b      	lsrs	r3, r5, #1
 8001bfe:	431e      	orrs	r6, r3
 8001c00:	07ed      	lsls	r5, r5, #31
 8001c02:	e639      	b.n	8001878 <__aeabi_ddiv+0xf4>
 8001c04:	4648      	mov	r0, r9
 8001c06:	f001 f937 	bl	8002e78 <__clzsi2>
 8001c0a:	0001      	movs	r1, r0
 8001c0c:	0002      	movs	r2, r0
 8001c0e:	3115      	adds	r1, #21
 8001c10:	3220      	adds	r2, #32
 8001c12:	291c      	cmp	r1, #28
 8001c14:	dc00      	bgt.n	8001c18 <__aeabi_ddiv+0x494>
 8001c16:	e72c      	b.n	8001a72 <__aeabi_ddiv+0x2ee>
 8001c18:	464b      	mov	r3, r9
 8001c1a:	3808      	subs	r0, #8
 8001c1c:	4083      	lsls	r3, r0
 8001c1e:	2500      	movs	r5, #0
 8001c20:	4698      	mov	r8, r3
 8001c22:	e732      	b.n	8001a8a <__aeabi_ddiv+0x306>
 8001c24:	f001 f928 	bl	8002e78 <__clzsi2>
 8001c28:	0003      	movs	r3, r0
 8001c2a:	001a      	movs	r2, r3
 8001c2c:	3215      	adds	r2, #21
 8001c2e:	3020      	adds	r0, #32
 8001c30:	2a1c      	cmp	r2, #28
 8001c32:	dc00      	bgt.n	8001c36 <__aeabi_ddiv+0x4b2>
 8001c34:	e700      	b.n	8001a38 <__aeabi_ddiv+0x2b4>
 8001c36:	4654      	mov	r4, sl
 8001c38:	3b08      	subs	r3, #8
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	409c      	lsls	r4, r3
 8001c3e:	e705      	b.n	8001a4c <__aeabi_ddiv+0x2c8>
 8001c40:	1936      	adds	r6, r6, r4
 8001c42:	3b01      	subs	r3, #1
 8001c44:	42b4      	cmp	r4, r6
 8001c46:	d900      	bls.n	8001c4a <__aeabi_ddiv+0x4c6>
 8001c48:	e6a6      	b.n	8001998 <__aeabi_ddiv+0x214>
 8001c4a:	42b2      	cmp	r2, r6
 8001c4c:	d800      	bhi.n	8001c50 <__aeabi_ddiv+0x4cc>
 8001c4e:	e6a3      	b.n	8001998 <__aeabi_ddiv+0x214>
 8001c50:	1e83      	subs	r3, r0, #2
 8001c52:	1936      	adds	r6, r6, r4
 8001c54:	e6a0      	b.n	8001998 <__aeabi_ddiv+0x214>
 8001c56:	1909      	adds	r1, r1, r4
 8001c58:	3d01      	subs	r5, #1
 8001c5a:	428c      	cmp	r4, r1
 8001c5c:	d900      	bls.n	8001c60 <__aeabi_ddiv+0x4dc>
 8001c5e:	e68d      	b.n	800197c <__aeabi_ddiv+0x1f8>
 8001c60:	428a      	cmp	r2, r1
 8001c62:	d800      	bhi.n	8001c66 <__aeabi_ddiv+0x4e2>
 8001c64:	e68a      	b.n	800197c <__aeabi_ddiv+0x1f8>
 8001c66:	1e85      	subs	r5, r0, #2
 8001c68:	1909      	adds	r1, r1, r4
 8001c6a:	e687      	b.n	800197c <__aeabi_ddiv+0x1f8>
 8001c6c:	230f      	movs	r3, #15
 8001c6e:	402b      	ands	r3, r5
 8001c70:	2b04      	cmp	r3, #4
 8001c72:	d100      	bne.n	8001c76 <__aeabi_ddiv+0x4f2>
 8001c74:	e6bc      	b.n	80019f0 <__aeabi_ddiv+0x26c>
 8001c76:	2305      	movs	r3, #5
 8001c78:	425b      	negs	r3, r3
 8001c7a:	42ab      	cmp	r3, r5
 8001c7c:	419b      	sbcs	r3, r3
 8001c7e:	3504      	adds	r5, #4
 8001c80:	425b      	negs	r3, r3
 8001c82:	08ed      	lsrs	r5, r5, #3
 8001c84:	4498      	add	r8, r3
 8001c86:	e6b4      	b.n	80019f2 <__aeabi_ddiv+0x26e>
 8001c88:	42af      	cmp	r7, r5
 8001c8a:	d900      	bls.n	8001c8e <__aeabi_ddiv+0x50a>
 8001c8c:	e660      	b.n	8001950 <__aeabi_ddiv+0x1cc>
 8001c8e:	4282      	cmp	r2, r0
 8001c90:	d804      	bhi.n	8001c9c <__aeabi_ddiv+0x518>
 8001c92:	d000      	beq.n	8001c96 <__aeabi_ddiv+0x512>
 8001c94:	e65c      	b.n	8001950 <__aeabi_ddiv+0x1cc>
 8001c96:	42ae      	cmp	r6, r5
 8001c98:	d800      	bhi.n	8001c9c <__aeabi_ddiv+0x518>
 8001c9a:	e659      	b.n	8001950 <__aeabi_ddiv+0x1cc>
 8001c9c:	2302      	movs	r3, #2
 8001c9e:	425b      	negs	r3, r3
 8001ca0:	469c      	mov	ip, r3
 8001ca2:	9b00      	ldr	r3, [sp, #0]
 8001ca4:	44e0      	add	r8, ip
 8001ca6:	469c      	mov	ip, r3
 8001ca8:	4465      	add	r5, ip
 8001caa:	429d      	cmp	r5, r3
 8001cac:	419b      	sbcs	r3, r3
 8001cae:	425b      	negs	r3, r3
 8001cb0:	191b      	adds	r3, r3, r4
 8001cb2:	18c0      	adds	r0, r0, r3
 8001cb4:	e64d      	b.n	8001952 <__aeabi_ddiv+0x1ce>
 8001cb6:	428a      	cmp	r2, r1
 8001cb8:	d800      	bhi.n	8001cbc <__aeabi_ddiv+0x538>
 8001cba:	e60e      	b.n	80018da <__aeabi_ddiv+0x156>
 8001cbc:	1e83      	subs	r3, r0, #2
 8001cbe:	1909      	adds	r1, r1, r4
 8001cc0:	e60b      	b.n	80018da <__aeabi_ddiv+0x156>
 8001cc2:	428a      	cmp	r2, r1
 8001cc4:	d800      	bhi.n	8001cc8 <__aeabi_ddiv+0x544>
 8001cc6:	e5f4      	b.n	80018b2 <__aeabi_ddiv+0x12e>
 8001cc8:	1e83      	subs	r3, r0, #2
 8001cca:	4698      	mov	r8, r3
 8001ccc:	1909      	adds	r1, r1, r4
 8001cce:	e5f0      	b.n	80018b2 <__aeabi_ddiv+0x12e>
 8001cd0:	4925      	ldr	r1, [pc, #148]	; (8001d68 <__aeabi_ddiv+0x5e4>)
 8001cd2:	0028      	movs	r0, r5
 8001cd4:	4459      	add	r1, fp
 8001cd6:	408d      	lsls	r5, r1
 8001cd8:	4642      	mov	r2, r8
 8001cda:	408a      	lsls	r2, r1
 8001cdc:	1e69      	subs	r1, r5, #1
 8001cde:	418d      	sbcs	r5, r1
 8001ce0:	4641      	mov	r1, r8
 8001ce2:	40d8      	lsrs	r0, r3
 8001ce4:	40d9      	lsrs	r1, r3
 8001ce6:	4302      	orrs	r2, r0
 8001ce8:	432a      	orrs	r2, r5
 8001cea:	000b      	movs	r3, r1
 8001cec:	0751      	lsls	r1, r2, #29
 8001cee:	d100      	bne.n	8001cf2 <__aeabi_ddiv+0x56e>
 8001cf0:	e751      	b.n	8001b96 <__aeabi_ddiv+0x412>
 8001cf2:	210f      	movs	r1, #15
 8001cf4:	4011      	ands	r1, r2
 8001cf6:	2904      	cmp	r1, #4
 8001cf8:	d000      	beq.n	8001cfc <__aeabi_ddiv+0x578>
 8001cfa:	e746      	b.n	8001b8a <__aeabi_ddiv+0x406>
 8001cfc:	e74b      	b.n	8001b96 <__aeabi_ddiv+0x412>
 8001cfe:	0005      	movs	r5, r0
 8001d00:	428e      	cmp	r6, r1
 8001d02:	d000      	beq.n	8001d06 <__aeabi_ddiv+0x582>
 8001d04:	e66a      	b.n	80019dc <__aeabi_ddiv+0x258>
 8001d06:	9a00      	ldr	r2, [sp, #0]
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d000      	beq.n	8001d0e <__aeabi_ddiv+0x58a>
 8001d0c:	e666      	b.n	80019dc <__aeabi_ddiv+0x258>
 8001d0e:	e667      	b.n	80019e0 <__aeabi_ddiv+0x25c>
 8001d10:	4a16      	ldr	r2, [pc, #88]	; (8001d6c <__aeabi_ddiv+0x5e8>)
 8001d12:	445a      	add	r2, fp
 8001d14:	2a00      	cmp	r2, #0
 8001d16:	dc00      	bgt.n	8001d1a <__aeabi_ddiv+0x596>
 8001d18:	e710      	b.n	8001b3c <__aeabi_ddiv+0x3b8>
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	2500      	movs	r5, #0
 8001d1e:	4498      	add	r8, r3
 8001d20:	e667      	b.n	80019f2 <__aeabi_ddiv+0x26e>
 8001d22:	075d      	lsls	r5, r3, #29
 8001d24:	025b      	lsls	r3, r3, #9
 8001d26:	0b1c      	lsrs	r4, r3, #12
 8001d28:	08d2      	lsrs	r2, r2, #3
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	4315      	orrs	r5, r2
 8001d2e:	e580      	b.n	8001832 <__aeabi_ddiv+0xae>
 8001d30:	9800      	ldr	r0, [sp, #0]
 8001d32:	3d02      	subs	r5, #2
 8001d34:	0042      	lsls	r2, r0, #1
 8001d36:	4282      	cmp	r2, r0
 8001d38:	41bf      	sbcs	r7, r7
 8001d3a:	427f      	negs	r7, r7
 8001d3c:	193c      	adds	r4, r7, r4
 8001d3e:	1936      	adds	r6, r6, r4
 8001d40:	9200      	str	r2, [sp, #0]
 8001d42:	e7dd      	b.n	8001d00 <__aeabi_ddiv+0x57c>
 8001d44:	2480      	movs	r4, #128	; 0x80
 8001d46:	4643      	mov	r3, r8
 8001d48:	0324      	lsls	r4, r4, #12
 8001d4a:	431c      	orrs	r4, r3
 8001d4c:	0324      	lsls	r4, r4, #12
 8001d4e:	4b04      	ldr	r3, [pc, #16]	; (8001d60 <__aeabi_ddiv+0x5dc>)
 8001d50:	0b24      	lsrs	r4, r4, #12
 8001d52:	e56e      	b.n	8001832 <__aeabi_ddiv+0xae>
 8001d54:	9a00      	ldr	r2, [sp, #0]
 8001d56:	429a      	cmp	r2, r3
 8001d58:	d3ea      	bcc.n	8001d30 <__aeabi_ddiv+0x5ac>
 8001d5a:	0005      	movs	r5, r0
 8001d5c:	e7d3      	b.n	8001d06 <__aeabi_ddiv+0x582>
 8001d5e:	46c0      	nop			; (mov r8, r8)
 8001d60:	000007ff 	.word	0x000007ff
 8001d64:	0000043e 	.word	0x0000043e
 8001d68:	0000041e 	.word	0x0000041e
 8001d6c:	000003ff 	.word	0x000003ff

08001d70 <__eqdf2>:
 8001d70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d72:	464e      	mov	r6, r9
 8001d74:	4645      	mov	r5, r8
 8001d76:	46de      	mov	lr, fp
 8001d78:	4657      	mov	r7, sl
 8001d7a:	4690      	mov	r8, r2
 8001d7c:	b5e0      	push	{r5, r6, r7, lr}
 8001d7e:	0017      	movs	r7, r2
 8001d80:	031a      	lsls	r2, r3, #12
 8001d82:	0b12      	lsrs	r2, r2, #12
 8001d84:	0005      	movs	r5, r0
 8001d86:	4684      	mov	ip, r0
 8001d88:	4819      	ldr	r0, [pc, #100]	; (8001df0 <__eqdf2+0x80>)
 8001d8a:	030e      	lsls	r6, r1, #12
 8001d8c:	004c      	lsls	r4, r1, #1
 8001d8e:	4691      	mov	r9, r2
 8001d90:	005a      	lsls	r2, r3, #1
 8001d92:	0fdb      	lsrs	r3, r3, #31
 8001d94:	469b      	mov	fp, r3
 8001d96:	0b36      	lsrs	r6, r6, #12
 8001d98:	0d64      	lsrs	r4, r4, #21
 8001d9a:	0fc9      	lsrs	r1, r1, #31
 8001d9c:	0d52      	lsrs	r2, r2, #21
 8001d9e:	4284      	cmp	r4, r0
 8001da0:	d019      	beq.n	8001dd6 <__eqdf2+0x66>
 8001da2:	4282      	cmp	r2, r0
 8001da4:	d010      	beq.n	8001dc8 <__eqdf2+0x58>
 8001da6:	2001      	movs	r0, #1
 8001da8:	4294      	cmp	r4, r2
 8001daa:	d10e      	bne.n	8001dca <__eqdf2+0x5a>
 8001dac:	454e      	cmp	r6, r9
 8001dae:	d10c      	bne.n	8001dca <__eqdf2+0x5a>
 8001db0:	2001      	movs	r0, #1
 8001db2:	45c4      	cmp	ip, r8
 8001db4:	d109      	bne.n	8001dca <__eqdf2+0x5a>
 8001db6:	4559      	cmp	r1, fp
 8001db8:	d017      	beq.n	8001dea <__eqdf2+0x7a>
 8001dba:	2c00      	cmp	r4, #0
 8001dbc:	d105      	bne.n	8001dca <__eqdf2+0x5a>
 8001dbe:	0030      	movs	r0, r6
 8001dc0:	4328      	orrs	r0, r5
 8001dc2:	1e43      	subs	r3, r0, #1
 8001dc4:	4198      	sbcs	r0, r3
 8001dc6:	e000      	b.n	8001dca <__eqdf2+0x5a>
 8001dc8:	2001      	movs	r0, #1
 8001dca:	bcf0      	pop	{r4, r5, r6, r7}
 8001dcc:	46bb      	mov	fp, r7
 8001dce:	46b2      	mov	sl, r6
 8001dd0:	46a9      	mov	r9, r5
 8001dd2:	46a0      	mov	r8, r4
 8001dd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001dd6:	0033      	movs	r3, r6
 8001dd8:	2001      	movs	r0, #1
 8001dda:	432b      	orrs	r3, r5
 8001ddc:	d1f5      	bne.n	8001dca <__eqdf2+0x5a>
 8001dde:	42a2      	cmp	r2, r4
 8001de0:	d1f3      	bne.n	8001dca <__eqdf2+0x5a>
 8001de2:	464b      	mov	r3, r9
 8001de4:	433b      	orrs	r3, r7
 8001de6:	d1f0      	bne.n	8001dca <__eqdf2+0x5a>
 8001de8:	e7e2      	b.n	8001db0 <__eqdf2+0x40>
 8001dea:	2000      	movs	r0, #0
 8001dec:	e7ed      	b.n	8001dca <__eqdf2+0x5a>
 8001dee:	46c0      	nop			; (mov r8, r8)
 8001df0:	000007ff 	.word	0x000007ff

08001df4 <__gedf2>:
 8001df4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001df6:	4647      	mov	r7, r8
 8001df8:	46ce      	mov	lr, r9
 8001dfa:	0004      	movs	r4, r0
 8001dfc:	0018      	movs	r0, r3
 8001dfe:	0016      	movs	r6, r2
 8001e00:	031b      	lsls	r3, r3, #12
 8001e02:	0b1b      	lsrs	r3, r3, #12
 8001e04:	4d2d      	ldr	r5, [pc, #180]	; (8001ebc <__gedf2+0xc8>)
 8001e06:	004a      	lsls	r2, r1, #1
 8001e08:	4699      	mov	r9, r3
 8001e0a:	b580      	push	{r7, lr}
 8001e0c:	0043      	lsls	r3, r0, #1
 8001e0e:	030f      	lsls	r7, r1, #12
 8001e10:	46a4      	mov	ip, r4
 8001e12:	46b0      	mov	r8, r6
 8001e14:	0b3f      	lsrs	r7, r7, #12
 8001e16:	0d52      	lsrs	r2, r2, #21
 8001e18:	0fc9      	lsrs	r1, r1, #31
 8001e1a:	0d5b      	lsrs	r3, r3, #21
 8001e1c:	0fc0      	lsrs	r0, r0, #31
 8001e1e:	42aa      	cmp	r2, r5
 8001e20:	d021      	beq.n	8001e66 <__gedf2+0x72>
 8001e22:	42ab      	cmp	r3, r5
 8001e24:	d013      	beq.n	8001e4e <__gedf2+0x5a>
 8001e26:	2a00      	cmp	r2, #0
 8001e28:	d122      	bne.n	8001e70 <__gedf2+0x7c>
 8001e2a:	433c      	orrs	r4, r7
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d102      	bne.n	8001e36 <__gedf2+0x42>
 8001e30:	464d      	mov	r5, r9
 8001e32:	432e      	orrs	r6, r5
 8001e34:	d022      	beq.n	8001e7c <__gedf2+0x88>
 8001e36:	2c00      	cmp	r4, #0
 8001e38:	d010      	beq.n	8001e5c <__gedf2+0x68>
 8001e3a:	4281      	cmp	r1, r0
 8001e3c:	d022      	beq.n	8001e84 <__gedf2+0x90>
 8001e3e:	2002      	movs	r0, #2
 8001e40:	3901      	subs	r1, #1
 8001e42:	4008      	ands	r0, r1
 8001e44:	3801      	subs	r0, #1
 8001e46:	bcc0      	pop	{r6, r7}
 8001e48:	46b9      	mov	r9, r7
 8001e4a:	46b0      	mov	r8, r6
 8001e4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e4e:	464d      	mov	r5, r9
 8001e50:	432e      	orrs	r6, r5
 8001e52:	d129      	bne.n	8001ea8 <__gedf2+0xb4>
 8001e54:	2a00      	cmp	r2, #0
 8001e56:	d1f0      	bne.n	8001e3a <__gedf2+0x46>
 8001e58:	433c      	orrs	r4, r7
 8001e5a:	d1ee      	bne.n	8001e3a <__gedf2+0x46>
 8001e5c:	2800      	cmp	r0, #0
 8001e5e:	d1f2      	bne.n	8001e46 <__gedf2+0x52>
 8001e60:	2001      	movs	r0, #1
 8001e62:	4240      	negs	r0, r0
 8001e64:	e7ef      	b.n	8001e46 <__gedf2+0x52>
 8001e66:	003d      	movs	r5, r7
 8001e68:	4325      	orrs	r5, r4
 8001e6a:	d11d      	bne.n	8001ea8 <__gedf2+0xb4>
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d0ee      	beq.n	8001e4e <__gedf2+0x5a>
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d1e2      	bne.n	8001e3a <__gedf2+0x46>
 8001e74:	464c      	mov	r4, r9
 8001e76:	4326      	orrs	r6, r4
 8001e78:	d1df      	bne.n	8001e3a <__gedf2+0x46>
 8001e7a:	e7e0      	b.n	8001e3e <__gedf2+0x4a>
 8001e7c:	2000      	movs	r0, #0
 8001e7e:	2c00      	cmp	r4, #0
 8001e80:	d0e1      	beq.n	8001e46 <__gedf2+0x52>
 8001e82:	e7dc      	b.n	8001e3e <__gedf2+0x4a>
 8001e84:	429a      	cmp	r2, r3
 8001e86:	dc0a      	bgt.n	8001e9e <__gedf2+0xaa>
 8001e88:	dbe8      	blt.n	8001e5c <__gedf2+0x68>
 8001e8a:	454f      	cmp	r7, r9
 8001e8c:	d8d7      	bhi.n	8001e3e <__gedf2+0x4a>
 8001e8e:	d00e      	beq.n	8001eae <__gedf2+0xba>
 8001e90:	2000      	movs	r0, #0
 8001e92:	454f      	cmp	r7, r9
 8001e94:	d2d7      	bcs.n	8001e46 <__gedf2+0x52>
 8001e96:	2900      	cmp	r1, #0
 8001e98:	d0e2      	beq.n	8001e60 <__gedf2+0x6c>
 8001e9a:	0008      	movs	r0, r1
 8001e9c:	e7d3      	b.n	8001e46 <__gedf2+0x52>
 8001e9e:	4243      	negs	r3, r0
 8001ea0:	4158      	adcs	r0, r3
 8001ea2:	0040      	lsls	r0, r0, #1
 8001ea4:	3801      	subs	r0, #1
 8001ea6:	e7ce      	b.n	8001e46 <__gedf2+0x52>
 8001ea8:	2002      	movs	r0, #2
 8001eaa:	4240      	negs	r0, r0
 8001eac:	e7cb      	b.n	8001e46 <__gedf2+0x52>
 8001eae:	45c4      	cmp	ip, r8
 8001eb0:	d8c5      	bhi.n	8001e3e <__gedf2+0x4a>
 8001eb2:	2000      	movs	r0, #0
 8001eb4:	45c4      	cmp	ip, r8
 8001eb6:	d2c6      	bcs.n	8001e46 <__gedf2+0x52>
 8001eb8:	e7ed      	b.n	8001e96 <__gedf2+0xa2>
 8001eba:	46c0      	nop			; (mov r8, r8)
 8001ebc:	000007ff 	.word	0x000007ff

08001ec0 <__ledf2>:
 8001ec0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ec2:	4647      	mov	r7, r8
 8001ec4:	46ce      	mov	lr, r9
 8001ec6:	0004      	movs	r4, r0
 8001ec8:	0018      	movs	r0, r3
 8001eca:	0016      	movs	r6, r2
 8001ecc:	031b      	lsls	r3, r3, #12
 8001ece:	0b1b      	lsrs	r3, r3, #12
 8001ed0:	4d2c      	ldr	r5, [pc, #176]	; (8001f84 <__ledf2+0xc4>)
 8001ed2:	004a      	lsls	r2, r1, #1
 8001ed4:	4699      	mov	r9, r3
 8001ed6:	b580      	push	{r7, lr}
 8001ed8:	0043      	lsls	r3, r0, #1
 8001eda:	030f      	lsls	r7, r1, #12
 8001edc:	46a4      	mov	ip, r4
 8001ede:	46b0      	mov	r8, r6
 8001ee0:	0b3f      	lsrs	r7, r7, #12
 8001ee2:	0d52      	lsrs	r2, r2, #21
 8001ee4:	0fc9      	lsrs	r1, r1, #31
 8001ee6:	0d5b      	lsrs	r3, r3, #21
 8001ee8:	0fc0      	lsrs	r0, r0, #31
 8001eea:	42aa      	cmp	r2, r5
 8001eec:	d00d      	beq.n	8001f0a <__ledf2+0x4a>
 8001eee:	42ab      	cmp	r3, r5
 8001ef0:	d010      	beq.n	8001f14 <__ledf2+0x54>
 8001ef2:	2a00      	cmp	r2, #0
 8001ef4:	d127      	bne.n	8001f46 <__ledf2+0x86>
 8001ef6:	433c      	orrs	r4, r7
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d111      	bne.n	8001f20 <__ledf2+0x60>
 8001efc:	464d      	mov	r5, r9
 8001efe:	432e      	orrs	r6, r5
 8001f00:	d10e      	bne.n	8001f20 <__ledf2+0x60>
 8001f02:	2000      	movs	r0, #0
 8001f04:	2c00      	cmp	r4, #0
 8001f06:	d015      	beq.n	8001f34 <__ledf2+0x74>
 8001f08:	e00e      	b.n	8001f28 <__ledf2+0x68>
 8001f0a:	003d      	movs	r5, r7
 8001f0c:	4325      	orrs	r5, r4
 8001f0e:	d110      	bne.n	8001f32 <__ledf2+0x72>
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d118      	bne.n	8001f46 <__ledf2+0x86>
 8001f14:	464d      	mov	r5, r9
 8001f16:	432e      	orrs	r6, r5
 8001f18:	d10b      	bne.n	8001f32 <__ledf2+0x72>
 8001f1a:	2a00      	cmp	r2, #0
 8001f1c:	d102      	bne.n	8001f24 <__ledf2+0x64>
 8001f1e:	433c      	orrs	r4, r7
 8001f20:	2c00      	cmp	r4, #0
 8001f22:	d00b      	beq.n	8001f3c <__ledf2+0x7c>
 8001f24:	4281      	cmp	r1, r0
 8001f26:	d014      	beq.n	8001f52 <__ledf2+0x92>
 8001f28:	2002      	movs	r0, #2
 8001f2a:	3901      	subs	r1, #1
 8001f2c:	4008      	ands	r0, r1
 8001f2e:	3801      	subs	r0, #1
 8001f30:	e000      	b.n	8001f34 <__ledf2+0x74>
 8001f32:	2002      	movs	r0, #2
 8001f34:	bcc0      	pop	{r6, r7}
 8001f36:	46b9      	mov	r9, r7
 8001f38:	46b0      	mov	r8, r6
 8001f3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f3c:	2800      	cmp	r0, #0
 8001f3e:	d1f9      	bne.n	8001f34 <__ledf2+0x74>
 8001f40:	2001      	movs	r0, #1
 8001f42:	4240      	negs	r0, r0
 8001f44:	e7f6      	b.n	8001f34 <__ledf2+0x74>
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d1ec      	bne.n	8001f24 <__ledf2+0x64>
 8001f4a:	464c      	mov	r4, r9
 8001f4c:	4326      	orrs	r6, r4
 8001f4e:	d1e9      	bne.n	8001f24 <__ledf2+0x64>
 8001f50:	e7ea      	b.n	8001f28 <__ledf2+0x68>
 8001f52:	429a      	cmp	r2, r3
 8001f54:	dd04      	ble.n	8001f60 <__ledf2+0xa0>
 8001f56:	4243      	negs	r3, r0
 8001f58:	4158      	adcs	r0, r3
 8001f5a:	0040      	lsls	r0, r0, #1
 8001f5c:	3801      	subs	r0, #1
 8001f5e:	e7e9      	b.n	8001f34 <__ledf2+0x74>
 8001f60:	429a      	cmp	r2, r3
 8001f62:	dbeb      	blt.n	8001f3c <__ledf2+0x7c>
 8001f64:	454f      	cmp	r7, r9
 8001f66:	d8df      	bhi.n	8001f28 <__ledf2+0x68>
 8001f68:	d006      	beq.n	8001f78 <__ledf2+0xb8>
 8001f6a:	2000      	movs	r0, #0
 8001f6c:	454f      	cmp	r7, r9
 8001f6e:	d2e1      	bcs.n	8001f34 <__ledf2+0x74>
 8001f70:	2900      	cmp	r1, #0
 8001f72:	d0e5      	beq.n	8001f40 <__ledf2+0x80>
 8001f74:	0008      	movs	r0, r1
 8001f76:	e7dd      	b.n	8001f34 <__ledf2+0x74>
 8001f78:	45c4      	cmp	ip, r8
 8001f7a:	d8d5      	bhi.n	8001f28 <__ledf2+0x68>
 8001f7c:	2000      	movs	r0, #0
 8001f7e:	45c4      	cmp	ip, r8
 8001f80:	d2d8      	bcs.n	8001f34 <__ledf2+0x74>
 8001f82:	e7f5      	b.n	8001f70 <__ledf2+0xb0>
 8001f84:	000007ff 	.word	0x000007ff

08001f88 <__aeabi_dmul>:
 8001f88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f8a:	4657      	mov	r7, sl
 8001f8c:	464e      	mov	r6, r9
 8001f8e:	4645      	mov	r5, r8
 8001f90:	46de      	mov	lr, fp
 8001f92:	b5e0      	push	{r5, r6, r7, lr}
 8001f94:	4698      	mov	r8, r3
 8001f96:	030c      	lsls	r4, r1, #12
 8001f98:	004b      	lsls	r3, r1, #1
 8001f9a:	0006      	movs	r6, r0
 8001f9c:	4692      	mov	sl, r2
 8001f9e:	b087      	sub	sp, #28
 8001fa0:	0b24      	lsrs	r4, r4, #12
 8001fa2:	0d5b      	lsrs	r3, r3, #21
 8001fa4:	0fcf      	lsrs	r7, r1, #31
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d100      	bne.n	8001fac <__aeabi_dmul+0x24>
 8001faa:	e15c      	b.n	8002266 <__aeabi_dmul+0x2de>
 8001fac:	4ad9      	ldr	r2, [pc, #868]	; (8002314 <__aeabi_dmul+0x38c>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d100      	bne.n	8001fb4 <__aeabi_dmul+0x2c>
 8001fb2:	e175      	b.n	80022a0 <__aeabi_dmul+0x318>
 8001fb4:	0f42      	lsrs	r2, r0, #29
 8001fb6:	00e4      	lsls	r4, r4, #3
 8001fb8:	4314      	orrs	r4, r2
 8001fba:	2280      	movs	r2, #128	; 0x80
 8001fbc:	0412      	lsls	r2, r2, #16
 8001fbe:	4314      	orrs	r4, r2
 8001fc0:	4ad5      	ldr	r2, [pc, #852]	; (8002318 <__aeabi_dmul+0x390>)
 8001fc2:	00c5      	lsls	r5, r0, #3
 8001fc4:	4694      	mov	ip, r2
 8001fc6:	4463      	add	r3, ip
 8001fc8:	9300      	str	r3, [sp, #0]
 8001fca:	2300      	movs	r3, #0
 8001fcc:	4699      	mov	r9, r3
 8001fce:	469b      	mov	fp, r3
 8001fd0:	4643      	mov	r3, r8
 8001fd2:	4642      	mov	r2, r8
 8001fd4:	031e      	lsls	r6, r3, #12
 8001fd6:	0fd2      	lsrs	r2, r2, #31
 8001fd8:	005b      	lsls	r3, r3, #1
 8001fda:	4650      	mov	r0, sl
 8001fdc:	4690      	mov	r8, r2
 8001fde:	0b36      	lsrs	r6, r6, #12
 8001fe0:	0d5b      	lsrs	r3, r3, #21
 8001fe2:	d100      	bne.n	8001fe6 <__aeabi_dmul+0x5e>
 8001fe4:	e120      	b.n	8002228 <__aeabi_dmul+0x2a0>
 8001fe6:	4acb      	ldr	r2, [pc, #812]	; (8002314 <__aeabi_dmul+0x38c>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d100      	bne.n	8001fee <__aeabi_dmul+0x66>
 8001fec:	e162      	b.n	80022b4 <__aeabi_dmul+0x32c>
 8001fee:	49ca      	ldr	r1, [pc, #808]	; (8002318 <__aeabi_dmul+0x390>)
 8001ff0:	0f42      	lsrs	r2, r0, #29
 8001ff2:	468c      	mov	ip, r1
 8001ff4:	9900      	ldr	r1, [sp, #0]
 8001ff6:	4463      	add	r3, ip
 8001ff8:	00f6      	lsls	r6, r6, #3
 8001ffa:	468c      	mov	ip, r1
 8001ffc:	4316      	orrs	r6, r2
 8001ffe:	2280      	movs	r2, #128	; 0x80
 8002000:	449c      	add	ip, r3
 8002002:	0412      	lsls	r2, r2, #16
 8002004:	4663      	mov	r3, ip
 8002006:	4316      	orrs	r6, r2
 8002008:	00c2      	lsls	r2, r0, #3
 800200a:	2000      	movs	r0, #0
 800200c:	9300      	str	r3, [sp, #0]
 800200e:	9900      	ldr	r1, [sp, #0]
 8002010:	4643      	mov	r3, r8
 8002012:	3101      	adds	r1, #1
 8002014:	468c      	mov	ip, r1
 8002016:	4649      	mov	r1, r9
 8002018:	407b      	eors	r3, r7
 800201a:	9301      	str	r3, [sp, #4]
 800201c:	290f      	cmp	r1, #15
 800201e:	d826      	bhi.n	800206e <__aeabi_dmul+0xe6>
 8002020:	4bbe      	ldr	r3, [pc, #760]	; (800231c <__aeabi_dmul+0x394>)
 8002022:	0089      	lsls	r1, r1, #2
 8002024:	5859      	ldr	r1, [r3, r1]
 8002026:	468f      	mov	pc, r1
 8002028:	4643      	mov	r3, r8
 800202a:	9301      	str	r3, [sp, #4]
 800202c:	0034      	movs	r4, r6
 800202e:	0015      	movs	r5, r2
 8002030:	4683      	mov	fp, r0
 8002032:	465b      	mov	r3, fp
 8002034:	2b02      	cmp	r3, #2
 8002036:	d016      	beq.n	8002066 <__aeabi_dmul+0xde>
 8002038:	2b03      	cmp	r3, #3
 800203a:	d100      	bne.n	800203e <__aeabi_dmul+0xb6>
 800203c:	e203      	b.n	8002446 <__aeabi_dmul+0x4be>
 800203e:	2b01      	cmp	r3, #1
 8002040:	d000      	beq.n	8002044 <__aeabi_dmul+0xbc>
 8002042:	e0cd      	b.n	80021e0 <__aeabi_dmul+0x258>
 8002044:	2200      	movs	r2, #0
 8002046:	2400      	movs	r4, #0
 8002048:	2500      	movs	r5, #0
 800204a:	9b01      	ldr	r3, [sp, #4]
 800204c:	0512      	lsls	r2, r2, #20
 800204e:	4322      	orrs	r2, r4
 8002050:	07db      	lsls	r3, r3, #31
 8002052:	431a      	orrs	r2, r3
 8002054:	0028      	movs	r0, r5
 8002056:	0011      	movs	r1, r2
 8002058:	b007      	add	sp, #28
 800205a:	bcf0      	pop	{r4, r5, r6, r7}
 800205c:	46bb      	mov	fp, r7
 800205e:	46b2      	mov	sl, r6
 8002060:	46a9      	mov	r9, r5
 8002062:	46a0      	mov	r8, r4
 8002064:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002066:	2400      	movs	r4, #0
 8002068:	2500      	movs	r5, #0
 800206a:	4aaa      	ldr	r2, [pc, #680]	; (8002314 <__aeabi_dmul+0x38c>)
 800206c:	e7ed      	b.n	800204a <__aeabi_dmul+0xc2>
 800206e:	0c28      	lsrs	r0, r5, #16
 8002070:	042d      	lsls	r5, r5, #16
 8002072:	0c2d      	lsrs	r5, r5, #16
 8002074:	002b      	movs	r3, r5
 8002076:	0c11      	lsrs	r1, r2, #16
 8002078:	0412      	lsls	r2, r2, #16
 800207a:	0c12      	lsrs	r2, r2, #16
 800207c:	4353      	muls	r3, r2
 800207e:	4698      	mov	r8, r3
 8002080:	0013      	movs	r3, r2
 8002082:	002f      	movs	r7, r5
 8002084:	4343      	muls	r3, r0
 8002086:	4699      	mov	r9, r3
 8002088:	434f      	muls	r7, r1
 800208a:	444f      	add	r7, r9
 800208c:	46bb      	mov	fp, r7
 800208e:	4647      	mov	r7, r8
 8002090:	000b      	movs	r3, r1
 8002092:	0c3f      	lsrs	r7, r7, #16
 8002094:	46ba      	mov	sl, r7
 8002096:	4343      	muls	r3, r0
 8002098:	44da      	add	sl, fp
 800209a:	9302      	str	r3, [sp, #8]
 800209c:	45d1      	cmp	r9, sl
 800209e:	d904      	bls.n	80020aa <__aeabi_dmul+0x122>
 80020a0:	2780      	movs	r7, #128	; 0x80
 80020a2:	027f      	lsls	r7, r7, #9
 80020a4:	46b9      	mov	r9, r7
 80020a6:	444b      	add	r3, r9
 80020a8:	9302      	str	r3, [sp, #8]
 80020aa:	4653      	mov	r3, sl
 80020ac:	0c1b      	lsrs	r3, r3, #16
 80020ae:	469b      	mov	fp, r3
 80020b0:	4653      	mov	r3, sl
 80020b2:	041f      	lsls	r7, r3, #16
 80020b4:	4643      	mov	r3, r8
 80020b6:	041b      	lsls	r3, r3, #16
 80020b8:	0c1b      	lsrs	r3, r3, #16
 80020ba:	4698      	mov	r8, r3
 80020bc:	003b      	movs	r3, r7
 80020be:	4443      	add	r3, r8
 80020c0:	9304      	str	r3, [sp, #16]
 80020c2:	0c33      	lsrs	r3, r6, #16
 80020c4:	0436      	lsls	r6, r6, #16
 80020c6:	0c36      	lsrs	r6, r6, #16
 80020c8:	4698      	mov	r8, r3
 80020ca:	0033      	movs	r3, r6
 80020cc:	4343      	muls	r3, r0
 80020ce:	4699      	mov	r9, r3
 80020d0:	4643      	mov	r3, r8
 80020d2:	4343      	muls	r3, r0
 80020d4:	002f      	movs	r7, r5
 80020d6:	469a      	mov	sl, r3
 80020d8:	4643      	mov	r3, r8
 80020da:	4377      	muls	r7, r6
 80020dc:	435d      	muls	r5, r3
 80020de:	0c38      	lsrs	r0, r7, #16
 80020e0:	444d      	add	r5, r9
 80020e2:	1945      	adds	r5, r0, r5
 80020e4:	45a9      	cmp	r9, r5
 80020e6:	d903      	bls.n	80020f0 <__aeabi_dmul+0x168>
 80020e8:	2380      	movs	r3, #128	; 0x80
 80020ea:	025b      	lsls	r3, r3, #9
 80020ec:	4699      	mov	r9, r3
 80020ee:	44ca      	add	sl, r9
 80020f0:	043f      	lsls	r7, r7, #16
 80020f2:	0c28      	lsrs	r0, r5, #16
 80020f4:	0c3f      	lsrs	r7, r7, #16
 80020f6:	042d      	lsls	r5, r5, #16
 80020f8:	19ed      	adds	r5, r5, r7
 80020fa:	0c27      	lsrs	r7, r4, #16
 80020fc:	0424      	lsls	r4, r4, #16
 80020fe:	0c24      	lsrs	r4, r4, #16
 8002100:	0003      	movs	r3, r0
 8002102:	0020      	movs	r0, r4
 8002104:	4350      	muls	r0, r2
 8002106:	437a      	muls	r2, r7
 8002108:	4691      	mov	r9, r2
 800210a:	003a      	movs	r2, r7
 800210c:	4453      	add	r3, sl
 800210e:	9305      	str	r3, [sp, #20]
 8002110:	0c03      	lsrs	r3, r0, #16
 8002112:	469a      	mov	sl, r3
 8002114:	434a      	muls	r2, r1
 8002116:	4361      	muls	r1, r4
 8002118:	4449      	add	r1, r9
 800211a:	4451      	add	r1, sl
 800211c:	44ab      	add	fp, r5
 800211e:	4589      	cmp	r9, r1
 8002120:	d903      	bls.n	800212a <__aeabi_dmul+0x1a2>
 8002122:	2380      	movs	r3, #128	; 0x80
 8002124:	025b      	lsls	r3, r3, #9
 8002126:	4699      	mov	r9, r3
 8002128:	444a      	add	r2, r9
 800212a:	0400      	lsls	r0, r0, #16
 800212c:	0c0b      	lsrs	r3, r1, #16
 800212e:	0c00      	lsrs	r0, r0, #16
 8002130:	0409      	lsls	r1, r1, #16
 8002132:	1809      	adds	r1, r1, r0
 8002134:	0020      	movs	r0, r4
 8002136:	4699      	mov	r9, r3
 8002138:	4643      	mov	r3, r8
 800213a:	4370      	muls	r0, r6
 800213c:	435c      	muls	r4, r3
 800213e:	437e      	muls	r6, r7
 8002140:	435f      	muls	r7, r3
 8002142:	0c03      	lsrs	r3, r0, #16
 8002144:	4698      	mov	r8, r3
 8002146:	19a4      	adds	r4, r4, r6
 8002148:	4444      	add	r4, r8
 800214a:	444a      	add	r2, r9
 800214c:	9703      	str	r7, [sp, #12]
 800214e:	42a6      	cmp	r6, r4
 8002150:	d904      	bls.n	800215c <__aeabi_dmul+0x1d4>
 8002152:	2380      	movs	r3, #128	; 0x80
 8002154:	025b      	lsls	r3, r3, #9
 8002156:	4698      	mov	r8, r3
 8002158:	4447      	add	r7, r8
 800215a:	9703      	str	r7, [sp, #12]
 800215c:	0423      	lsls	r3, r4, #16
 800215e:	9e02      	ldr	r6, [sp, #8]
 8002160:	469a      	mov	sl, r3
 8002162:	9b05      	ldr	r3, [sp, #20]
 8002164:	445e      	add	r6, fp
 8002166:	4698      	mov	r8, r3
 8002168:	42ae      	cmp	r6, r5
 800216a:	41ad      	sbcs	r5, r5
 800216c:	1876      	adds	r6, r6, r1
 800216e:	428e      	cmp	r6, r1
 8002170:	4189      	sbcs	r1, r1
 8002172:	0400      	lsls	r0, r0, #16
 8002174:	0c00      	lsrs	r0, r0, #16
 8002176:	4450      	add	r0, sl
 8002178:	4440      	add	r0, r8
 800217a:	426d      	negs	r5, r5
 800217c:	1947      	adds	r7, r0, r5
 800217e:	46b8      	mov	r8, r7
 8002180:	4693      	mov	fp, r2
 8002182:	4249      	negs	r1, r1
 8002184:	4689      	mov	r9, r1
 8002186:	44c3      	add	fp, r8
 8002188:	44d9      	add	r9, fp
 800218a:	4298      	cmp	r0, r3
 800218c:	4180      	sbcs	r0, r0
 800218e:	45a8      	cmp	r8, r5
 8002190:	41ad      	sbcs	r5, r5
 8002192:	4593      	cmp	fp, r2
 8002194:	4192      	sbcs	r2, r2
 8002196:	4589      	cmp	r9, r1
 8002198:	4189      	sbcs	r1, r1
 800219a:	426d      	negs	r5, r5
 800219c:	4240      	negs	r0, r0
 800219e:	4328      	orrs	r0, r5
 80021a0:	0c24      	lsrs	r4, r4, #16
 80021a2:	4252      	negs	r2, r2
 80021a4:	4249      	negs	r1, r1
 80021a6:	430a      	orrs	r2, r1
 80021a8:	9b03      	ldr	r3, [sp, #12]
 80021aa:	1900      	adds	r0, r0, r4
 80021ac:	1880      	adds	r0, r0, r2
 80021ae:	18c7      	adds	r7, r0, r3
 80021b0:	464b      	mov	r3, r9
 80021b2:	0ddc      	lsrs	r4, r3, #23
 80021b4:	9b04      	ldr	r3, [sp, #16]
 80021b6:	0275      	lsls	r5, r6, #9
 80021b8:	431d      	orrs	r5, r3
 80021ba:	1e6a      	subs	r2, r5, #1
 80021bc:	4195      	sbcs	r5, r2
 80021be:	464b      	mov	r3, r9
 80021c0:	0df6      	lsrs	r6, r6, #23
 80021c2:	027f      	lsls	r7, r7, #9
 80021c4:	4335      	orrs	r5, r6
 80021c6:	025a      	lsls	r2, r3, #9
 80021c8:	433c      	orrs	r4, r7
 80021ca:	4315      	orrs	r5, r2
 80021cc:	01fb      	lsls	r3, r7, #7
 80021ce:	d400      	bmi.n	80021d2 <__aeabi_dmul+0x24a>
 80021d0:	e11c      	b.n	800240c <__aeabi_dmul+0x484>
 80021d2:	2101      	movs	r1, #1
 80021d4:	086a      	lsrs	r2, r5, #1
 80021d6:	400d      	ands	r5, r1
 80021d8:	4315      	orrs	r5, r2
 80021da:	07e2      	lsls	r2, r4, #31
 80021dc:	4315      	orrs	r5, r2
 80021de:	0864      	lsrs	r4, r4, #1
 80021e0:	494f      	ldr	r1, [pc, #316]	; (8002320 <__aeabi_dmul+0x398>)
 80021e2:	4461      	add	r1, ip
 80021e4:	2900      	cmp	r1, #0
 80021e6:	dc00      	bgt.n	80021ea <__aeabi_dmul+0x262>
 80021e8:	e0b0      	b.n	800234c <__aeabi_dmul+0x3c4>
 80021ea:	076b      	lsls	r3, r5, #29
 80021ec:	d009      	beq.n	8002202 <__aeabi_dmul+0x27a>
 80021ee:	220f      	movs	r2, #15
 80021f0:	402a      	ands	r2, r5
 80021f2:	2a04      	cmp	r2, #4
 80021f4:	d005      	beq.n	8002202 <__aeabi_dmul+0x27a>
 80021f6:	1d2a      	adds	r2, r5, #4
 80021f8:	42aa      	cmp	r2, r5
 80021fa:	41ad      	sbcs	r5, r5
 80021fc:	426d      	negs	r5, r5
 80021fe:	1964      	adds	r4, r4, r5
 8002200:	0015      	movs	r5, r2
 8002202:	01e3      	lsls	r3, r4, #7
 8002204:	d504      	bpl.n	8002210 <__aeabi_dmul+0x288>
 8002206:	2180      	movs	r1, #128	; 0x80
 8002208:	4a46      	ldr	r2, [pc, #280]	; (8002324 <__aeabi_dmul+0x39c>)
 800220a:	00c9      	lsls	r1, r1, #3
 800220c:	4014      	ands	r4, r2
 800220e:	4461      	add	r1, ip
 8002210:	4a45      	ldr	r2, [pc, #276]	; (8002328 <__aeabi_dmul+0x3a0>)
 8002212:	4291      	cmp	r1, r2
 8002214:	dd00      	ble.n	8002218 <__aeabi_dmul+0x290>
 8002216:	e726      	b.n	8002066 <__aeabi_dmul+0xde>
 8002218:	0762      	lsls	r2, r4, #29
 800221a:	08ed      	lsrs	r5, r5, #3
 800221c:	0264      	lsls	r4, r4, #9
 800221e:	0549      	lsls	r1, r1, #21
 8002220:	4315      	orrs	r5, r2
 8002222:	0b24      	lsrs	r4, r4, #12
 8002224:	0d4a      	lsrs	r2, r1, #21
 8002226:	e710      	b.n	800204a <__aeabi_dmul+0xc2>
 8002228:	4652      	mov	r2, sl
 800222a:	4332      	orrs	r2, r6
 800222c:	d100      	bne.n	8002230 <__aeabi_dmul+0x2a8>
 800222e:	e07f      	b.n	8002330 <__aeabi_dmul+0x3a8>
 8002230:	2e00      	cmp	r6, #0
 8002232:	d100      	bne.n	8002236 <__aeabi_dmul+0x2ae>
 8002234:	e0dc      	b.n	80023f0 <__aeabi_dmul+0x468>
 8002236:	0030      	movs	r0, r6
 8002238:	f000 fe1e 	bl	8002e78 <__clzsi2>
 800223c:	0002      	movs	r2, r0
 800223e:	3a0b      	subs	r2, #11
 8002240:	231d      	movs	r3, #29
 8002242:	0001      	movs	r1, r0
 8002244:	1a9b      	subs	r3, r3, r2
 8002246:	4652      	mov	r2, sl
 8002248:	3908      	subs	r1, #8
 800224a:	40da      	lsrs	r2, r3
 800224c:	408e      	lsls	r6, r1
 800224e:	4316      	orrs	r6, r2
 8002250:	4652      	mov	r2, sl
 8002252:	408a      	lsls	r2, r1
 8002254:	9b00      	ldr	r3, [sp, #0]
 8002256:	4935      	ldr	r1, [pc, #212]	; (800232c <__aeabi_dmul+0x3a4>)
 8002258:	1a18      	subs	r0, r3, r0
 800225a:	0003      	movs	r3, r0
 800225c:	468c      	mov	ip, r1
 800225e:	4463      	add	r3, ip
 8002260:	2000      	movs	r0, #0
 8002262:	9300      	str	r3, [sp, #0]
 8002264:	e6d3      	b.n	800200e <__aeabi_dmul+0x86>
 8002266:	0025      	movs	r5, r4
 8002268:	4305      	orrs	r5, r0
 800226a:	d04a      	beq.n	8002302 <__aeabi_dmul+0x37a>
 800226c:	2c00      	cmp	r4, #0
 800226e:	d100      	bne.n	8002272 <__aeabi_dmul+0x2ea>
 8002270:	e0b0      	b.n	80023d4 <__aeabi_dmul+0x44c>
 8002272:	0020      	movs	r0, r4
 8002274:	f000 fe00 	bl	8002e78 <__clzsi2>
 8002278:	0001      	movs	r1, r0
 800227a:	0002      	movs	r2, r0
 800227c:	390b      	subs	r1, #11
 800227e:	231d      	movs	r3, #29
 8002280:	0010      	movs	r0, r2
 8002282:	1a5b      	subs	r3, r3, r1
 8002284:	0031      	movs	r1, r6
 8002286:	0035      	movs	r5, r6
 8002288:	3808      	subs	r0, #8
 800228a:	4084      	lsls	r4, r0
 800228c:	40d9      	lsrs	r1, r3
 800228e:	4085      	lsls	r5, r0
 8002290:	430c      	orrs	r4, r1
 8002292:	4826      	ldr	r0, [pc, #152]	; (800232c <__aeabi_dmul+0x3a4>)
 8002294:	1a83      	subs	r3, r0, r2
 8002296:	9300      	str	r3, [sp, #0]
 8002298:	2300      	movs	r3, #0
 800229a:	4699      	mov	r9, r3
 800229c:	469b      	mov	fp, r3
 800229e:	e697      	b.n	8001fd0 <__aeabi_dmul+0x48>
 80022a0:	0005      	movs	r5, r0
 80022a2:	4325      	orrs	r5, r4
 80022a4:	d126      	bne.n	80022f4 <__aeabi_dmul+0x36c>
 80022a6:	2208      	movs	r2, #8
 80022a8:	9300      	str	r3, [sp, #0]
 80022aa:	2302      	movs	r3, #2
 80022ac:	2400      	movs	r4, #0
 80022ae:	4691      	mov	r9, r2
 80022b0:	469b      	mov	fp, r3
 80022b2:	e68d      	b.n	8001fd0 <__aeabi_dmul+0x48>
 80022b4:	4652      	mov	r2, sl
 80022b6:	9b00      	ldr	r3, [sp, #0]
 80022b8:	4332      	orrs	r2, r6
 80022ba:	d110      	bne.n	80022de <__aeabi_dmul+0x356>
 80022bc:	4915      	ldr	r1, [pc, #84]	; (8002314 <__aeabi_dmul+0x38c>)
 80022be:	2600      	movs	r6, #0
 80022c0:	468c      	mov	ip, r1
 80022c2:	4463      	add	r3, ip
 80022c4:	4649      	mov	r1, r9
 80022c6:	9300      	str	r3, [sp, #0]
 80022c8:	2302      	movs	r3, #2
 80022ca:	4319      	orrs	r1, r3
 80022cc:	4689      	mov	r9, r1
 80022ce:	2002      	movs	r0, #2
 80022d0:	e69d      	b.n	800200e <__aeabi_dmul+0x86>
 80022d2:	465b      	mov	r3, fp
 80022d4:	9701      	str	r7, [sp, #4]
 80022d6:	2b02      	cmp	r3, #2
 80022d8:	d000      	beq.n	80022dc <__aeabi_dmul+0x354>
 80022da:	e6ad      	b.n	8002038 <__aeabi_dmul+0xb0>
 80022dc:	e6c3      	b.n	8002066 <__aeabi_dmul+0xde>
 80022de:	4a0d      	ldr	r2, [pc, #52]	; (8002314 <__aeabi_dmul+0x38c>)
 80022e0:	2003      	movs	r0, #3
 80022e2:	4694      	mov	ip, r2
 80022e4:	4463      	add	r3, ip
 80022e6:	464a      	mov	r2, r9
 80022e8:	9300      	str	r3, [sp, #0]
 80022ea:	2303      	movs	r3, #3
 80022ec:	431a      	orrs	r2, r3
 80022ee:	4691      	mov	r9, r2
 80022f0:	4652      	mov	r2, sl
 80022f2:	e68c      	b.n	800200e <__aeabi_dmul+0x86>
 80022f4:	220c      	movs	r2, #12
 80022f6:	9300      	str	r3, [sp, #0]
 80022f8:	2303      	movs	r3, #3
 80022fa:	0005      	movs	r5, r0
 80022fc:	4691      	mov	r9, r2
 80022fe:	469b      	mov	fp, r3
 8002300:	e666      	b.n	8001fd0 <__aeabi_dmul+0x48>
 8002302:	2304      	movs	r3, #4
 8002304:	4699      	mov	r9, r3
 8002306:	2300      	movs	r3, #0
 8002308:	9300      	str	r3, [sp, #0]
 800230a:	3301      	adds	r3, #1
 800230c:	2400      	movs	r4, #0
 800230e:	469b      	mov	fp, r3
 8002310:	e65e      	b.n	8001fd0 <__aeabi_dmul+0x48>
 8002312:	46c0      	nop			; (mov r8, r8)
 8002314:	000007ff 	.word	0x000007ff
 8002318:	fffffc01 	.word	0xfffffc01
 800231c:	0800df20 	.word	0x0800df20
 8002320:	000003ff 	.word	0x000003ff
 8002324:	feffffff 	.word	0xfeffffff
 8002328:	000007fe 	.word	0x000007fe
 800232c:	fffffc0d 	.word	0xfffffc0d
 8002330:	4649      	mov	r1, r9
 8002332:	2301      	movs	r3, #1
 8002334:	4319      	orrs	r1, r3
 8002336:	4689      	mov	r9, r1
 8002338:	2600      	movs	r6, #0
 800233a:	2001      	movs	r0, #1
 800233c:	e667      	b.n	800200e <__aeabi_dmul+0x86>
 800233e:	2300      	movs	r3, #0
 8002340:	2480      	movs	r4, #128	; 0x80
 8002342:	2500      	movs	r5, #0
 8002344:	4a43      	ldr	r2, [pc, #268]	; (8002454 <__aeabi_dmul+0x4cc>)
 8002346:	9301      	str	r3, [sp, #4]
 8002348:	0324      	lsls	r4, r4, #12
 800234a:	e67e      	b.n	800204a <__aeabi_dmul+0xc2>
 800234c:	2001      	movs	r0, #1
 800234e:	1a40      	subs	r0, r0, r1
 8002350:	2838      	cmp	r0, #56	; 0x38
 8002352:	dd00      	ble.n	8002356 <__aeabi_dmul+0x3ce>
 8002354:	e676      	b.n	8002044 <__aeabi_dmul+0xbc>
 8002356:	281f      	cmp	r0, #31
 8002358:	dd5b      	ble.n	8002412 <__aeabi_dmul+0x48a>
 800235a:	221f      	movs	r2, #31
 800235c:	0023      	movs	r3, r4
 800235e:	4252      	negs	r2, r2
 8002360:	1a51      	subs	r1, r2, r1
 8002362:	40cb      	lsrs	r3, r1
 8002364:	0019      	movs	r1, r3
 8002366:	2820      	cmp	r0, #32
 8002368:	d003      	beq.n	8002372 <__aeabi_dmul+0x3ea>
 800236a:	4a3b      	ldr	r2, [pc, #236]	; (8002458 <__aeabi_dmul+0x4d0>)
 800236c:	4462      	add	r2, ip
 800236e:	4094      	lsls	r4, r2
 8002370:	4325      	orrs	r5, r4
 8002372:	1e6a      	subs	r2, r5, #1
 8002374:	4195      	sbcs	r5, r2
 8002376:	002a      	movs	r2, r5
 8002378:	430a      	orrs	r2, r1
 800237a:	2107      	movs	r1, #7
 800237c:	000d      	movs	r5, r1
 800237e:	2400      	movs	r4, #0
 8002380:	4015      	ands	r5, r2
 8002382:	4211      	tst	r1, r2
 8002384:	d05b      	beq.n	800243e <__aeabi_dmul+0x4b6>
 8002386:	210f      	movs	r1, #15
 8002388:	2400      	movs	r4, #0
 800238a:	4011      	ands	r1, r2
 800238c:	2904      	cmp	r1, #4
 800238e:	d053      	beq.n	8002438 <__aeabi_dmul+0x4b0>
 8002390:	1d11      	adds	r1, r2, #4
 8002392:	4291      	cmp	r1, r2
 8002394:	4192      	sbcs	r2, r2
 8002396:	4252      	negs	r2, r2
 8002398:	18a4      	adds	r4, r4, r2
 800239a:	000a      	movs	r2, r1
 800239c:	0223      	lsls	r3, r4, #8
 800239e:	d54b      	bpl.n	8002438 <__aeabi_dmul+0x4b0>
 80023a0:	2201      	movs	r2, #1
 80023a2:	2400      	movs	r4, #0
 80023a4:	2500      	movs	r5, #0
 80023a6:	e650      	b.n	800204a <__aeabi_dmul+0xc2>
 80023a8:	2380      	movs	r3, #128	; 0x80
 80023aa:	031b      	lsls	r3, r3, #12
 80023ac:	421c      	tst	r4, r3
 80023ae:	d009      	beq.n	80023c4 <__aeabi_dmul+0x43c>
 80023b0:	421e      	tst	r6, r3
 80023b2:	d107      	bne.n	80023c4 <__aeabi_dmul+0x43c>
 80023b4:	4333      	orrs	r3, r6
 80023b6:	031c      	lsls	r4, r3, #12
 80023b8:	4643      	mov	r3, r8
 80023ba:	0015      	movs	r5, r2
 80023bc:	0b24      	lsrs	r4, r4, #12
 80023be:	4a25      	ldr	r2, [pc, #148]	; (8002454 <__aeabi_dmul+0x4cc>)
 80023c0:	9301      	str	r3, [sp, #4]
 80023c2:	e642      	b.n	800204a <__aeabi_dmul+0xc2>
 80023c4:	2280      	movs	r2, #128	; 0x80
 80023c6:	0312      	lsls	r2, r2, #12
 80023c8:	4314      	orrs	r4, r2
 80023ca:	0324      	lsls	r4, r4, #12
 80023cc:	4a21      	ldr	r2, [pc, #132]	; (8002454 <__aeabi_dmul+0x4cc>)
 80023ce:	0b24      	lsrs	r4, r4, #12
 80023d0:	9701      	str	r7, [sp, #4]
 80023d2:	e63a      	b.n	800204a <__aeabi_dmul+0xc2>
 80023d4:	f000 fd50 	bl	8002e78 <__clzsi2>
 80023d8:	0001      	movs	r1, r0
 80023da:	0002      	movs	r2, r0
 80023dc:	3115      	adds	r1, #21
 80023de:	3220      	adds	r2, #32
 80023e0:	291c      	cmp	r1, #28
 80023e2:	dc00      	bgt.n	80023e6 <__aeabi_dmul+0x45e>
 80023e4:	e74b      	b.n	800227e <__aeabi_dmul+0x2f6>
 80023e6:	0034      	movs	r4, r6
 80023e8:	3808      	subs	r0, #8
 80023ea:	2500      	movs	r5, #0
 80023ec:	4084      	lsls	r4, r0
 80023ee:	e750      	b.n	8002292 <__aeabi_dmul+0x30a>
 80023f0:	f000 fd42 	bl	8002e78 <__clzsi2>
 80023f4:	0003      	movs	r3, r0
 80023f6:	001a      	movs	r2, r3
 80023f8:	3215      	adds	r2, #21
 80023fa:	3020      	adds	r0, #32
 80023fc:	2a1c      	cmp	r2, #28
 80023fe:	dc00      	bgt.n	8002402 <__aeabi_dmul+0x47a>
 8002400:	e71e      	b.n	8002240 <__aeabi_dmul+0x2b8>
 8002402:	4656      	mov	r6, sl
 8002404:	3b08      	subs	r3, #8
 8002406:	2200      	movs	r2, #0
 8002408:	409e      	lsls	r6, r3
 800240a:	e723      	b.n	8002254 <__aeabi_dmul+0x2cc>
 800240c:	9b00      	ldr	r3, [sp, #0]
 800240e:	469c      	mov	ip, r3
 8002410:	e6e6      	b.n	80021e0 <__aeabi_dmul+0x258>
 8002412:	4912      	ldr	r1, [pc, #72]	; (800245c <__aeabi_dmul+0x4d4>)
 8002414:	0022      	movs	r2, r4
 8002416:	4461      	add	r1, ip
 8002418:	002e      	movs	r6, r5
 800241a:	408d      	lsls	r5, r1
 800241c:	408a      	lsls	r2, r1
 800241e:	40c6      	lsrs	r6, r0
 8002420:	1e69      	subs	r1, r5, #1
 8002422:	418d      	sbcs	r5, r1
 8002424:	4332      	orrs	r2, r6
 8002426:	432a      	orrs	r2, r5
 8002428:	40c4      	lsrs	r4, r0
 800242a:	0753      	lsls	r3, r2, #29
 800242c:	d0b6      	beq.n	800239c <__aeabi_dmul+0x414>
 800242e:	210f      	movs	r1, #15
 8002430:	4011      	ands	r1, r2
 8002432:	2904      	cmp	r1, #4
 8002434:	d1ac      	bne.n	8002390 <__aeabi_dmul+0x408>
 8002436:	e7b1      	b.n	800239c <__aeabi_dmul+0x414>
 8002438:	0765      	lsls	r5, r4, #29
 800243a:	0264      	lsls	r4, r4, #9
 800243c:	0b24      	lsrs	r4, r4, #12
 800243e:	08d2      	lsrs	r2, r2, #3
 8002440:	4315      	orrs	r5, r2
 8002442:	2200      	movs	r2, #0
 8002444:	e601      	b.n	800204a <__aeabi_dmul+0xc2>
 8002446:	2280      	movs	r2, #128	; 0x80
 8002448:	0312      	lsls	r2, r2, #12
 800244a:	4314      	orrs	r4, r2
 800244c:	0324      	lsls	r4, r4, #12
 800244e:	4a01      	ldr	r2, [pc, #4]	; (8002454 <__aeabi_dmul+0x4cc>)
 8002450:	0b24      	lsrs	r4, r4, #12
 8002452:	e5fa      	b.n	800204a <__aeabi_dmul+0xc2>
 8002454:	000007ff 	.word	0x000007ff
 8002458:	0000043e 	.word	0x0000043e
 800245c:	0000041e 	.word	0x0000041e

08002460 <__aeabi_dsub>:
 8002460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002462:	4657      	mov	r7, sl
 8002464:	464e      	mov	r6, r9
 8002466:	4645      	mov	r5, r8
 8002468:	46de      	mov	lr, fp
 800246a:	b5e0      	push	{r5, r6, r7, lr}
 800246c:	001e      	movs	r6, r3
 800246e:	0017      	movs	r7, r2
 8002470:	004a      	lsls	r2, r1, #1
 8002472:	030b      	lsls	r3, r1, #12
 8002474:	0d52      	lsrs	r2, r2, #21
 8002476:	0a5b      	lsrs	r3, r3, #9
 8002478:	4690      	mov	r8, r2
 800247a:	0f42      	lsrs	r2, r0, #29
 800247c:	431a      	orrs	r2, r3
 800247e:	0fcd      	lsrs	r5, r1, #31
 8002480:	4ccd      	ldr	r4, [pc, #820]	; (80027b8 <__aeabi_dsub+0x358>)
 8002482:	0331      	lsls	r1, r6, #12
 8002484:	00c3      	lsls	r3, r0, #3
 8002486:	4694      	mov	ip, r2
 8002488:	0070      	lsls	r0, r6, #1
 800248a:	0f7a      	lsrs	r2, r7, #29
 800248c:	0a49      	lsrs	r1, r1, #9
 800248e:	00ff      	lsls	r7, r7, #3
 8002490:	469a      	mov	sl, r3
 8002492:	46b9      	mov	r9, r7
 8002494:	0d40      	lsrs	r0, r0, #21
 8002496:	0ff6      	lsrs	r6, r6, #31
 8002498:	4311      	orrs	r1, r2
 800249a:	42a0      	cmp	r0, r4
 800249c:	d100      	bne.n	80024a0 <__aeabi_dsub+0x40>
 800249e:	e0b1      	b.n	8002604 <__aeabi_dsub+0x1a4>
 80024a0:	2201      	movs	r2, #1
 80024a2:	4056      	eors	r6, r2
 80024a4:	46b3      	mov	fp, r6
 80024a6:	42b5      	cmp	r5, r6
 80024a8:	d100      	bne.n	80024ac <__aeabi_dsub+0x4c>
 80024aa:	e088      	b.n	80025be <__aeabi_dsub+0x15e>
 80024ac:	4642      	mov	r2, r8
 80024ae:	1a12      	subs	r2, r2, r0
 80024b0:	2a00      	cmp	r2, #0
 80024b2:	dc00      	bgt.n	80024b6 <__aeabi_dsub+0x56>
 80024b4:	e0ae      	b.n	8002614 <__aeabi_dsub+0x1b4>
 80024b6:	2800      	cmp	r0, #0
 80024b8:	d100      	bne.n	80024bc <__aeabi_dsub+0x5c>
 80024ba:	e0c1      	b.n	8002640 <__aeabi_dsub+0x1e0>
 80024bc:	48be      	ldr	r0, [pc, #760]	; (80027b8 <__aeabi_dsub+0x358>)
 80024be:	4580      	cmp	r8, r0
 80024c0:	d100      	bne.n	80024c4 <__aeabi_dsub+0x64>
 80024c2:	e151      	b.n	8002768 <__aeabi_dsub+0x308>
 80024c4:	2080      	movs	r0, #128	; 0x80
 80024c6:	0400      	lsls	r0, r0, #16
 80024c8:	4301      	orrs	r1, r0
 80024ca:	2a38      	cmp	r2, #56	; 0x38
 80024cc:	dd00      	ble.n	80024d0 <__aeabi_dsub+0x70>
 80024ce:	e17b      	b.n	80027c8 <__aeabi_dsub+0x368>
 80024d0:	2a1f      	cmp	r2, #31
 80024d2:	dd00      	ble.n	80024d6 <__aeabi_dsub+0x76>
 80024d4:	e1ee      	b.n	80028b4 <__aeabi_dsub+0x454>
 80024d6:	2020      	movs	r0, #32
 80024d8:	003e      	movs	r6, r7
 80024da:	1a80      	subs	r0, r0, r2
 80024dc:	000c      	movs	r4, r1
 80024de:	40d6      	lsrs	r6, r2
 80024e0:	40d1      	lsrs	r1, r2
 80024e2:	4087      	lsls	r7, r0
 80024e4:	4662      	mov	r2, ip
 80024e6:	4084      	lsls	r4, r0
 80024e8:	1a52      	subs	r2, r2, r1
 80024ea:	1e78      	subs	r0, r7, #1
 80024ec:	4187      	sbcs	r7, r0
 80024ee:	4694      	mov	ip, r2
 80024f0:	4334      	orrs	r4, r6
 80024f2:	4327      	orrs	r7, r4
 80024f4:	1bdc      	subs	r4, r3, r7
 80024f6:	42a3      	cmp	r3, r4
 80024f8:	419b      	sbcs	r3, r3
 80024fa:	4662      	mov	r2, ip
 80024fc:	425b      	negs	r3, r3
 80024fe:	1ad3      	subs	r3, r2, r3
 8002500:	4699      	mov	r9, r3
 8002502:	464b      	mov	r3, r9
 8002504:	021b      	lsls	r3, r3, #8
 8002506:	d400      	bmi.n	800250a <__aeabi_dsub+0xaa>
 8002508:	e118      	b.n	800273c <__aeabi_dsub+0x2dc>
 800250a:	464b      	mov	r3, r9
 800250c:	0258      	lsls	r0, r3, #9
 800250e:	0a43      	lsrs	r3, r0, #9
 8002510:	4699      	mov	r9, r3
 8002512:	464b      	mov	r3, r9
 8002514:	2b00      	cmp	r3, #0
 8002516:	d100      	bne.n	800251a <__aeabi_dsub+0xba>
 8002518:	e137      	b.n	800278a <__aeabi_dsub+0x32a>
 800251a:	4648      	mov	r0, r9
 800251c:	f000 fcac 	bl	8002e78 <__clzsi2>
 8002520:	0001      	movs	r1, r0
 8002522:	3908      	subs	r1, #8
 8002524:	2320      	movs	r3, #32
 8002526:	0022      	movs	r2, r4
 8002528:	4648      	mov	r0, r9
 800252a:	1a5b      	subs	r3, r3, r1
 800252c:	40da      	lsrs	r2, r3
 800252e:	4088      	lsls	r0, r1
 8002530:	408c      	lsls	r4, r1
 8002532:	4643      	mov	r3, r8
 8002534:	4310      	orrs	r0, r2
 8002536:	4588      	cmp	r8, r1
 8002538:	dd00      	ble.n	800253c <__aeabi_dsub+0xdc>
 800253a:	e136      	b.n	80027aa <__aeabi_dsub+0x34a>
 800253c:	1ac9      	subs	r1, r1, r3
 800253e:	1c4b      	adds	r3, r1, #1
 8002540:	2b1f      	cmp	r3, #31
 8002542:	dd00      	ble.n	8002546 <__aeabi_dsub+0xe6>
 8002544:	e0ea      	b.n	800271c <__aeabi_dsub+0x2bc>
 8002546:	2220      	movs	r2, #32
 8002548:	0026      	movs	r6, r4
 800254a:	1ad2      	subs	r2, r2, r3
 800254c:	0001      	movs	r1, r0
 800254e:	4094      	lsls	r4, r2
 8002550:	40de      	lsrs	r6, r3
 8002552:	40d8      	lsrs	r0, r3
 8002554:	2300      	movs	r3, #0
 8002556:	4091      	lsls	r1, r2
 8002558:	1e62      	subs	r2, r4, #1
 800255a:	4194      	sbcs	r4, r2
 800255c:	4681      	mov	r9, r0
 800255e:	4698      	mov	r8, r3
 8002560:	4331      	orrs	r1, r6
 8002562:	430c      	orrs	r4, r1
 8002564:	0763      	lsls	r3, r4, #29
 8002566:	d009      	beq.n	800257c <__aeabi_dsub+0x11c>
 8002568:	230f      	movs	r3, #15
 800256a:	4023      	ands	r3, r4
 800256c:	2b04      	cmp	r3, #4
 800256e:	d005      	beq.n	800257c <__aeabi_dsub+0x11c>
 8002570:	1d23      	adds	r3, r4, #4
 8002572:	42a3      	cmp	r3, r4
 8002574:	41a4      	sbcs	r4, r4
 8002576:	4264      	negs	r4, r4
 8002578:	44a1      	add	r9, r4
 800257a:	001c      	movs	r4, r3
 800257c:	464b      	mov	r3, r9
 800257e:	021b      	lsls	r3, r3, #8
 8002580:	d400      	bmi.n	8002584 <__aeabi_dsub+0x124>
 8002582:	e0de      	b.n	8002742 <__aeabi_dsub+0x2e2>
 8002584:	4641      	mov	r1, r8
 8002586:	4b8c      	ldr	r3, [pc, #560]	; (80027b8 <__aeabi_dsub+0x358>)
 8002588:	3101      	adds	r1, #1
 800258a:	4299      	cmp	r1, r3
 800258c:	d100      	bne.n	8002590 <__aeabi_dsub+0x130>
 800258e:	e0e7      	b.n	8002760 <__aeabi_dsub+0x300>
 8002590:	464b      	mov	r3, r9
 8002592:	488a      	ldr	r0, [pc, #552]	; (80027bc <__aeabi_dsub+0x35c>)
 8002594:	08e4      	lsrs	r4, r4, #3
 8002596:	4003      	ands	r3, r0
 8002598:	0018      	movs	r0, r3
 800259a:	0549      	lsls	r1, r1, #21
 800259c:	075b      	lsls	r3, r3, #29
 800259e:	0240      	lsls	r0, r0, #9
 80025a0:	4323      	orrs	r3, r4
 80025a2:	0d4a      	lsrs	r2, r1, #21
 80025a4:	0b04      	lsrs	r4, r0, #12
 80025a6:	0512      	lsls	r2, r2, #20
 80025a8:	07ed      	lsls	r5, r5, #31
 80025aa:	4322      	orrs	r2, r4
 80025ac:	432a      	orrs	r2, r5
 80025ae:	0018      	movs	r0, r3
 80025b0:	0011      	movs	r1, r2
 80025b2:	bcf0      	pop	{r4, r5, r6, r7}
 80025b4:	46bb      	mov	fp, r7
 80025b6:	46b2      	mov	sl, r6
 80025b8:	46a9      	mov	r9, r5
 80025ba:	46a0      	mov	r8, r4
 80025bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80025be:	4642      	mov	r2, r8
 80025c0:	1a12      	subs	r2, r2, r0
 80025c2:	2a00      	cmp	r2, #0
 80025c4:	dd52      	ble.n	800266c <__aeabi_dsub+0x20c>
 80025c6:	2800      	cmp	r0, #0
 80025c8:	d100      	bne.n	80025cc <__aeabi_dsub+0x16c>
 80025ca:	e09c      	b.n	8002706 <__aeabi_dsub+0x2a6>
 80025cc:	45a0      	cmp	r8, r4
 80025ce:	d100      	bne.n	80025d2 <__aeabi_dsub+0x172>
 80025d0:	e0ca      	b.n	8002768 <__aeabi_dsub+0x308>
 80025d2:	2080      	movs	r0, #128	; 0x80
 80025d4:	0400      	lsls	r0, r0, #16
 80025d6:	4301      	orrs	r1, r0
 80025d8:	2a38      	cmp	r2, #56	; 0x38
 80025da:	dd00      	ble.n	80025de <__aeabi_dsub+0x17e>
 80025dc:	e149      	b.n	8002872 <__aeabi_dsub+0x412>
 80025de:	2a1f      	cmp	r2, #31
 80025e0:	dc00      	bgt.n	80025e4 <__aeabi_dsub+0x184>
 80025e2:	e197      	b.n	8002914 <__aeabi_dsub+0x4b4>
 80025e4:	0010      	movs	r0, r2
 80025e6:	000e      	movs	r6, r1
 80025e8:	3820      	subs	r0, #32
 80025ea:	40c6      	lsrs	r6, r0
 80025ec:	2a20      	cmp	r2, #32
 80025ee:	d004      	beq.n	80025fa <__aeabi_dsub+0x19a>
 80025f0:	2040      	movs	r0, #64	; 0x40
 80025f2:	1a82      	subs	r2, r0, r2
 80025f4:	4091      	lsls	r1, r2
 80025f6:	430f      	orrs	r7, r1
 80025f8:	46b9      	mov	r9, r7
 80025fa:	464c      	mov	r4, r9
 80025fc:	1e62      	subs	r2, r4, #1
 80025fe:	4194      	sbcs	r4, r2
 8002600:	4334      	orrs	r4, r6
 8002602:	e13a      	b.n	800287a <__aeabi_dsub+0x41a>
 8002604:	000a      	movs	r2, r1
 8002606:	433a      	orrs	r2, r7
 8002608:	d028      	beq.n	800265c <__aeabi_dsub+0x1fc>
 800260a:	46b3      	mov	fp, r6
 800260c:	42b5      	cmp	r5, r6
 800260e:	d02b      	beq.n	8002668 <__aeabi_dsub+0x208>
 8002610:	4a6b      	ldr	r2, [pc, #428]	; (80027c0 <__aeabi_dsub+0x360>)
 8002612:	4442      	add	r2, r8
 8002614:	2a00      	cmp	r2, #0
 8002616:	d05d      	beq.n	80026d4 <__aeabi_dsub+0x274>
 8002618:	4642      	mov	r2, r8
 800261a:	4644      	mov	r4, r8
 800261c:	1a82      	subs	r2, r0, r2
 800261e:	2c00      	cmp	r4, #0
 8002620:	d000      	beq.n	8002624 <__aeabi_dsub+0x1c4>
 8002622:	e0f5      	b.n	8002810 <__aeabi_dsub+0x3b0>
 8002624:	4665      	mov	r5, ip
 8002626:	431d      	orrs	r5, r3
 8002628:	d100      	bne.n	800262c <__aeabi_dsub+0x1cc>
 800262a:	e19c      	b.n	8002966 <__aeabi_dsub+0x506>
 800262c:	1e55      	subs	r5, r2, #1
 800262e:	2a01      	cmp	r2, #1
 8002630:	d100      	bne.n	8002634 <__aeabi_dsub+0x1d4>
 8002632:	e1fb      	b.n	8002a2c <__aeabi_dsub+0x5cc>
 8002634:	4c60      	ldr	r4, [pc, #384]	; (80027b8 <__aeabi_dsub+0x358>)
 8002636:	42a2      	cmp	r2, r4
 8002638:	d100      	bne.n	800263c <__aeabi_dsub+0x1dc>
 800263a:	e1bd      	b.n	80029b8 <__aeabi_dsub+0x558>
 800263c:	002a      	movs	r2, r5
 800263e:	e0f0      	b.n	8002822 <__aeabi_dsub+0x3c2>
 8002640:	0008      	movs	r0, r1
 8002642:	4338      	orrs	r0, r7
 8002644:	d100      	bne.n	8002648 <__aeabi_dsub+0x1e8>
 8002646:	e0c3      	b.n	80027d0 <__aeabi_dsub+0x370>
 8002648:	1e50      	subs	r0, r2, #1
 800264a:	2a01      	cmp	r2, #1
 800264c:	d100      	bne.n	8002650 <__aeabi_dsub+0x1f0>
 800264e:	e1a8      	b.n	80029a2 <__aeabi_dsub+0x542>
 8002650:	4c59      	ldr	r4, [pc, #356]	; (80027b8 <__aeabi_dsub+0x358>)
 8002652:	42a2      	cmp	r2, r4
 8002654:	d100      	bne.n	8002658 <__aeabi_dsub+0x1f8>
 8002656:	e087      	b.n	8002768 <__aeabi_dsub+0x308>
 8002658:	0002      	movs	r2, r0
 800265a:	e736      	b.n	80024ca <__aeabi_dsub+0x6a>
 800265c:	2201      	movs	r2, #1
 800265e:	4056      	eors	r6, r2
 8002660:	46b3      	mov	fp, r6
 8002662:	42b5      	cmp	r5, r6
 8002664:	d000      	beq.n	8002668 <__aeabi_dsub+0x208>
 8002666:	e721      	b.n	80024ac <__aeabi_dsub+0x4c>
 8002668:	4a55      	ldr	r2, [pc, #340]	; (80027c0 <__aeabi_dsub+0x360>)
 800266a:	4442      	add	r2, r8
 800266c:	2a00      	cmp	r2, #0
 800266e:	d100      	bne.n	8002672 <__aeabi_dsub+0x212>
 8002670:	e0b5      	b.n	80027de <__aeabi_dsub+0x37e>
 8002672:	4642      	mov	r2, r8
 8002674:	4644      	mov	r4, r8
 8002676:	1a82      	subs	r2, r0, r2
 8002678:	2c00      	cmp	r4, #0
 800267a:	d100      	bne.n	800267e <__aeabi_dsub+0x21e>
 800267c:	e138      	b.n	80028f0 <__aeabi_dsub+0x490>
 800267e:	4e4e      	ldr	r6, [pc, #312]	; (80027b8 <__aeabi_dsub+0x358>)
 8002680:	42b0      	cmp	r0, r6
 8002682:	d100      	bne.n	8002686 <__aeabi_dsub+0x226>
 8002684:	e1de      	b.n	8002a44 <__aeabi_dsub+0x5e4>
 8002686:	2680      	movs	r6, #128	; 0x80
 8002688:	4664      	mov	r4, ip
 800268a:	0436      	lsls	r6, r6, #16
 800268c:	4334      	orrs	r4, r6
 800268e:	46a4      	mov	ip, r4
 8002690:	2a38      	cmp	r2, #56	; 0x38
 8002692:	dd00      	ble.n	8002696 <__aeabi_dsub+0x236>
 8002694:	e196      	b.n	80029c4 <__aeabi_dsub+0x564>
 8002696:	2a1f      	cmp	r2, #31
 8002698:	dd00      	ble.n	800269c <__aeabi_dsub+0x23c>
 800269a:	e224      	b.n	8002ae6 <__aeabi_dsub+0x686>
 800269c:	2620      	movs	r6, #32
 800269e:	1ab4      	subs	r4, r6, r2
 80026a0:	46a2      	mov	sl, r4
 80026a2:	4664      	mov	r4, ip
 80026a4:	4656      	mov	r6, sl
 80026a6:	40b4      	lsls	r4, r6
 80026a8:	46a1      	mov	r9, r4
 80026aa:	001c      	movs	r4, r3
 80026ac:	464e      	mov	r6, r9
 80026ae:	40d4      	lsrs	r4, r2
 80026b0:	4326      	orrs	r6, r4
 80026b2:	0034      	movs	r4, r6
 80026b4:	4656      	mov	r6, sl
 80026b6:	40b3      	lsls	r3, r6
 80026b8:	1e5e      	subs	r6, r3, #1
 80026ba:	41b3      	sbcs	r3, r6
 80026bc:	431c      	orrs	r4, r3
 80026be:	4663      	mov	r3, ip
 80026c0:	40d3      	lsrs	r3, r2
 80026c2:	18c9      	adds	r1, r1, r3
 80026c4:	19e4      	adds	r4, r4, r7
 80026c6:	42bc      	cmp	r4, r7
 80026c8:	41bf      	sbcs	r7, r7
 80026ca:	427f      	negs	r7, r7
 80026cc:	46b9      	mov	r9, r7
 80026ce:	4680      	mov	r8, r0
 80026d0:	4489      	add	r9, r1
 80026d2:	e0d8      	b.n	8002886 <__aeabi_dsub+0x426>
 80026d4:	4640      	mov	r0, r8
 80026d6:	4c3b      	ldr	r4, [pc, #236]	; (80027c4 <__aeabi_dsub+0x364>)
 80026d8:	3001      	adds	r0, #1
 80026da:	4220      	tst	r0, r4
 80026dc:	d000      	beq.n	80026e0 <__aeabi_dsub+0x280>
 80026de:	e0b4      	b.n	800284a <__aeabi_dsub+0x3ea>
 80026e0:	4640      	mov	r0, r8
 80026e2:	2800      	cmp	r0, #0
 80026e4:	d000      	beq.n	80026e8 <__aeabi_dsub+0x288>
 80026e6:	e144      	b.n	8002972 <__aeabi_dsub+0x512>
 80026e8:	4660      	mov	r0, ip
 80026ea:	4318      	orrs	r0, r3
 80026ec:	d100      	bne.n	80026f0 <__aeabi_dsub+0x290>
 80026ee:	e190      	b.n	8002a12 <__aeabi_dsub+0x5b2>
 80026f0:	0008      	movs	r0, r1
 80026f2:	4338      	orrs	r0, r7
 80026f4:	d000      	beq.n	80026f8 <__aeabi_dsub+0x298>
 80026f6:	e1aa      	b.n	8002a4e <__aeabi_dsub+0x5ee>
 80026f8:	4661      	mov	r1, ip
 80026fa:	08db      	lsrs	r3, r3, #3
 80026fc:	0749      	lsls	r1, r1, #29
 80026fe:	430b      	orrs	r3, r1
 8002700:	4661      	mov	r1, ip
 8002702:	08cc      	lsrs	r4, r1, #3
 8002704:	e027      	b.n	8002756 <__aeabi_dsub+0x2f6>
 8002706:	0008      	movs	r0, r1
 8002708:	4338      	orrs	r0, r7
 800270a:	d061      	beq.n	80027d0 <__aeabi_dsub+0x370>
 800270c:	1e50      	subs	r0, r2, #1
 800270e:	2a01      	cmp	r2, #1
 8002710:	d100      	bne.n	8002714 <__aeabi_dsub+0x2b4>
 8002712:	e139      	b.n	8002988 <__aeabi_dsub+0x528>
 8002714:	42a2      	cmp	r2, r4
 8002716:	d027      	beq.n	8002768 <__aeabi_dsub+0x308>
 8002718:	0002      	movs	r2, r0
 800271a:	e75d      	b.n	80025d8 <__aeabi_dsub+0x178>
 800271c:	0002      	movs	r2, r0
 800271e:	391f      	subs	r1, #31
 8002720:	40ca      	lsrs	r2, r1
 8002722:	0011      	movs	r1, r2
 8002724:	2b20      	cmp	r3, #32
 8002726:	d003      	beq.n	8002730 <__aeabi_dsub+0x2d0>
 8002728:	2240      	movs	r2, #64	; 0x40
 800272a:	1ad3      	subs	r3, r2, r3
 800272c:	4098      	lsls	r0, r3
 800272e:	4304      	orrs	r4, r0
 8002730:	1e63      	subs	r3, r4, #1
 8002732:	419c      	sbcs	r4, r3
 8002734:	2300      	movs	r3, #0
 8002736:	4699      	mov	r9, r3
 8002738:	4698      	mov	r8, r3
 800273a:	430c      	orrs	r4, r1
 800273c:	0763      	lsls	r3, r4, #29
 800273e:	d000      	beq.n	8002742 <__aeabi_dsub+0x2e2>
 8002740:	e712      	b.n	8002568 <__aeabi_dsub+0x108>
 8002742:	464b      	mov	r3, r9
 8002744:	464a      	mov	r2, r9
 8002746:	08e4      	lsrs	r4, r4, #3
 8002748:	075b      	lsls	r3, r3, #29
 800274a:	4323      	orrs	r3, r4
 800274c:	08d4      	lsrs	r4, r2, #3
 800274e:	4642      	mov	r2, r8
 8002750:	4919      	ldr	r1, [pc, #100]	; (80027b8 <__aeabi_dsub+0x358>)
 8002752:	428a      	cmp	r2, r1
 8002754:	d00e      	beq.n	8002774 <__aeabi_dsub+0x314>
 8002756:	0324      	lsls	r4, r4, #12
 8002758:	0552      	lsls	r2, r2, #21
 800275a:	0b24      	lsrs	r4, r4, #12
 800275c:	0d52      	lsrs	r2, r2, #21
 800275e:	e722      	b.n	80025a6 <__aeabi_dsub+0x146>
 8002760:	000a      	movs	r2, r1
 8002762:	2400      	movs	r4, #0
 8002764:	2300      	movs	r3, #0
 8002766:	e71e      	b.n	80025a6 <__aeabi_dsub+0x146>
 8002768:	08db      	lsrs	r3, r3, #3
 800276a:	4662      	mov	r2, ip
 800276c:	0752      	lsls	r2, r2, #29
 800276e:	4313      	orrs	r3, r2
 8002770:	4662      	mov	r2, ip
 8002772:	08d4      	lsrs	r4, r2, #3
 8002774:	001a      	movs	r2, r3
 8002776:	4322      	orrs	r2, r4
 8002778:	d100      	bne.n	800277c <__aeabi_dsub+0x31c>
 800277a:	e1fc      	b.n	8002b76 <__aeabi_dsub+0x716>
 800277c:	2280      	movs	r2, #128	; 0x80
 800277e:	0312      	lsls	r2, r2, #12
 8002780:	4314      	orrs	r4, r2
 8002782:	0324      	lsls	r4, r4, #12
 8002784:	4a0c      	ldr	r2, [pc, #48]	; (80027b8 <__aeabi_dsub+0x358>)
 8002786:	0b24      	lsrs	r4, r4, #12
 8002788:	e70d      	b.n	80025a6 <__aeabi_dsub+0x146>
 800278a:	0020      	movs	r0, r4
 800278c:	f000 fb74 	bl	8002e78 <__clzsi2>
 8002790:	0001      	movs	r1, r0
 8002792:	3118      	adds	r1, #24
 8002794:	291f      	cmp	r1, #31
 8002796:	dc00      	bgt.n	800279a <__aeabi_dsub+0x33a>
 8002798:	e6c4      	b.n	8002524 <__aeabi_dsub+0xc4>
 800279a:	3808      	subs	r0, #8
 800279c:	4084      	lsls	r4, r0
 800279e:	4643      	mov	r3, r8
 80027a0:	0020      	movs	r0, r4
 80027a2:	2400      	movs	r4, #0
 80027a4:	4588      	cmp	r8, r1
 80027a6:	dc00      	bgt.n	80027aa <__aeabi_dsub+0x34a>
 80027a8:	e6c8      	b.n	800253c <__aeabi_dsub+0xdc>
 80027aa:	4a04      	ldr	r2, [pc, #16]	; (80027bc <__aeabi_dsub+0x35c>)
 80027ac:	1a5b      	subs	r3, r3, r1
 80027ae:	4010      	ands	r0, r2
 80027b0:	4698      	mov	r8, r3
 80027b2:	4681      	mov	r9, r0
 80027b4:	e6d6      	b.n	8002564 <__aeabi_dsub+0x104>
 80027b6:	46c0      	nop			; (mov r8, r8)
 80027b8:	000007ff 	.word	0x000007ff
 80027bc:	ff7fffff 	.word	0xff7fffff
 80027c0:	fffff801 	.word	0xfffff801
 80027c4:	000007fe 	.word	0x000007fe
 80027c8:	430f      	orrs	r7, r1
 80027ca:	1e7a      	subs	r2, r7, #1
 80027cc:	4197      	sbcs	r7, r2
 80027ce:	e691      	b.n	80024f4 <__aeabi_dsub+0x94>
 80027d0:	4661      	mov	r1, ip
 80027d2:	08db      	lsrs	r3, r3, #3
 80027d4:	0749      	lsls	r1, r1, #29
 80027d6:	430b      	orrs	r3, r1
 80027d8:	4661      	mov	r1, ip
 80027da:	08cc      	lsrs	r4, r1, #3
 80027dc:	e7b8      	b.n	8002750 <__aeabi_dsub+0x2f0>
 80027de:	4640      	mov	r0, r8
 80027e0:	4cd3      	ldr	r4, [pc, #844]	; (8002b30 <__aeabi_dsub+0x6d0>)
 80027e2:	3001      	adds	r0, #1
 80027e4:	4220      	tst	r0, r4
 80027e6:	d000      	beq.n	80027ea <__aeabi_dsub+0x38a>
 80027e8:	e0a2      	b.n	8002930 <__aeabi_dsub+0x4d0>
 80027ea:	4640      	mov	r0, r8
 80027ec:	2800      	cmp	r0, #0
 80027ee:	d000      	beq.n	80027f2 <__aeabi_dsub+0x392>
 80027f0:	e101      	b.n	80029f6 <__aeabi_dsub+0x596>
 80027f2:	4660      	mov	r0, ip
 80027f4:	4318      	orrs	r0, r3
 80027f6:	d100      	bne.n	80027fa <__aeabi_dsub+0x39a>
 80027f8:	e15e      	b.n	8002ab8 <__aeabi_dsub+0x658>
 80027fa:	0008      	movs	r0, r1
 80027fc:	4338      	orrs	r0, r7
 80027fe:	d000      	beq.n	8002802 <__aeabi_dsub+0x3a2>
 8002800:	e15f      	b.n	8002ac2 <__aeabi_dsub+0x662>
 8002802:	4661      	mov	r1, ip
 8002804:	08db      	lsrs	r3, r3, #3
 8002806:	0749      	lsls	r1, r1, #29
 8002808:	430b      	orrs	r3, r1
 800280a:	4661      	mov	r1, ip
 800280c:	08cc      	lsrs	r4, r1, #3
 800280e:	e7a2      	b.n	8002756 <__aeabi_dsub+0x2f6>
 8002810:	4dc8      	ldr	r5, [pc, #800]	; (8002b34 <__aeabi_dsub+0x6d4>)
 8002812:	42a8      	cmp	r0, r5
 8002814:	d100      	bne.n	8002818 <__aeabi_dsub+0x3b8>
 8002816:	e0cf      	b.n	80029b8 <__aeabi_dsub+0x558>
 8002818:	2580      	movs	r5, #128	; 0x80
 800281a:	4664      	mov	r4, ip
 800281c:	042d      	lsls	r5, r5, #16
 800281e:	432c      	orrs	r4, r5
 8002820:	46a4      	mov	ip, r4
 8002822:	2a38      	cmp	r2, #56	; 0x38
 8002824:	dc56      	bgt.n	80028d4 <__aeabi_dsub+0x474>
 8002826:	2a1f      	cmp	r2, #31
 8002828:	dd00      	ble.n	800282c <__aeabi_dsub+0x3cc>
 800282a:	e0d1      	b.n	80029d0 <__aeabi_dsub+0x570>
 800282c:	2520      	movs	r5, #32
 800282e:	001e      	movs	r6, r3
 8002830:	1aad      	subs	r5, r5, r2
 8002832:	4664      	mov	r4, ip
 8002834:	40ab      	lsls	r3, r5
 8002836:	40ac      	lsls	r4, r5
 8002838:	40d6      	lsrs	r6, r2
 800283a:	1e5d      	subs	r5, r3, #1
 800283c:	41ab      	sbcs	r3, r5
 800283e:	4334      	orrs	r4, r6
 8002840:	4323      	orrs	r3, r4
 8002842:	4664      	mov	r4, ip
 8002844:	40d4      	lsrs	r4, r2
 8002846:	1b09      	subs	r1, r1, r4
 8002848:	e049      	b.n	80028de <__aeabi_dsub+0x47e>
 800284a:	4660      	mov	r0, ip
 800284c:	1bdc      	subs	r4, r3, r7
 800284e:	1a46      	subs	r6, r0, r1
 8002850:	42a3      	cmp	r3, r4
 8002852:	4180      	sbcs	r0, r0
 8002854:	4240      	negs	r0, r0
 8002856:	4681      	mov	r9, r0
 8002858:	0030      	movs	r0, r6
 800285a:	464e      	mov	r6, r9
 800285c:	1b80      	subs	r0, r0, r6
 800285e:	4681      	mov	r9, r0
 8002860:	0200      	lsls	r0, r0, #8
 8002862:	d476      	bmi.n	8002952 <__aeabi_dsub+0x4f2>
 8002864:	464b      	mov	r3, r9
 8002866:	4323      	orrs	r3, r4
 8002868:	d000      	beq.n	800286c <__aeabi_dsub+0x40c>
 800286a:	e652      	b.n	8002512 <__aeabi_dsub+0xb2>
 800286c:	2400      	movs	r4, #0
 800286e:	2500      	movs	r5, #0
 8002870:	e771      	b.n	8002756 <__aeabi_dsub+0x2f6>
 8002872:	4339      	orrs	r1, r7
 8002874:	000c      	movs	r4, r1
 8002876:	1e62      	subs	r2, r4, #1
 8002878:	4194      	sbcs	r4, r2
 800287a:	18e4      	adds	r4, r4, r3
 800287c:	429c      	cmp	r4, r3
 800287e:	419b      	sbcs	r3, r3
 8002880:	425b      	negs	r3, r3
 8002882:	4463      	add	r3, ip
 8002884:	4699      	mov	r9, r3
 8002886:	464b      	mov	r3, r9
 8002888:	021b      	lsls	r3, r3, #8
 800288a:	d400      	bmi.n	800288e <__aeabi_dsub+0x42e>
 800288c:	e756      	b.n	800273c <__aeabi_dsub+0x2dc>
 800288e:	2301      	movs	r3, #1
 8002890:	469c      	mov	ip, r3
 8002892:	4ba8      	ldr	r3, [pc, #672]	; (8002b34 <__aeabi_dsub+0x6d4>)
 8002894:	44e0      	add	r8, ip
 8002896:	4598      	cmp	r8, r3
 8002898:	d038      	beq.n	800290c <__aeabi_dsub+0x4ac>
 800289a:	464b      	mov	r3, r9
 800289c:	48a6      	ldr	r0, [pc, #664]	; (8002b38 <__aeabi_dsub+0x6d8>)
 800289e:	2201      	movs	r2, #1
 80028a0:	4003      	ands	r3, r0
 80028a2:	0018      	movs	r0, r3
 80028a4:	0863      	lsrs	r3, r4, #1
 80028a6:	4014      	ands	r4, r2
 80028a8:	431c      	orrs	r4, r3
 80028aa:	07c3      	lsls	r3, r0, #31
 80028ac:	431c      	orrs	r4, r3
 80028ae:	0843      	lsrs	r3, r0, #1
 80028b0:	4699      	mov	r9, r3
 80028b2:	e657      	b.n	8002564 <__aeabi_dsub+0x104>
 80028b4:	0010      	movs	r0, r2
 80028b6:	000e      	movs	r6, r1
 80028b8:	3820      	subs	r0, #32
 80028ba:	40c6      	lsrs	r6, r0
 80028bc:	2a20      	cmp	r2, #32
 80028be:	d004      	beq.n	80028ca <__aeabi_dsub+0x46a>
 80028c0:	2040      	movs	r0, #64	; 0x40
 80028c2:	1a82      	subs	r2, r0, r2
 80028c4:	4091      	lsls	r1, r2
 80028c6:	430f      	orrs	r7, r1
 80028c8:	46b9      	mov	r9, r7
 80028ca:	464f      	mov	r7, r9
 80028cc:	1e7a      	subs	r2, r7, #1
 80028ce:	4197      	sbcs	r7, r2
 80028d0:	4337      	orrs	r7, r6
 80028d2:	e60f      	b.n	80024f4 <__aeabi_dsub+0x94>
 80028d4:	4662      	mov	r2, ip
 80028d6:	431a      	orrs	r2, r3
 80028d8:	0013      	movs	r3, r2
 80028da:	1e5a      	subs	r2, r3, #1
 80028dc:	4193      	sbcs	r3, r2
 80028de:	1afc      	subs	r4, r7, r3
 80028e0:	42a7      	cmp	r7, r4
 80028e2:	41bf      	sbcs	r7, r7
 80028e4:	427f      	negs	r7, r7
 80028e6:	1bcb      	subs	r3, r1, r7
 80028e8:	4699      	mov	r9, r3
 80028ea:	465d      	mov	r5, fp
 80028ec:	4680      	mov	r8, r0
 80028ee:	e608      	b.n	8002502 <__aeabi_dsub+0xa2>
 80028f0:	4666      	mov	r6, ip
 80028f2:	431e      	orrs	r6, r3
 80028f4:	d100      	bne.n	80028f8 <__aeabi_dsub+0x498>
 80028f6:	e0be      	b.n	8002a76 <__aeabi_dsub+0x616>
 80028f8:	1e56      	subs	r6, r2, #1
 80028fa:	2a01      	cmp	r2, #1
 80028fc:	d100      	bne.n	8002900 <__aeabi_dsub+0x4a0>
 80028fe:	e109      	b.n	8002b14 <__aeabi_dsub+0x6b4>
 8002900:	4c8c      	ldr	r4, [pc, #560]	; (8002b34 <__aeabi_dsub+0x6d4>)
 8002902:	42a2      	cmp	r2, r4
 8002904:	d100      	bne.n	8002908 <__aeabi_dsub+0x4a8>
 8002906:	e119      	b.n	8002b3c <__aeabi_dsub+0x6dc>
 8002908:	0032      	movs	r2, r6
 800290a:	e6c1      	b.n	8002690 <__aeabi_dsub+0x230>
 800290c:	4642      	mov	r2, r8
 800290e:	2400      	movs	r4, #0
 8002910:	2300      	movs	r3, #0
 8002912:	e648      	b.n	80025a6 <__aeabi_dsub+0x146>
 8002914:	2020      	movs	r0, #32
 8002916:	000c      	movs	r4, r1
 8002918:	1a80      	subs	r0, r0, r2
 800291a:	003e      	movs	r6, r7
 800291c:	4087      	lsls	r7, r0
 800291e:	4084      	lsls	r4, r0
 8002920:	40d6      	lsrs	r6, r2
 8002922:	1e78      	subs	r0, r7, #1
 8002924:	4187      	sbcs	r7, r0
 8002926:	40d1      	lsrs	r1, r2
 8002928:	4334      	orrs	r4, r6
 800292a:	433c      	orrs	r4, r7
 800292c:	448c      	add	ip, r1
 800292e:	e7a4      	b.n	800287a <__aeabi_dsub+0x41a>
 8002930:	4a80      	ldr	r2, [pc, #512]	; (8002b34 <__aeabi_dsub+0x6d4>)
 8002932:	4290      	cmp	r0, r2
 8002934:	d100      	bne.n	8002938 <__aeabi_dsub+0x4d8>
 8002936:	e0e9      	b.n	8002b0c <__aeabi_dsub+0x6ac>
 8002938:	19df      	adds	r7, r3, r7
 800293a:	429f      	cmp	r7, r3
 800293c:	419b      	sbcs	r3, r3
 800293e:	4461      	add	r1, ip
 8002940:	425b      	negs	r3, r3
 8002942:	18c9      	adds	r1, r1, r3
 8002944:	07cc      	lsls	r4, r1, #31
 8002946:	087f      	lsrs	r7, r7, #1
 8002948:	084b      	lsrs	r3, r1, #1
 800294a:	4699      	mov	r9, r3
 800294c:	4680      	mov	r8, r0
 800294e:	433c      	orrs	r4, r7
 8002950:	e6f4      	b.n	800273c <__aeabi_dsub+0x2dc>
 8002952:	1afc      	subs	r4, r7, r3
 8002954:	42a7      	cmp	r7, r4
 8002956:	41bf      	sbcs	r7, r7
 8002958:	4663      	mov	r3, ip
 800295a:	427f      	negs	r7, r7
 800295c:	1ac9      	subs	r1, r1, r3
 800295e:	1bcb      	subs	r3, r1, r7
 8002960:	4699      	mov	r9, r3
 8002962:	465d      	mov	r5, fp
 8002964:	e5d5      	b.n	8002512 <__aeabi_dsub+0xb2>
 8002966:	08ff      	lsrs	r7, r7, #3
 8002968:	074b      	lsls	r3, r1, #29
 800296a:	465d      	mov	r5, fp
 800296c:	433b      	orrs	r3, r7
 800296e:	08cc      	lsrs	r4, r1, #3
 8002970:	e6ee      	b.n	8002750 <__aeabi_dsub+0x2f0>
 8002972:	4662      	mov	r2, ip
 8002974:	431a      	orrs	r2, r3
 8002976:	d000      	beq.n	800297a <__aeabi_dsub+0x51a>
 8002978:	e082      	b.n	8002a80 <__aeabi_dsub+0x620>
 800297a:	000b      	movs	r3, r1
 800297c:	433b      	orrs	r3, r7
 800297e:	d11b      	bne.n	80029b8 <__aeabi_dsub+0x558>
 8002980:	2480      	movs	r4, #128	; 0x80
 8002982:	2500      	movs	r5, #0
 8002984:	0324      	lsls	r4, r4, #12
 8002986:	e6f9      	b.n	800277c <__aeabi_dsub+0x31c>
 8002988:	19dc      	adds	r4, r3, r7
 800298a:	429c      	cmp	r4, r3
 800298c:	419b      	sbcs	r3, r3
 800298e:	4461      	add	r1, ip
 8002990:	4689      	mov	r9, r1
 8002992:	425b      	negs	r3, r3
 8002994:	4499      	add	r9, r3
 8002996:	464b      	mov	r3, r9
 8002998:	021b      	lsls	r3, r3, #8
 800299a:	d444      	bmi.n	8002a26 <__aeabi_dsub+0x5c6>
 800299c:	2301      	movs	r3, #1
 800299e:	4698      	mov	r8, r3
 80029a0:	e6cc      	b.n	800273c <__aeabi_dsub+0x2dc>
 80029a2:	1bdc      	subs	r4, r3, r7
 80029a4:	4662      	mov	r2, ip
 80029a6:	42a3      	cmp	r3, r4
 80029a8:	419b      	sbcs	r3, r3
 80029aa:	1a51      	subs	r1, r2, r1
 80029ac:	425b      	negs	r3, r3
 80029ae:	1acb      	subs	r3, r1, r3
 80029b0:	4699      	mov	r9, r3
 80029b2:	2301      	movs	r3, #1
 80029b4:	4698      	mov	r8, r3
 80029b6:	e5a4      	b.n	8002502 <__aeabi_dsub+0xa2>
 80029b8:	08ff      	lsrs	r7, r7, #3
 80029ba:	074b      	lsls	r3, r1, #29
 80029bc:	465d      	mov	r5, fp
 80029be:	433b      	orrs	r3, r7
 80029c0:	08cc      	lsrs	r4, r1, #3
 80029c2:	e6d7      	b.n	8002774 <__aeabi_dsub+0x314>
 80029c4:	4662      	mov	r2, ip
 80029c6:	431a      	orrs	r2, r3
 80029c8:	0014      	movs	r4, r2
 80029ca:	1e63      	subs	r3, r4, #1
 80029cc:	419c      	sbcs	r4, r3
 80029ce:	e679      	b.n	80026c4 <__aeabi_dsub+0x264>
 80029d0:	0015      	movs	r5, r2
 80029d2:	4664      	mov	r4, ip
 80029d4:	3d20      	subs	r5, #32
 80029d6:	40ec      	lsrs	r4, r5
 80029d8:	46a0      	mov	r8, r4
 80029da:	2a20      	cmp	r2, #32
 80029dc:	d005      	beq.n	80029ea <__aeabi_dsub+0x58a>
 80029de:	2540      	movs	r5, #64	; 0x40
 80029e0:	4664      	mov	r4, ip
 80029e2:	1aaa      	subs	r2, r5, r2
 80029e4:	4094      	lsls	r4, r2
 80029e6:	4323      	orrs	r3, r4
 80029e8:	469a      	mov	sl, r3
 80029ea:	4654      	mov	r4, sl
 80029ec:	1e63      	subs	r3, r4, #1
 80029ee:	419c      	sbcs	r4, r3
 80029f0:	4643      	mov	r3, r8
 80029f2:	4323      	orrs	r3, r4
 80029f4:	e773      	b.n	80028de <__aeabi_dsub+0x47e>
 80029f6:	4662      	mov	r2, ip
 80029f8:	431a      	orrs	r2, r3
 80029fa:	d023      	beq.n	8002a44 <__aeabi_dsub+0x5e4>
 80029fc:	000a      	movs	r2, r1
 80029fe:	433a      	orrs	r2, r7
 8002a00:	d000      	beq.n	8002a04 <__aeabi_dsub+0x5a4>
 8002a02:	e0a0      	b.n	8002b46 <__aeabi_dsub+0x6e6>
 8002a04:	4662      	mov	r2, ip
 8002a06:	08db      	lsrs	r3, r3, #3
 8002a08:	0752      	lsls	r2, r2, #29
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	4662      	mov	r2, ip
 8002a0e:	08d4      	lsrs	r4, r2, #3
 8002a10:	e6b0      	b.n	8002774 <__aeabi_dsub+0x314>
 8002a12:	000b      	movs	r3, r1
 8002a14:	433b      	orrs	r3, r7
 8002a16:	d100      	bne.n	8002a1a <__aeabi_dsub+0x5ba>
 8002a18:	e728      	b.n	800286c <__aeabi_dsub+0x40c>
 8002a1a:	08ff      	lsrs	r7, r7, #3
 8002a1c:	074b      	lsls	r3, r1, #29
 8002a1e:	465d      	mov	r5, fp
 8002a20:	433b      	orrs	r3, r7
 8002a22:	08cc      	lsrs	r4, r1, #3
 8002a24:	e697      	b.n	8002756 <__aeabi_dsub+0x2f6>
 8002a26:	2302      	movs	r3, #2
 8002a28:	4698      	mov	r8, r3
 8002a2a:	e736      	b.n	800289a <__aeabi_dsub+0x43a>
 8002a2c:	1afc      	subs	r4, r7, r3
 8002a2e:	42a7      	cmp	r7, r4
 8002a30:	41bf      	sbcs	r7, r7
 8002a32:	4663      	mov	r3, ip
 8002a34:	427f      	negs	r7, r7
 8002a36:	1ac9      	subs	r1, r1, r3
 8002a38:	1bcb      	subs	r3, r1, r7
 8002a3a:	4699      	mov	r9, r3
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	465d      	mov	r5, fp
 8002a40:	4698      	mov	r8, r3
 8002a42:	e55e      	b.n	8002502 <__aeabi_dsub+0xa2>
 8002a44:	074b      	lsls	r3, r1, #29
 8002a46:	08ff      	lsrs	r7, r7, #3
 8002a48:	433b      	orrs	r3, r7
 8002a4a:	08cc      	lsrs	r4, r1, #3
 8002a4c:	e692      	b.n	8002774 <__aeabi_dsub+0x314>
 8002a4e:	1bdc      	subs	r4, r3, r7
 8002a50:	4660      	mov	r0, ip
 8002a52:	42a3      	cmp	r3, r4
 8002a54:	41b6      	sbcs	r6, r6
 8002a56:	1a40      	subs	r0, r0, r1
 8002a58:	4276      	negs	r6, r6
 8002a5a:	1b80      	subs	r0, r0, r6
 8002a5c:	4681      	mov	r9, r0
 8002a5e:	0200      	lsls	r0, r0, #8
 8002a60:	d560      	bpl.n	8002b24 <__aeabi_dsub+0x6c4>
 8002a62:	1afc      	subs	r4, r7, r3
 8002a64:	42a7      	cmp	r7, r4
 8002a66:	41bf      	sbcs	r7, r7
 8002a68:	4663      	mov	r3, ip
 8002a6a:	427f      	negs	r7, r7
 8002a6c:	1ac9      	subs	r1, r1, r3
 8002a6e:	1bcb      	subs	r3, r1, r7
 8002a70:	4699      	mov	r9, r3
 8002a72:	465d      	mov	r5, fp
 8002a74:	e576      	b.n	8002564 <__aeabi_dsub+0x104>
 8002a76:	08ff      	lsrs	r7, r7, #3
 8002a78:	074b      	lsls	r3, r1, #29
 8002a7a:	433b      	orrs	r3, r7
 8002a7c:	08cc      	lsrs	r4, r1, #3
 8002a7e:	e667      	b.n	8002750 <__aeabi_dsub+0x2f0>
 8002a80:	000a      	movs	r2, r1
 8002a82:	08db      	lsrs	r3, r3, #3
 8002a84:	433a      	orrs	r2, r7
 8002a86:	d100      	bne.n	8002a8a <__aeabi_dsub+0x62a>
 8002a88:	e66f      	b.n	800276a <__aeabi_dsub+0x30a>
 8002a8a:	4662      	mov	r2, ip
 8002a8c:	0752      	lsls	r2, r2, #29
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	4662      	mov	r2, ip
 8002a92:	08d4      	lsrs	r4, r2, #3
 8002a94:	2280      	movs	r2, #128	; 0x80
 8002a96:	0312      	lsls	r2, r2, #12
 8002a98:	4214      	tst	r4, r2
 8002a9a:	d007      	beq.n	8002aac <__aeabi_dsub+0x64c>
 8002a9c:	08c8      	lsrs	r0, r1, #3
 8002a9e:	4210      	tst	r0, r2
 8002aa0:	d104      	bne.n	8002aac <__aeabi_dsub+0x64c>
 8002aa2:	465d      	mov	r5, fp
 8002aa4:	0004      	movs	r4, r0
 8002aa6:	08fb      	lsrs	r3, r7, #3
 8002aa8:	0749      	lsls	r1, r1, #29
 8002aaa:	430b      	orrs	r3, r1
 8002aac:	0f5a      	lsrs	r2, r3, #29
 8002aae:	00db      	lsls	r3, r3, #3
 8002ab0:	08db      	lsrs	r3, r3, #3
 8002ab2:	0752      	lsls	r2, r2, #29
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	e65d      	b.n	8002774 <__aeabi_dsub+0x314>
 8002ab8:	074b      	lsls	r3, r1, #29
 8002aba:	08ff      	lsrs	r7, r7, #3
 8002abc:	433b      	orrs	r3, r7
 8002abe:	08cc      	lsrs	r4, r1, #3
 8002ac0:	e649      	b.n	8002756 <__aeabi_dsub+0x2f6>
 8002ac2:	19dc      	adds	r4, r3, r7
 8002ac4:	429c      	cmp	r4, r3
 8002ac6:	419b      	sbcs	r3, r3
 8002ac8:	4461      	add	r1, ip
 8002aca:	4689      	mov	r9, r1
 8002acc:	425b      	negs	r3, r3
 8002ace:	4499      	add	r9, r3
 8002ad0:	464b      	mov	r3, r9
 8002ad2:	021b      	lsls	r3, r3, #8
 8002ad4:	d400      	bmi.n	8002ad8 <__aeabi_dsub+0x678>
 8002ad6:	e631      	b.n	800273c <__aeabi_dsub+0x2dc>
 8002ad8:	464a      	mov	r2, r9
 8002ada:	4b17      	ldr	r3, [pc, #92]	; (8002b38 <__aeabi_dsub+0x6d8>)
 8002adc:	401a      	ands	r2, r3
 8002ade:	2301      	movs	r3, #1
 8002ae0:	4691      	mov	r9, r2
 8002ae2:	4698      	mov	r8, r3
 8002ae4:	e62a      	b.n	800273c <__aeabi_dsub+0x2dc>
 8002ae6:	0016      	movs	r6, r2
 8002ae8:	4664      	mov	r4, ip
 8002aea:	3e20      	subs	r6, #32
 8002aec:	40f4      	lsrs	r4, r6
 8002aee:	46a0      	mov	r8, r4
 8002af0:	2a20      	cmp	r2, #32
 8002af2:	d005      	beq.n	8002b00 <__aeabi_dsub+0x6a0>
 8002af4:	2640      	movs	r6, #64	; 0x40
 8002af6:	4664      	mov	r4, ip
 8002af8:	1ab2      	subs	r2, r6, r2
 8002afa:	4094      	lsls	r4, r2
 8002afc:	4323      	orrs	r3, r4
 8002afe:	469a      	mov	sl, r3
 8002b00:	4654      	mov	r4, sl
 8002b02:	1e63      	subs	r3, r4, #1
 8002b04:	419c      	sbcs	r4, r3
 8002b06:	4643      	mov	r3, r8
 8002b08:	431c      	orrs	r4, r3
 8002b0a:	e5db      	b.n	80026c4 <__aeabi_dsub+0x264>
 8002b0c:	0002      	movs	r2, r0
 8002b0e:	2400      	movs	r4, #0
 8002b10:	2300      	movs	r3, #0
 8002b12:	e548      	b.n	80025a6 <__aeabi_dsub+0x146>
 8002b14:	19dc      	adds	r4, r3, r7
 8002b16:	42bc      	cmp	r4, r7
 8002b18:	41bf      	sbcs	r7, r7
 8002b1a:	4461      	add	r1, ip
 8002b1c:	4689      	mov	r9, r1
 8002b1e:	427f      	negs	r7, r7
 8002b20:	44b9      	add	r9, r7
 8002b22:	e738      	b.n	8002996 <__aeabi_dsub+0x536>
 8002b24:	464b      	mov	r3, r9
 8002b26:	4323      	orrs	r3, r4
 8002b28:	d100      	bne.n	8002b2c <__aeabi_dsub+0x6cc>
 8002b2a:	e69f      	b.n	800286c <__aeabi_dsub+0x40c>
 8002b2c:	e606      	b.n	800273c <__aeabi_dsub+0x2dc>
 8002b2e:	46c0      	nop			; (mov r8, r8)
 8002b30:	000007fe 	.word	0x000007fe
 8002b34:	000007ff 	.word	0x000007ff
 8002b38:	ff7fffff 	.word	0xff7fffff
 8002b3c:	08ff      	lsrs	r7, r7, #3
 8002b3e:	074b      	lsls	r3, r1, #29
 8002b40:	433b      	orrs	r3, r7
 8002b42:	08cc      	lsrs	r4, r1, #3
 8002b44:	e616      	b.n	8002774 <__aeabi_dsub+0x314>
 8002b46:	4662      	mov	r2, ip
 8002b48:	08db      	lsrs	r3, r3, #3
 8002b4a:	0752      	lsls	r2, r2, #29
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	4662      	mov	r2, ip
 8002b50:	08d4      	lsrs	r4, r2, #3
 8002b52:	2280      	movs	r2, #128	; 0x80
 8002b54:	0312      	lsls	r2, r2, #12
 8002b56:	4214      	tst	r4, r2
 8002b58:	d007      	beq.n	8002b6a <__aeabi_dsub+0x70a>
 8002b5a:	08c8      	lsrs	r0, r1, #3
 8002b5c:	4210      	tst	r0, r2
 8002b5e:	d104      	bne.n	8002b6a <__aeabi_dsub+0x70a>
 8002b60:	465d      	mov	r5, fp
 8002b62:	0004      	movs	r4, r0
 8002b64:	08fb      	lsrs	r3, r7, #3
 8002b66:	0749      	lsls	r1, r1, #29
 8002b68:	430b      	orrs	r3, r1
 8002b6a:	0f5a      	lsrs	r2, r3, #29
 8002b6c:	00db      	lsls	r3, r3, #3
 8002b6e:	0752      	lsls	r2, r2, #29
 8002b70:	08db      	lsrs	r3, r3, #3
 8002b72:	4313      	orrs	r3, r2
 8002b74:	e5fe      	b.n	8002774 <__aeabi_dsub+0x314>
 8002b76:	2300      	movs	r3, #0
 8002b78:	4a01      	ldr	r2, [pc, #4]	; (8002b80 <__aeabi_dsub+0x720>)
 8002b7a:	001c      	movs	r4, r3
 8002b7c:	e513      	b.n	80025a6 <__aeabi_dsub+0x146>
 8002b7e:	46c0      	nop			; (mov r8, r8)
 8002b80:	000007ff 	.word	0x000007ff

08002b84 <__aeabi_dcmpun>:
 8002b84:	b570      	push	{r4, r5, r6, lr}
 8002b86:	0005      	movs	r5, r0
 8002b88:	480c      	ldr	r0, [pc, #48]	; (8002bbc <__aeabi_dcmpun+0x38>)
 8002b8a:	031c      	lsls	r4, r3, #12
 8002b8c:	0016      	movs	r6, r2
 8002b8e:	005b      	lsls	r3, r3, #1
 8002b90:	030a      	lsls	r2, r1, #12
 8002b92:	0049      	lsls	r1, r1, #1
 8002b94:	0b12      	lsrs	r2, r2, #12
 8002b96:	0d49      	lsrs	r1, r1, #21
 8002b98:	0b24      	lsrs	r4, r4, #12
 8002b9a:	0d5b      	lsrs	r3, r3, #21
 8002b9c:	4281      	cmp	r1, r0
 8002b9e:	d008      	beq.n	8002bb2 <__aeabi_dcmpun+0x2e>
 8002ba0:	4a06      	ldr	r2, [pc, #24]	; (8002bbc <__aeabi_dcmpun+0x38>)
 8002ba2:	2000      	movs	r0, #0
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d103      	bne.n	8002bb0 <__aeabi_dcmpun+0x2c>
 8002ba8:	0020      	movs	r0, r4
 8002baa:	4330      	orrs	r0, r6
 8002bac:	1e43      	subs	r3, r0, #1
 8002bae:	4198      	sbcs	r0, r3
 8002bb0:	bd70      	pop	{r4, r5, r6, pc}
 8002bb2:	2001      	movs	r0, #1
 8002bb4:	432a      	orrs	r2, r5
 8002bb6:	d1fb      	bne.n	8002bb0 <__aeabi_dcmpun+0x2c>
 8002bb8:	e7f2      	b.n	8002ba0 <__aeabi_dcmpun+0x1c>
 8002bba:	46c0      	nop			; (mov r8, r8)
 8002bbc:	000007ff 	.word	0x000007ff

08002bc0 <__aeabi_d2iz>:
 8002bc0:	000a      	movs	r2, r1
 8002bc2:	b530      	push	{r4, r5, lr}
 8002bc4:	4c13      	ldr	r4, [pc, #76]	; (8002c14 <__aeabi_d2iz+0x54>)
 8002bc6:	0053      	lsls	r3, r2, #1
 8002bc8:	0309      	lsls	r1, r1, #12
 8002bca:	0005      	movs	r5, r0
 8002bcc:	0b09      	lsrs	r1, r1, #12
 8002bce:	2000      	movs	r0, #0
 8002bd0:	0d5b      	lsrs	r3, r3, #21
 8002bd2:	0fd2      	lsrs	r2, r2, #31
 8002bd4:	42a3      	cmp	r3, r4
 8002bd6:	dd04      	ble.n	8002be2 <__aeabi_d2iz+0x22>
 8002bd8:	480f      	ldr	r0, [pc, #60]	; (8002c18 <__aeabi_d2iz+0x58>)
 8002bda:	4283      	cmp	r3, r0
 8002bdc:	dd02      	ble.n	8002be4 <__aeabi_d2iz+0x24>
 8002bde:	4b0f      	ldr	r3, [pc, #60]	; (8002c1c <__aeabi_d2iz+0x5c>)
 8002be0:	18d0      	adds	r0, r2, r3
 8002be2:	bd30      	pop	{r4, r5, pc}
 8002be4:	2080      	movs	r0, #128	; 0x80
 8002be6:	0340      	lsls	r0, r0, #13
 8002be8:	4301      	orrs	r1, r0
 8002bea:	480d      	ldr	r0, [pc, #52]	; (8002c20 <__aeabi_d2iz+0x60>)
 8002bec:	1ac0      	subs	r0, r0, r3
 8002bee:	281f      	cmp	r0, #31
 8002bf0:	dd08      	ble.n	8002c04 <__aeabi_d2iz+0x44>
 8002bf2:	480c      	ldr	r0, [pc, #48]	; (8002c24 <__aeabi_d2iz+0x64>)
 8002bf4:	1ac3      	subs	r3, r0, r3
 8002bf6:	40d9      	lsrs	r1, r3
 8002bf8:	000b      	movs	r3, r1
 8002bfa:	4258      	negs	r0, r3
 8002bfc:	2a00      	cmp	r2, #0
 8002bfe:	d1f0      	bne.n	8002be2 <__aeabi_d2iz+0x22>
 8002c00:	0018      	movs	r0, r3
 8002c02:	e7ee      	b.n	8002be2 <__aeabi_d2iz+0x22>
 8002c04:	4c08      	ldr	r4, [pc, #32]	; (8002c28 <__aeabi_d2iz+0x68>)
 8002c06:	40c5      	lsrs	r5, r0
 8002c08:	46a4      	mov	ip, r4
 8002c0a:	4463      	add	r3, ip
 8002c0c:	4099      	lsls	r1, r3
 8002c0e:	000b      	movs	r3, r1
 8002c10:	432b      	orrs	r3, r5
 8002c12:	e7f2      	b.n	8002bfa <__aeabi_d2iz+0x3a>
 8002c14:	000003fe 	.word	0x000003fe
 8002c18:	0000041d 	.word	0x0000041d
 8002c1c:	7fffffff 	.word	0x7fffffff
 8002c20:	00000433 	.word	0x00000433
 8002c24:	00000413 	.word	0x00000413
 8002c28:	fffffbed 	.word	0xfffffbed

08002c2c <__aeabi_i2d>:
 8002c2c:	b570      	push	{r4, r5, r6, lr}
 8002c2e:	2800      	cmp	r0, #0
 8002c30:	d016      	beq.n	8002c60 <__aeabi_i2d+0x34>
 8002c32:	17c3      	asrs	r3, r0, #31
 8002c34:	18c5      	adds	r5, r0, r3
 8002c36:	405d      	eors	r5, r3
 8002c38:	0fc4      	lsrs	r4, r0, #31
 8002c3a:	0028      	movs	r0, r5
 8002c3c:	f000 f91c 	bl	8002e78 <__clzsi2>
 8002c40:	4a11      	ldr	r2, [pc, #68]	; (8002c88 <__aeabi_i2d+0x5c>)
 8002c42:	1a12      	subs	r2, r2, r0
 8002c44:	280a      	cmp	r0, #10
 8002c46:	dc16      	bgt.n	8002c76 <__aeabi_i2d+0x4a>
 8002c48:	0003      	movs	r3, r0
 8002c4a:	002e      	movs	r6, r5
 8002c4c:	3315      	adds	r3, #21
 8002c4e:	409e      	lsls	r6, r3
 8002c50:	230b      	movs	r3, #11
 8002c52:	1a18      	subs	r0, r3, r0
 8002c54:	40c5      	lsrs	r5, r0
 8002c56:	0552      	lsls	r2, r2, #21
 8002c58:	032d      	lsls	r5, r5, #12
 8002c5a:	0b2d      	lsrs	r5, r5, #12
 8002c5c:	0d53      	lsrs	r3, r2, #21
 8002c5e:	e003      	b.n	8002c68 <__aeabi_i2d+0x3c>
 8002c60:	2400      	movs	r4, #0
 8002c62:	2300      	movs	r3, #0
 8002c64:	2500      	movs	r5, #0
 8002c66:	2600      	movs	r6, #0
 8002c68:	051b      	lsls	r3, r3, #20
 8002c6a:	432b      	orrs	r3, r5
 8002c6c:	07e4      	lsls	r4, r4, #31
 8002c6e:	4323      	orrs	r3, r4
 8002c70:	0030      	movs	r0, r6
 8002c72:	0019      	movs	r1, r3
 8002c74:	bd70      	pop	{r4, r5, r6, pc}
 8002c76:	380b      	subs	r0, #11
 8002c78:	4085      	lsls	r5, r0
 8002c7a:	0552      	lsls	r2, r2, #21
 8002c7c:	032d      	lsls	r5, r5, #12
 8002c7e:	2600      	movs	r6, #0
 8002c80:	0b2d      	lsrs	r5, r5, #12
 8002c82:	0d53      	lsrs	r3, r2, #21
 8002c84:	e7f0      	b.n	8002c68 <__aeabi_i2d+0x3c>
 8002c86:	46c0      	nop			; (mov r8, r8)
 8002c88:	0000041e 	.word	0x0000041e

08002c8c <__aeabi_ui2d>:
 8002c8c:	b510      	push	{r4, lr}
 8002c8e:	1e04      	subs	r4, r0, #0
 8002c90:	d010      	beq.n	8002cb4 <__aeabi_ui2d+0x28>
 8002c92:	f000 f8f1 	bl	8002e78 <__clzsi2>
 8002c96:	4b0f      	ldr	r3, [pc, #60]	; (8002cd4 <__aeabi_ui2d+0x48>)
 8002c98:	1a1b      	subs	r3, r3, r0
 8002c9a:	280a      	cmp	r0, #10
 8002c9c:	dc11      	bgt.n	8002cc2 <__aeabi_ui2d+0x36>
 8002c9e:	220b      	movs	r2, #11
 8002ca0:	0021      	movs	r1, r4
 8002ca2:	1a12      	subs	r2, r2, r0
 8002ca4:	40d1      	lsrs	r1, r2
 8002ca6:	3015      	adds	r0, #21
 8002ca8:	030a      	lsls	r2, r1, #12
 8002caa:	055b      	lsls	r3, r3, #21
 8002cac:	4084      	lsls	r4, r0
 8002cae:	0b12      	lsrs	r2, r2, #12
 8002cb0:	0d5b      	lsrs	r3, r3, #21
 8002cb2:	e001      	b.n	8002cb8 <__aeabi_ui2d+0x2c>
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	051b      	lsls	r3, r3, #20
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	0020      	movs	r0, r4
 8002cbe:	0019      	movs	r1, r3
 8002cc0:	bd10      	pop	{r4, pc}
 8002cc2:	0022      	movs	r2, r4
 8002cc4:	380b      	subs	r0, #11
 8002cc6:	4082      	lsls	r2, r0
 8002cc8:	055b      	lsls	r3, r3, #21
 8002cca:	0312      	lsls	r2, r2, #12
 8002ccc:	2400      	movs	r4, #0
 8002cce:	0b12      	lsrs	r2, r2, #12
 8002cd0:	0d5b      	lsrs	r3, r3, #21
 8002cd2:	e7f1      	b.n	8002cb8 <__aeabi_ui2d+0x2c>
 8002cd4:	0000041e 	.word	0x0000041e

08002cd8 <__aeabi_f2d>:
 8002cd8:	b570      	push	{r4, r5, r6, lr}
 8002cda:	0043      	lsls	r3, r0, #1
 8002cdc:	0246      	lsls	r6, r0, #9
 8002cde:	0fc4      	lsrs	r4, r0, #31
 8002ce0:	20fe      	movs	r0, #254	; 0xfe
 8002ce2:	0e1b      	lsrs	r3, r3, #24
 8002ce4:	1c59      	adds	r1, r3, #1
 8002ce6:	0a75      	lsrs	r5, r6, #9
 8002ce8:	4208      	tst	r0, r1
 8002cea:	d00c      	beq.n	8002d06 <__aeabi_f2d+0x2e>
 8002cec:	22e0      	movs	r2, #224	; 0xe0
 8002cee:	0092      	lsls	r2, r2, #2
 8002cf0:	4694      	mov	ip, r2
 8002cf2:	076d      	lsls	r5, r5, #29
 8002cf4:	0b36      	lsrs	r6, r6, #12
 8002cf6:	4463      	add	r3, ip
 8002cf8:	051b      	lsls	r3, r3, #20
 8002cfa:	4333      	orrs	r3, r6
 8002cfc:	07e4      	lsls	r4, r4, #31
 8002cfe:	4323      	orrs	r3, r4
 8002d00:	0028      	movs	r0, r5
 8002d02:	0019      	movs	r1, r3
 8002d04:	bd70      	pop	{r4, r5, r6, pc}
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d114      	bne.n	8002d34 <__aeabi_f2d+0x5c>
 8002d0a:	2d00      	cmp	r5, #0
 8002d0c:	d01b      	beq.n	8002d46 <__aeabi_f2d+0x6e>
 8002d0e:	0028      	movs	r0, r5
 8002d10:	f000 f8b2 	bl	8002e78 <__clzsi2>
 8002d14:	280a      	cmp	r0, #10
 8002d16:	dc1c      	bgt.n	8002d52 <__aeabi_f2d+0x7a>
 8002d18:	230b      	movs	r3, #11
 8002d1a:	002e      	movs	r6, r5
 8002d1c:	1a1b      	subs	r3, r3, r0
 8002d1e:	40de      	lsrs	r6, r3
 8002d20:	0003      	movs	r3, r0
 8002d22:	3315      	adds	r3, #21
 8002d24:	409d      	lsls	r5, r3
 8002d26:	4a0e      	ldr	r2, [pc, #56]	; (8002d60 <__aeabi_f2d+0x88>)
 8002d28:	0336      	lsls	r6, r6, #12
 8002d2a:	1a12      	subs	r2, r2, r0
 8002d2c:	0552      	lsls	r2, r2, #21
 8002d2e:	0b36      	lsrs	r6, r6, #12
 8002d30:	0d53      	lsrs	r3, r2, #21
 8002d32:	e7e1      	b.n	8002cf8 <__aeabi_f2d+0x20>
 8002d34:	2d00      	cmp	r5, #0
 8002d36:	d009      	beq.n	8002d4c <__aeabi_f2d+0x74>
 8002d38:	2280      	movs	r2, #128	; 0x80
 8002d3a:	0b36      	lsrs	r6, r6, #12
 8002d3c:	0312      	lsls	r2, r2, #12
 8002d3e:	4b09      	ldr	r3, [pc, #36]	; (8002d64 <__aeabi_f2d+0x8c>)
 8002d40:	076d      	lsls	r5, r5, #29
 8002d42:	4316      	orrs	r6, r2
 8002d44:	e7d8      	b.n	8002cf8 <__aeabi_f2d+0x20>
 8002d46:	2300      	movs	r3, #0
 8002d48:	2600      	movs	r6, #0
 8002d4a:	e7d5      	b.n	8002cf8 <__aeabi_f2d+0x20>
 8002d4c:	2600      	movs	r6, #0
 8002d4e:	4b05      	ldr	r3, [pc, #20]	; (8002d64 <__aeabi_f2d+0x8c>)
 8002d50:	e7d2      	b.n	8002cf8 <__aeabi_f2d+0x20>
 8002d52:	0003      	movs	r3, r0
 8002d54:	3b0b      	subs	r3, #11
 8002d56:	409d      	lsls	r5, r3
 8002d58:	002e      	movs	r6, r5
 8002d5a:	2500      	movs	r5, #0
 8002d5c:	e7e3      	b.n	8002d26 <__aeabi_f2d+0x4e>
 8002d5e:	46c0      	nop			; (mov r8, r8)
 8002d60:	00000389 	.word	0x00000389
 8002d64:	000007ff 	.word	0x000007ff

08002d68 <__aeabi_d2f>:
 8002d68:	0002      	movs	r2, r0
 8002d6a:	004b      	lsls	r3, r1, #1
 8002d6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d6e:	0d5b      	lsrs	r3, r3, #21
 8002d70:	030c      	lsls	r4, r1, #12
 8002d72:	4e3d      	ldr	r6, [pc, #244]	; (8002e68 <__aeabi_d2f+0x100>)
 8002d74:	0a64      	lsrs	r4, r4, #9
 8002d76:	0f40      	lsrs	r0, r0, #29
 8002d78:	1c5f      	adds	r7, r3, #1
 8002d7a:	0fc9      	lsrs	r1, r1, #31
 8002d7c:	4304      	orrs	r4, r0
 8002d7e:	00d5      	lsls	r5, r2, #3
 8002d80:	4237      	tst	r7, r6
 8002d82:	d00a      	beq.n	8002d9a <__aeabi_d2f+0x32>
 8002d84:	4839      	ldr	r0, [pc, #228]	; (8002e6c <__aeabi_d2f+0x104>)
 8002d86:	181e      	adds	r6, r3, r0
 8002d88:	2efe      	cmp	r6, #254	; 0xfe
 8002d8a:	dd16      	ble.n	8002dba <__aeabi_d2f+0x52>
 8002d8c:	20ff      	movs	r0, #255	; 0xff
 8002d8e:	2400      	movs	r4, #0
 8002d90:	05c0      	lsls	r0, r0, #23
 8002d92:	4320      	orrs	r0, r4
 8002d94:	07c9      	lsls	r1, r1, #31
 8002d96:	4308      	orrs	r0, r1
 8002d98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d106      	bne.n	8002dac <__aeabi_d2f+0x44>
 8002d9e:	432c      	orrs	r4, r5
 8002da0:	d026      	beq.n	8002df0 <__aeabi_d2f+0x88>
 8002da2:	2205      	movs	r2, #5
 8002da4:	0192      	lsls	r2, r2, #6
 8002da6:	0a54      	lsrs	r4, r2, #9
 8002da8:	b2d8      	uxtb	r0, r3
 8002daa:	e7f1      	b.n	8002d90 <__aeabi_d2f+0x28>
 8002dac:	4325      	orrs	r5, r4
 8002dae:	d0ed      	beq.n	8002d8c <__aeabi_d2f+0x24>
 8002db0:	2080      	movs	r0, #128	; 0x80
 8002db2:	03c0      	lsls	r0, r0, #15
 8002db4:	4304      	orrs	r4, r0
 8002db6:	20ff      	movs	r0, #255	; 0xff
 8002db8:	e7ea      	b.n	8002d90 <__aeabi_d2f+0x28>
 8002dba:	2e00      	cmp	r6, #0
 8002dbc:	dd1b      	ble.n	8002df6 <__aeabi_d2f+0x8e>
 8002dbe:	0192      	lsls	r2, r2, #6
 8002dc0:	1e53      	subs	r3, r2, #1
 8002dc2:	419a      	sbcs	r2, r3
 8002dc4:	00e4      	lsls	r4, r4, #3
 8002dc6:	0f6d      	lsrs	r5, r5, #29
 8002dc8:	4322      	orrs	r2, r4
 8002dca:	432a      	orrs	r2, r5
 8002dcc:	0753      	lsls	r3, r2, #29
 8002dce:	d048      	beq.n	8002e62 <__aeabi_d2f+0xfa>
 8002dd0:	230f      	movs	r3, #15
 8002dd2:	4013      	ands	r3, r2
 8002dd4:	2b04      	cmp	r3, #4
 8002dd6:	d000      	beq.n	8002dda <__aeabi_d2f+0x72>
 8002dd8:	3204      	adds	r2, #4
 8002dda:	2380      	movs	r3, #128	; 0x80
 8002ddc:	04db      	lsls	r3, r3, #19
 8002dde:	4013      	ands	r3, r2
 8002de0:	d03f      	beq.n	8002e62 <__aeabi_d2f+0xfa>
 8002de2:	1c70      	adds	r0, r6, #1
 8002de4:	2efe      	cmp	r6, #254	; 0xfe
 8002de6:	d0d1      	beq.n	8002d8c <__aeabi_d2f+0x24>
 8002de8:	0192      	lsls	r2, r2, #6
 8002dea:	0a54      	lsrs	r4, r2, #9
 8002dec:	b2c0      	uxtb	r0, r0
 8002dee:	e7cf      	b.n	8002d90 <__aeabi_d2f+0x28>
 8002df0:	2000      	movs	r0, #0
 8002df2:	2400      	movs	r4, #0
 8002df4:	e7cc      	b.n	8002d90 <__aeabi_d2f+0x28>
 8002df6:	0032      	movs	r2, r6
 8002df8:	3217      	adds	r2, #23
 8002dfa:	db22      	blt.n	8002e42 <__aeabi_d2f+0xda>
 8002dfc:	2080      	movs	r0, #128	; 0x80
 8002dfe:	0400      	lsls	r0, r0, #16
 8002e00:	4320      	orrs	r0, r4
 8002e02:	241e      	movs	r4, #30
 8002e04:	1ba4      	subs	r4, r4, r6
 8002e06:	2c1f      	cmp	r4, #31
 8002e08:	dd1d      	ble.n	8002e46 <__aeabi_d2f+0xde>
 8002e0a:	2202      	movs	r2, #2
 8002e0c:	4252      	negs	r2, r2
 8002e0e:	1b96      	subs	r6, r2, r6
 8002e10:	0002      	movs	r2, r0
 8002e12:	40f2      	lsrs	r2, r6
 8002e14:	0016      	movs	r6, r2
 8002e16:	2c20      	cmp	r4, #32
 8002e18:	d004      	beq.n	8002e24 <__aeabi_d2f+0xbc>
 8002e1a:	4a15      	ldr	r2, [pc, #84]	; (8002e70 <__aeabi_d2f+0x108>)
 8002e1c:	4694      	mov	ip, r2
 8002e1e:	4463      	add	r3, ip
 8002e20:	4098      	lsls	r0, r3
 8002e22:	4305      	orrs	r5, r0
 8002e24:	002a      	movs	r2, r5
 8002e26:	1e53      	subs	r3, r2, #1
 8002e28:	419a      	sbcs	r2, r3
 8002e2a:	4332      	orrs	r2, r6
 8002e2c:	2600      	movs	r6, #0
 8002e2e:	0753      	lsls	r3, r2, #29
 8002e30:	d1ce      	bne.n	8002dd0 <__aeabi_d2f+0x68>
 8002e32:	2480      	movs	r4, #128	; 0x80
 8002e34:	0013      	movs	r3, r2
 8002e36:	04e4      	lsls	r4, r4, #19
 8002e38:	2001      	movs	r0, #1
 8002e3a:	4023      	ands	r3, r4
 8002e3c:	4222      	tst	r2, r4
 8002e3e:	d1d3      	bne.n	8002de8 <__aeabi_d2f+0x80>
 8002e40:	e7b0      	b.n	8002da4 <__aeabi_d2f+0x3c>
 8002e42:	2300      	movs	r3, #0
 8002e44:	e7ad      	b.n	8002da2 <__aeabi_d2f+0x3a>
 8002e46:	4a0b      	ldr	r2, [pc, #44]	; (8002e74 <__aeabi_d2f+0x10c>)
 8002e48:	4694      	mov	ip, r2
 8002e4a:	002a      	movs	r2, r5
 8002e4c:	40e2      	lsrs	r2, r4
 8002e4e:	0014      	movs	r4, r2
 8002e50:	002a      	movs	r2, r5
 8002e52:	4463      	add	r3, ip
 8002e54:	409a      	lsls	r2, r3
 8002e56:	4098      	lsls	r0, r3
 8002e58:	1e55      	subs	r5, r2, #1
 8002e5a:	41aa      	sbcs	r2, r5
 8002e5c:	4302      	orrs	r2, r0
 8002e5e:	4322      	orrs	r2, r4
 8002e60:	e7e4      	b.n	8002e2c <__aeabi_d2f+0xc4>
 8002e62:	0033      	movs	r3, r6
 8002e64:	e79e      	b.n	8002da4 <__aeabi_d2f+0x3c>
 8002e66:	46c0      	nop			; (mov r8, r8)
 8002e68:	000007fe 	.word	0x000007fe
 8002e6c:	fffffc80 	.word	0xfffffc80
 8002e70:	fffffca2 	.word	0xfffffca2
 8002e74:	fffffc82 	.word	0xfffffc82

08002e78 <__clzsi2>:
 8002e78:	211c      	movs	r1, #28
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	041b      	lsls	r3, r3, #16
 8002e7e:	4298      	cmp	r0, r3
 8002e80:	d301      	bcc.n	8002e86 <__clzsi2+0xe>
 8002e82:	0c00      	lsrs	r0, r0, #16
 8002e84:	3910      	subs	r1, #16
 8002e86:	0a1b      	lsrs	r3, r3, #8
 8002e88:	4298      	cmp	r0, r3
 8002e8a:	d301      	bcc.n	8002e90 <__clzsi2+0x18>
 8002e8c:	0a00      	lsrs	r0, r0, #8
 8002e8e:	3908      	subs	r1, #8
 8002e90:	091b      	lsrs	r3, r3, #4
 8002e92:	4298      	cmp	r0, r3
 8002e94:	d301      	bcc.n	8002e9a <__clzsi2+0x22>
 8002e96:	0900      	lsrs	r0, r0, #4
 8002e98:	3904      	subs	r1, #4
 8002e9a:	a202      	add	r2, pc, #8	; (adr r2, 8002ea4 <__clzsi2+0x2c>)
 8002e9c:	5c10      	ldrb	r0, [r2, r0]
 8002e9e:	1840      	adds	r0, r0, r1
 8002ea0:	4770      	bx	lr
 8002ea2:	46c0      	nop			; (mov r8, r8)
 8002ea4:	02020304 	.word	0x02020304
 8002ea8:	01010101 	.word	0x01010101
	...

08002eb4 <convert_DDmm_to_DDD>:
#define SRC_M8N_C_

#include "m8n.h"

//returns a location under DDD format
float convert_DDmm_to_DDD(float DDmm, char *sign){
 8002eb4:	b590      	push	{r4, r7, lr}
 8002eb6:	b087      	sub	sp, #28
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
 8002ebc:	6039      	str	r1, [r7, #0]

    //convert to DDD format
    int DD = ((int)DDmm)/100;
 8002ebe:	6878      	ldr	r0, [r7, #4]
 8002ec0:	f7fe f8b6 	bl	8001030 <__aeabi_f2iz>
 8002ec4:	0003      	movs	r3, r0
 8002ec6:	2164      	movs	r1, #100	; 0x64
 8002ec8:	0018      	movs	r0, r3
 8002eca:	f7fd f9c9 	bl	8000260 <__divsi3>
 8002ece:	0003      	movs	r3, r0
 8002ed0:	613b      	str	r3, [r7, #16]
    float mm = DDmm - DD*100;
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	2264      	movs	r2, #100	; 0x64
 8002ed6:	4353      	muls	r3, r2
 8002ed8:	0018      	movs	r0, r3
 8002eda:	f7fe f8c9 	bl	8001070 <__aeabi_i2f>
 8002ede:	1c03      	adds	r3, r0, #0
 8002ee0:	1c19      	adds	r1, r3, #0
 8002ee2:	6878      	ldr	r0, [r7, #4]
 8002ee4:	f7fd fef6 	bl	8000cd4 <__aeabi_fsub>
 8002ee8:	1c03      	adds	r3, r0, #0
 8002eea:	60fb      	str	r3, [r7, #12]
    float DDD = DD + mm/60;
 8002eec:	6938      	ldr	r0, [r7, #16]
 8002eee:	f7fe f8bf 	bl	8001070 <__aeabi_i2f>
 8002ef2:	1c04      	adds	r4, r0, #0
 8002ef4:	4912      	ldr	r1, [pc, #72]	; (8002f40 <convert_DDmm_to_DDD+0x8c>)
 8002ef6:	68f8      	ldr	r0, [r7, #12]
 8002ef8:	f7fd fd24 	bl	8000944 <__aeabi_fdiv>
 8002efc:	1c03      	adds	r3, r0, #0
 8002efe:	1c19      	adds	r1, r3, #0
 8002f00:	1c20      	adds	r0, r4, #0
 8002f02:	f7fd fb81 	bl	8000608 <__aeabi_fadd>
 8002f06:	1c03      	adds	r3, r0, #0
 8002f08:	617b      	str	r3, [r7, #20]

    //add negative sign if south or west
    if (strcmp(sign,"S") == 0 || strcmp(sign,"W") == 0){
 8002f0a:	4a0e      	ldr	r2, [pc, #56]	; (8002f44 <convert_DDmm_to_DDD+0x90>)
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	0011      	movs	r1, r2
 8002f10:	0018      	movs	r0, r3
 8002f12:	f7fd f8f5 	bl	8000100 <strcmp>
 8002f16:	1e03      	subs	r3, r0, #0
 8002f18:	d007      	beq.n	8002f2a <convert_DDmm_to_DDD+0x76>
 8002f1a:	4a0b      	ldr	r2, [pc, #44]	; (8002f48 <convert_DDmm_to_DDD+0x94>)
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	0011      	movs	r1, r2
 8002f20:	0018      	movs	r0, r3
 8002f22:	f7fd f8ed 	bl	8000100 <strcmp>
 8002f26:	1e03      	subs	r3, r0, #0
 8002f28:	d104      	bne.n	8002f34 <convert_DDmm_to_DDD+0x80>
        DDD = -DDD;
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	2280      	movs	r2, #128	; 0x80
 8002f2e:	0612      	lsls	r2, r2, #24
 8002f30:	4053      	eors	r3, r2
 8002f32:	617b      	str	r3, [r7, #20]
    }

    return DDD;
 8002f34:	697b      	ldr	r3, [r7, #20]
}
 8002f36:	1c18      	adds	r0, r3, #0
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	b007      	add	sp, #28
 8002f3c:	bd90      	pop	{r4, r7, pc}
 8002f3e:	46c0      	nop			; (mov r8, r8)
 8002f40:	42700000 	.word	0x42700000
 8002f44:	0800db90 	.word	0x0800db90
 8002f48:	0800db94 	.word	0x0800db94

08002f4c <m8n_read_location>:

uint8_t m8n_read_location(char nmea_raw_data[], char *loc_str[], UART_HandleTypeDef huart2, int *gps_lock_count){
 8002f4c:	b082      	sub	sp, #8
 8002f4e:	b5b0      	push	{r4, r5, r7, lr}
 8002f50:	b098      	sub	sp, #96	; 0x60
 8002f52:	af02      	add	r7, sp, #8
 8002f54:	6078      	str	r0, [r7, #4]
 8002f56:	6039      	str	r1, [r7, #0]
 8002f58:	2168      	movs	r1, #104	; 0x68
 8002f5a:	1879      	adds	r1, r7, r1
 8002f5c:	600a      	str	r2, [r1, #0]
 8002f5e:	604b      	str	r3, [r1, #4]

    const __uint8_t GLL_MSG_LEN = 47;
 8002f60:	2457      	movs	r4, #87	; 0x57
 8002f62:	193b      	adds	r3, r7, r4
 8002f64:	222f      	movs	r2, #47	; 0x2f
 8002f66:	701a      	strb	r2, [r3, #0]
    const int gps_lock_th = 20;
 8002f68:	2314      	movs	r3, #20
 8002f6a:	653b      	str	r3, [r7, #80]	; 0x50

    float latitude = 0;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	647b      	str	r3, [r7, #68]	; 0x44
    float longitude = 0;
 8002f70:	2300      	movs	r3, #0
 8002f72:	643b      	str	r3, [r7, #64]	; 0x40
    char lat_sign, long_sign;
    char *start_GLL_msg;
    int len_GLL_msg;

    start_GLL_msg = strstr(nmea_raw_data, "GLL");
 8002f74:	4a90      	ldr	r2, [pc, #576]	; (80031b8 <m8n_read_location+0x26c>)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	0011      	movs	r1, r2
 8002f7a:	0018      	movs	r0, r3
 8002f7c:	f006 fc7c 	bl	8009878 <strstr>
 8002f80:	0003      	movs	r3, r0
 8002f82:	64fb      	str	r3, [r7, #76]	; 0x4c
    len_GLL_msg = strlen(start_GLL_msg);
 8002f84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f86:	0018      	movs	r0, r3
 8002f88:	f7fd f8c4 	bl	8000114 <strlen>
 8002f8c:	0003      	movs	r3, r0
 8002f8e:	64bb      	str	r3, [r7, #72]	; 0x48

    //TODO : check to send **loc_str, like in function sim800_read_sms
    *loc_str = "NO GPS LOCK";
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	4a8a      	ldr	r2, [pc, #552]	; (80031bc <m8n_read_location+0x270>)
 8002f94:	601a      	str	r2, [r3, #0]

    //message is not valid as does not have minimum length
    if (len_GLL_msg < GLL_MSG_LEN){
 8002f96:	193b      	adds	r3, r7, r4
 8002f98:	781b      	ldrb	r3, [r3, #0]
 8002f9a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002f9c:	429a      	cmp	r2, r3
 8002f9e:	da11      	bge.n	8002fc4 <m8n_read_location+0x78>
        char sentence[50] = "";
 8002fa0:	240c      	movs	r4, #12
 8002fa2:	193b      	adds	r3, r7, r4
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	601a      	str	r2, [r3, #0]
 8002fa8:	3304      	adds	r3, #4
 8002faa:	222e      	movs	r2, #46	; 0x2e
 8002fac:	2100      	movs	r1, #0
 8002fae:	0018      	movs	r0, r3
 8002fb0:	f005 fc4e 	bl	8008850 <memset>
        sprintf(sentence,"NMEA message not valid\r\n");
 8002fb4:	4a82      	ldr	r2, [pc, #520]	; (80031c0 <m8n_read_location+0x274>)
 8002fb6:	193b      	adds	r3, r7, r4
 8002fb8:	0011      	movs	r1, r2
 8002fba:	0018      	movs	r0, r3
 8002fbc:	f006 fbbe 	bl	800973c <siprintf>
        //HAL_UART_Transmit(&huart2, (uint8_t*) sentence, strlen(sentence), 100);

        return 0;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	e0f1      	b.n	80031a8 <m8n_read_location+0x25c>
    }

    //retreive location parameters from nmea sentence
    sscanf(start_GLL_msg, "GLL,%f,%c,%f,%c,",&latitude, &lat_sign, &longitude, &long_sign);
 8002fc4:	233f      	movs	r3, #63	; 0x3f
 8002fc6:	18fc      	adds	r4, r7, r3
 8002fc8:	2344      	movs	r3, #68	; 0x44
 8002fca:	18fa      	adds	r2, r7, r3
 8002fcc:	497d      	ldr	r1, [pc, #500]	; (80031c4 <m8n_read_location+0x278>)
 8002fce:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8002fd0:	233e      	movs	r3, #62	; 0x3e
 8002fd2:	18fb      	adds	r3, r7, r3
 8002fd4:	9301      	str	r3, [sp, #4]
 8002fd6:	2340      	movs	r3, #64	; 0x40
 8002fd8:	18fb      	adds	r3, r7, r3
 8002fda:	9300      	str	r3, [sp, #0]
 8002fdc:	0023      	movs	r3, r4
 8002fde:	f006 fbcd 	bl	800977c <siscanf>

    //if one of the lat or long is equal to 0, reset lock count and return 0
    if (latitude == 0 || longitude == 0){
 8002fe2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002fe4:	2100      	movs	r1, #0
 8002fe6:	1c18      	adds	r0, r3, #0
 8002fe8:	f7fd fa70 	bl	80004cc <__aeabi_fcmpeq>
 8002fec:	1e03      	subs	r3, r0, #0
 8002fee:	d106      	bne.n	8002ffe <m8n_read_location+0xb2>
 8002ff0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ff2:	2100      	movs	r1, #0
 8002ff4:	1c18      	adds	r0, r3, #0
 8002ff6:	f7fd fa69 	bl	80004cc <__aeabi_fcmpeq>
 8002ffa:	1e03      	subs	r3, r0, #0
 8002ffc:	d024      	beq.n	8003048 <m8n_read_location+0xfc>
        *gps_lock_count = 0;
 8002ffe:	25f8      	movs	r5, #248	; 0xf8
 8003000:	197b      	adds	r3, r7, r5
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	2200      	movs	r2, #0
 8003006:	601a      	str	r2, [r3, #0]
        //*loc_str = "";

        char sentence[50] = "";
 8003008:	240c      	movs	r4, #12
 800300a:	193b      	adds	r3, r7, r4
 800300c:	2200      	movs	r2, #0
 800300e:	601a      	str	r2, [r3, #0]
 8003010:	3304      	adds	r3, #4
 8003012:	222e      	movs	r2, #46	; 0x2e
 8003014:	2100      	movs	r1, #0
 8003016:	0018      	movs	r0, r3
 8003018:	f005 fc1a 	bl	8008850 <memset>
        sprintf(sentence,"Inconsistent, lock = %i\r\n",*gps_lock_count);
 800301c:	197b      	adds	r3, r7, r5
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	681a      	ldr	r2, [r3, #0]
 8003022:	4969      	ldr	r1, [pc, #420]	; (80031c8 <m8n_read_location+0x27c>)
 8003024:	193b      	adds	r3, r7, r4
 8003026:	0018      	movs	r0, r3
 8003028:	f006 fb88 	bl	800973c <siprintf>
        HAL_UART_Transmit(&huart2, (uint8_t*) sentence, strlen(sentence), 100);
 800302c:	193b      	adds	r3, r7, r4
 800302e:	0018      	movs	r0, r3
 8003030:	f7fd f870 	bl	8000114 <strlen>
 8003034:	0003      	movs	r3, r0
 8003036:	b29a      	uxth	r2, r3
 8003038:	1939      	adds	r1, r7, r4
 800303a:	2368      	movs	r3, #104	; 0x68
 800303c:	18f8      	adds	r0, r7, r3
 800303e:	2364      	movs	r3, #100	; 0x64
 8003040:	f004 f9aa 	bl	8007398 <HAL_UART_Transmit>
        //HAL_UART_Transmit(&huart2, (uint8_t*) *loc_str, strlen(*loc_str), 100);

        return 0;
 8003044:	2300      	movs	r3, #0
 8003046:	e0af      	b.n	80031a8 <m8n_read_location+0x25c>
    }

    //if one of the lat or long is nan (https://stackoverflow.com/a/570694), reset lock value and return
    else if (latitude != latitude || longitude != longitude){
 8003048:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800304a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800304c:	1c11      	adds	r1, r2, #0
 800304e:	1c18      	adds	r0, r3, #0
 8003050:	f7fd fa3c 	bl	80004cc <__aeabi_fcmpeq>
 8003054:	1e03      	subs	r3, r0, #0
 8003056:	d007      	beq.n	8003068 <m8n_read_location+0x11c>
 8003058:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800305a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800305c:	1c11      	adds	r1, r2, #0
 800305e:	1c18      	adds	r0, r3, #0
 8003060:	f7fd fa34 	bl	80004cc <__aeabi_fcmpeq>
 8003064:	1e03      	subs	r3, r0, #0
 8003066:	d124      	bne.n	80030b2 <m8n_read_location+0x166>
        *gps_lock_count = 0;
 8003068:	25f8      	movs	r5, #248	; 0xf8
 800306a:	197b      	adds	r3, r7, r5
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	2200      	movs	r2, #0
 8003070:	601a      	str	r2, [r3, #0]
        //*loc_str = "";

        char sentence[50] = "";
 8003072:	240c      	movs	r4, #12
 8003074:	193b      	adds	r3, r7, r4
 8003076:	2200      	movs	r2, #0
 8003078:	601a      	str	r2, [r3, #0]
 800307a:	3304      	adds	r3, #4
 800307c:	222e      	movs	r2, #46	; 0x2e
 800307e:	2100      	movs	r1, #0
 8003080:	0018      	movs	r0, r3
 8003082:	f005 fbe5 	bl	8008850 <memset>
        sprintf(sentence,"NaN, lock = %i\r\n",*gps_lock_count);
 8003086:	197b      	adds	r3, r7, r5
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	681a      	ldr	r2, [r3, #0]
 800308c:	494f      	ldr	r1, [pc, #316]	; (80031cc <m8n_read_location+0x280>)
 800308e:	193b      	adds	r3, r7, r4
 8003090:	0018      	movs	r0, r3
 8003092:	f006 fb53 	bl	800973c <siprintf>
        HAL_UART_Transmit(&huart2, (uint8_t*) sentence, strlen(sentence), 100);
 8003096:	193b      	adds	r3, r7, r4
 8003098:	0018      	movs	r0, r3
 800309a:	f7fd f83b 	bl	8000114 <strlen>
 800309e:	0003      	movs	r3, r0
 80030a0:	b29a      	uxth	r2, r3
 80030a2:	1939      	adds	r1, r7, r4
 80030a4:	2368      	movs	r3, #104	; 0x68
 80030a6:	18f8      	adds	r0, r7, r3
 80030a8:	2364      	movs	r3, #100	; 0x64
 80030aa:	f004 f975 	bl	8007398 <HAL_UART_Transmit>
        //HAL_UART_Transmit(&huart2, (uint8_t*) *loc_str, strlen(*loc_str), 100);

        return 0;
 80030ae:	2300      	movs	r3, #0
 80030b0:	e07a      	b.n	80031a8 <m8n_read_location+0x25c>
    }

	//copy location parameters into loc_str under desired format
	sprintf(loc_str, "%f,%f\r\n",convert_DDmm_to_DDD(latitude,&lat_sign),convert_DDmm_to_DDD(longitude,&long_sign));
 80030b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80030b4:	223f      	movs	r2, #63	; 0x3f
 80030b6:	18ba      	adds	r2, r7, r2
 80030b8:	0011      	movs	r1, r2
 80030ba:	1c18      	adds	r0, r3, #0
 80030bc:	f7ff fefa 	bl	8002eb4 <convert_DDmm_to_DDD>
 80030c0:	1c03      	adds	r3, r0, #0
 80030c2:	1c18      	adds	r0, r3, #0
 80030c4:	f7ff fe08 	bl	8002cd8 <__aeabi_f2d>
 80030c8:	0004      	movs	r4, r0
 80030ca:	000d      	movs	r5, r1
 80030cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030ce:	223e      	movs	r2, #62	; 0x3e
 80030d0:	18ba      	adds	r2, r7, r2
 80030d2:	0011      	movs	r1, r2
 80030d4:	1c18      	adds	r0, r3, #0
 80030d6:	f7ff feed 	bl	8002eb4 <convert_DDmm_to_DDD>
 80030da:	1c03      	adds	r3, r0, #0
 80030dc:	1c18      	adds	r0, r3, #0
 80030de:	f7ff fdfb 	bl	8002cd8 <__aeabi_f2d>
 80030e2:	0002      	movs	r2, r0
 80030e4:	000b      	movs	r3, r1
 80030e6:	493a      	ldr	r1, [pc, #232]	; (80031d0 <m8n_read_location+0x284>)
 80030e8:	6838      	ldr	r0, [r7, #0]
 80030ea:	9200      	str	r2, [sp, #0]
 80030ec:	9301      	str	r3, [sp, #4]
 80030ee:	0022      	movs	r2, r4
 80030f0:	002b      	movs	r3, r5
 80030f2:	f006 fb23 	bl	800973c <siprintf>

    //if number of gps lock is still below threshold, increment lock value and return
    if (*gps_lock_count < gps_lock_th){
 80030f6:	24f8      	movs	r4, #248	; 0xf8
 80030f8:	193b      	adds	r3, r7, r4
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003100:	429a      	cmp	r2, r3
 8003102:	dd26      	ble.n	8003152 <m8n_read_location+0x206>
    	//ref here on how to increment a var using a pointer
        ++(*gps_lock_count);
 8003104:	193b      	adds	r3, r7, r4
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	1c5a      	adds	r2, r3, #1
 800310c:	193b      	adds	r3, r7, r4
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	601a      	str	r2, [r3, #0]

        char sentence[50] = "";
 8003112:	250c      	movs	r5, #12
 8003114:	197b      	adds	r3, r7, r5
 8003116:	2200      	movs	r2, #0
 8003118:	601a      	str	r2, [r3, #0]
 800311a:	3304      	adds	r3, #4
 800311c:	222e      	movs	r2, #46	; 0x2e
 800311e:	2100      	movs	r1, #0
 8003120:	0018      	movs	r0, r3
 8003122:	f005 fb95 	bl	8008850 <memset>
        sprintf(sentence,"OK, below threshold, lock = %i\r\n",*gps_lock_count);
 8003126:	193b      	adds	r3, r7, r4
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	681a      	ldr	r2, [r3, #0]
 800312c:	4929      	ldr	r1, [pc, #164]	; (80031d4 <m8n_read_location+0x288>)
 800312e:	197b      	adds	r3, r7, r5
 8003130:	0018      	movs	r0, r3
 8003132:	f006 fb03 	bl	800973c <siprintf>
        HAL_UART_Transmit(&huart2, (uint8_t*) sentence, strlen(sentence), 100);
 8003136:	197b      	adds	r3, r7, r5
 8003138:	0018      	movs	r0, r3
 800313a:	f7fc ffeb 	bl	8000114 <strlen>
 800313e:	0003      	movs	r3, r0
 8003140:	b29a      	uxth	r2, r3
 8003142:	1979      	adds	r1, r7, r5
 8003144:	2368      	movs	r3, #104	; 0x68
 8003146:	18f8      	adds	r0, r7, r3
 8003148:	2364      	movs	r3, #100	; 0x64
 800314a:	f004 f925 	bl	8007398 <HAL_UART_Transmit>
        //HAL_UART_Transmit(&huart2, (uint8_t*) *loc_str, strlen(*loc_str), 100);

        return 0;
 800314e:	2300      	movs	r3, #0
 8003150:	e02a      	b.n	80031a8 <m8n_read_location+0x25c>
    }

    //if nb of consecutive locks is above threshold
    else if (*gps_lock_count >= gps_lock_th){
 8003152:	25f8      	movs	r5, #248	; 0xf8
 8003154:	197b      	adds	r3, r7, r5
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800315c:	429a      	cmp	r2, r3
 800315e:	dc23      	bgt.n	80031a8 <m8n_read_location+0x25c>
    	*gps_lock_count = gps_lock_th;
 8003160:	197b      	adds	r3, r7, r5
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003166:	601a      	str	r2, [r3, #0]

        char sentence[50] = "";
 8003168:	240c      	movs	r4, #12
 800316a:	193b      	adds	r3, r7, r4
 800316c:	2200      	movs	r2, #0
 800316e:	601a      	str	r2, [r3, #0]
 8003170:	3304      	adds	r3, #4
 8003172:	222e      	movs	r2, #46	; 0x2e
 8003174:	2100      	movs	r1, #0
 8003176:	0018      	movs	r0, r3
 8003178:	f005 fb6a 	bl	8008850 <memset>
        sprintf(sentence,"All OK, lock = %i\r\n",*gps_lock_count);
 800317c:	197b      	adds	r3, r7, r5
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	681a      	ldr	r2, [r3, #0]
 8003182:	4915      	ldr	r1, [pc, #84]	; (80031d8 <m8n_read_location+0x28c>)
 8003184:	193b      	adds	r3, r7, r4
 8003186:	0018      	movs	r0, r3
 8003188:	f006 fad8 	bl	800973c <siprintf>
        HAL_UART_Transmit(&huart2, (uint8_t*) sentence, strlen(sentence), 100);
 800318c:	193b      	adds	r3, r7, r4
 800318e:	0018      	movs	r0, r3
 8003190:	f7fc ffc0 	bl	8000114 <strlen>
 8003194:	0003      	movs	r3, r0
 8003196:	b29a      	uxth	r2, r3
 8003198:	1939      	adds	r1, r7, r4
 800319a:	2368      	movs	r3, #104	; 0x68
 800319c:	18f8      	adds	r0, r7, r3
 800319e:	2364      	movs	r3, #100	; 0x64
 80031a0:	f004 f8fa 	bl	8007398 <HAL_UART_Transmit>
        //HAL_UART_Transmit(&huart2, (uint8_t*) *loc_str, strlen(*loc_str), 100);

        return 1;
 80031a4:	2301      	movs	r3, #1
 80031a6:	e7ff      	b.n	80031a8 <m8n_read_location+0x25c>
    }

}
 80031a8:	0018      	movs	r0, r3
 80031aa:	46bd      	mov	sp, r7
 80031ac:	b016      	add	sp, #88	; 0x58
 80031ae:	bcb0      	pop	{r4, r5, r7}
 80031b0:	bc08      	pop	{r3}
 80031b2:	b002      	add	sp, #8
 80031b4:	4718      	bx	r3
 80031b6:	46c0      	nop			; (mov r8, r8)
 80031b8:	0800db98 	.word	0x0800db98
 80031bc:	0800db9c 	.word	0x0800db9c
 80031c0:	0800dba8 	.word	0x0800dba8
 80031c4:	0800dbc4 	.word	0x0800dbc4
 80031c8:	0800dbd8 	.word	0x0800dbd8
 80031cc:	0800dbf4 	.word	0x0800dbf4
 80031d0:	0800dc08 	.word	0x0800dc08
 80031d4:	0800dc10 	.word	0x0800dc10
 80031d8:	0800dc34 	.word	0x0800dc34

080031dc <watch_conditions>:
static void MX_USART3_UART_Init(void);
static void MX_I2C1_Init(void);
/* USER CODE BEGIN PFP */

//this function will check various conditions
uint8_t watch_conditions(){
 80031dc:	b5b0      	push	{r4, r5, r7, lr}
 80031de:	b0d6      	sub	sp, #344	; 0x158
 80031e0:	af48      	add	r7, sp, #288	; 0x120

	//if we just woke up
	if (wakeup_flag == 1){
 80031e2:	4b69      	ldr	r3, [pc, #420]	; (8003388 <watch_conditions+0x1ac>)
 80031e4:	781b      	ldrb	r3, [r3, #0]
 80031e6:	2b01      	cmp	r3, #1
 80031e8:	d12e      	bne.n	8003248 <watch_conditions+0x6c>

		//reseting the huart3 >> note 40
		HAL_Delay(3000);
 80031ea:	4b68      	ldr	r3, [pc, #416]	; (800338c <watch_conditions+0x1b0>)
 80031ec:	0018      	movs	r0, r3
 80031ee:	f001 fe61 	bl	8004eb4 <HAL_Delay>
		MX_USART3_UART_Init();
 80031f2:	f000 fa89 	bl	8003708 <MX_USART3_UART_Init>

		//read sms
		char* sms;
		sim800_read_sms(&sms, 1, huart2, huart3);
 80031f6:	4c66      	ldr	r4, [pc, #408]	; (8003390 <watch_conditions+0x1b4>)
 80031f8:	2334      	movs	r3, #52	; 0x34
 80031fa:	18fd      	adds	r5, r7, r3
 80031fc:	4a65      	ldr	r2, [pc, #404]	; (8003394 <watch_conditions+0x1b8>)
 80031fe:	2388      	movs	r3, #136	; 0x88
 8003200:	446b      	add	r3, sp
 8003202:	0018      	movs	r0, r3
 8003204:	0011      	movs	r1, r2
 8003206:	2390      	movs	r3, #144	; 0x90
 8003208:	001a      	movs	r2, r3
 800320a:	f005 fb05 	bl	8008818 <memcpy>
 800320e:	466b      	mov	r3, sp
 8003210:	0018      	movs	r0, r3
 8003212:	0023      	movs	r3, r4
 8003214:	3308      	adds	r3, #8
 8003216:	2288      	movs	r2, #136	; 0x88
 8003218:	0019      	movs	r1, r3
 800321a:	f005 fafd 	bl	8008818 <memcpy>
 800321e:	6822      	ldr	r2, [r4, #0]
 8003220:	6863      	ldr	r3, [r4, #4]
 8003222:	2101      	movs	r1, #1
 8003224:	0028      	movs	r0, r5
 8003226:	f001 f8dd 	bl	80043e4 <sim800_read_sms>
		//if sms content corresponds to a location request
		if(strstr(sms,STD_SMS_SEND_LOCATION)){
 800322a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800322c:	4a5a      	ldr	r2, [pc, #360]	; (8003398 <watch_conditions+0x1bc>)
 800322e:	0011      	movs	r1, r2
 8003230:	0018      	movs	r0, r3
 8003232:	f006 fb21 	bl	8009878 <strstr>
 8003236:	1e03      	subs	r3, r0, #0
 8003238:	d002      	beq.n	8003240 <watch_conditions+0x64>
			//set send_loc_flag
			send_loc_flag = 1;
 800323a:	4b58      	ldr	r3, [pc, #352]	; (800339c <watch_conditions+0x1c0>)
 800323c:	2201      	movs	r2, #1
 800323e:	701a      	strb	r2, [r3, #0]
		}
		//reset flag
		wakeup_flag = 0;
 8003240:	4b51      	ldr	r3, [pc, #324]	; (8003388 <watch_conditions+0x1ac>)
 8003242:	2200      	movs	r2, #0
 8003244:	701a      	strb	r2, [r3, #0]
 8003246:	e099      	b.n	800337c <watch_conditions+0x1a0>
	}
	//if we need to stay awake
	else if (stay_awake_flag == 1){
 8003248:	4b55      	ldr	r3, [pc, #340]	; (80033a0 <watch_conditions+0x1c4>)
 800324a:	781b      	ldrb	r3, [r3, #0]
 800324c:	2b01      	cmp	r3, #1
 800324e:	d123      	bne.n	8003298 <watch_conditions+0xbc>

		//HAL_Delay(500);

		sim800_originate_call(1, huart2, huart3, mobileNumber);
 8003250:	4c4f      	ldr	r4, [pc, #316]	; (8003390 <watch_conditions+0x1b4>)
 8003252:	4b54      	ldr	r3, [pc, #336]	; (80033a4 <watch_conditions+0x1c8>)
 8003254:	9345      	str	r3, [sp, #276]	; 0x114
 8003256:	4a4f      	ldr	r2, [pc, #316]	; (8003394 <watch_conditions+0x1b8>)
 8003258:	2384      	movs	r3, #132	; 0x84
 800325a:	446b      	add	r3, sp
 800325c:	0018      	movs	r0, r3
 800325e:	0011      	movs	r1, r2
 8003260:	2390      	movs	r3, #144	; 0x90
 8003262:	001a      	movs	r2, r3
 8003264:	f005 fad8 	bl	8008818 <memcpy>
 8003268:	466b      	mov	r3, sp
 800326a:	0018      	movs	r0, r3
 800326c:	0023      	movs	r3, r4
 800326e:	330c      	adds	r3, #12
 8003270:	2284      	movs	r2, #132	; 0x84
 8003272:	0019      	movs	r1, r3
 8003274:	f005 fad0 	bl	8008818 <memcpy>
 8003278:	6821      	ldr	r1, [r4, #0]
 800327a:	6862      	ldr	r2, [r4, #4]
 800327c:	68a3      	ldr	r3, [r4, #8]
 800327e:	2001      	movs	r0, #1
 8003280:	f001 fa24 	bl	80046cc <sim800_originate_call>

		mma8452q_motion_detection(1, &huart2, &hi2c1);
 8003284:	4a48      	ldr	r2, [pc, #288]	; (80033a8 <watch_conditions+0x1cc>)
 8003286:	4b42      	ldr	r3, [pc, #264]	; (8003390 <watch_conditions+0x1b4>)
 8003288:	0019      	movs	r1, r3
 800328a:	2001      	movs	r0, #1
 800328c:	f000 fe3e 	bl	8003f0c <mma8452q_motion_detection>

		HAL_Delay(50);
 8003290:	2032      	movs	r0, #50	; 0x32
 8003292:	f001 fe0f 	bl	8004eb4 <HAL_Delay>
 8003296:	e071      	b.n	800337c <watch_conditions+0x1a0>


	}
	//if we have a location request
	else if (send_loc_flag == 1){
 8003298:	4b40      	ldr	r3, [pc, #256]	; (800339c <watch_conditions+0x1c0>)
 800329a:	781b      	ldrb	r3, [r3, #0]
 800329c:	2b01      	cmp	r3, #1
 800329e:	d12f      	bne.n	8003300 <watch_conditions+0x124>
		//check that we have a gps lock
		if (gps_lock_flag){
 80032a0:	4b42      	ldr	r3, [pc, #264]	; (80033ac <watch_conditions+0x1d0>)
 80032a2:	781b      	ldrb	r3, [r3, #0]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d069      	beq.n	800337c <watch_conditions+0x1a0>
			//send sms back with our location
			sim800_send_sms(loc_str, 1, huart2, huart3, mobileNumber);
 80032a8:	4c39      	ldr	r4, [pc, #228]	; (8003390 <watch_conditions+0x1b4>)
 80032aa:	4d41      	ldr	r5, [pc, #260]	; (80033b0 <watch_conditions+0x1d4>)
 80032ac:	4b3d      	ldr	r3, [pc, #244]	; (80033a4 <watch_conditions+0x1c8>)
 80032ae:	9346      	str	r3, [sp, #280]	; 0x118
 80032b0:	4a38      	ldr	r2, [pc, #224]	; (8003394 <watch_conditions+0x1b8>)
 80032b2:	2388      	movs	r3, #136	; 0x88
 80032b4:	446b      	add	r3, sp
 80032b6:	0018      	movs	r0, r3
 80032b8:	0011      	movs	r1, r2
 80032ba:	2390      	movs	r3, #144	; 0x90
 80032bc:	001a      	movs	r2, r3
 80032be:	f005 faab 	bl	8008818 <memcpy>
 80032c2:	466b      	mov	r3, sp
 80032c4:	0018      	movs	r0, r3
 80032c6:	0023      	movs	r3, r4
 80032c8:	3308      	adds	r3, #8
 80032ca:	2288      	movs	r2, #136	; 0x88
 80032cc:	0019      	movs	r1, r3
 80032ce:	f005 faa3 	bl	8008818 <memcpy>
 80032d2:	6822      	ldr	r2, [r4, #0]
 80032d4:	6863      	ldr	r3, [r4, #4]
 80032d6:	2101      	movs	r1, #1
 80032d8:	0028      	movs	r0, r5
 80032da:	f000 ffdd 	bl	8004298 <sim800_send_sms>
			//reseting the huart3 >> note 40
			HAL_Delay(3000);
 80032de:	4b2b      	ldr	r3, [pc, #172]	; (800338c <watch_conditions+0x1b0>)
 80032e0:	0018      	movs	r0, r3
 80032e2:	f001 fde7 	bl	8004eb4 <HAL_Delay>
			MX_USART3_UART_Init();
 80032e6:	f000 fa0f 	bl	8003708 <MX_USART3_UART_Init>
			//switch led off
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80032ea:	23a0      	movs	r3, #160	; 0xa0
 80032ec:	05db      	lsls	r3, r3, #23
 80032ee:	2200      	movs	r2, #0
 80032f0:	2120      	movs	r1, #32
 80032f2:	0018      	movs	r0, r3
 80032f4:	f002 fac8 	bl	8005888 <HAL_GPIO_WritePin>
			//switch gps off
			//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
			//reset flags
			send_loc_flag = 0;
 80032f8:	4b28      	ldr	r3, [pc, #160]	; (800339c <watch_conditions+0x1c0>)
 80032fa:	2200      	movs	r2, #0
 80032fc:	701a      	strb	r2, [r3, #0]
 80032fe:	e03d      	b.n	800337c <watch_conditions+0x1a0>
		}
	}
	//if we have no purpose to stay awake (no flag is on)
	else {
		//delete all sms
		sim800_delete_all_sms(1, huart2, huart3);
 8003300:	4c23      	ldr	r4, [pc, #140]	; (8003390 <watch_conditions+0x1b4>)
 8003302:	4a24      	ldr	r2, [pc, #144]	; (8003394 <watch_conditions+0x1b8>)
 8003304:	2384      	movs	r3, #132	; 0x84
 8003306:	446b      	add	r3, sp
 8003308:	0018      	movs	r0, r3
 800330a:	0011      	movs	r1, r2
 800330c:	2390      	movs	r3, #144	; 0x90
 800330e:	001a      	movs	r2, r3
 8003310:	f005 fa82 	bl	8008818 <memcpy>
 8003314:	466b      	mov	r3, sp
 8003316:	0018      	movs	r0, r3
 8003318:	0023      	movs	r3, r4
 800331a:	330c      	adds	r3, #12
 800331c:	2284      	movs	r2, #132	; 0x84
 800331e:	0019      	movs	r1, r3
 8003320:	f005 fa7a 	bl	8008818 <memcpy>
 8003324:	6821      	ldr	r1, [r4, #0]
 8003326:	6862      	ldr	r2, [r4, #4]
 8003328:	68a3      	ldr	r3, [r4, #8]
 800332a:	2001      	movs	r0, #1
 800332c:	f001 f942 	bl	80045b4 <sim800_delete_all_sms>
		//go low power mode
	    //NOTE : code for low power mode testing ...
	    char sentence[50] = "";
 8003330:	003b      	movs	r3, r7
 8003332:	2200      	movs	r2, #0
 8003334:	601a      	str	r2, [r3, #0]
 8003336:	3304      	adds	r3, #4
 8003338:	222e      	movs	r2, #46	; 0x2e
 800333a:	2100      	movs	r1, #0
 800333c:	0018      	movs	r0, r3
 800333e:	f005 fa87 	bl	8008850 <memset>
	    sprintf(sentence,"Entering stop mode...\r\n");
 8003342:	4a1c      	ldr	r2, [pc, #112]	; (80033b4 <watch_conditions+0x1d8>)
 8003344:	003b      	movs	r3, r7
 8003346:	0011      	movs	r1, r2
 8003348:	0018      	movs	r0, r3
 800334a:	f006 f9f7 	bl	800973c <siprintf>
	    HAL_UART_Transmit(&huart2, (uint8_t*) sentence, strlen(sentence), 100);
 800334e:	003b      	movs	r3, r7
 8003350:	0018      	movs	r0, r3
 8003352:	f7fc fedf 	bl	8000114 <strlen>
 8003356:	0003      	movs	r3, r0
 8003358:	b29a      	uxth	r2, r3
 800335a:	0039      	movs	r1, r7
 800335c:	480c      	ldr	r0, [pc, #48]	; (8003390 <watch_conditions+0x1b4>)
 800335e:	2364      	movs	r3, #100	; 0x64
 8003360:	f004 f81a 	bl	8007398 <HAL_UART_Transmit>

	    //suspend the DMA (avoid wake up from UART)
	    HAL_UART_DMAPause(&huart1);
 8003364:	4b14      	ldr	r3, [pc, #80]	; (80033b8 <watch_conditions+0x1dc>)
 8003366:	0018      	movs	r0, r3
 8003368:	f004 fa16 	bl	8007798 <HAL_UART_DMAPause>

	    HAL_SuspendTick();
 800336c:	f001 fdc6 	bl	8004efc <HAL_SuspendTick>
	    //HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
	    HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8003370:	2380      	movs	r3, #128	; 0x80
 8003372:	01db      	lsls	r3, r3, #7
 8003374:	2101      	movs	r1, #1
 8003376:	0018      	movs	r0, r3
 8003378:	f003 f946 	bl	8006608 <HAL_PWR_EnterSTOPMode>
	}
}
 800337c:	46c0      	nop			; (mov r8, r8)
 800337e:	0018      	movs	r0, r3
 8003380:	46bd      	mov	sp, r7
 8003382:	b00e      	add	sp, #56	; 0x38
 8003384:	bdb0      	pop	{r4, r5, r7, pc}
 8003386:	46c0      	nop			; (mov r8, r8)
 8003388:	200007bc 	.word	0x200007bc
 800338c:	00000bb8 	.word	0x00000bb8
 8003390:	2000089c 	.word	0x2000089c
 8003394:	2000092c 	.word	0x2000092c
 8003398:	0800dc48 	.word	0x0800dc48
 800339c:	200007bd 	.word	0x200007bd
 80033a0:	20000032 	.word	0x20000032
 80033a4:	20000034 	.word	0x20000034
 80033a8:	200007c0 	.word	0x200007c0
 80033ac:	200007be 	.word	0x200007be
 80033b0:	20000000 	.word	0x20000000
 80033b4:	0800dc50 	.word	0x0800dc50
 80033b8:	2000080c 	.word	0x2000080c

080033bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80033bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033be:	b0c9      	sub	sp, #292	; 0x124
 80033c0:	af46      	add	r7, sp, #280	; 0x118
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80033c2:	f001 fcf1 	bl	8004da8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80033c6:	f000 f87b 	bl	80034c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80033ca:	f000 f9ef 	bl	80037ac <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80033ce:	f000 f94d 	bl	800366c <MX_USART2_UART_Init>
  MX_DMA_Init();
 80033d2:	f000 f9cd 	bl	8003770 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80033d6:	f000 f8fb 	bl	80035d0 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 80033da:	f000 f995 	bl	8003708 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 80033de:	f000 f8b7 	bl	8003550 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  //setup gsm module
  sim800_setup(1, huart2, huart3);
 80033e2:	4c2e      	ldr	r4, [pc, #184]	; (800349c <main+0xe0>)
 80033e4:	4a2e      	ldr	r2, [pc, #184]	; (80034a0 <main+0xe4>)
 80033e6:	2384      	movs	r3, #132	; 0x84
 80033e8:	446b      	add	r3, sp
 80033ea:	0018      	movs	r0, r3
 80033ec:	0011      	movs	r1, r2
 80033ee:	2390      	movs	r3, #144	; 0x90
 80033f0:	001a      	movs	r2, r3
 80033f2:	f005 fa11 	bl	8008818 <memcpy>
 80033f6:	466b      	mov	r3, sp
 80033f8:	0018      	movs	r0, r3
 80033fa:	0023      	movs	r3, r4
 80033fc:	330c      	adds	r3, #12
 80033fe:	2284      	movs	r2, #132	; 0x84
 8003400:	0019      	movs	r1, r3
 8003402:	f005 fa09 	bl	8008818 <memcpy>
 8003406:	6821      	ldr	r1, [r4, #0]
 8003408:	6862      	ldr	r2, [r4, #4]
 800340a:	68a3      	ldr	r3, [r4, #8]
 800340c:	2001      	movs	r0, #1
 800340e:	f000 fe7b 	bl	8004108 <sim800_setup>

  //setup accelerometer
  mma8452q_setup(1, &huart2, &hi2c1);
 8003412:	4a24      	ldr	r2, [pc, #144]	; (80034a4 <main+0xe8>)
 8003414:	4b21      	ldr	r3, [pc, #132]	; (800349c <main+0xe0>)
 8003416:	0019      	movs	r1, r3
 8003418:	2001      	movs	r0, #1
 800341a:	f000 fce3 	bl	8003de4 <mma8452q_setup>

  //switch GPS module on
  //init DMA
  HAL_UART_Receive_DMA (&huart1, (uint8_t*)UART1_rxBuffer, 700);
 800341e:	23af      	movs	r3, #175	; 0xaf
 8003420:	009a      	lsls	r2, r3, #2
 8003422:	4921      	ldr	r1, [pc, #132]	; (80034a8 <main+0xec>)
 8003424:	4b21      	ldr	r3, [pc, #132]	; (80034ac <main+0xf0>)
 8003426:	0018      	movs	r0, r3
 8003428:	f004 f954 	bl	80076d4 <HAL_UART_Receive_DMA>
  //turn gps module on
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 800342c:	2380      	movs	r3, #128	; 0x80
 800342e:	00d9      	lsls	r1, r3, #3
 8003430:	23a0      	movs	r3, #160	; 0xa0
 8003432:	05db      	lsls	r3, r3, #23
 8003434:	2201      	movs	r2, #1
 8003436:	0018      	movs	r0, r3
 8003438:	f002 fa26 	bl	8005888 <HAL_GPIO_WritePin>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	//TODO : write lines below with strcpy and (char*)
	//copy buffer content into char array
	int i = 0;
 800343c:	2300      	movs	r3, #0
 800343e:	607b      	str	r3, [r7, #4]
    for (i=0;i<BUFF_SIZE;i++){
 8003440:	2300      	movs	r3, #0
 8003442:	607b      	str	r3, [r7, #4]
 8003444:	e00b      	b.n	800345e <main+0xa2>
        nmea_raw_data[i] = (char) UART1_rxBuffer[i];
 8003446:	4a18      	ldr	r2, [pc, #96]	; (80034a8 <main+0xec>)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	18d3      	adds	r3, r2, r3
 800344c:	7819      	ldrb	r1, [r3, #0]
 800344e:	4a18      	ldr	r2, [pc, #96]	; (80034b0 <main+0xf4>)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	18d3      	adds	r3, r2, r3
 8003454:	1c0a      	adds	r2, r1, #0
 8003456:	701a      	strb	r2, [r3, #0]
    for (i=0;i<BUFF_SIZE;i++){
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	3301      	adds	r3, #1
 800345c:	607b      	str	r3, [r7, #4]
 800345e:	687a      	ldr	r2, [r7, #4]
 8003460:	23af      	movs	r3, #175	; 0xaf
 8003462:	009b      	lsls	r3, r3, #2
 8003464:	429a      	cmp	r2, r3
 8003466:	dbee      	blt.n	8003446 <main+0x8a>
    }

    //extract location under "DDD,DDD" format
    gps_lock_flag = m8n_read_location(nmea_raw_data, &loc_str, huart2, &gps_lock_count);
 8003468:	4c0c      	ldr	r4, [pc, #48]	; (800349c <main+0xe0>)
 800346a:	4e12      	ldr	r6, [pc, #72]	; (80034b4 <main+0xf8>)
 800346c:	4d10      	ldr	r5, [pc, #64]	; (80034b0 <main+0xf4>)
 800346e:	4b12      	ldr	r3, [pc, #72]	; (80034b8 <main+0xfc>)
 8003470:	9322      	str	r3, [sp, #136]	; 0x88
 8003472:	466b      	mov	r3, sp
 8003474:	0018      	movs	r0, r3
 8003476:	0023      	movs	r3, r4
 8003478:	3308      	adds	r3, #8
 800347a:	2288      	movs	r2, #136	; 0x88
 800347c:	0019      	movs	r1, r3
 800347e:	f005 f9cb 	bl	8008818 <memcpy>
 8003482:	6822      	ldr	r2, [r4, #0]
 8003484:	6863      	ldr	r3, [r4, #4]
 8003486:	0031      	movs	r1, r6
 8003488:	0028      	movs	r0, r5
 800348a:	f7ff fd5f 	bl	8002f4c <m8n_read_location>
 800348e:	0003      	movs	r3, r0
 8003490:	001a      	movs	r2, r3
 8003492:	4b0a      	ldr	r3, [pc, #40]	; (80034bc <main+0x100>)
 8003494:	701a      	strb	r2, [r3, #0]

    watch_conditions();
 8003496:	f7ff fea1 	bl	80031dc <watch_conditions>
  {
 800349a:	e7cf      	b.n	800343c <main+0x80>
 800349c:	2000089c 	.word	0x2000089c
 80034a0:	2000092c 	.word	0x2000092c
 80034a4:	200007c0 	.word	0x200007c0
 80034a8:	20000240 	.word	0x20000240
 80034ac:	2000080c 	.word	0x2000080c
 80034b0:	200004fc 	.word	0x200004fc
 80034b4:	20000000 	.word	0x20000000
 80034b8:	200007b8 	.word	0x200007b8
 80034bc:	200007be 	.word	0x200007be

080034c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80034c0:	b590      	push	{r4, r7, lr}
 80034c2:	b093      	sub	sp, #76	; 0x4c
 80034c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80034c6:	2414      	movs	r4, #20
 80034c8:	193b      	adds	r3, r7, r4
 80034ca:	0018      	movs	r0, r3
 80034cc:	2334      	movs	r3, #52	; 0x34
 80034ce:	001a      	movs	r2, r3
 80034d0:	2100      	movs	r1, #0
 80034d2:	f005 f9bd 	bl	8008850 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80034d6:	1d3b      	adds	r3, r7, #4
 80034d8:	0018      	movs	r0, r3
 80034da:	2310      	movs	r3, #16
 80034dc:	001a      	movs	r2, r3
 80034de:	2100      	movs	r1, #0
 80034e0:	f005 f9b6 	bl	8008850 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80034e4:	2380      	movs	r3, #128	; 0x80
 80034e6:	009b      	lsls	r3, r3, #2
 80034e8:	0018      	movs	r0, r3
 80034ea:	f003 f8c5 	bl	8006678 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80034ee:	193b      	adds	r3, r7, r4
 80034f0:	2202      	movs	r2, #2
 80034f2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80034f4:	193b      	adds	r3, r7, r4
 80034f6:	2280      	movs	r2, #128	; 0x80
 80034f8:	0052      	lsls	r2, r2, #1
 80034fa:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80034fc:	193b      	adds	r3, r7, r4
 80034fe:	2200      	movs	r2, #0
 8003500:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003502:	193b      	adds	r3, r7, r4
 8003504:	2240      	movs	r2, #64	; 0x40
 8003506:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8003508:	193b      	adds	r3, r7, r4
 800350a:	2200      	movs	r2, #0
 800350c:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800350e:	193b      	adds	r3, r7, r4
 8003510:	0018      	movs	r0, r3
 8003512:	f003 f8fd 	bl	8006710 <HAL_RCC_OscConfig>
 8003516:	1e03      	subs	r3, r0, #0
 8003518:	d001      	beq.n	800351e <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800351a:	f000 fa35 	bl	8003988 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800351e:	1d3b      	adds	r3, r7, #4
 8003520:	2207      	movs	r2, #7
 8003522:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8003524:	1d3b      	adds	r3, r7, #4
 8003526:	2200      	movs	r2, #0
 8003528:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800352a:	1d3b      	adds	r3, r7, #4
 800352c:	2200      	movs	r2, #0
 800352e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003530:	1d3b      	adds	r3, r7, #4
 8003532:	2200      	movs	r2, #0
 8003534:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8003536:	1d3b      	adds	r3, r7, #4
 8003538:	2100      	movs	r1, #0
 800353a:	0018      	movs	r0, r3
 800353c:	f003 fbf8 	bl	8006d30 <HAL_RCC_ClockConfig>
 8003540:	1e03      	subs	r3, r0, #0
 8003542:	d001      	beq.n	8003548 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8003544:	f000 fa20 	bl	8003988 <Error_Handler>
  }
}
 8003548:	46c0      	nop			; (mov r8, r8)
 800354a:	46bd      	mov	sp, r7
 800354c:	b013      	add	sp, #76	; 0x4c
 800354e:	bd90      	pop	{r4, r7, pc}

08003550 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003554:	4b1b      	ldr	r3, [pc, #108]	; (80035c4 <MX_I2C1_Init+0x74>)
 8003556:	4a1c      	ldr	r2, [pc, #112]	; (80035c8 <MX_I2C1_Init+0x78>)
 8003558:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 800355a:	4b1a      	ldr	r3, [pc, #104]	; (80035c4 <MX_I2C1_Init+0x74>)
 800355c:	4a1b      	ldr	r2, [pc, #108]	; (80035cc <MX_I2C1_Init+0x7c>)
 800355e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8003560:	4b18      	ldr	r3, [pc, #96]	; (80035c4 <MX_I2C1_Init+0x74>)
 8003562:	2200      	movs	r2, #0
 8003564:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003566:	4b17      	ldr	r3, [pc, #92]	; (80035c4 <MX_I2C1_Init+0x74>)
 8003568:	2201      	movs	r2, #1
 800356a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800356c:	4b15      	ldr	r3, [pc, #84]	; (80035c4 <MX_I2C1_Init+0x74>)
 800356e:	2200      	movs	r2, #0
 8003570:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8003572:	4b14      	ldr	r3, [pc, #80]	; (80035c4 <MX_I2C1_Init+0x74>)
 8003574:	2200      	movs	r2, #0
 8003576:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003578:	4b12      	ldr	r3, [pc, #72]	; (80035c4 <MX_I2C1_Init+0x74>)
 800357a:	2200      	movs	r2, #0
 800357c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800357e:	4b11      	ldr	r3, [pc, #68]	; (80035c4 <MX_I2C1_Init+0x74>)
 8003580:	2200      	movs	r2, #0
 8003582:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003584:	4b0f      	ldr	r3, [pc, #60]	; (80035c4 <MX_I2C1_Init+0x74>)
 8003586:	2200      	movs	r2, #0
 8003588:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800358a:	4b0e      	ldr	r3, [pc, #56]	; (80035c4 <MX_I2C1_Init+0x74>)
 800358c:	0018      	movs	r0, r3
 800358e:	f002 f9c3 	bl	8005918 <HAL_I2C_Init>
 8003592:	1e03      	subs	r3, r0, #0
 8003594:	d001      	beq.n	800359a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8003596:	f000 f9f7 	bl	8003988 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800359a:	4b0a      	ldr	r3, [pc, #40]	; (80035c4 <MX_I2C1_Init+0x74>)
 800359c:	2100      	movs	r1, #0
 800359e:	0018      	movs	r0, r3
 80035a0:	f002 ff9a 	bl	80064d8 <HAL_I2CEx_ConfigAnalogFilter>
 80035a4:	1e03      	subs	r3, r0, #0
 80035a6:	d001      	beq.n	80035ac <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80035a8:	f000 f9ee 	bl	8003988 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80035ac:	4b05      	ldr	r3, [pc, #20]	; (80035c4 <MX_I2C1_Init+0x74>)
 80035ae:	2100      	movs	r1, #0
 80035b0:	0018      	movs	r0, r3
 80035b2:	f002 ffdd 	bl	8006570 <HAL_I2CEx_ConfigDigitalFilter>
 80035b6:	1e03      	subs	r3, r0, #0
 80035b8:	d001      	beq.n	80035be <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80035ba:	f000 f9e5 	bl	8003988 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80035be:	46c0      	nop			; (mov r8, r8)
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bd80      	pop	{r7, pc}
 80035c4:	200007c0 	.word	0x200007c0
 80035c8:	40005400 	.word	0x40005400
 80035cc:	00303d5b 	.word	0x00303d5b

080035d0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80035d4:	4b23      	ldr	r3, [pc, #140]	; (8003664 <MX_USART1_UART_Init+0x94>)
 80035d6:	4a24      	ldr	r2, [pc, #144]	; (8003668 <MX_USART1_UART_Init+0x98>)
 80035d8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 80035da:	4b22      	ldr	r3, [pc, #136]	; (8003664 <MX_USART1_UART_Init+0x94>)
 80035dc:	2296      	movs	r2, #150	; 0x96
 80035de:	0212      	lsls	r2, r2, #8
 80035e0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80035e2:	4b20      	ldr	r3, [pc, #128]	; (8003664 <MX_USART1_UART_Init+0x94>)
 80035e4:	2200      	movs	r2, #0
 80035e6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80035e8:	4b1e      	ldr	r3, [pc, #120]	; (8003664 <MX_USART1_UART_Init+0x94>)
 80035ea:	2200      	movs	r2, #0
 80035ec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80035ee:	4b1d      	ldr	r3, [pc, #116]	; (8003664 <MX_USART1_UART_Init+0x94>)
 80035f0:	2200      	movs	r2, #0
 80035f2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80035f4:	4b1b      	ldr	r3, [pc, #108]	; (8003664 <MX_USART1_UART_Init+0x94>)
 80035f6:	220c      	movs	r2, #12
 80035f8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80035fa:	4b1a      	ldr	r3, [pc, #104]	; (8003664 <MX_USART1_UART_Init+0x94>)
 80035fc:	2200      	movs	r2, #0
 80035fe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003600:	4b18      	ldr	r3, [pc, #96]	; (8003664 <MX_USART1_UART_Init+0x94>)
 8003602:	2200      	movs	r2, #0
 8003604:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003606:	4b17      	ldr	r3, [pc, #92]	; (8003664 <MX_USART1_UART_Init+0x94>)
 8003608:	2200      	movs	r2, #0
 800360a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800360c:	4b15      	ldr	r3, [pc, #84]	; (8003664 <MX_USART1_UART_Init+0x94>)
 800360e:	2200      	movs	r2, #0
 8003610:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003612:	4b14      	ldr	r3, [pc, #80]	; (8003664 <MX_USART1_UART_Init+0x94>)
 8003614:	2200      	movs	r2, #0
 8003616:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003618:	4b12      	ldr	r3, [pc, #72]	; (8003664 <MX_USART1_UART_Init+0x94>)
 800361a:	0018      	movs	r0, r3
 800361c:	f003 fe66 	bl	80072ec <HAL_UART_Init>
 8003620:	1e03      	subs	r3, r0, #0
 8003622:	d001      	beq.n	8003628 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8003624:	f000 f9b0 	bl	8003988 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003628:	4b0e      	ldr	r3, [pc, #56]	; (8003664 <MX_USART1_UART_Init+0x94>)
 800362a:	2100      	movs	r1, #0
 800362c:	0018      	movs	r0, r3
 800362e:	f004 ffdf 	bl	80085f0 <HAL_UARTEx_SetTxFifoThreshold>
 8003632:	1e03      	subs	r3, r0, #0
 8003634:	d001      	beq.n	800363a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8003636:	f000 f9a7 	bl	8003988 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800363a:	4b0a      	ldr	r3, [pc, #40]	; (8003664 <MX_USART1_UART_Init+0x94>)
 800363c:	2100      	movs	r1, #0
 800363e:	0018      	movs	r0, r3
 8003640:	f005 f816 	bl	8008670 <HAL_UARTEx_SetRxFifoThreshold>
 8003644:	1e03      	subs	r3, r0, #0
 8003646:	d001      	beq.n	800364c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8003648:	f000 f99e 	bl	8003988 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800364c:	4b05      	ldr	r3, [pc, #20]	; (8003664 <MX_USART1_UART_Init+0x94>)
 800364e:	0018      	movs	r0, r3
 8003650:	f004 ff94 	bl	800857c <HAL_UARTEx_DisableFifoMode>
 8003654:	1e03      	subs	r3, r0, #0
 8003656:	d001      	beq.n	800365c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8003658:	f000 f996 	bl	8003988 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800365c:	46c0      	nop			; (mov r8, r8)
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}
 8003662:	46c0      	nop			; (mov r8, r8)
 8003664:	2000080c 	.word	0x2000080c
 8003668:	40013800 	.word	0x40013800

0800366c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003670:	4b23      	ldr	r3, [pc, #140]	; (8003700 <MX_USART2_UART_Init+0x94>)
 8003672:	4a24      	ldr	r2, [pc, #144]	; (8003704 <MX_USART2_UART_Init+0x98>)
 8003674:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8003676:	4b22      	ldr	r3, [pc, #136]	; (8003700 <MX_USART2_UART_Init+0x94>)
 8003678:	2296      	movs	r2, #150	; 0x96
 800367a:	0192      	lsls	r2, r2, #6
 800367c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800367e:	4b20      	ldr	r3, [pc, #128]	; (8003700 <MX_USART2_UART_Init+0x94>)
 8003680:	2200      	movs	r2, #0
 8003682:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003684:	4b1e      	ldr	r3, [pc, #120]	; (8003700 <MX_USART2_UART_Init+0x94>)
 8003686:	2200      	movs	r2, #0
 8003688:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800368a:	4b1d      	ldr	r3, [pc, #116]	; (8003700 <MX_USART2_UART_Init+0x94>)
 800368c:	2200      	movs	r2, #0
 800368e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003690:	4b1b      	ldr	r3, [pc, #108]	; (8003700 <MX_USART2_UART_Init+0x94>)
 8003692:	220c      	movs	r2, #12
 8003694:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003696:	4b1a      	ldr	r3, [pc, #104]	; (8003700 <MX_USART2_UART_Init+0x94>)
 8003698:	2200      	movs	r2, #0
 800369a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800369c:	4b18      	ldr	r3, [pc, #96]	; (8003700 <MX_USART2_UART_Init+0x94>)
 800369e:	2200      	movs	r2, #0
 80036a0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80036a2:	4b17      	ldr	r3, [pc, #92]	; (8003700 <MX_USART2_UART_Init+0x94>)
 80036a4:	2200      	movs	r2, #0
 80036a6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80036a8:	4b15      	ldr	r3, [pc, #84]	; (8003700 <MX_USART2_UART_Init+0x94>)
 80036aa:	2200      	movs	r2, #0
 80036ac:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80036ae:	4b14      	ldr	r3, [pc, #80]	; (8003700 <MX_USART2_UART_Init+0x94>)
 80036b0:	2200      	movs	r2, #0
 80036b2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80036b4:	4b12      	ldr	r3, [pc, #72]	; (8003700 <MX_USART2_UART_Init+0x94>)
 80036b6:	0018      	movs	r0, r3
 80036b8:	f003 fe18 	bl	80072ec <HAL_UART_Init>
 80036bc:	1e03      	subs	r3, r0, #0
 80036be:	d001      	beq.n	80036c4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80036c0:	f000 f962 	bl	8003988 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80036c4:	4b0e      	ldr	r3, [pc, #56]	; (8003700 <MX_USART2_UART_Init+0x94>)
 80036c6:	2100      	movs	r1, #0
 80036c8:	0018      	movs	r0, r3
 80036ca:	f004 ff91 	bl	80085f0 <HAL_UARTEx_SetTxFifoThreshold>
 80036ce:	1e03      	subs	r3, r0, #0
 80036d0:	d001      	beq.n	80036d6 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80036d2:	f000 f959 	bl	8003988 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80036d6:	4b0a      	ldr	r3, [pc, #40]	; (8003700 <MX_USART2_UART_Init+0x94>)
 80036d8:	2100      	movs	r1, #0
 80036da:	0018      	movs	r0, r3
 80036dc:	f004 ffc8 	bl	8008670 <HAL_UARTEx_SetRxFifoThreshold>
 80036e0:	1e03      	subs	r3, r0, #0
 80036e2:	d001      	beq.n	80036e8 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80036e4:	f000 f950 	bl	8003988 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80036e8:	4b05      	ldr	r3, [pc, #20]	; (8003700 <MX_USART2_UART_Init+0x94>)
 80036ea:	0018      	movs	r0, r3
 80036ec:	f004 ff46 	bl	800857c <HAL_UARTEx_DisableFifoMode>
 80036f0:	1e03      	subs	r3, r0, #0
 80036f2:	d001      	beq.n	80036f8 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80036f4:	f000 f948 	bl	8003988 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80036f8:	46c0      	nop			; (mov r8, r8)
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}
 80036fe:	46c0      	nop			; (mov r8, r8)
 8003700:	2000089c 	.word	0x2000089c
 8003704:	40004400 	.word	0x40004400

08003708 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800370c:	4b16      	ldr	r3, [pc, #88]	; (8003768 <MX_USART3_UART_Init+0x60>)
 800370e:	4a17      	ldr	r2, [pc, #92]	; (800376c <MX_USART3_UART_Init+0x64>)
 8003710:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8003712:	4b15      	ldr	r3, [pc, #84]	; (8003768 <MX_USART3_UART_Init+0x60>)
 8003714:	2296      	movs	r2, #150	; 0x96
 8003716:	0192      	lsls	r2, r2, #6
 8003718:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800371a:	4b13      	ldr	r3, [pc, #76]	; (8003768 <MX_USART3_UART_Init+0x60>)
 800371c:	2200      	movs	r2, #0
 800371e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003720:	4b11      	ldr	r3, [pc, #68]	; (8003768 <MX_USART3_UART_Init+0x60>)
 8003722:	2200      	movs	r2, #0
 8003724:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003726:	4b10      	ldr	r3, [pc, #64]	; (8003768 <MX_USART3_UART_Init+0x60>)
 8003728:	2200      	movs	r2, #0
 800372a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800372c:	4b0e      	ldr	r3, [pc, #56]	; (8003768 <MX_USART3_UART_Init+0x60>)
 800372e:	220c      	movs	r2, #12
 8003730:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003732:	4b0d      	ldr	r3, [pc, #52]	; (8003768 <MX_USART3_UART_Init+0x60>)
 8003734:	2200      	movs	r2, #0
 8003736:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003738:	4b0b      	ldr	r3, [pc, #44]	; (8003768 <MX_USART3_UART_Init+0x60>)
 800373a:	2200      	movs	r2, #0
 800373c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800373e:	4b0a      	ldr	r3, [pc, #40]	; (8003768 <MX_USART3_UART_Init+0x60>)
 8003740:	2200      	movs	r2, #0
 8003742:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003744:	4b08      	ldr	r3, [pc, #32]	; (8003768 <MX_USART3_UART_Init+0x60>)
 8003746:	2200      	movs	r2, #0
 8003748:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800374a:	4b07      	ldr	r3, [pc, #28]	; (8003768 <MX_USART3_UART_Init+0x60>)
 800374c:	2200      	movs	r2, #0
 800374e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003750:	4b05      	ldr	r3, [pc, #20]	; (8003768 <MX_USART3_UART_Init+0x60>)
 8003752:	0018      	movs	r0, r3
 8003754:	f003 fdca 	bl	80072ec <HAL_UART_Init>
 8003758:	1e03      	subs	r3, r0, #0
 800375a:	d001      	beq.n	8003760 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800375c:	f000 f914 	bl	8003988 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003760:	46c0      	nop			; (mov r8, r8)
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}
 8003766:	46c0      	nop			; (mov r8, r8)
 8003768:	2000092c 	.word	0x2000092c
 800376c:	40004800 	.word	0x40004800

08003770 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b082      	sub	sp, #8
 8003774:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003776:	4b0c      	ldr	r3, [pc, #48]	; (80037a8 <MX_DMA_Init+0x38>)
 8003778:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800377a:	4b0b      	ldr	r3, [pc, #44]	; (80037a8 <MX_DMA_Init+0x38>)
 800377c:	2101      	movs	r1, #1
 800377e:	430a      	orrs	r2, r1
 8003780:	639a      	str	r2, [r3, #56]	; 0x38
 8003782:	4b09      	ldr	r3, [pc, #36]	; (80037a8 <MX_DMA_Init+0x38>)
 8003784:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003786:	2201      	movs	r2, #1
 8003788:	4013      	ands	r3, r2
 800378a:	607b      	str	r3, [r7, #4]
 800378c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800378e:	2200      	movs	r2, #0
 8003790:	2100      	movs	r1, #0
 8003792:	2009      	movs	r0, #9
 8003794:	f001 fc90 	bl	80050b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8003798:	2009      	movs	r0, #9
 800379a:	f001 fca2 	bl	80050e2 <HAL_NVIC_EnableIRQ>

}
 800379e:	46c0      	nop			; (mov r8, r8)
 80037a0:	46bd      	mov	sp, r7
 80037a2:	b002      	add	sp, #8
 80037a4:	bd80      	pop	{r7, pc}
 80037a6:	46c0      	nop			; (mov r8, r8)
 80037a8:	40021000 	.word	0x40021000

080037ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80037ac:	b590      	push	{r4, r7, lr}
 80037ae:	b08b      	sub	sp, #44	; 0x2c
 80037b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037b2:	2414      	movs	r4, #20
 80037b4:	193b      	adds	r3, r7, r4
 80037b6:	0018      	movs	r0, r3
 80037b8:	2314      	movs	r3, #20
 80037ba:	001a      	movs	r2, r3
 80037bc:	2100      	movs	r1, #0
 80037be:	f005 f847 	bl	8008850 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80037c2:	4b3e      	ldr	r3, [pc, #248]	; (80038bc <MX_GPIO_Init+0x110>)
 80037c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80037c6:	4b3d      	ldr	r3, [pc, #244]	; (80038bc <MX_GPIO_Init+0x110>)
 80037c8:	2104      	movs	r1, #4
 80037ca:	430a      	orrs	r2, r1
 80037cc:	635a      	str	r2, [r3, #52]	; 0x34
 80037ce:	4b3b      	ldr	r3, [pc, #236]	; (80038bc <MX_GPIO_Init+0x110>)
 80037d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037d2:	2204      	movs	r2, #4
 80037d4:	4013      	ands	r3, r2
 80037d6:	613b      	str	r3, [r7, #16]
 80037d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80037da:	4b38      	ldr	r3, [pc, #224]	; (80038bc <MX_GPIO_Init+0x110>)
 80037dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80037de:	4b37      	ldr	r3, [pc, #220]	; (80038bc <MX_GPIO_Init+0x110>)
 80037e0:	2120      	movs	r1, #32
 80037e2:	430a      	orrs	r2, r1
 80037e4:	635a      	str	r2, [r3, #52]	; 0x34
 80037e6:	4b35      	ldr	r3, [pc, #212]	; (80038bc <MX_GPIO_Init+0x110>)
 80037e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037ea:	2220      	movs	r2, #32
 80037ec:	4013      	ands	r3, r2
 80037ee:	60fb      	str	r3, [r7, #12]
 80037f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80037f2:	4b32      	ldr	r3, [pc, #200]	; (80038bc <MX_GPIO_Init+0x110>)
 80037f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80037f6:	4b31      	ldr	r3, [pc, #196]	; (80038bc <MX_GPIO_Init+0x110>)
 80037f8:	2101      	movs	r1, #1
 80037fa:	430a      	orrs	r2, r1
 80037fc:	635a      	str	r2, [r3, #52]	; 0x34
 80037fe:	4b2f      	ldr	r3, [pc, #188]	; (80038bc <MX_GPIO_Init+0x110>)
 8003800:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003802:	2201      	movs	r2, #1
 8003804:	4013      	ands	r3, r2
 8003806:	60bb      	str	r3, [r7, #8]
 8003808:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800380a:	4b2c      	ldr	r3, [pc, #176]	; (80038bc <MX_GPIO_Init+0x110>)
 800380c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800380e:	4b2b      	ldr	r3, [pc, #172]	; (80038bc <MX_GPIO_Init+0x110>)
 8003810:	2102      	movs	r1, #2
 8003812:	430a      	orrs	r2, r1
 8003814:	635a      	str	r2, [r3, #52]	; 0x34
 8003816:	4b29      	ldr	r3, [pc, #164]	; (80038bc <MX_GPIO_Init+0x110>)
 8003818:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800381a:	2202      	movs	r2, #2
 800381c:	4013      	ands	r3, r2
 800381e:	607b      	str	r3, [r7, #4]
 8003820:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_GREEN_Pin|GPIO_PIN_10, GPIO_PIN_RESET);
 8003822:	2384      	movs	r3, #132	; 0x84
 8003824:	00d9      	lsls	r1, r3, #3
 8003826:	23a0      	movs	r3, #160	; 0xa0
 8003828:	05db      	lsls	r3, r3, #23
 800382a:	2200      	movs	r2, #0
 800382c:	0018      	movs	r0, r3
 800382e:	f002 f82b 	bl	8005888 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003832:	193b      	adds	r3, r7, r4
 8003834:	2280      	movs	r2, #128	; 0x80
 8003836:	0192      	lsls	r2, r2, #6
 8003838:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800383a:	193b      	adds	r3, r7, r4
 800383c:	2288      	movs	r2, #136	; 0x88
 800383e:	0352      	lsls	r2, r2, #13
 8003840:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003842:	193b      	adds	r3, r7, r4
 8003844:	2200      	movs	r2, #0
 8003846:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003848:	193b      	adds	r3, r7, r4
 800384a:	4a1d      	ldr	r2, [pc, #116]	; (80038c0 <MX_GPIO_Init+0x114>)
 800384c:	0019      	movs	r1, r3
 800384e:	0010      	movs	r0, r2
 8003850:	f001 feb6 	bl	80055c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8003854:	193b      	adds	r3, r7, r4
 8003856:	2220      	movs	r2, #32
 8003858:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800385a:	193b      	adds	r3, r7, r4
 800385c:	2201      	movs	r2, #1
 800385e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003860:	193b      	adds	r3, r7, r4
 8003862:	2200      	movs	r2, #0
 8003864:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003866:	193b      	adds	r3, r7, r4
 8003868:	2202      	movs	r2, #2
 800386a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 800386c:	193a      	adds	r2, r7, r4
 800386e:	23a0      	movs	r3, #160	; 0xa0
 8003870:	05db      	lsls	r3, r3, #23
 8003872:	0011      	movs	r1, r2
 8003874:	0018      	movs	r0, r3
 8003876:	f001 fea3 	bl	80055c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800387a:	0021      	movs	r1, r4
 800387c:	187b      	adds	r3, r7, r1
 800387e:	2280      	movs	r2, #128	; 0x80
 8003880:	00d2      	lsls	r2, r2, #3
 8003882:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003884:	187b      	adds	r3, r7, r1
 8003886:	2201      	movs	r2, #1
 8003888:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800388a:	187b      	adds	r3, r7, r1
 800388c:	2202      	movs	r2, #2
 800388e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003890:	187b      	adds	r3, r7, r1
 8003892:	2202      	movs	r2, #2
 8003894:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003896:	187a      	adds	r2, r7, r1
 8003898:	23a0      	movs	r3, #160	; 0xa0
 800389a:	05db      	lsls	r3, r3, #23
 800389c:	0011      	movs	r1, r2
 800389e:	0018      	movs	r0, r3
 80038a0:	f001 fe8e 	bl	80055c0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 80038a4:	2200      	movs	r2, #0
 80038a6:	2100      	movs	r1, #0
 80038a8:	2007      	movs	r0, #7
 80038aa:	f001 fc05 	bl	80050b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80038ae:	2007      	movs	r0, #7
 80038b0:	f001 fc17 	bl	80050e2 <HAL_NVIC_EnableIRQ>

}
 80038b4:	46c0      	nop			; (mov r8, r8)
 80038b6:	46bd      	mov	sp, r7
 80038b8:	b00b      	add	sp, #44	; 0x2c
 80038ba:	bd90      	pop	{r4, r7, pc}
 80038bc:	40021000 	.word	0x40021000
 80038c0:	50000800 	.word	0x50000800

080038c4 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b082      	sub	sp, #8
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  	//HAL_ResumeTick();

    //char sentence[50] = "";
    //sprintf(sentence,"Wake up from sleep mode by UART...\r\n");
    //HAL_UART_Transmit(&huart2, (uint8_t*) sentence, strlen(sentence), 100);
}
 80038cc:	46c0      	nop			; (mov r8, r8)
 80038ce:	46bd      	mov	sp, r7
 80038d0:	b002      	add	sp, #8
 80038d2:	bd80      	pop	{r7, pc}

080038d4 <HAL_GPIO_EXTI_Rising_Callback>:


void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b082      	sub	sp, #8
 80038d8:	af00      	add	r7, sp, #0
 80038da:	0002      	movs	r2, r0
 80038dc:	1dbb      	adds	r3, r7, #6
 80038de:	801a      	strh	r2, [r3, #0]

	if(GPIO_Pin == GPIO_PIN_13) {
 80038e0:	1dbb      	adds	r3, r7, #6
 80038e2:	881a      	ldrh	r2, [r3, #0]
 80038e4:	2380      	movs	r3, #128	; 0x80
 80038e6:	019b      	lsls	r3, r3, #6
 80038e8:	429a      	cmp	r2, r3
 80038ea:	d000      	beq.n	80038ee <HAL_GPIO_EXTI_Rising_Callback+0x1a>
		//set flag on
		//flag = 1;


  } else {
      __NOP();
 80038ec:	46c0      	nop			; (mov r8, r8)
  }
}
 80038ee:	46c0      	nop			; (mov r8, r8)
 80038f0:	46bd      	mov	sp, r7
 80038f2:	b002      	add	sp, #8
 80038f4:	bd80      	pop	{r7, pc}
	...

080038f8 <HAL_GPIO_EXTI_Falling_Callback>:

void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 80038f8:	b590      	push	{r4, r7, lr}
 80038fa:	b091      	sub	sp, #68	; 0x44
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	0002      	movs	r2, r0
 8003900:	1dbb      	adds	r3, r7, #6
 8003902:	801a      	strh	r2, [r3, #0]
  if(GPIO_Pin == GPIO_PIN_12) {
 8003904:	1dbb      	adds	r3, r7, #6
 8003906:	881a      	ldrh	r2, [r3, #0]
 8003908:	2380      	movs	r3, #128	; 0x80
 800390a:	015b      	lsls	r3, r3, #5
 800390c:	429a      	cmp	r2, r3
 800390e:	d12d      	bne.n	800396c <HAL_GPIO_EXTI_Falling_Callback+0x74>

	  	//NOTE : code for low power mode testing ...
	  	SystemClock_Config ();
 8003910:	f7ff fdd6 	bl	80034c0 <SystemClock_Config>
	  	HAL_ResumeTick();
 8003914:	f001 fb00 	bl	8004f18 <HAL_ResumeTick>
	  	//turn DMA on again
	  	HAL_UART_DMAResume(&huart1);
 8003918:	4b17      	ldr	r3, [pc, #92]	; (8003978 <HAL_GPIO_EXTI_Falling_Callback+0x80>)
 800391a:	0018      	movs	r0, r3
 800391c:	f003 ffd6 	bl	80078cc <HAL_UART_DMAResume>

	    char sentence[50] = "";
 8003920:	240c      	movs	r4, #12
 8003922:	193b      	adds	r3, r7, r4
 8003924:	2200      	movs	r2, #0
 8003926:	601a      	str	r2, [r3, #0]
 8003928:	3304      	adds	r3, #4
 800392a:	222e      	movs	r2, #46	; 0x2e
 800392c:	2100      	movs	r1, #0
 800392e:	0018      	movs	r0, r3
 8003930:	f004 ff8e 	bl	8008850 <memset>
	    sprintf(sentence,"Wake up from stop mode by EXTI...\r\n");
 8003934:	4a11      	ldr	r2, [pc, #68]	; (800397c <HAL_GPIO_EXTI_Falling_Callback+0x84>)
 8003936:	193b      	adds	r3, r7, r4
 8003938:	0011      	movs	r1, r2
 800393a:	0018      	movs	r0, r3
 800393c:	f005 fefe 	bl	800973c <siprintf>
	    HAL_UART_Transmit(&huart2, (uint8_t*) sentence, strlen(sentence), 100);
 8003940:	193b      	adds	r3, r7, r4
 8003942:	0018      	movs	r0, r3
 8003944:	f7fc fbe6 	bl	8000114 <strlen>
 8003948:	0003      	movs	r3, r0
 800394a:	b29a      	uxth	r2, r3
 800394c:	1939      	adds	r1, r7, r4
 800394e:	480c      	ldr	r0, [pc, #48]	; (8003980 <HAL_GPIO_EXTI_Falling_Callback+0x88>)
 8003950:	2364      	movs	r3, #100	; 0x64
 8003952:	f003 fd21 	bl	8007398 <HAL_UART_Transmit>

		//switch led on
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8003956:	23a0      	movs	r3, #160	; 0xa0
 8003958:	05db      	lsls	r3, r3, #23
 800395a:	2201      	movs	r2, #1
 800395c:	2120      	movs	r1, #32
 800395e:	0018      	movs	r0, r3
 8003960:	f001 ff92 	bl	8005888 <HAL_GPIO_WritePin>
		//turn gps module on ==> should be done before waking the stm up
		//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
		//set flag on
		wakeup_flag = 1;
 8003964:	4b07      	ldr	r3, [pc, #28]	; (8003984 <HAL_GPIO_EXTI_Falling_Callback+0x8c>)
 8003966:	2201      	movs	r2, #1
 8003968:	701a      	strb	r2, [r3, #0]


  } else {
      __NOP();
  }
}
 800396a:	e000      	b.n	800396e <HAL_GPIO_EXTI_Falling_Callback+0x76>
      __NOP();
 800396c:	46c0      	nop			; (mov r8, r8)
}
 800396e:	46c0      	nop			; (mov r8, r8)
 8003970:	46bd      	mov	sp, r7
 8003972:	b011      	add	sp, #68	; 0x44
 8003974:	bd90      	pop	{r4, r7, pc}
 8003976:	46c0      	nop			; (mov r8, r8)
 8003978:	2000080c 	.word	0x2000080c
 800397c:	0800dc68 	.word	0x0800dc68
 8003980:	2000089c 	.word	0x2000089c
 8003984:	200007bc 	.word	0x200007bc

08003988 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800398c:	b672      	cpsid	i
}
 800398e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003990:	e7fe      	b.n	8003990 <Error_Handler+0x8>
	...

08003994 <mma8452q_whoami>:
#define SRC_MMA8452Q_C_

#include "mma8452q.h"

//this function checks that the accelero is online
int mma8452q_whoami(uint8_t debug_on, UART_HandleTypeDef *phuart2, I2C_HandleTypeDef *phi2c1){
 8003994:	b5b0      	push	{r4, r5, r7, lr}
 8003996:	b0ca      	sub	sp, #296	; 0x128
 8003998:	af04      	add	r7, sp, #16
 800399a:	60b9      	str	r1, [r7, #8]
 800399c:	607a      	str	r2, [r7, #4]
 800399e:	4b4a      	ldr	r3, [pc, #296]	; (8003ac8 <mma8452q_whoami+0x134>)
 80039a0:	218c      	movs	r1, #140	; 0x8c
 80039a2:	0049      	lsls	r1, r1, #1
 80039a4:	185b      	adds	r3, r3, r1
 80039a6:	19db      	adds	r3, r3, r7
 80039a8:	1c02      	adds	r2, r0, #0
 80039aa:	701a      	strb	r2, [r3, #0]

	uint8_t id;
	uint8_t default_id = 0x2A;
 80039ac:	2316      	movs	r3, #22
 80039ae:	33ff      	adds	r3, #255	; 0xff
 80039b0:	18fb      	adds	r3, r7, r3
 80039b2:	222a      	movs	r2, #42	; 0x2a
 80039b4:	701a      	strb	r2, [r3, #0]

	uint8_t buf[256];

	if(debug_on){
 80039b6:	4b44      	ldr	r3, [pc, #272]	; (8003ac8 <mma8452q_whoami+0x134>)
 80039b8:	185b      	adds	r3, r3, r1
 80039ba:	19db      	adds	r3, r3, r7
 80039bc:	781b      	ldrb	r3, [r3, #0]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d017      	beq.n	80039f2 <mma8452q_whoami+0x5e>
		strcpy((char*)buf, "Who am I ?\r\n");
 80039c2:	2414      	movs	r4, #20
 80039c4:	193b      	adds	r3, r7, r4
 80039c6:	4a41      	ldr	r2, [pc, #260]	; (8003acc <mma8452q_whoami+0x138>)
 80039c8:	ca23      	ldmia	r2!, {r0, r1, r5}
 80039ca:	c323      	stmia	r3!, {r0, r1, r5}
 80039cc:	7812      	ldrb	r2, [r2, #0]
 80039ce:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(phuart2, buf, strlen((char*)buf), HAL_MAX_DELAY);
 80039d0:	193b      	adds	r3, r7, r4
 80039d2:	0018      	movs	r0, r3
 80039d4:	f7fc fb9e 	bl	8000114 <strlen>
 80039d8:	0003      	movs	r3, r0
 80039da:	b29a      	uxth	r2, r3
 80039dc:	2301      	movs	r3, #1
 80039de:	425b      	negs	r3, r3
 80039e0:	1939      	adds	r1, r7, r4
 80039e2:	68b8      	ldr	r0, [r7, #8]
 80039e4:	f003 fcd8 	bl	8007398 <HAL_UART_Transmit>

		HAL_Delay(500);
 80039e8:	23fa      	movs	r3, #250	; 0xfa
 80039ea:	005b      	lsls	r3, r3, #1
 80039ec:	0018      	movs	r0, r3
 80039ee:	f001 fa61 	bl	8004eb4 <HAL_Delay>
	}

	HAL_I2C_Mem_Read(phi2c1, MMA8452Q_ADDR, WHO_AM_I_ADDR, 1, &id, 1, HAL_MAX_DELAY);
 80039f2:	233a      	movs	r3, #58	; 0x3a
 80039f4:	b299      	uxth	r1, r3
 80039f6:	230d      	movs	r3, #13
 80039f8:	b29a      	uxth	r2, r3
 80039fa:	6878      	ldr	r0, [r7, #4]
 80039fc:	2301      	movs	r3, #1
 80039fe:	425b      	negs	r3, r3
 8003a00:	9302      	str	r3, [sp, #8]
 8003a02:	2301      	movs	r3, #1
 8003a04:	9301      	str	r3, [sp, #4]
 8003a06:	248b      	movs	r4, #139	; 0x8b
 8003a08:	0064      	lsls	r4, r4, #1
 8003a0a:	193b      	adds	r3, r7, r4
 8003a0c:	9300      	str	r3, [sp, #0]
 8003a0e:	2301      	movs	r3, #1
 8003a10:	f002 f946 	bl	8005ca0 <HAL_I2C_Mem_Read>

	uint8_t comp = (memcmp(&id, &default_id, 1) == 0);
 8003a14:	193b      	adds	r3, r7, r4
 8003a16:	781a      	ldrb	r2, [r3, #0]
 8003a18:	2316      	movs	r3, #22
 8003a1a:	33ff      	adds	r3, #255	; 0xff
 8003a1c:	18fb      	adds	r3, r7, r3
 8003a1e:	781b      	ldrb	r3, [r3, #0]
 8003a20:	1ad3      	subs	r3, r2, r3
 8003a22:	425a      	negs	r2, r3
 8003a24:	4153      	adcs	r3, r2
 8003a26:	b2da      	uxtb	r2, r3
 8003a28:	2118      	movs	r1, #24
 8003a2a:	31ff      	adds	r1, #255	; 0xff
 8003a2c:	187b      	adds	r3, r7, r1
 8003a2e:	701a      	strb	r2, [r3, #0]

	if (debug_on){
 8003a30:	4b25      	ldr	r3, [pc, #148]	; (8003ac8 <mma8452q_whoami+0x134>)
 8003a32:	228c      	movs	r2, #140	; 0x8c
 8003a34:	0052      	lsls	r2, r2, #1
 8003a36:	189b      	adds	r3, r3, r2
 8003a38:	19db      	adds	r3, r3, r7
 8003a3a:	781b      	ldrb	r3, [r3, #0]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d03b      	beq.n	8003ab8 <mma8452q_whoami+0x124>
		if (comp){
 8003a40:	187b      	adds	r3, r7, r1
 8003a42:	781b      	ldrb	r3, [r3, #0]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d018      	beq.n	8003a7a <mma8452q_whoami+0xe6>
			strcpy((char*)buf, "MMA8452Q is online !\r\n");
 8003a48:	2014      	movs	r0, #20
 8003a4a:	183b      	adds	r3, r7, r0
 8003a4c:	4a20      	ldr	r2, [pc, #128]	; (8003ad0 <mma8452q_whoami+0x13c>)
 8003a4e:	ca32      	ldmia	r2!, {r1, r4, r5}
 8003a50:	c332      	stmia	r3!, {r1, r4, r5}
 8003a52:	ca12      	ldmia	r2!, {r1, r4}
 8003a54:	c312      	stmia	r3!, {r1, r4}
 8003a56:	8811      	ldrh	r1, [r2, #0]
 8003a58:	8019      	strh	r1, [r3, #0]
 8003a5a:	7892      	ldrb	r2, [r2, #2]
 8003a5c:	709a      	strb	r2, [r3, #2]
			HAL_UART_Transmit(phuart2, buf, strlen((char*)buf), HAL_MAX_DELAY);
 8003a5e:	0004      	movs	r4, r0
 8003a60:	183b      	adds	r3, r7, r0
 8003a62:	0018      	movs	r0, r3
 8003a64:	f7fc fb56 	bl	8000114 <strlen>
 8003a68:	0003      	movs	r3, r0
 8003a6a:	b29a      	uxth	r2, r3
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	425b      	negs	r3, r3
 8003a70:	1939      	adds	r1, r7, r4
 8003a72:	68b8      	ldr	r0, [r7, #8]
 8003a74:	f003 fc90 	bl	8007398 <HAL_UART_Transmit>
 8003a78:	e019      	b.n	8003aae <mma8452q_whoami+0x11a>
		}

		else{
			strcpy((char*)buf, "ERROR : MMA8452Q is offline.\r\n");
 8003a7a:	2014      	movs	r0, #20
 8003a7c:	183b      	adds	r3, r7, r0
 8003a7e:	4a15      	ldr	r2, [pc, #84]	; (8003ad4 <mma8452q_whoami+0x140>)
 8003a80:	ca32      	ldmia	r2!, {r1, r4, r5}
 8003a82:	c332      	stmia	r3!, {r1, r4, r5}
 8003a84:	ca32      	ldmia	r2!, {r1, r4, r5}
 8003a86:	c332      	stmia	r3!, {r1, r4, r5}
 8003a88:	6811      	ldr	r1, [r2, #0]
 8003a8a:	6019      	str	r1, [r3, #0]
 8003a8c:	8891      	ldrh	r1, [r2, #4]
 8003a8e:	8099      	strh	r1, [r3, #4]
 8003a90:	7992      	ldrb	r2, [r2, #6]
 8003a92:	719a      	strb	r2, [r3, #6]
			HAL_UART_Transmit(phuart2, buf, strlen((char*)buf), HAL_MAX_DELAY);
 8003a94:	0004      	movs	r4, r0
 8003a96:	183b      	adds	r3, r7, r0
 8003a98:	0018      	movs	r0, r3
 8003a9a:	f7fc fb3b 	bl	8000114 <strlen>
 8003a9e:	0003      	movs	r3, r0
 8003aa0:	b29a      	uxth	r2, r3
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	425b      	negs	r3, r3
 8003aa6:	1939      	adds	r1, r7, r4
 8003aa8:	68b8      	ldr	r0, [r7, #8]
 8003aaa:	f003 fc75 	bl	8007398 <HAL_UART_Transmit>
		}

		HAL_Delay(500);
 8003aae:	23fa      	movs	r3, #250	; 0xfa
 8003ab0:	005b      	lsls	r3, r3, #1
 8003ab2:	0018      	movs	r0, r3
 8003ab4:	f001 f9fe 	bl	8004eb4 <HAL_Delay>
	}

	return comp;
 8003ab8:	2318      	movs	r3, #24
 8003aba:	33ff      	adds	r3, #255	; 0xff
 8003abc:	18fb      	adds	r3, r7, r3
 8003abe:	781b      	ldrb	r3, [r3, #0]

}
 8003ac0:	0018      	movs	r0, r3
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	b046      	add	sp, #280	; 0x118
 8003ac6:	bdb0      	pop	{r4, r5, r7, pc}
 8003ac8:	fffffef7 	.word	0xfffffef7
 8003acc:	0800dc8c 	.word	0x0800dc8c
 8003ad0:	0800dc9c 	.word	0x0800dc9c
 8003ad4:	0800dcb4 	.word	0x0800dcb4

08003ad8 <mma8452q_standby>:

//sets the accelero active bit to 0
void mma8452q_standby(uint8_t debug_on, UART_HandleTypeDef *phuart2, I2C_HandleTypeDef *phi2c1){
 8003ad8:	b5b0      	push	{r4, r5, r7, lr}
 8003ada:	b0ca      	sub	sp, #296	; 0x128
 8003adc:	af04      	add	r7, sp, #16
 8003ade:	60b9      	str	r1, [r7, #8]
 8003ae0:	607a      	str	r2, [r7, #4]
 8003ae2:	4b5b      	ldr	r3, [pc, #364]	; (8003c50 <mma8452q_standby+0x178>)
 8003ae4:	218c      	movs	r1, #140	; 0x8c
 8003ae6:	0049      	lsls	r1, r1, #1
 8003ae8:	185b      	adds	r3, r3, r1
 8003aea:	19db      	adds	r3, r3, r7
 8003aec:	1c02      	adds	r2, r0, #0
 8003aee:	701a      	strb	r2, [r3, #0]

	uint8_t sysmod;
	uint8_t buf[256];

	if(debug_on){
 8003af0:	4b57      	ldr	r3, [pc, #348]	; (8003c50 <mma8452q_standby+0x178>)
 8003af2:	185b      	adds	r3, r3, r1
 8003af4:	19db      	adds	r3, r3, r7
 8003af6:	781b      	ldrb	r3, [r3, #0]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d01a      	beq.n	8003b32 <mma8452q_standby+0x5a>
		strcpy((char*)buf, "Request to go standby.\r\n");
 8003afc:	2114      	movs	r1, #20
 8003afe:	187b      	adds	r3, r7, r1
 8003b00:	4a54      	ldr	r2, [pc, #336]	; (8003c54 <mma8452q_standby+0x17c>)
 8003b02:	ca31      	ldmia	r2!, {r0, r4, r5}
 8003b04:	c331      	stmia	r3!, {r0, r4, r5}
 8003b06:	ca31      	ldmia	r2!, {r0, r4, r5}
 8003b08:	c331      	stmia	r3!, {r0, r4, r5}
 8003b0a:	7812      	ldrb	r2, [r2, #0]
 8003b0c:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(phuart2, buf, strlen((char*)buf), HAL_MAX_DELAY);
 8003b0e:	000c      	movs	r4, r1
 8003b10:	187b      	adds	r3, r7, r1
 8003b12:	0018      	movs	r0, r3
 8003b14:	f7fc fafe 	bl	8000114 <strlen>
 8003b18:	0003      	movs	r3, r0
 8003b1a:	b29a      	uxth	r2, r3
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	425b      	negs	r3, r3
 8003b20:	1939      	adds	r1, r7, r4
 8003b22:	68b8      	ldr	r0, [r7, #8]
 8003b24:	f003 fc38 	bl	8007398 <HAL_UART_Transmit>

		HAL_Delay(500);
 8003b28:	23fa      	movs	r3, #250	; 0xfa
 8003b2a:	005b      	lsls	r3, r3, #1
 8003b2c:	0018      	movs	r0, r3
 8003b2e:	f001 f9c1 	bl	8004eb4 <HAL_Delay>
	}

	//read the active bit
	HAL_I2C_Mem_Read(phi2c1, MMA8452Q_ADDR, CTRL_REG1_ADDR, 1, &sysmod, 1, HAL_MAX_DELAY);
 8003b32:	233a      	movs	r3, #58	; 0x3a
 8003b34:	b299      	uxth	r1, r3
 8003b36:	232a      	movs	r3, #42	; 0x2a
 8003b38:	b29a      	uxth	r2, r3
 8003b3a:	6878      	ldr	r0, [r7, #4]
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	425b      	negs	r3, r3
 8003b40:	9302      	str	r3, [sp, #8]
 8003b42:	2301      	movs	r3, #1
 8003b44:	9301      	str	r3, [sp, #4]
 8003b46:	2418      	movs	r4, #24
 8003b48:	34ff      	adds	r4, #255	; 0xff
 8003b4a:	193b      	adds	r3, r7, r4
 8003b4c:	9300      	str	r3, [sp, #0]
 8003b4e:	2301      	movs	r3, #1
 8003b50:	f002 f8a6 	bl	8005ca0 <HAL_I2C_Mem_Read>

	if (debug_on){
 8003b54:	4b3e      	ldr	r3, [pc, #248]	; (8003c50 <mma8452q_standby+0x178>)
 8003b56:	228c      	movs	r2, #140	; 0x8c
 8003b58:	0052      	lsls	r2, r2, #1
 8003b5a:	189b      	adds	r3, r3, r2
 8003b5c:	19db      	adds	r3, r3, r7
 8003b5e:	781b      	ldrb	r3, [r3, #0]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d034      	beq.n	8003bce <mma8452q_standby+0xf6>
		if (!(sysmod & 0x01)){
 8003b64:	193b      	adds	r3, r7, r4
 8003b66:	781b      	ldrb	r3, [r3, #0]
 8003b68:	001a      	movs	r2, r3
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	4013      	ands	r3, r2
 8003b6e:	d116      	bne.n	8003b9e <mma8452q_standby+0xc6>
			strcpy((char*)buf, "I was standby already.\r\n");
 8003b70:	2114      	movs	r1, #20
 8003b72:	187b      	adds	r3, r7, r1
 8003b74:	4a38      	ldr	r2, [pc, #224]	; (8003c58 <mma8452q_standby+0x180>)
 8003b76:	ca31      	ldmia	r2!, {r0, r4, r5}
 8003b78:	c331      	stmia	r3!, {r0, r4, r5}
 8003b7a:	ca31      	ldmia	r2!, {r0, r4, r5}
 8003b7c:	c331      	stmia	r3!, {r0, r4, r5}
 8003b7e:	7812      	ldrb	r2, [r2, #0]
 8003b80:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(phuart2, buf, strlen((char*)buf), HAL_MAX_DELAY);
 8003b82:	000c      	movs	r4, r1
 8003b84:	187b      	adds	r3, r7, r1
 8003b86:	0018      	movs	r0, r3
 8003b88:	f7fc fac4 	bl	8000114 <strlen>
 8003b8c:	0003      	movs	r3, r0
 8003b8e:	b29a      	uxth	r2, r3
 8003b90:	2301      	movs	r3, #1
 8003b92:	425b      	negs	r3, r3
 8003b94:	1939      	adds	r1, r7, r4
 8003b96:	68b8      	ldr	r0, [r7, #8]
 8003b98:	f003 fbfe 	bl	8007398 <HAL_UART_Transmit>
 8003b9c:	e012      	b.n	8003bc4 <mma8452q_standby+0xec>
		}
		else{
			strcpy((char*)buf, "I was active.\r\n");
 8003b9e:	2414      	movs	r4, #20
 8003ba0:	193b      	adds	r3, r7, r4
 8003ba2:	4a2e      	ldr	r2, [pc, #184]	; (8003c5c <mma8452q_standby+0x184>)
 8003ba4:	ca23      	ldmia	r2!, {r0, r1, r5}
 8003ba6:	c323      	stmia	r3!, {r0, r1, r5}
 8003ba8:	6812      	ldr	r2, [r2, #0]
 8003baa:	601a      	str	r2, [r3, #0]
			HAL_UART_Transmit(phuart2, buf, strlen((char*)buf), HAL_MAX_DELAY);
 8003bac:	193b      	adds	r3, r7, r4
 8003bae:	0018      	movs	r0, r3
 8003bb0:	f7fc fab0 	bl	8000114 <strlen>
 8003bb4:	0003      	movs	r3, r0
 8003bb6:	b29a      	uxth	r2, r3
 8003bb8:	2301      	movs	r3, #1
 8003bba:	425b      	negs	r3, r3
 8003bbc:	1939      	adds	r1, r7, r4
 8003bbe:	68b8      	ldr	r0, [r7, #8]
 8003bc0:	f003 fbea 	bl	8007398 <HAL_UART_Transmit>
		}

		HAL_Delay(500);
 8003bc4:	23fa      	movs	r3, #250	; 0xfa
 8003bc6:	005b      	lsls	r3, r3, #1
 8003bc8:	0018      	movs	r0, r3
 8003bca:	f001 f973 	bl	8004eb4 <HAL_Delay>
	}

	//set active bit to 0 (standby mode)
	sysmod &= ~(0x01);
 8003bce:	2418      	movs	r4, #24
 8003bd0:	34ff      	adds	r4, #255	; 0xff
 8003bd2:	193b      	adds	r3, r7, r4
 8003bd4:	781b      	ldrb	r3, [r3, #0]
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	4393      	bics	r3, r2
 8003bda:	b2da      	uxtb	r2, r3
 8003bdc:	193b      	adds	r3, r7, r4
 8003bde:	701a      	strb	r2, [r3, #0]

	//write the active bit into mm4852q
	HAL_I2C_Mem_Write(phi2c1, MMA8452Q_ADDR, CTRL_REG1_ADDR, 1, &sysmod, 1, HAL_MAX_DELAY);
 8003be0:	233a      	movs	r3, #58	; 0x3a
 8003be2:	b299      	uxth	r1, r3
 8003be4:	232a      	movs	r3, #42	; 0x2a
 8003be6:	b29a      	uxth	r2, r3
 8003be8:	6878      	ldr	r0, [r7, #4]
 8003bea:	2301      	movs	r3, #1
 8003bec:	425b      	negs	r3, r3
 8003bee:	9302      	str	r3, [sp, #8]
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	9301      	str	r3, [sp, #4]
 8003bf4:	193b      	adds	r3, r7, r4
 8003bf6:	9300      	str	r3, [sp, #0]
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	f001 ff23 	bl	8005a44 <HAL_I2C_Mem_Write>

	if (debug_on){
 8003bfe:	4b14      	ldr	r3, [pc, #80]	; (8003c50 <mma8452q_standby+0x178>)
 8003c00:	228c      	movs	r2, #140	; 0x8c
 8003c02:	0052      	lsls	r2, r2, #1
 8003c04:	189b      	adds	r3, r3, r2
 8003c06:	19db      	adds	r3, r3, r7
 8003c08:	781b      	ldrb	r3, [r3, #0]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d01b      	beq.n	8003c46 <mma8452q_standby+0x16e>
		if (!(sysmod & 0x01)){
 8003c0e:	193b      	adds	r3, r7, r4
 8003c10:	781b      	ldrb	r3, [r3, #0]
 8003c12:	001a      	movs	r2, r3
 8003c14:	2301      	movs	r3, #1
 8003c16:	4013      	ands	r3, r2
 8003c18:	d115      	bne.n	8003c46 <mma8452q_standby+0x16e>
			strcpy((char*)buf, "Going standby.\r\n");
 8003c1a:	2014      	movs	r0, #20
 8003c1c:	183b      	adds	r3, r7, r0
 8003c1e:	4a10      	ldr	r2, [pc, #64]	; (8003c60 <mma8452q_standby+0x188>)
 8003c20:	ca32      	ldmia	r2!, {r1, r4, r5}
 8003c22:	c332      	stmia	r3!, {r1, r4, r5}
 8003c24:	6811      	ldr	r1, [r2, #0]
 8003c26:	6019      	str	r1, [r3, #0]
 8003c28:	7912      	ldrb	r2, [r2, #4]
 8003c2a:	711a      	strb	r2, [r3, #4]
			HAL_UART_Transmit(phuart2, buf, strlen((char*)buf), HAL_MAX_DELAY);
 8003c2c:	0004      	movs	r4, r0
 8003c2e:	183b      	adds	r3, r7, r0
 8003c30:	0018      	movs	r0, r3
 8003c32:	f7fc fa6f 	bl	8000114 <strlen>
 8003c36:	0003      	movs	r3, r0
 8003c38:	b29a      	uxth	r2, r3
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	425b      	negs	r3, r3
 8003c3e:	1939      	adds	r1, r7, r4
 8003c40:	68b8      	ldr	r0, [r7, #8]
 8003c42:	f003 fba9 	bl	8007398 <HAL_UART_Transmit>
		}
	}

}
 8003c46:	46c0      	nop			; (mov r8, r8)
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	b046      	add	sp, #280	; 0x118
 8003c4c:	bdb0      	pop	{r4, r5, r7, pc}
 8003c4e:	46c0      	nop			; (mov r8, r8)
 8003c50:	fffffef7 	.word	0xfffffef7
 8003c54:	0800dcd4 	.word	0x0800dcd4
 8003c58:	0800dcf0 	.word	0x0800dcf0
 8003c5c:	0800dd0c 	.word	0x0800dd0c
 8003c60:	0800dd1c 	.word	0x0800dd1c

08003c64 <mma8452q_active>:

//sets the accelero active bit to 1
void mma8452q_active(uint8_t debug_on, UART_HandleTypeDef *phuart2, I2C_HandleTypeDef *phi2c1){
 8003c64:	b5b0      	push	{r4, r5, r7, lr}
 8003c66:	b0ca      	sub	sp, #296	; 0x128
 8003c68:	af04      	add	r7, sp, #16
 8003c6a:	60b9      	str	r1, [r7, #8]
 8003c6c:	607a      	str	r2, [r7, #4]
 8003c6e:	4b58      	ldr	r3, [pc, #352]	; (8003dd0 <mma8452q_active+0x16c>)
 8003c70:	218c      	movs	r1, #140	; 0x8c
 8003c72:	0049      	lsls	r1, r1, #1
 8003c74:	185b      	adds	r3, r3, r1
 8003c76:	19db      	adds	r3, r3, r7
 8003c78:	1c02      	adds	r2, r0, #0
 8003c7a:	701a      	strb	r2, [r3, #0]

	uint8_t sysmod;
	uint8_t buf[256];

	if(debug_on){
 8003c7c:	4b54      	ldr	r3, [pc, #336]	; (8003dd0 <mma8452q_active+0x16c>)
 8003c7e:	185b      	adds	r3, r3, r1
 8003c80:	19db      	adds	r3, r3, r7
 8003c82:	781b      	ldrb	r3, [r3, #0]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d017      	beq.n	8003cb8 <mma8452q_active+0x54>
		strcpy((char*)buf, "Request to go active.\r\n");
 8003c88:	2414      	movs	r4, #20
 8003c8a:	193b      	adds	r3, r7, r4
 8003c8c:	4a51      	ldr	r2, [pc, #324]	; (8003dd4 <mma8452q_active+0x170>)
 8003c8e:	ca23      	ldmia	r2!, {r0, r1, r5}
 8003c90:	c323      	stmia	r3!, {r0, r1, r5}
 8003c92:	ca23      	ldmia	r2!, {r0, r1, r5}
 8003c94:	c323      	stmia	r3!, {r0, r1, r5}
		HAL_UART_Transmit(phuart2, buf, strlen((char*)buf), HAL_MAX_DELAY);
 8003c96:	193b      	adds	r3, r7, r4
 8003c98:	0018      	movs	r0, r3
 8003c9a:	f7fc fa3b 	bl	8000114 <strlen>
 8003c9e:	0003      	movs	r3, r0
 8003ca0:	b29a      	uxth	r2, r3
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	425b      	negs	r3, r3
 8003ca6:	1939      	adds	r1, r7, r4
 8003ca8:	68b8      	ldr	r0, [r7, #8]
 8003caa:	f003 fb75 	bl	8007398 <HAL_UART_Transmit>

		HAL_Delay(500);
 8003cae:	23fa      	movs	r3, #250	; 0xfa
 8003cb0:	005b      	lsls	r3, r3, #1
 8003cb2:	0018      	movs	r0, r3
 8003cb4:	f001 f8fe 	bl	8004eb4 <HAL_Delay>
	}

	//read the active bit
	HAL_I2C_Mem_Read(phi2c1, MMA8452Q_ADDR, CTRL_REG1_ADDR, 1, &sysmod, 1, HAL_MAX_DELAY);
 8003cb8:	233a      	movs	r3, #58	; 0x3a
 8003cba:	b299      	uxth	r1, r3
 8003cbc:	232a      	movs	r3, #42	; 0x2a
 8003cbe:	b29a      	uxth	r2, r3
 8003cc0:	6878      	ldr	r0, [r7, #4]
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	425b      	negs	r3, r3
 8003cc6:	9302      	str	r3, [sp, #8]
 8003cc8:	2301      	movs	r3, #1
 8003cca:	9301      	str	r3, [sp, #4]
 8003ccc:	2418      	movs	r4, #24
 8003cce:	34ff      	adds	r4, #255	; 0xff
 8003cd0:	193b      	adds	r3, r7, r4
 8003cd2:	9300      	str	r3, [sp, #0]
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	f001 ffe3 	bl	8005ca0 <HAL_I2C_Mem_Read>

	if (debug_on){
 8003cda:	4b3d      	ldr	r3, [pc, #244]	; (8003dd0 <mma8452q_active+0x16c>)
 8003cdc:	228c      	movs	r2, #140	; 0x8c
 8003cde:	0052      	lsls	r2, r2, #1
 8003ce0:	189b      	adds	r3, r3, r2
 8003ce2:	19db      	adds	r3, r3, r7
 8003ce4:	781b      	ldrb	r3, [r3, #0]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d034      	beq.n	8003d54 <mma8452q_active+0xf0>
		if ((sysmod & 0x01)){
 8003cea:	193b      	adds	r3, r7, r4
 8003cec:	781b      	ldrb	r3, [r3, #0]
 8003cee:	001a      	movs	r2, r3
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	4013      	ands	r3, r2
 8003cf4:	d013      	beq.n	8003d1e <mma8452q_active+0xba>
			strcpy((char*)buf, "I was active already.\r\n");
 8003cf6:	2414      	movs	r4, #20
 8003cf8:	193b      	adds	r3, r7, r4
 8003cfa:	4a37      	ldr	r2, [pc, #220]	; (8003dd8 <mma8452q_active+0x174>)
 8003cfc:	ca23      	ldmia	r2!, {r0, r1, r5}
 8003cfe:	c323      	stmia	r3!, {r0, r1, r5}
 8003d00:	ca23      	ldmia	r2!, {r0, r1, r5}
 8003d02:	c323      	stmia	r3!, {r0, r1, r5}
			HAL_UART_Transmit(phuart2, buf, strlen((char*)buf), HAL_MAX_DELAY);
 8003d04:	193b      	adds	r3, r7, r4
 8003d06:	0018      	movs	r0, r3
 8003d08:	f7fc fa04 	bl	8000114 <strlen>
 8003d0c:	0003      	movs	r3, r0
 8003d0e:	b29a      	uxth	r2, r3
 8003d10:	2301      	movs	r3, #1
 8003d12:	425b      	negs	r3, r3
 8003d14:	1939      	adds	r1, r7, r4
 8003d16:	68b8      	ldr	r0, [r7, #8]
 8003d18:	f003 fb3e 	bl	8007398 <HAL_UART_Transmit>
 8003d1c:	e015      	b.n	8003d4a <mma8452q_active+0xe6>
		}
		else{
			strcpy((char*)buf, "I was standby.\r\n");
 8003d1e:	2014      	movs	r0, #20
 8003d20:	183b      	adds	r3, r7, r0
 8003d22:	4a2e      	ldr	r2, [pc, #184]	; (8003ddc <mma8452q_active+0x178>)
 8003d24:	ca32      	ldmia	r2!, {r1, r4, r5}
 8003d26:	c332      	stmia	r3!, {r1, r4, r5}
 8003d28:	6811      	ldr	r1, [r2, #0]
 8003d2a:	6019      	str	r1, [r3, #0]
 8003d2c:	7912      	ldrb	r2, [r2, #4]
 8003d2e:	711a      	strb	r2, [r3, #4]
			HAL_UART_Transmit(phuart2, buf, strlen((char*)buf), HAL_MAX_DELAY);
 8003d30:	0004      	movs	r4, r0
 8003d32:	183b      	adds	r3, r7, r0
 8003d34:	0018      	movs	r0, r3
 8003d36:	f7fc f9ed 	bl	8000114 <strlen>
 8003d3a:	0003      	movs	r3, r0
 8003d3c:	b29a      	uxth	r2, r3
 8003d3e:	2301      	movs	r3, #1
 8003d40:	425b      	negs	r3, r3
 8003d42:	1939      	adds	r1, r7, r4
 8003d44:	68b8      	ldr	r0, [r7, #8]
 8003d46:	f003 fb27 	bl	8007398 <HAL_UART_Transmit>
		}

		HAL_Delay(500);
 8003d4a:	23fa      	movs	r3, #250	; 0xfa
 8003d4c:	005b      	lsls	r3, r3, #1
 8003d4e:	0018      	movs	r0, r3
 8003d50:	f001 f8b0 	bl	8004eb4 <HAL_Delay>
	}

	//set active bit to 1 (active mode)
	sysmod |= (0x01);
 8003d54:	2418      	movs	r4, #24
 8003d56:	34ff      	adds	r4, #255	; 0xff
 8003d58:	193b      	adds	r3, r7, r4
 8003d5a:	781b      	ldrb	r3, [r3, #0]
 8003d5c:	2201      	movs	r2, #1
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	b2da      	uxtb	r2, r3
 8003d62:	193b      	adds	r3, r7, r4
 8003d64:	701a      	strb	r2, [r3, #0]

	//write the active bit into mm4852q
	HAL_I2C_Mem_Write(phi2c1, MMA8452Q_ADDR, CTRL_REG1_ADDR, 1, &sysmod, 1, HAL_MAX_DELAY);
 8003d66:	233a      	movs	r3, #58	; 0x3a
 8003d68:	b299      	uxth	r1, r3
 8003d6a:	232a      	movs	r3, #42	; 0x2a
 8003d6c:	b29a      	uxth	r2, r3
 8003d6e:	6878      	ldr	r0, [r7, #4]
 8003d70:	2301      	movs	r3, #1
 8003d72:	425b      	negs	r3, r3
 8003d74:	9302      	str	r3, [sp, #8]
 8003d76:	2301      	movs	r3, #1
 8003d78:	9301      	str	r3, [sp, #4]
 8003d7a:	193b      	adds	r3, r7, r4
 8003d7c:	9300      	str	r3, [sp, #0]
 8003d7e:	2301      	movs	r3, #1
 8003d80:	f001 fe60 	bl	8005a44 <HAL_I2C_Mem_Write>

	if (debug_on){
 8003d84:	4b12      	ldr	r3, [pc, #72]	; (8003dd0 <mma8452q_active+0x16c>)
 8003d86:	228c      	movs	r2, #140	; 0x8c
 8003d88:	0052      	lsls	r2, r2, #1
 8003d8a:	189b      	adds	r3, r3, r2
 8003d8c:	19db      	adds	r3, r3, r7
 8003d8e:	781b      	ldrb	r3, [r3, #0]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d018      	beq.n	8003dc6 <mma8452q_active+0x162>
		if ((sysmod & 0x01)){
 8003d94:	193b      	adds	r3, r7, r4
 8003d96:	781b      	ldrb	r3, [r3, #0]
 8003d98:	001a      	movs	r2, r3
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	4013      	ands	r3, r2
 8003d9e:	d012      	beq.n	8003dc6 <mma8452q_active+0x162>
			strcpy((char*)buf, "Going active.\r\n");
 8003da0:	2414      	movs	r4, #20
 8003da2:	193b      	adds	r3, r7, r4
 8003da4:	4a0e      	ldr	r2, [pc, #56]	; (8003de0 <mma8452q_active+0x17c>)
 8003da6:	ca23      	ldmia	r2!, {r0, r1, r5}
 8003da8:	c323      	stmia	r3!, {r0, r1, r5}
 8003daa:	6812      	ldr	r2, [r2, #0]
 8003dac:	601a      	str	r2, [r3, #0]
			HAL_UART_Transmit(phuart2, buf, strlen((char*)buf), HAL_MAX_DELAY);
 8003dae:	193b      	adds	r3, r7, r4
 8003db0:	0018      	movs	r0, r3
 8003db2:	f7fc f9af 	bl	8000114 <strlen>
 8003db6:	0003      	movs	r3, r0
 8003db8:	b29a      	uxth	r2, r3
 8003dba:	2301      	movs	r3, #1
 8003dbc:	425b      	negs	r3, r3
 8003dbe:	1939      	adds	r1, r7, r4
 8003dc0:	68b8      	ldr	r0, [r7, #8]
 8003dc2:	f003 fae9 	bl	8007398 <HAL_UART_Transmit>
		}
	}
}
 8003dc6:	46c0      	nop			; (mov r8, r8)
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	b046      	add	sp, #280	; 0x118
 8003dcc:	bdb0      	pop	{r4, r5, r7, pc}
 8003dce:	46c0      	nop			; (mov r8, r8)
 8003dd0:	fffffef7 	.word	0xfffffef7
 8003dd4:	0800dd30 	.word	0x0800dd30
 8003dd8:	0800dd48 	.word	0x0800dd48
 8003ddc:	0800dd60 	.word	0x0800dd60
 8003de0:	0800dd74 	.word	0x0800dd74

08003de4 <mma8452q_setup>:

//this function reads the ELE & OAE bits from the configuration register and returns true if both of them are 1
void mma8452q_setup(uint8_t debug_on, UART_HandleTypeDef *phuart2, I2C_HandleTypeDef *phi2c1){
 8003de4:	b5b0      	push	{r4, r5, r7, lr}
 8003de6:	b0ca      	sub	sp, #296	; 0x128
 8003de8:	af04      	add	r7, sp, #16
 8003dea:	60b9      	str	r1, [r7, #8]
 8003dec:	607a      	str	r2, [r7, #4]
 8003dee:	4b43      	ldr	r3, [pc, #268]	; (8003efc <mma8452q_setup+0x118>)
 8003df0:	248c      	movs	r4, #140	; 0x8c
 8003df2:	0064      	lsls	r4, r4, #1
 8003df4:	191b      	adds	r3, r3, r4
 8003df6:	19db      	adds	r3, r3, r7
 8003df8:	1c02      	adds	r2, r0, #0
 8003dfa:	701a      	strb	r2, [r3, #0]

	uint8_t desired_freefall_motion_config = 0xF8;
 8003dfc:	2318      	movs	r3, #24
 8003dfe:	33ff      	adds	r3, #255	; 0xff
 8003e00:	18fb      	adds	r3, r7, r3
 8003e02:	22f8      	movs	r2, #248	; 0xf8
 8003e04:	701a      	strb	r2, [r3, #0]

	uint8_t buf[256];

	//make sure the accelerometer is up
	//TODO : trigger error if not !
	mma8452q_whoami(debug_on, phuart2, phi2c1);
 8003e06:	687a      	ldr	r2, [r7, #4]
 8003e08:	68b9      	ldr	r1, [r7, #8]
 8003e0a:	4b3c      	ldr	r3, [pc, #240]	; (8003efc <mma8452q_setup+0x118>)
 8003e0c:	191b      	adds	r3, r3, r4
 8003e0e:	19db      	adds	r3, r3, r7
 8003e10:	781b      	ldrb	r3, [r3, #0]
 8003e12:	0018      	movs	r0, r3
 8003e14:	f7ff fdbe 	bl	8003994 <mma8452q_whoami>

	//going standby in order to be able to modify the configuration register
	mma8452q_standby(debug_on, phuart2, phi2c1);
 8003e18:	687a      	ldr	r2, [r7, #4]
 8003e1a:	68b9      	ldr	r1, [r7, #8]
 8003e1c:	4b37      	ldr	r3, [pc, #220]	; (8003efc <mma8452q_setup+0x118>)
 8003e1e:	191b      	adds	r3, r3, r4
 8003e20:	19db      	adds	r3, r3, r7
 8003e22:	781b      	ldrb	r3, [r3, #0]
 8003e24:	0018      	movs	r0, r3
 8003e26:	f7ff fe57 	bl	8003ad8 <mma8452q_standby>

	if(debug_on){
 8003e2a:	4b34      	ldr	r3, [pc, #208]	; (8003efc <mma8452q_setup+0x118>)
 8003e2c:	191b      	adds	r3, r3, r4
 8003e2e:	19db      	adds	r3, r3, r7
 8003e30:	781b      	ldrb	r3, [r3, #0]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d01a      	beq.n	8003e6c <mma8452q_setup+0x88>
		strcpy((char*)buf, "Setting up MMA8452Q...\r\n");
 8003e36:	2114      	movs	r1, #20
 8003e38:	187b      	adds	r3, r7, r1
 8003e3a:	4a31      	ldr	r2, [pc, #196]	; (8003f00 <mma8452q_setup+0x11c>)
 8003e3c:	ca31      	ldmia	r2!, {r0, r4, r5}
 8003e3e:	c331      	stmia	r3!, {r0, r4, r5}
 8003e40:	ca31      	ldmia	r2!, {r0, r4, r5}
 8003e42:	c331      	stmia	r3!, {r0, r4, r5}
 8003e44:	7812      	ldrb	r2, [r2, #0]
 8003e46:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(phuart2, buf, strlen((char*)buf), HAL_MAX_DELAY);
 8003e48:	000c      	movs	r4, r1
 8003e4a:	187b      	adds	r3, r7, r1
 8003e4c:	0018      	movs	r0, r3
 8003e4e:	f7fc f961 	bl	8000114 <strlen>
 8003e52:	0003      	movs	r3, r0
 8003e54:	b29a      	uxth	r2, r3
 8003e56:	2301      	movs	r3, #1
 8003e58:	425b      	negs	r3, r3
 8003e5a:	1939      	adds	r1, r7, r4
 8003e5c:	68b8      	ldr	r0, [r7, #8]
 8003e5e:	f003 fa9b 	bl	8007398 <HAL_UART_Transmit>

		HAL_Delay(500);
 8003e62:	23fa      	movs	r3, #250	; 0xfa
 8003e64:	005b      	lsls	r3, r3, #1
 8003e66:	0018      	movs	r0, r3
 8003e68:	f001 f824 	bl	8004eb4 <HAL_Delay>
	}

	//write desired config
	HAL_I2C_Mem_Write(phi2c1, MMA8452Q_ADDR, FF_MT_CFG_ADDR, 1, &desired_freefall_motion_config, 1, HAL_MAX_DELAY);
 8003e6c:	233a      	movs	r3, #58	; 0x3a
 8003e6e:	b299      	uxth	r1, r3
 8003e70:	2315      	movs	r3, #21
 8003e72:	b29a      	uxth	r2, r3
 8003e74:	6878      	ldr	r0, [r7, #4]
 8003e76:	2301      	movs	r3, #1
 8003e78:	425b      	negs	r3, r3
 8003e7a:	9302      	str	r3, [sp, #8]
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	9301      	str	r3, [sp, #4]
 8003e80:	2318      	movs	r3, #24
 8003e82:	33ff      	adds	r3, #255	; 0xff
 8003e84:	18fb      	adds	r3, r7, r3
 8003e86:	9300      	str	r3, [sp, #0]
 8003e88:	2301      	movs	r3, #1
 8003e8a:	f001 fddb 	bl	8005a44 <HAL_I2C_Mem_Write>

	//set desired threshold acceleration to 0.5g (DBCNTM = 0 for the moment)
	uint8_t desired_freefall_motion_threshold = 0x0c;
 8003e8e:	4b1d      	ldr	r3, [pc, #116]	; (8003f04 <mma8452q_setup+0x120>)
 8003e90:	248c      	movs	r4, #140	; 0x8c
 8003e92:	0064      	lsls	r4, r4, #1
 8003e94:	191b      	adds	r3, r3, r4
 8003e96:	19db      	adds	r3, r3, r7
 8003e98:	220c      	movs	r2, #12
 8003e9a:	701a      	strb	r2, [r3, #0]

	//write desired acceleration threshold
	HAL_I2C_Mem_Write(phi2c1, MMA8452Q_ADDR, FF_MT_THS_ADDR, 1, &desired_freefall_motion_threshold, 1, HAL_MAX_DELAY);
 8003e9c:	233a      	movs	r3, #58	; 0x3a
 8003e9e:	b299      	uxth	r1, r3
 8003ea0:	2317      	movs	r3, #23
 8003ea2:	b29a      	uxth	r2, r3
 8003ea4:	6878      	ldr	r0, [r7, #4]
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	425b      	negs	r3, r3
 8003eaa:	9302      	str	r3, [sp, #8]
 8003eac:	2301      	movs	r3, #1
 8003eae:	9301      	str	r3, [sp, #4]
 8003eb0:	2313      	movs	r3, #19
 8003eb2:	18fb      	adds	r3, r7, r3
 8003eb4:	9300      	str	r3, [sp, #0]
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	f001 fdc4 	bl	8005a44 <HAL_I2C_Mem_Write>

	//set desired debounce counter to 14
	uint8_t desired_freefall_motion_count = 0x0d;
 8003ebc:	4b12      	ldr	r3, [pc, #72]	; (8003f08 <mma8452q_setup+0x124>)
 8003ebe:	191b      	adds	r3, r3, r4
 8003ec0:	19db      	adds	r3, r3, r7
 8003ec2:	220d      	movs	r2, #13
 8003ec4:	701a      	strb	r2, [r3, #0]

	//write desired debounce counter
	HAL_I2C_Mem_Write(phi2c1, MMA8452Q_ADDR, FF_MT_COUNT_ADDR, 1, &desired_freefall_motion_count, 1, HAL_MAX_DELAY);
 8003ec6:	233a      	movs	r3, #58	; 0x3a
 8003ec8:	b299      	uxth	r1, r3
 8003eca:	2317      	movs	r3, #23
 8003ecc:	b29a      	uxth	r2, r3
 8003ece:	6878      	ldr	r0, [r7, #4]
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	425b      	negs	r3, r3
 8003ed4:	9302      	str	r3, [sp, #8]
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	9301      	str	r3, [sp, #4]
 8003eda:	2312      	movs	r3, #18
 8003edc:	18fb      	adds	r3, r7, r3
 8003ede:	9300      	str	r3, [sp, #0]
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	f001 fdaf 	bl	8005a44 <HAL_I2C_Mem_Write>

	//putting accelero active
	mma8452q_active(1,phuart2, phi2c1);
 8003ee6:	687a      	ldr	r2, [r7, #4]
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	0019      	movs	r1, r3
 8003eec:	2001      	movs	r0, #1
 8003eee:	f7ff feb9 	bl	8003c64 <mma8452q_active>
		HAL_Delay(500);
	}

	return(comp);
	*/
}
 8003ef2:	46c0      	nop			; (mov r8, r8)
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	b046      	add	sp, #280	; 0x118
 8003ef8:	bdb0      	pop	{r4, r5, r7, pc}
 8003efa:	46c0      	nop			; (mov r8, r8)
 8003efc:	fffffef7 	.word	0xfffffef7
 8003f00:	0800dd84 	.word	0x0800dd84
 8003f04:	fffffefb 	.word	0xfffffefb
 8003f08:	fffffefa 	.word	0xfffffefa

08003f0c <mma8452q_motion_detection>:

int mma8452q_motion_detection(uint8_t debug_on, UART_HandleTypeDef *phuart2, I2C_HandleTypeDef *phi2c1){
 8003f0c:	b5b0      	push	{r4, r5, r7, lr}
 8003f0e:	b0ca      	sub	sp, #296	; 0x128
 8003f10:	af04      	add	r7, sp, #16
 8003f12:	60b9      	str	r1, [r7, #8]
 8003f14:	607a      	str	r2, [r7, #4]
 8003f16:	4b23      	ldr	r3, [pc, #140]	; (8003fa4 <mma8452q_motion_detection+0x98>)
 8003f18:	248c      	movs	r4, #140	; 0x8c
 8003f1a:	0064      	lsls	r4, r4, #1
 8003f1c:	191b      	adds	r3, r3, r4
 8003f1e:	19db      	adds	r3, r3, r7
 8003f20:	1c02      	adds	r2, r0, #0
 8003f22:	701a      	strb	r2, [r3, #0]

	uint8_t freefall_motion_source;
	uint8_t buf[256];

	//read content of freefall motion source register
	HAL_I2C_Mem_Read(phi2c1, MMA8452Q_ADDR, FF_MT_SRC_ADDR, 1, &freefall_motion_source, 1, HAL_MAX_DELAY);
 8003f24:	233a      	movs	r3, #58	; 0x3a
 8003f26:	b299      	uxth	r1, r3
 8003f28:	2316      	movs	r3, #22
 8003f2a:	b29a      	uxth	r2, r3
 8003f2c:	6878      	ldr	r0, [r7, #4]
 8003f2e:	2301      	movs	r3, #1
 8003f30:	425b      	negs	r3, r3
 8003f32:	9302      	str	r3, [sp, #8]
 8003f34:	2301      	movs	r3, #1
 8003f36:	9301      	str	r3, [sp, #4]
 8003f38:	2518      	movs	r5, #24
 8003f3a:	35ff      	adds	r5, #255	; 0xff
 8003f3c:	197b      	adds	r3, r7, r5
 8003f3e:	9300      	str	r3, [sp, #0]
 8003f40:	2301      	movs	r3, #1
 8003f42:	f001 fead 	bl	8005ca0 <HAL_I2C_Mem_Read>

	//if event active flag (EA) is 1
	if (freefall_motion_source & 0x80){
 8003f46:	197b      	adds	r3, r7, r5
 8003f48:	781b      	ldrb	r3, [r3, #0]
 8003f4a:	b25b      	sxtb	r3, r3
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	da24      	bge.n	8003f9a <mma8452q_motion_detection+0x8e>
		if(debug_on){
 8003f50:	4b14      	ldr	r3, [pc, #80]	; (8003fa4 <mma8452q_motion_detection+0x98>)
 8003f52:	191b      	adds	r3, r3, r4
 8003f54:	19db      	adds	r3, r3, r7
 8003f56:	781b      	ldrb	r3, [r3, #0]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d01c      	beq.n	8003f96 <mma8452q_motion_detection+0x8a>

			strcpy((char*)buf, "Motion detected !!! \r\n");
 8003f5c:	2014      	movs	r0, #20
 8003f5e:	183b      	adds	r3, r7, r0
 8003f60:	4a11      	ldr	r2, [pc, #68]	; (8003fa8 <mma8452q_motion_detection+0x9c>)
 8003f62:	ca32      	ldmia	r2!, {r1, r4, r5}
 8003f64:	c332      	stmia	r3!, {r1, r4, r5}
 8003f66:	ca12      	ldmia	r2!, {r1, r4}
 8003f68:	c312      	stmia	r3!, {r1, r4}
 8003f6a:	8811      	ldrh	r1, [r2, #0]
 8003f6c:	8019      	strh	r1, [r3, #0]
 8003f6e:	7892      	ldrb	r2, [r2, #2]
 8003f70:	709a      	strb	r2, [r3, #2]
			HAL_UART_Transmit(phuart2, buf, strlen((char*)buf), HAL_MAX_DELAY);
 8003f72:	0004      	movs	r4, r0
 8003f74:	183b      	adds	r3, r7, r0
 8003f76:	0018      	movs	r0, r3
 8003f78:	f7fc f8cc 	bl	8000114 <strlen>
 8003f7c:	0003      	movs	r3, r0
 8003f7e:	b29a      	uxth	r2, r3
 8003f80:	2301      	movs	r3, #1
 8003f82:	425b      	negs	r3, r3
 8003f84:	1939      	adds	r1, r7, r4
 8003f86:	68b8      	ldr	r0, [r7, #8]
 8003f88:	f003 fa06 	bl	8007398 <HAL_UART_Transmit>

			HAL_Delay(500);
 8003f8c:	23fa      	movs	r3, #250	; 0xfa
 8003f8e:	005b      	lsls	r3, r3, #1
 8003f90:	0018      	movs	r0, r3
 8003f92:	f000 ff8f 	bl	8004eb4 <HAL_Delay>
		}

		return 1;
 8003f96:	2301      	movs	r3, #1
 8003f98:	e000      	b.n	8003f9c <mma8452q_motion_detection+0x90>
	}
	else{
		return 0;
 8003f9a:	2300      	movs	r3, #0
	}

}
 8003f9c:	0018      	movs	r0, r3
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	b046      	add	sp, #280	; 0x118
 8003fa2:	bdb0      	pop	{r4, r5, r7, pc}
 8003fa4:	fffffef7 	.word	0xfffffef7
 8003fa8:	0800dda0 	.word	0x0800dda0

08003fac <sim800_AT_OK>:
#define SRC_SIM800_C_

#include "sim800.h"

//this function checks that SIM800 GSM module responds OK to the AT command "AT" after a maximum of 10 attempts.
int sim800_AT_OK(uint8_t debug_on, UART_HandleTypeDef huart2, UART_HandleTypeDef huart3){
 8003fac:	b084      	sub	sp, #16
 8003fae:	b5b0      	push	{r4, r5, r7, lr}
 8003fb0:	b090      	sub	sp, #64	; 0x40
 8003fb2:	af00      	add	r7, sp, #0
 8003fb4:	0004      	movs	r4, r0
 8003fb6:	2004      	movs	r0, #4
 8003fb8:	2550      	movs	r5, #80	; 0x50
 8003fba:	1940      	adds	r0, r0, r5
 8003fbc:	19c0      	adds	r0, r0, r7
 8003fbe:	6001      	str	r1, [r0, #0]
 8003fc0:	6042      	str	r2, [r0, #4]
 8003fc2:	6083      	str	r3, [r0, #8]
 8003fc4:	1dfb      	adds	r3, r7, #7
 8003fc6:	1c22      	adds	r2, r4, #0
 8003fc8:	701a      	strb	r2, [r3, #0]

	//char ATcommand[80];
	char ATcommand[] = "AT\r\n";
 8003fca:	2338      	movs	r3, #56	; 0x38
 8003fcc:	18fb      	adds	r3, r7, r3
 8003fce:	4a4b      	ldr	r2, [pc, #300]	; (80040fc <sim800_AT_OK+0x150>)
 8003fd0:	6811      	ldr	r1, [r2, #0]
 8003fd2:	6019      	str	r1, [r3, #0]
 8003fd4:	7912      	ldrb	r2, [r2, #4]
 8003fd6:	711a      	strb	r2, [r3, #4]
	uint8_t buffer[30] = {0};
 8003fd8:	2318      	movs	r3, #24
 8003fda:	18fb      	adds	r3, r7, r3
 8003fdc:	2200      	movs	r2, #0
 8003fde:	601a      	str	r2, [r3, #0]
 8003fe0:	3304      	adds	r3, #4
 8003fe2:	221a      	movs	r2, #26
 8003fe4:	2100      	movs	r1, #0
 8003fe6:	0018      	movs	r0, r3
 8003fe8:	f004 fc32 	bl	8008850 <memset>
	uint8_t ATisOK = 0;
 8003fec:	233e      	movs	r3, #62	; 0x3e
 8003fee:	18fb      	adds	r3, r7, r3
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	701a      	strb	r2, [r3, #0]
	uint8_t count = 0;
 8003ff4:	233f      	movs	r3, #63	; 0x3f
 8003ff6:	18fb      	adds	r3, r7, r3
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	701a      	strb	r2, [r3, #0]
	uint8_t timeout = 2;
 8003ffc:	233d      	movs	r3, #61	; 0x3d
 8003ffe:	18fb      	adds	r3, r7, r3
 8004000:	2202      	movs	r2, #2
 8004002:	701a      	strb	r2, [r3, #0]

	while(!ATisOK){
 8004004:	e06b      	b.n	80040de <sim800_AT_OK+0x132>

		if (debug_on){HAL_UART_Transmit(&huart2,(uint8_t *)ATcommand,strlen(ATcommand),1000);}
 8004006:	1dfb      	adds	r3, r7, #7
 8004008:	781b      	ldrb	r3, [r3, #0]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d00d      	beq.n	800402a <sim800_AT_OK+0x7e>
 800400e:	2438      	movs	r4, #56	; 0x38
 8004010:	193b      	adds	r3, r7, r4
 8004012:	0018      	movs	r0, r3
 8004014:	f7fc f87e 	bl	8000114 <strlen>
 8004018:	0003      	movs	r3, r0
 800401a:	b29a      	uxth	r2, r3
 800401c:	23fa      	movs	r3, #250	; 0xfa
 800401e:	009b      	lsls	r3, r3, #2
 8004020:	1939      	adds	r1, r7, r4
 8004022:	2054      	movs	r0, #84	; 0x54
 8004024:	1838      	adds	r0, r7, r0
 8004026:	f003 f9b7 	bl	8007398 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3,(uint8_t *)ATcommand,strlen(ATcommand),1000);
 800402a:	2438      	movs	r4, #56	; 0x38
 800402c:	193b      	adds	r3, r7, r4
 800402e:	0018      	movs	r0, r3
 8004030:	f7fc f870 	bl	8000114 <strlen>
 8004034:	0003      	movs	r3, r0
 8004036:	b29a      	uxth	r2, r3
 8004038:	23fa      	movs	r3, #250	; 0xfa
 800403a:	009b      	lsls	r3, r3, #2
 800403c:	1939      	adds	r1, r7, r4
 800403e:	24e4      	movs	r4, #228	; 0xe4
 8004040:	1938      	adds	r0, r7, r4
 8004042:	f003 f9a9 	bl	8007398 <HAL_UART_Transmit>
		HAL_UART_Receive (&huart3, buffer, 30, 100);
 8004046:	2518      	movs	r5, #24
 8004048:	1979      	adds	r1, r7, r5
 800404a:	1938      	adds	r0, r7, r4
 800404c:	2364      	movs	r3, #100	; 0x64
 800404e:	221e      	movs	r2, #30
 8004050:	f003 fa4e 	bl	80074f0 <HAL_UART_Receive>
		HAL_Delay(1000);
 8004054:	23fa      	movs	r3, #250	; 0xfa
 8004056:	009b      	lsls	r3, r3, #2
 8004058:	0018      	movs	r0, r3
 800405a:	f000 ff2b 	bl	8004eb4 <HAL_Delay>

		if(strstr((char *)buffer,"OK")){
 800405e:	4a28      	ldr	r2, [pc, #160]	; (8004100 <sim800_AT_OK+0x154>)
 8004060:	197b      	adds	r3, r7, r5
 8004062:	0011      	movs	r1, r2
 8004064:	0018      	movs	r0, r3
 8004066:	f005 fc07 	bl	8009878 <strstr>
 800406a:	1e03      	subs	r3, r0, #0
 800406c:	d01e      	beq.n	80040ac <sim800_AT_OK+0x100>
			char ok_sim800[] = "SIM800 : OK\r\n";
 800406e:	2108      	movs	r1, #8
 8004070:	187b      	adds	r3, r7, r1
 8004072:	4a24      	ldr	r2, [pc, #144]	; (8004104 <sim800_AT_OK+0x158>)
 8004074:	ca31      	ldmia	r2!, {r0, r4, r5}
 8004076:	c331      	stmia	r3!, {r0, r4, r5}
 8004078:	8812      	ldrh	r2, [r2, #0]
 800407a:	801a      	strh	r2, [r3, #0]
			if (debug_on){HAL_UART_Transmit(&huart2,(uint8_t *)ok_sim800,strlen(ok_sim800),1000);}
 800407c:	1dfb      	adds	r3, r7, #7
 800407e:	781b      	ldrb	r3, [r3, #0]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d00d      	beq.n	80040a0 <sim800_AT_OK+0xf4>
 8004084:	000c      	movs	r4, r1
 8004086:	187b      	adds	r3, r7, r1
 8004088:	0018      	movs	r0, r3
 800408a:	f7fc f843 	bl	8000114 <strlen>
 800408e:	0003      	movs	r3, r0
 8004090:	b29a      	uxth	r2, r3
 8004092:	23fa      	movs	r3, #250	; 0xfa
 8004094:	009b      	lsls	r3, r3, #2
 8004096:	1939      	adds	r1, r7, r4
 8004098:	2054      	movs	r0, #84	; 0x54
 800409a:	1838      	adds	r0, r7, r0
 800409c:	f003 f97c 	bl	8007398 <HAL_UART_Transmit>
			ATisOK = 1;
 80040a0:	233e      	movs	r3, #62	; 0x3e
 80040a2:	18fb      	adds	r3, r7, r3
 80040a4:	2201      	movs	r2, #1
 80040a6:	701a      	strb	r2, [r3, #0]
			return 1;
 80040a8:	2301      	movs	r3, #1
 80040aa:	e020      	b.n	80040ee <sim800_AT_OK+0x142>
		}

		HAL_Delay(1000);
 80040ac:	23fa      	movs	r3, #250	; 0xfa
 80040ae:	009b      	lsls	r3, r3, #2
 80040b0:	0018      	movs	r0, r3
 80040b2:	f000 feff 	bl	8004eb4 <HAL_Delay>
		memset(buffer,0,sizeof(buffer));
 80040b6:	2318      	movs	r3, #24
 80040b8:	18fb      	adds	r3, r7, r3
 80040ba:	221e      	movs	r2, #30
 80040bc:	2100      	movs	r1, #0
 80040be:	0018      	movs	r0, r3
 80040c0:	f004 fbc6 	bl	8008850 <memset>

		count++;
 80040c4:	213f      	movs	r1, #63	; 0x3f
 80040c6:	187b      	adds	r3, r7, r1
 80040c8:	781a      	ldrb	r2, [r3, #0]
 80040ca:	187b      	adds	r3, r7, r1
 80040cc:	3201      	adds	r2, #1
 80040ce:	701a      	strb	r2, [r3, #0]
		if (count >= timeout){
 80040d0:	187a      	adds	r2, r7, r1
 80040d2:	233d      	movs	r3, #61	; 0x3d
 80040d4:	18fb      	adds	r3, r7, r3
 80040d6:	7812      	ldrb	r2, [r2, #0]
 80040d8:	781b      	ldrb	r3, [r3, #0]
 80040da:	429a      	cmp	r2, r3
 80040dc:	d205      	bcs.n	80040ea <sim800_AT_OK+0x13e>
	while(!ATisOK){
 80040de:	233e      	movs	r3, #62	; 0x3e
 80040e0:	18fb      	adds	r3, r7, r3
 80040e2:	781b      	ldrb	r3, [r3, #0]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d08e      	beq.n	8004006 <sim800_AT_OK+0x5a>
 80040e8:	e000      	b.n	80040ec <sim800_AT_OK+0x140>
			break;
 80040ea:	46c0      	nop			; (mov r8, r8)
		}
	}

	return 0;
 80040ec:	2300      	movs	r3, #0

}
 80040ee:	0018      	movs	r0, r3
 80040f0:	46bd      	mov	sp, r7
 80040f2:	b010      	add	sp, #64	; 0x40
 80040f4:	bcb0      	pop	{r4, r5, r7}
 80040f6:	bc08      	pop	{r3}
 80040f8:	b004      	add	sp, #16
 80040fa:	4718      	bx	r3
 80040fc:	0800ddbc 	.word	0x0800ddbc
 8004100:	0800ddb8 	.word	0x0800ddb8
 8004104:	0800ddc4 	.word	0x0800ddc4

08004108 <sim800_setup>:

int sim800_setup(uint8_t debug_on, UART_HandleTypeDef huart2, UART_HandleTypeDef huart3){
 8004108:	b084      	sub	sp, #16
 800410a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800410c:	b0e5      	sub	sp, #404	; 0x194
 800410e:	af46      	add	r7, sp, #280	; 0x118
 8004110:	0004      	movs	r4, r0
 8004112:	2004      	movs	r0, #4
 8004114:	2588      	movs	r5, #136	; 0x88
 8004116:	1940      	adds	r0, r0, r5
 8004118:	2608      	movs	r6, #8
 800411a:	46b4      	mov	ip, r6
 800411c:	44bc      	add	ip, r7
 800411e:	4460      	add	r0, ip
 8004120:	6001      	str	r1, [r0, #0]
 8004122:	6042      	str	r2, [r0, #4]
 8004124:	6083      	str	r3, [r0, #8]
 8004126:	1dfb      	adds	r3, r7, #7
 8004128:	1c22      	adds	r2, r4, #0
 800412a:	701a      	strb	r2, [r3, #0]

	char ATcommand[80];
	uint8_t buffer[30] = {0};
 800412c:	2308      	movs	r3, #8
 800412e:	001c      	movs	r4, r3
 8004130:	18fb      	adds	r3, r7, r3
 8004132:	2200      	movs	r2, #0
 8004134:	601a      	str	r2, [r3, #0]
 8004136:	3304      	adds	r3, #4
 8004138:	221a      	movs	r2, #26
 800413a:	2100      	movs	r1, #0
 800413c:	0018      	movs	r0, r3
 800413e:	f004 fb87 	bl	8008850 <memset>

	if (!sim800_AT_OK(1, huart2, huart3)){
 8004142:	2304      	movs	r3, #4
 8004144:	195b      	adds	r3, r3, r5
 8004146:	0022      	movs	r2, r4
 8004148:	18b9      	adds	r1, r7, r2
 800414a:	185c      	adds	r4, r3, r1
 800414c:	2394      	movs	r3, #148	; 0x94
 800414e:	195b      	adds	r3, r3, r5
 8004150:	18ba      	adds	r2, r7, r2
 8004152:	189a      	adds	r2, r3, r2
 8004154:	2384      	movs	r3, #132	; 0x84
 8004156:	446b      	add	r3, sp
 8004158:	0018      	movs	r0, r3
 800415a:	0011      	movs	r1, r2
 800415c:	2390      	movs	r3, #144	; 0x90
 800415e:	001a      	movs	r2, r3
 8004160:	f004 fb5a 	bl	8008818 <memcpy>
 8004164:	466b      	mov	r3, sp
 8004166:	0018      	movs	r0, r3
 8004168:	0023      	movs	r3, r4
 800416a:	330c      	adds	r3, #12
 800416c:	2284      	movs	r2, #132	; 0x84
 800416e:	0019      	movs	r1, r3
 8004170:	f004 fb52 	bl	8008818 <memcpy>
 8004174:	6821      	ldr	r1, [r4, #0]
 8004176:	6862      	ldr	r2, [r4, #4]
 8004178:	68a3      	ldr	r3, [r4, #8]
 800417a:	2001      	movs	r0, #1
 800417c:	f7ff ff16 	bl	8003fac <sim800_AT_OK>
 8004180:	1e03      	subs	r3, r0, #0
 8004182:	d102      	bne.n	800418a <sim800_setup+0x82>
		return -1;
 8004184:	2301      	movs	r3, #1
 8004186:	425b      	negs	r3, r3
 8004188:	e07a      	b.n	8004280 <sim800_setup+0x178>
	}

	//going text mode
	sprintf(ATcommand,"AT+CMGF=1\r\n");
 800418a:	4a41      	ldr	r2, [pc, #260]	; (8004290 <sim800_setup+0x188>)
 800418c:	2428      	movs	r4, #40	; 0x28
 800418e:	193b      	adds	r3, r7, r4
 8004190:	0011      	movs	r1, r2
 8004192:	0018      	movs	r0, r3
 8004194:	f005 fad2 	bl	800973c <siprintf>
	if (debug_on){HAL_UART_Transmit(&huart2,(uint8_t *)ATcommand,strlen(ATcommand),1000);}
 8004198:	1dfb      	adds	r3, r7, #7
 800419a:	781b      	ldrb	r3, [r3, #0]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d00e      	beq.n	80041be <sim800_setup+0xb6>
 80041a0:	193b      	adds	r3, r7, r4
 80041a2:	0018      	movs	r0, r3
 80041a4:	f7fb ffb6 	bl	8000114 <strlen>
 80041a8:	0003      	movs	r3, r0
 80041aa:	b29a      	uxth	r2, r3
 80041ac:	23fa      	movs	r3, #250	; 0xfa
 80041ae:	009b      	lsls	r3, r3, #2
 80041b0:	1939      	adds	r1, r7, r4
 80041b2:	208c      	movs	r0, #140	; 0x8c
 80041b4:	2408      	movs	r4, #8
 80041b6:	1900      	adds	r0, r0, r4
 80041b8:	19c0      	adds	r0, r0, r7
 80041ba:	f003 f8ed 	bl	8007398 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart3,(uint8_t *)ATcommand,strlen(ATcommand),1000);
 80041be:	2428      	movs	r4, #40	; 0x28
 80041c0:	193b      	adds	r3, r7, r4
 80041c2:	0018      	movs	r0, r3
 80041c4:	f7fb ffa6 	bl	8000114 <strlen>
 80041c8:	0003      	movs	r3, r0
 80041ca:	b29a      	uxth	r2, r3
 80041cc:	23fa      	movs	r3, #250	; 0xfa
 80041ce:	009b      	lsls	r3, r3, #2
 80041d0:	1939      	adds	r1, r7, r4
 80041d2:	258e      	movs	r5, #142	; 0x8e
 80041d4:	006d      	lsls	r5, r5, #1
 80041d6:	2008      	movs	r0, #8
 80041d8:	182e      	adds	r6, r5, r0
 80041da:	19f0      	adds	r0, r6, r7
 80041dc:	f003 f8dc 	bl	8007398 <HAL_UART_Transmit>
	HAL_UART_Receive (&huart3, buffer, 256, 100);
 80041e0:	2380      	movs	r3, #128	; 0x80
 80041e2:	005a      	lsls	r2, r3, #1
 80041e4:	2608      	movs	r6, #8
 80041e6:	19b9      	adds	r1, r7, r6
 80041e8:	2308      	movs	r3, #8
 80041ea:	18e8      	adds	r0, r5, r3
 80041ec:	19c0      	adds	r0, r0, r7
 80041ee:	2364      	movs	r3, #100	; 0x64
 80041f0:	f003 f97e 	bl	80074f0 <HAL_UART_Receive>
	HAL_Delay(10);
 80041f4:	200a      	movs	r0, #10
 80041f6:	f000 fe5d 	bl	8004eb4 <HAL_Delay>
	memset(buffer,0,sizeof(buffer));
 80041fa:	19bb      	adds	r3, r7, r6
 80041fc:	221e      	movs	r2, #30
 80041fe:	2100      	movs	r1, #0
 8004200:	0018      	movs	r0, r3
 8004202:	f004 fb25 	bl	8008850 <memset>

	//save on sim card only
	sprintf(ATcommand,"AT+CPMS=\"SM\",\"SM\",\"SM\"\r\n");
 8004206:	4a23      	ldr	r2, [pc, #140]	; (8004294 <sim800_setup+0x18c>)
 8004208:	193b      	adds	r3, r7, r4
 800420a:	0011      	movs	r1, r2
 800420c:	0018      	movs	r0, r3
 800420e:	f005 fa95 	bl	800973c <siprintf>
	if (debug_on){HAL_UART_Transmit(&huart2,(uint8_t *)ATcommand,strlen(ATcommand),1000);}
 8004212:	1dfb      	adds	r3, r7, #7
 8004214:	781b      	ldrb	r3, [r3, #0]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d00e      	beq.n	8004238 <sim800_setup+0x130>
 800421a:	193b      	adds	r3, r7, r4
 800421c:	0018      	movs	r0, r3
 800421e:	f7fb ff79 	bl	8000114 <strlen>
 8004222:	0003      	movs	r3, r0
 8004224:	b29a      	uxth	r2, r3
 8004226:	23fa      	movs	r3, #250	; 0xfa
 8004228:	009b      	lsls	r3, r3, #2
 800422a:	1939      	adds	r1, r7, r4
 800422c:	208c      	movs	r0, #140	; 0x8c
 800422e:	2408      	movs	r4, #8
 8004230:	1900      	adds	r0, r0, r4
 8004232:	19c0      	adds	r0, r0, r7
 8004234:	f003 f8b0 	bl	8007398 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart3,(uint8_t *)ATcommand,strlen(ATcommand),1000);
 8004238:	2428      	movs	r4, #40	; 0x28
 800423a:	193b      	adds	r3, r7, r4
 800423c:	0018      	movs	r0, r3
 800423e:	f7fb ff69 	bl	8000114 <strlen>
 8004242:	0003      	movs	r3, r0
 8004244:	b29a      	uxth	r2, r3
 8004246:	23fa      	movs	r3, #250	; 0xfa
 8004248:	009b      	lsls	r3, r3, #2
 800424a:	1939      	adds	r1, r7, r4
 800424c:	248e      	movs	r4, #142	; 0x8e
 800424e:	0064      	lsls	r4, r4, #1
 8004250:	2608      	movs	r6, #8
 8004252:	19a0      	adds	r0, r4, r6
 8004254:	19c0      	adds	r0, r0, r7
 8004256:	f003 f89f 	bl	8007398 <HAL_UART_Transmit>
	HAL_UART_Receive (&huart3, buffer, 256, 100);
 800425a:	2380      	movs	r3, #128	; 0x80
 800425c:	005a      	lsls	r2, r3, #1
 800425e:	2508      	movs	r5, #8
 8004260:	1979      	adds	r1, r7, r5
 8004262:	19a3      	adds	r3, r4, r6
 8004264:	19d8      	adds	r0, r3, r7
 8004266:	2364      	movs	r3, #100	; 0x64
 8004268:	f003 f942 	bl	80074f0 <HAL_UART_Receive>
	HAL_Delay(10);
 800426c:	200a      	movs	r0, #10
 800426e:	f000 fe21 	bl	8004eb4 <HAL_Delay>
	memset(buffer,0,sizeof(buffer));
 8004272:	197b      	adds	r3, r7, r5
 8004274:	221e      	movs	r2, #30
 8004276:	2100      	movs	r1, #0
 8004278:	0018      	movs	r0, r3
 800427a:	f004 fae9 	bl	8008850 <memset>
	sprintf(ATcommand,"AT+CNMI=1,2,0,0,0\r\n");
	if (debug_on){HAL_UART_Transmit(&huart2,(uint8_t *)ATcommand,strlen(ATcommand),1000);}
	HAL_UART_Transmit(&huart3,(uint8_t *)ATcommand,strlen(ATcommand),1000);
	HAL_Delay(10);
	*/
	return 1;
 800427e:	2301      	movs	r3, #1
}
 8004280:	0018      	movs	r0, r3
 8004282:	46bd      	mov	sp, r7
 8004284:	b01f      	add	sp, #124	; 0x7c
 8004286:	bcf0      	pop	{r4, r5, r6, r7}
 8004288:	bc08      	pop	{r3}
 800428a:	b004      	add	sp, #16
 800428c:	4718      	bx	r3
 800428e:	46c0      	nop			; (mov r8, r8)
 8004290:	0800ddd4 	.word	0x0800ddd4
 8004294:	0800dde0 	.word	0x0800dde0

08004298 <sim800_send_sms>:

//
//IMPORTANT : remember to call MX_USART3_UART_Init() after calling this function.
int sim800_send_sms(char str_to_send[], uint8_t debug_on, UART_HandleTypeDef huart2, UART_HandleTypeDef huart3, char mobileNumber[]){
 8004298:	b082      	sub	sp, #8
 800429a:	b5b0      	push	{r4, r5, r7, lr}
 800429c:	b0e4      	sub	sp, #400	; 0x190
 800429e:	af46      	add	r7, sp, #280	; 0x118
 80042a0:	6078      	str	r0, [r7, #4]
 80042a2:	0008      	movs	r0, r1
 80042a4:	2488      	movs	r4, #136	; 0x88
 80042a6:	1939      	adds	r1, r7, r4
 80042a8:	600a      	str	r2, [r1, #0]
 80042aa:	604b      	str	r3, [r1, #4]
 80042ac:	1cfb      	adds	r3, r7, #3
 80042ae:	1c02      	adds	r2, r0, #0
 80042b0:	701a      	strb	r2, [r3, #0]

	char ATcommand[80];
	uint8_t buffer[30] = {0};
 80042b2:	2308      	movs	r3, #8
 80042b4:	18fb      	adds	r3, r7, r3
 80042b6:	2200      	movs	r2, #0
 80042b8:	601a      	str	r2, [r3, #0]
 80042ba:	3304      	adds	r3, #4
 80042bc:	221a      	movs	r2, #26
 80042be:	2100      	movs	r1, #0
 80042c0:	0018      	movs	r0, r3
 80042c2:	f004 fac5 	bl	8008850 <memset>

	if (!sim800_AT_OK(1, huart2, huart3)){
 80042c6:	0022      	movs	r2, r4
 80042c8:	18bc      	adds	r4, r7, r2
 80042ca:	2390      	movs	r3, #144	; 0x90
 80042cc:	189b      	adds	r3, r3, r2
 80042ce:	19da      	adds	r2, r3, r7
 80042d0:	2384      	movs	r3, #132	; 0x84
 80042d2:	446b      	add	r3, sp
 80042d4:	0018      	movs	r0, r3
 80042d6:	0011      	movs	r1, r2
 80042d8:	2390      	movs	r3, #144	; 0x90
 80042da:	001a      	movs	r2, r3
 80042dc:	f004 fa9c 	bl	8008818 <memcpy>
 80042e0:	466b      	mov	r3, sp
 80042e2:	0018      	movs	r0, r3
 80042e4:	0023      	movs	r3, r4
 80042e6:	330c      	adds	r3, #12
 80042e8:	2284      	movs	r2, #132	; 0x84
 80042ea:	0019      	movs	r1, r3
 80042ec:	f004 fa94 	bl	8008818 <memcpy>
 80042f0:	6821      	ldr	r1, [r4, #0]
 80042f2:	6862      	ldr	r2, [r4, #4]
 80042f4:	68a3      	ldr	r3, [r4, #8]
 80042f6:	2001      	movs	r0, #1
 80042f8:	f7ff fe58 	bl	8003fac <sim800_AT_OK>
 80042fc:	1e03      	subs	r3, r0, #0
 80042fe:	d102      	bne.n	8004306 <sim800_send_sms+0x6e>
		return -1;
 8004300:	2301      	movs	r3, #1
 8004302:	425b      	negs	r3, r3
 8004304:	e063      	b.n	80043ce <sim800_send_sms+0x136>
	}

	sprintf(ATcommand,"AT+CMGS=\"%s\"\r\n",mobileNumber);
 8004306:	23d4      	movs	r3, #212	; 0xd4
 8004308:	005b      	lsls	r3, r3, #1
 800430a:	18fb      	adds	r3, r7, r3
 800430c:	681a      	ldr	r2, [r3, #0]
 800430e:	4933      	ldr	r1, [pc, #204]	; (80043dc <sim800_send_sms+0x144>)
 8004310:	2428      	movs	r4, #40	; 0x28
 8004312:	193b      	adds	r3, r7, r4
 8004314:	0018      	movs	r0, r3
 8004316:	f005 fa11 	bl	800973c <siprintf>
	if (debug_on){HAL_UART_Transmit(&huart2,(uint8_t *)ATcommand,strlen(ATcommand),1000);}
 800431a:	1cfb      	adds	r3, r7, #3
 800431c:	781b      	ldrb	r3, [r3, #0]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d00c      	beq.n	800433c <sim800_send_sms+0xa4>
 8004322:	193b      	adds	r3, r7, r4
 8004324:	0018      	movs	r0, r3
 8004326:	f7fb fef5 	bl	8000114 <strlen>
 800432a:	0003      	movs	r3, r0
 800432c:	b29a      	uxth	r2, r3
 800432e:	23fa      	movs	r3, #250	; 0xfa
 8004330:	009b      	lsls	r3, r3, #2
 8004332:	1939      	adds	r1, r7, r4
 8004334:	2088      	movs	r0, #136	; 0x88
 8004336:	1838      	adds	r0, r7, r0
 8004338:	f003 f82e 	bl	8007398 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart3,(uint8_t *)ATcommand,strlen(ATcommand),1000);
 800433c:	2428      	movs	r4, #40	; 0x28
 800433e:	193b      	adds	r3, r7, r4
 8004340:	0018      	movs	r0, r3
 8004342:	f7fb fee7 	bl	8000114 <strlen>
 8004346:	0003      	movs	r3, r0
 8004348:	b29a      	uxth	r2, r3
 800434a:	23fa      	movs	r3, #250	; 0xfa
 800434c:	009b      	lsls	r3, r3, #2
 800434e:	1939      	adds	r1, r7, r4
 8004350:	208c      	movs	r0, #140	; 0x8c
 8004352:	0040      	lsls	r0, r0, #1
 8004354:	1838      	adds	r0, r7, r0
 8004356:	f003 f81f 	bl	8007398 <HAL_UART_Transmit>
	HAL_Delay(10);
 800435a:	200a      	movs	r0, #10
 800435c:	f000 fdaa 	bl	8004eb4 <HAL_Delay>

	sprintf(ATcommand,"%s%c",str_to_send,26);//,0x1a);
 8004360:	687a      	ldr	r2, [r7, #4]
 8004362:	491f      	ldr	r1, [pc, #124]	; (80043e0 <sim800_send_sms+0x148>)
 8004364:	1938      	adds	r0, r7, r4
 8004366:	231a      	movs	r3, #26
 8004368:	f005 f9e8 	bl	800973c <siprintf>
	if (debug_on){HAL_UART_Transmit(&huart2,(uint8_t *)ATcommand,strlen(ATcommand),1000);}
 800436c:	1cfb      	adds	r3, r7, #3
 800436e:	781b      	ldrb	r3, [r3, #0]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d00c      	beq.n	800438e <sim800_send_sms+0xf6>
 8004374:	193b      	adds	r3, r7, r4
 8004376:	0018      	movs	r0, r3
 8004378:	f7fb fecc 	bl	8000114 <strlen>
 800437c:	0003      	movs	r3, r0
 800437e:	b29a      	uxth	r2, r3
 8004380:	23fa      	movs	r3, #250	; 0xfa
 8004382:	009b      	lsls	r3, r3, #2
 8004384:	1939      	adds	r1, r7, r4
 8004386:	2088      	movs	r0, #136	; 0x88
 8004388:	1838      	adds	r0, r7, r0
 800438a:	f003 f805 	bl	8007398 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart3,(uint8_t *)ATcommand,strlen(ATcommand),1000);
 800438e:	2428      	movs	r4, #40	; 0x28
 8004390:	193b      	adds	r3, r7, r4
 8004392:	0018      	movs	r0, r3
 8004394:	f7fb febe 	bl	8000114 <strlen>
 8004398:	0003      	movs	r3, r0
 800439a:	b29a      	uxth	r2, r3
 800439c:	23fa      	movs	r3, #250	; 0xfa
 800439e:	009b      	lsls	r3, r3, #2
 80043a0:	1939      	adds	r1, r7, r4
 80043a2:	248c      	movs	r4, #140	; 0x8c
 80043a4:	0064      	lsls	r4, r4, #1
 80043a6:	1938      	adds	r0, r7, r4
 80043a8:	f002 fff6 	bl	8007398 <HAL_UART_Transmit>
	HAL_UART_Receive (&huart3, buffer, 30, 100);
 80043ac:	2508      	movs	r5, #8
 80043ae:	1979      	adds	r1, r7, r5
 80043b0:	1938      	adds	r0, r7, r4
 80043b2:	2364      	movs	r3, #100	; 0x64
 80043b4:	221e      	movs	r2, #30
 80043b6:	f003 f89b 	bl	80074f0 <HAL_UART_Receive>
	memset(buffer,0,sizeof(buffer));
 80043ba:	197b      	adds	r3, r7, r5
 80043bc:	221e      	movs	r2, #30
 80043be:	2100      	movs	r1, #0
 80043c0:	0018      	movs	r0, r3
 80043c2:	f004 fa45 	bl	8008850 <memset>
	HAL_Delay(10);
 80043c6:	200a      	movs	r0, #10
 80043c8:	f000 fd74 	bl	8004eb4 <HAL_Delay>
	/*
	//reset the UART, as per note 40
	HAL_Delay(3000);
	MX_USART3_UART_Init();
	*/
	return 1;
 80043cc:	2301      	movs	r3, #1
}
 80043ce:	0018      	movs	r0, r3
 80043d0:	46bd      	mov	sp, r7
 80043d2:	b01e      	add	sp, #120	; 0x78
 80043d4:	bcb0      	pop	{r4, r5, r7}
 80043d6:	bc08      	pop	{r3}
 80043d8:	b002      	add	sp, #8
 80043da:	4718      	bx	r3
 80043dc:	0800ddfc 	.word	0x0800ddfc
 80043e0:	0800de0c 	.word	0x0800de0c

080043e4 <sim800_read_sms>:

//IMPORTANT : remember to call MX_USART3_UART_Init() before calling this function.
int sim800_read_sms(char** str_to_read, uint8_t debug_on, UART_HandleTypeDef huart2, UART_HandleTypeDef huart3){
 80043e4:	b082      	sub	sp, #8
 80043e6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80043e8:	4c6b      	ldr	r4, [pc, #428]	; (8004598 <sim800_read_sms+0x1b4>)
 80043ea:	44a5      	add	sp, r4
 80043ec:	af46      	add	r7, sp, #280	; 0x118
 80043ee:	6078      	str	r0, [r7, #4]
 80043f0:	0008      	movs	r0, r1
 80043f2:	248d      	movs	r4, #141	; 0x8d
 80043f4:	00e4      	lsls	r4, r4, #3
 80043f6:	2508      	movs	r5, #8
 80043f8:	1961      	adds	r1, r4, r5
 80043fa:	19c9      	adds	r1, r1, r7
 80043fc:	600a      	str	r2, [r1, #0]
 80043fe:	604b      	str	r3, [r1, #4]
 8004400:	4b66      	ldr	r3, [pc, #408]	; (800459c <sim800_read_sms+0x1b8>)
 8004402:	218b      	movs	r1, #139	; 0x8b
 8004404:	00c9      	lsls	r1, r1, #3
 8004406:	185b      	adds	r3, r3, r1
 8004408:	19db      	adds	r3, r3, r7
 800440a:	1c02      	adds	r2, r0, #0
 800440c:	701a      	strb	r2, [r3, #0]
	HAL_Delay(3000);
	MX_USART3_UART_Init();
	*/

	char ATcommand[80];
	uint8_t buffer[1024] = {0};
 800440e:	4b64      	ldr	r3, [pc, #400]	; (80045a0 <sim800_read_sms+0x1bc>)
 8004410:	185b      	adds	r3, r3, r1
 8004412:	19db      	adds	r3, r3, r7
 8004414:	2200      	movs	r2, #0
 8004416:	601a      	str	r2, [r3, #0]
 8004418:	3304      	adds	r3, #4
 800441a:	22ff      	movs	r2, #255	; 0xff
 800441c:	0092      	lsls	r2, r2, #2
 800441e:	2100      	movs	r1, #0
 8004420:	0018      	movs	r0, r3
 8004422:	f004 fa15 	bl	8008850 <memset>

	if (!sim800_AT_OK(1, huart2, huart3)){
 8004426:	0022      	movs	r2, r4
 8004428:	1953      	adds	r3, r2, r5
 800442a:	19dc      	adds	r4, r3, r7
 800442c:	2390      	movs	r3, #144	; 0x90
 800442e:	189b      	adds	r3, r3, r2
 8004430:	197a      	adds	r2, r7, r5
 8004432:	189a      	adds	r2, r3, r2
 8004434:	2384      	movs	r3, #132	; 0x84
 8004436:	446b      	add	r3, sp
 8004438:	0018      	movs	r0, r3
 800443a:	0011      	movs	r1, r2
 800443c:	2390      	movs	r3, #144	; 0x90
 800443e:	001a      	movs	r2, r3
 8004440:	f004 f9ea 	bl	8008818 <memcpy>
 8004444:	466b      	mov	r3, sp
 8004446:	0018      	movs	r0, r3
 8004448:	0023      	movs	r3, r4
 800444a:	330c      	adds	r3, #12
 800444c:	2284      	movs	r2, #132	; 0x84
 800444e:	0019      	movs	r1, r3
 8004450:	f004 f9e2 	bl	8008818 <memcpy>
 8004454:	6821      	ldr	r1, [r4, #0]
 8004456:	6862      	ldr	r2, [r4, #4]
 8004458:	68a3      	ldr	r3, [r4, #8]
 800445a:	2001      	movs	r0, #1
 800445c:	f7ff fda6 	bl	8003fac <sim800_AT_OK>
 8004460:	1e03      	subs	r3, r0, #0
 8004462:	d102      	bne.n	800446a <sim800_read_sms+0x86>
		return -1;
 8004464:	2301      	movs	r3, #1
 8004466:	425b      	negs	r3, r3
 8004468:	e08e      	b.n	8004588 <sim800_read_sms+0x1a4>
	}

	//list all sms
	sprintf(ATcommand,"AT+CMGL=\"ALL\"\r\n");//REC UNREAD
 800446a:	4a4e      	ldr	r2, [pc, #312]	; (80045a4 <sim800_read_sms+0x1c0>)
 800446c:	2481      	movs	r4, #129	; 0x81
 800446e:	00e4      	lsls	r4, r4, #3
 8004470:	193b      	adds	r3, r7, r4
 8004472:	0011      	movs	r1, r2
 8004474:	0018      	movs	r0, r3
 8004476:	f005 f961 	bl	800973c <siprintf>
	if (debug_on){HAL_UART_Transmit(&huart2,(uint8_t *)ATcommand,strlen(ATcommand),1000);}
 800447a:	4b48      	ldr	r3, [pc, #288]	; (800459c <sim800_read_sms+0x1b8>)
 800447c:	228b      	movs	r2, #139	; 0x8b
 800447e:	00d2      	lsls	r2, r2, #3
 8004480:	189b      	adds	r3, r3, r2
 8004482:	19db      	adds	r3, r3, r7
 8004484:	781b      	ldrb	r3, [r3, #0]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d00f      	beq.n	80044aa <sim800_read_sms+0xc6>
 800448a:	193b      	adds	r3, r7, r4
 800448c:	0018      	movs	r0, r3
 800448e:	f7fb fe41 	bl	8000114 <strlen>
 8004492:	0003      	movs	r3, r0
 8004494:	b29a      	uxth	r2, r3
 8004496:	23fa      	movs	r3, #250	; 0xfa
 8004498:	009b      	lsls	r3, r3, #2
 800449a:	1939      	adds	r1, r7, r4
 800449c:	208d      	movs	r0, #141	; 0x8d
 800449e:	00c0      	lsls	r0, r0, #3
 80044a0:	2408      	movs	r4, #8
 80044a2:	1900      	adds	r0, r0, r4
 80044a4:	19c0      	adds	r0, r0, r7
 80044a6:	f002 ff77 	bl	8007398 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart3,(uint8_t *)ATcommand,strlen(ATcommand),100);
 80044aa:	2481      	movs	r4, #129	; 0x81
 80044ac:	00e4      	lsls	r4, r4, #3
 80044ae:	193b      	adds	r3, r7, r4
 80044b0:	0018      	movs	r0, r3
 80044b2:	f7fb fe2f 	bl	8000114 <strlen>
 80044b6:	0003      	movs	r3, r0
 80044b8:	b29a      	uxth	r2, r3
 80044ba:	1939      	adds	r1, r7, r4
 80044bc:	259f      	movs	r5, #159	; 0x9f
 80044be:	00ed      	lsls	r5, r5, #3
 80044c0:	2308      	movs	r3, #8
 80044c2:	18e8      	adds	r0, r5, r3
 80044c4:	19c0      	adds	r0, r0, r7
 80044c6:	2364      	movs	r3, #100	; 0x64
 80044c8:	f002 ff66 	bl	8007398 <HAL_UART_Transmit>
	HAL_UART_Receive (&huart3, buffer, 1024, 5000);
 80044cc:	4c36      	ldr	r4, [pc, #216]	; (80045a8 <sim800_read_sms+0x1c4>)
 80044ce:	2380      	movs	r3, #128	; 0x80
 80044d0:	00da      	lsls	r2, r3, #3
 80044d2:	2608      	movs	r6, #8
 80044d4:	19b9      	adds	r1, r7, r6
 80044d6:	2308      	movs	r3, #8
 80044d8:	18e8      	adds	r0, r5, r3
 80044da:	19c0      	adds	r0, r0, r7
 80044dc:	0023      	movs	r3, r4
 80044de:	f003 f807 	bl	80074f0 <HAL_UART_Receive>
	if (debug_on){HAL_UART_Transmit(&huart2, buffer, 1024, 1000);}
 80044e2:	4b2e      	ldr	r3, [pc, #184]	; (800459c <sim800_read_sms+0x1b8>)
 80044e4:	228b      	movs	r2, #139	; 0x8b
 80044e6:	00d2      	lsls	r2, r2, #3
 80044e8:	189b      	adds	r3, r3, r2
 80044ea:	19db      	adds	r3, r3, r7
 80044ec:	781b      	ldrb	r3, [r3, #0]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d00b      	beq.n	800450a <sim800_read_sms+0x126>
 80044f2:	23fa      	movs	r3, #250	; 0xfa
 80044f4:	009b      	lsls	r3, r3, #2
 80044f6:	2280      	movs	r2, #128	; 0x80
 80044f8:	00d2      	lsls	r2, r2, #3
 80044fa:	19b9      	adds	r1, r7, r6
 80044fc:	208d      	movs	r0, #141	; 0x8d
 80044fe:	00c0      	lsls	r0, r0, #3
 8004500:	2408      	movs	r4, #8
 8004502:	1900      	adds	r0, r0, r4
 8004504:	19c0      	adds	r0, r0, r7
 8004506:	f002 ff47 	bl	8007398 <HAL_UART_Transmit>

	HAL_Delay(1000);
 800450a:	23fa      	movs	r3, #250	; 0xfa
 800450c:	009b      	lsls	r3, r3, #2
 800450e:	0018      	movs	r0, r3
 8004510:	f000 fcd0 	bl	8004eb4 <HAL_Delay>

	//allocate memory to the pointer
	*str_to_read = malloc((6+1)*sizeof(char));
 8004514:	2007      	movs	r0, #7
 8004516:	f004 f975 	bl	8008804 <malloc>
 800451a:	0003      	movs	r3, r0
 800451c:	001a      	movs	r2, r3
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	601a      	str	r2, [r3, #0]
	//copy start of sms from buffer into the pointer
	strcpy(*str_to_read,strstr((char*)buffer, "\"\r\n"));
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681c      	ldr	r4, [r3, #0]
 8004526:	4a21      	ldr	r2, [pc, #132]	; (80045ac <sim800_read_sms+0x1c8>)
 8004528:	2508      	movs	r5, #8
 800452a:	197b      	adds	r3, r7, r5
 800452c:	0011      	movs	r1, r2
 800452e:	0018      	movs	r0, r3
 8004530:	f005 f9a2 	bl	8009878 <strstr>
 8004534:	0003      	movs	r3, r0
 8004536:	0019      	movs	r1, r3
 8004538:	0020      	movs	r0, r4
 800453a:	f005 f995 	bl	8009868 <strcpy>
	//reset buffer
	memset(buffer,0,sizeof(buffer));
 800453e:	2380      	movs	r3, #128	; 0x80
 8004540:	00da      	lsls	r2, r3, #3
 8004542:	197b      	adds	r3, r7, r5
 8004544:	2100      	movs	r1, #0
 8004546:	0018      	movs	r0, r3
 8004548:	f004 f982 	bl	8008850 <memset>
    //NOTE : https://koor.fr/C/cstring/memmove.wp
	//cut start of sms (remove the \"\r\n" characters)
    memmove(*str_to_read,(*str_to_read)+3,6);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6818      	ldr	r0, [r3, #0]
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	3303      	adds	r3, #3
 8004556:	2206      	movs	r2, #6
 8004558:	0019      	movs	r1, r3
 800455a:	f004 f966 	bl	800882a <memmove>

    if (debug_on){HAL_UART_Transmit(&huart2, (uint8_t*) *str_to_read, 6, 1000);}
 800455e:	4b0f      	ldr	r3, [pc, #60]	; (800459c <sim800_read_sms+0x1b8>)
 8004560:	228b      	movs	r2, #139	; 0x8b
 8004562:	00d2      	lsls	r2, r2, #3
 8004564:	189b      	adds	r3, r3, r2
 8004566:	19db      	adds	r3, r3, r7
 8004568:	781b      	ldrb	r3, [r3, #0]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d00b      	beq.n	8004586 <sim800_read_sms+0x1a2>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6819      	ldr	r1, [r3, #0]
 8004572:	23fa      	movs	r3, #250	; 0xfa
 8004574:	009b      	lsls	r3, r3, #2
 8004576:	228d      	movs	r2, #141	; 0x8d
 8004578:	00d2      	lsls	r2, r2, #3
 800457a:	2008      	movs	r0, #8
 800457c:	1812      	adds	r2, r2, r0
 800457e:	19d0      	adds	r0, r2, r7
 8004580:	2206      	movs	r2, #6
 8004582:	f002 ff09 	bl	8007398 <HAL_UART_Transmit>

	return 1;
 8004586:	2301      	movs	r3, #1
}
 8004588:	0018      	movs	r0, r3
 800458a:	46bd      	mov	sp, r7
 800458c:	4b08      	ldr	r3, [pc, #32]	; (80045b0 <sim800_read_sms+0x1cc>)
 800458e:	449d      	add	sp, r3
 8004590:	bcf0      	pop	{r4, r5, r6, r7}
 8004592:	bc08      	pop	{r3}
 8004594:	b002      	add	sp, #8
 8004596:	4718      	bx	r3
 8004598:	fffffa8c 	.word	0xfffffa8c
 800459c:	fffffbab 	.word	0xfffffbab
 80045a0:	fffffbb0 	.word	0xfffffbb0
 80045a4:	0800de14 	.word	0x0800de14
 80045a8:	00001388 	.word	0x00001388
 80045ac:	0800de24 	.word	0x0800de24
 80045b0:	0000045c 	.word	0x0000045c

080045b4 <sim800_delete_all_sms>:

int sim800_delete_all_sms(uint8_t debug_on, UART_HandleTypeDef huart2, UART_HandleTypeDef huart3){
 80045b4:	b084      	sub	sp, #16
 80045b6:	b5b0      	push	{r4, r5, r7, lr}
 80045b8:	b0e4      	sub	sp, #400	; 0x190
 80045ba:	af46      	add	r7, sp, #280	; 0x118
 80045bc:	0004      	movs	r4, r0
 80045be:	2004      	movs	r0, #4
 80045c0:	2588      	movs	r5, #136	; 0x88
 80045c2:	1940      	adds	r0, r0, r5
 80045c4:	19c0      	adds	r0, r0, r7
 80045c6:	6001      	str	r1, [r0, #0]
 80045c8:	6042      	str	r2, [r0, #4]
 80045ca:	6083      	str	r3, [r0, #8]
 80045cc:	1dfb      	adds	r3, r7, #7
 80045ce:	1c22      	adds	r2, r4, #0
 80045d0:	701a      	strb	r2, [r3, #0]

	char ATcommand[80];
	uint8_t buffer[30] = {0};
 80045d2:	2308      	movs	r3, #8
 80045d4:	18fb      	adds	r3, r7, r3
 80045d6:	2200      	movs	r2, #0
 80045d8:	601a      	str	r2, [r3, #0]
 80045da:	3304      	adds	r3, #4
 80045dc:	221a      	movs	r2, #26
 80045de:	2100      	movs	r1, #0
 80045e0:	0018      	movs	r0, r3
 80045e2:	f004 f935 	bl	8008850 <memset>

	if (!sim800_AT_OK(1, huart2, huart3)){
 80045e6:	2304      	movs	r3, #4
 80045e8:	195b      	adds	r3, r3, r5
 80045ea:	19dc      	adds	r4, r3, r7
 80045ec:	2394      	movs	r3, #148	; 0x94
 80045ee:	195b      	adds	r3, r3, r5
 80045f0:	19da      	adds	r2, r3, r7
 80045f2:	2384      	movs	r3, #132	; 0x84
 80045f4:	446b      	add	r3, sp
 80045f6:	0018      	movs	r0, r3
 80045f8:	0011      	movs	r1, r2
 80045fa:	2390      	movs	r3, #144	; 0x90
 80045fc:	001a      	movs	r2, r3
 80045fe:	f004 f90b 	bl	8008818 <memcpy>
 8004602:	466b      	mov	r3, sp
 8004604:	0018      	movs	r0, r3
 8004606:	0023      	movs	r3, r4
 8004608:	330c      	adds	r3, #12
 800460a:	2284      	movs	r2, #132	; 0x84
 800460c:	0019      	movs	r1, r3
 800460e:	f004 f903 	bl	8008818 <memcpy>
 8004612:	6821      	ldr	r1, [r4, #0]
 8004614:	6862      	ldr	r2, [r4, #4]
 8004616:	68a3      	ldr	r3, [r4, #8]
 8004618:	2001      	movs	r0, #1
 800461a:	f7ff fcc7 	bl	8003fac <sim800_AT_OK>
 800461e:	1e03      	subs	r3, r0, #0
 8004620:	d102      	bne.n	8004628 <sim800_delete_all_sms+0x74>
		return -1;
 8004622:	2301      	movs	r3, #1
 8004624:	425b      	negs	r3, r3
 8004626:	e046      	b.n	80046b6 <sim800_delete_all_sms+0x102>
	}

	//list all sms
	sprintf(ATcommand,"AT+CMGDA=\"DEL ALL\"\r\n");
 8004628:	4a26      	ldr	r2, [pc, #152]	; (80046c4 <sim800_delete_all_sms+0x110>)
 800462a:	2428      	movs	r4, #40	; 0x28
 800462c:	193b      	adds	r3, r7, r4
 800462e:	0011      	movs	r1, r2
 8004630:	0018      	movs	r0, r3
 8004632:	f005 f883 	bl	800973c <siprintf>
	if (debug_on){HAL_UART_Transmit(&huart2,(uint8_t *)ATcommand,strlen(ATcommand),1000);}
 8004636:	1dfb      	adds	r3, r7, #7
 8004638:	781b      	ldrb	r3, [r3, #0]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d00c      	beq.n	8004658 <sim800_delete_all_sms+0xa4>
 800463e:	193b      	adds	r3, r7, r4
 8004640:	0018      	movs	r0, r3
 8004642:	f7fb fd67 	bl	8000114 <strlen>
 8004646:	0003      	movs	r3, r0
 8004648:	b29a      	uxth	r2, r3
 800464a:	23fa      	movs	r3, #250	; 0xfa
 800464c:	009b      	lsls	r3, r3, #2
 800464e:	1939      	adds	r1, r7, r4
 8004650:	208c      	movs	r0, #140	; 0x8c
 8004652:	1838      	adds	r0, r7, r0
 8004654:	f002 fea0 	bl	8007398 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart3,(uint8_t *)ATcommand,strlen(ATcommand),1000);
 8004658:	2428      	movs	r4, #40	; 0x28
 800465a:	193b      	adds	r3, r7, r4
 800465c:	0018      	movs	r0, r3
 800465e:	f7fb fd59 	bl	8000114 <strlen>
 8004662:	0003      	movs	r3, r0
 8004664:	b29a      	uxth	r2, r3
 8004666:	23fa      	movs	r3, #250	; 0xfa
 8004668:	009b      	lsls	r3, r3, #2
 800466a:	1939      	adds	r1, r7, r4
 800466c:	248e      	movs	r4, #142	; 0x8e
 800466e:	0064      	lsls	r4, r4, #1
 8004670:	1938      	adds	r0, r7, r4
 8004672:	f002 fe91 	bl	8007398 <HAL_UART_Transmit>
	//sim800 does not always answer to the command (deletes memory with no ack)

	//TODO : use interrupts & avoid waiting for 25 seconds here
	HAL_UART_Receive (&huart3, buffer, 30, 25000);
 8004676:	4b14      	ldr	r3, [pc, #80]	; (80046c8 <sim800_delete_all_sms+0x114>)
 8004678:	2508      	movs	r5, #8
 800467a:	1979      	adds	r1, r7, r5
 800467c:	1938      	adds	r0, r7, r4
 800467e:	221e      	movs	r2, #30
 8004680:	f002 ff36 	bl	80074f0 <HAL_UART_Receive>
	//use interrupts to receives this command
	//HAL_UART_Receive_IT(&huart3, buffer, 30);
	if (debug_on){HAL_UART_Transmit(&huart2, buffer, 30, 1000);}
 8004684:	1dfb      	adds	r3, r7, #7
 8004686:	781b      	ldrb	r3, [r3, #0]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d007      	beq.n	800469c <sim800_delete_all_sms+0xe8>
 800468c:	23fa      	movs	r3, #250	; 0xfa
 800468e:	009b      	lsls	r3, r3, #2
 8004690:	1979      	adds	r1, r7, r5
 8004692:	228c      	movs	r2, #140	; 0x8c
 8004694:	18b8      	adds	r0, r7, r2
 8004696:	221e      	movs	r2, #30
 8004698:	f002 fe7e 	bl	8007398 <HAL_UART_Transmit>

	HAL_Delay(1000);
 800469c:	23fa      	movs	r3, #250	; 0xfa
 800469e:	009b      	lsls	r3, r3, #2
 80046a0:	0018      	movs	r0, r3
 80046a2:	f000 fc07 	bl	8004eb4 <HAL_Delay>
	memset(buffer,0,sizeof(buffer));
 80046a6:	2308      	movs	r3, #8
 80046a8:	18fb      	adds	r3, r7, r3
 80046aa:	221e      	movs	r2, #30
 80046ac:	2100      	movs	r1, #0
 80046ae:	0018      	movs	r0, r3
 80046b0:	f004 f8ce 	bl	8008850 <memset>

	return 1;
 80046b4:	2301      	movs	r3, #1
}
 80046b6:	0018      	movs	r0, r3
 80046b8:	46bd      	mov	sp, r7
 80046ba:	b01e      	add	sp, #120	; 0x78
 80046bc:	bcb0      	pop	{r4, r5, r7}
 80046be:	bc08      	pop	{r3}
 80046c0:	b004      	add	sp, #16
 80046c2:	4718      	bx	r3
 80046c4:	0800de28 	.word	0x0800de28
 80046c8:	000061a8 	.word	0x000061a8

080046cc <sim800_originate_call>:

int sim800_originate_call(uint8_t debug_on, UART_HandleTypeDef huart2, UART_HandleTypeDef huart3, char mobileNumber[]){
 80046cc:	b084      	sub	sp, #16
 80046ce:	b5b0      	push	{r4, r5, r7, lr}
 80046d0:	b0dc      	sub	sp, #368	; 0x170
 80046d2:	af46      	add	r7, sp, #280	; 0x118
 80046d4:	0004      	movs	r4, r0
 80046d6:	2004      	movs	r0, #4
 80046d8:	2568      	movs	r5, #104	; 0x68
 80046da:	1940      	adds	r0, r0, r5
 80046dc:	19c0      	adds	r0, r0, r7
 80046de:	6001      	str	r1, [r0, #0]
 80046e0:	6042      	str	r2, [r0, #4]
 80046e2:	6083      	str	r3, [r0, #8]
 80046e4:	1dfb      	adds	r3, r7, #7
 80046e6:	1c22      	adds	r2, r4, #0
 80046e8:	701a      	strb	r2, [r3, #0]

	char ATcommand[80];

	if (!sim800_AT_OK(1, huart2, huart3)){
 80046ea:	2304      	movs	r3, #4
 80046ec:	195b      	adds	r3, r3, r5
 80046ee:	19dc      	adds	r4, r3, r7
 80046f0:	2394      	movs	r3, #148	; 0x94
 80046f2:	195b      	adds	r3, r3, r5
 80046f4:	19da      	adds	r2, r3, r7
 80046f6:	2384      	movs	r3, #132	; 0x84
 80046f8:	446b      	add	r3, sp
 80046fa:	0018      	movs	r0, r3
 80046fc:	0011      	movs	r1, r2
 80046fe:	2390      	movs	r3, #144	; 0x90
 8004700:	001a      	movs	r2, r3
 8004702:	f004 f889 	bl	8008818 <memcpy>
 8004706:	466b      	mov	r3, sp
 8004708:	0018      	movs	r0, r3
 800470a:	0023      	movs	r3, r4
 800470c:	330c      	adds	r3, #12
 800470e:	2284      	movs	r2, #132	; 0x84
 8004710:	0019      	movs	r1, r3
 8004712:	f004 f881 	bl	8008818 <memcpy>
 8004716:	6821      	ldr	r1, [r4, #0]
 8004718:	6862      	ldr	r2, [r4, #4]
 800471a:	68a3      	ldr	r3, [r4, #8]
 800471c:	2001      	movs	r0, #1
 800471e:	f7ff fc45 	bl	8003fac <sim800_AT_OK>
 8004722:	1e03      	subs	r3, r0, #0
 8004724:	d102      	bne.n	800472c <sim800_originate_call+0x60>
		return -1;
 8004726:	2301      	movs	r3, #1
 8004728:	425b      	negs	r3, r3
 800472a:	e055      	b.n	80047d8 <sim800_originate_call+0x10c>
	}

	sprintf(ATcommand,"ATD%s;\r\n",mobileNumber);
 800472c:	23c6      	movs	r3, #198	; 0xc6
 800472e:	005b      	lsls	r3, r3, #1
 8004730:	18fb      	adds	r3, r7, r3
 8004732:	681a      	ldr	r2, [r3, #0]
 8004734:	492c      	ldr	r1, [pc, #176]	; (80047e8 <sim800_originate_call+0x11c>)
 8004736:	2408      	movs	r4, #8
 8004738:	193b      	adds	r3, r7, r4
 800473a:	0018      	movs	r0, r3
 800473c:	f004 fffe 	bl	800973c <siprintf>
	if (debug_on){HAL_UART_Transmit(&huart2,(uint8_t *)ATcommand,strlen(ATcommand),1000);}
 8004740:	1dfb      	adds	r3, r7, #7
 8004742:	781b      	ldrb	r3, [r3, #0]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d00c      	beq.n	8004762 <sim800_originate_call+0x96>
 8004748:	193b      	adds	r3, r7, r4
 800474a:	0018      	movs	r0, r3
 800474c:	f7fb fce2 	bl	8000114 <strlen>
 8004750:	0003      	movs	r3, r0
 8004752:	b29a      	uxth	r2, r3
 8004754:	23fa      	movs	r3, #250	; 0xfa
 8004756:	009b      	lsls	r3, r3, #2
 8004758:	1939      	adds	r1, r7, r4
 800475a:	206c      	movs	r0, #108	; 0x6c
 800475c:	1838      	adds	r0, r7, r0
 800475e:	f002 fe1b 	bl	8007398 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart3,(uint8_t *)ATcommand,strlen(ATcommand),1000);
 8004762:	2408      	movs	r4, #8
 8004764:	193b      	adds	r3, r7, r4
 8004766:	0018      	movs	r0, r3
 8004768:	f7fb fcd4 	bl	8000114 <strlen>
 800476c:	0003      	movs	r3, r0
 800476e:	b29a      	uxth	r2, r3
 8004770:	23fa      	movs	r3, #250	; 0xfa
 8004772:	009b      	lsls	r3, r3, #2
 8004774:	1939      	adds	r1, r7, r4
 8004776:	20fc      	movs	r0, #252	; 0xfc
 8004778:	1838      	adds	r0, r7, r0
 800477a:	f002 fe0d 	bl	8007398 <HAL_UART_Transmit>
	HAL_Delay(20000);
 800477e:	4b1b      	ldr	r3, [pc, #108]	; (80047ec <sim800_originate_call+0x120>)
 8004780:	0018      	movs	r0, r3
 8004782:	f000 fb97 	bl	8004eb4 <HAL_Delay>

	sprintf(ATcommand,"ATH\r\n");
 8004786:	4a1a      	ldr	r2, [pc, #104]	; (80047f0 <sim800_originate_call+0x124>)
 8004788:	193b      	adds	r3, r7, r4
 800478a:	0011      	movs	r1, r2
 800478c:	0018      	movs	r0, r3
 800478e:	f004 ffd5 	bl	800973c <siprintf>
	if (debug_on){HAL_UART_Transmit(&huart2,(uint8_t *)ATcommand,strlen(ATcommand),1000);}
 8004792:	1dfb      	adds	r3, r7, #7
 8004794:	781b      	ldrb	r3, [r3, #0]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d00c      	beq.n	80047b4 <sim800_originate_call+0xe8>
 800479a:	193b      	adds	r3, r7, r4
 800479c:	0018      	movs	r0, r3
 800479e:	f7fb fcb9 	bl	8000114 <strlen>
 80047a2:	0003      	movs	r3, r0
 80047a4:	b29a      	uxth	r2, r3
 80047a6:	23fa      	movs	r3, #250	; 0xfa
 80047a8:	009b      	lsls	r3, r3, #2
 80047aa:	1939      	adds	r1, r7, r4
 80047ac:	206c      	movs	r0, #108	; 0x6c
 80047ae:	1838      	adds	r0, r7, r0
 80047b0:	f002 fdf2 	bl	8007398 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart3,(uint8_t *)ATcommand,strlen(ATcommand),1000);
 80047b4:	2408      	movs	r4, #8
 80047b6:	193b      	adds	r3, r7, r4
 80047b8:	0018      	movs	r0, r3
 80047ba:	f7fb fcab 	bl	8000114 <strlen>
 80047be:	0003      	movs	r3, r0
 80047c0:	b29a      	uxth	r2, r3
 80047c2:	23fa      	movs	r3, #250	; 0xfa
 80047c4:	009b      	lsls	r3, r3, #2
 80047c6:	1939      	adds	r1, r7, r4
 80047c8:	20fc      	movs	r0, #252	; 0xfc
 80047ca:	1838      	adds	r0, r7, r0
 80047cc:	f002 fde4 	bl	8007398 <HAL_UART_Transmit>
	HAL_Delay(10);
 80047d0:	200a      	movs	r0, #10
 80047d2:	f000 fb6f 	bl	8004eb4 <HAL_Delay>

	return 1;
 80047d6:	2301      	movs	r3, #1
}
 80047d8:	0018      	movs	r0, r3
 80047da:	46bd      	mov	sp, r7
 80047dc:	b016      	add	sp, #88	; 0x58
 80047de:	bcb0      	pop	{r4, r5, r7}
 80047e0:	bc08      	pop	{r3}
 80047e2:	b004      	add	sp, #16
 80047e4:	4718      	bx	r3
 80047e6:	46c0      	nop			; (mov r8, r8)
 80047e8:	0800de40 	.word	0x0800de40
 80047ec:	00004e20 	.word	0x00004e20
 80047f0:	0800de4c 	.word	0x0800de4c

080047f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b082      	sub	sp, #8
 80047f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80047fa:	4b11      	ldr	r3, [pc, #68]	; (8004840 <HAL_MspInit+0x4c>)
 80047fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80047fe:	4b10      	ldr	r3, [pc, #64]	; (8004840 <HAL_MspInit+0x4c>)
 8004800:	2101      	movs	r1, #1
 8004802:	430a      	orrs	r2, r1
 8004804:	641a      	str	r2, [r3, #64]	; 0x40
 8004806:	4b0e      	ldr	r3, [pc, #56]	; (8004840 <HAL_MspInit+0x4c>)
 8004808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800480a:	2201      	movs	r2, #1
 800480c:	4013      	ands	r3, r2
 800480e:	607b      	str	r3, [r7, #4]
 8004810:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004812:	4b0b      	ldr	r3, [pc, #44]	; (8004840 <HAL_MspInit+0x4c>)
 8004814:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004816:	4b0a      	ldr	r3, [pc, #40]	; (8004840 <HAL_MspInit+0x4c>)
 8004818:	2180      	movs	r1, #128	; 0x80
 800481a:	0549      	lsls	r1, r1, #21
 800481c:	430a      	orrs	r2, r1
 800481e:	63da      	str	r2, [r3, #60]	; 0x3c
 8004820:	4b07      	ldr	r3, [pc, #28]	; (8004840 <HAL_MspInit+0x4c>)
 8004822:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004824:	2380      	movs	r3, #128	; 0x80
 8004826:	055b      	lsls	r3, r3, #21
 8004828:	4013      	ands	r3, r2
 800482a:	603b      	str	r3, [r7, #0]
 800482c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 800482e:	23c0      	movs	r3, #192	; 0xc0
 8004830:	00db      	lsls	r3, r3, #3
 8004832:	0018      	movs	r0, r3
 8004834:	f000 fb7e 	bl	8004f34 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004838:	46c0      	nop			; (mov r8, r8)
 800483a:	46bd      	mov	sp, r7
 800483c:	b002      	add	sp, #8
 800483e:	bd80      	pop	{r7, pc}
 8004840:	40021000 	.word	0x40021000

08004844 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004844:	b590      	push	{r4, r7, lr}
 8004846:	b091      	sub	sp, #68	; 0x44
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800484c:	232c      	movs	r3, #44	; 0x2c
 800484e:	18fb      	adds	r3, r7, r3
 8004850:	0018      	movs	r0, r3
 8004852:	2314      	movs	r3, #20
 8004854:	001a      	movs	r2, r3
 8004856:	2100      	movs	r1, #0
 8004858:	f003 fffa 	bl	8008850 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800485c:	2410      	movs	r4, #16
 800485e:	193b      	adds	r3, r7, r4
 8004860:	0018      	movs	r0, r3
 8004862:	231c      	movs	r3, #28
 8004864:	001a      	movs	r2, r3
 8004866:	2100      	movs	r1, #0
 8004868:	f003 fff2 	bl	8008850 <memset>
  if(hi2c->Instance==I2C1)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a22      	ldr	r2, [pc, #136]	; (80048fc <HAL_I2C_MspInit+0xb8>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d13e      	bne.n	80048f4 <HAL_I2C_MspInit+0xb0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8004876:	193b      	adds	r3, r7, r4
 8004878:	2220      	movs	r2, #32
 800487a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800487c:	193b      	adds	r3, r7, r4
 800487e:	2200      	movs	r2, #0
 8004880:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004882:	193b      	adds	r3, r7, r4
 8004884:	0018      	movs	r0, r3
 8004886:	f002 fbfd 	bl	8007084 <HAL_RCCEx_PeriphCLKConfig>
 800488a:	1e03      	subs	r3, r0, #0
 800488c:	d001      	beq.n	8004892 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800488e:	f7ff f87b 	bl	8003988 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004892:	4b1b      	ldr	r3, [pc, #108]	; (8004900 <HAL_I2C_MspInit+0xbc>)
 8004894:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004896:	4b1a      	ldr	r3, [pc, #104]	; (8004900 <HAL_I2C_MspInit+0xbc>)
 8004898:	2102      	movs	r1, #2
 800489a:	430a      	orrs	r2, r1
 800489c:	635a      	str	r2, [r3, #52]	; 0x34
 800489e:	4b18      	ldr	r3, [pc, #96]	; (8004900 <HAL_I2C_MspInit+0xbc>)
 80048a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048a2:	2202      	movs	r2, #2
 80048a4:	4013      	ands	r3, r2
 80048a6:	60fb      	str	r3, [r7, #12]
 80048a8:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80048aa:	212c      	movs	r1, #44	; 0x2c
 80048ac:	187b      	adds	r3, r7, r1
 80048ae:	22c0      	movs	r2, #192	; 0xc0
 80048b0:	0092      	lsls	r2, r2, #2
 80048b2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80048b4:	187b      	adds	r3, r7, r1
 80048b6:	2212      	movs	r2, #18
 80048b8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048ba:	187b      	adds	r3, r7, r1
 80048bc:	2200      	movs	r2, #0
 80048be:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80048c0:	187b      	adds	r3, r7, r1
 80048c2:	2200      	movs	r2, #0
 80048c4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 80048c6:	187b      	adds	r3, r7, r1
 80048c8:	2206      	movs	r2, #6
 80048ca:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80048cc:	187b      	adds	r3, r7, r1
 80048ce:	4a0d      	ldr	r2, [pc, #52]	; (8004904 <HAL_I2C_MspInit+0xc0>)
 80048d0:	0019      	movs	r1, r3
 80048d2:	0010      	movs	r0, r2
 80048d4:	f000 fe74 	bl	80055c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80048d8:	4b09      	ldr	r3, [pc, #36]	; (8004900 <HAL_I2C_MspInit+0xbc>)
 80048da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80048dc:	4b08      	ldr	r3, [pc, #32]	; (8004900 <HAL_I2C_MspInit+0xbc>)
 80048de:	2180      	movs	r1, #128	; 0x80
 80048e0:	0389      	lsls	r1, r1, #14
 80048e2:	430a      	orrs	r2, r1
 80048e4:	63da      	str	r2, [r3, #60]	; 0x3c
 80048e6:	4b06      	ldr	r3, [pc, #24]	; (8004900 <HAL_I2C_MspInit+0xbc>)
 80048e8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80048ea:	2380      	movs	r3, #128	; 0x80
 80048ec:	039b      	lsls	r3, r3, #14
 80048ee:	4013      	ands	r3, r2
 80048f0:	60bb      	str	r3, [r7, #8]
 80048f2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80048f4:	46c0      	nop			; (mov r8, r8)
 80048f6:	46bd      	mov	sp, r7
 80048f8:	b011      	add	sp, #68	; 0x44
 80048fa:	bd90      	pop	{r4, r7, pc}
 80048fc:	40005400 	.word	0x40005400
 8004900:	40021000 	.word	0x40021000
 8004904:	50000400 	.word	0x50000400

08004908 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004908:	b590      	push	{r4, r7, lr}
 800490a:	b097      	sub	sp, #92	; 0x5c
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004910:	2344      	movs	r3, #68	; 0x44
 8004912:	18fb      	adds	r3, r7, r3
 8004914:	0018      	movs	r0, r3
 8004916:	2314      	movs	r3, #20
 8004918:	001a      	movs	r2, r3
 800491a:	2100      	movs	r1, #0
 800491c:	f003 ff98 	bl	8008850 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004920:	2428      	movs	r4, #40	; 0x28
 8004922:	193b      	adds	r3, r7, r4
 8004924:	0018      	movs	r0, r3
 8004926:	231c      	movs	r3, #28
 8004928:	001a      	movs	r2, r3
 800492a:	2100      	movs	r1, #0
 800492c:	f003 ff90 	bl	8008850 <memset>
  if(huart->Instance==USART1)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4a86      	ldr	r2, [pc, #536]	; (8004b50 <HAL_UART_MspInit+0x248>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d167      	bne.n	8004a0a <HAL_UART_MspInit+0x102>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800493a:	193b      	adds	r3, r7, r4
 800493c:	2201      	movs	r2, #1
 800493e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8004940:	193b      	adds	r3, r7, r4
 8004942:	2200      	movs	r2, #0
 8004944:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004946:	193b      	adds	r3, r7, r4
 8004948:	0018      	movs	r0, r3
 800494a:	f002 fb9b 	bl	8007084 <HAL_RCCEx_PeriphCLKConfig>
 800494e:	1e03      	subs	r3, r0, #0
 8004950:	d001      	beq.n	8004956 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8004952:	f7ff f819 	bl	8003988 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004956:	4b7f      	ldr	r3, [pc, #508]	; (8004b54 <HAL_UART_MspInit+0x24c>)
 8004958:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800495a:	4b7e      	ldr	r3, [pc, #504]	; (8004b54 <HAL_UART_MspInit+0x24c>)
 800495c:	2180      	movs	r1, #128	; 0x80
 800495e:	01c9      	lsls	r1, r1, #7
 8004960:	430a      	orrs	r2, r1
 8004962:	641a      	str	r2, [r3, #64]	; 0x40
 8004964:	4b7b      	ldr	r3, [pc, #492]	; (8004b54 <HAL_UART_MspInit+0x24c>)
 8004966:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004968:	2380      	movs	r3, #128	; 0x80
 800496a:	01db      	lsls	r3, r3, #7
 800496c:	4013      	ands	r3, r2
 800496e:	627b      	str	r3, [r7, #36]	; 0x24
 8004970:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004972:	4b78      	ldr	r3, [pc, #480]	; (8004b54 <HAL_UART_MspInit+0x24c>)
 8004974:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004976:	4b77      	ldr	r3, [pc, #476]	; (8004b54 <HAL_UART_MspInit+0x24c>)
 8004978:	2104      	movs	r1, #4
 800497a:	430a      	orrs	r2, r1
 800497c:	635a      	str	r2, [r3, #52]	; 0x34
 800497e:	4b75      	ldr	r3, [pc, #468]	; (8004b54 <HAL_UART_MspInit+0x24c>)
 8004980:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004982:	2204      	movs	r2, #4
 8004984:	4013      	ands	r3, r2
 8004986:	623b      	str	r3, [r7, #32]
 8004988:	6a3b      	ldr	r3, [r7, #32]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800498a:	2144      	movs	r1, #68	; 0x44
 800498c:	187b      	adds	r3, r7, r1
 800498e:	2230      	movs	r2, #48	; 0x30
 8004990:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004992:	187b      	adds	r3, r7, r1
 8004994:	2202      	movs	r2, #2
 8004996:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004998:	187b      	adds	r3, r7, r1
 800499a:	2200      	movs	r2, #0
 800499c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800499e:	187b      	adds	r3, r7, r1
 80049a0:	2200      	movs	r2, #0
 80049a2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80049a4:	187b      	adds	r3, r7, r1
 80049a6:	2201      	movs	r2, #1
 80049a8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80049aa:	187b      	adds	r3, r7, r1
 80049ac:	4a6a      	ldr	r2, [pc, #424]	; (8004b58 <HAL_UART_MspInit+0x250>)
 80049ae:	0019      	movs	r1, r3
 80049b0:	0010      	movs	r0, r2
 80049b2:	f000 fe05 	bl	80055c0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 80049b6:	4b69      	ldr	r3, [pc, #420]	; (8004b5c <HAL_UART_MspInit+0x254>)
 80049b8:	4a69      	ldr	r2, [pc, #420]	; (8004b60 <HAL_UART_MspInit+0x258>)
 80049ba:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 80049bc:	4b67      	ldr	r3, [pc, #412]	; (8004b5c <HAL_UART_MspInit+0x254>)
 80049be:	2232      	movs	r2, #50	; 0x32
 80049c0:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80049c2:	4b66      	ldr	r3, [pc, #408]	; (8004b5c <HAL_UART_MspInit+0x254>)
 80049c4:	2200      	movs	r2, #0
 80049c6:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80049c8:	4b64      	ldr	r3, [pc, #400]	; (8004b5c <HAL_UART_MspInit+0x254>)
 80049ca:	2200      	movs	r2, #0
 80049cc:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80049ce:	4b63      	ldr	r3, [pc, #396]	; (8004b5c <HAL_UART_MspInit+0x254>)
 80049d0:	2280      	movs	r2, #128	; 0x80
 80049d2:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80049d4:	4b61      	ldr	r3, [pc, #388]	; (8004b5c <HAL_UART_MspInit+0x254>)
 80049d6:	2200      	movs	r2, #0
 80049d8:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80049da:	4b60      	ldr	r3, [pc, #384]	; (8004b5c <HAL_UART_MspInit+0x254>)
 80049dc:	2200      	movs	r2, #0
 80049de:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80049e0:	4b5e      	ldr	r3, [pc, #376]	; (8004b5c <HAL_UART_MspInit+0x254>)
 80049e2:	2220      	movs	r2, #32
 80049e4:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80049e6:	4b5d      	ldr	r3, [pc, #372]	; (8004b5c <HAL_UART_MspInit+0x254>)
 80049e8:	2200      	movs	r2, #0
 80049ea:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80049ec:	4b5b      	ldr	r3, [pc, #364]	; (8004b5c <HAL_UART_MspInit+0x254>)
 80049ee:	0018      	movs	r0, r3
 80049f0:	f000 fb94 	bl	800511c <HAL_DMA_Init>
 80049f4:	1e03      	subs	r3, r0, #0
 80049f6:	d001      	beq.n	80049fc <HAL_UART_MspInit+0xf4>
    {
      Error_Handler();
 80049f8:	f7fe ffc6 	bl	8003988 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	4a57      	ldr	r2, [pc, #348]	; (8004b5c <HAL_UART_MspInit+0x254>)
 8004a00:	67da      	str	r2, [r3, #124]	; 0x7c
 8004a02:	4b56      	ldr	r3, [pc, #344]	; (8004b5c <HAL_UART_MspInit+0x254>)
 8004a04:	687a      	ldr	r2, [r7, #4]
 8004a06:	629a      	str	r2, [r3, #40]	; 0x28
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8004a08:	e09e      	b.n	8004b48 <HAL_UART_MspInit+0x240>
  else if(huart->Instance==USART2)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4a55      	ldr	r2, [pc, #340]	; (8004b64 <HAL_UART_MspInit+0x25c>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d140      	bne.n	8004a96 <HAL_UART_MspInit+0x18e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8004a14:	2128      	movs	r1, #40	; 0x28
 8004a16:	187b      	adds	r3, r7, r1
 8004a18:	2202      	movs	r2, #2
 8004a1a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8004a1c:	187b      	adds	r3, r7, r1
 8004a1e:	2200      	movs	r2, #0
 8004a20:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004a22:	187b      	adds	r3, r7, r1
 8004a24:	0018      	movs	r0, r3
 8004a26:	f002 fb2d 	bl	8007084 <HAL_RCCEx_PeriphCLKConfig>
 8004a2a:	1e03      	subs	r3, r0, #0
 8004a2c:	d001      	beq.n	8004a32 <HAL_UART_MspInit+0x12a>
      Error_Handler();
 8004a2e:	f7fe ffab 	bl	8003988 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8004a32:	4b48      	ldr	r3, [pc, #288]	; (8004b54 <HAL_UART_MspInit+0x24c>)
 8004a34:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a36:	4b47      	ldr	r3, [pc, #284]	; (8004b54 <HAL_UART_MspInit+0x24c>)
 8004a38:	2180      	movs	r1, #128	; 0x80
 8004a3a:	0289      	lsls	r1, r1, #10
 8004a3c:	430a      	orrs	r2, r1
 8004a3e:	63da      	str	r2, [r3, #60]	; 0x3c
 8004a40:	4b44      	ldr	r3, [pc, #272]	; (8004b54 <HAL_UART_MspInit+0x24c>)
 8004a42:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a44:	2380      	movs	r3, #128	; 0x80
 8004a46:	029b      	lsls	r3, r3, #10
 8004a48:	4013      	ands	r3, r2
 8004a4a:	61fb      	str	r3, [r7, #28]
 8004a4c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a4e:	4b41      	ldr	r3, [pc, #260]	; (8004b54 <HAL_UART_MspInit+0x24c>)
 8004a50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a52:	4b40      	ldr	r3, [pc, #256]	; (8004b54 <HAL_UART_MspInit+0x24c>)
 8004a54:	2101      	movs	r1, #1
 8004a56:	430a      	orrs	r2, r1
 8004a58:	635a      	str	r2, [r3, #52]	; 0x34
 8004a5a:	4b3e      	ldr	r3, [pc, #248]	; (8004b54 <HAL_UART_MspInit+0x24c>)
 8004a5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a5e:	2201      	movs	r2, #1
 8004a60:	4013      	ands	r3, r2
 8004a62:	61bb      	str	r3, [r7, #24]
 8004a64:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004a66:	2144      	movs	r1, #68	; 0x44
 8004a68:	187b      	adds	r3, r7, r1
 8004a6a:	220c      	movs	r2, #12
 8004a6c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a6e:	187b      	adds	r3, r7, r1
 8004a70:	2202      	movs	r2, #2
 8004a72:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004a74:	187b      	adds	r3, r7, r1
 8004a76:	2201      	movs	r2, #1
 8004a78:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a7a:	187b      	adds	r3, r7, r1
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8004a80:	187b      	adds	r3, r7, r1
 8004a82:	2201      	movs	r2, #1
 8004a84:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a86:	187a      	adds	r2, r7, r1
 8004a88:	23a0      	movs	r3, #160	; 0xa0
 8004a8a:	05db      	lsls	r3, r3, #23
 8004a8c:	0011      	movs	r1, r2
 8004a8e:	0018      	movs	r0, r3
 8004a90:	f000 fd96 	bl	80055c0 <HAL_GPIO_Init>
}
 8004a94:	e058      	b.n	8004b48 <HAL_UART_MspInit+0x240>
  else if(huart->Instance==USART3)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4a33      	ldr	r2, [pc, #204]	; (8004b68 <HAL_UART_MspInit+0x260>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d153      	bne.n	8004b48 <HAL_UART_MspInit+0x240>
    __HAL_RCC_USART3_CLK_ENABLE();
 8004aa0:	4b2c      	ldr	r3, [pc, #176]	; (8004b54 <HAL_UART_MspInit+0x24c>)
 8004aa2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004aa4:	4b2b      	ldr	r3, [pc, #172]	; (8004b54 <HAL_UART_MspInit+0x24c>)
 8004aa6:	2180      	movs	r1, #128	; 0x80
 8004aa8:	02c9      	lsls	r1, r1, #11
 8004aaa:	430a      	orrs	r2, r1
 8004aac:	63da      	str	r2, [r3, #60]	; 0x3c
 8004aae:	4b29      	ldr	r3, [pc, #164]	; (8004b54 <HAL_UART_MspInit+0x24c>)
 8004ab0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004ab2:	2380      	movs	r3, #128	; 0x80
 8004ab4:	02db      	lsls	r3, r3, #11
 8004ab6:	4013      	ands	r3, r2
 8004ab8:	617b      	str	r3, [r7, #20]
 8004aba:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004abc:	4b25      	ldr	r3, [pc, #148]	; (8004b54 <HAL_UART_MspInit+0x24c>)
 8004abe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ac0:	4b24      	ldr	r3, [pc, #144]	; (8004b54 <HAL_UART_MspInit+0x24c>)
 8004ac2:	2104      	movs	r1, #4
 8004ac4:	430a      	orrs	r2, r1
 8004ac6:	635a      	str	r2, [r3, #52]	; 0x34
 8004ac8:	4b22      	ldr	r3, [pc, #136]	; (8004b54 <HAL_UART_MspInit+0x24c>)
 8004aca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004acc:	2204      	movs	r2, #4
 8004ace:	4013      	ands	r3, r2
 8004ad0:	613b      	str	r3, [r7, #16]
 8004ad2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004ad4:	4b1f      	ldr	r3, [pc, #124]	; (8004b54 <HAL_UART_MspInit+0x24c>)
 8004ad6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ad8:	4b1e      	ldr	r3, [pc, #120]	; (8004b54 <HAL_UART_MspInit+0x24c>)
 8004ada:	2102      	movs	r1, #2
 8004adc:	430a      	orrs	r2, r1
 8004ade:	635a      	str	r2, [r3, #52]	; 0x34
 8004ae0:	4b1c      	ldr	r3, [pc, #112]	; (8004b54 <HAL_UART_MspInit+0x24c>)
 8004ae2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ae4:	2202      	movs	r2, #2
 8004ae6:	4013      	ands	r3, r2
 8004ae8:	60fb      	str	r3, [r7, #12]
 8004aea:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8004aec:	2144      	movs	r1, #68	; 0x44
 8004aee:	187b      	adds	r3, r7, r1
 8004af0:	2280      	movs	r2, #128	; 0x80
 8004af2:	0112      	lsls	r2, r2, #4
 8004af4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004af6:	000c      	movs	r4, r1
 8004af8:	193b      	adds	r3, r7, r4
 8004afa:	2202      	movs	r2, #2
 8004afc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004afe:	193b      	adds	r3, r7, r4
 8004b00:	2200      	movs	r2, #0
 8004b02:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b04:	193b      	adds	r3, r7, r4
 8004b06:	2200      	movs	r2, #0
 8004b08:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART3;
 8004b0a:	193b      	adds	r3, r7, r4
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004b10:	193b      	adds	r3, r7, r4
 8004b12:	4a11      	ldr	r2, [pc, #68]	; (8004b58 <HAL_UART_MspInit+0x250>)
 8004b14:	0019      	movs	r1, r3
 8004b16:	0010      	movs	r0, r2
 8004b18:	f000 fd52 	bl	80055c0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004b1c:	0021      	movs	r1, r4
 8004b1e:	187b      	adds	r3, r7, r1
 8004b20:	2204      	movs	r2, #4
 8004b22:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b24:	187b      	adds	r3, r7, r1
 8004b26:	2202      	movs	r2, #2
 8004b28:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b2a:	187b      	adds	r3, r7, r1
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b30:	187b      	adds	r3, r7, r1
 8004b32:	2200      	movs	r2, #0
 8004b34:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8004b36:	187b      	adds	r3, r7, r1
 8004b38:	2204      	movs	r2, #4
 8004b3a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004b3c:	187b      	adds	r3, r7, r1
 8004b3e:	4a0b      	ldr	r2, [pc, #44]	; (8004b6c <HAL_UART_MspInit+0x264>)
 8004b40:	0019      	movs	r1, r3
 8004b42:	0010      	movs	r0, r2
 8004b44:	f000 fd3c 	bl	80055c0 <HAL_GPIO_Init>
}
 8004b48:	46c0      	nop			; (mov r8, r8)
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	b017      	add	sp, #92	; 0x5c
 8004b4e:	bd90      	pop	{r4, r7, pc}
 8004b50:	40013800 	.word	0x40013800
 8004b54:	40021000 	.word	0x40021000
 8004b58:	50000800 	.word	0x50000800
 8004b5c:	200009bc 	.word	0x200009bc
 8004b60:	40020008 	.word	0x40020008
 8004b64:	40004400 	.word	0x40004400
 8004b68:	40004800 	.word	0x40004800
 8004b6c:	50000400 	.word	0x50000400

08004b70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004b74:	e7fe      	b.n	8004b74 <NMI_Handler+0x4>

08004b76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004b76:	b580      	push	{r7, lr}
 8004b78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004b7a:	e7fe      	b.n	8004b7a <HardFault_Handler+0x4>

08004b7c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8004b80:	46c0      	nop			; (mov r8, r8)
 8004b82:	46bd      	mov	sp, r7
 8004b84:	bd80      	pop	{r7, pc}

08004b86 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004b86:	b580      	push	{r7, lr}
 8004b88:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004b8a:	46c0      	nop			; (mov r8, r8)
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	bd80      	pop	{r7, pc}

08004b90 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004b94:	f000 f972 	bl	8004e7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004b98:	46c0      	nop			; (mov r8, r8)
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	bd80      	pop	{r7, pc}

08004b9e <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8004b9e:	b580      	push	{r7, lr}
 8004ba0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8004ba2:	2380      	movs	r3, #128	; 0x80
 8004ba4:	019b      	lsls	r3, r3, #6
 8004ba6:	0018      	movs	r0, r3
 8004ba8:	f000 fe8c 	bl	80058c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8004bac:	46c0      	nop			; (mov r8, r8)
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bd80      	pop	{r7, pc}
	...

08004bb4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8004bb8:	4b03      	ldr	r3, [pc, #12]	; (8004bc8 <DMA1_Channel1_IRQHandler+0x14>)
 8004bba:	0018      	movs	r0, r3
 8004bbc:	f000 fbbe 	bl	800533c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8004bc0:	46c0      	nop			; (mov r8, r8)
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bd80      	pop	{r7, pc}
 8004bc6:	46c0      	nop			; (mov r8, r8)
 8004bc8:	200009bc 	.word	0x200009bc

08004bcc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	af00      	add	r7, sp, #0
	return 1;
 8004bd0:	2301      	movs	r3, #1
}
 8004bd2:	0018      	movs	r0, r3
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	bd80      	pop	{r7, pc}

08004bd8 <_kill>:

int _kill(int pid, int sig)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b082      	sub	sp, #8
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
 8004be0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004be2:	f003 fde5 	bl	80087b0 <__errno>
 8004be6:	0003      	movs	r3, r0
 8004be8:	2216      	movs	r2, #22
 8004bea:	601a      	str	r2, [r3, #0]
	return -1;
 8004bec:	2301      	movs	r3, #1
 8004bee:	425b      	negs	r3, r3
}
 8004bf0:	0018      	movs	r0, r3
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	b002      	add	sp, #8
 8004bf6:	bd80      	pop	{r7, pc}

08004bf8 <_exit>:

void _exit (int status)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b082      	sub	sp, #8
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004c00:	2301      	movs	r3, #1
 8004c02:	425a      	negs	r2, r3
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	0011      	movs	r1, r2
 8004c08:	0018      	movs	r0, r3
 8004c0a:	f7ff ffe5 	bl	8004bd8 <_kill>
	while (1) {}		/* Make sure we hang here */
 8004c0e:	e7fe      	b.n	8004c0e <_exit+0x16>

08004c10 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b086      	sub	sp, #24
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	60f8      	str	r0, [r7, #12]
 8004c18:	60b9      	str	r1, [r7, #8]
 8004c1a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	617b      	str	r3, [r7, #20]
 8004c20:	e00a      	b.n	8004c38 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004c22:	e000      	b.n	8004c26 <_read+0x16>
 8004c24:	bf00      	nop
 8004c26:	0001      	movs	r1, r0
 8004c28:	68bb      	ldr	r3, [r7, #8]
 8004c2a:	1c5a      	adds	r2, r3, #1
 8004c2c:	60ba      	str	r2, [r7, #8]
 8004c2e:	b2ca      	uxtb	r2, r1
 8004c30:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004c32:	697b      	ldr	r3, [r7, #20]
 8004c34:	3301      	adds	r3, #1
 8004c36:	617b      	str	r3, [r7, #20]
 8004c38:	697a      	ldr	r2, [r7, #20]
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	429a      	cmp	r2, r3
 8004c3e:	dbf0      	blt.n	8004c22 <_read+0x12>
	}

return len;
 8004c40:	687b      	ldr	r3, [r7, #4]
}
 8004c42:	0018      	movs	r0, r3
 8004c44:	46bd      	mov	sp, r7
 8004c46:	b006      	add	sp, #24
 8004c48:	bd80      	pop	{r7, pc}

08004c4a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004c4a:	b580      	push	{r7, lr}
 8004c4c:	b086      	sub	sp, #24
 8004c4e:	af00      	add	r7, sp, #0
 8004c50:	60f8      	str	r0, [r7, #12]
 8004c52:	60b9      	str	r1, [r7, #8]
 8004c54:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004c56:	2300      	movs	r3, #0
 8004c58:	617b      	str	r3, [r7, #20]
 8004c5a:	e009      	b.n	8004c70 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	1c5a      	adds	r2, r3, #1
 8004c60:	60ba      	str	r2, [r7, #8]
 8004c62:	781b      	ldrb	r3, [r3, #0]
 8004c64:	0018      	movs	r0, r3
 8004c66:	e000      	b.n	8004c6a <_write+0x20>
 8004c68:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004c6a:	697b      	ldr	r3, [r7, #20]
 8004c6c:	3301      	adds	r3, #1
 8004c6e:	617b      	str	r3, [r7, #20]
 8004c70:	697a      	ldr	r2, [r7, #20]
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	429a      	cmp	r2, r3
 8004c76:	dbf1      	blt.n	8004c5c <_write+0x12>
	}
	return len;
 8004c78:	687b      	ldr	r3, [r7, #4]
}
 8004c7a:	0018      	movs	r0, r3
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	b006      	add	sp, #24
 8004c80:	bd80      	pop	{r7, pc}

08004c82 <_close>:

int _close(int file)
{
 8004c82:	b580      	push	{r7, lr}
 8004c84:	b082      	sub	sp, #8
 8004c86:	af00      	add	r7, sp, #0
 8004c88:	6078      	str	r0, [r7, #4]
	return -1;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	425b      	negs	r3, r3
}
 8004c8e:	0018      	movs	r0, r3
 8004c90:	46bd      	mov	sp, r7
 8004c92:	b002      	add	sp, #8
 8004c94:	bd80      	pop	{r7, pc}

08004c96 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004c96:	b580      	push	{r7, lr}
 8004c98:	b082      	sub	sp, #8
 8004c9a:	af00      	add	r7, sp, #0
 8004c9c:	6078      	str	r0, [r7, #4]
 8004c9e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	2280      	movs	r2, #128	; 0x80
 8004ca4:	0192      	lsls	r2, r2, #6
 8004ca6:	605a      	str	r2, [r3, #4]
	return 0;
 8004ca8:	2300      	movs	r3, #0
}
 8004caa:	0018      	movs	r0, r3
 8004cac:	46bd      	mov	sp, r7
 8004cae:	b002      	add	sp, #8
 8004cb0:	bd80      	pop	{r7, pc}

08004cb2 <_isatty>:

int _isatty(int file)
{
 8004cb2:	b580      	push	{r7, lr}
 8004cb4:	b082      	sub	sp, #8
 8004cb6:	af00      	add	r7, sp, #0
 8004cb8:	6078      	str	r0, [r7, #4]
	return 1;
 8004cba:	2301      	movs	r3, #1
}
 8004cbc:	0018      	movs	r0, r3
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	b002      	add	sp, #8
 8004cc2:	bd80      	pop	{r7, pc}

08004cc4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b084      	sub	sp, #16
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	60f8      	str	r0, [r7, #12]
 8004ccc:	60b9      	str	r1, [r7, #8]
 8004cce:	607a      	str	r2, [r7, #4]
	return 0;
 8004cd0:	2300      	movs	r3, #0
}
 8004cd2:	0018      	movs	r0, r3
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	b004      	add	sp, #16
 8004cd8:	bd80      	pop	{r7, pc}
	...

08004cdc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b086      	sub	sp, #24
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004ce4:	4a14      	ldr	r2, [pc, #80]	; (8004d38 <_sbrk+0x5c>)
 8004ce6:	4b15      	ldr	r3, [pc, #84]	; (8004d3c <_sbrk+0x60>)
 8004ce8:	1ad3      	subs	r3, r2, r3
 8004cea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004cec:	697b      	ldr	r3, [r7, #20]
 8004cee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004cf0:	4b13      	ldr	r3, [pc, #76]	; (8004d40 <_sbrk+0x64>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d102      	bne.n	8004cfe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004cf8:	4b11      	ldr	r3, [pc, #68]	; (8004d40 <_sbrk+0x64>)
 8004cfa:	4a12      	ldr	r2, [pc, #72]	; (8004d44 <_sbrk+0x68>)
 8004cfc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004cfe:	4b10      	ldr	r3, [pc, #64]	; (8004d40 <_sbrk+0x64>)
 8004d00:	681a      	ldr	r2, [r3, #0]
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	18d3      	adds	r3, r2, r3
 8004d06:	693a      	ldr	r2, [r7, #16]
 8004d08:	429a      	cmp	r2, r3
 8004d0a:	d207      	bcs.n	8004d1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004d0c:	f003 fd50 	bl	80087b0 <__errno>
 8004d10:	0003      	movs	r3, r0
 8004d12:	220c      	movs	r2, #12
 8004d14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004d16:	2301      	movs	r3, #1
 8004d18:	425b      	negs	r3, r3
 8004d1a:	e009      	b.n	8004d30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004d1c:	4b08      	ldr	r3, [pc, #32]	; (8004d40 <_sbrk+0x64>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004d22:	4b07      	ldr	r3, [pc, #28]	; (8004d40 <_sbrk+0x64>)
 8004d24:	681a      	ldr	r2, [r3, #0]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	18d2      	adds	r2, r2, r3
 8004d2a:	4b05      	ldr	r3, [pc, #20]	; (8004d40 <_sbrk+0x64>)
 8004d2c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
}
 8004d30:	0018      	movs	r0, r3
 8004d32:	46bd      	mov	sp, r7
 8004d34:	b006      	add	sp, #24
 8004d36:	bd80      	pop	{r7, pc}
 8004d38:	20009000 	.word	0x20009000
 8004d3c:	00000400 	.word	0x00000400
 8004d40:	20000a18 	.word	0x20000a18
 8004d44:	20000a30 	.word	0x20000a30

08004d48 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004d4c:	46c0      	nop			; (mov r8, r8)
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bd80      	pop	{r7, pc}
	...

08004d54 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004d54:	480d      	ldr	r0, [pc, #52]	; (8004d8c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004d56:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8004d58:	f7ff fff6 	bl	8004d48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004d5c:	480c      	ldr	r0, [pc, #48]	; (8004d90 <LoopForever+0x6>)
  ldr r1, =_edata
 8004d5e:	490d      	ldr	r1, [pc, #52]	; (8004d94 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004d60:	4a0d      	ldr	r2, [pc, #52]	; (8004d98 <LoopForever+0xe>)
  movs r3, #0
 8004d62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004d64:	e002      	b.n	8004d6c <LoopCopyDataInit>

08004d66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004d66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004d68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004d6a:	3304      	adds	r3, #4

08004d6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004d6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004d6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004d70:	d3f9      	bcc.n	8004d66 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004d72:	4a0a      	ldr	r2, [pc, #40]	; (8004d9c <LoopForever+0x12>)
  ldr r4, =_ebss
 8004d74:	4c0a      	ldr	r4, [pc, #40]	; (8004da0 <LoopForever+0x16>)
  movs r3, #0
 8004d76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004d78:	e001      	b.n	8004d7e <LoopFillZerobss>

08004d7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004d7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004d7c:	3204      	adds	r2, #4

08004d7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004d7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004d80:	d3fb      	bcc.n	8004d7a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8004d82:	f003 fd1b 	bl	80087bc <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8004d86:	f7fe fb19 	bl	80033bc <main>

08004d8a <LoopForever>:

LoopForever:
  b LoopForever
 8004d8a:	e7fe      	b.n	8004d8a <LoopForever>
  ldr   r0, =_estack
 8004d8c:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8004d90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004d94:	20000224 	.word	0x20000224
  ldr r2, =_sidata
 8004d98:	0800e4ac 	.word	0x0800e4ac
  ldr r2, =_sbss
 8004d9c:	20000224 	.word	0x20000224
  ldr r4, =_ebss
 8004da0:	20000a30 	.word	0x20000a30

08004da4 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004da4:	e7fe      	b.n	8004da4 <ADC1_IRQHandler>
	...

08004da8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b082      	sub	sp, #8
 8004dac:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004dae:	1dfb      	adds	r3, r7, #7
 8004db0:	2200      	movs	r2, #0
 8004db2:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004db4:	4b0b      	ldr	r3, [pc, #44]	; (8004de4 <HAL_Init+0x3c>)
 8004db6:	681a      	ldr	r2, [r3, #0]
 8004db8:	4b0a      	ldr	r3, [pc, #40]	; (8004de4 <HAL_Init+0x3c>)
 8004dba:	2180      	movs	r1, #128	; 0x80
 8004dbc:	0049      	lsls	r1, r1, #1
 8004dbe:	430a      	orrs	r2, r1
 8004dc0:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004dc2:	2000      	movs	r0, #0
 8004dc4:	f000 f810 	bl	8004de8 <HAL_InitTick>
 8004dc8:	1e03      	subs	r3, r0, #0
 8004dca:	d003      	beq.n	8004dd4 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8004dcc:	1dfb      	adds	r3, r7, #7
 8004dce:	2201      	movs	r2, #1
 8004dd0:	701a      	strb	r2, [r3, #0]
 8004dd2:	e001      	b.n	8004dd8 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8004dd4:	f7ff fd0e 	bl	80047f4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004dd8:	1dfb      	adds	r3, r7, #7
 8004dda:	781b      	ldrb	r3, [r3, #0]
}
 8004ddc:	0018      	movs	r0, r3
 8004dde:	46bd      	mov	sp, r7
 8004de0:	b002      	add	sp, #8
 8004de2:	bd80      	pop	{r7, pc}
 8004de4:	40022000 	.word	0x40022000

08004de8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004de8:	b590      	push	{r4, r7, lr}
 8004dea:	b085      	sub	sp, #20
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004df0:	230f      	movs	r3, #15
 8004df2:	18fb      	adds	r3, r7, r3
 8004df4:	2200      	movs	r2, #0
 8004df6:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8004df8:	4b1d      	ldr	r3, [pc, #116]	; (8004e70 <HAL_InitTick+0x88>)
 8004dfa:	781b      	ldrb	r3, [r3, #0]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d02b      	beq.n	8004e58 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8004e00:	4b1c      	ldr	r3, [pc, #112]	; (8004e74 <HAL_InitTick+0x8c>)
 8004e02:	681c      	ldr	r4, [r3, #0]
 8004e04:	4b1a      	ldr	r3, [pc, #104]	; (8004e70 <HAL_InitTick+0x88>)
 8004e06:	781b      	ldrb	r3, [r3, #0]
 8004e08:	0019      	movs	r1, r3
 8004e0a:	23fa      	movs	r3, #250	; 0xfa
 8004e0c:	0098      	lsls	r0, r3, #2
 8004e0e:	f7fb f99d 	bl	800014c <__udivsi3>
 8004e12:	0003      	movs	r3, r0
 8004e14:	0019      	movs	r1, r3
 8004e16:	0020      	movs	r0, r4
 8004e18:	f7fb f998 	bl	800014c <__udivsi3>
 8004e1c:	0003      	movs	r3, r0
 8004e1e:	0018      	movs	r0, r3
 8004e20:	f000 f96f 	bl	8005102 <HAL_SYSTICK_Config>
 8004e24:	1e03      	subs	r3, r0, #0
 8004e26:	d112      	bne.n	8004e4e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2b03      	cmp	r3, #3
 8004e2c:	d80a      	bhi.n	8004e44 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004e2e:	6879      	ldr	r1, [r7, #4]
 8004e30:	2301      	movs	r3, #1
 8004e32:	425b      	negs	r3, r3
 8004e34:	2200      	movs	r2, #0
 8004e36:	0018      	movs	r0, r3
 8004e38:	f000 f93e 	bl	80050b8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004e3c:	4b0e      	ldr	r3, [pc, #56]	; (8004e78 <HAL_InitTick+0x90>)
 8004e3e:	687a      	ldr	r2, [r7, #4]
 8004e40:	601a      	str	r2, [r3, #0]
 8004e42:	e00d      	b.n	8004e60 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8004e44:	230f      	movs	r3, #15
 8004e46:	18fb      	adds	r3, r7, r3
 8004e48:	2201      	movs	r2, #1
 8004e4a:	701a      	strb	r2, [r3, #0]
 8004e4c:	e008      	b.n	8004e60 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004e4e:	230f      	movs	r3, #15
 8004e50:	18fb      	adds	r3, r7, r3
 8004e52:	2201      	movs	r2, #1
 8004e54:	701a      	strb	r2, [r3, #0]
 8004e56:	e003      	b.n	8004e60 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004e58:	230f      	movs	r3, #15
 8004e5a:	18fb      	adds	r3, r7, r3
 8004e5c:	2201      	movs	r2, #1
 8004e5e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8004e60:	230f      	movs	r3, #15
 8004e62:	18fb      	adds	r3, r7, r3
 8004e64:	781b      	ldrb	r3, [r3, #0]
}
 8004e66:	0018      	movs	r0, r3
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	b005      	add	sp, #20
 8004e6c:	bd90      	pop	{r4, r7, pc}
 8004e6e:	46c0      	nop			; (mov r8, r8)
 8004e70:	2000004c 	.word	0x2000004c
 8004e74:	20000044 	.word	0x20000044
 8004e78:	20000048 	.word	0x20000048

08004e7c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004e80:	4b05      	ldr	r3, [pc, #20]	; (8004e98 <HAL_IncTick+0x1c>)
 8004e82:	781b      	ldrb	r3, [r3, #0]
 8004e84:	001a      	movs	r2, r3
 8004e86:	4b05      	ldr	r3, [pc, #20]	; (8004e9c <HAL_IncTick+0x20>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	18d2      	adds	r2, r2, r3
 8004e8c:	4b03      	ldr	r3, [pc, #12]	; (8004e9c <HAL_IncTick+0x20>)
 8004e8e:	601a      	str	r2, [r3, #0]
}
 8004e90:	46c0      	nop			; (mov r8, r8)
 8004e92:	46bd      	mov	sp, r7
 8004e94:	bd80      	pop	{r7, pc}
 8004e96:	46c0      	nop			; (mov r8, r8)
 8004e98:	2000004c 	.word	0x2000004c
 8004e9c:	20000a1c 	.word	0x20000a1c

08004ea0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	af00      	add	r7, sp, #0
  return uwTick;
 8004ea4:	4b02      	ldr	r3, [pc, #8]	; (8004eb0 <HAL_GetTick+0x10>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
}
 8004ea8:	0018      	movs	r0, r3
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bd80      	pop	{r7, pc}
 8004eae:	46c0      	nop			; (mov r8, r8)
 8004eb0:	20000a1c 	.word	0x20000a1c

08004eb4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b084      	sub	sp, #16
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004ebc:	f7ff fff0 	bl	8004ea0 <HAL_GetTick>
 8004ec0:	0003      	movs	r3, r0
 8004ec2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	3301      	adds	r3, #1
 8004ecc:	d005      	beq.n	8004eda <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004ece:	4b0a      	ldr	r3, [pc, #40]	; (8004ef8 <HAL_Delay+0x44>)
 8004ed0:	781b      	ldrb	r3, [r3, #0]
 8004ed2:	001a      	movs	r2, r3
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	189b      	adds	r3, r3, r2
 8004ed8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004eda:	46c0      	nop			; (mov r8, r8)
 8004edc:	f7ff ffe0 	bl	8004ea0 <HAL_GetTick>
 8004ee0:	0002      	movs	r2, r0
 8004ee2:	68bb      	ldr	r3, [r7, #8]
 8004ee4:	1ad3      	subs	r3, r2, r3
 8004ee6:	68fa      	ldr	r2, [r7, #12]
 8004ee8:	429a      	cmp	r2, r3
 8004eea:	d8f7      	bhi.n	8004edc <HAL_Delay+0x28>
  {
  }
}
 8004eec:	46c0      	nop			; (mov r8, r8)
 8004eee:	46c0      	nop			; (mov r8, r8)
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	b004      	add	sp, #16
 8004ef4:	bd80      	pop	{r7, pc}
 8004ef6:	46c0      	nop			; (mov r8, r8)
 8004ef8:	2000004c 	.word	0x2000004c

08004efc <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Msk);
 8004f00:	4b04      	ldr	r3, [pc, #16]	; (8004f14 <HAL_SuspendTick+0x18>)
 8004f02:	681a      	ldr	r2, [r3, #0]
 8004f04:	4b03      	ldr	r3, [pc, #12]	; (8004f14 <HAL_SuspendTick+0x18>)
 8004f06:	2102      	movs	r1, #2
 8004f08:	438a      	bics	r2, r1
 8004f0a:	601a      	str	r2, [r3, #0]
}
 8004f0c:	46c0      	nop			; (mov r8, r8)
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	bd80      	pop	{r7, pc}
 8004f12:	46c0      	nop			; (mov r8, r8)
 8004f14:	e000e010 	.word	0xe000e010

08004f18 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8004f1c:	4b04      	ldr	r3, [pc, #16]	; (8004f30 <HAL_ResumeTick+0x18>)
 8004f1e:	681a      	ldr	r2, [r3, #0]
 8004f20:	4b03      	ldr	r3, [pc, #12]	; (8004f30 <HAL_ResumeTick+0x18>)
 8004f22:	2102      	movs	r1, #2
 8004f24:	430a      	orrs	r2, r1
 8004f26:	601a      	str	r2, [r3, #0]
}
 8004f28:	46c0      	nop			; (mov r8, r8)
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	bd80      	pop	{r7, pc}
 8004f2e:	46c0      	nop			; (mov r8, r8)
 8004f30:	e000e010 	.word	0xe000e010

08004f34 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b082      	sub	sp, #8
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8004f3c:	4b06      	ldr	r3, [pc, #24]	; (8004f58 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a06      	ldr	r2, [pc, #24]	; (8004f5c <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8004f42:	4013      	ands	r3, r2
 8004f44:	0019      	movs	r1, r3
 8004f46:	4b04      	ldr	r3, [pc, #16]	; (8004f58 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8004f48:	687a      	ldr	r2, [r7, #4]
 8004f4a:	430a      	orrs	r2, r1
 8004f4c:	601a      	str	r2, [r3, #0]
}
 8004f4e:	46c0      	nop			; (mov r8, r8)
 8004f50:	46bd      	mov	sp, r7
 8004f52:	b002      	add	sp, #8
 8004f54:	bd80      	pop	{r7, pc}
 8004f56:	46c0      	nop			; (mov r8, r8)
 8004f58:	40010000 	.word	0x40010000
 8004f5c:	fffff9ff 	.word	0xfffff9ff

08004f60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b082      	sub	sp, #8
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	0002      	movs	r2, r0
 8004f68:	1dfb      	adds	r3, r7, #7
 8004f6a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004f6c:	1dfb      	adds	r3, r7, #7
 8004f6e:	781b      	ldrb	r3, [r3, #0]
 8004f70:	2b7f      	cmp	r3, #127	; 0x7f
 8004f72:	d809      	bhi.n	8004f88 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004f74:	1dfb      	adds	r3, r7, #7
 8004f76:	781b      	ldrb	r3, [r3, #0]
 8004f78:	001a      	movs	r2, r3
 8004f7a:	231f      	movs	r3, #31
 8004f7c:	401a      	ands	r2, r3
 8004f7e:	4b04      	ldr	r3, [pc, #16]	; (8004f90 <__NVIC_EnableIRQ+0x30>)
 8004f80:	2101      	movs	r1, #1
 8004f82:	4091      	lsls	r1, r2
 8004f84:	000a      	movs	r2, r1
 8004f86:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8004f88:	46c0      	nop			; (mov r8, r8)
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	b002      	add	sp, #8
 8004f8e:	bd80      	pop	{r7, pc}
 8004f90:	e000e100 	.word	0xe000e100

08004f94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004f94:	b590      	push	{r4, r7, lr}
 8004f96:	b083      	sub	sp, #12
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	0002      	movs	r2, r0
 8004f9c:	6039      	str	r1, [r7, #0]
 8004f9e:	1dfb      	adds	r3, r7, #7
 8004fa0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004fa2:	1dfb      	adds	r3, r7, #7
 8004fa4:	781b      	ldrb	r3, [r3, #0]
 8004fa6:	2b7f      	cmp	r3, #127	; 0x7f
 8004fa8:	d828      	bhi.n	8004ffc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004faa:	4a2f      	ldr	r2, [pc, #188]	; (8005068 <__NVIC_SetPriority+0xd4>)
 8004fac:	1dfb      	adds	r3, r7, #7
 8004fae:	781b      	ldrb	r3, [r3, #0]
 8004fb0:	b25b      	sxtb	r3, r3
 8004fb2:	089b      	lsrs	r3, r3, #2
 8004fb4:	33c0      	adds	r3, #192	; 0xc0
 8004fb6:	009b      	lsls	r3, r3, #2
 8004fb8:	589b      	ldr	r3, [r3, r2]
 8004fba:	1dfa      	adds	r2, r7, #7
 8004fbc:	7812      	ldrb	r2, [r2, #0]
 8004fbe:	0011      	movs	r1, r2
 8004fc0:	2203      	movs	r2, #3
 8004fc2:	400a      	ands	r2, r1
 8004fc4:	00d2      	lsls	r2, r2, #3
 8004fc6:	21ff      	movs	r1, #255	; 0xff
 8004fc8:	4091      	lsls	r1, r2
 8004fca:	000a      	movs	r2, r1
 8004fcc:	43d2      	mvns	r2, r2
 8004fce:	401a      	ands	r2, r3
 8004fd0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	019b      	lsls	r3, r3, #6
 8004fd6:	22ff      	movs	r2, #255	; 0xff
 8004fd8:	401a      	ands	r2, r3
 8004fda:	1dfb      	adds	r3, r7, #7
 8004fdc:	781b      	ldrb	r3, [r3, #0]
 8004fde:	0018      	movs	r0, r3
 8004fe0:	2303      	movs	r3, #3
 8004fe2:	4003      	ands	r3, r0
 8004fe4:	00db      	lsls	r3, r3, #3
 8004fe6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004fe8:	481f      	ldr	r0, [pc, #124]	; (8005068 <__NVIC_SetPriority+0xd4>)
 8004fea:	1dfb      	adds	r3, r7, #7
 8004fec:	781b      	ldrb	r3, [r3, #0]
 8004fee:	b25b      	sxtb	r3, r3
 8004ff0:	089b      	lsrs	r3, r3, #2
 8004ff2:	430a      	orrs	r2, r1
 8004ff4:	33c0      	adds	r3, #192	; 0xc0
 8004ff6:	009b      	lsls	r3, r3, #2
 8004ff8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8004ffa:	e031      	b.n	8005060 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004ffc:	4a1b      	ldr	r2, [pc, #108]	; (800506c <__NVIC_SetPriority+0xd8>)
 8004ffe:	1dfb      	adds	r3, r7, #7
 8005000:	781b      	ldrb	r3, [r3, #0]
 8005002:	0019      	movs	r1, r3
 8005004:	230f      	movs	r3, #15
 8005006:	400b      	ands	r3, r1
 8005008:	3b08      	subs	r3, #8
 800500a:	089b      	lsrs	r3, r3, #2
 800500c:	3306      	adds	r3, #6
 800500e:	009b      	lsls	r3, r3, #2
 8005010:	18d3      	adds	r3, r2, r3
 8005012:	3304      	adds	r3, #4
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	1dfa      	adds	r2, r7, #7
 8005018:	7812      	ldrb	r2, [r2, #0]
 800501a:	0011      	movs	r1, r2
 800501c:	2203      	movs	r2, #3
 800501e:	400a      	ands	r2, r1
 8005020:	00d2      	lsls	r2, r2, #3
 8005022:	21ff      	movs	r1, #255	; 0xff
 8005024:	4091      	lsls	r1, r2
 8005026:	000a      	movs	r2, r1
 8005028:	43d2      	mvns	r2, r2
 800502a:	401a      	ands	r2, r3
 800502c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	019b      	lsls	r3, r3, #6
 8005032:	22ff      	movs	r2, #255	; 0xff
 8005034:	401a      	ands	r2, r3
 8005036:	1dfb      	adds	r3, r7, #7
 8005038:	781b      	ldrb	r3, [r3, #0]
 800503a:	0018      	movs	r0, r3
 800503c:	2303      	movs	r3, #3
 800503e:	4003      	ands	r3, r0
 8005040:	00db      	lsls	r3, r3, #3
 8005042:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005044:	4809      	ldr	r0, [pc, #36]	; (800506c <__NVIC_SetPriority+0xd8>)
 8005046:	1dfb      	adds	r3, r7, #7
 8005048:	781b      	ldrb	r3, [r3, #0]
 800504a:	001c      	movs	r4, r3
 800504c:	230f      	movs	r3, #15
 800504e:	4023      	ands	r3, r4
 8005050:	3b08      	subs	r3, #8
 8005052:	089b      	lsrs	r3, r3, #2
 8005054:	430a      	orrs	r2, r1
 8005056:	3306      	adds	r3, #6
 8005058:	009b      	lsls	r3, r3, #2
 800505a:	18c3      	adds	r3, r0, r3
 800505c:	3304      	adds	r3, #4
 800505e:	601a      	str	r2, [r3, #0]
}
 8005060:	46c0      	nop			; (mov r8, r8)
 8005062:	46bd      	mov	sp, r7
 8005064:	b003      	add	sp, #12
 8005066:	bd90      	pop	{r4, r7, pc}
 8005068:	e000e100 	.word	0xe000e100
 800506c:	e000ed00 	.word	0xe000ed00

08005070 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b082      	sub	sp, #8
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	1e5a      	subs	r2, r3, #1
 800507c:	2380      	movs	r3, #128	; 0x80
 800507e:	045b      	lsls	r3, r3, #17
 8005080:	429a      	cmp	r2, r3
 8005082:	d301      	bcc.n	8005088 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005084:	2301      	movs	r3, #1
 8005086:	e010      	b.n	80050aa <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005088:	4b0a      	ldr	r3, [pc, #40]	; (80050b4 <SysTick_Config+0x44>)
 800508a:	687a      	ldr	r2, [r7, #4]
 800508c:	3a01      	subs	r2, #1
 800508e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005090:	2301      	movs	r3, #1
 8005092:	425b      	negs	r3, r3
 8005094:	2103      	movs	r1, #3
 8005096:	0018      	movs	r0, r3
 8005098:	f7ff ff7c 	bl	8004f94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800509c:	4b05      	ldr	r3, [pc, #20]	; (80050b4 <SysTick_Config+0x44>)
 800509e:	2200      	movs	r2, #0
 80050a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80050a2:	4b04      	ldr	r3, [pc, #16]	; (80050b4 <SysTick_Config+0x44>)
 80050a4:	2207      	movs	r2, #7
 80050a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80050a8:	2300      	movs	r3, #0
}
 80050aa:	0018      	movs	r0, r3
 80050ac:	46bd      	mov	sp, r7
 80050ae:	b002      	add	sp, #8
 80050b0:	bd80      	pop	{r7, pc}
 80050b2:	46c0      	nop			; (mov r8, r8)
 80050b4:	e000e010 	.word	0xe000e010

080050b8 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b084      	sub	sp, #16
 80050bc:	af00      	add	r7, sp, #0
 80050be:	60b9      	str	r1, [r7, #8]
 80050c0:	607a      	str	r2, [r7, #4]
 80050c2:	210f      	movs	r1, #15
 80050c4:	187b      	adds	r3, r7, r1
 80050c6:	1c02      	adds	r2, r0, #0
 80050c8:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80050ca:	68ba      	ldr	r2, [r7, #8]
 80050cc:	187b      	adds	r3, r7, r1
 80050ce:	781b      	ldrb	r3, [r3, #0]
 80050d0:	b25b      	sxtb	r3, r3
 80050d2:	0011      	movs	r1, r2
 80050d4:	0018      	movs	r0, r3
 80050d6:	f7ff ff5d 	bl	8004f94 <__NVIC_SetPriority>
}
 80050da:	46c0      	nop			; (mov r8, r8)
 80050dc:	46bd      	mov	sp, r7
 80050de:	b004      	add	sp, #16
 80050e0:	bd80      	pop	{r7, pc}

080050e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80050e2:	b580      	push	{r7, lr}
 80050e4:	b082      	sub	sp, #8
 80050e6:	af00      	add	r7, sp, #0
 80050e8:	0002      	movs	r2, r0
 80050ea:	1dfb      	adds	r3, r7, #7
 80050ec:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80050ee:	1dfb      	adds	r3, r7, #7
 80050f0:	781b      	ldrb	r3, [r3, #0]
 80050f2:	b25b      	sxtb	r3, r3
 80050f4:	0018      	movs	r0, r3
 80050f6:	f7ff ff33 	bl	8004f60 <__NVIC_EnableIRQ>
}
 80050fa:	46c0      	nop			; (mov r8, r8)
 80050fc:	46bd      	mov	sp, r7
 80050fe:	b002      	add	sp, #8
 8005100:	bd80      	pop	{r7, pc}

08005102 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005102:	b580      	push	{r7, lr}
 8005104:	b082      	sub	sp, #8
 8005106:	af00      	add	r7, sp, #0
 8005108:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	0018      	movs	r0, r3
 800510e:	f7ff ffaf 	bl	8005070 <SysTick_Config>
 8005112:	0003      	movs	r3, r0
}
 8005114:	0018      	movs	r0, r3
 8005116:	46bd      	mov	sp, r7
 8005118:	b002      	add	sp, #8
 800511a:	bd80      	pop	{r7, pc}

0800511c <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b082      	sub	sp, #8
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d101      	bne.n	800512e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800512a:	2301      	movs	r3, #1
 800512c:	e077      	b.n	800521e <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4a3d      	ldr	r2, [pc, #244]	; (8005228 <HAL_DMA_Init+0x10c>)
 8005134:	4694      	mov	ip, r2
 8005136:	4463      	add	r3, ip
 8005138:	2114      	movs	r1, #20
 800513a:	0018      	movs	r0, r3
 800513c:	f7fb f806 	bl	800014c <__udivsi3>
 8005140:	0003      	movs	r3, r0
 8005142:	009a      	lsls	r2, r3, #2
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2225      	movs	r2, #37	; 0x25
 800514c:	2102      	movs	r1, #2
 800514e:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	681a      	ldr	r2, [r3, #0]
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	4934      	ldr	r1, [pc, #208]	; (800522c <HAL_DMA_Init+0x110>)
 800515c:	400a      	ands	r2, r1
 800515e:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	6819      	ldr	r1, [r3, #0]
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	689a      	ldr	r2, [r3, #8]
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	68db      	ldr	r3, [r3, #12]
 800516e:	431a      	orrs	r2, r3
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	691b      	ldr	r3, [r3, #16]
 8005174:	431a      	orrs	r2, r3
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	695b      	ldr	r3, [r3, #20]
 800517a:	431a      	orrs	r2, r3
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	699b      	ldr	r3, [r3, #24]
 8005180:	431a      	orrs	r2, r3
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	69db      	ldr	r3, [r3, #28]
 8005186:	431a      	orrs	r2, r3
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6a1b      	ldr	r3, [r3, #32]
 800518c:	431a      	orrs	r2, r3
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	430a      	orrs	r2, r1
 8005194:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	0018      	movs	r0, r3
 800519a:	f000 f9c1 	bl	8005520 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	689a      	ldr	r2, [r3, #8]
 80051a2:	2380      	movs	r3, #128	; 0x80
 80051a4:	01db      	lsls	r3, r3, #7
 80051a6:	429a      	cmp	r2, r3
 80051a8:	d102      	bne.n	80051b0 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2200      	movs	r2, #0
 80051ae:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	685a      	ldr	r2, [r3, #4]
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051b8:	213f      	movs	r1, #63	; 0x3f
 80051ba:	400a      	ands	r2, r1
 80051bc:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051c2:	687a      	ldr	r2, [r7, #4]
 80051c4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80051c6:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	685b      	ldr	r3, [r3, #4]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d011      	beq.n	80051f4 <HAL_DMA_Init+0xd8>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	685b      	ldr	r3, [r3, #4]
 80051d4:	2b04      	cmp	r3, #4
 80051d6:	d80d      	bhi.n	80051f4 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	0018      	movs	r0, r3
 80051dc:	f000 f9cc 	bl	8005578 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051e4:	2200      	movs	r2, #0
 80051e6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051ec:	687a      	ldr	r2, [r7, #4]
 80051ee:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80051f0:	605a      	str	r2, [r3, #4]
 80051f2:	e008      	b.n	8005206 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2200      	movs	r2, #0
 80051f8:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2200      	movs	r2, #0
 80051fe:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2200      	movs	r2, #0
 8005204:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2200      	movs	r2, #0
 800520a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2225      	movs	r2, #37	; 0x25
 8005210:	2101      	movs	r1, #1
 8005212:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2224      	movs	r2, #36	; 0x24
 8005218:	2100      	movs	r1, #0
 800521a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800521c:	2300      	movs	r3, #0
}
 800521e:	0018      	movs	r0, r3
 8005220:	46bd      	mov	sp, r7
 8005222:	b002      	add	sp, #8
 8005224:	bd80      	pop	{r7, pc}
 8005226:	46c0      	nop			; (mov r8, r8)
 8005228:	bffdfff8 	.word	0xbffdfff8
 800522c:	ffff800f 	.word	0xffff800f

08005230 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b086      	sub	sp, #24
 8005234:	af00      	add	r7, sp, #0
 8005236:	60f8      	str	r0, [r7, #12]
 8005238:	60b9      	str	r1, [r7, #8]
 800523a:	607a      	str	r2, [r7, #4]
 800523c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800523e:	2317      	movs	r3, #23
 8005240:	18fb      	adds	r3, r7, r3
 8005242:	2200      	movs	r2, #0
 8005244:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	2224      	movs	r2, #36	; 0x24
 800524a:	5c9b      	ldrb	r3, [r3, r2]
 800524c:	2b01      	cmp	r3, #1
 800524e:	d101      	bne.n	8005254 <HAL_DMA_Start_IT+0x24>
 8005250:	2302      	movs	r3, #2
 8005252:	e06f      	b.n	8005334 <HAL_DMA_Start_IT+0x104>
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	2224      	movs	r2, #36	; 0x24
 8005258:	2101      	movs	r1, #1
 800525a:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	2225      	movs	r2, #37	; 0x25
 8005260:	5c9b      	ldrb	r3, [r3, r2]
 8005262:	b2db      	uxtb	r3, r3
 8005264:	2b01      	cmp	r3, #1
 8005266:	d157      	bne.n	8005318 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	2225      	movs	r2, #37	; 0x25
 800526c:	2102      	movs	r1, #2
 800526e:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	2200      	movs	r2, #0
 8005274:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	681a      	ldr	r2, [r3, #0]
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	2101      	movs	r1, #1
 8005282:	438a      	bics	r2, r1
 8005284:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	687a      	ldr	r2, [r7, #4]
 800528a:	68b9      	ldr	r1, [r7, #8]
 800528c:	68f8      	ldr	r0, [r7, #12]
 800528e:	f000 f907 	bl	80054a0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005296:	2b00      	cmp	r3, #0
 8005298:	d008      	beq.n	80052ac <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	681a      	ldr	r2, [r3, #0]
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	210e      	movs	r1, #14
 80052a6:	430a      	orrs	r2, r1
 80052a8:	601a      	str	r2, [r3, #0]
 80052aa:	e00f      	b.n	80052cc <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	681a      	ldr	r2, [r3, #0]
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	2104      	movs	r1, #4
 80052b8:	438a      	bics	r2, r1
 80052ba:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	681a      	ldr	r2, [r3, #0]
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	210a      	movs	r1, #10
 80052c8:	430a      	orrs	r2, r1
 80052ca:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052d0:	681a      	ldr	r2, [r3, #0]
 80052d2:	2380      	movs	r3, #128	; 0x80
 80052d4:	025b      	lsls	r3, r3, #9
 80052d6:	4013      	ands	r3, r2
 80052d8:	d008      	beq.n	80052ec <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052de:	681a      	ldr	r2, [r3, #0]
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052e4:	2180      	movs	r1, #128	; 0x80
 80052e6:	0049      	lsls	r1, r1, #1
 80052e8:	430a      	orrs	r2, r1
 80052ea:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d008      	beq.n	8005306 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052f8:	681a      	ldr	r2, [r3, #0]
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052fe:	2180      	movs	r1, #128	; 0x80
 8005300:	0049      	lsls	r1, r1, #1
 8005302:	430a      	orrs	r2, r1
 8005304:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	681a      	ldr	r2, [r3, #0]
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	2101      	movs	r1, #1
 8005312:	430a      	orrs	r2, r1
 8005314:	601a      	str	r2, [r3, #0]
 8005316:	e00a      	b.n	800532e <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	2280      	movs	r2, #128	; 0x80
 800531c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	2224      	movs	r2, #36	; 0x24
 8005322:	2100      	movs	r1, #0
 8005324:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 8005326:	2317      	movs	r3, #23
 8005328:	18fb      	adds	r3, r7, r3
 800532a:	2201      	movs	r2, #1
 800532c:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800532e:	2317      	movs	r3, #23
 8005330:	18fb      	adds	r3, r7, r3
 8005332:	781b      	ldrb	r3, [r3, #0]
}
 8005334:	0018      	movs	r0, r3
 8005336:	46bd      	mov	sp, r7
 8005338:	b006      	add	sp, #24
 800533a:	bd80      	pop	{r7, pc}

0800533c <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800533c:	b580      	push	{r7, lr}
 800533e:	b084      	sub	sp, #16
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8005344:	4b55      	ldr	r3, [pc, #340]	; (800549c <HAL_DMA_IRQHandler+0x160>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005356:	221c      	movs	r2, #28
 8005358:	4013      	ands	r3, r2
 800535a:	2204      	movs	r2, #4
 800535c:	409a      	lsls	r2, r3
 800535e:	0013      	movs	r3, r2
 8005360:	68fa      	ldr	r2, [r7, #12]
 8005362:	4013      	ands	r3, r2
 8005364:	d027      	beq.n	80053b6 <HAL_DMA_IRQHandler+0x7a>
 8005366:	68bb      	ldr	r3, [r7, #8]
 8005368:	2204      	movs	r2, #4
 800536a:	4013      	ands	r3, r2
 800536c:	d023      	beq.n	80053b6 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	2220      	movs	r2, #32
 8005376:	4013      	ands	r3, r2
 8005378:	d107      	bne.n	800538a <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	681a      	ldr	r2, [r3, #0]
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	2104      	movs	r1, #4
 8005386:	438a      	bics	r2, r1
 8005388:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 800538a:	4b44      	ldr	r3, [pc, #272]	; (800549c <HAL_DMA_IRQHandler+0x160>)
 800538c:	6859      	ldr	r1, [r3, #4]
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005392:	221c      	movs	r2, #28
 8005394:	4013      	ands	r3, r2
 8005396:	2204      	movs	r2, #4
 8005398:	409a      	lsls	r2, r3
 800539a:	4b40      	ldr	r3, [pc, #256]	; (800549c <HAL_DMA_IRQHandler+0x160>)
 800539c:	430a      	orrs	r2, r1
 800539e:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d100      	bne.n	80053aa <HAL_DMA_IRQHandler+0x6e>
 80053a8:	e073      	b.n	8005492 <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053ae:	687a      	ldr	r2, [r7, #4]
 80053b0:	0010      	movs	r0, r2
 80053b2:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 80053b4:	e06d      	b.n	8005492 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ba:	221c      	movs	r2, #28
 80053bc:	4013      	ands	r3, r2
 80053be:	2202      	movs	r2, #2
 80053c0:	409a      	lsls	r2, r3
 80053c2:	0013      	movs	r3, r2
 80053c4:	68fa      	ldr	r2, [r7, #12]
 80053c6:	4013      	ands	r3, r2
 80053c8:	d02e      	beq.n	8005428 <HAL_DMA_IRQHandler+0xec>
 80053ca:	68bb      	ldr	r3, [r7, #8]
 80053cc:	2202      	movs	r2, #2
 80053ce:	4013      	ands	r3, r2
 80053d0:	d02a      	beq.n	8005428 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	2220      	movs	r2, #32
 80053da:	4013      	ands	r3, r2
 80053dc:	d10b      	bne.n	80053f6 <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	681a      	ldr	r2, [r3, #0]
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	210a      	movs	r1, #10
 80053ea:	438a      	bics	r2, r1
 80053ec:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2225      	movs	r2, #37	; 0x25
 80053f2:	2101      	movs	r1, #1
 80053f4:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 80053f6:	4b29      	ldr	r3, [pc, #164]	; (800549c <HAL_DMA_IRQHandler+0x160>)
 80053f8:	6859      	ldr	r1, [r3, #4]
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053fe:	221c      	movs	r2, #28
 8005400:	4013      	ands	r3, r2
 8005402:	2202      	movs	r2, #2
 8005404:	409a      	lsls	r2, r3
 8005406:	4b25      	ldr	r3, [pc, #148]	; (800549c <HAL_DMA_IRQHandler+0x160>)
 8005408:	430a      	orrs	r2, r1
 800540a:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2224      	movs	r2, #36	; 0x24
 8005410:	2100      	movs	r1, #0
 8005412:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005418:	2b00      	cmp	r3, #0
 800541a:	d03a      	beq.n	8005492 <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005420:	687a      	ldr	r2, [r7, #4]
 8005422:	0010      	movs	r0, r2
 8005424:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8005426:	e034      	b.n	8005492 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800542c:	221c      	movs	r2, #28
 800542e:	4013      	ands	r3, r2
 8005430:	2208      	movs	r2, #8
 8005432:	409a      	lsls	r2, r3
 8005434:	0013      	movs	r3, r2
 8005436:	68fa      	ldr	r2, [r7, #12]
 8005438:	4013      	ands	r3, r2
 800543a:	d02b      	beq.n	8005494 <HAL_DMA_IRQHandler+0x158>
 800543c:	68bb      	ldr	r3, [r7, #8]
 800543e:	2208      	movs	r2, #8
 8005440:	4013      	ands	r3, r2
 8005442:	d027      	beq.n	8005494 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	681a      	ldr	r2, [r3, #0]
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	210e      	movs	r1, #14
 8005450:	438a      	bics	r2, r1
 8005452:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8005454:	4b11      	ldr	r3, [pc, #68]	; (800549c <HAL_DMA_IRQHandler+0x160>)
 8005456:	6859      	ldr	r1, [r3, #4]
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800545c:	221c      	movs	r2, #28
 800545e:	4013      	ands	r3, r2
 8005460:	2201      	movs	r2, #1
 8005462:	409a      	lsls	r2, r3
 8005464:	4b0d      	ldr	r3, [pc, #52]	; (800549c <HAL_DMA_IRQHandler+0x160>)
 8005466:	430a      	orrs	r2, r1
 8005468:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2201      	movs	r2, #1
 800546e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2225      	movs	r2, #37	; 0x25
 8005474:	2101      	movs	r1, #1
 8005476:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2224      	movs	r2, #36	; 0x24
 800547c:	2100      	movs	r1, #0
 800547e:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005484:	2b00      	cmp	r3, #0
 8005486:	d005      	beq.n	8005494 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800548c:	687a      	ldr	r2, [r7, #4]
 800548e:	0010      	movs	r0, r2
 8005490:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005492:	46c0      	nop			; (mov r8, r8)
 8005494:	46c0      	nop			; (mov r8, r8)
}
 8005496:	46bd      	mov	sp, r7
 8005498:	b004      	add	sp, #16
 800549a:	bd80      	pop	{r7, pc}
 800549c:	40020000 	.word	0x40020000

080054a0 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b084      	sub	sp, #16
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	60f8      	str	r0, [r7, #12]
 80054a8:	60b9      	str	r1, [r7, #8]
 80054aa:	607a      	str	r2, [r7, #4]
 80054ac:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054b2:	68fa      	ldr	r2, [r7, #12]
 80054b4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80054b6:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d004      	beq.n	80054ca <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054c4:	68fa      	ldr	r2, [r7, #12]
 80054c6:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80054c8:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 80054ca:	4b14      	ldr	r3, [pc, #80]	; (800551c <DMA_SetConfig+0x7c>)
 80054cc:	6859      	ldr	r1, [r3, #4]
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054d2:	221c      	movs	r2, #28
 80054d4:	4013      	ands	r3, r2
 80054d6:	2201      	movs	r2, #1
 80054d8:	409a      	lsls	r2, r3
 80054da:	4b10      	ldr	r3, [pc, #64]	; (800551c <DMA_SetConfig+0x7c>)
 80054dc:	430a      	orrs	r2, r1
 80054de:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	683a      	ldr	r2, [r7, #0]
 80054e6:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	689b      	ldr	r3, [r3, #8]
 80054ec:	2b10      	cmp	r3, #16
 80054ee:	d108      	bne.n	8005502 <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	687a      	ldr	r2, [r7, #4]
 80054f6:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	68ba      	ldr	r2, [r7, #8]
 80054fe:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005500:	e007      	b.n	8005512 <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	68ba      	ldr	r2, [r7, #8]
 8005508:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	687a      	ldr	r2, [r7, #4]
 8005510:	60da      	str	r2, [r3, #12]
}
 8005512:	46c0      	nop			; (mov r8, r8)
 8005514:	46bd      	mov	sp, r7
 8005516:	b004      	add	sp, #16
 8005518:	bd80      	pop	{r7, pc}
 800551a:	46c0      	nop			; (mov r8, r8)
 800551c:	40020000 	.word	0x40020000

08005520 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b084      	sub	sp, #16
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800552c:	089b      	lsrs	r3, r3, #2
 800552e:	4a10      	ldr	r2, [pc, #64]	; (8005570 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8005530:	4694      	mov	ip, r2
 8005532:	4463      	add	r3, ip
 8005534:	009b      	lsls	r3, r3, #2
 8005536:	001a      	movs	r2, r3
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	001a      	movs	r2, r3
 8005542:	23ff      	movs	r3, #255	; 0xff
 8005544:	4013      	ands	r3, r2
 8005546:	3b08      	subs	r3, #8
 8005548:	2114      	movs	r1, #20
 800554a:	0018      	movs	r0, r3
 800554c:	f7fa fdfe 	bl	800014c <__udivsi3>
 8005550:	0003      	movs	r3, r0
 8005552:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	4a07      	ldr	r2, [pc, #28]	; (8005574 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8005558:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	221f      	movs	r2, #31
 800555e:	4013      	ands	r3, r2
 8005560:	2201      	movs	r2, #1
 8005562:	409a      	lsls	r2, r3
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8005568:	46c0      	nop			; (mov r8, r8)
 800556a:	46bd      	mov	sp, r7
 800556c:	b004      	add	sp, #16
 800556e:	bd80      	pop	{r7, pc}
 8005570:	10008200 	.word	0x10008200
 8005574:	40020880 	.word	0x40020880

08005578 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b084      	sub	sp, #16
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	685b      	ldr	r3, [r3, #4]
 8005584:	223f      	movs	r2, #63	; 0x3f
 8005586:	4013      	ands	r3, r2
 8005588:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	4a0a      	ldr	r2, [pc, #40]	; (80055b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800558e:	4694      	mov	ip, r2
 8005590:	4463      	add	r3, ip
 8005592:	009b      	lsls	r3, r3, #2
 8005594:	001a      	movs	r2, r3
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	4a07      	ldr	r2, [pc, #28]	; (80055bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800559e:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	3b01      	subs	r3, #1
 80055a4:	2203      	movs	r2, #3
 80055a6:	4013      	ands	r3, r2
 80055a8:	2201      	movs	r2, #1
 80055aa:	409a      	lsls	r2, r3
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	659a      	str	r2, [r3, #88]	; 0x58
}
 80055b0:	46c0      	nop			; (mov r8, r8)
 80055b2:	46bd      	mov	sp, r7
 80055b4:	b004      	add	sp, #16
 80055b6:	bd80      	pop	{r7, pc}
 80055b8:	1000823f 	.word	0x1000823f
 80055bc:	40020940 	.word	0x40020940

080055c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b086      	sub	sp, #24
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
 80055c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80055ca:	2300      	movs	r3, #0
 80055cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80055ce:	e147      	b.n	8005860 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	2101      	movs	r1, #1
 80055d6:	697a      	ldr	r2, [r7, #20]
 80055d8:	4091      	lsls	r1, r2
 80055da:	000a      	movs	r2, r1
 80055dc:	4013      	ands	r3, r2
 80055de:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d100      	bne.n	80055e8 <HAL_GPIO_Init+0x28>
 80055e6:	e138      	b.n	800585a <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	685b      	ldr	r3, [r3, #4]
 80055ec:	2203      	movs	r2, #3
 80055ee:	4013      	ands	r3, r2
 80055f0:	2b01      	cmp	r3, #1
 80055f2:	d005      	beq.n	8005600 <HAL_GPIO_Init+0x40>
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	685b      	ldr	r3, [r3, #4]
 80055f8:	2203      	movs	r2, #3
 80055fa:	4013      	ands	r3, r2
 80055fc:	2b02      	cmp	r3, #2
 80055fe:	d130      	bne.n	8005662 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	689b      	ldr	r3, [r3, #8]
 8005604:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005606:	697b      	ldr	r3, [r7, #20]
 8005608:	005b      	lsls	r3, r3, #1
 800560a:	2203      	movs	r2, #3
 800560c:	409a      	lsls	r2, r3
 800560e:	0013      	movs	r3, r2
 8005610:	43da      	mvns	r2, r3
 8005612:	693b      	ldr	r3, [r7, #16]
 8005614:	4013      	ands	r3, r2
 8005616:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	68da      	ldr	r2, [r3, #12]
 800561c:	697b      	ldr	r3, [r7, #20]
 800561e:	005b      	lsls	r3, r3, #1
 8005620:	409a      	lsls	r2, r3
 8005622:	0013      	movs	r3, r2
 8005624:	693a      	ldr	r2, [r7, #16]
 8005626:	4313      	orrs	r3, r2
 8005628:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	693a      	ldr	r2, [r7, #16]
 800562e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	685b      	ldr	r3, [r3, #4]
 8005634:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005636:	2201      	movs	r2, #1
 8005638:	697b      	ldr	r3, [r7, #20]
 800563a:	409a      	lsls	r2, r3
 800563c:	0013      	movs	r3, r2
 800563e:	43da      	mvns	r2, r3
 8005640:	693b      	ldr	r3, [r7, #16]
 8005642:	4013      	ands	r3, r2
 8005644:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	685b      	ldr	r3, [r3, #4]
 800564a:	091b      	lsrs	r3, r3, #4
 800564c:	2201      	movs	r2, #1
 800564e:	401a      	ands	r2, r3
 8005650:	697b      	ldr	r3, [r7, #20]
 8005652:	409a      	lsls	r2, r3
 8005654:	0013      	movs	r3, r2
 8005656:	693a      	ldr	r2, [r7, #16]
 8005658:	4313      	orrs	r3, r2
 800565a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	693a      	ldr	r2, [r7, #16]
 8005660:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	685b      	ldr	r3, [r3, #4]
 8005666:	2203      	movs	r2, #3
 8005668:	4013      	ands	r3, r2
 800566a:	2b03      	cmp	r3, #3
 800566c:	d017      	beq.n	800569e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	68db      	ldr	r3, [r3, #12]
 8005672:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8005674:	697b      	ldr	r3, [r7, #20]
 8005676:	005b      	lsls	r3, r3, #1
 8005678:	2203      	movs	r2, #3
 800567a:	409a      	lsls	r2, r3
 800567c:	0013      	movs	r3, r2
 800567e:	43da      	mvns	r2, r3
 8005680:	693b      	ldr	r3, [r7, #16]
 8005682:	4013      	ands	r3, r2
 8005684:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	689a      	ldr	r2, [r3, #8]
 800568a:	697b      	ldr	r3, [r7, #20]
 800568c:	005b      	lsls	r3, r3, #1
 800568e:	409a      	lsls	r2, r3
 8005690:	0013      	movs	r3, r2
 8005692:	693a      	ldr	r2, [r7, #16]
 8005694:	4313      	orrs	r3, r2
 8005696:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	693a      	ldr	r2, [r7, #16]
 800569c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	685b      	ldr	r3, [r3, #4]
 80056a2:	2203      	movs	r2, #3
 80056a4:	4013      	ands	r3, r2
 80056a6:	2b02      	cmp	r3, #2
 80056a8:	d123      	bne.n	80056f2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80056aa:	697b      	ldr	r3, [r7, #20]
 80056ac:	08da      	lsrs	r2, r3, #3
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	3208      	adds	r2, #8
 80056b2:	0092      	lsls	r2, r2, #2
 80056b4:	58d3      	ldr	r3, [r2, r3]
 80056b6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80056b8:	697b      	ldr	r3, [r7, #20]
 80056ba:	2207      	movs	r2, #7
 80056bc:	4013      	ands	r3, r2
 80056be:	009b      	lsls	r3, r3, #2
 80056c0:	220f      	movs	r2, #15
 80056c2:	409a      	lsls	r2, r3
 80056c4:	0013      	movs	r3, r2
 80056c6:	43da      	mvns	r2, r3
 80056c8:	693b      	ldr	r3, [r7, #16]
 80056ca:	4013      	ands	r3, r2
 80056cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	691a      	ldr	r2, [r3, #16]
 80056d2:	697b      	ldr	r3, [r7, #20]
 80056d4:	2107      	movs	r1, #7
 80056d6:	400b      	ands	r3, r1
 80056d8:	009b      	lsls	r3, r3, #2
 80056da:	409a      	lsls	r2, r3
 80056dc:	0013      	movs	r3, r2
 80056de:	693a      	ldr	r2, [r7, #16]
 80056e0:	4313      	orrs	r3, r2
 80056e2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80056e4:	697b      	ldr	r3, [r7, #20]
 80056e6:	08da      	lsrs	r2, r3, #3
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	3208      	adds	r2, #8
 80056ec:	0092      	lsls	r2, r2, #2
 80056ee:	6939      	ldr	r1, [r7, #16]
 80056f0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80056f8:	697b      	ldr	r3, [r7, #20]
 80056fa:	005b      	lsls	r3, r3, #1
 80056fc:	2203      	movs	r2, #3
 80056fe:	409a      	lsls	r2, r3
 8005700:	0013      	movs	r3, r2
 8005702:	43da      	mvns	r2, r3
 8005704:	693b      	ldr	r3, [r7, #16]
 8005706:	4013      	ands	r3, r2
 8005708:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	685b      	ldr	r3, [r3, #4]
 800570e:	2203      	movs	r2, #3
 8005710:	401a      	ands	r2, r3
 8005712:	697b      	ldr	r3, [r7, #20]
 8005714:	005b      	lsls	r3, r3, #1
 8005716:	409a      	lsls	r2, r3
 8005718:	0013      	movs	r3, r2
 800571a:	693a      	ldr	r2, [r7, #16]
 800571c:	4313      	orrs	r3, r2
 800571e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	693a      	ldr	r2, [r7, #16]
 8005724:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	685a      	ldr	r2, [r3, #4]
 800572a:	23c0      	movs	r3, #192	; 0xc0
 800572c:	029b      	lsls	r3, r3, #10
 800572e:	4013      	ands	r3, r2
 8005730:	d100      	bne.n	8005734 <HAL_GPIO_Init+0x174>
 8005732:	e092      	b.n	800585a <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8005734:	4a50      	ldr	r2, [pc, #320]	; (8005878 <HAL_GPIO_Init+0x2b8>)
 8005736:	697b      	ldr	r3, [r7, #20]
 8005738:	089b      	lsrs	r3, r3, #2
 800573a:	3318      	adds	r3, #24
 800573c:	009b      	lsls	r3, r3, #2
 800573e:	589b      	ldr	r3, [r3, r2]
 8005740:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8005742:	697b      	ldr	r3, [r7, #20]
 8005744:	2203      	movs	r2, #3
 8005746:	4013      	ands	r3, r2
 8005748:	00db      	lsls	r3, r3, #3
 800574a:	220f      	movs	r2, #15
 800574c:	409a      	lsls	r2, r3
 800574e:	0013      	movs	r3, r2
 8005750:	43da      	mvns	r2, r3
 8005752:	693b      	ldr	r3, [r7, #16]
 8005754:	4013      	ands	r3, r2
 8005756:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8005758:	687a      	ldr	r2, [r7, #4]
 800575a:	23a0      	movs	r3, #160	; 0xa0
 800575c:	05db      	lsls	r3, r3, #23
 800575e:	429a      	cmp	r2, r3
 8005760:	d013      	beq.n	800578a <HAL_GPIO_Init+0x1ca>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	4a45      	ldr	r2, [pc, #276]	; (800587c <HAL_GPIO_Init+0x2bc>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d00d      	beq.n	8005786 <HAL_GPIO_Init+0x1c6>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	4a44      	ldr	r2, [pc, #272]	; (8005880 <HAL_GPIO_Init+0x2c0>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d007      	beq.n	8005782 <HAL_GPIO_Init+0x1c2>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	4a43      	ldr	r2, [pc, #268]	; (8005884 <HAL_GPIO_Init+0x2c4>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d101      	bne.n	800577e <HAL_GPIO_Init+0x1be>
 800577a:	2303      	movs	r3, #3
 800577c:	e006      	b.n	800578c <HAL_GPIO_Init+0x1cc>
 800577e:	2305      	movs	r3, #5
 8005780:	e004      	b.n	800578c <HAL_GPIO_Init+0x1cc>
 8005782:	2302      	movs	r3, #2
 8005784:	e002      	b.n	800578c <HAL_GPIO_Init+0x1cc>
 8005786:	2301      	movs	r3, #1
 8005788:	e000      	b.n	800578c <HAL_GPIO_Init+0x1cc>
 800578a:	2300      	movs	r3, #0
 800578c:	697a      	ldr	r2, [r7, #20]
 800578e:	2103      	movs	r1, #3
 8005790:	400a      	ands	r2, r1
 8005792:	00d2      	lsls	r2, r2, #3
 8005794:	4093      	lsls	r3, r2
 8005796:	693a      	ldr	r2, [r7, #16]
 8005798:	4313      	orrs	r3, r2
 800579a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 800579c:	4936      	ldr	r1, [pc, #216]	; (8005878 <HAL_GPIO_Init+0x2b8>)
 800579e:	697b      	ldr	r3, [r7, #20]
 80057a0:	089b      	lsrs	r3, r3, #2
 80057a2:	3318      	adds	r3, #24
 80057a4:	009b      	lsls	r3, r3, #2
 80057a6:	693a      	ldr	r2, [r7, #16]
 80057a8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80057aa:	4b33      	ldr	r3, [pc, #204]	; (8005878 <HAL_GPIO_Init+0x2b8>)
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	43da      	mvns	r2, r3
 80057b4:	693b      	ldr	r3, [r7, #16]
 80057b6:	4013      	ands	r3, r2
 80057b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	685a      	ldr	r2, [r3, #4]
 80057be:	2380      	movs	r3, #128	; 0x80
 80057c0:	035b      	lsls	r3, r3, #13
 80057c2:	4013      	ands	r3, r2
 80057c4:	d003      	beq.n	80057ce <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80057c6:	693a      	ldr	r2, [r7, #16]
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	4313      	orrs	r3, r2
 80057cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80057ce:	4b2a      	ldr	r3, [pc, #168]	; (8005878 <HAL_GPIO_Init+0x2b8>)
 80057d0:	693a      	ldr	r2, [r7, #16]
 80057d2:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80057d4:	4b28      	ldr	r3, [pc, #160]	; (8005878 <HAL_GPIO_Init+0x2b8>)
 80057d6:	685b      	ldr	r3, [r3, #4]
 80057d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	43da      	mvns	r2, r3
 80057de:	693b      	ldr	r3, [r7, #16]
 80057e0:	4013      	ands	r3, r2
 80057e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	685a      	ldr	r2, [r3, #4]
 80057e8:	2380      	movs	r3, #128	; 0x80
 80057ea:	039b      	lsls	r3, r3, #14
 80057ec:	4013      	ands	r3, r2
 80057ee:	d003      	beq.n	80057f8 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80057f0:	693a      	ldr	r2, [r7, #16]
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	4313      	orrs	r3, r2
 80057f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80057f8:	4b1f      	ldr	r3, [pc, #124]	; (8005878 <HAL_GPIO_Init+0x2b8>)
 80057fa:	693a      	ldr	r2, [r7, #16]
 80057fc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80057fe:	4a1e      	ldr	r2, [pc, #120]	; (8005878 <HAL_GPIO_Init+0x2b8>)
 8005800:	2384      	movs	r3, #132	; 0x84
 8005802:	58d3      	ldr	r3, [r2, r3]
 8005804:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	43da      	mvns	r2, r3
 800580a:	693b      	ldr	r3, [r7, #16]
 800580c:	4013      	ands	r3, r2
 800580e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	685a      	ldr	r2, [r3, #4]
 8005814:	2380      	movs	r3, #128	; 0x80
 8005816:	029b      	lsls	r3, r3, #10
 8005818:	4013      	ands	r3, r2
 800581a:	d003      	beq.n	8005824 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 800581c:	693a      	ldr	r2, [r7, #16]
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	4313      	orrs	r3, r2
 8005822:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005824:	4914      	ldr	r1, [pc, #80]	; (8005878 <HAL_GPIO_Init+0x2b8>)
 8005826:	2284      	movs	r2, #132	; 0x84
 8005828:	693b      	ldr	r3, [r7, #16]
 800582a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 800582c:	4a12      	ldr	r2, [pc, #72]	; (8005878 <HAL_GPIO_Init+0x2b8>)
 800582e:	2380      	movs	r3, #128	; 0x80
 8005830:	58d3      	ldr	r3, [r2, r3]
 8005832:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	43da      	mvns	r2, r3
 8005838:	693b      	ldr	r3, [r7, #16]
 800583a:	4013      	ands	r3, r2
 800583c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	685a      	ldr	r2, [r3, #4]
 8005842:	2380      	movs	r3, #128	; 0x80
 8005844:	025b      	lsls	r3, r3, #9
 8005846:	4013      	ands	r3, r2
 8005848:	d003      	beq.n	8005852 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800584a:	693a      	ldr	r2, [r7, #16]
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	4313      	orrs	r3, r2
 8005850:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005852:	4909      	ldr	r1, [pc, #36]	; (8005878 <HAL_GPIO_Init+0x2b8>)
 8005854:	2280      	movs	r2, #128	; 0x80
 8005856:	693b      	ldr	r3, [r7, #16]
 8005858:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800585a:	697b      	ldr	r3, [r7, #20]
 800585c:	3301      	adds	r3, #1
 800585e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	681a      	ldr	r2, [r3, #0]
 8005864:	697b      	ldr	r3, [r7, #20]
 8005866:	40da      	lsrs	r2, r3
 8005868:	1e13      	subs	r3, r2, #0
 800586a:	d000      	beq.n	800586e <HAL_GPIO_Init+0x2ae>
 800586c:	e6b0      	b.n	80055d0 <HAL_GPIO_Init+0x10>
  }
}
 800586e:	46c0      	nop			; (mov r8, r8)
 8005870:	46c0      	nop			; (mov r8, r8)
 8005872:	46bd      	mov	sp, r7
 8005874:	b006      	add	sp, #24
 8005876:	bd80      	pop	{r7, pc}
 8005878:	40021800 	.word	0x40021800
 800587c:	50000400 	.word	0x50000400
 8005880:	50000800 	.word	0x50000800
 8005884:	50000c00 	.word	0x50000c00

08005888 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b082      	sub	sp, #8
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
 8005890:	0008      	movs	r0, r1
 8005892:	0011      	movs	r1, r2
 8005894:	1cbb      	adds	r3, r7, #2
 8005896:	1c02      	adds	r2, r0, #0
 8005898:	801a      	strh	r2, [r3, #0]
 800589a:	1c7b      	adds	r3, r7, #1
 800589c:	1c0a      	adds	r2, r1, #0
 800589e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80058a0:	1c7b      	adds	r3, r7, #1
 80058a2:	781b      	ldrb	r3, [r3, #0]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d004      	beq.n	80058b2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80058a8:	1cbb      	adds	r3, r7, #2
 80058aa:	881a      	ldrh	r2, [r3, #0]
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80058b0:	e003      	b.n	80058ba <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80058b2:	1cbb      	adds	r3, r7, #2
 80058b4:	881a      	ldrh	r2, [r3, #0]
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80058ba:	46c0      	nop			; (mov r8, r8)
 80058bc:	46bd      	mov	sp, r7
 80058be:	b002      	add	sp, #8
 80058c0:	bd80      	pop	{r7, pc}
	...

080058c4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b082      	sub	sp, #8
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	0002      	movs	r2, r0
 80058cc:	1dbb      	adds	r3, r7, #6
 80058ce:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 80058d0:	4b10      	ldr	r3, [pc, #64]	; (8005914 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80058d2:	68db      	ldr	r3, [r3, #12]
 80058d4:	1dba      	adds	r2, r7, #6
 80058d6:	8812      	ldrh	r2, [r2, #0]
 80058d8:	4013      	ands	r3, r2
 80058da:	d008      	beq.n	80058ee <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 80058dc:	4b0d      	ldr	r3, [pc, #52]	; (8005914 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80058de:	1dba      	adds	r2, r7, #6
 80058e0:	8812      	ldrh	r2, [r2, #0]
 80058e2:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 80058e4:	1dbb      	adds	r3, r7, #6
 80058e6:	881b      	ldrh	r3, [r3, #0]
 80058e8:	0018      	movs	r0, r3
 80058ea:	f7fd fff3 	bl	80038d4 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 80058ee:	4b09      	ldr	r3, [pc, #36]	; (8005914 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80058f0:	691b      	ldr	r3, [r3, #16]
 80058f2:	1dba      	adds	r2, r7, #6
 80058f4:	8812      	ldrh	r2, [r2, #0]
 80058f6:	4013      	ands	r3, r2
 80058f8:	d008      	beq.n	800590c <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 80058fa:	4b06      	ldr	r3, [pc, #24]	; (8005914 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80058fc:	1dba      	adds	r2, r7, #6
 80058fe:	8812      	ldrh	r2, [r2, #0]
 8005900:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8005902:	1dbb      	adds	r3, r7, #6
 8005904:	881b      	ldrh	r3, [r3, #0]
 8005906:	0018      	movs	r0, r3
 8005908:	f7fd fff6 	bl	80038f8 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 800590c:	46c0      	nop			; (mov r8, r8)
 800590e:	46bd      	mov	sp, r7
 8005910:	b002      	add	sp, #8
 8005912:	bd80      	pop	{r7, pc}
 8005914:	40021800 	.word	0x40021800

08005918 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b082      	sub	sp, #8
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d101      	bne.n	800592a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005926:	2301      	movs	r3, #1
 8005928:	e082      	b.n	8005a30 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2241      	movs	r2, #65	; 0x41
 800592e:	5c9b      	ldrb	r3, [r3, r2]
 8005930:	b2db      	uxtb	r3, r3
 8005932:	2b00      	cmp	r3, #0
 8005934:	d107      	bne.n	8005946 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2240      	movs	r2, #64	; 0x40
 800593a:	2100      	movs	r1, #0
 800593c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	0018      	movs	r0, r3
 8005942:	f7fe ff7f 	bl	8004844 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2241      	movs	r2, #65	; 0x41
 800594a:	2124      	movs	r1, #36	; 0x24
 800594c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	681a      	ldr	r2, [r3, #0]
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	2101      	movs	r1, #1
 800595a:	438a      	bics	r2, r1
 800595c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	685a      	ldr	r2, [r3, #4]
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	4934      	ldr	r1, [pc, #208]	; (8005a38 <HAL_I2C_Init+0x120>)
 8005968:	400a      	ands	r2, r1
 800596a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	689a      	ldr	r2, [r3, #8]
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	4931      	ldr	r1, [pc, #196]	; (8005a3c <HAL_I2C_Init+0x124>)
 8005978:	400a      	ands	r2, r1
 800597a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	68db      	ldr	r3, [r3, #12]
 8005980:	2b01      	cmp	r3, #1
 8005982:	d108      	bne.n	8005996 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	689a      	ldr	r2, [r3, #8]
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	2180      	movs	r1, #128	; 0x80
 800598e:	0209      	lsls	r1, r1, #8
 8005990:	430a      	orrs	r2, r1
 8005992:	609a      	str	r2, [r3, #8]
 8005994:	e007      	b.n	80059a6 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	689a      	ldr	r2, [r3, #8]
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	2184      	movs	r1, #132	; 0x84
 80059a0:	0209      	lsls	r1, r1, #8
 80059a2:	430a      	orrs	r2, r1
 80059a4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	68db      	ldr	r3, [r3, #12]
 80059aa:	2b02      	cmp	r3, #2
 80059ac:	d104      	bne.n	80059b8 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	2280      	movs	r2, #128	; 0x80
 80059b4:	0112      	lsls	r2, r2, #4
 80059b6:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	685a      	ldr	r2, [r3, #4]
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	491f      	ldr	r1, [pc, #124]	; (8005a40 <HAL_I2C_Init+0x128>)
 80059c4:	430a      	orrs	r2, r1
 80059c6:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	68da      	ldr	r2, [r3, #12]
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	491a      	ldr	r1, [pc, #104]	; (8005a3c <HAL_I2C_Init+0x124>)
 80059d4:	400a      	ands	r2, r1
 80059d6:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	691a      	ldr	r2, [r3, #16]
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	695b      	ldr	r3, [r3, #20]
 80059e0:	431a      	orrs	r2, r3
 80059e2:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	699b      	ldr	r3, [r3, #24]
 80059e8:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	430a      	orrs	r2, r1
 80059f0:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	69d9      	ldr	r1, [r3, #28]
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6a1a      	ldr	r2, [r3, #32]
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	430a      	orrs	r2, r1
 8005a00:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	681a      	ldr	r2, [r3, #0]
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	2101      	movs	r1, #1
 8005a0e:	430a      	orrs	r2, r1
 8005a10:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2200      	movs	r2, #0
 8005a16:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2241      	movs	r2, #65	; 0x41
 8005a1c:	2120      	movs	r1, #32
 8005a1e:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2200      	movs	r2, #0
 8005a24:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2242      	movs	r2, #66	; 0x42
 8005a2a:	2100      	movs	r1, #0
 8005a2c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005a2e:	2300      	movs	r3, #0
}
 8005a30:	0018      	movs	r0, r3
 8005a32:	46bd      	mov	sp, r7
 8005a34:	b002      	add	sp, #8
 8005a36:	bd80      	pop	{r7, pc}
 8005a38:	f0ffffff 	.word	0xf0ffffff
 8005a3c:	ffff7fff 	.word	0xffff7fff
 8005a40:	02008000 	.word	0x02008000

08005a44 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a44:	b590      	push	{r4, r7, lr}
 8005a46:	b089      	sub	sp, #36	; 0x24
 8005a48:	af02      	add	r7, sp, #8
 8005a4a:	60f8      	str	r0, [r7, #12]
 8005a4c:	000c      	movs	r4, r1
 8005a4e:	0010      	movs	r0, r2
 8005a50:	0019      	movs	r1, r3
 8005a52:	230a      	movs	r3, #10
 8005a54:	18fb      	adds	r3, r7, r3
 8005a56:	1c22      	adds	r2, r4, #0
 8005a58:	801a      	strh	r2, [r3, #0]
 8005a5a:	2308      	movs	r3, #8
 8005a5c:	18fb      	adds	r3, r7, r3
 8005a5e:	1c02      	adds	r2, r0, #0
 8005a60:	801a      	strh	r2, [r3, #0]
 8005a62:	1dbb      	adds	r3, r7, #6
 8005a64:	1c0a      	adds	r2, r1, #0
 8005a66:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	2241      	movs	r2, #65	; 0x41
 8005a6c:	5c9b      	ldrb	r3, [r3, r2]
 8005a6e:	b2db      	uxtb	r3, r3
 8005a70:	2b20      	cmp	r3, #32
 8005a72:	d000      	beq.n	8005a76 <HAL_I2C_Mem_Write+0x32>
 8005a74:	e10c      	b.n	8005c90 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d004      	beq.n	8005a86 <HAL_I2C_Mem_Write+0x42>
 8005a7c:	232c      	movs	r3, #44	; 0x2c
 8005a7e:	18fb      	adds	r3, r7, r3
 8005a80:	881b      	ldrh	r3, [r3, #0]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d105      	bne.n	8005a92 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	2280      	movs	r2, #128	; 0x80
 8005a8a:	0092      	lsls	r2, r2, #2
 8005a8c:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005a8e:	2301      	movs	r3, #1
 8005a90:	e0ff      	b.n	8005c92 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	2240      	movs	r2, #64	; 0x40
 8005a96:	5c9b      	ldrb	r3, [r3, r2]
 8005a98:	2b01      	cmp	r3, #1
 8005a9a:	d101      	bne.n	8005aa0 <HAL_I2C_Mem_Write+0x5c>
 8005a9c:	2302      	movs	r3, #2
 8005a9e:	e0f8      	b.n	8005c92 <HAL_I2C_Mem_Write+0x24e>
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	2240      	movs	r2, #64	; 0x40
 8005aa4:	2101      	movs	r1, #1
 8005aa6:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005aa8:	f7ff f9fa 	bl	8004ea0 <HAL_GetTick>
 8005aac:	0003      	movs	r3, r0
 8005aae:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005ab0:	2380      	movs	r3, #128	; 0x80
 8005ab2:	0219      	lsls	r1, r3, #8
 8005ab4:	68f8      	ldr	r0, [r7, #12]
 8005ab6:	697b      	ldr	r3, [r7, #20]
 8005ab8:	9300      	str	r3, [sp, #0]
 8005aba:	2319      	movs	r3, #25
 8005abc:	2201      	movs	r2, #1
 8005abe:	f000 fb0b 	bl	80060d8 <I2C_WaitOnFlagUntilTimeout>
 8005ac2:	1e03      	subs	r3, r0, #0
 8005ac4:	d001      	beq.n	8005aca <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	e0e3      	b.n	8005c92 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	2241      	movs	r2, #65	; 0x41
 8005ace:	2121      	movs	r1, #33	; 0x21
 8005ad0:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	2242      	movs	r2, #66	; 0x42
 8005ad6:	2140      	movs	r1, #64	; 0x40
 8005ad8:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	2200      	movs	r2, #0
 8005ade:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005ae4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	222c      	movs	r2, #44	; 0x2c
 8005aea:	18ba      	adds	r2, r7, r2
 8005aec:	8812      	ldrh	r2, [r2, #0]
 8005aee:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	2200      	movs	r2, #0
 8005af4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005af6:	1dbb      	adds	r3, r7, #6
 8005af8:	881c      	ldrh	r4, [r3, #0]
 8005afa:	2308      	movs	r3, #8
 8005afc:	18fb      	adds	r3, r7, r3
 8005afe:	881a      	ldrh	r2, [r3, #0]
 8005b00:	230a      	movs	r3, #10
 8005b02:	18fb      	adds	r3, r7, r3
 8005b04:	8819      	ldrh	r1, [r3, #0]
 8005b06:	68f8      	ldr	r0, [r7, #12]
 8005b08:	697b      	ldr	r3, [r7, #20]
 8005b0a:	9301      	str	r3, [sp, #4]
 8005b0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b0e:	9300      	str	r3, [sp, #0]
 8005b10:	0023      	movs	r3, r4
 8005b12:	f000 f9f9 	bl	8005f08 <I2C_RequestMemoryWrite>
 8005b16:	1e03      	subs	r3, r0, #0
 8005b18:	d005      	beq.n	8005b26 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	2240      	movs	r2, #64	; 0x40
 8005b1e:	2100      	movs	r1, #0
 8005b20:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8005b22:	2301      	movs	r3, #1
 8005b24:	e0b5      	b.n	8005c92 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b2a:	b29b      	uxth	r3, r3
 8005b2c:	2bff      	cmp	r3, #255	; 0xff
 8005b2e:	d911      	bls.n	8005b54 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	22ff      	movs	r2, #255	; 0xff
 8005b34:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b3a:	b2da      	uxtb	r2, r3
 8005b3c:	2380      	movs	r3, #128	; 0x80
 8005b3e:	045c      	lsls	r4, r3, #17
 8005b40:	230a      	movs	r3, #10
 8005b42:	18fb      	adds	r3, r7, r3
 8005b44:	8819      	ldrh	r1, [r3, #0]
 8005b46:	68f8      	ldr	r0, [r7, #12]
 8005b48:	2300      	movs	r3, #0
 8005b4a:	9300      	str	r3, [sp, #0]
 8005b4c:	0023      	movs	r3, r4
 8005b4e:	f000 fc89 	bl	8006464 <I2C_TransferConfig>
 8005b52:	e012      	b.n	8005b7a <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b58:	b29a      	uxth	r2, r3
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b62:	b2da      	uxtb	r2, r3
 8005b64:	2380      	movs	r3, #128	; 0x80
 8005b66:	049c      	lsls	r4, r3, #18
 8005b68:	230a      	movs	r3, #10
 8005b6a:	18fb      	adds	r3, r7, r3
 8005b6c:	8819      	ldrh	r1, [r3, #0]
 8005b6e:	68f8      	ldr	r0, [r7, #12]
 8005b70:	2300      	movs	r3, #0
 8005b72:	9300      	str	r3, [sp, #0]
 8005b74:	0023      	movs	r3, r4
 8005b76:	f000 fc75 	bl	8006464 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005b7a:	697a      	ldr	r2, [r7, #20]
 8005b7c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	0018      	movs	r0, r3
 8005b82:	f000 fae8 	bl	8006156 <I2C_WaitOnTXISFlagUntilTimeout>
 8005b86:	1e03      	subs	r3, r0, #0
 8005b88:	d001      	beq.n	8005b8e <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8005b8a:	2301      	movs	r3, #1
 8005b8c:	e081      	b.n	8005c92 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b92:	781a      	ldrb	r2, [r3, #0]
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b9e:	1c5a      	adds	r2, r3, #1
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ba8:	b29b      	uxth	r3, r3
 8005baa:	3b01      	subs	r3, #1
 8005bac:	b29a      	uxth	r2, r3
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bb6:	3b01      	subs	r3, #1
 8005bb8:	b29a      	uxth	r2, r3
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bc2:	b29b      	uxth	r3, r3
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d03a      	beq.n	8005c3e <HAL_I2C_Mem_Write+0x1fa>
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d136      	bne.n	8005c3e <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005bd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005bd2:	68f8      	ldr	r0, [r7, #12]
 8005bd4:	697b      	ldr	r3, [r7, #20]
 8005bd6:	9300      	str	r3, [sp, #0]
 8005bd8:	0013      	movs	r3, r2
 8005bda:	2200      	movs	r2, #0
 8005bdc:	2180      	movs	r1, #128	; 0x80
 8005bde:	f000 fa7b 	bl	80060d8 <I2C_WaitOnFlagUntilTimeout>
 8005be2:	1e03      	subs	r3, r0, #0
 8005be4:	d001      	beq.n	8005bea <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8005be6:	2301      	movs	r3, #1
 8005be8:	e053      	b.n	8005c92 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bee:	b29b      	uxth	r3, r3
 8005bf0:	2bff      	cmp	r3, #255	; 0xff
 8005bf2:	d911      	bls.n	8005c18 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	22ff      	movs	r2, #255	; 0xff
 8005bf8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bfe:	b2da      	uxtb	r2, r3
 8005c00:	2380      	movs	r3, #128	; 0x80
 8005c02:	045c      	lsls	r4, r3, #17
 8005c04:	230a      	movs	r3, #10
 8005c06:	18fb      	adds	r3, r7, r3
 8005c08:	8819      	ldrh	r1, [r3, #0]
 8005c0a:	68f8      	ldr	r0, [r7, #12]
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	9300      	str	r3, [sp, #0]
 8005c10:	0023      	movs	r3, r4
 8005c12:	f000 fc27 	bl	8006464 <I2C_TransferConfig>
 8005c16:	e012      	b.n	8005c3e <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c1c:	b29a      	uxth	r2, r3
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c26:	b2da      	uxtb	r2, r3
 8005c28:	2380      	movs	r3, #128	; 0x80
 8005c2a:	049c      	lsls	r4, r3, #18
 8005c2c:	230a      	movs	r3, #10
 8005c2e:	18fb      	adds	r3, r7, r3
 8005c30:	8819      	ldrh	r1, [r3, #0]
 8005c32:	68f8      	ldr	r0, [r7, #12]
 8005c34:	2300      	movs	r3, #0
 8005c36:	9300      	str	r3, [sp, #0]
 8005c38:	0023      	movs	r3, r4
 8005c3a:	f000 fc13 	bl	8006464 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c42:	b29b      	uxth	r3, r3
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d198      	bne.n	8005b7a <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c48:	697a      	ldr	r2, [r7, #20]
 8005c4a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	0018      	movs	r0, r3
 8005c50:	f000 fac0 	bl	80061d4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005c54:	1e03      	subs	r3, r0, #0
 8005c56:	d001      	beq.n	8005c5c <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8005c58:	2301      	movs	r3, #1
 8005c5a:	e01a      	b.n	8005c92 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	2220      	movs	r2, #32
 8005c62:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	685a      	ldr	r2, [r3, #4]
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	490b      	ldr	r1, [pc, #44]	; (8005c9c <HAL_I2C_Mem_Write+0x258>)
 8005c70:	400a      	ands	r2, r1
 8005c72:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	2241      	movs	r2, #65	; 0x41
 8005c78:	2120      	movs	r1, #32
 8005c7a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	2242      	movs	r2, #66	; 0x42
 8005c80:	2100      	movs	r1, #0
 8005c82:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	2240      	movs	r2, #64	; 0x40
 8005c88:	2100      	movs	r1, #0
 8005c8a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	e000      	b.n	8005c92 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8005c90:	2302      	movs	r3, #2
  }
}
 8005c92:	0018      	movs	r0, r3
 8005c94:	46bd      	mov	sp, r7
 8005c96:	b007      	add	sp, #28
 8005c98:	bd90      	pop	{r4, r7, pc}
 8005c9a:	46c0      	nop			; (mov r8, r8)
 8005c9c:	fe00e800 	.word	0xfe00e800

08005ca0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ca0:	b590      	push	{r4, r7, lr}
 8005ca2:	b089      	sub	sp, #36	; 0x24
 8005ca4:	af02      	add	r7, sp, #8
 8005ca6:	60f8      	str	r0, [r7, #12]
 8005ca8:	000c      	movs	r4, r1
 8005caa:	0010      	movs	r0, r2
 8005cac:	0019      	movs	r1, r3
 8005cae:	230a      	movs	r3, #10
 8005cb0:	18fb      	adds	r3, r7, r3
 8005cb2:	1c22      	adds	r2, r4, #0
 8005cb4:	801a      	strh	r2, [r3, #0]
 8005cb6:	2308      	movs	r3, #8
 8005cb8:	18fb      	adds	r3, r7, r3
 8005cba:	1c02      	adds	r2, r0, #0
 8005cbc:	801a      	strh	r2, [r3, #0]
 8005cbe:	1dbb      	adds	r3, r7, #6
 8005cc0:	1c0a      	adds	r2, r1, #0
 8005cc2:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	2241      	movs	r2, #65	; 0x41
 8005cc8:	5c9b      	ldrb	r3, [r3, r2]
 8005cca:	b2db      	uxtb	r3, r3
 8005ccc:	2b20      	cmp	r3, #32
 8005cce:	d000      	beq.n	8005cd2 <HAL_I2C_Mem_Read+0x32>
 8005cd0:	e110      	b.n	8005ef4 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8005cd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d004      	beq.n	8005ce2 <HAL_I2C_Mem_Read+0x42>
 8005cd8:	232c      	movs	r3, #44	; 0x2c
 8005cda:	18fb      	adds	r3, r7, r3
 8005cdc:	881b      	ldrh	r3, [r3, #0]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d105      	bne.n	8005cee <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	2280      	movs	r2, #128	; 0x80
 8005ce6:	0092      	lsls	r2, r2, #2
 8005ce8:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005cea:	2301      	movs	r3, #1
 8005cec:	e103      	b.n	8005ef6 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	2240      	movs	r2, #64	; 0x40
 8005cf2:	5c9b      	ldrb	r3, [r3, r2]
 8005cf4:	2b01      	cmp	r3, #1
 8005cf6:	d101      	bne.n	8005cfc <HAL_I2C_Mem_Read+0x5c>
 8005cf8:	2302      	movs	r3, #2
 8005cfa:	e0fc      	b.n	8005ef6 <HAL_I2C_Mem_Read+0x256>
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	2240      	movs	r2, #64	; 0x40
 8005d00:	2101      	movs	r1, #1
 8005d02:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005d04:	f7ff f8cc 	bl	8004ea0 <HAL_GetTick>
 8005d08:	0003      	movs	r3, r0
 8005d0a:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005d0c:	2380      	movs	r3, #128	; 0x80
 8005d0e:	0219      	lsls	r1, r3, #8
 8005d10:	68f8      	ldr	r0, [r7, #12]
 8005d12:	697b      	ldr	r3, [r7, #20]
 8005d14:	9300      	str	r3, [sp, #0]
 8005d16:	2319      	movs	r3, #25
 8005d18:	2201      	movs	r2, #1
 8005d1a:	f000 f9dd 	bl	80060d8 <I2C_WaitOnFlagUntilTimeout>
 8005d1e:	1e03      	subs	r3, r0, #0
 8005d20:	d001      	beq.n	8005d26 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8005d22:	2301      	movs	r3, #1
 8005d24:	e0e7      	b.n	8005ef6 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	2241      	movs	r2, #65	; 0x41
 8005d2a:	2122      	movs	r1, #34	; 0x22
 8005d2c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	2242      	movs	r2, #66	; 0x42
 8005d32:	2140      	movs	r1, #64	; 0x40
 8005d34:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	2200      	movs	r2, #0
 8005d3a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d40:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	222c      	movs	r2, #44	; 0x2c
 8005d46:	18ba      	adds	r2, r7, r2
 8005d48:	8812      	ldrh	r2, [r2, #0]
 8005d4a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	2200      	movs	r2, #0
 8005d50:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005d52:	1dbb      	adds	r3, r7, #6
 8005d54:	881c      	ldrh	r4, [r3, #0]
 8005d56:	2308      	movs	r3, #8
 8005d58:	18fb      	adds	r3, r7, r3
 8005d5a:	881a      	ldrh	r2, [r3, #0]
 8005d5c:	230a      	movs	r3, #10
 8005d5e:	18fb      	adds	r3, r7, r3
 8005d60:	8819      	ldrh	r1, [r3, #0]
 8005d62:	68f8      	ldr	r0, [r7, #12]
 8005d64:	697b      	ldr	r3, [r7, #20]
 8005d66:	9301      	str	r3, [sp, #4]
 8005d68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d6a:	9300      	str	r3, [sp, #0]
 8005d6c:	0023      	movs	r3, r4
 8005d6e:	f000 f92f 	bl	8005fd0 <I2C_RequestMemoryRead>
 8005d72:	1e03      	subs	r3, r0, #0
 8005d74:	d005      	beq.n	8005d82 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	2240      	movs	r2, #64	; 0x40
 8005d7a:	2100      	movs	r1, #0
 8005d7c:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8005d7e:	2301      	movs	r3, #1
 8005d80:	e0b9      	b.n	8005ef6 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d86:	b29b      	uxth	r3, r3
 8005d88:	2bff      	cmp	r3, #255	; 0xff
 8005d8a:	d911      	bls.n	8005db0 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	22ff      	movs	r2, #255	; 0xff
 8005d90:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d96:	b2da      	uxtb	r2, r3
 8005d98:	2380      	movs	r3, #128	; 0x80
 8005d9a:	045c      	lsls	r4, r3, #17
 8005d9c:	230a      	movs	r3, #10
 8005d9e:	18fb      	adds	r3, r7, r3
 8005da0:	8819      	ldrh	r1, [r3, #0]
 8005da2:	68f8      	ldr	r0, [r7, #12]
 8005da4:	4b56      	ldr	r3, [pc, #344]	; (8005f00 <HAL_I2C_Mem_Read+0x260>)
 8005da6:	9300      	str	r3, [sp, #0]
 8005da8:	0023      	movs	r3, r4
 8005daa:	f000 fb5b 	bl	8006464 <I2C_TransferConfig>
 8005dae:	e012      	b.n	8005dd6 <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005db4:	b29a      	uxth	r2, r3
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005dbe:	b2da      	uxtb	r2, r3
 8005dc0:	2380      	movs	r3, #128	; 0x80
 8005dc2:	049c      	lsls	r4, r3, #18
 8005dc4:	230a      	movs	r3, #10
 8005dc6:	18fb      	adds	r3, r7, r3
 8005dc8:	8819      	ldrh	r1, [r3, #0]
 8005dca:	68f8      	ldr	r0, [r7, #12]
 8005dcc:	4b4c      	ldr	r3, [pc, #304]	; (8005f00 <HAL_I2C_Mem_Read+0x260>)
 8005dce:	9300      	str	r3, [sp, #0]
 8005dd0:	0023      	movs	r3, r4
 8005dd2:	f000 fb47 	bl	8006464 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005dd6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005dd8:	68f8      	ldr	r0, [r7, #12]
 8005dda:	697b      	ldr	r3, [r7, #20]
 8005ddc:	9300      	str	r3, [sp, #0]
 8005dde:	0013      	movs	r3, r2
 8005de0:	2200      	movs	r2, #0
 8005de2:	2104      	movs	r1, #4
 8005de4:	f000 f978 	bl	80060d8 <I2C_WaitOnFlagUntilTimeout>
 8005de8:	1e03      	subs	r3, r0, #0
 8005dea:	d001      	beq.n	8005df0 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8005dec:	2301      	movs	r3, #1
 8005dee:	e082      	b.n	8005ef6 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dfa:	b2d2      	uxtb	r2, r2
 8005dfc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e02:	1c5a      	adds	r2, r3, #1
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e0c:	3b01      	subs	r3, #1
 8005e0e:	b29a      	uxth	r2, r3
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e18:	b29b      	uxth	r3, r3
 8005e1a:	3b01      	subs	r3, #1
 8005e1c:	b29a      	uxth	r2, r3
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e26:	b29b      	uxth	r3, r3
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d03a      	beq.n	8005ea2 <HAL_I2C_Mem_Read+0x202>
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d136      	bne.n	8005ea2 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005e34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e36:	68f8      	ldr	r0, [r7, #12]
 8005e38:	697b      	ldr	r3, [r7, #20]
 8005e3a:	9300      	str	r3, [sp, #0]
 8005e3c:	0013      	movs	r3, r2
 8005e3e:	2200      	movs	r2, #0
 8005e40:	2180      	movs	r1, #128	; 0x80
 8005e42:	f000 f949 	bl	80060d8 <I2C_WaitOnFlagUntilTimeout>
 8005e46:	1e03      	subs	r3, r0, #0
 8005e48:	d001      	beq.n	8005e4e <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8005e4a:	2301      	movs	r3, #1
 8005e4c:	e053      	b.n	8005ef6 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e52:	b29b      	uxth	r3, r3
 8005e54:	2bff      	cmp	r3, #255	; 0xff
 8005e56:	d911      	bls.n	8005e7c <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	22ff      	movs	r2, #255	; 0xff
 8005e5c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e62:	b2da      	uxtb	r2, r3
 8005e64:	2380      	movs	r3, #128	; 0x80
 8005e66:	045c      	lsls	r4, r3, #17
 8005e68:	230a      	movs	r3, #10
 8005e6a:	18fb      	adds	r3, r7, r3
 8005e6c:	8819      	ldrh	r1, [r3, #0]
 8005e6e:	68f8      	ldr	r0, [r7, #12]
 8005e70:	2300      	movs	r3, #0
 8005e72:	9300      	str	r3, [sp, #0]
 8005e74:	0023      	movs	r3, r4
 8005e76:	f000 faf5 	bl	8006464 <I2C_TransferConfig>
 8005e7a:	e012      	b.n	8005ea2 <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e80:	b29a      	uxth	r2, r3
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e8a:	b2da      	uxtb	r2, r3
 8005e8c:	2380      	movs	r3, #128	; 0x80
 8005e8e:	049c      	lsls	r4, r3, #18
 8005e90:	230a      	movs	r3, #10
 8005e92:	18fb      	adds	r3, r7, r3
 8005e94:	8819      	ldrh	r1, [r3, #0]
 8005e96:	68f8      	ldr	r0, [r7, #12]
 8005e98:	2300      	movs	r3, #0
 8005e9a:	9300      	str	r3, [sp, #0]
 8005e9c:	0023      	movs	r3, r4
 8005e9e:	f000 fae1 	bl	8006464 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ea6:	b29b      	uxth	r3, r3
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d194      	bne.n	8005dd6 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005eac:	697a      	ldr	r2, [r7, #20]
 8005eae:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	0018      	movs	r0, r3
 8005eb4:	f000 f98e 	bl	80061d4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005eb8:	1e03      	subs	r3, r0, #0
 8005eba:	d001      	beq.n	8005ec0 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8005ebc:	2301      	movs	r3, #1
 8005ebe:	e01a      	b.n	8005ef6 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	2220      	movs	r2, #32
 8005ec6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	685a      	ldr	r2, [r3, #4]
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	490c      	ldr	r1, [pc, #48]	; (8005f04 <HAL_I2C_Mem_Read+0x264>)
 8005ed4:	400a      	ands	r2, r1
 8005ed6:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	2241      	movs	r2, #65	; 0x41
 8005edc:	2120      	movs	r1, #32
 8005ede:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	2242      	movs	r2, #66	; 0x42
 8005ee4:	2100      	movs	r1, #0
 8005ee6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	2240      	movs	r2, #64	; 0x40
 8005eec:	2100      	movs	r1, #0
 8005eee:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	e000      	b.n	8005ef6 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8005ef4:	2302      	movs	r3, #2
  }
}
 8005ef6:	0018      	movs	r0, r3
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	b007      	add	sp, #28
 8005efc:	bd90      	pop	{r4, r7, pc}
 8005efe:	46c0      	nop			; (mov r8, r8)
 8005f00:	80002400 	.word	0x80002400
 8005f04:	fe00e800 	.word	0xfe00e800

08005f08 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8005f08:	b5b0      	push	{r4, r5, r7, lr}
 8005f0a:	b086      	sub	sp, #24
 8005f0c:	af02      	add	r7, sp, #8
 8005f0e:	60f8      	str	r0, [r7, #12]
 8005f10:	000c      	movs	r4, r1
 8005f12:	0010      	movs	r0, r2
 8005f14:	0019      	movs	r1, r3
 8005f16:	250a      	movs	r5, #10
 8005f18:	197b      	adds	r3, r7, r5
 8005f1a:	1c22      	adds	r2, r4, #0
 8005f1c:	801a      	strh	r2, [r3, #0]
 8005f1e:	2308      	movs	r3, #8
 8005f20:	18fb      	adds	r3, r7, r3
 8005f22:	1c02      	adds	r2, r0, #0
 8005f24:	801a      	strh	r2, [r3, #0]
 8005f26:	1dbb      	adds	r3, r7, #6
 8005f28:	1c0a      	adds	r2, r1, #0
 8005f2a:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005f2c:	1dbb      	adds	r3, r7, #6
 8005f2e:	881b      	ldrh	r3, [r3, #0]
 8005f30:	b2da      	uxtb	r2, r3
 8005f32:	2380      	movs	r3, #128	; 0x80
 8005f34:	045c      	lsls	r4, r3, #17
 8005f36:	197b      	adds	r3, r7, r5
 8005f38:	8819      	ldrh	r1, [r3, #0]
 8005f3a:	68f8      	ldr	r0, [r7, #12]
 8005f3c:	4b23      	ldr	r3, [pc, #140]	; (8005fcc <I2C_RequestMemoryWrite+0xc4>)
 8005f3e:	9300      	str	r3, [sp, #0]
 8005f40:	0023      	movs	r3, r4
 8005f42:	f000 fa8f 	bl	8006464 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005f46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f48:	6a39      	ldr	r1, [r7, #32]
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	0018      	movs	r0, r3
 8005f4e:	f000 f902 	bl	8006156 <I2C_WaitOnTXISFlagUntilTimeout>
 8005f52:	1e03      	subs	r3, r0, #0
 8005f54:	d001      	beq.n	8005f5a <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8005f56:	2301      	movs	r3, #1
 8005f58:	e033      	b.n	8005fc2 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005f5a:	1dbb      	adds	r3, r7, #6
 8005f5c:	881b      	ldrh	r3, [r3, #0]
 8005f5e:	2b01      	cmp	r3, #1
 8005f60:	d107      	bne.n	8005f72 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005f62:	2308      	movs	r3, #8
 8005f64:	18fb      	adds	r3, r7, r3
 8005f66:	881b      	ldrh	r3, [r3, #0]
 8005f68:	b2da      	uxtb	r2, r3
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	629a      	str	r2, [r3, #40]	; 0x28
 8005f70:	e019      	b.n	8005fa6 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005f72:	2308      	movs	r3, #8
 8005f74:	18fb      	adds	r3, r7, r3
 8005f76:	881b      	ldrh	r3, [r3, #0]
 8005f78:	0a1b      	lsrs	r3, r3, #8
 8005f7a:	b29b      	uxth	r3, r3
 8005f7c:	b2da      	uxtb	r2, r3
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005f84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f86:	6a39      	ldr	r1, [r7, #32]
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	0018      	movs	r0, r3
 8005f8c:	f000 f8e3 	bl	8006156 <I2C_WaitOnTXISFlagUntilTimeout>
 8005f90:	1e03      	subs	r3, r0, #0
 8005f92:	d001      	beq.n	8005f98 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8005f94:	2301      	movs	r3, #1
 8005f96:	e014      	b.n	8005fc2 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005f98:	2308      	movs	r3, #8
 8005f9a:	18fb      	adds	r3, r7, r3
 8005f9c:	881b      	ldrh	r3, [r3, #0]
 8005f9e:	b2da      	uxtb	r2, r3
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005fa6:	6a3a      	ldr	r2, [r7, #32]
 8005fa8:	68f8      	ldr	r0, [r7, #12]
 8005faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fac:	9300      	str	r3, [sp, #0]
 8005fae:	0013      	movs	r3, r2
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	2180      	movs	r1, #128	; 0x80
 8005fb4:	f000 f890 	bl	80060d8 <I2C_WaitOnFlagUntilTimeout>
 8005fb8:	1e03      	subs	r3, r0, #0
 8005fba:	d001      	beq.n	8005fc0 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8005fbc:	2301      	movs	r3, #1
 8005fbe:	e000      	b.n	8005fc2 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8005fc0:	2300      	movs	r3, #0
}
 8005fc2:	0018      	movs	r0, r3
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	b004      	add	sp, #16
 8005fc8:	bdb0      	pop	{r4, r5, r7, pc}
 8005fca:	46c0      	nop			; (mov r8, r8)
 8005fcc:	80002000 	.word	0x80002000

08005fd0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8005fd0:	b5b0      	push	{r4, r5, r7, lr}
 8005fd2:	b086      	sub	sp, #24
 8005fd4:	af02      	add	r7, sp, #8
 8005fd6:	60f8      	str	r0, [r7, #12]
 8005fd8:	000c      	movs	r4, r1
 8005fda:	0010      	movs	r0, r2
 8005fdc:	0019      	movs	r1, r3
 8005fde:	250a      	movs	r5, #10
 8005fe0:	197b      	adds	r3, r7, r5
 8005fe2:	1c22      	adds	r2, r4, #0
 8005fe4:	801a      	strh	r2, [r3, #0]
 8005fe6:	2308      	movs	r3, #8
 8005fe8:	18fb      	adds	r3, r7, r3
 8005fea:	1c02      	adds	r2, r0, #0
 8005fec:	801a      	strh	r2, [r3, #0]
 8005fee:	1dbb      	adds	r3, r7, #6
 8005ff0:	1c0a      	adds	r2, r1, #0
 8005ff2:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005ff4:	1dbb      	adds	r3, r7, #6
 8005ff6:	881b      	ldrh	r3, [r3, #0]
 8005ff8:	b2da      	uxtb	r2, r3
 8005ffa:	197b      	adds	r3, r7, r5
 8005ffc:	8819      	ldrh	r1, [r3, #0]
 8005ffe:	68f8      	ldr	r0, [r7, #12]
 8006000:	4b23      	ldr	r3, [pc, #140]	; (8006090 <I2C_RequestMemoryRead+0xc0>)
 8006002:	9300      	str	r3, [sp, #0]
 8006004:	2300      	movs	r3, #0
 8006006:	f000 fa2d 	bl	8006464 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800600a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800600c:	6a39      	ldr	r1, [r7, #32]
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	0018      	movs	r0, r3
 8006012:	f000 f8a0 	bl	8006156 <I2C_WaitOnTXISFlagUntilTimeout>
 8006016:	1e03      	subs	r3, r0, #0
 8006018:	d001      	beq.n	800601e <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 800601a:	2301      	movs	r3, #1
 800601c:	e033      	b.n	8006086 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800601e:	1dbb      	adds	r3, r7, #6
 8006020:	881b      	ldrh	r3, [r3, #0]
 8006022:	2b01      	cmp	r3, #1
 8006024:	d107      	bne.n	8006036 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006026:	2308      	movs	r3, #8
 8006028:	18fb      	adds	r3, r7, r3
 800602a:	881b      	ldrh	r3, [r3, #0]
 800602c:	b2da      	uxtb	r2, r3
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	629a      	str	r2, [r3, #40]	; 0x28
 8006034:	e019      	b.n	800606a <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006036:	2308      	movs	r3, #8
 8006038:	18fb      	adds	r3, r7, r3
 800603a:	881b      	ldrh	r3, [r3, #0]
 800603c:	0a1b      	lsrs	r3, r3, #8
 800603e:	b29b      	uxth	r3, r3
 8006040:	b2da      	uxtb	r2, r3
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006048:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800604a:	6a39      	ldr	r1, [r7, #32]
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	0018      	movs	r0, r3
 8006050:	f000 f881 	bl	8006156 <I2C_WaitOnTXISFlagUntilTimeout>
 8006054:	1e03      	subs	r3, r0, #0
 8006056:	d001      	beq.n	800605c <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8006058:	2301      	movs	r3, #1
 800605a:	e014      	b.n	8006086 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800605c:	2308      	movs	r3, #8
 800605e:	18fb      	adds	r3, r7, r3
 8006060:	881b      	ldrh	r3, [r3, #0]
 8006062:	b2da      	uxtb	r2, r3
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800606a:	6a3a      	ldr	r2, [r7, #32]
 800606c:	68f8      	ldr	r0, [r7, #12]
 800606e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006070:	9300      	str	r3, [sp, #0]
 8006072:	0013      	movs	r3, r2
 8006074:	2200      	movs	r2, #0
 8006076:	2140      	movs	r1, #64	; 0x40
 8006078:	f000 f82e 	bl	80060d8 <I2C_WaitOnFlagUntilTimeout>
 800607c:	1e03      	subs	r3, r0, #0
 800607e:	d001      	beq.n	8006084 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8006080:	2301      	movs	r3, #1
 8006082:	e000      	b.n	8006086 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8006084:	2300      	movs	r3, #0
}
 8006086:	0018      	movs	r0, r3
 8006088:	46bd      	mov	sp, r7
 800608a:	b004      	add	sp, #16
 800608c:	bdb0      	pop	{r4, r5, r7, pc}
 800608e:	46c0      	nop			; (mov r8, r8)
 8006090:	80002000 	.word	0x80002000

08006094 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006094:	b580      	push	{r7, lr}
 8006096:	b082      	sub	sp, #8
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	699b      	ldr	r3, [r3, #24]
 80060a2:	2202      	movs	r2, #2
 80060a4:	4013      	ands	r3, r2
 80060a6:	2b02      	cmp	r3, #2
 80060a8:	d103      	bne.n	80060b2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	2200      	movs	r2, #0
 80060b0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	699b      	ldr	r3, [r3, #24]
 80060b8:	2201      	movs	r2, #1
 80060ba:	4013      	ands	r3, r2
 80060bc:	2b01      	cmp	r3, #1
 80060be:	d007      	beq.n	80060d0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	699a      	ldr	r2, [r3, #24]
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	2101      	movs	r1, #1
 80060cc:	430a      	orrs	r2, r1
 80060ce:	619a      	str	r2, [r3, #24]
  }
}
 80060d0:	46c0      	nop			; (mov r8, r8)
 80060d2:	46bd      	mov	sp, r7
 80060d4:	b002      	add	sp, #8
 80060d6:	bd80      	pop	{r7, pc}

080060d8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b084      	sub	sp, #16
 80060dc:	af00      	add	r7, sp, #0
 80060de:	60f8      	str	r0, [r7, #12]
 80060e0:	60b9      	str	r1, [r7, #8]
 80060e2:	603b      	str	r3, [r7, #0]
 80060e4:	1dfb      	adds	r3, r7, #7
 80060e6:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80060e8:	e021      	b.n	800612e <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	3301      	adds	r3, #1
 80060ee:	d01e      	beq.n	800612e <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060f0:	f7fe fed6 	bl	8004ea0 <HAL_GetTick>
 80060f4:	0002      	movs	r2, r0
 80060f6:	69bb      	ldr	r3, [r7, #24]
 80060f8:	1ad3      	subs	r3, r2, r3
 80060fa:	683a      	ldr	r2, [r7, #0]
 80060fc:	429a      	cmp	r2, r3
 80060fe:	d302      	bcc.n	8006106 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d113      	bne.n	800612e <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800610a:	2220      	movs	r2, #32
 800610c:	431a      	orrs	r2, r3
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	2241      	movs	r2, #65	; 0x41
 8006116:	2120      	movs	r1, #32
 8006118:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	2242      	movs	r2, #66	; 0x42
 800611e:	2100      	movs	r1, #0
 8006120:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	2240      	movs	r2, #64	; 0x40
 8006126:	2100      	movs	r1, #0
 8006128:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800612a:	2301      	movs	r3, #1
 800612c:	e00f      	b.n	800614e <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	699b      	ldr	r3, [r3, #24]
 8006134:	68ba      	ldr	r2, [r7, #8]
 8006136:	4013      	ands	r3, r2
 8006138:	68ba      	ldr	r2, [r7, #8]
 800613a:	1ad3      	subs	r3, r2, r3
 800613c:	425a      	negs	r2, r3
 800613e:	4153      	adcs	r3, r2
 8006140:	b2db      	uxtb	r3, r3
 8006142:	001a      	movs	r2, r3
 8006144:	1dfb      	adds	r3, r7, #7
 8006146:	781b      	ldrb	r3, [r3, #0]
 8006148:	429a      	cmp	r2, r3
 800614a:	d0ce      	beq.n	80060ea <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800614c:	2300      	movs	r3, #0
}
 800614e:	0018      	movs	r0, r3
 8006150:	46bd      	mov	sp, r7
 8006152:	b004      	add	sp, #16
 8006154:	bd80      	pop	{r7, pc}

08006156 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006156:	b580      	push	{r7, lr}
 8006158:	b084      	sub	sp, #16
 800615a:	af00      	add	r7, sp, #0
 800615c:	60f8      	str	r0, [r7, #12]
 800615e:	60b9      	str	r1, [r7, #8]
 8006160:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006162:	e02b      	b.n	80061bc <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006164:	687a      	ldr	r2, [r7, #4]
 8006166:	68b9      	ldr	r1, [r7, #8]
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	0018      	movs	r0, r3
 800616c:	f000 f86e 	bl	800624c <I2C_IsErrorOccurred>
 8006170:	1e03      	subs	r3, r0, #0
 8006172:	d001      	beq.n	8006178 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006174:	2301      	movs	r3, #1
 8006176:	e029      	b.n	80061cc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006178:	68bb      	ldr	r3, [r7, #8]
 800617a:	3301      	adds	r3, #1
 800617c:	d01e      	beq.n	80061bc <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800617e:	f7fe fe8f 	bl	8004ea0 <HAL_GetTick>
 8006182:	0002      	movs	r2, r0
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	1ad3      	subs	r3, r2, r3
 8006188:	68ba      	ldr	r2, [r7, #8]
 800618a:	429a      	cmp	r2, r3
 800618c:	d302      	bcc.n	8006194 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 800618e:	68bb      	ldr	r3, [r7, #8]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d113      	bne.n	80061bc <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006198:	2220      	movs	r2, #32
 800619a:	431a      	orrs	r2, r3
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	2241      	movs	r2, #65	; 0x41
 80061a4:	2120      	movs	r1, #32
 80061a6:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	2242      	movs	r2, #66	; 0x42
 80061ac:	2100      	movs	r1, #0
 80061ae:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	2240      	movs	r2, #64	; 0x40
 80061b4:	2100      	movs	r1, #0
 80061b6:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80061b8:	2301      	movs	r3, #1
 80061ba:	e007      	b.n	80061cc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	699b      	ldr	r3, [r3, #24]
 80061c2:	2202      	movs	r2, #2
 80061c4:	4013      	ands	r3, r2
 80061c6:	2b02      	cmp	r3, #2
 80061c8:	d1cc      	bne.n	8006164 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80061ca:	2300      	movs	r3, #0
}
 80061cc:	0018      	movs	r0, r3
 80061ce:	46bd      	mov	sp, r7
 80061d0:	b004      	add	sp, #16
 80061d2:	bd80      	pop	{r7, pc}

080061d4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b084      	sub	sp, #16
 80061d8:	af00      	add	r7, sp, #0
 80061da:	60f8      	str	r0, [r7, #12]
 80061dc:	60b9      	str	r1, [r7, #8]
 80061de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80061e0:	e028      	b.n	8006234 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80061e2:	687a      	ldr	r2, [r7, #4]
 80061e4:	68b9      	ldr	r1, [r7, #8]
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	0018      	movs	r0, r3
 80061ea:	f000 f82f 	bl	800624c <I2C_IsErrorOccurred>
 80061ee:	1e03      	subs	r3, r0, #0
 80061f0:	d001      	beq.n	80061f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80061f2:	2301      	movs	r3, #1
 80061f4:	e026      	b.n	8006244 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061f6:	f7fe fe53 	bl	8004ea0 <HAL_GetTick>
 80061fa:	0002      	movs	r2, r0
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	1ad3      	subs	r3, r2, r3
 8006200:	68ba      	ldr	r2, [r7, #8]
 8006202:	429a      	cmp	r2, r3
 8006204:	d302      	bcc.n	800620c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006206:	68bb      	ldr	r3, [r7, #8]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d113      	bne.n	8006234 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006210:	2220      	movs	r2, #32
 8006212:	431a      	orrs	r2, r3
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	2241      	movs	r2, #65	; 0x41
 800621c:	2120      	movs	r1, #32
 800621e:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	2242      	movs	r2, #66	; 0x42
 8006224:	2100      	movs	r1, #0
 8006226:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	2240      	movs	r2, #64	; 0x40
 800622c:	2100      	movs	r1, #0
 800622e:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8006230:	2301      	movs	r3, #1
 8006232:	e007      	b.n	8006244 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	699b      	ldr	r3, [r3, #24]
 800623a:	2220      	movs	r2, #32
 800623c:	4013      	ands	r3, r2
 800623e:	2b20      	cmp	r3, #32
 8006240:	d1cf      	bne.n	80061e2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006242:	2300      	movs	r3, #0
}
 8006244:	0018      	movs	r0, r3
 8006246:	46bd      	mov	sp, r7
 8006248:	b004      	add	sp, #16
 800624a:	bd80      	pop	{r7, pc}

0800624c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800624c:	b590      	push	{r4, r7, lr}
 800624e:	b08b      	sub	sp, #44	; 0x2c
 8006250:	af00      	add	r7, sp, #0
 8006252:	60f8      	str	r0, [r7, #12]
 8006254:	60b9      	str	r1, [r7, #8]
 8006256:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006258:	2327      	movs	r3, #39	; 0x27
 800625a:	18fb      	adds	r3, r7, r3
 800625c:	2200      	movs	r2, #0
 800625e:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	699b      	ldr	r3, [r3, #24]
 8006266:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006268:	2300      	movs	r3, #0
 800626a:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006270:	69bb      	ldr	r3, [r7, #24]
 8006272:	2210      	movs	r2, #16
 8006274:	4013      	ands	r3, r2
 8006276:	d100      	bne.n	800627a <I2C_IsErrorOccurred+0x2e>
 8006278:	e08e      	b.n	8006398 <I2C_IsErrorOccurred+0x14c>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	2210      	movs	r2, #16
 8006280:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006282:	e06c      	b.n	800635e <I2C_IsErrorOccurred+0x112>
 8006284:	2427      	movs	r4, #39	; 0x27
 8006286:	193b      	adds	r3, r7, r4
 8006288:	193a      	adds	r2, r7, r4
 800628a:	7812      	ldrb	r2, [r2, #0]
 800628c:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800628e:	68bb      	ldr	r3, [r7, #8]
 8006290:	3301      	adds	r3, #1
 8006292:	d064      	beq.n	800635e <I2C_IsErrorOccurred+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006294:	f7fe fe04 	bl	8004ea0 <HAL_GetTick>
 8006298:	0002      	movs	r2, r0
 800629a:	69fb      	ldr	r3, [r7, #28]
 800629c:	1ad3      	subs	r3, r2, r3
 800629e:	68ba      	ldr	r2, [r7, #8]
 80062a0:	429a      	cmp	r2, r3
 80062a2:	d306      	bcc.n	80062b2 <I2C_IsErrorOccurred+0x66>
 80062a4:	193b      	adds	r3, r7, r4
 80062a6:	193a      	adds	r2, r7, r4
 80062a8:	7812      	ldrb	r2, [r2, #0]
 80062aa:	701a      	strb	r2, [r3, #0]
 80062ac:	68bb      	ldr	r3, [r7, #8]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d155      	bne.n	800635e <I2C_IsErrorOccurred+0x112>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	685a      	ldr	r2, [r3, #4]
 80062b8:	2380      	movs	r3, #128	; 0x80
 80062ba:	01db      	lsls	r3, r3, #7
 80062bc:	4013      	ands	r3, r2
 80062be:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80062c0:	2013      	movs	r0, #19
 80062c2:	183b      	adds	r3, r7, r0
 80062c4:	68fa      	ldr	r2, [r7, #12]
 80062c6:	2142      	movs	r1, #66	; 0x42
 80062c8:	5c52      	ldrb	r2, [r2, r1]
 80062ca:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	699a      	ldr	r2, [r3, #24]
 80062d2:	2380      	movs	r3, #128	; 0x80
 80062d4:	021b      	lsls	r3, r3, #8
 80062d6:	401a      	ands	r2, r3
 80062d8:	2380      	movs	r3, #128	; 0x80
 80062da:	021b      	lsls	r3, r3, #8
 80062dc:	429a      	cmp	r2, r3
 80062de:	d137      	bne.n	8006350 <I2C_IsErrorOccurred+0x104>
 80062e0:	697a      	ldr	r2, [r7, #20]
 80062e2:	2380      	movs	r3, #128	; 0x80
 80062e4:	01db      	lsls	r3, r3, #7
 80062e6:	429a      	cmp	r2, r3
 80062e8:	d032      	beq.n	8006350 <I2C_IsErrorOccurred+0x104>
              (tmp1 != I2C_CR2_STOP) && \
 80062ea:	183b      	adds	r3, r7, r0
 80062ec:	781b      	ldrb	r3, [r3, #0]
 80062ee:	2b20      	cmp	r3, #32
 80062f0:	d02e      	beq.n	8006350 <I2C_IsErrorOccurred+0x104>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	685a      	ldr	r2, [r3, #4]
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	2180      	movs	r1, #128	; 0x80
 80062fe:	01c9      	lsls	r1, r1, #7
 8006300:	430a      	orrs	r2, r1
 8006302:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006304:	f7fe fdcc 	bl	8004ea0 <HAL_GetTick>
 8006308:	0003      	movs	r3, r0
 800630a:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800630c:	e020      	b.n	8006350 <I2C_IsErrorOccurred+0x104>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800630e:	f7fe fdc7 	bl	8004ea0 <HAL_GetTick>
 8006312:	0002      	movs	r2, r0
 8006314:	69fb      	ldr	r3, [r7, #28]
 8006316:	1ad3      	subs	r3, r2, r3
 8006318:	2027      	movs	r0, #39	; 0x27
 800631a:	183a      	adds	r2, r7, r0
 800631c:	1839      	adds	r1, r7, r0
 800631e:	7809      	ldrb	r1, [r1, #0]
 8006320:	7011      	strb	r1, [r2, #0]
 8006322:	2b19      	cmp	r3, #25
 8006324:	d914      	bls.n	8006350 <I2C_IsErrorOccurred+0x104>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800632a:	2220      	movs	r2, #32
 800632c:	431a      	orrs	r2, r3
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	2241      	movs	r2, #65	; 0x41
 8006336:	2120      	movs	r1, #32
 8006338:	5499      	strb	r1, [r3, r2]
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	2242      	movs	r2, #66	; 0x42
 800633e:	2100      	movs	r1, #0
 8006340:	5499      	strb	r1, [r3, r2]

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	2240      	movs	r2, #64	; 0x40
 8006346:	2100      	movs	r1, #0
 8006348:	5499      	strb	r1, [r3, r2]

              status = HAL_ERROR;
 800634a:	183b      	adds	r3, r7, r0
 800634c:	2201      	movs	r2, #1
 800634e:	701a      	strb	r2, [r3, #0]
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	699b      	ldr	r3, [r3, #24]
 8006356:	2220      	movs	r2, #32
 8006358:	4013      	ands	r3, r2
 800635a:	2b20      	cmp	r3, #32
 800635c:	d1d7      	bne.n	800630e <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	699b      	ldr	r3, [r3, #24]
 8006364:	2220      	movs	r2, #32
 8006366:	4013      	ands	r3, r2
 8006368:	2b20      	cmp	r3, #32
 800636a:	d004      	beq.n	8006376 <I2C_IsErrorOccurred+0x12a>
 800636c:	2327      	movs	r3, #39	; 0x27
 800636e:	18fb      	adds	r3, r7, r3
 8006370:	781b      	ldrb	r3, [r3, #0]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d086      	beq.n	8006284 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006376:	2327      	movs	r3, #39	; 0x27
 8006378:	18fb      	adds	r3, r7, r3
 800637a:	781b      	ldrb	r3, [r3, #0]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d103      	bne.n	8006388 <I2C_IsErrorOccurred+0x13c>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	2220      	movs	r2, #32
 8006386:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006388:	6a3b      	ldr	r3, [r7, #32]
 800638a:	2204      	movs	r2, #4
 800638c:	4313      	orrs	r3, r2
 800638e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006390:	2327      	movs	r3, #39	; 0x27
 8006392:	18fb      	adds	r3, r7, r3
 8006394:	2201      	movs	r2, #1
 8006396:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	699b      	ldr	r3, [r3, #24]
 800639e:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80063a0:	69ba      	ldr	r2, [r7, #24]
 80063a2:	2380      	movs	r3, #128	; 0x80
 80063a4:	005b      	lsls	r3, r3, #1
 80063a6:	4013      	ands	r3, r2
 80063a8:	d00c      	beq.n	80063c4 <I2C_IsErrorOccurred+0x178>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80063aa:	6a3b      	ldr	r3, [r7, #32]
 80063ac:	2201      	movs	r2, #1
 80063ae:	4313      	orrs	r3, r2
 80063b0:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	2280      	movs	r2, #128	; 0x80
 80063b8:	0052      	lsls	r2, r2, #1
 80063ba:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80063bc:	2327      	movs	r3, #39	; 0x27
 80063be:	18fb      	adds	r3, r7, r3
 80063c0:	2201      	movs	r2, #1
 80063c2:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80063c4:	69ba      	ldr	r2, [r7, #24]
 80063c6:	2380      	movs	r3, #128	; 0x80
 80063c8:	00db      	lsls	r3, r3, #3
 80063ca:	4013      	ands	r3, r2
 80063cc:	d00c      	beq.n	80063e8 <I2C_IsErrorOccurred+0x19c>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80063ce:	6a3b      	ldr	r3, [r7, #32]
 80063d0:	2208      	movs	r2, #8
 80063d2:	4313      	orrs	r3, r2
 80063d4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	2280      	movs	r2, #128	; 0x80
 80063dc:	00d2      	lsls	r2, r2, #3
 80063de:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80063e0:	2327      	movs	r3, #39	; 0x27
 80063e2:	18fb      	adds	r3, r7, r3
 80063e4:	2201      	movs	r2, #1
 80063e6:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80063e8:	69ba      	ldr	r2, [r7, #24]
 80063ea:	2380      	movs	r3, #128	; 0x80
 80063ec:	009b      	lsls	r3, r3, #2
 80063ee:	4013      	ands	r3, r2
 80063f0:	d00c      	beq.n	800640c <I2C_IsErrorOccurred+0x1c0>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80063f2:	6a3b      	ldr	r3, [r7, #32]
 80063f4:	2202      	movs	r2, #2
 80063f6:	4313      	orrs	r3, r2
 80063f8:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	2280      	movs	r2, #128	; 0x80
 8006400:	0092      	lsls	r2, r2, #2
 8006402:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006404:	2327      	movs	r3, #39	; 0x27
 8006406:	18fb      	adds	r3, r7, r3
 8006408:	2201      	movs	r2, #1
 800640a:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 800640c:	2327      	movs	r3, #39	; 0x27
 800640e:	18fb      	adds	r3, r7, r3
 8006410:	781b      	ldrb	r3, [r3, #0]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d01d      	beq.n	8006452 <I2C_IsErrorOccurred+0x206>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	0018      	movs	r0, r3
 800641a:	f7ff fe3b 	bl	8006094 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	685a      	ldr	r2, [r3, #4]
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	490d      	ldr	r1, [pc, #52]	; (8006460 <I2C_IsErrorOccurred+0x214>)
 800642a:	400a      	ands	r2, r1
 800642c:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006432:	6a3b      	ldr	r3, [r7, #32]
 8006434:	431a      	orrs	r2, r3
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	2241      	movs	r2, #65	; 0x41
 800643e:	2120      	movs	r1, #32
 8006440:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	2242      	movs	r2, #66	; 0x42
 8006446:	2100      	movs	r1, #0
 8006448:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	2240      	movs	r2, #64	; 0x40
 800644e:	2100      	movs	r1, #0
 8006450:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8006452:	2327      	movs	r3, #39	; 0x27
 8006454:	18fb      	adds	r3, r7, r3
 8006456:	781b      	ldrb	r3, [r3, #0]
}
 8006458:	0018      	movs	r0, r3
 800645a:	46bd      	mov	sp, r7
 800645c:	b00b      	add	sp, #44	; 0x2c
 800645e:	bd90      	pop	{r4, r7, pc}
 8006460:	fe00e800 	.word	0xfe00e800

08006464 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006464:	b590      	push	{r4, r7, lr}
 8006466:	b087      	sub	sp, #28
 8006468:	af00      	add	r7, sp, #0
 800646a:	60f8      	str	r0, [r7, #12]
 800646c:	0008      	movs	r0, r1
 800646e:	0011      	movs	r1, r2
 8006470:	607b      	str	r3, [r7, #4]
 8006472:	240a      	movs	r4, #10
 8006474:	193b      	adds	r3, r7, r4
 8006476:	1c02      	adds	r2, r0, #0
 8006478:	801a      	strh	r2, [r3, #0]
 800647a:	2009      	movs	r0, #9
 800647c:	183b      	adds	r3, r7, r0
 800647e:	1c0a      	adds	r2, r1, #0
 8006480:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006482:	193b      	adds	r3, r7, r4
 8006484:	881b      	ldrh	r3, [r3, #0]
 8006486:	059b      	lsls	r3, r3, #22
 8006488:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800648a:	183b      	adds	r3, r7, r0
 800648c:	781b      	ldrb	r3, [r3, #0]
 800648e:	0419      	lsls	r1, r3, #16
 8006490:	23ff      	movs	r3, #255	; 0xff
 8006492:	041b      	lsls	r3, r3, #16
 8006494:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006496:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800649c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800649e:	4313      	orrs	r3, r2
 80064a0:	005b      	lsls	r3, r3, #1
 80064a2:	085b      	lsrs	r3, r3, #1
 80064a4:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	685b      	ldr	r3, [r3, #4]
 80064ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80064ae:	0d51      	lsrs	r1, r2, #21
 80064b0:	2280      	movs	r2, #128	; 0x80
 80064b2:	00d2      	lsls	r2, r2, #3
 80064b4:	400a      	ands	r2, r1
 80064b6:	4907      	ldr	r1, [pc, #28]	; (80064d4 <I2C_TransferConfig+0x70>)
 80064b8:	430a      	orrs	r2, r1
 80064ba:	43d2      	mvns	r2, r2
 80064bc:	401a      	ands	r2, r3
 80064be:	0011      	movs	r1, r2
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	697a      	ldr	r2, [r7, #20]
 80064c6:	430a      	orrs	r2, r1
 80064c8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80064ca:	46c0      	nop			; (mov r8, r8)
 80064cc:	46bd      	mov	sp, r7
 80064ce:	b007      	add	sp, #28
 80064d0:	bd90      	pop	{r4, r7, pc}
 80064d2:	46c0      	nop			; (mov r8, r8)
 80064d4:	03ff63ff 	.word	0x03ff63ff

080064d8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b082      	sub	sp, #8
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
 80064e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2241      	movs	r2, #65	; 0x41
 80064e6:	5c9b      	ldrb	r3, [r3, r2]
 80064e8:	b2db      	uxtb	r3, r3
 80064ea:	2b20      	cmp	r3, #32
 80064ec:	d138      	bne.n	8006560 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2240      	movs	r2, #64	; 0x40
 80064f2:	5c9b      	ldrb	r3, [r3, r2]
 80064f4:	2b01      	cmp	r3, #1
 80064f6:	d101      	bne.n	80064fc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80064f8:	2302      	movs	r3, #2
 80064fa:	e032      	b.n	8006562 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2240      	movs	r2, #64	; 0x40
 8006500:	2101      	movs	r1, #1
 8006502:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2241      	movs	r2, #65	; 0x41
 8006508:	2124      	movs	r1, #36	; 0x24
 800650a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	681a      	ldr	r2, [r3, #0]
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	2101      	movs	r1, #1
 8006518:	438a      	bics	r2, r1
 800651a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	681a      	ldr	r2, [r3, #0]
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	4911      	ldr	r1, [pc, #68]	; (800656c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8006528:	400a      	ands	r2, r1
 800652a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	6819      	ldr	r1, [r3, #0]
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	683a      	ldr	r2, [r7, #0]
 8006538:	430a      	orrs	r2, r1
 800653a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	681a      	ldr	r2, [r3, #0]
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	2101      	movs	r1, #1
 8006548:	430a      	orrs	r2, r1
 800654a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2241      	movs	r2, #65	; 0x41
 8006550:	2120      	movs	r1, #32
 8006552:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2240      	movs	r2, #64	; 0x40
 8006558:	2100      	movs	r1, #0
 800655a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800655c:	2300      	movs	r3, #0
 800655e:	e000      	b.n	8006562 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006560:	2302      	movs	r3, #2
  }
}
 8006562:	0018      	movs	r0, r3
 8006564:	46bd      	mov	sp, r7
 8006566:	b002      	add	sp, #8
 8006568:	bd80      	pop	{r7, pc}
 800656a:	46c0      	nop			; (mov r8, r8)
 800656c:	ffffefff 	.word	0xffffefff

08006570 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006570:	b580      	push	{r7, lr}
 8006572:	b084      	sub	sp, #16
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
 8006578:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2241      	movs	r2, #65	; 0x41
 800657e:	5c9b      	ldrb	r3, [r3, r2]
 8006580:	b2db      	uxtb	r3, r3
 8006582:	2b20      	cmp	r3, #32
 8006584:	d139      	bne.n	80065fa <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	2240      	movs	r2, #64	; 0x40
 800658a:	5c9b      	ldrb	r3, [r3, r2]
 800658c:	2b01      	cmp	r3, #1
 800658e:	d101      	bne.n	8006594 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006590:	2302      	movs	r3, #2
 8006592:	e033      	b.n	80065fc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2240      	movs	r2, #64	; 0x40
 8006598:	2101      	movs	r1, #1
 800659a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2241      	movs	r2, #65	; 0x41
 80065a0:	2124      	movs	r1, #36	; 0x24
 80065a2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	681a      	ldr	r2, [r3, #0]
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	2101      	movs	r1, #1
 80065b0:	438a      	bics	r2, r1
 80065b2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	4a11      	ldr	r2, [pc, #68]	; (8006604 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80065c0:	4013      	ands	r3, r2
 80065c2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	021b      	lsls	r3, r3, #8
 80065c8:	68fa      	ldr	r2, [r7, #12]
 80065ca:	4313      	orrs	r3, r2
 80065cc:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	68fa      	ldr	r2, [r7, #12]
 80065d4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	681a      	ldr	r2, [r3, #0]
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	2101      	movs	r1, #1
 80065e2:	430a      	orrs	r2, r1
 80065e4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2241      	movs	r2, #65	; 0x41
 80065ea:	2120      	movs	r1, #32
 80065ec:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2240      	movs	r2, #64	; 0x40
 80065f2:	2100      	movs	r1, #0
 80065f4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80065f6:	2300      	movs	r3, #0
 80065f8:	e000      	b.n	80065fc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80065fa:	2302      	movs	r3, #2
  }
}
 80065fc:	0018      	movs	r0, r3
 80065fe:	46bd      	mov	sp, r7
 8006600:	b004      	add	sp, #16
 8006602:	bd80      	pop	{r7, pc}
 8006604:	fffff0ff 	.word	0xfffff0ff

08006608 <HAL_PWR_EnterSTOPMode>:
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop 0 or Stop 1 mode with WFE
  *                                         instruction.
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8006608:	b580      	push	{r7, lr}
 800660a:	b082      	sub	sp, #8
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
 8006610:	000a      	movs	r2, r1
 8006612:	1cfb      	adds	r3, r7, #3
 8006614:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  if (Regulator != PWR_MAINREGULATOR_ON)
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d009      	beq.n	8006630 <HAL_PWR_EnterSTOPMode+0x28>
  {
    /* Stop mode with Low-Power Regulator */
    MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP1);
 800661c:	4b14      	ldr	r3, [pc, #80]	; (8006670 <HAL_PWR_EnterSTOPMode+0x68>)
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	2207      	movs	r2, #7
 8006622:	4393      	bics	r3, r2
 8006624:	001a      	movs	r2, r3
 8006626:	4b12      	ldr	r3, [pc, #72]	; (8006670 <HAL_PWR_EnterSTOPMode+0x68>)
 8006628:	2101      	movs	r1, #1
 800662a:	430a      	orrs	r2, r1
 800662c:	601a      	str	r2, [r3, #0]
 800662e:	e005      	b.n	800663c <HAL_PWR_EnterSTOPMode+0x34>
  }
  else
  {
    /* Stop mode with Main Regulator */
    MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP0);
 8006630:	4b0f      	ldr	r3, [pc, #60]	; (8006670 <HAL_PWR_EnterSTOPMode+0x68>)
 8006632:	681a      	ldr	r2, [r3, #0]
 8006634:	4b0e      	ldr	r3, [pc, #56]	; (8006670 <HAL_PWR_EnterSTOPMode+0x68>)
 8006636:	2107      	movs	r1, #7
 8006638:	438a      	bics	r2, r1
 800663a:	601a      	str	r2, [r3, #0]
  }

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800663c:	4b0d      	ldr	r3, [pc, #52]	; (8006674 <HAL_PWR_EnterSTOPMode+0x6c>)
 800663e:	691a      	ldr	r2, [r3, #16]
 8006640:	4b0c      	ldr	r3, [pc, #48]	; (8006674 <HAL_PWR_EnterSTOPMode+0x6c>)
 8006642:	2104      	movs	r1, #4
 8006644:	430a      	orrs	r2, r1
 8006646:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8006648:	1cfb      	adds	r3, r7, #3
 800664a:	781b      	ldrb	r3, [r3, #0]
 800664c:	2b01      	cmp	r3, #1
 800664e:	d101      	bne.n	8006654 <HAL_PWR_EnterSTOPMode+0x4c>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8006650:	bf30      	wfi
 8006652:	e002      	b.n	800665a <HAL_PWR_EnterSTOPMode+0x52>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8006654:	bf40      	sev
    __WFE();
 8006656:	bf20      	wfe
    __WFE();
 8006658:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800665a:	4b06      	ldr	r3, [pc, #24]	; (8006674 <HAL_PWR_EnterSTOPMode+0x6c>)
 800665c:	691a      	ldr	r2, [r3, #16]
 800665e:	4b05      	ldr	r3, [pc, #20]	; (8006674 <HAL_PWR_EnterSTOPMode+0x6c>)
 8006660:	2104      	movs	r1, #4
 8006662:	438a      	bics	r2, r1
 8006664:	611a      	str	r2, [r3, #16]
}
 8006666:	46c0      	nop			; (mov r8, r8)
 8006668:	46bd      	mov	sp, r7
 800666a:	b002      	add	sp, #8
 800666c:	bd80      	pop	{r7, pc}
 800666e:	46c0      	nop			; (mov r8, r8)
 8006670:	40007000 	.word	0x40007000
 8006674:	e000ed00 	.word	0xe000ed00

08006678 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006678:	b580      	push	{r7, lr}
 800667a:	b084      	sub	sp, #16
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8006680:	4b19      	ldr	r3, [pc, #100]	; (80066e8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	4a19      	ldr	r2, [pc, #100]	; (80066ec <HAL_PWREx_ControlVoltageScaling+0x74>)
 8006686:	4013      	ands	r3, r2
 8006688:	0019      	movs	r1, r3
 800668a:	4b17      	ldr	r3, [pc, #92]	; (80066e8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800668c:	687a      	ldr	r2, [r7, #4]
 800668e:	430a      	orrs	r2, r1
 8006690:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006692:	687a      	ldr	r2, [r7, #4]
 8006694:	2380      	movs	r3, #128	; 0x80
 8006696:	009b      	lsls	r3, r3, #2
 8006698:	429a      	cmp	r2, r3
 800669a:	d11f      	bne.n	80066dc <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 800669c:	4b14      	ldr	r3, [pc, #80]	; (80066f0 <HAL_PWREx_ControlVoltageScaling+0x78>)
 800669e:	681a      	ldr	r2, [r3, #0]
 80066a0:	0013      	movs	r3, r2
 80066a2:	005b      	lsls	r3, r3, #1
 80066a4:	189b      	adds	r3, r3, r2
 80066a6:	005b      	lsls	r3, r3, #1
 80066a8:	4912      	ldr	r1, [pc, #72]	; (80066f4 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80066aa:	0018      	movs	r0, r3
 80066ac:	f7f9 fd4e 	bl	800014c <__udivsi3>
 80066b0:	0003      	movs	r3, r0
 80066b2:	3301      	adds	r3, #1
 80066b4:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80066b6:	e008      	b.n	80066ca <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d003      	beq.n	80066c6 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	3b01      	subs	r3, #1
 80066c2:	60fb      	str	r3, [r7, #12]
 80066c4:	e001      	b.n	80066ca <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80066c6:	2303      	movs	r3, #3
 80066c8:	e009      	b.n	80066de <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80066ca:	4b07      	ldr	r3, [pc, #28]	; (80066e8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80066cc:	695a      	ldr	r2, [r3, #20]
 80066ce:	2380      	movs	r3, #128	; 0x80
 80066d0:	00db      	lsls	r3, r3, #3
 80066d2:	401a      	ands	r2, r3
 80066d4:	2380      	movs	r3, #128	; 0x80
 80066d6:	00db      	lsls	r3, r3, #3
 80066d8:	429a      	cmp	r2, r3
 80066da:	d0ed      	beq.n	80066b8 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80066dc:	2300      	movs	r3, #0
}
 80066de:	0018      	movs	r0, r3
 80066e0:	46bd      	mov	sp, r7
 80066e2:	b004      	add	sp, #16
 80066e4:	bd80      	pop	{r7, pc}
 80066e6:	46c0      	nop			; (mov r8, r8)
 80066e8:	40007000 	.word	0x40007000
 80066ec:	fffff9ff 	.word	0xfffff9ff
 80066f0:	20000044 	.word	0x20000044
 80066f4:	000f4240 	.word	0x000f4240

080066f8 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80066fc:	4b03      	ldr	r3, [pc, #12]	; (800670c <LL_RCC_GetAPB1Prescaler+0x14>)
 80066fe:	689a      	ldr	r2, [r3, #8]
 8006700:	23e0      	movs	r3, #224	; 0xe0
 8006702:	01db      	lsls	r3, r3, #7
 8006704:	4013      	ands	r3, r2
}
 8006706:	0018      	movs	r0, r3
 8006708:	46bd      	mov	sp, r7
 800670a:	bd80      	pop	{r7, pc}
 800670c:	40021000 	.word	0x40021000

08006710 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b088      	sub	sp, #32
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d101      	bne.n	8006722 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800671e:	2301      	movs	r3, #1
 8006720:	e2f3      	b.n	8006d0a <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	2201      	movs	r2, #1
 8006728:	4013      	ands	r3, r2
 800672a:	d100      	bne.n	800672e <HAL_RCC_OscConfig+0x1e>
 800672c:	e07c      	b.n	8006828 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800672e:	4bc3      	ldr	r3, [pc, #780]	; (8006a3c <HAL_RCC_OscConfig+0x32c>)
 8006730:	689b      	ldr	r3, [r3, #8]
 8006732:	2238      	movs	r2, #56	; 0x38
 8006734:	4013      	ands	r3, r2
 8006736:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006738:	4bc0      	ldr	r3, [pc, #768]	; (8006a3c <HAL_RCC_OscConfig+0x32c>)
 800673a:	68db      	ldr	r3, [r3, #12]
 800673c:	2203      	movs	r2, #3
 800673e:	4013      	ands	r3, r2
 8006740:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8006742:	69bb      	ldr	r3, [r7, #24]
 8006744:	2b10      	cmp	r3, #16
 8006746:	d102      	bne.n	800674e <HAL_RCC_OscConfig+0x3e>
 8006748:	697b      	ldr	r3, [r7, #20]
 800674a:	2b03      	cmp	r3, #3
 800674c:	d002      	beq.n	8006754 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800674e:	69bb      	ldr	r3, [r7, #24]
 8006750:	2b08      	cmp	r3, #8
 8006752:	d10b      	bne.n	800676c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006754:	4bb9      	ldr	r3, [pc, #740]	; (8006a3c <HAL_RCC_OscConfig+0x32c>)
 8006756:	681a      	ldr	r2, [r3, #0]
 8006758:	2380      	movs	r3, #128	; 0x80
 800675a:	029b      	lsls	r3, r3, #10
 800675c:	4013      	ands	r3, r2
 800675e:	d062      	beq.n	8006826 <HAL_RCC_OscConfig+0x116>
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	685b      	ldr	r3, [r3, #4]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d15e      	bne.n	8006826 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8006768:	2301      	movs	r3, #1
 800676a:	e2ce      	b.n	8006d0a <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	685a      	ldr	r2, [r3, #4]
 8006770:	2380      	movs	r3, #128	; 0x80
 8006772:	025b      	lsls	r3, r3, #9
 8006774:	429a      	cmp	r2, r3
 8006776:	d107      	bne.n	8006788 <HAL_RCC_OscConfig+0x78>
 8006778:	4bb0      	ldr	r3, [pc, #704]	; (8006a3c <HAL_RCC_OscConfig+0x32c>)
 800677a:	681a      	ldr	r2, [r3, #0]
 800677c:	4baf      	ldr	r3, [pc, #700]	; (8006a3c <HAL_RCC_OscConfig+0x32c>)
 800677e:	2180      	movs	r1, #128	; 0x80
 8006780:	0249      	lsls	r1, r1, #9
 8006782:	430a      	orrs	r2, r1
 8006784:	601a      	str	r2, [r3, #0]
 8006786:	e020      	b.n	80067ca <HAL_RCC_OscConfig+0xba>
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	685a      	ldr	r2, [r3, #4]
 800678c:	23a0      	movs	r3, #160	; 0xa0
 800678e:	02db      	lsls	r3, r3, #11
 8006790:	429a      	cmp	r2, r3
 8006792:	d10e      	bne.n	80067b2 <HAL_RCC_OscConfig+0xa2>
 8006794:	4ba9      	ldr	r3, [pc, #676]	; (8006a3c <HAL_RCC_OscConfig+0x32c>)
 8006796:	681a      	ldr	r2, [r3, #0]
 8006798:	4ba8      	ldr	r3, [pc, #672]	; (8006a3c <HAL_RCC_OscConfig+0x32c>)
 800679a:	2180      	movs	r1, #128	; 0x80
 800679c:	02c9      	lsls	r1, r1, #11
 800679e:	430a      	orrs	r2, r1
 80067a0:	601a      	str	r2, [r3, #0]
 80067a2:	4ba6      	ldr	r3, [pc, #664]	; (8006a3c <HAL_RCC_OscConfig+0x32c>)
 80067a4:	681a      	ldr	r2, [r3, #0]
 80067a6:	4ba5      	ldr	r3, [pc, #660]	; (8006a3c <HAL_RCC_OscConfig+0x32c>)
 80067a8:	2180      	movs	r1, #128	; 0x80
 80067aa:	0249      	lsls	r1, r1, #9
 80067ac:	430a      	orrs	r2, r1
 80067ae:	601a      	str	r2, [r3, #0]
 80067b0:	e00b      	b.n	80067ca <HAL_RCC_OscConfig+0xba>
 80067b2:	4ba2      	ldr	r3, [pc, #648]	; (8006a3c <HAL_RCC_OscConfig+0x32c>)
 80067b4:	681a      	ldr	r2, [r3, #0]
 80067b6:	4ba1      	ldr	r3, [pc, #644]	; (8006a3c <HAL_RCC_OscConfig+0x32c>)
 80067b8:	49a1      	ldr	r1, [pc, #644]	; (8006a40 <HAL_RCC_OscConfig+0x330>)
 80067ba:	400a      	ands	r2, r1
 80067bc:	601a      	str	r2, [r3, #0]
 80067be:	4b9f      	ldr	r3, [pc, #636]	; (8006a3c <HAL_RCC_OscConfig+0x32c>)
 80067c0:	681a      	ldr	r2, [r3, #0]
 80067c2:	4b9e      	ldr	r3, [pc, #632]	; (8006a3c <HAL_RCC_OscConfig+0x32c>)
 80067c4:	499f      	ldr	r1, [pc, #636]	; (8006a44 <HAL_RCC_OscConfig+0x334>)
 80067c6:	400a      	ands	r2, r1
 80067c8:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	685b      	ldr	r3, [r3, #4]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d014      	beq.n	80067fc <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067d2:	f7fe fb65 	bl	8004ea0 <HAL_GetTick>
 80067d6:	0003      	movs	r3, r0
 80067d8:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80067da:	e008      	b.n	80067ee <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80067dc:	f7fe fb60 	bl	8004ea0 <HAL_GetTick>
 80067e0:	0002      	movs	r2, r0
 80067e2:	693b      	ldr	r3, [r7, #16]
 80067e4:	1ad3      	subs	r3, r2, r3
 80067e6:	2b64      	cmp	r3, #100	; 0x64
 80067e8:	d901      	bls.n	80067ee <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80067ea:	2303      	movs	r3, #3
 80067ec:	e28d      	b.n	8006d0a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80067ee:	4b93      	ldr	r3, [pc, #588]	; (8006a3c <HAL_RCC_OscConfig+0x32c>)
 80067f0:	681a      	ldr	r2, [r3, #0]
 80067f2:	2380      	movs	r3, #128	; 0x80
 80067f4:	029b      	lsls	r3, r3, #10
 80067f6:	4013      	ands	r3, r2
 80067f8:	d0f0      	beq.n	80067dc <HAL_RCC_OscConfig+0xcc>
 80067fa:	e015      	b.n	8006828 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067fc:	f7fe fb50 	bl	8004ea0 <HAL_GetTick>
 8006800:	0003      	movs	r3, r0
 8006802:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006804:	e008      	b.n	8006818 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006806:	f7fe fb4b 	bl	8004ea0 <HAL_GetTick>
 800680a:	0002      	movs	r2, r0
 800680c:	693b      	ldr	r3, [r7, #16]
 800680e:	1ad3      	subs	r3, r2, r3
 8006810:	2b64      	cmp	r3, #100	; 0x64
 8006812:	d901      	bls.n	8006818 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8006814:	2303      	movs	r3, #3
 8006816:	e278      	b.n	8006d0a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006818:	4b88      	ldr	r3, [pc, #544]	; (8006a3c <HAL_RCC_OscConfig+0x32c>)
 800681a:	681a      	ldr	r2, [r3, #0]
 800681c:	2380      	movs	r3, #128	; 0x80
 800681e:	029b      	lsls	r3, r3, #10
 8006820:	4013      	ands	r3, r2
 8006822:	d1f0      	bne.n	8006806 <HAL_RCC_OscConfig+0xf6>
 8006824:	e000      	b.n	8006828 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006826:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	2202      	movs	r2, #2
 800682e:	4013      	ands	r3, r2
 8006830:	d100      	bne.n	8006834 <HAL_RCC_OscConfig+0x124>
 8006832:	e099      	b.n	8006968 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006834:	4b81      	ldr	r3, [pc, #516]	; (8006a3c <HAL_RCC_OscConfig+0x32c>)
 8006836:	689b      	ldr	r3, [r3, #8]
 8006838:	2238      	movs	r2, #56	; 0x38
 800683a:	4013      	ands	r3, r2
 800683c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800683e:	4b7f      	ldr	r3, [pc, #508]	; (8006a3c <HAL_RCC_OscConfig+0x32c>)
 8006840:	68db      	ldr	r3, [r3, #12]
 8006842:	2203      	movs	r2, #3
 8006844:	4013      	ands	r3, r2
 8006846:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8006848:	69bb      	ldr	r3, [r7, #24]
 800684a:	2b10      	cmp	r3, #16
 800684c:	d102      	bne.n	8006854 <HAL_RCC_OscConfig+0x144>
 800684e:	697b      	ldr	r3, [r7, #20]
 8006850:	2b02      	cmp	r3, #2
 8006852:	d002      	beq.n	800685a <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8006854:	69bb      	ldr	r3, [r7, #24]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d135      	bne.n	80068c6 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800685a:	4b78      	ldr	r3, [pc, #480]	; (8006a3c <HAL_RCC_OscConfig+0x32c>)
 800685c:	681a      	ldr	r2, [r3, #0]
 800685e:	2380      	movs	r3, #128	; 0x80
 8006860:	00db      	lsls	r3, r3, #3
 8006862:	4013      	ands	r3, r2
 8006864:	d005      	beq.n	8006872 <HAL_RCC_OscConfig+0x162>
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	68db      	ldr	r3, [r3, #12]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d101      	bne.n	8006872 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800686e:	2301      	movs	r3, #1
 8006870:	e24b      	b.n	8006d0a <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006872:	4b72      	ldr	r3, [pc, #456]	; (8006a3c <HAL_RCC_OscConfig+0x32c>)
 8006874:	685b      	ldr	r3, [r3, #4]
 8006876:	4a74      	ldr	r2, [pc, #464]	; (8006a48 <HAL_RCC_OscConfig+0x338>)
 8006878:	4013      	ands	r3, r2
 800687a:	0019      	movs	r1, r3
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	695b      	ldr	r3, [r3, #20]
 8006880:	021a      	lsls	r2, r3, #8
 8006882:	4b6e      	ldr	r3, [pc, #440]	; (8006a3c <HAL_RCC_OscConfig+0x32c>)
 8006884:	430a      	orrs	r2, r1
 8006886:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006888:	69bb      	ldr	r3, [r7, #24]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d112      	bne.n	80068b4 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800688e:	4b6b      	ldr	r3, [pc, #428]	; (8006a3c <HAL_RCC_OscConfig+0x32c>)
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	4a6e      	ldr	r2, [pc, #440]	; (8006a4c <HAL_RCC_OscConfig+0x33c>)
 8006894:	4013      	ands	r3, r2
 8006896:	0019      	movs	r1, r3
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	691a      	ldr	r2, [r3, #16]
 800689c:	4b67      	ldr	r3, [pc, #412]	; (8006a3c <HAL_RCC_OscConfig+0x32c>)
 800689e:	430a      	orrs	r2, r1
 80068a0:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80068a2:	4b66      	ldr	r3, [pc, #408]	; (8006a3c <HAL_RCC_OscConfig+0x32c>)
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	0adb      	lsrs	r3, r3, #11
 80068a8:	2207      	movs	r2, #7
 80068aa:	4013      	ands	r3, r2
 80068ac:	4a68      	ldr	r2, [pc, #416]	; (8006a50 <HAL_RCC_OscConfig+0x340>)
 80068ae:	40da      	lsrs	r2, r3
 80068b0:	4b68      	ldr	r3, [pc, #416]	; (8006a54 <HAL_RCC_OscConfig+0x344>)
 80068b2:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80068b4:	4b68      	ldr	r3, [pc, #416]	; (8006a58 <HAL_RCC_OscConfig+0x348>)
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	0018      	movs	r0, r3
 80068ba:	f7fe fa95 	bl	8004de8 <HAL_InitTick>
 80068be:	1e03      	subs	r3, r0, #0
 80068c0:	d051      	beq.n	8006966 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80068c2:	2301      	movs	r3, #1
 80068c4:	e221      	b.n	8006d0a <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	68db      	ldr	r3, [r3, #12]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d030      	beq.n	8006930 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80068ce:	4b5b      	ldr	r3, [pc, #364]	; (8006a3c <HAL_RCC_OscConfig+0x32c>)
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	4a5e      	ldr	r2, [pc, #376]	; (8006a4c <HAL_RCC_OscConfig+0x33c>)
 80068d4:	4013      	ands	r3, r2
 80068d6:	0019      	movs	r1, r3
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	691a      	ldr	r2, [r3, #16]
 80068dc:	4b57      	ldr	r3, [pc, #348]	; (8006a3c <HAL_RCC_OscConfig+0x32c>)
 80068de:	430a      	orrs	r2, r1
 80068e0:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80068e2:	4b56      	ldr	r3, [pc, #344]	; (8006a3c <HAL_RCC_OscConfig+0x32c>)
 80068e4:	681a      	ldr	r2, [r3, #0]
 80068e6:	4b55      	ldr	r3, [pc, #340]	; (8006a3c <HAL_RCC_OscConfig+0x32c>)
 80068e8:	2180      	movs	r1, #128	; 0x80
 80068ea:	0049      	lsls	r1, r1, #1
 80068ec:	430a      	orrs	r2, r1
 80068ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068f0:	f7fe fad6 	bl	8004ea0 <HAL_GetTick>
 80068f4:	0003      	movs	r3, r0
 80068f6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80068f8:	e008      	b.n	800690c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80068fa:	f7fe fad1 	bl	8004ea0 <HAL_GetTick>
 80068fe:	0002      	movs	r2, r0
 8006900:	693b      	ldr	r3, [r7, #16]
 8006902:	1ad3      	subs	r3, r2, r3
 8006904:	2b02      	cmp	r3, #2
 8006906:	d901      	bls.n	800690c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8006908:	2303      	movs	r3, #3
 800690a:	e1fe      	b.n	8006d0a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800690c:	4b4b      	ldr	r3, [pc, #300]	; (8006a3c <HAL_RCC_OscConfig+0x32c>)
 800690e:	681a      	ldr	r2, [r3, #0]
 8006910:	2380      	movs	r3, #128	; 0x80
 8006912:	00db      	lsls	r3, r3, #3
 8006914:	4013      	ands	r3, r2
 8006916:	d0f0      	beq.n	80068fa <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006918:	4b48      	ldr	r3, [pc, #288]	; (8006a3c <HAL_RCC_OscConfig+0x32c>)
 800691a:	685b      	ldr	r3, [r3, #4]
 800691c:	4a4a      	ldr	r2, [pc, #296]	; (8006a48 <HAL_RCC_OscConfig+0x338>)
 800691e:	4013      	ands	r3, r2
 8006920:	0019      	movs	r1, r3
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	695b      	ldr	r3, [r3, #20]
 8006926:	021a      	lsls	r2, r3, #8
 8006928:	4b44      	ldr	r3, [pc, #272]	; (8006a3c <HAL_RCC_OscConfig+0x32c>)
 800692a:	430a      	orrs	r2, r1
 800692c:	605a      	str	r2, [r3, #4]
 800692e:	e01b      	b.n	8006968 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8006930:	4b42      	ldr	r3, [pc, #264]	; (8006a3c <HAL_RCC_OscConfig+0x32c>)
 8006932:	681a      	ldr	r2, [r3, #0]
 8006934:	4b41      	ldr	r3, [pc, #260]	; (8006a3c <HAL_RCC_OscConfig+0x32c>)
 8006936:	4949      	ldr	r1, [pc, #292]	; (8006a5c <HAL_RCC_OscConfig+0x34c>)
 8006938:	400a      	ands	r2, r1
 800693a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800693c:	f7fe fab0 	bl	8004ea0 <HAL_GetTick>
 8006940:	0003      	movs	r3, r0
 8006942:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006944:	e008      	b.n	8006958 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006946:	f7fe faab 	bl	8004ea0 <HAL_GetTick>
 800694a:	0002      	movs	r2, r0
 800694c:	693b      	ldr	r3, [r7, #16]
 800694e:	1ad3      	subs	r3, r2, r3
 8006950:	2b02      	cmp	r3, #2
 8006952:	d901      	bls.n	8006958 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8006954:	2303      	movs	r3, #3
 8006956:	e1d8      	b.n	8006d0a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006958:	4b38      	ldr	r3, [pc, #224]	; (8006a3c <HAL_RCC_OscConfig+0x32c>)
 800695a:	681a      	ldr	r2, [r3, #0]
 800695c:	2380      	movs	r3, #128	; 0x80
 800695e:	00db      	lsls	r3, r3, #3
 8006960:	4013      	ands	r3, r2
 8006962:	d1f0      	bne.n	8006946 <HAL_RCC_OscConfig+0x236>
 8006964:	e000      	b.n	8006968 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006966:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	2208      	movs	r2, #8
 800696e:	4013      	ands	r3, r2
 8006970:	d047      	beq.n	8006a02 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8006972:	4b32      	ldr	r3, [pc, #200]	; (8006a3c <HAL_RCC_OscConfig+0x32c>)
 8006974:	689b      	ldr	r3, [r3, #8]
 8006976:	2238      	movs	r2, #56	; 0x38
 8006978:	4013      	ands	r3, r2
 800697a:	2b18      	cmp	r3, #24
 800697c:	d10a      	bne.n	8006994 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800697e:	4b2f      	ldr	r3, [pc, #188]	; (8006a3c <HAL_RCC_OscConfig+0x32c>)
 8006980:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006982:	2202      	movs	r2, #2
 8006984:	4013      	ands	r3, r2
 8006986:	d03c      	beq.n	8006a02 <HAL_RCC_OscConfig+0x2f2>
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	699b      	ldr	r3, [r3, #24]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d138      	bne.n	8006a02 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8006990:	2301      	movs	r3, #1
 8006992:	e1ba      	b.n	8006d0a <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	699b      	ldr	r3, [r3, #24]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d019      	beq.n	80069d0 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800699c:	4b27      	ldr	r3, [pc, #156]	; (8006a3c <HAL_RCC_OscConfig+0x32c>)
 800699e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80069a0:	4b26      	ldr	r3, [pc, #152]	; (8006a3c <HAL_RCC_OscConfig+0x32c>)
 80069a2:	2101      	movs	r1, #1
 80069a4:	430a      	orrs	r2, r1
 80069a6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069a8:	f7fe fa7a 	bl	8004ea0 <HAL_GetTick>
 80069ac:	0003      	movs	r3, r0
 80069ae:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80069b0:	e008      	b.n	80069c4 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80069b2:	f7fe fa75 	bl	8004ea0 <HAL_GetTick>
 80069b6:	0002      	movs	r2, r0
 80069b8:	693b      	ldr	r3, [r7, #16]
 80069ba:	1ad3      	subs	r3, r2, r3
 80069bc:	2b02      	cmp	r3, #2
 80069be:	d901      	bls.n	80069c4 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80069c0:	2303      	movs	r3, #3
 80069c2:	e1a2      	b.n	8006d0a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80069c4:	4b1d      	ldr	r3, [pc, #116]	; (8006a3c <HAL_RCC_OscConfig+0x32c>)
 80069c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80069c8:	2202      	movs	r2, #2
 80069ca:	4013      	ands	r3, r2
 80069cc:	d0f1      	beq.n	80069b2 <HAL_RCC_OscConfig+0x2a2>
 80069ce:	e018      	b.n	8006a02 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80069d0:	4b1a      	ldr	r3, [pc, #104]	; (8006a3c <HAL_RCC_OscConfig+0x32c>)
 80069d2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80069d4:	4b19      	ldr	r3, [pc, #100]	; (8006a3c <HAL_RCC_OscConfig+0x32c>)
 80069d6:	2101      	movs	r1, #1
 80069d8:	438a      	bics	r2, r1
 80069da:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069dc:	f7fe fa60 	bl	8004ea0 <HAL_GetTick>
 80069e0:	0003      	movs	r3, r0
 80069e2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80069e4:	e008      	b.n	80069f8 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80069e6:	f7fe fa5b 	bl	8004ea0 <HAL_GetTick>
 80069ea:	0002      	movs	r2, r0
 80069ec:	693b      	ldr	r3, [r7, #16]
 80069ee:	1ad3      	subs	r3, r2, r3
 80069f0:	2b02      	cmp	r3, #2
 80069f2:	d901      	bls.n	80069f8 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80069f4:	2303      	movs	r3, #3
 80069f6:	e188      	b.n	8006d0a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80069f8:	4b10      	ldr	r3, [pc, #64]	; (8006a3c <HAL_RCC_OscConfig+0x32c>)
 80069fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80069fc:	2202      	movs	r2, #2
 80069fe:	4013      	ands	r3, r2
 8006a00:	d1f1      	bne.n	80069e6 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	2204      	movs	r2, #4
 8006a08:	4013      	ands	r3, r2
 8006a0a:	d100      	bne.n	8006a0e <HAL_RCC_OscConfig+0x2fe>
 8006a0c:	e0c6      	b.n	8006b9c <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006a0e:	231f      	movs	r3, #31
 8006a10:	18fb      	adds	r3, r7, r3
 8006a12:	2200      	movs	r2, #0
 8006a14:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8006a16:	4b09      	ldr	r3, [pc, #36]	; (8006a3c <HAL_RCC_OscConfig+0x32c>)
 8006a18:	689b      	ldr	r3, [r3, #8]
 8006a1a:	2238      	movs	r2, #56	; 0x38
 8006a1c:	4013      	ands	r3, r2
 8006a1e:	2b20      	cmp	r3, #32
 8006a20:	d11e      	bne.n	8006a60 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8006a22:	4b06      	ldr	r3, [pc, #24]	; (8006a3c <HAL_RCC_OscConfig+0x32c>)
 8006a24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a26:	2202      	movs	r2, #2
 8006a28:	4013      	ands	r3, r2
 8006a2a:	d100      	bne.n	8006a2e <HAL_RCC_OscConfig+0x31e>
 8006a2c:	e0b6      	b.n	8006b9c <HAL_RCC_OscConfig+0x48c>
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	689b      	ldr	r3, [r3, #8]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d000      	beq.n	8006a38 <HAL_RCC_OscConfig+0x328>
 8006a36:	e0b1      	b.n	8006b9c <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8006a38:	2301      	movs	r3, #1
 8006a3a:	e166      	b.n	8006d0a <HAL_RCC_OscConfig+0x5fa>
 8006a3c:	40021000 	.word	0x40021000
 8006a40:	fffeffff 	.word	0xfffeffff
 8006a44:	fffbffff 	.word	0xfffbffff
 8006a48:	ffff80ff 	.word	0xffff80ff
 8006a4c:	ffffc7ff 	.word	0xffffc7ff
 8006a50:	00f42400 	.word	0x00f42400
 8006a54:	20000044 	.word	0x20000044
 8006a58:	20000048 	.word	0x20000048
 8006a5c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006a60:	4bac      	ldr	r3, [pc, #688]	; (8006d14 <HAL_RCC_OscConfig+0x604>)
 8006a62:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006a64:	2380      	movs	r3, #128	; 0x80
 8006a66:	055b      	lsls	r3, r3, #21
 8006a68:	4013      	ands	r3, r2
 8006a6a:	d101      	bne.n	8006a70 <HAL_RCC_OscConfig+0x360>
 8006a6c:	2301      	movs	r3, #1
 8006a6e:	e000      	b.n	8006a72 <HAL_RCC_OscConfig+0x362>
 8006a70:	2300      	movs	r3, #0
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d011      	beq.n	8006a9a <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8006a76:	4ba7      	ldr	r3, [pc, #668]	; (8006d14 <HAL_RCC_OscConfig+0x604>)
 8006a78:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006a7a:	4ba6      	ldr	r3, [pc, #664]	; (8006d14 <HAL_RCC_OscConfig+0x604>)
 8006a7c:	2180      	movs	r1, #128	; 0x80
 8006a7e:	0549      	lsls	r1, r1, #21
 8006a80:	430a      	orrs	r2, r1
 8006a82:	63da      	str	r2, [r3, #60]	; 0x3c
 8006a84:	4ba3      	ldr	r3, [pc, #652]	; (8006d14 <HAL_RCC_OscConfig+0x604>)
 8006a86:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006a88:	2380      	movs	r3, #128	; 0x80
 8006a8a:	055b      	lsls	r3, r3, #21
 8006a8c:	4013      	ands	r3, r2
 8006a8e:	60fb      	str	r3, [r7, #12]
 8006a90:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8006a92:	231f      	movs	r3, #31
 8006a94:	18fb      	adds	r3, r7, r3
 8006a96:	2201      	movs	r2, #1
 8006a98:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006a9a:	4b9f      	ldr	r3, [pc, #636]	; (8006d18 <HAL_RCC_OscConfig+0x608>)
 8006a9c:	681a      	ldr	r2, [r3, #0]
 8006a9e:	2380      	movs	r3, #128	; 0x80
 8006aa0:	005b      	lsls	r3, r3, #1
 8006aa2:	4013      	ands	r3, r2
 8006aa4:	d11a      	bne.n	8006adc <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006aa6:	4b9c      	ldr	r3, [pc, #624]	; (8006d18 <HAL_RCC_OscConfig+0x608>)
 8006aa8:	681a      	ldr	r2, [r3, #0]
 8006aaa:	4b9b      	ldr	r3, [pc, #620]	; (8006d18 <HAL_RCC_OscConfig+0x608>)
 8006aac:	2180      	movs	r1, #128	; 0x80
 8006aae:	0049      	lsls	r1, r1, #1
 8006ab0:	430a      	orrs	r2, r1
 8006ab2:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8006ab4:	f7fe f9f4 	bl	8004ea0 <HAL_GetTick>
 8006ab8:	0003      	movs	r3, r0
 8006aba:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006abc:	e008      	b.n	8006ad0 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006abe:	f7fe f9ef 	bl	8004ea0 <HAL_GetTick>
 8006ac2:	0002      	movs	r2, r0
 8006ac4:	693b      	ldr	r3, [r7, #16]
 8006ac6:	1ad3      	subs	r3, r2, r3
 8006ac8:	2b02      	cmp	r3, #2
 8006aca:	d901      	bls.n	8006ad0 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8006acc:	2303      	movs	r3, #3
 8006ace:	e11c      	b.n	8006d0a <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006ad0:	4b91      	ldr	r3, [pc, #580]	; (8006d18 <HAL_RCC_OscConfig+0x608>)
 8006ad2:	681a      	ldr	r2, [r3, #0]
 8006ad4:	2380      	movs	r3, #128	; 0x80
 8006ad6:	005b      	lsls	r3, r3, #1
 8006ad8:	4013      	ands	r3, r2
 8006ada:	d0f0      	beq.n	8006abe <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	689b      	ldr	r3, [r3, #8]
 8006ae0:	2b01      	cmp	r3, #1
 8006ae2:	d106      	bne.n	8006af2 <HAL_RCC_OscConfig+0x3e2>
 8006ae4:	4b8b      	ldr	r3, [pc, #556]	; (8006d14 <HAL_RCC_OscConfig+0x604>)
 8006ae6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006ae8:	4b8a      	ldr	r3, [pc, #552]	; (8006d14 <HAL_RCC_OscConfig+0x604>)
 8006aea:	2101      	movs	r1, #1
 8006aec:	430a      	orrs	r2, r1
 8006aee:	65da      	str	r2, [r3, #92]	; 0x5c
 8006af0:	e01c      	b.n	8006b2c <HAL_RCC_OscConfig+0x41c>
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	689b      	ldr	r3, [r3, #8]
 8006af6:	2b05      	cmp	r3, #5
 8006af8:	d10c      	bne.n	8006b14 <HAL_RCC_OscConfig+0x404>
 8006afa:	4b86      	ldr	r3, [pc, #536]	; (8006d14 <HAL_RCC_OscConfig+0x604>)
 8006afc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006afe:	4b85      	ldr	r3, [pc, #532]	; (8006d14 <HAL_RCC_OscConfig+0x604>)
 8006b00:	2104      	movs	r1, #4
 8006b02:	430a      	orrs	r2, r1
 8006b04:	65da      	str	r2, [r3, #92]	; 0x5c
 8006b06:	4b83      	ldr	r3, [pc, #524]	; (8006d14 <HAL_RCC_OscConfig+0x604>)
 8006b08:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006b0a:	4b82      	ldr	r3, [pc, #520]	; (8006d14 <HAL_RCC_OscConfig+0x604>)
 8006b0c:	2101      	movs	r1, #1
 8006b0e:	430a      	orrs	r2, r1
 8006b10:	65da      	str	r2, [r3, #92]	; 0x5c
 8006b12:	e00b      	b.n	8006b2c <HAL_RCC_OscConfig+0x41c>
 8006b14:	4b7f      	ldr	r3, [pc, #508]	; (8006d14 <HAL_RCC_OscConfig+0x604>)
 8006b16:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006b18:	4b7e      	ldr	r3, [pc, #504]	; (8006d14 <HAL_RCC_OscConfig+0x604>)
 8006b1a:	2101      	movs	r1, #1
 8006b1c:	438a      	bics	r2, r1
 8006b1e:	65da      	str	r2, [r3, #92]	; 0x5c
 8006b20:	4b7c      	ldr	r3, [pc, #496]	; (8006d14 <HAL_RCC_OscConfig+0x604>)
 8006b22:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006b24:	4b7b      	ldr	r3, [pc, #492]	; (8006d14 <HAL_RCC_OscConfig+0x604>)
 8006b26:	2104      	movs	r1, #4
 8006b28:	438a      	bics	r2, r1
 8006b2a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	689b      	ldr	r3, [r3, #8]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d014      	beq.n	8006b5e <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b34:	f7fe f9b4 	bl	8004ea0 <HAL_GetTick>
 8006b38:	0003      	movs	r3, r0
 8006b3a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006b3c:	e009      	b.n	8006b52 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b3e:	f7fe f9af 	bl	8004ea0 <HAL_GetTick>
 8006b42:	0002      	movs	r2, r0
 8006b44:	693b      	ldr	r3, [r7, #16]
 8006b46:	1ad3      	subs	r3, r2, r3
 8006b48:	4a74      	ldr	r2, [pc, #464]	; (8006d1c <HAL_RCC_OscConfig+0x60c>)
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d901      	bls.n	8006b52 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8006b4e:	2303      	movs	r3, #3
 8006b50:	e0db      	b.n	8006d0a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006b52:	4b70      	ldr	r3, [pc, #448]	; (8006d14 <HAL_RCC_OscConfig+0x604>)
 8006b54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b56:	2202      	movs	r2, #2
 8006b58:	4013      	ands	r3, r2
 8006b5a:	d0f0      	beq.n	8006b3e <HAL_RCC_OscConfig+0x42e>
 8006b5c:	e013      	b.n	8006b86 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b5e:	f7fe f99f 	bl	8004ea0 <HAL_GetTick>
 8006b62:	0003      	movs	r3, r0
 8006b64:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006b66:	e009      	b.n	8006b7c <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b68:	f7fe f99a 	bl	8004ea0 <HAL_GetTick>
 8006b6c:	0002      	movs	r2, r0
 8006b6e:	693b      	ldr	r3, [r7, #16]
 8006b70:	1ad3      	subs	r3, r2, r3
 8006b72:	4a6a      	ldr	r2, [pc, #424]	; (8006d1c <HAL_RCC_OscConfig+0x60c>)
 8006b74:	4293      	cmp	r3, r2
 8006b76:	d901      	bls.n	8006b7c <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8006b78:	2303      	movs	r3, #3
 8006b7a:	e0c6      	b.n	8006d0a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006b7c:	4b65      	ldr	r3, [pc, #404]	; (8006d14 <HAL_RCC_OscConfig+0x604>)
 8006b7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b80:	2202      	movs	r2, #2
 8006b82:	4013      	ands	r3, r2
 8006b84:	d1f0      	bne.n	8006b68 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8006b86:	231f      	movs	r3, #31
 8006b88:	18fb      	adds	r3, r7, r3
 8006b8a:	781b      	ldrb	r3, [r3, #0]
 8006b8c:	2b01      	cmp	r3, #1
 8006b8e:	d105      	bne.n	8006b9c <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8006b90:	4b60      	ldr	r3, [pc, #384]	; (8006d14 <HAL_RCC_OscConfig+0x604>)
 8006b92:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006b94:	4b5f      	ldr	r3, [pc, #380]	; (8006d14 <HAL_RCC_OscConfig+0x604>)
 8006b96:	4962      	ldr	r1, [pc, #392]	; (8006d20 <HAL_RCC_OscConfig+0x610>)
 8006b98:	400a      	ands	r2, r1
 8006b9a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	69db      	ldr	r3, [r3, #28]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d100      	bne.n	8006ba6 <HAL_RCC_OscConfig+0x496>
 8006ba4:	e0b0      	b.n	8006d08 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006ba6:	4b5b      	ldr	r3, [pc, #364]	; (8006d14 <HAL_RCC_OscConfig+0x604>)
 8006ba8:	689b      	ldr	r3, [r3, #8]
 8006baa:	2238      	movs	r2, #56	; 0x38
 8006bac:	4013      	ands	r3, r2
 8006bae:	2b10      	cmp	r3, #16
 8006bb0:	d100      	bne.n	8006bb4 <HAL_RCC_OscConfig+0x4a4>
 8006bb2:	e078      	b.n	8006ca6 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	69db      	ldr	r3, [r3, #28]
 8006bb8:	2b02      	cmp	r3, #2
 8006bba:	d153      	bne.n	8006c64 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006bbc:	4b55      	ldr	r3, [pc, #340]	; (8006d14 <HAL_RCC_OscConfig+0x604>)
 8006bbe:	681a      	ldr	r2, [r3, #0]
 8006bc0:	4b54      	ldr	r3, [pc, #336]	; (8006d14 <HAL_RCC_OscConfig+0x604>)
 8006bc2:	4958      	ldr	r1, [pc, #352]	; (8006d24 <HAL_RCC_OscConfig+0x614>)
 8006bc4:	400a      	ands	r2, r1
 8006bc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bc8:	f7fe f96a 	bl	8004ea0 <HAL_GetTick>
 8006bcc:	0003      	movs	r3, r0
 8006bce:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006bd0:	e008      	b.n	8006be4 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006bd2:	f7fe f965 	bl	8004ea0 <HAL_GetTick>
 8006bd6:	0002      	movs	r2, r0
 8006bd8:	693b      	ldr	r3, [r7, #16]
 8006bda:	1ad3      	subs	r3, r2, r3
 8006bdc:	2b02      	cmp	r3, #2
 8006bde:	d901      	bls.n	8006be4 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8006be0:	2303      	movs	r3, #3
 8006be2:	e092      	b.n	8006d0a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006be4:	4b4b      	ldr	r3, [pc, #300]	; (8006d14 <HAL_RCC_OscConfig+0x604>)
 8006be6:	681a      	ldr	r2, [r3, #0]
 8006be8:	2380      	movs	r3, #128	; 0x80
 8006bea:	049b      	lsls	r3, r3, #18
 8006bec:	4013      	ands	r3, r2
 8006bee:	d1f0      	bne.n	8006bd2 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006bf0:	4b48      	ldr	r3, [pc, #288]	; (8006d14 <HAL_RCC_OscConfig+0x604>)
 8006bf2:	68db      	ldr	r3, [r3, #12]
 8006bf4:	4a4c      	ldr	r2, [pc, #304]	; (8006d28 <HAL_RCC_OscConfig+0x618>)
 8006bf6:	4013      	ands	r3, r2
 8006bf8:	0019      	movs	r1, r3
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6a1a      	ldr	r2, [r3, #32]
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c02:	431a      	orrs	r2, r3
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c08:	021b      	lsls	r3, r3, #8
 8006c0a:	431a      	orrs	r2, r3
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c10:	431a      	orrs	r2, r3
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c16:	431a      	orrs	r2, r3
 8006c18:	4b3e      	ldr	r3, [pc, #248]	; (8006d14 <HAL_RCC_OscConfig+0x604>)
 8006c1a:	430a      	orrs	r2, r1
 8006c1c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006c1e:	4b3d      	ldr	r3, [pc, #244]	; (8006d14 <HAL_RCC_OscConfig+0x604>)
 8006c20:	681a      	ldr	r2, [r3, #0]
 8006c22:	4b3c      	ldr	r3, [pc, #240]	; (8006d14 <HAL_RCC_OscConfig+0x604>)
 8006c24:	2180      	movs	r1, #128	; 0x80
 8006c26:	0449      	lsls	r1, r1, #17
 8006c28:	430a      	orrs	r2, r1
 8006c2a:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8006c2c:	4b39      	ldr	r3, [pc, #228]	; (8006d14 <HAL_RCC_OscConfig+0x604>)
 8006c2e:	68da      	ldr	r2, [r3, #12]
 8006c30:	4b38      	ldr	r3, [pc, #224]	; (8006d14 <HAL_RCC_OscConfig+0x604>)
 8006c32:	2180      	movs	r1, #128	; 0x80
 8006c34:	0549      	lsls	r1, r1, #21
 8006c36:	430a      	orrs	r2, r1
 8006c38:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c3a:	f7fe f931 	bl	8004ea0 <HAL_GetTick>
 8006c3e:	0003      	movs	r3, r0
 8006c40:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006c42:	e008      	b.n	8006c56 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c44:	f7fe f92c 	bl	8004ea0 <HAL_GetTick>
 8006c48:	0002      	movs	r2, r0
 8006c4a:	693b      	ldr	r3, [r7, #16]
 8006c4c:	1ad3      	subs	r3, r2, r3
 8006c4e:	2b02      	cmp	r3, #2
 8006c50:	d901      	bls.n	8006c56 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8006c52:	2303      	movs	r3, #3
 8006c54:	e059      	b.n	8006d0a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006c56:	4b2f      	ldr	r3, [pc, #188]	; (8006d14 <HAL_RCC_OscConfig+0x604>)
 8006c58:	681a      	ldr	r2, [r3, #0]
 8006c5a:	2380      	movs	r3, #128	; 0x80
 8006c5c:	049b      	lsls	r3, r3, #18
 8006c5e:	4013      	ands	r3, r2
 8006c60:	d0f0      	beq.n	8006c44 <HAL_RCC_OscConfig+0x534>
 8006c62:	e051      	b.n	8006d08 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c64:	4b2b      	ldr	r3, [pc, #172]	; (8006d14 <HAL_RCC_OscConfig+0x604>)
 8006c66:	681a      	ldr	r2, [r3, #0]
 8006c68:	4b2a      	ldr	r3, [pc, #168]	; (8006d14 <HAL_RCC_OscConfig+0x604>)
 8006c6a:	492e      	ldr	r1, [pc, #184]	; (8006d24 <HAL_RCC_OscConfig+0x614>)
 8006c6c:	400a      	ands	r2, r1
 8006c6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c70:	f7fe f916 	bl	8004ea0 <HAL_GetTick>
 8006c74:	0003      	movs	r3, r0
 8006c76:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006c78:	e008      	b.n	8006c8c <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c7a:	f7fe f911 	bl	8004ea0 <HAL_GetTick>
 8006c7e:	0002      	movs	r2, r0
 8006c80:	693b      	ldr	r3, [r7, #16]
 8006c82:	1ad3      	subs	r3, r2, r3
 8006c84:	2b02      	cmp	r3, #2
 8006c86:	d901      	bls.n	8006c8c <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8006c88:	2303      	movs	r3, #3
 8006c8a:	e03e      	b.n	8006d0a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006c8c:	4b21      	ldr	r3, [pc, #132]	; (8006d14 <HAL_RCC_OscConfig+0x604>)
 8006c8e:	681a      	ldr	r2, [r3, #0]
 8006c90:	2380      	movs	r3, #128	; 0x80
 8006c92:	049b      	lsls	r3, r3, #18
 8006c94:	4013      	ands	r3, r2
 8006c96:	d1f0      	bne.n	8006c7a <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8006c98:	4b1e      	ldr	r3, [pc, #120]	; (8006d14 <HAL_RCC_OscConfig+0x604>)
 8006c9a:	68da      	ldr	r2, [r3, #12]
 8006c9c:	4b1d      	ldr	r3, [pc, #116]	; (8006d14 <HAL_RCC_OscConfig+0x604>)
 8006c9e:	4923      	ldr	r1, [pc, #140]	; (8006d2c <HAL_RCC_OscConfig+0x61c>)
 8006ca0:	400a      	ands	r2, r1
 8006ca2:	60da      	str	r2, [r3, #12]
 8006ca4:	e030      	b.n	8006d08 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	69db      	ldr	r3, [r3, #28]
 8006caa:	2b01      	cmp	r3, #1
 8006cac:	d101      	bne.n	8006cb2 <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8006cae:	2301      	movs	r3, #1
 8006cb0:	e02b      	b.n	8006d0a <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8006cb2:	4b18      	ldr	r3, [pc, #96]	; (8006d14 <HAL_RCC_OscConfig+0x604>)
 8006cb4:	68db      	ldr	r3, [r3, #12]
 8006cb6:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006cb8:	697b      	ldr	r3, [r7, #20]
 8006cba:	2203      	movs	r2, #3
 8006cbc:	401a      	ands	r2, r3
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6a1b      	ldr	r3, [r3, #32]
 8006cc2:	429a      	cmp	r2, r3
 8006cc4:	d11e      	bne.n	8006d04 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006cc6:	697b      	ldr	r3, [r7, #20]
 8006cc8:	2270      	movs	r2, #112	; 0x70
 8006cca:	401a      	ands	r2, r3
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006cd0:	429a      	cmp	r2, r3
 8006cd2:	d117      	bne.n	8006d04 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006cd4:	697a      	ldr	r2, [r7, #20]
 8006cd6:	23fe      	movs	r3, #254	; 0xfe
 8006cd8:	01db      	lsls	r3, r3, #7
 8006cda:	401a      	ands	r2, r3
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ce0:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006ce2:	429a      	cmp	r2, r3
 8006ce4:	d10e      	bne.n	8006d04 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006ce6:	697a      	ldr	r2, [r7, #20]
 8006ce8:	23f8      	movs	r3, #248	; 0xf8
 8006cea:	039b      	lsls	r3, r3, #14
 8006cec:	401a      	ands	r2, r3
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006cf2:	429a      	cmp	r2, r3
 8006cf4:	d106      	bne.n	8006d04 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8006cf6:	697b      	ldr	r3, [r7, #20]
 8006cf8:	0f5b      	lsrs	r3, r3, #29
 8006cfa:	075a      	lsls	r2, r3, #29
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006d00:	429a      	cmp	r2, r3
 8006d02:	d001      	beq.n	8006d08 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8006d04:	2301      	movs	r3, #1
 8006d06:	e000      	b.n	8006d0a <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8006d08:	2300      	movs	r3, #0
}
 8006d0a:	0018      	movs	r0, r3
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	b008      	add	sp, #32
 8006d10:	bd80      	pop	{r7, pc}
 8006d12:	46c0      	nop			; (mov r8, r8)
 8006d14:	40021000 	.word	0x40021000
 8006d18:	40007000 	.word	0x40007000
 8006d1c:	00001388 	.word	0x00001388
 8006d20:	efffffff 	.word	0xefffffff
 8006d24:	feffffff 	.word	0xfeffffff
 8006d28:	1fc1808c 	.word	0x1fc1808c
 8006d2c:	effefffc 	.word	0xeffefffc

08006d30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b084      	sub	sp, #16
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
 8006d38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d101      	bne.n	8006d44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006d40:	2301      	movs	r3, #1
 8006d42:	e0e9      	b.n	8006f18 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006d44:	4b76      	ldr	r3, [pc, #472]	; (8006f20 <HAL_RCC_ClockConfig+0x1f0>)
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	2207      	movs	r2, #7
 8006d4a:	4013      	ands	r3, r2
 8006d4c:	683a      	ldr	r2, [r7, #0]
 8006d4e:	429a      	cmp	r2, r3
 8006d50:	d91e      	bls.n	8006d90 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d52:	4b73      	ldr	r3, [pc, #460]	; (8006f20 <HAL_RCC_ClockConfig+0x1f0>)
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	2207      	movs	r2, #7
 8006d58:	4393      	bics	r3, r2
 8006d5a:	0019      	movs	r1, r3
 8006d5c:	4b70      	ldr	r3, [pc, #448]	; (8006f20 <HAL_RCC_ClockConfig+0x1f0>)
 8006d5e:	683a      	ldr	r2, [r7, #0]
 8006d60:	430a      	orrs	r2, r1
 8006d62:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006d64:	f7fe f89c 	bl	8004ea0 <HAL_GetTick>
 8006d68:	0003      	movs	r3, r0
 8006d6a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8006d6c:	e009      	b.n	8006d82 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006d6e:	f7fe f897 	bl	8004ea0 <HAL_GetTick>
 8006d72:	0002      	movs	r2, r0
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	1ad3      	subs	r3, r2, r3
 8006d78:	4a6a      	ldr	r2, [pc, #424]	; (8006f24 <HAL_RCC_ClockConfig+0x1f4>)
 8006d7a:	4293      	cmp	r3, r2
 8006d7c:	d901      	bls.n	8006d82 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8006d7e:	2303      	movs	r3, #3
 8006d80:	e0ca      	b.n	8006f18 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8006d82:	4b67      	ldr	r3, [pc, #412]	; (8006f20 <HAL_RCC_ClockConfig+0x1f0>)
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	2207      	movs	r2, #7
 8006d88:	4013      	ands	r3, r2
 8006d8a:	683a      	ldr	r2, [r7, #0]
 8006d8c:	429a      	cmp	r2, r3
 8006d8e:	d1ee      	bne.n	8006d6e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	2202      	movs	r2, #2
 8006d96:	4013      	ands	r3, r2
 8006d98:	d015      	beq.n	8006dc6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	2204      	movs	r2, #4
 8006da0:	4013      	ands	r3, r2
 8006da2:	d006      	beq.n	8006db2 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8006da4:	4b60      	ldr	r3, [pc, #384]	; (8006f28 <HAL_RCC_ClockConfig+0x1f8>)
 8006da6:	689a      	ldr	r2, [r3, #8]
 8006da8:	4b5f      	ldr	r3, [pc, #380]	; (8006f28 <HAL_RCC_ClockConfig+0x1f8>)
 8006daa:	21e0      	movs	r1, #224	; 0xe0
 8006dac:	01c9      	lsls	r1, r1, #7
 8006dae:	430a      	orrs	r2, r1
 8006db0:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006db2:	4b5d      	ldr	r3, [pc, #372]	; (8006f28 <HAL_RCC_ClockConfig+0x1f8>)
 8006db4:	689b      	ldr	r3, [r3, #8]
 8006db6:	4a5d      	ldr	r2, [pc, #372]	; (8006f2c <HAL_RCC_ClockConfig+0x1fc>)
 8006db8:	4013      	ands	r3, r2
 8006dba:	0019      	movs	r1, r3
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	689a      	ldr	r2, [r3, #8]
 8006dc0:	4b59      	ldr	r3, [pc, #356]	; (8006f28 <HAL_RCC_ClockConfig+0x1f8>)
 8006dc2:	430a      	orrs	r2, r1
 8006dc4:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	2201      	movs	r2, #1
 8006dcc:	4013      	ands	r3, r2
 8006dce:	d057      	beq.n	8006e80 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	685b      	ldr	r3, [r3, #4]
 8006dd4:	2b01      	cmp	r3, #1
 8006dd6:	d107      	bne.n	8006de8 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006dd8:	4b53      	ldr	r3, [pc, #332]	; (8006f28 <HAL_RCC_ClockConfig+0x1f8>)
 8006dda:	681a      	ldr	r2, [r3, #0]
 8006ddc:	2380      	movs	r3, #128	; 0x80
 8006dde:	029b      	lsls	r3, r3, #10
 8006de0:	4013      	ands	r3, r2
 8006de2:	d12b      	bne.n	8006e3c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8006de4:	2301      	movs	r3, #1
 8006de6:	e097      	b.n	8006f18 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	685b      	ldr	r3, [r3, #4]
 8006dec:	2b02      	cmp	r3, #2
 8006dee:	d107      	bne.n	8006e00 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006df0:	4b4d      	ldr	r3, [pc, #308]	; (8006f28 <HAL_RCC_ClockConfig+0x1f8>)
 8006df2:	681a      	ldr	r2, [r3, #0]
 8006df4:	2380      	movs	r3, #128	; 0x80
 8006df6:	049b      	lsls	r3, r3, #18
 8006df8:	4013      	ands	r3, r2
 8006dfa:	d11f      	bne.n	8006e3c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8006dfc:	2301      	movs	r3, #1
 8006dfe:	e08b      	b.n	8006f18 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	685b      	ldr	r3, [r3, #4]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d107      	bne.n	8006e18 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006e08:	4b47      	ldr	r3, [pc, #284]	; (8006f28 <HAL_RCC_ClockConfig+0x1f8>)
 8006e0a:	681a      	ldr	r2, [r3, #0]
 8006e0c:	2380      	movs	r3, #128	; 0x80
 8006e0e:	00db      	lsls	r3, r3, #3
 8006e10:	4013      	ands	r3, r2
 8006e12:	d113      	bne.n	8006e3c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8006e14:	2301      	movs	r3, #1
 8006e16:	e07f      	b.n	8006f18 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	685b      	ldr	r3, [r3, #4]
 8006e1c:	2b03      	cmp	r3, #3
 8006e1e:	d106      	bne.n	8006e2e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006e20:	4b41      	ldr	r3, [pc, #260]	; (8006f28 <HAL_RCC_ClockConfig+0x1f8>)
 8006e22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e24:	2202      	movs	r2, #2
 8006e26:	4013      	ands	r3, r2
 8006e28:	d108      	bne.n	8006e3c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8006e2a:	2301      	movs	r3, #1
 8006e2c:	e074      	b.n	8006f18 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006e2e:	4b3e      	ldr	r3, [pc, #248]	; (8006f28 <HAL_RCC_ClockConfig+0x1f8>)
 8006e30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e32:	2202      	movs	r2, #2
 8006e34:	4013      	ands	r3, r2
 8006e36:	d101      	bne.n	8006e3c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8006e38:	2301      	movs	r3, #1
 8006e3a:	e06d      	b.n	8006f18 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006e3c:	4b3a      	ldr	r3, [pc, #232]	; (8006f28 <HAL_RCC_ClockConfig+0x1f8>)
 8006e3e:	689b      	ldr	r3, [r3, #8]
 8006e40:	2207      	movs	r2, #7
 8006e42:	4393      	bics	r3, r2
 8006e44:	0019      	movs	r1, r3
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	685a      	ldr	r2, [r3, #4]
 8006e4a:	4b37      	ldr	r3, [pc, #220]	; (8006f28 <HAL_RCC_ClockConfig+0x1f8>)
 8006e4c:	430a      	orrs	r2, r1
 8006e4e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e50:	f7fe f826 	bl	8004ea0 <HAL_GetTick>
 8006e54:	0003      	movs	r3, r0
 8006e56:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e58:	e009      	b.n	8006e6e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006e5a:	f7fe f821 	bl	8004ea0 <HAL_GetTick>
 8006e5e:	0002      	movs	r2, r0
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	1ad3      	subs	r3, r2, r3
 8006e64:	4a2f      	ldr	r2, [pc, #188]	; (8006f24 <HAL_RCC_ClockConfig+0x1f4>)
 8006e66:	4293      	cmp	r3, r2
 8006e68:	d901      	bls.n	8006e6e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8006e6a:	2303      	movs	r3, #3
 8006e6c:	e054      	b.n	8006f18 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e6e:	4b2e      	ldr	r3, [pc, #184]	; (8006f28 <HAL_RCC_ClockConfig+0x1f8>)
 8006e70:	689b      	ldr	r3, [r3, #8]
 8006e72:	2238      	movs	r2, #56	; 0x38
 8006e74:	401a      	ands	r2, r3
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	685b      	ldr	r3, [r3, #4]
 8006e7a:	00db      	lsls	r3, r3, #3
 8006e7c:	429a      	cmp	r2, r3
 8006e7e:	d1ec      	bne.n	8006e5a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006e80:	4b27      	ldr	r3, [pc, #156]	; (8006f20 <HAL_RCC_ClockConfig+0x1f0>)
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	2207      	movs	r2, #7
 8006e86:	4013      	ands	r3, r2
 8006e88:	683a      	ldr	r2, [r7, #0]
 8006e8a:	429a      	cmp	r2, r3
 8006e8c:	d21e      	bcs.n	8006ecc <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e8e:	4b24      	ldr	r3, [pc, #144]	; (8006f20 <HAL_RCC_ClockConfig+0x1f0>)
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	2207      	movs	r2, #7
 8006e94:	4393      	bics	r3, r2
 8006e96:	0019      	movs	r1, r3
 8006e98:	4b21      	ldr	r3, [pc, #132]	; (8006f20 <HAL_RCC_ClockConfig+0x1f0>)
 8006e9a:	683a      	ldr	r2, [r7, #0]
 8006e9c:	430a      	orrs	r2, r1
 8006e9e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006ea0:	f7fd fffe 	bl	8004ea0 <HAL_GetTick>
 8006ea4:	0003      	movs	r3, r0
 8006ea6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8006ea8:	e009      	b.n	8006ebe <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006eaa:	f7fd fff9 	bl	8004ea0 <HAL_GetTick>
 8006eae:	0002      	movs	r2, r0
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	1ad3      	subs	r3, r2, r3
 8006eb4:	4a1b      	ldr	r2, [pc, #108]	; (8006f24 <HAL_RCC_ClockConfig+0x1f4>)
 8006eb6:	4293      	cmp	r3, r2
 8006eb8:	d901      	bls.n	8006ebe <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8006eba:	2303      	movs	r3, #3
 8006ebc:	e02c      	b.n	8006f18 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8006ebe:	4b18      	ldr	r3, [pc, #96]	; (8006f20 <HAL_RCC_ClockConfig+0x1f0>)
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	2207      	movs	r2, #7
 8006ec4:	4013      	ands	r3, r2
 8006ec6:	683a      	ldr	r2, [r7, #0]
 8006ec8:	429a      	cmp	r2, r3
 8006eca:	d1ee      	bne.n	8006eaa <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	2204      	movs	r2, #4
 8006ed2:	4013      	ands	r3, r2
 8006ed4:	d009      	beq.n	8006eea <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8006ed6:	4b14      	ldr	r3, [pc, #80]	; (8006f28 <HAL_RCC_ClockConfig+0x1f8>)
 8006ed8:	689b      	ldr	r3, [r3, #8]
 8006eda:	4a15      	ldr	r2, [pc, #84]	; (8006f30 <HAL_RCC_ClockConfig+0x200>)
 8006edc:	4013      	ands	r3, r2
 8006ede:	0019      	movs	r1, r3
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	68da      	ldr	r2, [r3, #12]
 8006ee4:	4b10      	ldr	r3, [pc, #64]	; (8006f28 <HAL_RCC_ClockConfig+0x1f8>)
 8006ee6:	430a      	orrs	r2, r1
 8006ee8:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8006eea:	f000 f829 	bl	8006f40 <HAL_RCC_GetSysClockFreq>
 8006eee:	0001      	movs	r1, r0
 8006ef0:	4b0d      	ldr	r3, [pc, #52]	; (8006f28 <HAL_RCC_ClockConfig+0x1f8>)
 8006ef2:	689b      	ldr	r3, [r3, #8]
 8006ef4:	0a1b      	lsrs	r3, r3, #8
 8006ef6:	220f      	movs	r2, #15
 8006ef8:	401a      	ands	r2, r3
 8006efa:	4b0e      	ldr	r3, [pc, #56]	; (8006f34 <HAL_RCC_ClockConfig+0x204>)
 8006efc:	0092      	lsls	r2, r2, #2
 8006efe:	58d3      	ldr	r3, [r2, r3]
 8006f00:	221f      	movs	r2, #31
 8006f02:	4013      	ands	r3, r2
 8006f04:	000a      	movs	r2, r1
 8006f06:	40da      	lsrs	r2, r3
 8006f08:	4b0b      	ldr	r3, [pc, #44]	; (8006f38 <HAL_RCC_ClockConfig+0x208>)
 8006f0a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006f0c:	4b0b      	ldr	r3, [pc, #44]	; (8006f3c <HAL_RCC_ClockConfig+0x20c>)
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	0018      	movs	r0, r3
 8006f12:	f7fd ff69 	bl	8004de8 <HAL_InitTick>
 8006f16:	0003      	movs	r3, r0
}
 8006f18:	0018      	movs	r0, r3
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	b004      	add	sp, #16
 8006f1e:	bd80      	pop	{r7, pc}
 8006f20:	40022000 	.word	0x40022000
 8006f24:	00001388 	.word	0x00001388
 8006f28:	40021000 	.word	0x40021000
 8006f2c:	fffff0ff 	.word	0xfffff0ff
 8006f30:	ffff8fff 	.word	0xffff8fff
 8006f34:	0800df60 	.word	0x0800df60
 8006f38:	20000044 	.word	0x20000044
 8006f3c:	20000048 	.word	0x20000048

08006f40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b086      	sub	sp, #24
 8006f44:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006f46:	4b3c      	ldr	r3, [pc, #240]	; (8007038 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006f48:	689b      	ldr	r3, [r3, #8]
 8006f4a:	2238      	movs	r2, #56	; 0x38
 8006f4c:	4013      	ands	r3, r2
 8006f4e:	d10f      	bne.n	8006f70 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8006f50:	4b39      	ldr	r3, [pc, #228]	; (8007038 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	0adb      	lsrs	r3, r3, #11
 8006f56:	2207      	movs	r2, #7
 8006f58:	4013      	ands	r3, r2
 8006f5a:	2201      	movs	r2, #1
 8006f5c:	409a      	lsls	r2, r3
 8006f5e:	0013      	movs	r3, r2
 8006f60:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8006f62:	6839      	ldr	r1, [r7, #0]
 8006f64:	4835      	ldr	r0, [pc, #212]	; (800703c <HAL_RCC_GetSysClockFreq+0xfc>)
 8006f66:	f7f9 f8f1 	bl	800014c <__udivsi3>
 8006f6a:	0003      	movs	r3, r0
 8006f6c:	613b      	str	r3, [r7, #16]
 8006f6e:	e05d      	b.n	800702c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006f70:	4b31      	ldr	r3, [pc, #196]	; (8007038 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006f72:	689b      	ldr	r3, [r3, #8]
 8006f74:	2238      	movs	r2, #56	; 0x38
 8006f76:	4013      	ands	r3, r2
 8006f78:	2b08      	cmp	r3, #8
 8006f7a:	d102      	bne.n	8006f82 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006f7c:	4b30      	ldr	r3, [pc, #192]	; (8007040 <HAL_RCC_GetSysClockFreq+0x100>)
 8006f7e:	613b      	str	r3, [r7, #16]
 8006f80:	e054      	b.n	800702c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006f82:	4b2d      	ldr	r3, [pc, #180]	; (8007038 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006f84:	689b      	ldr	r3, [r3, #8]
 8006f86:	2238      	movs	r2, #56	; 0x38
 8006f88:	4013      	ands	r3, r2
 8006f8a:	2b10      	cmp	r3, #16
 8006f8c:	d138      	bne.n	8007000 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8006f8e:	4b2a      	ldr	r3, [pc, #168]	; (8007038 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006f90:	68db      	ldr	r3, [r3, #12]
 8006f92:	2203      	movs	r2, #3
 8006f94:	4013      	ands	r3, r2
 8006f96:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006f98:	4b27      	ldr	r3, [pc, #156]	; (8007038 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006f9a:	68db      	ldr	r3, [r3, #12]
 8006f9c:	091b      	lsrs	r3, r3, #4
 8006f9e:	2207      	movs	r2, #7
 8006fa0:	4013      	ands	r3, r2
 8006fa2:	3301      	adds	r3, #1
 8006fa4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	2b03      	cmp	r3, #3
 8006faa:	d10d      	bne.n	8006fc8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006fac:	68b9      	ldr	r1, [r7, #8]
 8006fae:	4824      	ldr	r0, [pc, #144]	; (8007040 <HAL_RCC_GetSysClockFreq+0x100>)
 8006fb0:	f7f9 f8cc 	bl	800014c <__udivsi3>
 8006fb4:	0003      	movs	r3, r0
 8006fb6:	0019      	movs	r1, r3
 8006fb8:	4b1f      	ldr	r3, [pc, #124]	; (8007038 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006fba:	68db      	ldr	r3, [r3, #12]
 8006fbc:	0a1b      	lsrs	r3, r3, #8
 8006fbe:	227f      	movs	r2, #127	; 0x7f
 8006fc0:	4013      	ands	r3, r2
 8006fc2:	434b      	muls	r3, r1
 8006fc4:	617b      	str	r3, [r7, #20]
        break;
 8006fc6:	e00d      	b.n	8006fe4 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8006fc8:	68b9      	ldr	r1, [r7, #8]
 8006fca:	481c      	ldr	r0, [pc, #112]	; (800703c <HAL_RCC_GetSysClockFreq+0xfc>)
 8006fcc:	f7f9 f8be 	bl	800014c <__udivsi3>
 8006fd0:	0003      	movs	r3, r0
 8006fd2:	0019      	movs	r1, r3
 8006fd4:	4b18      	ldr	r3, [pc, #96]	; (8007038 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006fd6:	68db      	ldr	r3, [r3, #12]
 8006fd8:	0a1b      	lsrs	r3, r3, #8
 8006fda:	227f      	movs	r2, #127	; 0x7f
 8006fdc:	4013      	ands	r3, r2
 8006fde:	434b      	muls	r3, r1
 8006fe0:	617b      	str	r3, [r7, #20]
        break;
 8006fe2:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8006fe4:	4b14      	ldr	r3, [pc, #80]	; (8007038 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006fe6:	68db      	ldr	r3, [r3, #12]
 8006fe8:	0f5b      	lsrs	r3, r3, #29
 8006fea:	2207      	movs	r2, #7
 8006fec:	4013      	ands	r3, r2
 8006fee:	3301      	adds	r3, #1
 8006ff0:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8006ff2:	6879      	ldr	r1, [r7, #4]
 8006ff4:	6978      	ldr	r0, [r7, #20]
 8006ff6:	f7f9 f8a9 	bl	800014c <__udivsi3>
 8006ffa:	0003      	movs	r3, r0
 8006ffc:	613b      	str	r3, [r7, #16]
 8006ffe:	e015      	b.n	800702c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8007000:	4b0d      	ldr	r3, [pc, #52]	; (8007038 <HAL_RCC_GetSysClockFreq+0xf8>)
 8007002:	689b      	ldr	r3, [r3, #8]
 8007004:	2238      	movs	r2, #56	; 0x38
 8007006:	4013      	ands	r3, r2
 8007008:	2b20      	cmp	r3, #32
 800700a:	d103      	bne.n	8007014 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800700c:	2380      	movs	r3, #128	; 0x80
 800700e:	021b      	lsls	r3, r3, #8
 8007010:	613b      	str	r3, [r7, #16]
 8007012:	e00b      	b.n	800702c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8007014:	4b08      	ldr	r3, [pc, #32]	; (8007038 <HAL_RCC_GetSysClockFreq+0xf8>)
 8007016:	689b      	ldr	r3, [r3, #8]
 8007018:	2238      	movs	r2, #56	; 0x38
 800701a:	4013      	ands	r3, r2
 800701c:	2b18      	cmp	r3, #24
 800701e:	d103      	bne.n	8007028 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8007020:	23fa      	movs	r3, #250	; 0xfa
 8007022:	01db      	lsls	r3, r3, #7
 8007024:	613b      	str	r3, [r7, #16]
 8007026:	e001      	b.n	800702c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8007028:	2300      	movs	r3, #0
 800702a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800702c:	693b      	ldr	r3, [r7, #16]
}
 800702e:	0018      	movs	r0, r3
 8007030:	46bd      	mov	sp, r7
 8007032:	b006      	add	sp, #24
 8007034:	bd80      	pop	{r7, pc}
 8007036:	46c0      	nop			; (mov r8, r8)
 8007038:	40021000 	.word	0x40021000
 800703c:	00f42400 	.word	0x00f42400
 8007040:	007a1200 	.word	0x007a1200

08007044 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007044:	b580      	push	{r7, lr}
 8007046:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007048:	4b02      	ldr	r3, [pc, #8]	; (8007054 <HAL_RCC_GetHCLKFreq+0x10>)
 800704a:	681b      	ldr	r3, [r3, #0]
}
 800704c:	0018      	movs	r0, r3
 800704e:	46bd      	mov	sp, r7
 8007050:	bd80      	pop	{r7, pc}
 8007052:	46c0      	nop			; (mov r8, r8)
 8007054:	20000044 	.word	0x20000044

08007058 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007058:	b5b0      	push	{r4, r5, r7, lr}
 800705a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800705c:	f7ff fff2 	bl	8007044 <HAL_RCC_GetHCLKFreq>
 8007060:	0004      	movs	r4, r0
 8007062:	f7ff fb49 	bl	80066f8 <LL_RCC_GetAPB1Prescaler>
 8007066:	0003      	movs	r3, r0
 8007068:	0b1a      	lsrs	r2, r3, #12
 800706a:	4b05      	ldr	r3, [pc, #20]	; (8007080 <HAL_RCC_GetPCLK1Freq+0x28>)
 800706c:	0092      	lsls	r2, r2, #2
 800706e:	58d3      	ldr	r3, [r2, r3]
 8007070:	221f      	movs	r2, #31
 8007072:	4013      	ands	r3, r2
 8007074:	40dc      	lsrs	r4, r3
 8007076:	0023      	movs	r3, r4
}
 8007078:	0018      	movs	r0, r3
 800707a:	46bd      	mov	sp, r7
 800707c:	bdb0      	pop	{r4, r5, r7, pc}
 800707e:	46c0      	nop			; (mov r8, r8)
 8007080:	0800dfa0 	.word	0x0800dfa0

08007084 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007084:	b580      	push	{r7, lr}
 8007086:	b086      	sub	sp, #24
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 800708c:	2313      	movs	r3, #19
 800708e:	18fb      	adds	r3, r7, r3
 8007090:	2200      	movs	r2, #0
 8007092:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007094:	2312      	movs	r3, #18
 8007096:	18fb      	adds	r3, r7, r3
 8007098:	2200      	movs	r2, #0
 800709a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681a      	ldr	r2, [r3, #0]
 80070a0:	2380      	movs	r3, #128	; 0x80
 80070a2:	029b      	lsls	r3, r3, #10
 80070a4:	4013      	ands	r3, r2
 80070a6:	d100      	bne.n	80070aa <HAL_RCCEx_PeriphCLKConfig+0x26>
 80070a8:	e0a3      	b.n	80071f2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80070aa:	2011      	movs	r0, #17
 80070ac:	183b      	adds	r3, r7, r0
 80070ae:	2200      	movs	r2, #0
 80070b0:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80070b2:	4b86      	ldr	r3, [pc, #536]	; (80072cc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80070b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80070b6:	2380      	movs	r3, #128	; 0x80
 80070b8:	055b      	lsls	r3, r3, #21
 80070ba:	4013      	ands	r3, r2
 80070bc:	d110      	bne.n	80070e0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80070be:	4b83      	ldr	r3, [pc, #524]	; (80072cc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80070c0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80070c2:	4b82      	ldr	r3, [pc, #520]	; (80072cc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80070c4:	2180      	movs	r1, #128	; 0x80
 80070c6:	0549      	lsls	r1, r1, #21
 80070c8:	430a      	orrs	r2, r1
 80070ca:	63da      	str	r2, [r3, #60]	; 0x3c
 80070cc:	4b7f      	ldr	r3, [pc, #508]	; (80072cc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80070ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80070d0:	2380      	movs	r3, #128	; 0x80
 80070d2:	055b      	lsls	r3, r3, #21
 80070d4:	4013      	ands	r3, r2
 80070d6:	60bb      	str	r3, [r7, #8]
 80070d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80070da:	183b      	adds	r3, r7, r0
 80070dc:	2201      	movs	r2, #1
 80070de:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80070e0:	4b7b      	ldr	r3, [pc, #492]	; (80072d0 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80070e2:	681a      	ldr	r2, [r3, #0]
 80070e4:	4b7a      	ldr	r3, [pc, #488]	; (80072d0 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80070e6:	2180      	movs	r1, #128	; 0x80
 80070e8:	0049      	lsls	r1, r1, #1
 80070ea:	430a      	orrs	r2, r1
 80070ec:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80070ee:	f7fd fed7 	bl	8004ea0 <HAL_GetTick>
 80070f2:	0003      	movs	r3, r0
 80070f4:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80070f6:	e00b      	b.n	8007110 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80070f8:	f7fd fed2 	bl	8004ea0 <HAL_GetTick>
 80070fc:	0002      	movs	r2, r0
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	1ad3      	subs	r3, r2, r3
 8007102:	2b02      	cmp	r3, #2
 8007104:	d904      	bls.n	8007110 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8007106:	2313      	movs	r3, #19
 8007108:	18fb      	adds	r3, r7, r3
 800710a:	2203      	movs	r2, #3
 800710c:	701a      	strb	r2, [r3, #0]
        break;
 800710e:	e005      	b.n	800711c <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007110:	4b6f      	ldr	r3, [pc, #444]	; (80072d0 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8007112:	681a      	ldr	r2, [r3, #0]
 8007114:	2380      	movs	r3, #128	; 0x80
 8007116:	005b      	lsls	r3, r3, #1
 8007118:	4013      	ands	r3, r2
 800711a:	d0ed      	beq.n	80070f8 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 800711c:	2313      	movs	r3, #19
 800711e:	18fb      	adds	r3, r7, r3
 8007120:	781b      	ldrb	r3, [r3, #0]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d154      	bne.n	80071d0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007126:	4b69      	ldr	r3, [pc, #420]	; (80072cc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007128:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800712a:	23c0      	movs	r3, #192	; 0xc0
 800712c:	009b      	lsls	r3, r3, #2
 800712e:	4013      	ands	r3, r2
 8007130:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007132:	697b      	ldr	r3, [r7, #20]
 8007134:	2b00      	cmp	r3, #0
 8007136:	d019      	beq.n	800716c <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	699b      	ldr	r3, [r3, #24]
 800713c:	697a      	ldr	r2, [r7, #20]
 800713e:	429a      	cmp	r2, r3
 8007140:	d014      	beq.n	800716c <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007142:	4b62      	ldr	r3, [pc, #392]	; (80072cc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007144:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007146:	4a63      	ldr	r2, [pc, #396]	; (80072d4 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8007148:	4013      	ands	r3, r2
 800714a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800714c:	4b5f      	ldr	r3, [pc, #380]	; (80072cc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800714e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007150:	4b5e      	ldr	r3, [pc, #376]	; (80072cc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007152:	2180      	movs	r1, #128	; 0x80
 8007154:	0249      	lsls	r1, r1, #9
 8007156:	430a      	orrs	r2, r1
 8007158:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800715a:	4b5c      	ldr	r3, [pc, #368]	; (80072cc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800715c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800715e:	4b5b      	ldr	r3, [pc, #364]	; (80072cc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007160:	495d      	ldr	r1, [pc, #372]	; (80072d8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8007162:	400a      	ands	r2, r1
 8007164:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007166:	4b59      	ldr	r3, [pc, #356]	; (80072cc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007168:	697a      	ldr	r2, [r7, #20]
 800716a:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800716c:	697b      	ldr	r3, [r7, #20]
 800716e:	2201      	movs	r2, #1
 8007170:	4013      	ands	r3, r2
 8007172:	d016      	beq.n	80071a2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007174:	f7fd fe94 	bl	8004ea0 <HAL_GetTick>
 8007178:	0003      	movs	r3, r0
 800717a:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800717c:	e00c      	b.n	8007198 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800717e:	f7fd fe8f 	bl	8004ea0 <HAL_GetTick>
 8007182:	0002      	movs	r2, r0
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	1ad3      	subs	r3, r2, r3
 8007188:	4a54      	ldr	r2, [pc, #336]	; (80072dc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800718a:	4293      	cmp	r3, r2
 800718c:	d904      	bls.n	8007198 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800718e:	2313      	movs	r3, #19
 8007190:	18fb      	adds	r3, r7, r3
 8007192:	2203      	movs	r2, #3
 8007194:	701a      	strb	r2, [r3, #0]
            break;
 8007196:	e004      	b.n	80071a2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007198:	4b4c      	ldr	r3, [pc, #304]	; (80072cc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800719a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800719c:	2202      	movs	r2, #2
 800719e:	4013      	ands	r3, r2
 80071a0:	d0ed      	beq.n	800717e <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80071a2:	2313      	movs	r3, #19
 80071a4:	18fb      	adds	r3, r7, r3
 80071a6:	781b      	ldrb	r3, [r3, #0]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d10a      	bne.n	80071c2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80071ac:	4b47      	ldr	r3, [pc, #284]	; (80072cc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80071ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071b0:	4a48      	ldr	r2, [pc, #288]	; (80072d4 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80071b2:	4013      	ands	r3, r2
 80071b4:	0019      	movs	r1, r3
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	699a      	ldr	r2, [r3, #24]
 80071ba:	4b44      	ldr	r3, [pc, #272]	; (80072cc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80071bc:	430a      	orrs	r2, r1
 80071be:	65da      	str	r2, [r3, #92]	; 0x5c
 80071c0:	e00c      	b.n	80071dc <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80071c2:	2312      	movs	r3, #18
 80071c4:	18fb      	adds	r3, r7, r3
 80071c6:	2213      	movs	r2, #19
 80071c8:	18ba      	adds	r2, r7, r2
 80071ca:	7812      	ldrb	r2, [r2, #0]
 80071cc:	701a      	strb	r2, [r3, #0]
 80071ce:	e005      	b.n	80071dc <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071d0:	2312      	movs	r3, #18
 80071d2:	18fb      	adds	r3, r7, r3
 80071d4:	2213      	movs	r2, #19
 80071d6:	18ba      	adds	r2, r7, r2
 80071d8:	7812      	ldrb	r2, [r2, #0]
 80071da:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80071dc:	2311      	movs	r3, #17
 80071de:	18fb      	adds	r3, r7, r3
 80071e0:	781b      	ldrb	r3, [r3, #0]
 80071e2:	2b01      	cmp	r3, #1
 80071e4:	d105      	bne.n	80071f2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80071e6:	4b39      	ldr	r3, [pc, #228]	; (80072cc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80071e8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80071ea:	4b38      	ldr	r3, [pc, #224]	; (80072cc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80071ec:	493c      	ldr	r1, [pc, #240]	; (80072e0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80071ee:	400a      	ands	r2, r1
 80071f0:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	2201      	movs	r2, #1
 80071f8:	4013      	ands	r3, r2
 80071fa:	d009      	beq.n	8007210 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80071fc:	4b33      	ldr	r3, [pc, #204]	; (80072cc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80071fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007200:	2203      	movs	r2, #3
 8007202:	4393      	bics	r3, r2
 8007204:	0019      	movs	r1, r3
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	685a      	ldr	r2, [r3, #4]
 800720a:	4b30      	ldr	r3, [pc, #192]	; (80072cc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800720c:	430a      	orrs	r2, r1
 800720e:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	2202      	movs	r2, #2
 8007216:	4013      	ands	r3, r2
 8007218:	d009      	beq.n	800722e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800721a:	4b2c      	ldr	r3, [pc, #176]	; (80072cc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800721c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800721e:	220c      	movs	r2, #12
 8007220:	4393      	bics	r3, r2
 8007222:	0019      	movs	r1, r3
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	689a      	ldr	r2, [r3, #8]
 8007228:	4b28      	ldr	r3, [pc, #160]	; (80072cc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800722a:	430a      	orrs	r2, r1
 800722c:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	2220      	movs	r2, #32
 8007234:	4013      	ands	r3, r2
 8007236:	d009      	beq.n	800724c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007238:	4b24      	ldr	r3, [pc, #144]	; (80072cc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800723a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800723c:	4a29      	ldr	r2, [pc, #164]	; (80072e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800723e:	4013      	ands	r3, r2
 8007240:	0019      	movs	r1, r3
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	68da      	ldr	r2, [r3, #12]
 8007246:	4b21      	ldr	r3, [pc, #132]	; (80072cc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007248:	430a      	orrs	r2, r1
 800724a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681a      	ldr	r2, [r3, #0]
 8007250:	2380      	movs	r3, #128	; 0x80
 8007252:	01db      	lsls	r3, r3, #7
 8007254:	4013      	ands	r3, r2
 8007256:	d015      	beq.n	8007284 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007258:	4b1c      	ldr	r3, [pc, #112]	; (80072cc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800725a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800725c:	009b      	lsls	r3, r3, #2
 800725e:	0899      	lsrs	r1, r3, #2
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	695a      	ldr	r2, [r3, #20]
 8007264:	4b19      	ldr	r3, [pc, #100]	; (80072cc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007266:	430a      	orrs	r2, r1
 8007268:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	695a      	ldr	r2, [r3, #20]
 800726e:	2380      	movs	r3, #128	; 0x80
 8007270:	05db      	lsls	r3, r3, #23
 8007272:	429a      	cmp	r2, r3
 8007274:	d106      	bne.n	8007284 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8007276:	4b15      	ldr	r3, [pc, #84]	; (80072cc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007278:	68da      	ldr	r2, [r3, #12]
 800727a:	4b14      	ldr	r3, [pc, #80]	; (80072cc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800727c:	2180      	movs	r1, #128	; 0x80
 800727e:	0249      	lsls	r1, r1, #9
 8007280:	430a      	orrs	r2, r1
 8007282:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681a      	ldr	r2, [r3, #0]
 8007288:	2380      	movs	r3, #128	; 0x80
 800728a:	011b      	lsls	r3, r3, #4
 800728c:	4013      	ands	r3, r2
 800728e:	d016      	beq.n	80072be <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8007290:	4b0e      	ldr	r3, [pc, #56]	; (80072cc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007292:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007294:	4a14      	ldr	r2, [pc, #80]	; (80072e8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8007296:	4013      	ands	r3, r2
 8007298:	0019      	movs	r1, r3
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	691a      	ldr	r2, [r3, #16]
 800729e:	4b0b      	ldr	r3, [pc, #44]	; (80072cc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80072a0:	430a      	orrs	r2, r1
 80072a2:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	691a      	ldr	r2, [r3, #16]
 80072a8:	2380      	movs	r3, #128	; 0x80
 80072aa:	01db      	lsls	r3, r3, #7
 80072ac:	429a      	cmp	r2, r3
 80072ae:	d106      	bne.n	80072be <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80072b0:	4b06      	ldr	r3, [pc, #24]	; (80072cc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80072b2:	68da      	ldr	r2, [r3, #12]
 80072b4:	4b05      	ldr	r3, [pc, #20]	; (80072cc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80072b6:	2180      	movs	r1, #128	; 0x80
 80072b8:	0249      	lsls	r1, r1, #9
 80072ba:	430a      	orrs	r2, r1
 80072bc:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80072be:	2312      	movs	r3, #18
 80072c0:	18fb      	adds	r3, r7, r3
 80072c2:	781b      	ldrb	r3, [r3, #0]
}
 80072c4:	0018      	movs	r0, r3
 80072c6:	46bd      	mov	sp, r7
 80072c8:	b006      	add	sp, #24
 80072ca:	bd80      	pop	{r7, pc}
 80072cc:	40021000 	.word	0x40021000
 80072d0:	40007000 	.word	0x40007000
 80072d4:	fffffcff 	.word	0xfffffcff
 80072d8:	fffeffff 	.word	0xfffeffff
 80072dc:	00001388 	.word	0x00001388
 80072e0:	efffffff 	.word	0xefffffff
 80072e4:	ffffcfff 	.word	0xffffcfff
 80072e8:	ffff3fff 	.word	0xffff3fff

080072ec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80072ec:	b580      	push	{r7, lr}
 80072ee:	b082      	sub	sp, #8
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d101      	bne.n	80072fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80072fa:	2301      	movs	r3, #1
 80072fc:	e046      	b.n	800738c <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	2284      	movs	r2, #132	; 0x84
 8007302:	589b      	ldr	r3, [r3, r2]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d107      	bne.n	8007318 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2280      	movs	r2, #128	; 0x80
 800730c:	2100      	movs	r1, #0
 800730e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	0018      	movs	r0, r3
 8007314:	f7fd faf8 	bl	8004908 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2284      	movs	r2, #132	; 0x84
 800731c:	2124      	movs	r1, #36	; 0x24
 800731e:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	681a      	ldr	r2, [r3, #0]
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	2101      	movs	r1, #1
 800732c:	438a      	bics	r2, r1
 800732e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	0018      	movs	r0, r3
 8007334:	f000 fb74 	bl	8007a20 <UART_SetConfig>
 8007338:	0003      	movs	r3, r0
 800733a:	2b01      	cmp	r3, #1
 800733c:	d101      	bne.n	8007342 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 800733e:	2301      	movs	r3, #1
 8007340:	e024      	b.n	800738c <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007346:	2b00      	cmp	r3, #0
 8007348:	d003      	beq.n	8007352 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	0018      	movs	r0, r3
 800734e:	f000 fd0b 	bl	8007d68 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	685a      	ldr	r2, [r3, #4]
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	490d      	ldr	r1, [pc, #52]	; (8007394 <HAL_UART_Init+0xa8>)
 800735e:	400a      	ands	r2, r1
 8007360:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	689a      	ldr	r2, [r3, #8]
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	212a      	movs	r1, #42	; 0x2a
 800736e:	438a      	bics	r2, r1
 8007370:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	681a      	ldr	r2, [r3, #0]
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	2101      	movs	r1, #1
 800737e:	430a      	orrs	r2, r1
 8007380:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	0018      	movs	r0, r3
 8007386:	f000 fda3 	bl	8007ed0 <UART_CheckIdleState>
 800738a:	0003      	movs	r3, r0
}
 800738c:	0018      	movs	r0, r3
 800738e:	46bd      	mov	sp, r7
 8007390:	b002      	add	sp, #8
 8007392:	bd80      	pop	{r7, pc}
 8007394:	ffffb7ff 	.word	0xffffb7ff

08007398 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007398:	b580      	push	{r7, lr}
 800739a:	b08a      	sub	sp, #40	; 0x28
 800739c:	af02      	add	r7, sp, #8
 800739e:	60f8      	str	r0, [r7, #12]
 80073a0:	60b9      	str	r1, [r7, #8]
 80073a2:	603b      	str	r3, [r7, #0]
 80073a4:	1dbb      	adds	r3, r7, #6
 80073a6:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	2284      	movs	r2, #132	; 0x84
 80073ac:	589b      	ldr	r3, [r3, r2]
 80073ae:	2b20      	cmp	r3, #32
 80073b0:	d000      	beq.n	80073b4 <HAL_UART_Transmit+0x1c>
 80073b2:	e097      	b.n	80074e4 <HAL_UART_Transmit+0x14c>
  {
    if ((pData == NULL) || (Size == 0U))
 80073b4:	68bb      	ldr	r3, [r7, #8]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d003      	beq.n	80073c2 <HAL_UART_Transmit+0x2a>
 80073ba:	1dbb      	adds	r3, r7, #6
 80073bc:	881b      	ldrh	r3, [r3, #0]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d101      	bne.n	80073c6 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 80073c2:	2301      	movs	r3, #1
 80073c4:	e08f      	b.n	80074e6 <HAL_UART_Transmit+0x14e>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	689a      	ldr	r2, [r3, #8]
 80073ca:	2380      	movs	r3, #128	; 0x80
 80073cc:	015b      	lsls	r3, r3, #5
 80073ce:	429a      	cmp	r2, r3
 80073d0:	d109      	bne.n	80073e6 <HAL_UART_Transmit+0x4e>
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	691b      	ldr	r3, [r3, #16]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d105      	bne.n	80073e6 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80073da:	68bb      	ldr	r3, [r7, #8]
 80073dc:	2201      	movs	r2, #1
 80073de:	4013      	ands	r3, r2
 80073e0:	d001      	beq.n	80073e6 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 80073e2:	2301      	movs	r3, #1
 80073e4:	e07f      	b.n	80074e6 <HAL_UART_Transmit+0x14e>
      }
    }

    __HAL_LOCK(huart);
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	2280      	movs	r2, #128	; 0x80
 80073ea:	5c9b      	ldrb	r3, [r3, r2]
 80073ec:	2b01      	cmp	r3, #1
 80073ee:	d101      	bne.n	80073f4 <HAL_UART_Transmit+0x5c>
 80073f0:	2302      	movs	r3, #2
 80073f2:	e078      	b.n	80074e6 <HAL_UART_Transmit+0x14e>
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	2280      	movs	r2, #128	; 0x80
 80073f8:	2101      	movs	r1, #1
 80073fa:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	228c      	movs	r2, #140	; 0x8c
 8007400:	2100      	movs	r1, #0
 8007402:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	2284      	movs	r2, #132	; 0x84
 8007408:	2121      	movs	r1, #33	; 0x21
 800740a:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800740c:	f7fd fd48 	bl	8004ea0 <HAL_GetTick>
 8007410:	0003      	movs	r3, r0
 8007412:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	1dba      	adds	r2, r7, #6
 8007418:	2154      	movs	r1, #84	; 0x54
 800741a:	8812      	ldrh	r2, [r2, #0]
 800741c:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	1dba      	adds	r2, r7, #6
 8007422:	2156      	movs	r1, #86	; 0x56
 8007424:	8812      	ldrh	r2, [r2, #0]
 8007426:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	689a      	ldr	r2, [r3, #8]
 800742c:	2380      	movs	r3, #128	; 0x80
 800742e:	015b      	lsls	r3, r3, #5
 8007430:	429a      	cmp	r2, r3
 8007432:	d108      	bne.n	8007446 <HAL_UART_Transmit+0xae>
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	691b      	ldr	r3, [r3, #16]
 8007438:	2b00      	cmp	r3, #0
 800743a:	d104      	bne.n	8007446 <HAL_UART_Transmit+0xae>
    {
      pdata8bits  = NULL;
 800743c:	2300      	movs	r3, #0
 800743e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007440:	68bb      	ldr	r3, [r7, #8]
 8007442:	61bb      	str	r3, [r7, #24]
 8007444:	e003      	b.n	800744e <HAL_UART_Transmit+0xb6>
    }
    else
    {
      pdata8bits  = pData;
 8007446:	68bb      	ldr	r3, [r7, #8]
 8007448:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800744a:	2300      	movs	r3, #0
 800744c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	2280      	movs	r2, #128	; 0x80
 8007452:	2100      	movs	r1, #0
 8007454:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8007456:	e02c      	b.n	80074b2 <HAL_UART_Transmit+0x11a>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007458:	697a      	ldr	r2, [r7, #20]
 800745a:	68f8      	ldr	r0, [r7, #12]
 800745c:	683b      	ldr	r3, [r7, #0]
 800745e:	9300      	str	r3, [sp, #0]
 8007460:	0013      	movs	r3, r2
 8007462:	2200      	movs	r2, #0
 8007464:	2180      	movs	r1, #128	; 0x80
 8007466:	f000 fd7d 	bl	8007f64 <UART_WaitOnFlagUntilTimeout>
 800746a:	1e03      	subs	r3, r0, #0
 800746c:	d001      	beq.n	8007472 <HAL_UART_Transmit+0xda>
      {
        return HAL_TIMEOUT;
 800746e:	2303      	movs	r3, #3
 8007470:	e039      	b.n	80074e6 <HAL_UART_Transmit+0x14e>
      }
      if (pdata8bits == NULL)
 8007472:	69fb      	ldr	r3, [r7, #28]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d10b      	bne.n	8007490 <HAL_UART_Transmit+0xf8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007478:	69bb      	ldr	r3, [r7, #24]
 800747a:	881b      	ldrh	r3, [r3, #0]
 800747c:	001a      	movs	r2, r3
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	05d2      	lsls	r2, r2, #23
 8007484:	0dd2      	lsrs	r2, r2, #23
 8007486:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007488:	69bb      	ldr	r3, [r7, #24]
 800748a:	3302      	adds	r3, #2
 800748c:	61bb      	str	r3, [r7, #24]
 800748e:	e007      	b.n	80074a0 <HAL_UART_Transmit+0x108>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007490:	69fb      	ldr	r3, [r7, #28]
 8007492:	781a      	ldrb	r2, [r3, #0]
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800749a:	69fb      	ldr	r3, [r7, #28]
 800749c:	3301      	adds	r3, #1
 800749e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	2256      	movs	r2, #86	; 0x56
 80074a4:	5a9b      	ldrh	r3, [r3, r2]
 80074a6:	b29b      	uxth	r3, r3
 80074a8:	3b01      	subs	r3, #1
 80074aa:	b299      	uxth	r1, r3
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	2256      	movs	r2, #86	; 0x56
 80074b0:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	2256      	movs	r2, #86	; 0x56
 80074b6:	5a9b      	ldrh	r3, [r3, r2]
 80074b8:	b29b      	uxth	r3, r3
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d1cc      	bne.n	8007458 <HAL_UART_Transmit+0xc0>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80074be:	697a      	ldr	r2, [r7, #20]
 80074c0:	68f8      	ldr	r0, [r7, #12]
 80074c2:	683b      	ldr	r3, [r7, #0]
 80074c4:	9300      	str	r3, [sp, #0]
 80074c6:	0013      	movs	r3, r2
 80074c8:	2200      	movs	r2, #0
 80074ca:	2140      	movs	r1, #64	; 0x40
 80074cc:	f000 fd4a 	bl	8007f64 <UART_WaitOnFlagUntilTimeout>
 80074d0:	1e03      	subs	r3, r0, #0
 80074d2:	d001      	beq.n	80074d8 <HAL_UART_Transmit+0x140>
    {
      return HAL_TIMEOUT;
 80074d4:	2303      	movs	r3, #3
 80074d6:	e006      	b.n	80074e6 <HAL_UART_Transmit+0x14e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	2284      	movs	r2, #132	; 0x84
 80074dc:	2120      	movs	r1, #32
 80074de:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 80074e0:	2300      	movs	r3, #0
 80074e2:	e000      	b.n	80074e6 <HAL_UART_Transmit+0x14e>
  }
  else
  {
    return HAL_BUSY;
 80074e4:	2302      	movs	r3, #2
  }
}
 80074e6:	0018      	movs	r0, r3
 80074e8:	46bd      	mov	sp, r7
 80074ea:	b008      	add	sp, #32
 80074ec:	bd80      	pop	{r7, pc}
	...

080074f0 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b08a      	sub	sp, #40	; 0x28
 80074f4:	af02      	add	r7, sp, #8
 80074f6:	60f8      	str	r0, [r7, #12]
 80074f8:	60b9      	str	r1, [r7, #8]
 80074fa:	603b      	str	r3, [r7, #0]
 80074fc:	1dbb      	adds	r3, r7, #6
 80074fe:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	2288      	movs	r2, #136	; 0x88
 8007504:	589b      	ldr	r3, [r3, r2]
 8007506:	2b20      	cmp	r3, #32
 8007508:	d000      	beq.n	800750c <HAL_UART_Receive+0x1c>
 800750a:	e0db      	b.n	80076c4 <HAL_UART_Receive+0x1d4>
  {
    if ((pData == NULL) || (Size == 0U))
 800750c:	68bb      	ldr	r3, [r7, #8]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d003      	beq.n	800751a <HAL_UART_Receive+0x2a>
 8007512:	1dbb      	adds	r3, r7, #6
 8007514:	881b      	ldrh	r3, [r3, #0]
 8007516:	2b00      	cmp	r3, #0
 8007518:	d101      	bne.n	800751e <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 800751a:	2301      	movs	r3, #1
 800751c:	e0d3      	b.n	80076c6 <HAL_UART_Receive+0x1d6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	689a      	ldr	r2, [r3, #8]
 8007522:	2380      	movs	r3, #128	; 0x80
 8007524:	015b      	lsls	r3, r3, #5
 8007526:	429a      	cmp	r2, r3
 8007528:	d109      	bne.n	800753e <HAL_UART_Receive+0x4e>
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	691b      	ldr	r3, [r3, #16]
 800752e:	2b00      	cmp	r3, #0
 8007530:	d105      	bne.n	800753e <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8007532:	68bb      	ldr	r3, [r7, #8]
 8007534:	2201      	movs	r2, #1
 8007536:	4013      	ands	r3, r2
 8007538:	d001      	beq.n	800753e <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 800753a:	2301      	movs	r3, #1
 800753c:	e0c3      	b.n	80076c6 <HAL_UART_Receive+0x1d6>
      }
    }

    __HAL_LOCK(huart);
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	2280      	movs	r2, #128	; 0x80
 8007542:	5c9b      	ldrb	r3, [r3, r2]
 8007544:	2b01      	cmp	r3, #1
 8007546:	d101      	bne.n	800754c <HAL_UART_Receive+0x5c>
 8007548:	2302      	movs	r3, #2
 800754a:	e0bc      	b.n	80076c6 <HAL_UART_Receive+0x1d6>
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	2280      	movs	r2, #128	; 0x80
 8007550:	2101      	movs	r1, #1
 8007552:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	228c      	movs	r2, #140	; 0x8c
 8007558:	2100      	movs	r1, #0
 800755a:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	2288      	movs	r2, #136	; 0x88
 8007560:	2122      	movs	r1, #34	; 0x22
 8007562:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	2200      	movs	r2, #0
 8007568:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800756a:	f7fd fc99 	bl	8004ea0 <HAL_GetTick>
 800756e:	0003      	movs	r3, r0
 8007570:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	1dba      	adds	r2, r7, #6
 8007576:	215c      	movs	r1, #92	; 0x5c
 8007578:	8812      	ldrh	r2, [r2, #0]
 800757a:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	1dba      	adds	r2, r7, #6
 8007580:	215e      	movs	r1, #94	; 0x5e
 8007582:	8812      	ldrh	r2, [r2, #0]
 8007584:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	689a      	ldr	r2, [r3, #8]
 800758a:	2380      	movs	r3, #128	; 0x80
 800758c:	015b      	lsls	r3, r3, #5
 800758e:	429a      	cmp	r2, r3
 8007590:	d10d      	bne.n	80075ae <HAL_UART_Receive+0xbe>
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	691b      	ldr	r3, [r3, #16]
 8007596:	2b00      	cmp	r3, #0
 8007598:	d104      	bne.n	80075a4 <HAL_UART_Receive+0xb4>
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	2260      	movs	r2, #96	; 0x60
 800759e:	494c      	ldr	r1, [pc, #304]	; (80076d0 <HAL_UART_Receive+0x1e0>)
 80075a0:	5299      	strh	r1, [r3, r2]
 80075a2:	e02e      	b.n	8007602 <HAL_UART_Receive+0x112>
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	2260      	movs	r2, #96	; 0x60
 80075a8:	21ff      	movs	r1, #255	; 0xff
 80075aa:	5299      	strh	r1, [r3, r2]
 80075ac:	e029      	b.n	8007602 <HAL_UART_Receive+0x112>
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	689b      	ldr	r3, [r3, #8]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d10d      	bne.n	80075d2 <HAL_UART_Receive+0xe2>
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	691b      	ldr	r3, [r3, #16]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d104      	bne.n	80075c8 <HAL_UART_Receive+0xd8>
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	2260      	movs	r2, #96	; 0x60
 80075c2:	21ff      	movs	r1, #255	; 0xff
 80075c4:	5299      	strh	r1, [r3, r2]
 80075c6:	e01c      	b.n	8007602 <HAL_UART_Receive+0x112>
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	2260      	movs	r2, #96	; 0x60
 80075cc:	217f      	movs	r1, #127	; 0x7f
 80075ce:	5299      	strh	r1, [r3, r2]
 80075d0:	e017      	b.n	8007602 <HAL_UART_Receive+0x112>
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	689a      	ldr	r2, [r3, #8]
 80075d6:	2380      	movs	r3, #128	; 0x80
 80075d8:	055b      	lsls	r3, r3, #21
 80075da:	429a      	cmp	r2, r3
 80075dc:	d10d      	bne.n	80075fa <HAL_UART_Receive+0x10a>
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	691b      	ldr	r3, [r3, #16]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d104      	bne.n	80075f0 <HAL_UART_Receive+0x100>
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	2260      	movs	r2, #96	; 0x60
 80075ea:	217f      	movs	r1, #127	; 0x7f
 80075ec:	5299      	strh	r1, [r3, r2]
 80075ee:	e008      	b.n	8007602 <HAL_UART_Receive+0x112>
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	2260      	movs	r2, #96	; 0x60
 80075f4:	213f      	movs	r1, #63	; 0x3f
 80075f6:	5299      	strh	r1, [r3, r2]
 80075f8:	e003      	b.n	8007602 <HAL_UART_Receive+0x112>
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	2260      	movs	r2, #96	; 0x60
 80075fe:	2100      	movs	r1, #0
 8007600:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 8007602:	2312      	movs	r3, #18
 8007604:	18fb      	adds	r3, r7, r3
 8007606:	68fa      	ldr	r2, [r7, #12]
 8007608:	2160      	movs	r1, #96	; 0x60
 800760a:	5a52      	ldrh	r2, [r2, r1]
 800760c:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	689a      	ldr	r2, [r3, #8]
 8007612:	2380      	movs	r3, #128	; 0x80
 8007614:	015b      	lsls	r3, r3, #5
 8007616:	429a      	cmp	r2, r3
 8007618:	d108      	bne.n	800762c <HAL_UART_Receive+0x13c>
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	691b      	ldr	r3, [r3, #16]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d104      	bne.n	800762c <HAL_UART_Receive+0x13c>
    {
      pdata8bits  = NULL;
 8007622:	2300      	movs	r3, #0
 8007624:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007626:	68bb      	ldr	r3, [r7, #8]
 8007628:	61bb      	str	r3, [r7, #24]
 800762a:	e003      	b.n	8007634 <HAL_UART_Receive+0x144>
    }
    else
    {
      pdata8bits  = pData;
 800762c:	68bb      	ldr	r3, [r7, #8]
 800762e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007630:	2300      	movs	r3, #0
 8007632:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	2280      	movs	r2, #128	; 0x80
 8007638:	2100      	movs	r1, #0
 800763a:	5499      	strb	r1, [r3, r2]

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800763c:	e036      	b.n	80076ac <HAL_UART_Receive+0x1bc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800763e:	697a      	ldr	r2, [r7, #20]
 8007640:	68f8      	ldr	r0, [r7, #12]
 8007642:	683b      	ldr	r3, [r7, #0]
 8007644:	9300      	str	r3, [sp, #0]
 8007646:	0013      	movs	r3, r2
 8007648:	2200      	movs	r2, #0
 800764a:	2120      	movs	r1, #32
 800764c:	f000 fc8a 	bl	8007f64 <UART_WaitOnFlagUntilTimeout>
 8007650:	1e03      	subs	r3, r0, #0
 8007652:	d001      	beq.n	8007658 <HAL_UART_Receive+0x168>
      {
        return HAL_TIMEOUT;
 8007654:	2303      	movs	r3, #3
 8007656:	e036      	b.n	80076c6 <HAL_UART_Receive+0x1d6>
      }
      if (pdata8bits == NULL)
 8007658:	69fb      	ldr	r3, [r7, #28]
 800765a:	2b00      	cmp	r3, #0
 800765c:	d10e      	bne.n	800767c <HAL_UART_Receive+0x18c>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007664:	b29b      	uxth	r3, r3
 8007666:	2212      	movs	r2, #18
 8007668:	18ba      	adds	r2, r7, r2
 800766a:	8812      	ldrh	r2, [r2, #0]
 800766c:	4013      	ands	r3, r2
 800766e:	b29a      	uxth	r2, r3
 8007670:	69bb      	ldr	r3, [r7, #24]
 8007672:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8007674:	69bb      	ldr	r3, [r7, #24]
 8007676:	3302      	adds	r3, #2
 8007678:	61bb      	str	r3, [r7, #24]
 800767a:	e00e      	b.n	800769a <HAL_UART_Receive+0x1aa>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007682:	b2db      	uxtb	r3, r3
 8007684:	2212      	movs	r2, #18
 8007686:	18ba      	adds	r2, r7, r2
 8007688:	8812      	ldrh	r2, [r2, #0]
 800768a:	b2d2      	uxtb	r2, r2
 800768c:	4013      	ands	r3, r2
 800768e:	b2da      	uxtb	r2, r3
 8007690:	69fb      	ldr	r3, [r7, #28]
 8007692:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8007694:	69fb      	ldr	r3, [r7, #28]
 8007696:	3301      	adds	r3, #1
 8007698:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	225e      	movs	r2, #94	; 0x5e
 800769e:	5a9b      	ldrh	r3, [r3, r2]
 80076a0:	b29b      	uxth	r3, r3
 80076a2:	3b01      	subs	r3, #1
 80076a4:	b299      	uxth	r1, r3
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	225e      	movs	r2, #94	; 0x5e
 80076aa:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	225e      	movs	r2, #94	; 0x5e
 80076b0:	5a9b      	ldrh	r3, [r3, r2]
 80076b2:	b29b      	uxth	r3, r3
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d1c2      	bne.n	800763e <HAL_UART_Receive+0x14e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	2288      	movs	r2, #136	; 0x88
 80076bc:	2120      	movs	r1, #32
 80076be:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 80076c0:	2300      	movs	r3, #0
 80076c2:	e000      	b.n	80076c6 <HAL_UART_Receive+0x1d6>
  }
  else
  {
    return HAL_BUSY;
 80076c4:	2302      	movs	r3, #2
  }
}
 80076c6:	0018      	movs	r0, r3
 80076c8:	46bd      	mov	sp, r7
 80076ca:	b008      	add	sp, #32
 80076cc:	bd80      	pop	{r7, pc}
 80076ce:	46c0      	nop			; (mov r8, r8)
 80076d0:	000001ff 	.word	0x000001ff

080076d4 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80076d4:	b580      	push	{r7, lr}
 80076d6:	b088      	sub	sp, #32
 80076d8:	af00      	add	r7, sp, #0
 80076da:	60f8      	str	r0, [r7, #12]
 80076dc:	60b9      	str	r1, [r7, #8]
 80076de:	1dbb      	adds	r3, r7, #6
 80076e0:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	2288      	movs	r2, #136	; 0x88
 80076e6:	589b      	ldr	r3, [r3, r2]
 80076e8:	2b20      	cmp	r3, #32
 80076ea:	d150      	bne.n	800778e <HAL_UART_Receive_DMA+0xba>
  {
    if ((pData == NULL) || (Size == 0U))
 80076ec:	68bb      	ldr	r3, [r7, #8]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d003      	beq.n	80076fa <HAL_UART_Receive_DMA+0x26>
 80076f2:	1dbb      	adds	r3, r7, #6
 80076f4:	881b      	ldrh	r3, [r3, #0]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d101      	bne.n	80076fe <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80076fa:	2301      	movs	r3, #1
 80076fc:	e048      	b.n	8007790 <HAL_UART_Receive_DMA+0xbc>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	689a      	ldr	r2, [r3, #8]
 8007702:	2380      	movs	r3, #128	; 0x80
 8007704:	015b      	lsls	r3, r3, #5
 8007706:	429a      	cmp	r2, r3
 8007708:	d109      	bne.n	800771e <HAL_UART_Receive_DMA+0x4a>
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	691b      	ldr	r3, [r3, #16]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d105      	bne.n	800771e <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8007712:	68bb      	ldr	r3, [r7, #8]
 8007714:	2201      	movs	r2, #1
 8007716:	4013      	ands	r3, r2
 8007718:	d001      	beq.n	800771e <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 800771a:	2301      	movs	r3, #1
 800771c:	e038      	b.n	8007790 <HAL_UART_Receive_DMA+0xbc>
      }
    }

    __HAL_LOCK(huart);
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	2280      	movs	r2, #128	; 0x80
 8007722:	5c9b      	ldrb	r3, [r3, r2]
 8007724:	2b01      	cmp	r3, #1
 8007726:	d101      	bne.n	800772c <HAL_UART_Receive_DMA+0x58>
 8007728:	2302      	movs	r3, #2
 800772a:	e031      	b.n	8007790 <HAL_UART_Receive_DMA+0xbc>
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	2280      	movs	r2, #128	; 0x80
 8007730:	2101      	movs	r1, #1
 8007732:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	2200      	movs	r2, #0
 8007738:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	685a      	ldr	r2, [r3, #4]
 8007740:	2380      	movs	r3, #128	; 0x80
 8007742:	041b      	lsls	r3, r3, #16
 8007744:	4013      	ands	r3, r2
 8007746:	d019      	beq.n	800777c <HAL_UART_Receive_DMA+0xa8>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007748:	f3ef 8310 	mrs	r3, PRIMASK
 800774c:	613b      	str	r3, [r7, #16]
  return(result);
 800774e:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007750:	61fb      	str	r3, [r7, #28]
 8007752:	2301      	movs	r3, #1
 8007754:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007756:	697b      	ldr	r3, [r7, #20]
 8007758:	f383 8810 	msr	PRIMASK, r3
}
 800775c:	46c0      	nop			; (mov r8, r8)
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	681a      	ldr	r2, [r3, #0]
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	2180      	movs	r1, #128	; 0x80
 800776a:	04c9      	lsls	r1, r1, #19
 800776c:	430a      	orrs	r2, r1
 800776e:	601a      	str	r2, [r3, #0]
 8007770:	69fb      	ldr	r3, [r7, #28]
 8007772:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007774:	69bb      	ldr	r3, [r7, #24]
 8007776:	f383 8810 	msr	PRIMASK, r3
}
 800777a:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800777c:	1dbb      	adds	r3, r7, #6
 800777e:	881a      	ldrh	r2, [r3, #0]
 8007780:	68b9      	ldr	r1, [r7, #8]
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	0018      	movs	r0, r3
 8007786:	f000 fcb5 	bl	80080f4 <UART_Start_Receive_DMA>
 800778a:	0003      	movs	r3, r0
 800778c:	e000      	b.n	8007790 <HAL_UART_Receive_DMA+0xbc>
  }
  else
  {
    return HAL_BUSY;
 800778e:	2302      	movs	r3, #2
  }
}
 8007790:	0018      	movs	r0, r3
 8007792:	46bd      	mov	sp, r7
 8007794:	b008      	add	sp, #32
 8007796:	bd80      	pop	{r7, pc}

08007798 <HAL_UART_DMAPause>:
  * @brief Pause the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAPause(UART_HandleTypeDef *huart)
{
 8007798:	b580      	push	{r7, lr}
 800779a:	b094      	sub	sp, #80	; 0x50
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
  const HAL_UART_StateTypeDef gstate = huart->gState;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2284      	movs	r2, #132	; 0x84
 80077a4:	589b      	ldr	r3, [r3, r2]
 80077a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2288      	movs	r2, #136	; 0x88
 80077ac:	589b      	ldr	r3, [r3, r2]
 80077ae:	64bb      	str	r3, [r7, #72]	; 0x48

  __HAL_LOCK(huart);
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2280      	movs	r2, #128	; 0x80
 80077b4:	5c9b      	ldrb	r3, [r3, r2]
 80077b6:	2b01      	cmp	r3, #1
 80077b8:	d101      	bne.n	80077be <HAL_UART_DMAPause+0x26>
 80077ba:	2302      	movs	r3, #2
 80077bc:	e080      	b.n	80078c0 <HAL_UART_DMAPause+0x128>
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	2280      	movs	r2, #128	; 0x80
 80077c2:	2101      	movs	r1, #1
 80077c4:	5499      	strb	r1, [r3, r2]

  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	689b      	ldr	r3, [r3, #8]
 80077cc:	2280      	movs	r2, #128	; 0x80
 80077ce:	4013      	ands	r3, r2
 80077d0:	2b80      	cmp	r3, #128	; 0x80
 80077d2:	d11b      	bne.n	800780c <HAL_UART_DMAPause+0x74>
 80077d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80077d6:	2b21      	cmp	r3, #33	; 0x21
 80077d8:	d118      	bne.n	800780c <HAL_UART_DMAPause+0x74>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80077da:	f3ef 8310 	mrs	r3, PRIMASK
 80077de:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 80077e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    /* Disable the UART DMA Tx request */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80077e2:	647b      	str	r3, [r7, #68]	; 0x44
 80077e4:	2301      	movs	r3, #1
 80077e6:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80077e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077ea:	f383 8810 	msr	PRIMASK, r3
}
 80077ee:	46c0      	nop			; (mov r8, r8)
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	689a      	ldr	r2, [r3, #8]
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	2180      	movs	r1, #128	; 0x80
 80077fc:	438a      	bics	r2, r1
 80077fe:	609a      	str	r2, [r3, #8]
 8007800:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007802:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007804:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007806:	f383 8810 	msr	PRIMASK, r3
}
 800780a:	46c0      	nop			; (mov r8, r8)
  }
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	689b      	ldr	r3, [r3, #8]
 8007812:	2240      	movs	r2, #64	; 0x40
 8007814:	4013      	ands	r3, r2
 8007816:	2b40      	cmp	r3, #64	; 0x40
 8007818:	d14d      	bne.n	80078b6 <HAL_UART_DMAPause+0x11e>
 800781a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800781c:	2b22      	cmp	r3, #34	; 0x22
 800781e:	d14a      	bne.n	80078b6 <HAL_UART_DMAPause+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007820:	f3ef 8310 	mrs	r3, PRIMASK
 8007824:	60bb      	str	r3, [r7, #8]
  return(result);
 8007826:	68bb      	ldr	r3, [r7, #8]
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007828:	643b      	str	r3, [r7, #64]	; 0x40
 800782a:	2301      	movs	r3, #1
 800782c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	f383 8810 	msr	PRIMASK, r3
}
 8007834:	46c0      	nop			; (mov r8, r8)
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	681a      	ldr	r2, [r3, #0]
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	4921      	ldr	r1, [pc, #132]	; (80078c8 <HAL_UART_DMAPause+0x130>)
 8007842:	400a      	ands	r2, r1
 8007844:	601a      	str	r2, [r3, #0]
 8007846:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007848:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800784a:	693b      	ldr	r3, [r7, #16]
 800784c:	f383 8810 	msr	PRIMASK, r3
}
 8007850:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007852:	f3ef 8310 	mrs	r3, PRIMASK
 8007856:	617b      	str	r3, [r7, #20]
  return(result);
 8007858:	697b      	ldr	r3, [r7, #20]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800785a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800785c:	2301      	movs	r3, #1
 800785e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007860:	69bb      	ldr	r3, [r7, #24]
 8007862:	f383 8810 	msr	PRIMASK, r3
}
 8007866:	46c0      	nop			; (mov r8, r8)
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	689a      	ldr	r2, [r3, #8]
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	2101      	movs	r1, #1
 8007874:	438a      	bics	r2, r1
 8007876:	609a      	str	r2, [r3, #8]
 8007878:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800787a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800787c:	69fb      	ldr	r3, [r7, #28]
 800787e:	f383 8810 	msr	PRIMASK, r3
}
 8007882:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007884:	f3ef 8310 	mrs	r3, PRIMASK
 8007888:	623b      	str	r3, [r7, #32]
  return(result);
 800788a:	6a3b      	ldr	r3, [r7, #32]

    /* Disable the UART DMA Rx request */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800788c:	63bb      	str	r3, [r7, #56]	; 0x38
 800788e:	2301      	movs	r3, #1
 8007890:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007894:	f383 8810 	msr	PRIMASK, r3
}
 8007898:	46c0      	nop			; (mov r8, r8)
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	689a      	ldr	r2, [r3, #8]
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	2140      	movs	r1, #64	; 0x40
 80078a6:	438a      	bics	r2, r1
 80078a8:	609a      	str	r2, [r3, #8]
 80078aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078ac:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80078ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078b0:	f383 8810 	msr	PRIMASK, r3
}
 80078b4:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(huart);
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	2280      	movs	r2, #128	; 0x80
 80078ba:	2100      	movs	r1, #0
 80078bc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80078be:	2300      	movs	r3, #0
}
 80078c0:	0018      	movs	r0, r3
 80078c2:	46bd      	mov	sp, r7
 80078c4:	b014      	add	sp, #80	; 0x50
 80078c6:	bd80      	pop	{r7, pc}
 80078c8:	fffffeff 	.word	0xfffffeff

080078cc <HAL_UART_DMAResume>:
  * @brief Resume the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAResume(UART_HandleTypeDef *huart)
{
 80078cc:	b580      	push	{r7, lr}
 80078ce:	b092      	sub	sp, #72	; 0x48
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2280      	movs	r2, #128	; 0x80
 80078d8:	5c9b      	ldrb	r3, [r3, r2]
 80078da:	2b01      	cmp	r3, #1
 80078dc:	d101      	bne.n	80078e2 <HAL_UART_DMAResume+0x16>
 80078de:	2302      	movs	r3, #2
 80078e0:	e07f      	b.n	80079e2 <HAL_UART_DMAResume+0x116>
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	2280      	movs	r2, #128	; 0x80
 80078e6:	2101      	movs	r1, #1
 80078e8:	5499      	strb	r1, [r3, r2]

  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	2284      	movs	r2, #132	; 0x84
 80078ee:	589b      	ldr	r3, [r3, r2]
 80078f0:	2b21      	cmp	r3, #33	; 0x21
 80078f2:	d118      	bne.n	8007926 <HAL_UART_DMAResume+0x5a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80078f4:	f3ef 8310 	mrs	r3, PRIMASK
 80078f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 80078fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  {
    /* Enable the UART DMA Tx request */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80078fc:	647b      	str	r3, [r7, #68]	; 0x44
 80078fe:	2301      	movs	r3, #1
 8007900:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007904:	f383 8810 	msr	PRIMASK, r3
}
 8007908:	46c0      	nop			; (mov r8, r8)
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	689a      	ldr	r2, [r3, #8]
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	2180      	movs	r1, #128	; 0x80
 8007916:	430a      	orrs	r2, r1
 8007918:	609a      	str	r2, [r3, #8]
 800791a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800791c:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800791e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007920:	f383 8810 	msr	PRIMASK, r3
}
 8007924:	46c0      	nop			; (mov r8, r8)
  }
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	2288      	movs	r2, #136	; 0x88
 800792a:	589b      	ldr	r3, [r3, r2]
 800792c:	2b22      	cmp	r3, #34	; 0x22
 800792e:	d153      	bne.n	80079d8 <HAL_UART_DMAResume+0x10c>
  {
    /* Clear the Overrun flag before resuming the Rx transfer */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	2208      	movs	r2, #8
 8007936:	621a      	str	r2, [r3, #32]

    /* Re-enable PE and ERR (Frame error, noise error, overrun error) interrupts */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	691b      	ldr	r3, [r3, #16]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d019      	beq.n	8007974 <HAL_UART_DMAResume+0xa8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007940:	f3ef 8310 	mrs	r3, PRIMASK
 8007944:	623b      	str	r3, [r7, #32]
  return(result);
 8007946:	6a3b      	ldr	r3, [r7, #32]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007948:	643b      	str	r3, [r7, #64]	; 0x40
 800794a:	2301      	movs	r3, #1
 800794c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800794e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007950:	f383 8810 	msr	PRIMASK, r3
}
 8007954:	46c0      	nop			; (mov r8, r8)
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	681a      	ldr	r2, [r3, #0]
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	2180      	movs	r1, #128	; 0x80
 8007962:	0049      	lsls	r1, r1, #1
 8007964:	430a      	orrs	r2, r1
 8007966:	601a      	str	r2, [r3, #0]
 8007968:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800796a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800796c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800796e:	f383 8810 	msr	PRIMASK, r3
}
 8007972:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007974:	f3ef 8310 	mrs	r3, PRIMASK
 8007978:	60bb      	str	r3, [r7, #8]
  return(result);
 800797a:	68bb      	ldr	r3, [r7, #8]
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800797c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800797e:	2301      	movs	r3, #1
 8007980:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	f383 8810 	msr	PRIMASK, r3
}
 8007988:	46c0      	nop			; (mov r8, r8)
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	689a      	ldr	r2, [r3, #8]
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	2101      	movs	r1, #1
 8007996:	430a      	orrs	r2, r1
 8007998:	609a      	str	r2, [r3, #8]
 800799a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800799c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800799e:	693b      	ldr	r3, [r7, #16]
 80079a0:	f383 8810 	msr	PRIMASK, r3
}
 80079a4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80079a6:	f3ef 8310 	mrs	r3, PRIMASK
 80079aa:	617b      	str	r3, [r7, #20]
  return(result);
 80079ac:	697b      	ldr	r3, [r7, #20]

    /* Enable the UART DMA Rx request */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80079ae:	63bb      	str	r3, [r7, #56]	; 0x38
 80079b0:	2301      	movs	r3, #1
 80079b2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80079b4:	69bb      	ldr	r3, [r7, #24]
 80079b6:	f383 8810 	msr	PRIMASK, r3
}
 80079ba:	46c0      	nop			; (mov r8, r8)
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	689a      	ldr	r2, [r3, #8]
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	2140      	movs	r1, #64	; 0x40
 80079c8:	430a      	orrs	r2, r1
 80079ca:	609a      	str	r2, [r3, #8]
 80079cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079ce:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80079d0:	69fb      	ldr	r3, [r7, #28]
 80079d2:	f383 8810 	msr	PRIMASK, r3
}
 80079d6:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(huart);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	2280      	movs	r2, #128	; 0x80
 80079dc:	2100      	movs	r1, #0
 80079de:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80079e0:	2300      	movs	r3, #0
}
 80079e2:	0018      	movs	r0, r3
 80079e4:	46bd      	mov	sp, r7
 80079e6:	b012      	add	sp, #72	; 0x48
 80079e8:	bd80      	pop	{r7, pc}

080079ea <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80079ea:	b580      	push	{r7, lr}
 80079ec:	b082      	sub	sp, #8
 80079ee:	af00      	add	r7, sp, #0
 80079f0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80079f2:	46c0      	nop			; (mov r8, r8)
 80079f4:	46bd      	mov	sp, r7
 80079f6:	b002      	add	sp, #8
 80079f8:	bd80      	pop	{r7, pc}

080079fa <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80079fa:	b580      	push	{r7, lr}
 80079fc:	b082      	sub	sp, #8
 80079fe:	af00      	add	r7, sp, #0
 8007a00:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007a02:	46c0      	nop			; (mov r8, r8)
 8007a04:	46bd      	mov	sp, r7
 8007a06:	b002      	add	sp, #8
 8007a08:	bd80      	pop	{r7, pc}

08007a0a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007a0a:	b580      	push	{r7, lr}
 8007a0c:	b082      	sub	sp, #8
 8007a0e:	af00      	add	r7, sp, #0
 8007a10:	6078      	str	r0, [r7, #4]
 8007a12:	000a      	movs	r2, r1
 8007a14:	1cbb      	adds	r3, r7, #2
 8007a16:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007a18:	46c0      	nop			; (mov r8, r8)
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	b002      	add	sp, #8
 8007a1e:	bd80      	pop	{r7, pc}

08007a20 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b088      	sub	sp, #32
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007a28:	231a      	movs	r3, #26
 8007a2a:	18fb      	adds	r3, r7, r3
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	689a      	ldr	r2, [r3, #8]
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	691b      	ldr	r3, [r3, #16]
 8007a38:	431a      	orrs	r2, r3
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	695b      	ldr	r3, [r3, #20]
 8007a3e:	431a      	orrs	r2, r3
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	69db      	ldr	r3, [r3, #28]
 8007a44:	4313      	orrs	r3, r2
 8007a46:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	4abc      	ldr	r2, [pc, #752]	; (8007d40 <UART_SetConfig+0x320>)
 8007a50:	4013      	ands	r3, r2
 8007a52:	0019      	movs	r1, r3
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	69fa      	ldr	r2, [r7, #28]
 8007a5a:	430a      	orrs	r2, r1
 8007a5c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	685b      	ldr	r3, [r3, #4]
 8007a64:	4ab7      	ldr	r2, [pc, #732]	; (8007d44 <UART_SetConfig+0x324>)
 8007a66:	4013      	ands	r3, r2
 8007a68:	0019      	movs	r1, r3
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	68da      	ldr	r2, [r3, #12]
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	430a      	orrs	r2, r1
 8007a74:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	699b      	ldr	r3, [r3, #24]
 8007a7a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	6a1b      	ldr	r3, [r3, #32]
 8007a80:	69fa      	ldr	r2, [r7, #28]
 8007a82:	4313      	orrs	r3, r2
 8007a84:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	689b      	ldr	r3, [r3, #8]
 8007a8c:	4aae      	ldr	r2, [pc, #696]	; (8007d48 <UART_SetConfig+0x328>)
 8007a8e:	4013      	ands	r3, r2
 8007a90:	0019      	movs	r1, r3
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	69fa      	ldr	r2, [r7, #28]
 8007a98:	430a      	orrs	r2, r1
 8007a9a:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007aa2:	220f      	movs	r2, #15
 8007aa4:	4393      	bics	r3, r2
 8007aa6:	0019      	movs	r1, r3
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	430a      	orrs	r2, r1
 8007ab2:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	4aa4      	ldr	r2, [pc, #656]	; (8007d4c <UART_SetConfig+0x32c>)
 8007aba:	4293      	cmp	r3, r2
 8007abc:	d127      	bne.n	8007b0e <UART_SetConfig+0xee>
 8007abe:	4ba4      	ldr	r3, [pc, #656]	; (8007d50 <UART_SetConfig+0x330>)
 8007ac0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ac2:	2203      	movs	r2, #3
 8007ac4:	4013      	ands	r3, r2
 8007ac6:	2b03      	cmp	r3, #3
 8007ac8:	d017      	beq.n	8007afa <UART_SetConfig+0xda>
 8007aca:	d81b      	bhi.n	8007b04 <UART_SetConfig+0xe4>
 8007acc:	2b02      	cmp	r3, #2
 8007ace:	d00a      	beq.n	8007ae6 <UART_SetConfig+0xc6>
 8007ad0:	d818      	bhi.n	8007b04 <UART_SetConfig+0xe4>
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d002      	beq.n	8007adc <UART_SetConfig+0xbc>
 8007ad6:	2b01      	cmp	r3, #1
 8007ad8:	d00a      	beq.n	8007af0 <UART_SetConfig+0xd0>
 8007ada:	e013      	b.n	8007b04 <UART_SetConfig+0xe4>
 8007adc:	231b      	movs	r3, #27
 8007ade:	18fb      	adds	r3, r7, r3
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	701a      	strb	r2, [r3, #0]
 8007ae4:	e058      	b.n	8007b98 <UART_SetConfig+0x178>
 8007ae6:	231b      	movs	r3, #27
 8007ae8:	18fb      	adds	r3, r7, r3
 8007aea:	2202      	movs	r2, #2
 8007aec:	701a      	strb	r2, [r3, #0]
 8007aee:	e053      	b.n	8007b98 <UART_SetConfig+0x178>
 8007af0:	231b      	movs	r3, #27
 8007af2:	18fb      	adds	r3, r7, r3
 8007af4:	2204      	movs	r2, #4
 8007af6:	701a      	strb	r2, [r3, #0]
 8007af8:	e04e      	b.n	8007b98 <UART_SetConfig+0x178>
 8007afa:	231b      	movs	r3, #27
 8007afc:	18fb      	adds	r3, r7, r3
 8007afe:	2208      	movs	r2, #8
 8007b00:	701a      	strb	r2, [r3, #0]
 8007b02:	e049      	b.n	8007b98 <UART_SetConfig+0x178>
 8007b04:	231b      	movs	r3, #27
 8007b06:	18fb      	adds	r3, r7, r3
 8007b08:	2210      	movs	r2, #16
 8007b0a:	701a      	strb	r2, [r3, #0]
 8007b0c:	e044      	b.n	8007b98 <UART_SetConfig+0x178>
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	4a90      	ldr	r2, [pc, #576]	; (8007d54 <UART_SetConfig+0x334>)
 8007b14:	4293      	cmp	r3, r2
 8007b16:	d127      	bne.n	8007b68 <UART_SetConfig+0x148>
 8007b18:	4b8d      	ldr	r3, [pc, #564]	; (8007d50 <UART_SetConfig+0x330>)
 8007b1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b1c:	220c      	movs	r2, #12
 8007b1e:	4013      	ands	r3, r2
 8007b20:	2b0c      	cmp	r3, #12
 8007b22:	d017      	beq.n	8007b54 <UART_SetConfig+0x134>
 8007b24:	d81b      	bhi.n	8007b5e <UART_SetConfig+0x13e>
 8007b26:	2b08      	cmp	r3, #8
 8007b28:	d00a      	beq.n	8007b40 <UART_SetConfig+0x120>
 8007b2a:	d818      	bhi.n	8007b5e <UART_SetConfig+0x13e>
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d002      	beq.n	8007b36 <UART_SetConfig+0x116>
 8007b30:	2b04      	cmp	r3, #4
 8007b32:	d00a      	beq.n	8007b4a <UART_SetConfig+0x12a>
 8007b34:	e013      	b.n	8007b5e <UART_SetConfig+0x13e>
 8007b36:	231b      	movs	r3, #27
 8007b38:	18fb      	adds	r3, r7, r3
 8007b3a:	2200      	movs	r2, #0
 8007b3c:	701a      	strb	r2, [r3, #0]
 8007b3e:	e02b      	b.n	8007b98 <UART_SetConfig+0x178>
 8007b40:	231b      	movs	r3, #27
 8007b42:	18fb      	adds	r3, r7, r3
 8007b44:	2202      	movs	r2, #2
 8007b46:	701a      	strb	r2, [r3, #0]
 8007b48:	e026      	b.n	8007b98 <UART_SetConfig+0x178>
 8007b4a:	231b      	movs	r3, #27
 8007b4c:	18fb      	adds	r3, r7, r3
 8007b4e:	2204      	movs	r2, #4
 8007b50:	701a      	strb	r2, [r3, #0]
 8007b52:	e021      	b.n	8007b98 <UART_SetConfig+0x178>
 8007b54:	231b      	movs	r3, #27
 8007b56:	18fb      	adds	r3, r7, r3
 8007b58:	2208      	movs	r2, #8
 8007b5a:	701a      	strb	r2, [r3, #0]
 8007b5c:	e01c      	b.n	8007b98 <UART_SetConfig+0x178>
 8007b5e:	231b      	movs	r3, #27
 8007b60:	18fb      	adds	r3, r7, r3
 8007b62:	2210      	movs	r2, #16
 8007b64:	701a      	strb	r2, [r3, #0]
 8007b66:	e017      	b.n	8007b98 <UART_SetConfig+0x178>
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	4a7a      	ldr	r2, [pc, #488]	; (8007d58 <UART_SetConfig+0x338>)
 8007b6e:	4293      	cmp	r3, r2
 8007b70:	d104      	bne.n	8007b7c <UART_SetConfig+0x15c>
 8007b72:	231b      	movs	r3, #27
 8007b74:	18fb      	adds	r3, r7, r3
 8007b76:	2200      	movs	r2, #0
 8007b78:	701a      	strb	r2, [r3, #0]
 8007b7a:	e00d      	b.n	8007b98 <UART_SetConfig+0x178>
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	4a76      	ldr	r2, [pc, #472]	; (8007d5c <UART_SetConfig+0x33c>)
 8007b82:	4293      	cmp	r3, r2
 8007b84:	d104      	bne.n	8007b90 <UART_SetConfig+0x170>
 8007b86:	231b      	movs	r3, #27
 8007b88:	18fb      	adds	r3, r7, r3
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	701a      	strb	r2, [r3, #0]
 8007b8e:	e003      	b.n	8007b98 <UART_SetConfig+0x178>
 8007b90:	231b      	movs	r3, #27
 8007b92:	18fb      	adds	r3, r7, r3
 8007b94:	2210      	movs	r2, #16
 8007b96:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	69da      	ldr	r2, [r3, #28]
 8007b9c:	2380      	movs	r3, #128	; 0x80
 8007b9e:	021b      	lsls	r3, r3, #8
 8007ba0:	429a      	cmp	r2, r3
 8007ba2:	d000      	beq.n	8007ba6 <UART_SetConfig+0x186>
 8007ba4:	e065      	b.n	8007c72 <UART_SetConfig+0x252>
  {
    switch (clocksource)
 8007ba6:	231b      	movs	r3, #27
 8007ba8:	18fb      	adds	r3, r7, r3
 8007baa:	781b      	ldrb	r3, [r3, #0]
 8007bac:	2b08      	cmp	r3, #8
 8007bae:	d015      	beq.n	8007bdc <UART_SetConfig+0x1bc>
 8007bb0:	dc18      	bgt.n	8007be4 <UART_SetConfig+0x1c4>
 8007bb2:	2b04      	cmp	r3, #4
 8007bb4:	d00d      	beq.n	8007bd2 <UART_SetConfig+0x1b2>
 8007bb6:	dc15      	bgt.n	8007be4 <UART_SetConfig+0x1c4>
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d002      	beq.n	8007bc2 <UART_SetConfig+0x1a2>
 8007bbc:	2b02      	cmp	r3, #2
 8007bbe:	d005      	beq.n	8007bcc <UART_SetConfig+0x1ac>
 8007bc0:	e010      	b.n	8007be4 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007bc2:	f7ff fa49 	bl	8007058 <HAL_RCC_GetPCLK1Freq>
 8007bc6:	0003      	movs	r3, r0
 8007bc8:	617b      	str	r3, [r7, #20]
        break;
 8007bca:	e012      	b.n	8007bf2 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007bcc:	4b64      	ldr	r3, [pc, #400]	; (8007d60 <UART_SetConfig+0x340>)
 8007bce:	617b      	str	r3, [r7, #20]
        break;
 8007bd0:	e00f      	b.n	8007bf2 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007bd2:	f7ff f9b5 	bl	8006f40 <HAL_RCC_GetSysClockFreq>
 8007bd6:	0003      	movs	r3, r0
 8007bd8:	617b      	str	r3, [r7, #20]
        break;
 8007bda:	e00a      	b.n	8007bf2 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007bdc:	2380      	movs	r3, #128	; 0x80
 8007bde:	021b      	lsls	r3, r3, #8
 8007be0:	617b      	str	r3, [r7, #20]
        break;
 8007be2:	e006      	b.n	8007bf2 <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8007be4:	2300      	movs	r3, #0
 8007be6:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007be8:	231a      	movs	r3, #26
 8007bea:	18fb      	adds	r3, r7, r3
 8007bec:	2201      	movs	r2, #1
 8007bee:	701a      	strb	r2, [r3, #0]
        break;
 8007bf0:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007bf2:	697b      	ldr	r3, [r7, #20]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d100      	bne.n	8007bfa <UART_SetConfig+0x1da>
 8007bf8:	e08d      	b.n	8007d16 <UART_SetConfig+0x2f6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007bfe:	4b59      	ldr	r3, [pc, #356]	; (8007d64 <UART_SetConfig+0x344>)
 8007c00:	0052      	lsls	r2, r2, #1
 8007c02:	5ad3      	ldrh	r3, [r2, r3]
 8007c04:	0019      	movs	r1, r3
 8007c06:	6978      	ldr	r0, [r7, #20]
 8007c08:	f7f8 faa0 	bl	800014c <__udivsi3>
 8007c0c:	0003      	movs	r3, r0
 8007c0e:	005a      	lsls	r2, r3, #1
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	685b      	ldr	r3, [r3, #4]
 8007c14:	085b      	lsrs	r3, r3, #1
 8007c16:	18d2      	adds	r2, r2, r3
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	685b      	ldr	r3, [r3, #4]
 8007c1c:	0019      	movs	r1, r3
 8007c1e:	0010      	movs	r0, r2
 8007c20:	f7f8 fa94 	bl	800014c <__udivsi3>
 8007c24:	0003      	movs	r3, r0
 8007c26:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007c28:	693b      	ldr	r3, [r7, #16]
 8007c2a:	2b0f      	cmp	r3, #15
 8007c2c:	d91c      	bls.n	8007c68 <UART_SetConfig+0x248>
 8007c2e:	693a      	ldr	r2, [r7, #16]
 8007c30:	2380      	movs	r3, #128	; 0x80
 8007c32:	025b      	lsls	r3, r3, #9
 8007c34:	429a      	cmp	r2, r3
 8007c36:	d217      	bcs.n	8007c68 <UART_SetConfig+0x248>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007c38:	693b      	ldr	r3, [r7, #16]
 8007c3a:	b29a      	uxth	r2, r3
 8007c3c:	200e      	movs	r0, #14
 8007c3e:	183b      	adds	r3, r7, r0
 8007c40:	210f      	movs	r1, #15
 8007c42:	438a      	bics	r2, r1
 8007c44:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007c46:	693b      	ldr	r3, [r7, #16]
 8007c48:	085b      	lsrs	r3, r3, #1
 8007c4a:	b29b      	uxth	r3, r3
 8007c4c:	2207      	movs	r2, #7
 8007c4e:	4013      	ands	r3, r2
 8007c50:	b299      	uxth	r1, r3
 8007c52:	183b      	adds	r3, r7, r0
 8007c54:	183a      	adds	r2, r7, r0
 8007c56:	8812      	ldrh	r2, [r2, #0]
 8007c58:	430a      	orrs	r2, r1
 8007c5a:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	183a      	adds	r2, r7, r0
 8007c62:	8812      	ldrh	r2, [r2, #0]
 8007c64:	60da      	str	r2, [r3, #12]
 8007c66:	e056      	b.n	8007d16 <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 8007c68:	231a      	movs	r3, #26
 8007c6a:	18fb      	adds	r3, r7, r3
 8007c6c:	2201      	movs	r2, #1
 8007c6e:	701a      	strb	r2, [r3, #0]
 8007c70:	e051      	b.n	8007d16 <UART_SetConfig+0x2f6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007c72:	231b      	movs	r3, #27
 8007c74:	18fb      	adds	r3, r7, r3
 8007c76:	781b      	ldrb	r3, [r3, #0]
 8007c78:	2b08      	cmp	r3, #8
 8007c7a:	d015      	beq.n	8007ca8 <UART_SetConfig+0x288>
 8007c7c:	dc18      	bgt.n	8007cb0 <UART_SetConfig+0x290>
 8007c7e:	2b04      	cmp	r3, #4
 8007c80:	d00d      	beq.n	8007c9e <UART_SetConfig+0x27e>
 8007c82:	dc15      	bgt.n	8007cb0 <UART_SetConfig+0x290>
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d002      	beq.n	8007c8e <UART_SetConfig+0x26e>
 8007c88:	2b02      	cmp	r3, #2
 8007c8a:	d005      	beq.n	8007c98 <UART_SetConfig+0x278>
 8007c8c:	e010      	b.n	8007cb0 <UART_SetConfig+0x290>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007c8e:	f7ff f9e3 	bl	8007058 <HAL_RCC_GetPCLK1Freq>
 8007c92:	0003      	movs	r3, r0
 8007c94:	617b      	str	r3, [r7, #20]
        break;
 8007c96:	e012      	b.n	8007cbe <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007c98:	4b31      	ldr	r3, [pc, #196]	; (8007d60 <UART_SetConfig+0x340>)
 8007c9a:	617b      	str	r3, [r7, #20]
        break;
 8007c9c:	e00f      	b.n	8007cbe <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007c9e:	f7ff f94f 	bl	8006f40 <HAL_RCC_GetSysClockFreq>
 8007ca2:	0003      	movs	r3, r0
 8007ca4:	617b      	str	r3, [r7, #20]
        break;
 8007ca6:	e00a      	b.n	8007cbe <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007ca8:	2380      	movs	r3, #128	; 0x80
 8007caa:	021b      	lsls	r3, r3, #8
 8007cac:	617b      	str	r3, [r7, #20]
        break;
 8007cae:	e006      	b.n	8007cbe <UART_SetConfig+0x29e>
      default:
        pclk = 0U;
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007cb4:	231a      	movs	r3, #26
 8007cb6:	18fb      	adds	r3, r7, r3
 8007cb8:	2201      	movs	r2, #1
 8007cba:	701a      	strb	r2, [r3, #0]
        break;
 8007cbc:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8007cbe:	697b      	ldr	r3, [r7, #20]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d028      	beq.n	8007d16 <UART_SetConfig+0x2f6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007cc8:	4b26      	ldr	r3, [pc, #152]	; (8007d64 <UART_SetConfig+0x344>)
 8007cca:	0052      	lsls	r2, r2, #1
 8007ccc:	5ad3      	ldrh	r3, [r2, r3]
 8007cce:	0019      	movs	r1, r3
 8007cd0:	6978      	ldr	r0, [r7, #20]
 8007cd2:	f7f8 fa3b 	bl	800014c <__udivsi3>
 8007cd6:	0003      	movs	r3, r0
 8007cd8:	001a      	movs	r2, r3
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	685b      	ldr	r3, [r3, #4]
 8007cde:	085b      	lsrs	r3, r3, #1
 8007ce0:	18d2      	adds	r2, r2, r3
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	685b      	ldr	r3, [r3, #4]
 8007ce6:	0019      	movs	r1, r3
 8007ce8:	0010      	movs	r0, r2
 8007cea:	f7f8 fa2f 	bl	800014c <__udivsi3>
 8007cee:	0003      	movs	r3, r0
 8007cf0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007cf2:	693b      	ldr	r3, [r7, #16]
 8007cf4:	2b0f      	cmp	r3, #15
 8007cf6:	d90a      	bls.n	8007d0e <UART_SetConfig+0x2ee>
 8007cf8:	693a      	ldr	r2, [r7, #16]
 8007cfa:	2380      	movs	r3, #128	; 0x80
 8007cfc:	025b      	lsls	r3, r3, #9
 8007cfe:	429a      	cmp	r2, r3
 8007d00:	d205      	bcs.n	8007d0e <UART_SetConfig+0x2ee>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007d02:	693b      	ldr	r3, [r7, #16]
 8007d04:	b29a      	uxth	r2, r3
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	60da      	str	r2, [r3, #12]
 8007d0c:	e003      	b.n	8007d16 <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 8007d0e:	231a      	movs	r3, #26
 8007d10:	18fb      	adds	r3, r7, r3
 8007d12:	2201      	movs	r2, #1
 8007d14:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	226a      	movs	r2, #106	; 0x6a
 8007d1a:	2101      	movs	r1, #1
 8007d1c:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	2268      	movs	r2, #104	; 0x68
 8007d22:	2101      	movs	r1, #1
 8007d24:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	2200      	movs	r2, #0
 8007d2a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	2200      	movs	r2, #0
 8007d30:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8007d32:	231a      	movs	r3, #26
 8007d34:	18fb      	adds	r3, r7, r3
 8007d36:	781b      	ldrb	r3, [r3, #0]
}
 8007d38:	0018      	movs	r0, r3
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	b008      	add	sp, #32
 8007d3e:	bd80      	pop	{r7, pc}
 8007d40:	cfff69f3 	.word	0xcfff69f3
 8007d44:	ffffcfff 	.word	0xffffcfff
 8007d48:	11fff4ff 	.word	0x11fff4ff
 8007d4c:	40013800 	.word	0x40013800
 8007d50:	40021000 	.word	0x40021000
 8007d54:	40004400 	.word	0x40004400
 8007d58:	40004800 	.word	0x40004800
 8007d5c:	40004c00 	.word	0x40004c00
 8007d60:	00f42400 	.word	0x00f42400
 8007d64:	0800dfc0 	.word	0x0800dfc0

08007d68 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007d68:	b580      	push	{r7, lr}
 8007d6a:	b082      	sub	sp, #8
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d74:	2201      	movs	r2, #1
 8007d76:	4013      	ands	r3, r2
 8007d78:	d00b      	beq.n	8007d92 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	685b      	ldr	r3, [r3, #4]
 8007d80:	4a4a      	ldr	r2, [pc, #296]	; (8007eac <UART_AdvFeatureConfig+0x144>)
 8007d82:	4013      	ands	r3, r2
 8007d84:	0019      	movs	r1, r3
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	430a      	orrs	r2, r1
 8007d90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d96:	2202      	movs	r2, #2
 8007d98:	4013      	ands	r3, r2
 8007d9a:	d00b      	beq.n	8007db4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	685b      	ldr	r3, [r3, #4]
 8007da2:	4a43      	ldr	r2, [pc, #268]	; (8007eb0 <UART_AdvFeatureConfig+0x148>)
 8007da4:	4013      	ands	r3, r2
 8007da6:	0019      	movs	r1, r3
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	430a      	orrs	r2, r1
 8007db2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007db8:	2204      	movs	r2, #4
 8007dba:	4013      	ands	r3, r2
 8007dbc:	d00b      	beq.n	8007dd6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	685b      	ldr	r3, [r3, #4]
 8007dc4:	4a3b      	ldr	r2, [pc, #236]	; (8007eb4 <UART_AdvFeatureConfig+0x14c>)
 8007dc6:	4013      	ands	r3, r2
 8007dc8:	0019      	movs	r1, r3
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	430a      	orrs	r2, r1
 8007dd4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dda:	2208      	movs	r2, #8
 8007ddc:	4013      	ands	r3, r2
 8007dde:	d00b      	beq.n	8007df8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	685b      	ldr	r3, [r3, #4]
 8007de6:	4a34      	ldr	r2, [pc, #208]	; (8007eb8 <UART_AdvFeatureConfig+0x150>)
 8007de8:	4013      	ands	r3, r2
 8007dea:	0019      	movs	r1, r3
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	430a      	orrs	r2, r1
 8007df6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dfc:	2210      	movs	r2, #16
 8007dfe:	4013      	ands	r3, r2
 8007e00:	d00b      	beq.n	8007e1a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	689b      	ldr	r3, [r3, #8]
 8007e08:	4a2c      	ldr	r2, [pc, #176]	; (8007ebc <UART_AdvFeatureConfig+0x154>)
 8007e0a:	4013      	ands	r3, r2
 8007e0c:	0019      	movs	r1, r3
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	430a      	orrs	r2, r1
 8007e18:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e1e:	2220      	movs	r2, #32
 8007e20:	4013      	ands	r3, r2
 8007e22:	d00b      	beq.n	8007e3c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	689b      	ldr	r3, [r3, #8]
 8007e2a:	4a25      	ldr	r2, [pc, #148]	; (8007ec0 <UART_AdvFeatureConfig+0x158>)
 8007e2c:	4013      	ands	r3, r2
 8007e2e:	0019      	movs	r1, r3
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	430a      	orrs	r2, r1
 8007e3a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e40:	2240      	movs	r2, #64	; 0x40
 8007e42:	4013      	ands	r3, r2
 8007e44:	d01d      	beq.n	8007e82 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	685b      	ldr	r3, [r3, #4]
 8007e4c:	4a1d      	ldr	r2, [pc, #116]	; (8007ec4 <UART_AdvFeatureConfig+0x15c>)
 8007e4e:	4013      	ands	r3, r2
 8007e50:	0019      	movs	r1, r3
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	430a      	orrs	r2, r1
 8007e5c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007e62:	2380      	movs	r3, #128	; 0x80
 8007e64:	035b      	lsls	r3, r3, #13
 8007e66:	429a      	cmp	r2, r3
 8007e68:	d10b      	bne.n	8007e82 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	685b      	ldr	r3, [r3, #4]
 8007e70:	4a15      	ldr	r2, [pc, #84]	; (8007ec8 <UART_AdvFeatureConfig+0x160>)
 8007e72:	4013      	ands	r3, r2
 8007e74:	0019      	movs	r1, r3
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	430a      	orrs	r2, r1
 8007e80:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e86:	2280      	movs	r2, #128	; 0x80
 8007e88:	4013      	ands	r3, r2
 8007e8a:	d00b      	beq.n	8007ea4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	685b      	ldr	r3, [r3, #4]
 8007e92:	4a0e      	ldr	r2, [pc, #56]	; (8007ecc <UART_AdvFeatureConfig+0x164>)
 8007e94:	4013      	ands	r3, r2
 8007e96:	0019      	movs	r1, r3
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	430a      	orrs	r2, r1
 8007ea2:	605a      	str	r2, [r3, #4]
  }
}
 8007ea4:	46c0      	nop			; (mov r8, r8)
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	b002      	add	sp, #8
 8007eaa:	bd80      	pop	{r7, pc}
 8007eac:	fffdffff 	.word	0xfffdffff
 8007eb0:	fffeffff 	.word	0xfffeffff
 8007eb4:	fffbffff 	.word	0xfffbffff
 8007eb8:	ffff7fff 	.word	0xffff7fff
 8007ebc:	ffffefff 	.word	0xffffefff
 8007ec0:	ffffdfff 	.word	0xffffdfff
 8007ec4:	ffefffff 	.word	0xffefffff
 8007ec8:	ff9fffff 	.word	0xff9fffff
 8007ecc:	fff7ffff 	.word	0xfff7ffff

08007ed0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007ed0:	b580      	push	{r7, lr}
 8007ed2:	b086      	sub	sp, #24
 8007ed4:	af02      	add	r7, sp, #8
 8007ed6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	228c      	movs	r2, #140	; 0x8c
 8007edc:	2100      	movs	r1, #0
 8007ede:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007ee0:	f7fc ffde 	bl	8004ea0 <HAL_GetTick>
 8007ee4:	0003      	movs	r3, r0
 8007ee6:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	2208      	movs	r2, #8
 8007ef0:	4013      	ands	r3, r2
 8007ef2:	2b08      	cmp	r3, #8
 8007ef4:	d10c      	bne.n	8007f10 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	2280      	movs	r2, #128	; 0x80
 8007efa:	0391      	lsls	r1, r2, #14
 8007efc:	6878      	ldr	r0, [r7, #4]
 8007efe:	4a18      	ldr	r2, [pc, #96]	; (8007f60 <UART_CheckIdleState+0x90>)
 8007f00:	9200      	str	r2, [sp, #0]
 8007f02:	2200      	movs	r2, #0
 8007f04:	f000 f82e 	bl	8007f64 <UART_WaitOnFlagUntilTimeout>
 8007f08:	1e03      	subs	r3, r0, #0
 8007f0a:	d001      	beq.n	8007f10 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007f0c:	2303      	movs	r3, #3
 8007f0e:	e023      	b.n	8007f58 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	2204      	movs	r2, #4
 8007f18:	4013      	ands	r3, r2
 8007f1a:	2b04      	cmp	r3, #4
 8007f1c:	d10c      	bne.n	8007f38 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	2280      	movs	r2, #128	; 0x80
 8007f22:	03d1      	lsls	r1, r2, #15
 8007f24:	6878      	ldr	r0, [r7, #4]
 8007f26:	4a0e      	ldr	r2, [pc, #56]	; (8007f60 <UART_CheckIdleState+0x90>)
 8007f28:	9200      	str	r2, [sp, #0]
 8007f2a:	2200      	movs	r2, #0
 8007f2c:	f000 f81a 	bl	8007f64 <UART_WaitOnFlagUntilTimeout>
 8007f30:	1e03      	subs	r3, r0, #0
 8007f32:	d001      	beq.n	8007f38 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007f34:	2303      	movs	r3, #3
 8007f36:	e00f      	b.n	8007f58 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	2284      	movs	r2, #132	; 0x84
 8007f3c:	2120      	movs	r1, #32
 8007f3e:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	2288      	movs	r2, #136	; 0x88
 8007f44:	2120      	movs	r1, #32
 8007f46:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	2280      	movs	r2, #128	; 0x80
 8007f52:	2100      	movs	r1, #0
 8007f54:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007f56:	2300      	movs	r3, #0
}
 8007f58:	0018      	movs	r0, r3
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	b004      	add	sp, #16
 8007f5e:	bd80      	pop	{r7, pc}
 8007f60:	01ffffff 	.word	0x01ffffff

08007f64 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007f64:	b580      	push	{r7, lr}
 8007f66:	b094      	sub	sp, #80	; 0x50
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	60f8      	str	r0, [r7, #12]
 8007f6c:	60b9      	str	r1, [r7, #8]
 8007f6e:	603b      	str	r3, [r7, #0]
 8007f70:	1dfb      	adds	r3, r7, #7
 8007f72:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f74:	e0a7      	b.n	80080c6 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007f76:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007f78:	3301      	adds	r3, #1
 8007f7a:	d100      	bne.n	8007f7e <UART_WaitOnFlagUntilTimeout+0x1a>
 8007f7c:	e0a3      	b.n	80080c6 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007f7e:	f7fc ff8f 	bl	8004ea0 <HAL_GetTick>
 8007f82:	0002      	movs	r2, r0
 8007f84:	683b      	ldr	r3, [r7, #0]
 8007f86:	1ad3      	subs	r3, r2, r3
 8007f88:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007f8a:	429a      	cmp	r2, r3
 8007f8c:	d302      	bcc.n	8007f94 <UART_WaitOnFlagUntilTimeout+0x30>
 8007f8e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d13f      	bne.n	8008014 <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007f94:	f3ef 8310 	mrs	r3, PRIMASK
 8007f98:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8007f9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007f9c:	647b      	str	r3, [r7, #68]	; 0x44
 8007f9e:	2301      	movs	r3, #1
 8007fa0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007fa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fa4:	f383 8810 	msr	PRIMASK, r3
}
 8007fa8:	46c0      	nop			; (mov r8, r8)
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	681a      	ldr	r2, [r3, #0]
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	494e      	ldr	r1, [pc, #312]	; (80080f0 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8007fb6:	400a      	ands	r2, r1
 8007fb8:	601a      	str	r2, [r3, #0]
 8007fba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007fbc:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fc0:	f383 8810 	msr	PRIMASK, r3
}
 8007fc4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007fc6:	f3ef 8310 	mrs	r3, PRIMASK
 8007fca:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8007fcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007fce:	643b      	str	r3, [r7, #64]	; 0x40
 8007fd0:	2301      	movs	r3, #1
 8007fd2:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007fd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fd6:	f383 8810 	msr	PRIMASK, r3
}
 8007fda:	46c0      	nop			; (mov r8, r8)
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	689a      	ldr	r2, [r3, #8]
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	2101      	movs	r1, #1
 8007fe8:	438a      	bics	r2, r1
 8007fea:	609a      	str	r2, [r3, #8]
 8007fec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007fee:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ff0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ff2:	f383 8810 	msr	PRIMASK, r3
}
 8007ff6:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	2284      	movs	r2, #132	; 0x84
 8007ffc:	2120      	movs	r1, #32
 8007ffe:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	2288      	movs	r2, #136	; 0x88
 8008004:	2120      	movs	r1, #32
 8008006:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	2280      	movs	r2, #128	; 0x80
 800800c:	2100      	movs	r1, #0
 800800e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8008010:	2303      	movs	r3, #3
 8008012:	e069      	b.n	80080e8 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	2204      	movs	r2, #4
 800801c:	4013      	ands	r3, r2
 800801e:	d052      	beq.n	80080c6 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	69da      	ldr	r2, [r3, #28]
 8008026:	2380      	movs	r3, #128	; 0x80
 8008028:	011b      	lsls	r3, r3, #4
 800802a:	401a      	ands	r2, r3
 800802c:	2380      	movs	r3, #128	; 0x80
 800802e:	011b      	lsls	r3, r3, #4
 8008030:	429a      	cmp	r2, r3
 8008032:	d148      	bne.n	80080c6 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	2280      	movs	r2, #128	; 0x80
 800803a:	0112      	lsls	r2, r2, #4
 800803c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800803e:	f3ef 8310 	mrs	r3, PRIMASK
 8008042:	613b      	str	r3, [r7, #16]
  return(result);
 8008044:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008046:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008048:	2301      	movs	r3, #1
 800804a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800804c:	697b      	ldr	r3, [r7, #20]
 800804e:	f383 8810 	msr	PRIMASK, r3
}
 8008052:	46c0      	nop			; (mov r8, r8)
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	681a      	ldr	r2, [r3, #0]
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	4924      	ldr	r1, [pc, #144]	; (80080f0 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8008060:	400a      	ands	r2, r1
 8008062:	601a      	str	r2, [r3, #0]
 8008064:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008066:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008068:	69bb      	ldr	r3, [r7, #24]
 800806a:	f383 8810 	msr	PRIMASK, r3
}
 800806e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008070:	f3ef 8310 	mrs	r3, PRIMASK
 8008074:	61fb      	str	r3, [r7, #28]
  return(result);
 8008076:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008078:	64bb      	str	r3, [r7, #72]	; 0x48
 800807a:	2301      	movs	r3, #1
 800807c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800807e:	6a3b      	ldr	r3, [r7, #32]
 8008080:	f383 8810 	msr	PRIMASK, r3
}
 8008084:	46c0      	nop			; (mov r8, r8)
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	689a      	ldr	r2, [r3, #8]
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	2101      	movs	r1, #1
 8008092:	438a      	bics	r2, r1
 8008094:	609a      	str	r2, [r3, #8]
 8008096:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008098:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800809a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800809c:	f383 8810 	msr	PRIMASK, r3
}
 80080a0:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	2284      	movs	r2, #132	; 0x84
 80080a6:	2120      	movs	r1, #32
 80080a8:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	2288      	movs	r2, #136	; 0x88
 80080ae:	2120      	movs	r1, #32
 80080b0:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	228c      	movs	r2, #140	; 0x8c
 80080b6:	2120      	movs	r1, #32
 80080b8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	2280      	movs	r2, #128	; 0x80
 80080be:	2100      	movs	r1, #0
 80080c0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80080c2:	2303      	movs	r3, #3
 80080c4:	e010      	b.n	80080e8 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	69db      	ldr	r3, [r3, #28]
 80080cc:	68ba      	ldr	r2, [r7, #8]
 80080ce:	4013      	ands	r3, r2
 80080d0:	68ba      	ldr	r2, [r7, #8]
 80080d2:	1ad3      	subs	r3, r2, r3
 80080d4:	425a      	negs	r2, r3
 80080d6:	4153      	adcs	r3, r2
 80080d8:	b2db      	uxtb	r3, r3
 80080da:	001a      	movs	r2, r3
 80080dc:	1dfb      	adds	r3, r7, #7
 80080de:	781b      	ldrb	r3, [r3, #0]
 80080e0:	429a      	cmp	r2, r3
 80080e2:	d100      	bne.n	80080e6 <UART_WaitOnFlagUntilTimeout+0x182>
 80080e4:	e747      	b.n	8007f76 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80080e6:	2300      	movs	r3, #0
}
 80080e8:	0018      	movs	r0, r3
 80080ea:	46bd      	mov	sp, r7
 80080ec:	b014      	add	sp, #80	; 0x50
 80080ee:	bd80      	pop	{r7, pc}
 80080f0:	fffffe5f 	.word	0xfffffe5f

080080f4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80080f4:	b580      	push	{r7, lr}
 80080f6:	b090      	sub	sp, #64	; 0x40
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	60f8      	str	r0, [r7, #12]
 80080fc:	60b9      	str	r1, [r7, #8]
 80080fe:	1dbb      	adds	r3, r7, #6
 8008100:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	68ba      	ldr	r2, [r7, #8]
 8008106:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	1dba      	adds	r2, r7, #6
 800810c:	215c      	movs	r1, #92	; 0x5c
 800810e:	8812      	ldrh	r2, [r2, #0]
 8008110:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	228c      	movs	r2, #140	; 0x8c
 8008116:	2100      	movs	r1, #0
 8008118:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	2288      	movs	r2, #136	; 0x88
 800811e:	2122      	movs	r1, #34	; 0x22
 8008120:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008126:	2b00      	cmp	r3, #0
 8008128:	d02c      	beq.n	8008184 <UART_Start_Receive_DMA+0x90>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800812e:	4a42      	ldr	r2, [pc, #264]	; (8008238 <UART_Start_Receive_DMA+0x144>)
 8008130:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008136:	4a41      	ldr	r2, [pc, #260]	; (800823c <UART_Start_Receive_DMA+0x148>)
 8008138:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800813e:	4a40      	ldr	r2, [pc, #256]	; (8008240 <UART_Start_Receive_DMA+0x14c>)
 8008140:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008146:	2200      	movs	r2, #0
 8008148:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	3324      	adds	r3, #36	; 0x24
 8008154:	0019      	movs	r1, r3
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800815a:	001a      	movs	r2, r3
 800815c:	1dbb      	adds	r3, r7, #6
 800815e:	881b      	ldrh	r3, [r3, #0]
 8008160:	f7fd f866 	bl	8005230 <HAL_DMA_Start_IT>
 8008164:	1e03      	subs	r3, r0, #0
 8008166:	d00d      	beq.n	8008184 <UART_Start_Receive_DMA+0x90>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	228c      	movs	r2, #140	; 0x8c
 800816c:	2110      	movs	r1, #16
 800816e:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	2280      	movs	r2, #128	; 0x80
 8008174:	2100      	movs	r1, #0
 8008176:	5499      	strb	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	2288      	movs	r2, #136	; 0x88
 800817c:	2120      	movs	r1, #32
 800817e:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 8008180:	2301      	movs	r3, #1
 8008182:	e054      	b.n	800822e <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	2280      	movs	r2, #128	; 0x80
 8008188:	2100      	movs	r1, #0
 800818a:	5499      	strb	r1, [r3, r2]

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	691b      	ldr	r3, [r3, #16]
 8008190:	2b00      	cmp	r3, #0
 8008192:	d019      	beq.n	80081c8 <UART_Start_Receive_DMA+0xd4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008194:	f3ef 8310 	mrs	r3, PRIMASK
 8008198:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800819a:	6abb      	ldr	r3, [r7, #40]	; 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800819c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800819e:	2301      	movs	r3, #1
 80081a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80081a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081a4:	f383 8810 	msr	PRIMASK, r3
}
 80081a8:	46c0      	nop			; (mov r8, r8)
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	681a      	ldr	r2, [r3, #0]
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	2180      	movs	r1, #128	; 0x80
 80081b6:	0049      	lsls	r1, r1, #1
 80081b8:	430a      	orrs	r2, r1
 80081ba:	601a      	str	r2, [r3, #0]
 80081bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081be:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80081c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081c2:	f383 8810 	msr	PRIMASK, r3
}
 80081c6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80081c8:	f3ef 8310 	mrs	r3, PRIMASK
 80081cc:	613b      	str	r3, [r7, #16]
  return(result);
 80081ce:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80081d0:	63bb      	str	r3, [r7, #56]	; 0x38
 80081d2:	2301      	movs	r3, #1
 80081d4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80081d6:	697b      	ldr	r3, [r7, #20]
 80081d8:	f383 8810 	msr	PRIMASK, r3
}
 80081dc:	46c0      	nop			; (mov r8, r8)
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	689a      	ldr	r2, [r3, #8]
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	2101      	movs	r1, #1
 80081ea:	430a      	orrs	r2, r1
 80081ec:	609a      	str	r2, [r3, #8]
 80081ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081f0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80081f2:	69bb      	ldr	r3, [r7, #24]
 80081f4:	f383 8810 	msr	PRIMASK, r3
}
 80081f8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80081fa:	f3ef 8310 	mrs	r3, PRIMASK
 80081fe:	61fb      	str	r3, [r7, #28]
  return(result);
 8008200:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008202:	637b      	str	r3, [r7, #52]	; 0x34
 8008204:	2301      	movs	r3, #1
 8008206:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008208:	6a3b      	ldr	r3, [r7, #32]
 800820a:	f383 8810 	msr	PRIMASK, r3
}
 800820e:	46c0      	nop			; (mov r8, r8)
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	689a      	ldr	r2, [r3, #8]
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	2140      	movs	r1, #64	; 0x40
 800821c:	430a      	orrs	r2, r1
 800821e:	609a      	str	r2, [r3, #8]
 8008220:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008222:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008226:	f383 8810 	msr	PRIMASK, r3
}
 800822a:	46c0      	nop			; (mov r8, r8)

  return HAL_OK;
 800822c:	2300      	movs	r3, #0
}
 800822e:	0018      	movs	r0, r3
 8008230:	46bd      	mov	sp, r7
 8008232:	b010      	add	sp, #64	; 0x40
 8008234:	bd80      	pop	{r7, pc}
 8008236:	46c0      	nop			; (mov r8, r8)
 8008238:	08008391 	.word	0x08008391
 800823c:	080084b9 	.word	0x080084b9
 8008240:	080084f5 	.word	0x080084f5

08008244 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b08a      	sub	sp, #40	; 0x28
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800824c:	f3ef 8310 	mrs	r3, PRIMASK
 8008250:	60bb      	str	r3, [r7, #8]
  return(result);
 8008252:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8008254:	627b      	str	r3, [r7, #36]	; 0x24
 8008256:	2301      	movs	r3, #1
 8008258:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	f383 8810 	msr	PRIMASK, r3
}
 8008260:	46c0      	nop			; (mov r8, r8)
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	681a      	ldr	r2, [r3, #0]
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	21c0      	movs	r1, #192	; 0xc0
 800826e:	438a      	bics	r2, r1
 8008270:	601a      	str	r2, [r3, #0]
 8008272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008274:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008276:	693b      	ldr	r3, [r7, #16]
 8008278:	f383 8810 	msr	PRIMASK, r3
}
 800827c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800827e:	f3ef 8310 	mrs	r3, PRIMASK
 8008282:	617b      	str	r3, [r7, #20]
  return(result);
 8008284:	697b      	ldr	r3, [r7, #20]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8008286:	623b      	str	r3, [r7, #32]
 8008288:	2301      	movs	r3, #1
 800828a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800828c:	69bb      	ldr	r3, [r7, #24]
 800828e:	f383 8810 	msr	PRIMASK, r3
}
 8008292:	46c0      	nop			; (mov r8, r8)
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	689a      	ldr	r2, [r3, #8]
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	4908      	ldr	r1, [pc, #32]	; (80082c0 <UART_EndTxTransfer+0x7c>)
 80082a0:	400a      	ands	r2, r1
 80082a2:	609a      	str	r2, [r3, #8]
 80082a4:	6a3b      	ldr	r3, [r7, #32]
 80082a6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80082a8:	69fb      	ldr	r3, [r7, #28]
 80082aa:	f383 8810 	msr	PRIMASK, r3
}
 80082ae:	46c0      	nop			; (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	2284      	movs	r2, #132	; 0x84
 80082b4:	2120      	movs	r1, #32
 80082b6:	5099      	str	r1, [r3, r2]
}
 80082b8:	46c0      	nop			; (mov r8, r8)
 80082ba:	46bd      	mov	sp, r7
 80082bc:	b00a      	add	sp, #40	; 0x28
 80082be:	bd80      	pop	{r7, pc}
 80082c0:	ff7fffff 	.word	0xff7fffff

080082c4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80082c4:	b580      	push	{r7, lr}
 80082c6:	b08e      	sub	sp, #56	; 0x38
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80082cc:	f3ef 8310 	mrs	r3, PRIMASK
 80082d0:	617b      	str	r3, [r7, #20]
  return(result);
 80082d2:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80082d4:	637b      	str	r3, [r7, #52]	; 0x34
 80082d6:	2301      	movs	r3, #1
 80082d8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80082da:	69bb      	ldr	r3, [r7, #24]
 80082dc:	f383 8810 	msr	PRIMASK, r3
}
 80082e0:	46c0      	nop			; (mov r8, r8)
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	681a      	ldr	r2, [r3, #0]
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	4926      	ldr	r1, [pc, #152]	; (8008388 <UART_EndRxTransfer+0xc4>)
 80082ee:	400a      	ands	r2, r1
 80082f0:	601a      	str	r2, [r3, #0]
 80082f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082f4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80082f6:	69fb      	ldr	r3, [r7, #28]
 80082f8:	f383 8810 	msr	PRIMASK, r3
}
 80082fc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80082fe:	f3ef 8310 	mrs	r3, PRIMASK
 8008302:	623b      	str	r3, [r7, #32]
  return(result);
 8008304:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008306:	633b      	str	r3, [r7, #48]	; 0x30
 8008308:	2301      	movs	r3, #1
 800830a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800830c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800830e:	f383 8810 	msr	PRIMASK, r3
}
 8008312:	46c0      	nop			; (mov r8, r8)
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	689a      	ldr	r2, [r3, #8]
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	491b      	ldr	r1, [pc, #108]	; (800838c <UART_EndRxTransfer+0xc8>)
 8008320:	400a      	ands	r2, r1
 8008322:	609a      	str	r2, [r3, #8]
 8008324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008326:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800832a:	f383 8810 	msr	PRIMASK, r3
}
 800832e:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008334:	2b01      	cmp	r3, #1
 8008336:	d118      	bne.n	800836a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008338:	f3ef 8310 	mrs	r3, PRIMASK
 800833c:	60bb      	str	r3, [r7, #8]
  return(result);
 800833e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008340:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008342:	2301      	movs	r3, #1
 8008344:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	f383 8810 	msr	PRIMASK, r3
}
 800834c:	46c0      	nop			; (mov r8, r8)
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	681a      	ldr	r2, [r3, #0]
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	2110      	movs	r1, #16
 800835a:	438a      	bics	r2, r1
 800835c:	601a      	str	r2, [r3, #0]
 800835e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008360:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008362:	693b      	ldr	r3, [r7, #16]
 8008364:	f383 8810 	msr	PRIMASK, r3
}
 8008368:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	2288      	movs	r2, #136	; 0x88
 800836e:	2120      	movs	r1, #32
 8008370:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	2200      	movs	r2, #0
 8008376:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	2200      	movs	r2, #0
 800837c:	671a      	str	r2, [r3, #112]	; 0x70
}
 800837e:	46c0      	nop			; (mov r8, r8)
 8008380:	46bd      	mov	sp, r7
 8008382:	b00e      	add	sp, #56	; 0x38
 8008384:	bd80      	pop	{r7, pc}
 8008386:	46c0      	nop			; (mov r8, r8)
 8008388:	fffffedf 	.word	0xfffffedf
 800838c:	effffffe 	.word	0xeffffffe

08008390 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008390:	b580      	push	{r7, lr}
 8008392:	b094      	sub	sp, #80	; 0x50
 8008394:	af00      	add	r7, sp, #0
 8008396:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800839c:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	2220      	movs	r2, #32
 80083a6:	4013      	ands	r3, r2
 80083a8:	d16f      	bne.n	800848a <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 80083aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80083ac:	225e      	movs	r2, #94	; 0x5e
 80083ae:	2100      	movs	r1, #0
 80083b0:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80083b2:	f3ef 8310 	mrs	r3, PRIMASK
 80083b6:	61bb      	str	r3, [r7, #24]
  return(result);
 80083b8:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80083ba:	64bb      	str	r3, [r7, #72]	; 0x48
 80083bc:	2301      	movs	r3, #1
 80083be:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80083c0:	69fb      	ldr	r3, [r7, #28]
 80083c2:	f383 8810 	msr	PRIMASK, r3
}
 80083c6:	46c0      	nop			; (mov r8, r8)
 80083c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	681a      	ldr	r2, [r3, #0]
 80083ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	4938      	ldr	r1, [pc, #224]	; (80084b4 <UART_DMAReceiveCplt+0x124>)
 80083d4:	400a      	ands	r2, r1
 80083d6:	601a      	str	r2, [r3, #0]
 80083d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80083da:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80083dc:	6a3b      	ldr	r3, [r7, #32]
 80083de:	f383 8810 	msr	PRIMASK, r3
}
 80083e2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80083e4:	f3ef 8310 	mrs	r3, PRIMASK
 80083e8:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80083ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80083ec:	647b      	str	r3, [r7, #68]	; 0x44
 80083ee:	2301      	movs	r3, #1
 80083f0:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80083f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083f4:	f383 8810 	msr	PRIMASK, r3
}
 80083f8:	46c0      	nop			; (mov r8, r8)
 80083fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	689a      	ldr	r2, [r3, #8]
 8008400:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	2101      	movs	r1, #1
 8008406:	438a      	bics	r2, r1
 8008408:	609a      	str	r2, [r3, #8]
 800840a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800840c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800840e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008410:	f383 8810 	msr	PRIMASK, r3
}
 8008414:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008416:	f3ef 8310 	mrs	r3, PRIMASK
 800841a:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 800841c:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800841e:	643b      	str	r3, [r7, #64]	; 0x40
 8008420:	2301      	movs	r3, #1
 8008422:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008424:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008426:	f383 8810 	msr	PRIMASK, r3
}
 800842a:	46c0      	nop			; (mov r8, r8)
 800842c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	689a      	ldr	r2, [r3, #8]
 8008432:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	2140      	movs	r1, #64	; 0x40
 8008438:	438a      	bics	r2, r1
 800843a:	609a      	str	r2, [r3, #8]
 800843c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800843e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008440:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008442:	f383 8810 	msr	PRIMASK, r3
}
 8008446:	46c0      	nop			; (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008448:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800844a:	2288      	movs	r2, #136	; 0x88
 800844c:	2120      	movs	r1, #32
 800844e:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008450:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008452:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008454:	2b01      	cmp	r3, #1
 8008456:	d118      	bne.n	800848a <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008458:	f3ef 8310 	mrs	r3, PRIMASK
 800845c:	60fb      	str	r3, [r7, #12]
  return(result);
 800845e:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008460:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008462:	2301      	movs	r3, #1
 8008464:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008466:	693b      	ldr	r3, [r7, #16]
 8008468:	f383 8810 	msr	PRIMASK, r3
}
 800846c:	46c0      	nop			; (mov r8, r8)
 800846e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	681a      	ldr	r2, [r3, #0]
 8008474:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	2110      	movs	r1, #16
 800847a:	438a      	bics	r2, r1
 800847c:	601a      	str	r2, [r3, #0]
 800847e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008480:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008482:	697b      	ldr	r3, [r7, #20]
 8008484:	f383 8810 	msr	PRIMASK, r3
}
 8008488:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800848a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800848c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800848e:	2b01      	cmp	r3, #1
 8008490:	d108      	bne.n	80084a4 <UART_DMAReceiveCplt+0x114>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008492:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008494:	225c      	movs	r2, #92	; 0x5c
 8008496:	5a9a      	ldrh	r2, [r3, r2]
 8008498:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800849a:	0011      	movs	r1, r2
 800849c:	0018      	movs	r0, r3
 800849e:	f7ff fab4 	bl	8007a0a <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80084a2:	e003      	b.n	80084ac <UART_DMAReceiveCplt+0x11c>
    HAL_UART_RxCpltCallback(huart);
 80084a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80084a6:	0018      	movs	r0, r3
 80084a8:	f7fb fa0c 	bl	80038c4 <HAL_UART_RxCpltCallback>
}
 80084ac:	46c0      	nop			; (mov r8, r8)
 80084ae:	46bd      	mov	sp, r7
 80084b0:	b014      	add	sp, #80	; 0x50
 80084b2:	bd80      	pop	{r7, pc}
 80084b4:	fffffeff 	.word	0xfffffeff

080084b8 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80084b8:	b580      	push	{r7, lr}
 80084ba:	b084      	sub	sp, #16
 80084bc:	af00      	add	r7, sp, #0
 80084be:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084c4:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80084ca:	2b01      	cmp	r3, #1
 80084cc:	d10a      	bne.n	80084e4 <UART_DMARxHalfCplt+0x2c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	225c      	movs	r2, #92	; 0x5c
 80084d2:	5a9b      	ldrh	r3, [r3, r2]
 80084d4:	085b      	lsrs	r3, r3, #1
 80084d6:	b29a      	uxth	r2, r3
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	0011      	movs	r1, r2
 80084dc:	0018      	movs	r0, r3
 80084de:	f7ff fa94 	bl	8007a0a <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80084e2:	e003      	b.n	80084ec <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	0018      	movs	r0, r3
 80084e8:	f7ff fa7f 	bl	80079ea <HAL_UART_RxHalfCpltCallback>
}
 80084ec:	46c0      	nop			; (mov r8, r8)
 80084ee:	46bd      	mov	sp, r7
 80084f0:	b004      	add	sp, #16
 80084f2:	bd80      	pop	{r7, pc}

080084f4 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80084f4:	b580      	push	{r7, lr}
 80084f6:	b086      	sub	sp, #24
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008500:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8008502:	697b      	ldr	r3, [r7, #20]
 8008504:	2284      	movs	r2, #132	; 0x84
 8008506:	589b      	ldr	r3, [r3, r2]
 8008508:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800850a:	697b      	ldr	r3, [r7, #20]
 800850c:	2288      	movs	r2, #136	; 0x88
 800850e:	589b      	ldr	r3, [r3, r2]
 8008510:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008512:	697b      	ldr	r3, [r7, #20]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	689b      	ldr	r3, [r3, #8]
 8008518:	2280      	movs	r2, #128	; 0x80
 800851a:	4013      	ands	r3, r2
 800851c:	2b80      	cmp	r3, #128	; 0x80
 800851e:	d10a      	bne.n	8008536 <UART_DMAError+0x42>
 8008520:	693b      	ldr	r3, [r7, #16]
 8008522:	2b21      	cmp	r3, #33	; 0x21
 8008524:	d107      	bne.n	8008536 <UART_DMAError+0x42>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8008526:	697b      	ldr	r3, [r7, #20]
 8008528:	2256      	movs	r2, #86	; 0x56
 800852a:	2100      	movs	r1, #0
 800852c:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 800852e:	697b      	ldr	r3, [r7, #20]
 8008530:	0018      	movs	r0, r3
 8008532:	f7ff fe87 	bl	8008244 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8008536:	697b      	ldr	r3, [r7, #20]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	689b      	ldr	r3, [r3, #8]
 800853c:	2240      	movs	r2, #64	; 0x40
 800853e:	4013      	ands	r3, r2
 8008540:	2b40      	cmp	r3, #64	; 0x40
 8008542:	d10a      	bne.n	800855a <UART_DMAError+0x66>
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	2b22      	cmp	r3, #34	; 0x22
 8008548:	d107      	bne.n	800855a <UART_DMAError+0x66>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800854a:	697b      	ldr	r3, [r7, #20]
 800854c:	225e      	movs	r2, #94	; 0x5e
 800854e:	2100      	movs	r1, #0
 8008550:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8008552:	697b      	ldr	r3, [r7, #20]
 8008554:	0018      	movs	r0, r3
 8008556:	f7ff feb5 	bl	80082c4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800855a:	697b      	ldr	r3, [r7, #20]
 800855c:	228c      	movs	r2, #140	; 0x8c
 800855e:	589b      	ldr	r3, [r3, r2]
 8008560:	2210      	movs	r2, #16
 8008562:	431a      	orrs	r2, r3
 8008564:	697b      	ldr	r3, [r7, #20]
 8008566:	218c      	movs	r1, #140	; 0x8c
 8008568:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800856a:	697b      	ldr	r3, [r7, #20]
 800856c:	0018      	movs	r0, r3
 800856e:	f7ff fa44 	bl	80079fa <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008572:	46c0      	nop			; (mov r8, r8)
 8008574:	46bd      	mov	sp, r7
 8008576:	b006      	add	sp, #24
 8008578:	bd80      	pop	{r7, pc}
	...

0800857c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800857c:	b580      	push	{r7, lr}
 800857e:	b084      	sub	sp, #16
 8008580:	af00      	add	r7, sp, #0
 8008582:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	2280      	movs	r2, #128	; 0x80
 8008588:	5c9b      	ldrb	r3, [r3, r2]
 800858a:	2b01      	cmp	r3, #1
 800858c:	d101      	bne.n	8008592 <HAL_UARTEx_DisableFifoMode+0x16>
 800858e:	2302      	movs	r3, #2
 8008590:	e027      	b.n	80085e2 <HAL_UARTEx_DisableFifoMode+0x66>
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	2280      	movs	r2, #128	; 0x80
 8008596:	2101      	movs	r1, #1
 8008598:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	2284      	movs	r2, #132	; 0x84
 800859e:	2124      	movs	r1, #36	; 0x24
 80085a0:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	681a      	ldr	r2, [r3, #0]
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	2101      	movs	r1, #1
 80085b6:	438a      	bics	r2, r1
 80085b8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	4a0b      	ldr	r2, [pc, #44]	; (80085ec <HAL_UARTEx_DisableFifoMode+0x70>)
 80085be:	4013      	ands	r3, r2
 80085c0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	2200      	movs	r2, #0
 80085c6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	68fa      	ldr	r2, [r7, #12]
 80085ce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	2284      	movs	r2, #132	; 0x84
 80085d4:	2120      	movs	r1, #32
 80085d6:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	2280      	movs	r2, #128	; 0x80
 80085dc:	2100      	movs	r1, #0
 80085de:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80085e0:	2300      	movs	r3, #0
}
 80085e2:	0018      	movs	r0, r3
 80085e4:	46bd      	mov	sp, r7
 80085e6:	b004      	add	sp, #16
 80085e8:	bd80      	pop	{r7, pc}
 80085ea:	46c0      	nop			; (mov r8, r8)
 80085ec:	dfffffff 	.word	0xdfffffff

080085f0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80085f0:	b580      	push	{r7, lr}
 80085f2:	b084      	sub	sp, #16
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]
 80085f8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	2280      	movs	r2, #128	; 0x80
 80085fe:	5c9b      	ldrb	r3, [r3, r2]
 8008600:	2b01      	cmp	r3, #1
 8008602:	d101      	bne.n	8008608 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008604:	2302      	movs	r3, #2
 8008606:	e02e      	b.n	8008666 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	2280      	movs	r2, #128	; 0x80
 800860c:	2101      	movs	r1, #1
 800860e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	2284      	movs	r2, #132	; 0x84
 8008614:	2124      	movs	r1, #36	; 0x24
 8008616:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	681a      	ldr	r2, [r3, #0]
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	2101      	movs	r1, #1
 800862c:	438a      	bics	r2, r1
 800862e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	689b      	ldr	r3, [r3, #8]
 8008636:	00db      	lsls	r3, r3, #3
 8008638:	08d9      	lsrs	r1, r3, #3
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	683a      	ldr	r2, [r7, #0]
 8008640:	430a      	orrs	r2, r1
 8008642:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	0018      	movs	r0, r3
 8008648:	f000 f854 	bl	80086f4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	68fa      	ldr	r2, [r7, #12]
 8008652:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	2284      	movs	r2, #132	; 0x84
 8008658:	2120      	movs	r1, #32
 800865a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	2280      	movs	r2, #128	; 0x80
 8008660:	2100      	movs	r1, #0
 8008662:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008664:	2300      	movs	r3, #0
}
 8008666:	0018      	movs	r0, r3
 8008668:	46bd      	mov	sp, r7
 800866a:	b004      	add	sp, #16
 800866c:	bd80      	pop	{r7, pc}
	...

08008670 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008670:	b580      	push	{r7, lr}
 8008672:	b084      	sub	sp, #16
 8008674:	af00      	add	r7, sp, #0
 8008676:	6078      	str	r0, [r7, #4]
 8008678:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	2280      	movs	r2, #128	; 0x80
 800867e:	5c9b      	ldrb	r3, [r3, r2]
 8008680:	2b01      	cmp	r3, #1
 8008682:	d101      	bne.n	8008688 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008684:	2302      	movs	r3, #2
 8008686:	e02f      	b.n	80086e8 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	2280      	movs	r2, #128	; 0x80
 800868c:	2101      	movs	r1, #1
 800868e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	2284      	movs	r2, #132	; 0x84
 8008694:	2124      	movs	r1, #36	; 0x24
 8008696:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	681a      	ldr	r2, [r3, #0]
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	2101      	movs	r1, #1
 80086ac:	438a      	bics	r2, r1
 80086ae:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	689b      	ldr	r3, [r3, #8]
 80086b6:	4a0e      	ldr	r2, [pc, #56]	; (80086f0 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80086b8:	4013      	ands	r3, r2
 80086ba:	0019      	movs	r1, r3
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	683a      	ldr	r2, [r7, #0]
 80086c2:	430a      	orrs	r2, r1
 80086c4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	0018      	movs	r0, r3
 80086ca:	f000 f813 	bl	80086f4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	68fa      	ldr	r2, [r7, #12]
 80086d4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	2284      	movs	r2, #132	; 0x84
 80086da:	2120      	movs	r1, #32
 80086dc:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	2280      	movs	r2, #128	; 0x80
 80086e2:	2100      	movs	r1, #0
 80086e4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80086e6:	2300      	movs	r3, #0
}
 80086e8:	0018      	movs	r0, r3
 80086ea:	46bd      	mov	sp, r7
 80086ec:	b004      	add	sp, #16
 80086ee:	bd80      	pop	{r7, pc}
 80086f0:	f1ffffff 	.word	0xf1ffffff

080086f4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80086f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80086f6:	b085      	sub	sp, #20
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008700:	2b00      	cmp	r3, #0
 8008702:	d108      	bne.n	8008716 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	226a      	movs	r2, #106	; 0x6a
 8008708:	2101      	movs	r1, #1
 800870a:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	2268      	movs	r2, #104	; 0x68
 8008710:	2101      	movs	r1, #1
 8008712:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008714:	e043      	b.n	800879e <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008716:	260f      	movs	r6, #15
 8008718:	19bb      	adds	r3, r7, r6
 800871a:	2208      	movs	r2, #8
 800871c:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800871e:	200e      	movs	r0, #14
 8008720:	183b      	adds	r3, r7, r0
 8008722:	2208      	movs	r2, #8
 8008724:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	689b      	ldr	r3, [r3, #8]
 800872c:	0e5b      	lsrs	r3, r3, #25
 800872e:	b2da      	uxtb	r2, r3
 8008730:	240d      	movs	r4, #13
 8008732:	193b      	adds	r3, r7, r4
 8008734:	2107      	movs	r1, #7
 8008736:	400a      	ands	r2, r1
 8008738:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	689b      	ldr	r3, [r3, #8]
 8008740:	0f5b      	lsrs	r3, r3, #29
 8008742:	b2da      	uxtb	r2, r3
 8008744:	250c      	movs	r5, #12
 8008746:	197b      	adds	r3, r7, r5
 8008748:	2107      	movs	r1, #7
 800874a:	400a      	ands	r2, r1
 800874c:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800874e:	183b      	adds	r3, r7, r0
 8008750:	781b      	ldrb	r3, [r3, #0]
 8008752:	197a      	adds	r2, r7, r5
 8008754:	7812      	ldrb	r2, [r2, #0]
 8008756:	4914      	ldr	r1, [pc, #80]	; (80087a8 <UARTEx_SetNbDataToProcess+0xb4>)
 8008758:	5c8a      	ldrb	r2, [r1, r2]
 800875a:	435a      	muls	r2, r3
 800875c:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800875e:	197b      	adds	r3, r7, r5
 8008760:	781b      	ldrb	r3, [r3, #0]
 8008762:	4a12      	ldr	r2, [pc, #72]	; (80087ac <UARTEx_SetNbDataToProcess+0xb8>)
 8008764:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008766:	0019      	movs	r1, r3
 8008768:	f7f7 fd7a 	bl	8000260 <__divsi3>
 800876c:	0003      	movs	r3, r0
 800876e:	b299      	uxth	r1, r3
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	226a      	movs	r2, #106	; 0x6a
 8008774:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008776:	19bb      	adds	r3, r7, r6
 8008778:	781b      	ldrb	r3, [r3, #0]
 800877a:	193a      	adds	r2, r7, r4
 800877c:	7812      	ldrb	r2, [r2, #0]
 800877e:	490a      	ldr	r1, [pc, #40]	; (80087a8 <UARTEx_SetNbDataToProcess+0xb4>)
 8008780:	5c8a      	ldrb	r2, [r1, r2]
 8008782:	435a      	muls	r2, r3
 8008784:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8008786:	193b      	adds	r3, r7, r4
 8008788:	781b      	ldrb	r3, [r3, #0]
 800878a:	4a08      	ldr	r2, [pc, #32]	; (80087ac <UARTEx_SetNbDataToProcess+0xb8>)
 800878c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800878e:	0019      	movs	r1, r3
 8008790:	f7f7 fd66 	bl	8000260 <__divsi3>
 8008794:	0003      	movs	r3, r0
 8008796:	b299      	uxth	r1, r3
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	2268      	movs	r2, #104	; 0x68
 800879c:	5299      	strh	r1, [r3, r2]
}
 800879e:	46c0      	nop			; (mov r8, r8)
 80087a0:	46bd      	mov	sp, r7
 80087a2:	b005      	add	sp, #20
 80087a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80087a6:	46c0      	nop			; (mov r8, r8)
 80087a8:	0800dfd8 	.word	0x0800dfd8
 80087ac:	0800dfe0 	.word	0x0800dfe0

080087b0 <__errno>:
 80087b0:	4b01      	ldr	r3, [pc, #4]	; (80087b8 <__errno+0x8>)
 80087b2:	6818      	ldr	r0, [r3, #0]
 80087b4:	4770      	bx	lr
 80087b6:	46c0      	nop			; (mov r8, r8)
 80087b8:	20000050 	.word	0x20000050

080087bc <__libc_init_array>:
 80087bc:	b570      	push	{r4, r5, r6, lr}
 80087be:	2600      	movs	r6, #0
 80087c0:	4d0c      	ldr	r5, [pc, #48]	; (80087f4 <__libc_init_array+0x38>)
 80087c2:	4c0d      	ldr	r4, [pc, #52]	; (80087f8 <__libc_init_array+0x3c>)
 80087c4:	1b64      	subs	r4, r4, r5
 80087c6:	10a4      	asrs	r4, r4, #2
 80087c8:	42a6      	cmp	r6, r4
 80087ca:	d109      	bne.n	80087e0 <__libc_init_array+0x24>
 80087cc:	2600      	movs	r6, #0
 80087ce:	f005 f9d3 	bl	800db78 <_init>
 80087d2:	4d0a      	ldr	r5, [pc, #40]	; (80087fc <__libc_init_array+0x40>)
 80087d4:	4c0a      	ldr	r4, [pc, #40]	; (8008800 <__libc_init_array+0x44>)
 80087d6:	1b64      	subs	r4, r4, r5
 80087d8:	10a4      	asrs	r4, r4, #2
 80087da:	42a6      	cmp	r6, r4
 80087dc:	d105      	bne.n	80087ea <__libc_init_array+0x2e>
 80087de:	bd70      	pop	{r4, r5, r6, pc}
 80087e0:	00b3      	lsls	r3, r6, #2
 80087e2:	58eb      	ldr	r3, [r5, r3]
 80087e4:	4798      	blx	r3
 80087e6:	3601      	adds	r6, #1
 80087e8:	e7ee      	b.n	80087c8 <__libc_init_array+0xc>
 80087ea:	00b3      	lsls	r3, r6, #2
 80087ec:	58eb      	ldr	r3, [r5, r3]
 80087ee:	4798      	blx	r3
 80087f0:	3601      	adds	r6, #1
 80087f2:	e7f2      	b.n	80087da <__libc_init_array+0x1e>
 80087f4:	0800e4a4 	.word	0x0800e4a4
 80087f8:	0800e4a4 	.word	0x0800e4a4
 80087fc:	0800e4a4 	.word	0x0800e4a4
 8008800:	0800e4a8 	.word	0x0800e4a8

08008804 <malloc>:
 8008804:	b510      	push	{r4, lr}
 8008806:	4b03      	ldr	r3, [pc, #12]	; (8008814 <malloc+0x10>)
 8008808:	0001      	movs	r1, r0
 800880a:	6818      	ldr	r0, [r3, #0]
 800880c:	f000 f894 	bl	8008938 <_malloc_r>
 8008810:	bd10      	pop	{r4, pc}
 8008812:	46c0      	nop			; (mov r8, r8)
 8008814:	20000050 	.word	0x20000050

08008818 <memcpy>:
 8008818:	2300      	movs	r3, #0
 800881a:	b510      	push	{r4, lr}
 800881c:	429a      	cmp	r2, r3
 800881e:	d100      	bne.n	8008822 <memcpy+0xa>
 8008820:	bd10      	pop	{r4, pc}
 8008822:	5ccc      	ldrb	r4, [r1, r3]
 8008824:	54c4      	strb	r4, [r0, r3]
 8008826:	3301      	adds	r3, #1
 8008828:	e7f8      	b.n	800881c <memcpy+0x4>

0800882a <memmove>:
 800882a:	b510      	push	{r4, lr}
 800882c:	4288      	cmp	r0, r1
 800882e:	d902      	bls.n	8008836 <memmove+0xc>
 8008830:	188b      	adds	r3, r1, r2
 8008832:	4298      	cmp	r0, r3
 8008834:	d303      	bcc.n	800883e <memmove+0x14>
 8008836:	2300      	movs	r3, #0
 8008838:	e007      	b.n	800884a <memmove+0x20>
 800883a:	5c8b      	ldrb	r3, [r1, r2]
 800883c:	5483      	strb	r3, [r0, r2]
 800883e:	3a01      	subs	r2, #1
 8008840:	d2fb      	bcs.n	800883a <memmove+0x10>
 8008842:	bd10      	pop	{r4, pc}
 8008844:	5ccc      	ldrb	r4, [r1, r3]
 8008846:	54c4      	strb	r4, [r0, r3]
 8008848:	3301      	adds	r3, #1
 800884a:	429a      	cmp	r2, r3
 800884c:	d1fa      	bne.n	8008844 <memmove+0x1a>
 800884e:	e7f8      	b.n	8008842 <memmove+0x18>

08008850 <memset>:
 8008850:	0003      	movs	r3, r0
 8008852:	1882      	adds	r2, r0, r2
 8008854:	4293      	cmp	r3, r2
 8008856:	d100      	bne.n	800885a <memset+0xa>
 8008858:	4770      	bx	lr
 800885a:	7019      	strb	r1, [r3, #0]
 800885c:	3301      	adds	r3, #1
 800885e:	e7f9      	b.n	8008854 <memset+0x4>

08008860 <_free_r>:
 8008860:	b570      	push	{r4, r5, r6, lr}
 8008862:	0005      	movs	r5, r0
 8008864:	2900      	cmp	r1, #0
 8008866:	d010      	beq.n	800888a <_free_r+0x2a>
 8008868:	1f0c      	subs	r4, r1, #4
 800886a:	6823      	ldr	r3, [r4, #0]
 800886c:	2b00      	cmp	r3, #0
 800886e:	da00      	bge.n	8008872 <_free_r+0x12>
 8008870:	18e4      	adds	r4, r4, r3
 8008872:	0028      	movs	r0, r5
 8008874:	f003 f952 	bl	800bb1c <__malloc_lock>
 8008878:	4a1d      	ldr	r2, [pc, #116]	; (80088f0 <_free_r+0x90>)
 800887a:	6813      	ldr	r3, [r2, #0]
 800887c:	2b00      	cmp	r3, #0
 800887e:	d105      	bne.n	800888c <_free_r+0x2c>
 8008880:	6063      	str	r3, [r4, #4]
 8008882:	6014      	str	r4, [r2, #0]
 8008884:	0028      	movs	r0, r5
 8008886:	f003 f951 	bl	800bb2c <__malloc_unlock>
 800888a:	bd70      	pop	{r4, r5, r6, pc}
 800888c:	42a3      	cmp	r3, r4
 800888e:	d908      	bls.n	80088a2 <_free_r+0x42>
 8008890:	6821      	ldr	r1, [r4, #0]
 8008892:	1860      	adds	r0, r4, r1
 8008894:	4283      	cmp	r3, r0
 8008896:	d1f3      	bne.n	8008880 <_free_r+0x20>
 8008898:	6818      	ldr	r0, [r3, #0]
 800889a:	685b      	ldr	r3, [r3, #4]
 800889c:	1841      	adds	r1, r0, r1
 800889e:	6021      	str	r1, [r4, #0]
 80088a0:	e7ee      	b.n	8008880 <_free_r+0x20>
 80088a2:	001a      	movs	r2, r3
 80088a4:	685b      	ldr	r3, [r3, #4]
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d001      	beq.n	80088ae <_free_r+0x4e>
 80088aa:	42a3      	cmp	r3, r4
 80088ac:	d9f9      	bls.n	80088a2 <_free_r+0x42>
 80088ae:	6811      	ldr	r1, [r2, #0]
 80088b0:	1850      	adds	r0, r2, r1
 80088b2:	42a0      	cmp	r0, r4
 80088b4:	d10b      	bne.n	80088ce <_free_r+0x6e>
 80088b6:	6820      	ldr	r0, [r4, #0]
 80088b8:	1809      	adds	r1, r1, r0
 80088ba:	1850      	adds	r0, r2, r1
 80088bc:	6011      	str	r1, [r2, #0]
 80088be:	4283      	cmp	r3, r0
 80088c0:	d1e0      	bne.n	8008884 <_free_r+0x24>
 80088c2:	6818      	ldr	r0, [r3, #0]
 80088c4:	685b      	ldr	r3, [r3, #4]
 80088c6:	1841      	adds	r1, r0, r1
 80088c8:	6011      	str	r1, [r2, #0]
 80088ca:	6053      	str	r3, [r2, #4]
 80088cc:	e7da      	b.n	8008884 <_free_r+0x24>
 80088ce:	42a0      	cmp	r0, r4
 80088d0:	d902      	bls.n	80088d8 <_free_r+0x78>
 80088d2:	230c      	movs	r3, #12
 80088d4:	602b      	str	r3, [r5, #0]
 80088d6:	e7d5      	b.n	8008884 <_free_r+0x24>
 80088d8:	6821      	ldr	r1, [r4, #0]
 80088da:	1860      	adds	r0, r4, r1
 80088dc:	4283      	cmp	r3, r0
 80088de:	d103      	bne.n	80088e8 <_free_r+0x88>
 80088e0:	6818      	ldr	r0, [r3, #0]
 80088e2:	685b      	ldr	r3, [r3, #4]
 80088e4:	1841      	adds	r1, r0, r1
 80088e6:	6021      	str	r1, [r4, #0]
 80088e8:	6063      	str	r3, [r4, #4]
 80088ea:	6054      	str	r4, [r2, #4]
 80088ec:	e7ca      	b.n	8008884 <_free_r+0x24>
 80088ee:	46c0      	nop			; (mov r8, r8)
 80088f0:	20000a20 	.word	0x20000a20

080088f4 <sbrk_aligned>:
 80088f4:	b570      	push	{r4, r5, r6, lr}
 80088f6:	4e0f      	ldr	r6, [pc, #60]	; (8008934 <sbrk_aligned+0x40>)
 80088f8:	000d      	movs	r5, r1
 80088fa:	6831      	ldr	r1, [r6, #0]
 80088fc:	0004      	movs	r4, r0
 80088fe:	2900      	cmp	r1, #0
 8008900:	d102      	bne.n	8008908 <sbrk_aligned+0x14>
 8008902:	f000 ff05 	bl	8009710 <_sbrk_r>
 8008906:	6030      	str	r0, [r6, #0]
 8008908:	0029      	movs	r1, r5
 800890a:	0020      	movs	r0, r4
 800890c:	f000 ff00 	bl	8009710 <_sbrk_r>
 8008910:	1c43      	adds	r3, r0, #1
 8008912:	d00a      	beq.n	800892a <sbrk_aligned+0x36>
 8008914:	2303      	movs	r3, #3
 8008916:	1cc5      	adds	r5, r0, #3
 8008918:	439d      	bics	r5, r3
 800891a:	42a8      	cmp	r0, r5
 800891c:	d007      	beq.n	800892e <sbrk_aligned+0x3a>
 800891e:	1a29      	subs	r1, r5, r0
 8008920:	0020      	movs	r0, r4
 8008922:	f000 fef5 	bl	8009710 <_sbrk_r>
 8008926:	1c43      	adds	r3, r0, #1
 8008928:	d101      	bne.n	800892e <sbrk_aligned+0x3a>
 800892a:	2501      	movs	r5, #1
 800892c:	426d      	negs	r5, r5
 800892e:	0028      	movs	r0, r5
 8008930:	bd70      	pop	{r4, r5, r6, pc}
 8008932:	46c0      	nop			; (mov r8, r8)
 8008934:	20000a24 	.word	0x20000a24

08008938 <_malloc_r>:
 8008938:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800893a:	2203      	movs	r2, #3
 800893c:	1ccb      	adds	r3, r1, #3
 800893e:	4393      	bics	r3, r2
 8008940:	3308      	adds	r3, #8
 8008942:	0006      	movs	r6, r0
 8008944:	001f      	movs	r7, r3
 8008946:	2b0c      	cmp	r3, #12
 8008948:	d232      	bcs.n	80089b0 <_malloc_r+0x78>
 800894a:	270c      	movs	r7, #12
 800894c:	42b9      	cmp	r1, r7
 800894e:	d831      	bhi.n	80089b4 <_malloc_r+0x7c>
 8008950:	0030      	movs	r0, r6
 8008952:	f003 f8e3 	bl	800bb1c <__malloc_lock>
 8008956:	4d32      	ldr	r5, [pc, #200]	; (8008a20 <_malloc_r+0xe8>)
 8008958:	682b      	ldr	r3, [r5, #0]
 800895a:	001c      	movs	r4, r3
 800895c:	2c00      	cmp	r4, #0
 800895e:	d12e      	bne.n	80089be <_malloc_r+0x86>
 8008960:	0039      	movs	r1, r7
 8008962:	0030      	movs	r0, r6
 8008964:	f7ff ffc6 	bl	80088f4 <sbrk_aligned>
 8008968:	0004      	movs	r4, r0
 800896a:	1c43      	adds	r3, r0, #1
 800896c:	d11e      	bne.n	80089ac <_malloc_r+0x74>
 800896e:	682c      	ldr	r4, [r5, #0]
 8008970:	0025      	movs	r5, r4
 8008972:	2d00      	cmp	r5, #0
 8008974:	d14a      	bne.n	8008a0c <_malloc_r+0xd4>
 8008976:	6823      	ldr	r3, [r4, #0]
 8008978:	0029      	movs	r1, r5
 800897a:	18e3      	adds	r3, r4, r3
 800897c:	0030      	movs	r0, r6
 800897e:	9301      	str	r3, [sp, #4]
 8008980:	f000 fec6 	bl	8009710 <_sbrk_r>
 8008984:	9b01      	ldr	r3, [sp, #4]
 8008986:	4283      	cmp	r3, r0
 8008988:	d143      	bne.n	8008a12 <_malloc_r+0xda>
 800898a:	6823      	ldr	r3, [r4, #0]
 800898c:	3703      	adds	r7, #3
 800898e:	1aff      	subs	r7, r7, r3
 8008990:	2303      	movs	r3, #3
 8008992:	439f      	bics	r7, r3
 8008994:	3708      	adds	r7, #8
 8008996:	2f0c      	cmp	r7, #12
 8008998:	d200      	bcs.n	800899c <_malloc_r+0x64>
 800899a:	270c      	movs	r7, #12
 800899c:	0039      	movs	r1, r7
 800899e:	0030      	movs	r0, r6
 80089a0:	f7ff ffa8 	bl	80088f4 <sbrk_aligned>
 80089a4:	1c43      	adds	r3, r0, #1
 80089a6:	d034      	beq.n	8008a12 <_malloc_r+0xda>
 80089a8:	6823      	ldr	r3, [r4, #0]
 80089aa:	19df      	adds	r7, r3, r7
 80089ac:	6027      	str	r7, [r4, #0]
 80089ae:	e013      	b.n	80089d8 <_malloc_r+0xa0>
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	dacb      	bge.n	800894c <_malloc_r+0x14>
 80089b4:	230c      	movs	r3, #12
 80089b6:	2500      	movs	r5, #0
 80089b8:	6033      	str	r3, [r6, #0]
 80089ba:	0028      	movs	r0, r5
 80089bc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80089be:	6822      	ldr	r2, [r4, #0]
 80089c0:	1bd1      	subs	r1, r2, r7
 80089c2:	d420      	bmi.n	8008a06 <_malloc_r+0xce>
 80089c4:	290b      	cmp	r1, #11
 80089c6:	d917      	bls.n	80089f8 <_malloc_r+0xc0>
 80089c8:	19e2      	adds	r2, r4, r7
 80089ca:	6027      	str	r7, [r4, #0]
 80089cc:	42a3      	cmp	r3, r4
 80089ce:	d111      	bne.n	80089f4 <_malloc_r+0xbc>
 80089d0:	602a      	str	r2, [r5, #0]
 80089d2:	6863      	ldr	r3, [r4, #4]
 80089d4:	6011      	str	r1, [r2, #0]
 80089d6:	6053      	str	r3, [r2, #4]
 80089d8:	0030      	movs	r0, r6
 80089da:	0025      	movs	r5, r4
 80089dc:	f003 f8a6 	bl	800bb2c <__malloc_unlock>
 80089e0:	2207      	movs	r2, #7
 80089e2:	350b      	adds	r5, #11
 80089e4:	1d23      	adds	r3, r4, #4
 80089e6:	4395      	bics	r5, r2
 80089e8:	1aea      	subs	r2, r5, r3
 80089ea:	429d      	cmp	r5, r3
 80089ec:	d0e5      	beq.n	80089ba <_malloc_r+0x82>
 80089ee:	1b5b      	subs	r3, r3, r5
 80089f0:	50a3      	str	r3, [r4, r2]
 80089f2:	e7e2      	b.n	80089ba <_malloc_r+0x82>
 80089f4:	605a      	str	r2, [r3, #4]
 80089f6:	e7ec      	b.n	80089d2 <_malloc_r+0x9a>
 80089f8:	6862      	ldr	r2, [r4, #4]
 80089fa:	42a3      	cmp	r3, r4
 80089fc:	d101      	bne.n	8008a02 <_malloc_r+0xca>
 80089fe:	602a      	str	r2, [r5, #0]
 8008a00:	e7ea      	b.n	80089d8 <_malloc_r+0xa0>
 8008a02:	605a      	str	r2, [r3, #4]
 8008a04:	e7e8      	b.n	80089d8 <_malloc_r+0xa0>
 8008a06:	0023      	movs	r3, r4
 8008a08:	6864      	ldr	r4, [r4, #4]
 8008a0a:	e7a7      	b.n	800895c <_malloc_r+0x24>
 8008a0c:	002c      	movs	r4, r5
 8008a0e:	686d      	ldr	r5, [r5, #4]
 8008a10:	e7af      	b.n	8008972 <_malloc_r+0x3a>
 8008a12:	230c      	movs	r3, #12
 8008a14:	0030      	movs	r0, r6
 8008a16:	6033      	str	r3, [r6, #0]
 8008a18:	f003 f888 	bl	800bb2c <__malloc_unlock>
 8008a1c:	e7cd      	b.n	80089ba <_malloc_r+0x82>
 8008a1e:	46c0      	nop			; (mov r8, r8)
 8008a20:	20000a20 	.word	0x20000a20

08008a24 <__cvt>:
 8008a24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008a26:	001e      	movs	r6, r3
 8008a28:	2300      	movs	r3, #0
 8008a2a:	0014      	movs	r4, r2
 8008a2c:	b08b      	sub	sp, #44	; 0x2c
 8008a2e:	429e      	cmp	r6, r3
 8008a30:	da04      	bge.n	8008a3c <__cvt+0x18>
 8008a32:	2180      	movs	r1, #128	; 0x80
 8008a34:	0609      	lsls	r1, r1, #24
 8008a36:	1873      	adds	r3, r6, r1
 8008a38:	001e      	movs	r6, r3
 8008a3a:	232d      	movs	r3, #45	; 0x2d
 8008a3c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008a3e:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8008a40:	7013      	strb	r3, [r2, #0]
 8008a42:	2320      	movs	r3, #32
 8008a44:	2203      	movs	r2, #3
 8008a46:	439f      	bics	r7, r3
 8008a48:	2f46      	cmp	r7, #70	; 0x46
 8008a4a:	d007      	beq.n	8008a5c <__cvt+0x38>
 8008a4c:	003b      	movs	r3, r7
 8008a4e:	3b45      	subs	r3, #69	; 0x45
 8008a50:	4259      	negs	r1, r3
 8008a52:	414b      	adcs	r3, r1
 8008a54:	9910      	ldr	r1, [sp, #64]	; 0x40
 8008a56:	3a01      	subs	r2, #1
 8008a58:	18cb      	adds	r3, r1, r3
 8008a5a:	9310      	str	r3, [sp, #64]	; 0x40
 8008a5c:	ab09      	add	r3, sp, #36	; 0x24
 8008a5e:	9304      	str	r3, [sp, #16]
 8008a60:	ab08      	add	r3, sp, #32
 8008a62:	9303      	str	r3, [sp, #12]
 8008a64:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008a66:	9200      	str	r2, [sp, #0]
 8008a68:	9302      	str	r3, [sp, #8]
 8008a6a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008a6c:	0022      	movs	r2, r4
 8008a6e:	9301      	str	r3, [sp, #4]
 8008a70:	0033      	movs	r3, r6
 8008a72:	f001 fe8f 	bl	800a794 <_dtoa_r>
 8008a76:	0005      	movs	r5, r0
 8008a78:	2f47      	cmp	r7, #71	; 0x47
 8008a7a:	d102      	bne.n	8008a82 <__cvt+0x5e>
 8008a7c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008a7e:	07db      	lsls	r3, r3, #31
 8008a80:	d528      	bpl.n	8008ad4 <__cvt+0xb0>
 8008a82:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008a84:	18eb      	adds	r3, r5, r3
 8008a86:	9307      	str	r3, [sp, #28]
 8008a88:	2f46      	cmp	r7, #70	; 0x46
 8008a8a:	d114      	bne.n	8008ab6 <__cvt+0x92>
 8008a8c:	782b      	ldrb	r3, [r5, #0]
 8008a8e:	2b30      	cmp	r3, #48	; 0x30
 8008a90:	d10c      	bne.n	8008aac <__cvt+0x88>
 8008a92:	2200      	movs	r2, #0
 8008a94:	2300      	movs	r3, #0
 8008a96:	0020      	movs	r0, r4
 8008a98:	0031      	movs	r1, r6
 8008a9a:	f7f7 fcdd 	bl	8000458 <__aeabi_dcmpeq>
 8008a9e:	2800      	cmp	r0, #0
 8008aa0:	d104      	bne.n	8008aac <__cvt+0x88>
 8008aa2:	2301      	movs	r3, #1
 8008aa4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008aa6:	1a9b      	subs	r3, r3, r2
 8008aa8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008aaa:	6013      	str	r3, [r2, #0]
 8008aac:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008aae:	9a07      	ldr	r2, [sp, #28]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	18d3      	adds	r3, r2, r3
 8008ab4:	9307      	str	r3, [sp, #28]
 8008ab6:	2200      	movs	r2, #0
 8008ab8:	2300      	movs	r3, #0
 8008aba:	0020      	movs	r0, r4
 8008abc:	0031      	movs	r1, r6
 8008abe:	f7f7 fccb 	bl	8000458 <__aeabi_dcmpeq>
 8008ac2:	2800      	cmp	r0, #0
 8008ac4:	d001      	beq.n	8008aca <__cvt+0xa6>
 8008ac6:	9b07      	ldr	r3, [sp, #28]
 8008ac8:	9309      	str	r3, [sp, #36]	; 0x24
 8008aca:	2230      	movs	r2, #48	; 0x30
 8008acc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ace:	9907      	ldr	r1, [sp, #28]
 8008ad0:	428b      	cmp	r3, r1
 8008ad2:	d306      	bcc.n	8008ae2 <__cvt+0xbe>
 8008ad4:	0028      	movs	r0, r5
 8008ad6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ad8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008ada:	1b5b      	subs	r3, r3, r5
 8008adc:	6013      	str	r3, [r2, #0]
 8008ade:	b00b      	add	sp, #44	; 0x2c
 8008ae0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008ae2:	1c59      	adds	r1, r3, #1
 8008ae4:	9109      	str	r1, [sp, #36]	; 0x24
 8008ae6:	701a      	strb	r2, [r3, #0]
 8008ae8:	e7f0      	b.n	8008acc <__cvt+0xa8>

08008aea <__exponent>:
 8008aea:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008aec:	1c83      	adds	r3, r0, #2
 8008aee:	b087      	sub	sp, #28
 8008af0:	9303      	str	r3, [sp, #12]
 8008af2:	0005      	movs	r5, r0
 8008af4:	000c      	movs	r4, r1
 8008af6:	232b      	movs	r3, #43	; 0x2b
 8008af8:	7002      	strb	r2, [r0, #0]
 8008afa:	2900      	cmp	r1, #0
 8008afc:	da01      	bge.n	8008b02 <__exponent+0x18>
 8008afe:	424c      	negs	r4, r1
 8008b00:	3302      	adds	r3, #2
 8008b02:	706b      	strb	r3, [r5, #1]
 8008b04:	2c09      	cmp	r4, #9
 8008b06:	dd31      	ble.n	8008b6c <__exponent+0x82>
 8008b08:	270a      	movs	r7, #10
 8008b0a:	ab04      	add	r3, sp, #16
 8008b0c:	1dde      	adds	r6, r3, #7
 8008b0e:	0020      	movs	r0, r4
 8008b10:	0039      	movs	r1, r7
 8008b12:	9601      	str	r6, [sp, #4]
 8008b14:	f7f7 fc8a 	bl	800042c <__aeabi_idivmod>
 8008b18:	3e01      	subs	r6, #1
 8008b1a:	3130      	adds	r1, #48	; 0x30
 8008b1c:	0020      	movs	r0, r4
 8008b1e:	7031      	strb	r1, [r6, #0]
 8008b20:	0039      	movs	r1, r7
 8008b22:	9402      	str	r4, [sp, #8]
 8008b24:	f7f7 fb9c 	bl	8000260 <__divsi3>
 8008b28:	9b02      	ldr	r3, [sp, #8]
 8008b2a:	0004      	movs	r4, r0
 8008b2c:	2b63      	cmp	r3, #99	; 0x63
 8008b2e:	dcee      	bgt.n	8008b0e <__exponent+0x24>
 8008b30:	9b01      	ldr	r3, [sp, #4]
 8008b32:	3430      	adds	r4, #48	; 0x30
 8008b34:	1e9a      	subs	r2, r3, #2
 8008b36:	0013      	movs	r3, r2
 8008b38:	9903      	ldr	r1, [sp, #12]
 8008b3a:	7014      	strb	r4, [r2, #0]
 8008b3c:	a804      	add	r0, sp, #16
 8008b3e:	3007      	adds	r0, #7
 8008b40:	4298      	cmp	r0, r3
 8008b42:	d80e      	bhi.n	8008b62 <__exponent+0x78>
 8008b44:	ab04      	add	r3, sp, #16
 8008b46:	3307      	adds	r3, #7
 8008b48:	2000      	movs	r0, #0
 8008b4a:	429a      	cmp	r2, r3
 8008b4c:	d804      	bhi.n	8008b58 <__exponent+0x6e>
 8008b4e:	ab04      	add	r3, sp, #16
 8008b50:	3009      	adds	r0, #9
 8008b52:	18c0      	adds	r0, r0, r3
 8008b54:	9b01      	ldr	r3, [sp, #4]
 8008b56:	1ac0      	subs	r0, r0, r3
 8008b58:	9b03      	ldr	r3, [sp, #12]
 8008b5a:	1818      	adds	r0, r3, r0
 8008b5c:	1b40      	subs	r0, r0, r5
 8008b5e:	b007      	add	sp, #28
 8008b60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b62:	7818      	ldrb	r0, [r3, #0]
 8008b64:	3301      	adds	r3, #1
 8008b66:	7008      	strb	r0, [r1, #0]
 8008b68:	3101      	adds	r1, #1
 8008b6a:	e7e7      	b.n	8008b3c <__exponent+0x52>
 8008b6c:	2330      	movs	r3, #48	; 0x30
 8008b6e:	18e4      	adds	r4, r4, r3
 8008b70:	70ab      	strb	r3, [r5, #2]
 8008b72:	1d28      	adds	r0, r5, #4
 8008b74:	70ec      	strb	r4, [r5, #3]
 8008b76:	e7f1      	b.n	8008b5c <__exponent+0x72>

08008b78 <_printf_float>:
 8008b78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008b7a:	b095      	sub	sp, #84	; 0x54
 8008b7c:	000c      	movs	r4, r1
 8008b7e:	9209      	str	r2, [sp, #36]	; 0x24
 8008b80:	001e      	movs	r6, r3
 8008b82:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8008b84:	0007      	movs	r7, r0
 8008b86:	f002 ff93 	bl	800bab0 <_localeconv_r>
 8008b8a:	6803      	ldr	r3, [r0, #0]
 8008b8c:	0018      	movs	r0, r3
 8008b8e:	930c      	str	r3, [sp, #48]	; 0x30
 8008b90:	f7f7 fac0 	bl	8000114 <strlen>
 8008b94:	2300      	movs	r3, #0
 8008b96:	9312      	str	r3, [sp, #72]	; 0x48
 8008b98:	7e23      	ldrb	r3, [r4, #24]
 8008b9a:	2207      	movs	r2, #7
 8008b9c:	930a      	str	r3, [sp, #40]	; 0x28
 8008b9e:	6823      	ldr	r3, [r4, #0]
 8008ba0:	900e      	str	r0, [sp, #56]	; 0x38
 8008ba2:	930d      	str	r3, [sp, #52]	; 0x34
 8008ba4:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008ba6:	682b      	ldr	r3, [r5, #0]
 8008ba8:	05c9      	lsls	r1, r1, #23
 8008baa:	d547      	bpl.n	8008c3c <_printf_float+0xc4>
 8008bac:	189b      	adds	r3, r3, r2
 8008bae:	4393      	bics	r3, r2
 8008bb0:	001a      	movs	r2, r3
 8008bb2:	3208      	adds	r2, #8
 8008bb4:	602a      	str	r2, [r5, #0]
 8008bb6:	681a      	ldr	r2, [r3, #0]
 8008bb8:	685b      	ldr	r3, [r3, #4]
 8008bba:	64a2      	str	r2, [r4, #72]	; 0x48
 8008bbc:	64e3      	str	r3, [r4, #76]	; 0x4c
 8008bbe:	2201      	movs	r2, #1
 8008bc0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8008bc2:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8008bc4:	930b      	str	r3, [sp, #44]	; 0x2c
 8008bc6:	006b      	lsls	r3, r5, #1
 8008bc8:	085b      	lsrs	r3, r3, #1
 8008bca:	930f      	str	r3, [sp, #60]	; 0x3c
 8008bcc:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8008bce:	4ba7      	ldr	r3, [pc, #668]	; (8008e6c <_printf_float+0x2f4>)
 8008bd0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008bd2:	4252      	negs	r2, r2
 8008bd4:	f7f9 ffd6 	bl	8002b84 <__aeabi_dcmpun>
 8008bd8:	2800      	cmp	r0, #0
 8008bda:	d131      	bne.n	8008c40 <_printf_float+0xc8>
 8008bdc:	2201      	movs	r2, #1
 8008bde:	4ba3      	ldr	r3, [pc, #652]	; (8008e6c <_printf_float+0x2f4>)
 8008be0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8008be2:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008be4:	4252      	negs	r2, r2
 8008be6:	f7f7 fc47 	bl	8000478 <__aeabi_dcmple>
 8008bea:	2800      	cmp	r0, #0
 8008bec:	d128      	bne.n	8008c40 <_printf_float+0xc8>
 8008bee:	2200      	movs	r2, #0
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	0029      	movs	r1, r5
 8008bf4:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8008bf6:	f7f7 fc35 	bl	8000464 <__aeabi_dcmplt>
 8008bfa:	2800      	cmp	r0, #0
 8008bfc:	d003      	beq.n	8008c06 <_printf_float+0x8e>
 8008bfe:	0023      	movs	r3, r4
 8008c00:	222d      	movs	r2, #45	; 0x2d
 8008c02:	3343      	adds	r3, #67	; 0x43
 8008c04:	701a      	strb	r2, [r3, #0]
 8008c06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c08:	4d99      	ldr	r5, [pc, #612]	; (8008e70 <_printf_float+0x2f8>)
 8008c0a:	2b47      	cmp	r3, #71	; 0x47
 8008c0c:	d900      	bls.n	8008c10 <_printf_float+0x98>
 8008c0e:	4d99      	ldr	r5, [pc, #612]	; (8008e74 <_printf_float+0x2fc>)
 8008c10:	2303      	movs	r3, #3
 8008c12:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008c14:	6123      	str	r3, [r4, #16]
 8008c16:	3301      	adds	r3, #1
 8008c18:	439a      	bics	r2, r3
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	6022      	str	r2, [r4, #0]
 8008c1e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008c20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c22:	0021      	movs	r1, r4
 8008c24:	0038      	movs	r0, r7
 8008c26:	9600      	str	r6, [sp, #0]
 8008c28:	aa13      	add	r2, sp, #76	; 0x4c
 8008c2a:	f000 f9e7 	bl	8008ffc <_printf_common>
 8008c2e:	1c43      	adds	r3, r0, #1
 8008c30:	d000      	beq.n	8008c34 <_printf_float+0xbc>
 8008c32:	e0a2      	b.n	8008d7a <_printf_float+0x202>
 8008c34:	2001      	movs	r0, #1
 8008c36:	4240      	negs	r0, r0
 8008c38:	b015      	add	sp, #84	; 0x54
 8008c3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008c3c:	3307      	adds	r3, #7
 8008c3e:	e7b6      	b.n	8008bae <_printf_float+0x36>
 8008c40:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008c42:	002b      	movs	r3, r5
 8008c44:	0010      	movs	r0, r2
 8008c46:	0029      	movs	r1, r5
 8008c48:	f7f9 ff9c 	bl	8002b84 <__aeabi_dcmpun>
 8008c4c:	2800      	cmp	r0, #0
 8008c4e:	d00b      	beq.n	8008c68 <_printf_float+0xf0>
 8008c50:	2d00      	cmp	r5, #0
 8008c52:	da03      	bge.n	8008c5c <_printf_float+0xe4>
 8008c54:	0023      	movs	r3, r4
 8008c56:	222d      	movs	r2, #45	; 0x2d
 8008c58:	3343      	adds	r3, #67	; 0x43
 8008c5a:	701a      	strb	r2, [r3, #0]
 8008c5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c5e:	4d86      	ldr	r5, [pc, #536]	; (8008e78 <_printf_float+0x300>)
 8008c60:	2b47      	cmp	r3, #71	; 0x47
 8008c62:	d9d5      	bls.n	8008c10 <_printf_float+0x98>
 8008c64:	4d85      	ldr	r5, [pc, #532]	; (8008e7c <_printf_float+0x304>)
 8008c66:	e7d3      	b.n	8008c10 <_printf_float+0x98>
 8008c68:	2220      	movs	r2, #32
 8008c6a:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008c6c:	6863      	ldr	r3, [r4, #4]
 8008c6e:	4391      	bics	r1, r2
 8008c70:	910f      	str	r1, [sp, #60]	; 0x3c
 8008c72:	1c5a      	adds	r2, r3, #1
 8008c74:	d149      	bne.n	8008d0a <_printf_float+0x192>
 8008c76:	3307      	adds	r3, #7
 8008c78:	6063      	str	r3, [r4, #4]
 8008c7a:	2380      	movs	r3, #128	; 0x80
 8008c7c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008c7e:	00db      	lsls	r3, r3, #3
 8008c80:	4313      	orrs	r3, r2
 8008c82:	2200      	movs	r2, #0
 8008c84:	9206      	str	r2, [sp, #24]
 8008c86:	aa12      	add	r2, sp, #72	; 0x48
 8008c88:	9205      	str	r2, [sp, #20]
 8008c8a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008c8c:	a908      	add	r1, sp, #32
 8008c8e:	9204      	str	r2, [sp, #16]
 8008c90:	aa11      	add	r2, sp, #68	; 0x44
 8008c92:	9203      	str	r2, [sp, #12]
 8008c94:	2223      	movs	r2, #35	; 0x23
 8008c96:	6023      	str	r3, [r4, #0]
 8008c98:	9301      	str	r3, [sp, #4]
 8008c9a:	6863      	ldr	r3, [r4, #4]
 8008c9c:	1852      	adds	r2, r2, r1
 8008c9e:	9202      	str	r2, [sp, #8]
 8008ca0:	9300      	str	r3, [sp, #0]
 8008ca2:	0038      	movs	r0, r7
 8008ca4:	002b      	movs	r3, r5
 8008ca6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008ca8:	f7ff febc 	bl	8008a24 <__cvt>
 8008cac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008cae:	0005      	movs	r5, r0
 8008cb0:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008cb2:	2b47      	cmp	r3, #71	; 0x47
 8008cb4:	d108      	bne.n	8008cc8 <_printf_float+0x150>
 8008cb6:	1ccb      	adds	r3, r1, #3
 8008cb8:	db02      	blt.n	8008cc0 <_printf_float+0x148>
 8008cba:	6863      	ldr	r3, [r4, #4]
 8008cbc:	4299      	cmp	r1, r3
 8008cbe:	dd48      	ble.n	8008d52 <_printf_float+0x1da>
 8008cc0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008cc2:	3b02      	subs	r3, #2
 8008cc4:	b2db      	uxtb	r3, r3
 8008cc6:	930a      	str	r3, [sp, #40]	; 0x28
 8008cc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008cca:	2b65      	cmp	r3, #101	; 0x65
 8008ccc:	d824      	bhi.n	8008d18 <_printf_float+0x1a0>
 8008cce:	0020      	movs	r0, r4
 8008cd0:	001a      	movs	r2, r3
 8008cd2:	3901      	subs	r1, #1
 8008cd4:	3050      	adds	r0, #80	; 0x50
 8008cd6:	9111      	str	r1, [sp, #68]	; 0x44
 8008cd8:	f7ff ff07 	bl	8008aea <__exponent>
 8008cdc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008cde:	900b      	str	r0, [sp, #44]	; 0x2c
 8008ce0:	1813      	adds	r3, r2, r0
 8008ce2:	6123      	str	r3, [r4, #16]
 8008ce4:	2a01      	cmp	r2, #1
 8008ce6:	dc02      	bgt.n	8008cee <_printf_float+0x176>
 8008ce8:	6822      	ldr	r2, [r4, #0]
 8008cea:	07d2      	lsls	r2, r2, #31
 8008cec:	d501      	bpl.n	8008cf2 <_printf_float+0x17a>
 8008cee:	3301      	adds	r3, #1
 8008cf0:	6123      	str	r3, [r4, #16]
 8008cf2:	2323      	movs	r3, #35	; 0x23
 8008cf4:	aa08      	add	r2, sp, #32
 8008cf6:	189b      	adds	r3, r3, r2
 8008cf8:	781b      	ldrb	r3, [r3, #0]
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d100      	bne.n	8008d00 <_printf_float+0x188>
 8008cfe:	e78f      	b.n	8008c20 <_printf_float+0xa8>
 8008d00:	0023      	movs	r3, r4
 8008d02:	222d      	movs	r2, #45	; 0x2d
 8008d04:	3343      	adds	r3, #67	; 0x43
 8008d06:	701a      	strb	r2, [r3, #0]
 8008d08:	e78a      	b.n	8008c20 <_printf_float+0xa8>
 8008d0a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008d0c:	2a47      	cmp	r2, #71	; 0x47
 8008d0e:	d1b4      	bne.n	8008c7a <_printf_float+0x102>
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d1b2      	bne.n	8008c7a <_printf_float+0x102>
 8008d14:	3301      	adds	r3, #1
 8008d16:	e7af      	b.n	8008c78 <_printf_float+0x100>
 8008d18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d1a:	2b66      	cmp	r3, #102	; 0x66
 8008d1c:	d11b      	bne.n	8008d56 <_printf_float+0x1de>
 8008d1e:	6863      	ldr	r3, [r4, #4]
 8008d20:	2900      	cmp	r1, #0
 8008d22:	dd0d      	ble.n	8008d40 <_printf_float+0x1c8>
 8008d24:	6121      	str	r1, [r4, #16]
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d102      	bne.n	8008d30 <_printf_float+0x1b8>
 8008d2a:	6822      	ldr	r2, [r4, #0]
 8008d2c:	07d2      	lsls	r2, r2, #31
 8008d2e:	d502      	bpl.n	8008d36 <_printf_float+0x1be>
 8008d30:	3301      	adds	r3, #1
 8008d32:	1859      	adds	r1, r3, r1
 8008d34:	6121      	str	r1, [r4, #16]
 8008d36:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008d38:	65a3      	str	r3, [r4, #88]	; 0x58
 8008d3a:	2300      	movs	r3, #0
 8008d3c:	930b      	str	r3, [sp, #44]	; 0x2c
 8008d3e:	e7d8      	b.n	8008cf2 <_printf_float+0x17a>
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d103      	bne.n	8008d4c <_printf_float+0x1d4>
 8008d44:	2201      	movs	r2, #1
 8008d46:	6821      	ldr	r1, [r4, #0]
 8008d48:	4211      	tst	r1, r2
 8008d4a:	d000      	beq.n	8008d4e <_printf_float+0x1d6>
 8008d4c:	1c9a      	adds	r2, r3, #2
 8008d4e:	6122      	str	r2, [r4, #16]
 8008d50:	e7f1      	b.n	8008d36 <_printf_float+0x1be>
 8008d52:	2367      	movs	r3, #103	; 0x67
 8008d54:	930a      	str	r3, [sp, #40]	; 0x28
 8008d56:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008d58:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008d5a:	4293      	cmp	r3, r2
 8008d5c:	db06      	blt.n	8008d6c <_printf_float+0x1f4>
 8008d5e:	6822      	ldr	r2, [r4, #0]
 8008d60:	6123      	str	r3, [r4, #16]
 8008d62:	07d2      	lsls	r2, r2, #31
 8008d64:	d5e7      	bpl.n	8008d36 <_printf_float+0x1be>
 8008d66:	3301      	adds	r3, #1
 8008d68:	6123      	str	r3, [r4, #16]
 8008d6a:	e7e4      	b.n	8008d36 <_printf_float+0x1be>
 8008d6c:	2101      	movs	r1, #1
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	dc01      	bgt.n	8008d76 <_printf_float+0x1fe>
 8008d72:	1849      	adds	r1, r1, r1
 8008d74:	1ac9      	subs	r1, r1, r3
 8008d76:	1852      	adds	r2, r2, r1
 8008d78:	e7e9      	b.n	8008d4e <_printf_float+0x1d6>
 8008d7a:	6822      	ldr	r2, [r4, #0]
 8008d7c:	0553      	lsls	r3, r2, #21
 8008d7e:	d407      	bmi.n	8008d90 <_printf_float+0x218>
 8008d80:	6923      	ldr	r3, [r4, #16]
 8008d82:	002a      	movs	r2, r5
 8008d84:	0038      	movs	r0, r7
 8008d86:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008d88:	47b0      	blx	r6
 8008d8a:	1c43      	adds	r3, r0, #1
 8008d8c:	d128      	bne.n	8008de0 <_printf_float+0x268>
 8008d8e:	e751      	b.n	8008c34 <_printf_float+0xbc>
 8008d90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d92:	2b65      	cmp	r3, #101	; 0x65
 8008d94:	d800      	bhi.n	8008d98 <_printf_float+0x220>
 8008d96:	e0e1      	b.n	8008f5c <_printf_float+0x3e4>
 8008d98:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8008d9a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8008d9c:	2200      	movs	r2, #0
 8008d9e:	2300      	movs	r3, #0
 8008da0:	f7f7 fb5a 	bl	8000458 <__aeabi_dcmpeq>
 8008da4:	2800      	cmp	r0, #0
 8008da6:	d031      	beq.n	8008e0c <_printf_float+0x294>
 8008da8:	2301      	movs	r3, #1
 8008daa:	0038      	movs	r0, r7
 8008dac:	4a34      	ldr	r2, [pc, #208]	; (8008e80 <_printf_float+0x308>)
 8008dae:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008db0:	47b0      	blx	r6
 8008db2:	1c43      	adds	r3, r0, #1
 8008db4:	d100      	bne.n	8008db8 <_printf_float+0x240>
 8008db6:	e73d      	b.n	8008c34 <_printf_float+0xbc>
 8008db8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008dba:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008dbc:	4293      	cmp	r3, r2
 8008dbe:	db02      	blt.n	8008dc6 <_printf_float+0x24e>
 8008dc0:	6823      	ldr	r3, [r4, #0]
 8008dc2:	07db      	lsls	r3, r3, #31
 8008dc4:	d50c      	bpl.n	8008de0 <_printf_float+0x268>
 8008dc6:	0038      	movs	r0, r7
 8008dc8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008dca:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008dcc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008dce:	47b0      	blx	r6
 8008dd0:	2500      	movs	r5, #0
 8008dd2:	1c43      	adds	r3, r0, #1
 8008dd4:	d100      	bne.n	8008dd8 <_printf_float+0x260>
 8008dd6:	e72d      	b.n	8008c34 <_printf_float+0xbc>
 8008dd8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008dda:	3b01      	subs	r3, #1
 8008ddc:	42ab      	cmp	r3, r5
 8008dde:	dc0a      	bgt.n	8008df6 <_printf_float+0x27e>
 8008de0:	6823      	ldr	r3, [r4, #0]
 8008de2:	079b      	lsls	r3, r3, #30
 8008de4:	d500      	bpl.n	8008de8 <_printf_float+0x270>
 8008de6:	e106      	b.n	8008ff6 <_printf_float+0x47e>
 8008de8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008dea:	68e0      	ldr	r0, [r4, #12]
 8008dec:	4298      	cmp	r0, r3
 8008dee:	db00      	blt.n	8008df2 <_printf_float+0x27a>
 8008df0:	e722      	b.n	8008c38 <_printf_float+0xc0>
 8008df2:	0018      	movs	r0, r3
 8008df4:	e720      	b.n	8008c38 <_printf_float+0xc0>
 8008df6:	0022      	movs	r2, r4
 8008df8:	2301      	movs	r3, #1
 8008dfa:	0038      	movs	r0, r7
 8008dfc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008dfe:	321a      	adds	r2, #26
 8008e00:	47b0      	blx	r6
 8008e02:	1c43      	adds	r3, r0, #1
 8008e04:	d100      	bne.n	8008e08 <_printf_float+0x290>
 8008e06:	e715      	b.n	8008c34 <_printf_float+0xbc>
 8008e08:	3501      	adds	r5, #1
 8008e0a:	e7e5      	b.n	8008dd8 <_printf_float+0x260>
 8008e0c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	dc38      	bgt.n	8008e84 <_printf_float+0x30c>
 8008e12:	2301      	movs	r3, #1
 8008e14:	0038      	movs	r0, r7
 8008e16:	4a1a      	ldr	r2, [pc, #104]	; (8008e80 <_printf_float+0x308>)
 8008e18:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008e1a:	47b0      	blx	r6
 8008e1c:	1c43      	adds	r3, r0, #1
 8008e1e:	d100      	bne.n	8008e22 <_printf_float+0x2aa>
 8008e20:	e708      	b.n	8008c34 <_printf_float+0xbc>
 8008e22:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008e24:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008e26:	4313      	orrs	r3, r2
 8008e28:	d102      	bne.n	8008e30 <_printf_float+0x2b8>
 8008e2a:	6823      	ldr	r3, [r4, #0]
 8008e2c:	07db      	lsls	r3, r3, #31
 8008e2e:	d5d7      	bpl.n	8008de0 <_printf_float+0x268>
 8008e30:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008e32:	0038      	movs	r0, r7
 8008e34:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008e36:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008e38:	47b0      	blx	r6
 8008e3a:	1c43      	adds	r3, r0, #1
 8008e3c:	d100      	bne.n	8008e40 <_printf_float+0x2c8>
 8008e3e:	e6f9      	b.n	8008c34 <_printf_float+0xbc>
 8008e40:	2300      	movs	r3, #0
 8008e42:	930a      	str	r3, [sp, #40]	; 0x28
 8008e44:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008e46:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008e48:	425b      	negs	r3, r3
 8008e4a:	4293      	cmp	r3, r2
 8008e4c:	dc01      	bgt.n	8008e52 <_printf_float+0x2da>
 8008e4e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008e50:	e797      	b.n	8008d82 <_printf_float+0x20a>
 8008e52:	0022      	movs	r2, r4
 8008e54:	2301      	movs	r3, #1
 8008e56:	0038      	movs	r0, r7
 8008e58:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008e5a:	321a      	adds	r2, #26
 8008e5c:	47b0      	blx	r6
 8008e5e:	1c43      	adds	r3, r0, #1
 8008e60:	d100      	bne.n	8008e64 <_printf_float+0x2ec>
 8008e62:	e6e7      	b.n	8008c34 <_printf_float+0xbc>
 8008e64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e66:	3301      	adds	r3, #1
 8008e68:	e7eb      	b.n	8008e42 <_printf_float+0x2ca>
 8008e6a:	46c0      	nop			; (mov r8, r8)
 8008e6c:	7fefffff 	.word	0x7fefffff
 8008e70:	0800dfec 	.word	0x0800dfec
 8008e74:	0800dff0 	.word	0x0800dff0
 8008e78:	0800dff4 	.word	0x0800dff4
 8008e7c:	0800dff8 	.word	0x0800dff8
 8008e80:	0800e3f1 	.word	0x0800e3f1
 8008e84:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008e86:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008e88:	920a      	str	r2, [sp, #40]	; 0x28
 8008e8a:	429a      	cmp	r2, r3
 8008e8c:	dd00      	ble.n	8008e90 <_printf_float+0x318>
 8008e8e:	930a      	str	r3, [sp, #40]	; 0x28
 8008e90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	dc3c      	bgt.n	8008f10 <_printf_float+0x398>
 8008e96:	2300      	movs	r3, #0
 8008e98:	930d      	str	r3, [sp, #52]	; 0x34
 8008e9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e9c:	43db      	mvns	r3, r3
 8008e9e:	17db      	asrs	r3, r3, #31
 8008ea0:	930f      	str	r3, [sp, #60]	; 0x3c
 8008ea2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008ea4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008ea6:	930b      	str	r3, [sp, #44]	; 0x2c
 8008ea8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008eaa:	4013      	ands	r3, r2
 8008eac:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008eae:	1ad3      	subs	r3, r2, r3
 8008eb0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008eb2:	4293      	cmp	r3, r2
 8008eb4:	dc34      	bgt.n	8008f20 <_printf_float+0x3a8>
 8008eb6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008eb8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008eba:	4293      	cmp	r3, r2
 8008ebc:	db3d      	blt.n	8008f3a <_printf_float+0x3c2>
 8008ebe:	6823      	ldr	r3, [r4, #0]
 8008ec0:	07db      	lsls	r3, r3, #31
 8008ec2:	d43a      	bmi.n	8008f3a <_printf_float+0x3c2>
 8008ec4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008ec6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008ec8:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008eca:	1ad3      	subs	r3, r2, r3
 8008ecc:	1a52      	subs	r2, r2, r1
 8008ece:	920a      	str	r2, [sp, #40]	; 0x28
 8008ed0:	429a      	cmp	r2, r3
 8008ed2:	dd00      	ble.n	8008ed6 <_printf_float+0x35e>
 8008ed4:	930a      	str	r3, [sp, #40]	; 0x28
 8008ed6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	dc36      	bgt.n	8008f4a <_printf_float+0x3d2>
 8008edc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ede:	2500      	movs	r5, #0
 8008ee0:	43db      	mvns	r3, r3
 8008ee2:	17db      	asrs	r3, r3, #31
 8008ee4:	930b      	str	r3, [sp, #44]	; 0x2c
 8008ee6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008ee8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008eea:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008eec:	1a9b      	subs	r3, r3, r2
 8008eee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008ef0:	400a      	ands	r2, r1
 8008ef2:	1a9b      	subs	r3, r3, r2
 8008ef4:	42ab      	cmp	r3, r5
 8008ef6:	dc00      	bgt.n	8008efa <_printf_float+0x382>
 8008ef8:	e772      	b.n	8008de0 <_printf_float+0x268>
 8008efa:	0022      	movs	r2, r4
 8008efc:	2301      	movs	r3, #1
 8008efe:	0038      	movs	r0, r7
 8008f00:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008f02:	321a      	adds	r2, #26
 8008f04:	47b0      	blx	r6
 8008f06:	1c43      	adds	r3, r0, #1
 8008f08:	d100      	bne.n	8008f0c <_printf_float+0x394>
 8008f0a:	e693      	b.n	8008c34 <_printf_float+0xbc>
 8008f0c:	3501      	adds	r5, #1
 8008f0e:	e7ea      	b.n	8008ee6 <_printf_float+0x36e>
 8008f10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f12:	002a      	movs	r2, r5
 8008f14:	0038      	movs	r0, r7
 8008f16:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008f18:	47b0      	blx	r6
 8008f1a:	1c43      	adds	r3, r0, #1
 8008f1c:	d1bb      	bne.n	8008e96 <_printf_float+0x31e>
 8008f1e:	e689      	b.n	8008c34 <_printf_float+0xbc>
 8008f20:	0022      	movs	r2, r4
 8008f22:	2301      	movs	r3, #1
 8008f24:	0038      	movs	r0, r7
 8008f26:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008f28:	321a      	adds	r2, #26
 8008f2a:	47b0      	blx	r6
 8008f2c:	1c43      	adds	r3, r0, #1
 8008f2e:	d100      	bne.n	8008f32 <_printf_float+0x3ba>
 8008f30:	e680      	b.n	8008c34 <_printf_float+0xbc>
 8008f32:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008f34:	3301      	adds	r3, #1
 8008f36:	930d      	str	r3, [sp, #52]	; 0x34
 8008f38:	e7b3      	b.n	8008ea2 <_printf_float+0x32a>
 8008f3a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008f3c:	0038      	movs	r0, r7
 8008f3e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008f40:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008f42:	47b0      	blx	r6
 8008f44:	1c43      	adds	r3, r0, #1
 8008f46:	d1bd      	bne.n	8008ec4 <_printf_float+0x34c>
 8008f48:	e674      	b.n	8008c34 <_printf_float+0xbc>
 8008f4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008f4c:	0038      	movs	r0, r7
 8008f4e:	18ea      	adds	r2, r5, r3
 8008f50:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008f52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f54:	47b0      	blx	r6
 8008f56:	1c43      	adds	r3, r0, #1
 8008f58:	d1c0      	bne.n	8008edc <_printf_float+0x364>
 8008f5a:	e66b      	b.n	8008c34 <_printf_float+0xbc>
 8008f5c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008f5e:	2b01      	cmp	r3, #1
 8008f60:	dc02      	bgt.n	8008f68 <_printf_float+0x3f0>
 8008f62:	2301      	movs	r3, #1
 8008f64:	421a      	tst	r2, r3
 8008f66:	d034      	beq.n	8008fd2 <_printf_float+0x45a>
 8008f68:	2301      	movs	r3, #1
 8008f6a:	002a      	movs	r2, r5
 8008f6c:	0038      	movs	r0, r7
 8008f6e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008f70:	47b0      	blx	r6
 8008f72:	1c43      	adds	r3, r0, #1
 8008f74:	d100      	bne.n	8008f78 <_printf_float+0x400>
 8008f76:	e65d      	b.n	8008c34 <_printf_float+0xbc>
 8008f78:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008f7a:	0038      	movs	r0, r7
 8008f7c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008f7e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008f80:	47b0      	blx	r6
 8008f82:	1c43      	adds	r3, r0, #1
 8008f84:	d100      	bne.n	8008f88 <_printf_float+0x410>
 8008f86:	e655      	b.n	8008c34 <_printf_float+0xbc>
 8008f88:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8008f8a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8008f8c:	2200      	movs	r2, #0
 8008f8e:	2300      	movs	r3, #0
 8008f90:	f7f7 fa62 	bl	8000458 <__aeabi_dcmpeq>
 8008f94:	2800      	cmp	r0, #0
 8008f96:	d11a      	bne.n	8008fce <_printf_float+0x456>
 8008f98:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008f9a:	1c6a      	adds	r2, r5, #1
 8008f9c:	3b01      	subs	r3, #1
 8008f9e:	0038      	movs	r0, r7
 8008fa0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008fa2:	47b0      	blx	r6
 8008fa4:	1c43      	adds	r3, r0, #1
 8008fa6:	d10e      	bne.n	8008fc6 <_printf_float+0x44e>
 8008fa8:	e644      	b.n	8008c34 <_printf_float+0xbc>
 8008faa:	0022      	movs	r2, r4
 8008fac:	2301      	movs	r3, #1
 8008fae:	0038      	movs	r0, r7
 8008fb0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008fb2:	321a      	adds	r2, #26
 8008fb4:	47b0      	blx	r6
 8008fb6:	1c43      	adds	r3, r0, #1
 8008fb8:	d100      	bne.n	8008fbc <_printf_float+0x444>
 8008fba:	e63b      	b.n	8008c34 <_printf_float+0xbc>
 8008fbc:	3501      	adds	r5, #1
 8008fbe:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008fc0:	3b01      	subs	r3, #1
 8008fc2:	42ab      	cmp	r3, r5
 8008fc4:	dcf1      	bgt.n	8008faa <_printf_float+0x432>
 8008fc6:	0022      	movs	r2, r4
 8008fc8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008fca:	3250      	adds	r2, #80	; 0x50
 8008fcc:	e6da      	b.n	8008d84 <_printf_float+0x20c>
 8008fce:	2500      	movs	r5, #0
 8008fd0:	e7f5      	b.n	8008fbe <_printf_float+0x446>
 8008fd2:	002a      	movs	r2, r5
 8008fd4:	e7e3      	b.n	8008f9e <_printf_float+0x426>
 8008fd6:	0022      	movs	r2, r4
 8008fd8:	2301      	movs	r3, #1
 8008fda:	0038      	movs	r0, r7
 8008fdc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008fde:	3219      	adds	r2, #25
 8008fe0:	47b0      	blx	r6
 8008fe2:	1c43      	adds	r3, r0, #1
 8008fe4:	d100      	bne.n	8008fe8 <_printf_float+0x470>
 8008fe6:	e625      	b.n	8008c34 <_printf_float+0xbc>
 8008fe8:	3501      	adds	r5, #1
 8008fea:	68e3      	ldr	r3, [r4, #12]
 8008fec:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008fee:	1a9b      	subs	r3, r3, r2
 8008ff0:	42ab      	cmp	r3, r5
 8008ff2:	dcf0      	bgt.n	8008fd6 <_printf_float+0x45e>
 8008ff4:	e6f8      	b.n	8008de8 <_printf_float+0x270>
 8008ff6:	2500      	movs	r5, #0
 8008ff8:	e7f7      	b.n	8008fea <_printf_float+0x472>
 8008ffa:	46c0      	nop			; (mov r8, r8)

08008ffc <_printf_common>:
 8008ffc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008ffe:	0015      	movs	r5, r2
 8009000:	9301      	str	r3, [sp, #4]
 8009002:	688a      	ldr	r2, [r1, #8]
 8009004:	690b      	ldr	r3, [r1, #16]
 8009006:	000c      	movs	r4, r1
 8009008:	9000      	str	r0, [sp, #0]
 800900a:	4293      	cmp	r3, r2
 800900c:	da00      	bge.n	8009010 <_printf_common+0x14>
 800900e:	0013      	movs	r3, r2
 8009010:	0022      	movs	r2, r4
 8009012:	602b      	str	r3, [r5, #0]
 8009014:	3243      	adds	r2, #67	; 0x43
 8009016:	7812      	ldrb	r2, [r2, #0]
 8009018:	2a00      	cmp	r2, #0
 800901a:	d001      	beq.n	8009020 <_printf_common+0x24>
 800901c:	3301      	adds	r3, #1
 800901e:	602b      	str	r3, [r5, #0]
 8009020:	6823      	ldr	r3, [r4, #0]
 8009022:	069b      	lsls	r3, r3, #26
 8009024:	d502      	bpl.n	800902c <_printf_common+0x30>
 8009026:	682b      	ldr	r3, [r5, #0]
 8009028:	3302      	adds	r3, #2
 800902a:	602b      	str	r3, [r5, #0]
 800902c:	6822      	ldr	r2, [r4, #0]
 800902e:	2306      	movs	r3, #6
 8009030:	0017      	movs	r7, r2
 8009032:	401f      	ands	r7, r3
 8009034:	421a      	tst	r2, r3
 8009036:	d027      	beq.n	8009088 <_printf_common+0x8c>
 8009038:	0023      	movs	r3, r4
 800903a:	3343      	adds	r3, #67	; 0x43
 800903c:	781b      	ldrb	r3, [r3, #0]
 800903e:	1e5a      	subs	r2, r3, #1
 8009040:	4193      	sbcs	r3, r2
 8009042:	6822      	ldr	r2, [r4, #0]
 8009044:	0692      	lsls	r2, r2, #26
 8009046:	d430      	bmi.n	80090aa <_printf_common+0xae>
 8009048:	0022      	movs	r2, r4
 800904a:	9901      	ldr	r1, [sp, #4]
 800904c:	9800      	ldr	r0, [sp, #0]
 800904e:	9e08      	ldr	r6, [sp, #32]
 8009050:	3243      	adds	r2, #67	; 0x43
 8009052:	47b0      	blx	r6
 8009054:	1c43      	adds	r3, r0, #1
 8009056:	d025      	beq.n	80090a4 <_printf_common+0xa8>
 8009058:	2306      	movs	r3, #6
 800905a:	6820      	ldr	r0, [r4, #0]
 800905c:	682a      	ldr	r2, [r5, #0]
 800905e:	68e1      	ldr	r1, [r4, #12]
 8009060:	2500      	movs	r5, #0
 8009062:	4003      	ands	r3, r0
 8009064:	2b04      	cmp	r3, #4
 8009066:	d103      	bne.n	8009070 <_printf_common+0x74>
 8009068:	1a8d      	subs	r5, r1, r2
 800906a:	43eb      	mvns	r3, r5
 800906c:	17db      	asrs	r3, r3, #31
 800906e:	401d      	ands	r5, r3
 8009070:	68a3      	ldr	r3, [r4, #8]
 8009072:	6922      	ldr	r2, [r4, #16]
 8009074:	4293      	cmp	r3, r2
 8009076:	dd01      	ble.n	800907c <_printf_common+0x80>
 8009078:	1a9b      	subs	r3, r3, r2
 800907a:	18ed      	adds	r5, r5, r3
 800907c:	2700      	movs	r7, #0
 800907e:	42bd      	cmp	r5, r7
 8009080:	d120      	bne.n	80090c4 <_printf_common+0xc8>
 8009082:	2000      	movs	r0, #0
 8009084:	e010      	b.n	80090a8 <_printf_common+0xac>
 8009086:	3701      	adds	r7, #1
 8009088:	68e3      	ldr	r3, [r4, #12]
 800908a:	682a      	ldr	r2, [r5, #0]
 800908c:	1a9b      	subs	r3, r3, r2
 800908e:	42bb      	cmp	r3, r7
 8009090:	ddd2      	ble.n	8009038 <_printf_common+0x3c>
 8009092:	0022      	movs	r2, r4
 8009094:	2301      	movs	r3, #1
 8009096:	9901      	ldr	r1, [sp, #4]
 8009098:	9800      	ldr	r0, [sp, #0]
 800909a:	9e08      	ldr	r6, [sp, #32]
 800909c:	3219      	adds	r2, #25
 800909e:	47b0      	blx	r6
 80090a0:	1c43      	adds	r3, r0, #1
 80090a2:	d1f0      	bne.n	8009086 <_printf_common+0x8a>
 80090a4:	2001      	movs	r0, #1
 80090a6:	4240      	negs	r0, r0
 80090a8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80090aa:	2030      	movs	r0, #48	; 0x30
 80090ac:	18e1      	adds	r1, r4, r3
 80090ae:	3143      	adds	r1, #67	; 0x43
 80090b0:	7008      	strb	r0, [r1, #0]
 80090b2:	0021      	movs	r1, r4
 80090b4:	1c5a      	adds	r2, r3, #1
 80090b6:	3145      	adds	r1, #69	; 0x45
 80090b8:	7809      	ldrb	r1, [r1, #0]
 80090ba:	18a2      	adds	r2, r4, r2
 80090bc:	3243      	adds	r2, #67	; 0x43
 80090be:	3302      	adds	r3, #2
 80090c0:	7011      	strb	r1, [r2, #0]
 80090c2:	e7c1      	b.n	8009048 <_printf_common+0x4c>
 80090c4:	0022      	movs	r2, r4
 80090c6:	2301      	movs	r3, #1
 80090c8:	9901      	ldr	r1, [sp, #4]
 80090ca:	9800      	ldr	r0, [sp, #0]
 80090cc:	9e08      	ldr	r6, [sp, #32]
 80090ce:	321a      	adds	r2, #26
 80090d0:	47b0      	blx	r6
 80090d2:	1c43      	adds	r3, r0, #1
 80090d4:	d0e6      	beq.n	80090a4 <_printf_common+0xa8>
 80090d6:	3701      	adds	r7, #1
 80090d8:	e7d1      	b.n	800907e <_printf_common+0x82>
	...

080090dc <_printf_i>:
 80090dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80090de:	b08b      	sub	sp, #44	; 0x2c
 80090e0:	9206      	str	r2, [sp, #24]
 80090e2:	000a      	movs	r2, r1
 80090e4:	3243      	adds	r2, #67	; 0x43
 80090e6:	9307      	str	r3, [sp, #28]
 80090e8:	9005      	str	r0, [sp, #20]
 80090ea:	9204      	str	r2, [sp, #16]
 80090ec:	7e0a      	ldrb	r2, [r1, #24]
 80090ee:	000c      	movs	r4, r1
 80090f0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80090f2:	2a78      	cmp	r2, #120	; 0x78
 80090f4:	d807      	bhi.n	8009106 <_printf_i+0x2a>
 80090f6:	2a62      	cmp	r2, #98	; 0x62
 80090f8:	d809      	bhi.n	800910e <_printf_i+0x32>
 80090fa:	2a00      	cmp	r2, #0
 80090fc:	d100      	bne.n	8009100 <_printf_i+0x24>
 80090fe:	e0c1      	b.n	8009284 <_printf_i+0x1a8>
 8009100:	2a58      	cmp	r2, #88	; 0x58
 8009102:	d100      	bne.n	8009106 <_printf_i+0x2a>
 8009104:	e08c      	b.n	8009220 <_printf_i+0x144>
 8009106:	0026      	movs	r6, r4
 8009108:	3642      	adds	r6, #66	; 0x42
 800910a:	7032      	strb	r2, [r6, #0]
 800910c:	e022      	b.n	8009154 <_printf_i+0x78>
 800910e:	0010      	movs	r0, r2
 8009110:	3863      	subs	r0, #99	; 0x63
 8009112:	2815      	cmp	r0, #21
 8009114:	d8f7      	bhi.n	8009106 <_printf_i+0x2a>
 8009116:	f7f7 f80f 	bl	8000138 <__gnu_thumb1_case_shi>
 800911a:	0016      	.short	0x0016
 800911c:	fff6001f 	.word	0xfff6001f
 8009120:	fff6fff6 	.word	0xfff6fff6
 8009124:	001ffff6 	.word	0x001ffff6
 8009128:	fff6fff6 	.word	0xfff6fff6
 800912c:	fff6fff6 	.word	0xfff6fff6
 8009130:	003600a8 	.word	0x003600a8
 8009134:	fff6009a 	.word	0xfff6009a
 8009138:	00b9fff6 	.word	0x00b9fff6
 800913c:	0036fff6 	.word	0x0036fff6
 8009140:	fff6fff6 	.word	0xfff6fff6
 8009144:	009e      	.short	0x009e
 8009146:	0026      	movs	r6, r4
 8009148:	681a      	ldr	r2, [r3, #0]
 800914a:	3642      	adds	r6, #66	; 0x42
 800914c:	1d11      	adds	r1, r2, #4
 800914e:	6019      	str	r1, [r3, #0]
 8009150:	6813      	ldr	r3, [r2, #0]
 8009152:	7033      	strb	r3, [r6, #0]
 8009154:	2301      	movs	r3, #1
 8009156:	e0a7      	b.n	80092a8 <_printf_i+0x1cc>
 8009158:	6808      	ldr	r0, [r1, #0]
 800915a:	6819      	ldr	r1, [r3, #0]
 800915c:	1d0a      	adds	r2, r1, #4
 800915e:	0605      	lsls	r5, r0, #24
 8009160:	d50b      	bpl.n	800917a <_printf_i+0x9e>
 8009162:	680d      	ldr	r5, [r1, #0]
 8009164:	601a      	str	r2, [r3, #0]
 8009166:	2d00      	cmp	r5, #0
 8009168:	da03      	bge.n	8009172 <_printf_i+0x96>
 800916a:	232d      	movs	r3, #45	; 0x2d
 800916c:	9a04      	ldr	r2, [sp, #16]
 800916e:	426d      	negs	r5, r5
 8009170:	7013      	strb	r3, [r2, #0]
 8009172:	4b61      	ldr	r3, [pc, #388]	; (80092f8 <_printf_i+0x21c>)
 8009174:	270a      	movs	r7, #10
 8009176:	9303      	str	r3, [sp, #12]
 8009178:	e01b      	b.n	80091b2 <_printf_i+0xd6>
 800917a:	680d      	ldr	r5, [r1, #0]
 800917c:	601a      	str	r2, [r3, #0]
 800917e:	0641      	lsls	r1, r0, #25
 8009180:	d5f1      	bpl.n	8009166 <_printf_i+0x8a>
 8009182:	b22d      	sxth	r5, r5
 8009184:	e7ef      	b.n	8009166 <_printf_i+0x8a>
 8009186:	680d      	ldr	r5, [r1, #0]
 8009188:	6819      	ldr	r1, [r3, #0]
 800918a:	1d08      	adds	r0, r1, #4
 800918c:	6018      	str	r0, [r3, #0]
 800918e:	062e      	lsls	r6, r5, #24
 8009190:	d501      	bpl.n	8009196 <_printf_i+0xba>
 8009192:	680d      	ldr	r5, [r1, #0]
 8009194:	e003      	b.n	800919e <_printf_i+0xc2>
 8009196:	066d      	lsls	r5, r5, #25
 8009198:	d5fb      	bpl.n	8009192 <_printf_i+0xb6>
 800919a:	680d      	ldr	r5, [r1, #0]
 800919c:	b2ad      	uxth	r5, r5
 800919e:	4b56      	ldr	r3, [pc, #344]	; (80092f8 <_printf_i+0x21c>)
 80091a0:	2708      	movs	r7, #8
 80091a2:	9303      	str	r3, [sp, #12]
 80091a4:	2a6f      	cmp	r2, #111	; 0x6f
 80091a6:	d000      	beq.n	80091aa <_printf_i+0xce>
 80091a8:	3702      	adds	r7, #2
 80091aa:	0023      	movs	r3, r4
 80091ac:	2200      	movs	r2, #0
 80091ae:	3343      	adds	r3, #67	; 0x43
 80091b0:	701a      	strb	r2, [r3, #0]
 80091b2:	6863      	ldr	r3, [r4, #4]
 80091b4:	60a3      	str	r3, [r4, #8]
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	db03      	blt.n	80091c2 <_printf_i+0xe6>
 80091ba:	2204      	movs	r2, #4
 80091bc:	6821      	ldr	r1, [r4, #0]
 80091be:	4391      	bics	r1, r2
 80091c0:	6021      	str	r1, [r4, #0]
 80091c2:	2d00      	cmp	r5, #0
 80091c4:	d102      	bne.n	80091cc <_printf_i+0xf0>
 80091c6:	9e04      	ldr	r6, [sp, #16]
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d00c      	beq.n	80091e6 <_printf_i+0x10a>
 80091cc:	9e04      	ldr	r6, [sp, #16]
 80091ce:	0028      	movs	r0, r5
 80091d0:	0039      	movs	r1, r7
 80091d2:	f7f7 f841 	bl	8000258 <__aeabi_uidivmod>
 80091d6:	9b03      	ldr	r3, [sp, #12]
 80091d8:	3e01      	subs	r6, #1
 80091da:	5c5b      	ldrb	r3, [r3, r1]
 80091dc:	7033      	strb	r3, [r6, #0]
 80091de:	002b      	movs	r3, r5
 80091e0:	0005      	movs	r5, r0
 80091e2:	429f      	cmp	r7, r3
 80091e4:	d9f3      	bls.n	80091ce <_printf_i+0xf2>
 80091e6:	2f08      	cmp	r7, #8
 80091e8:	d109      	bne.n	80091fe <_printf_i+0x122>
 80091ea:	6823      	ldr	r3, [r4, #0]
 80091ec:	07db      	lsls	r3, r3, #31
 80091ee:	d506      	bpl.n	80091fe <_printf_i+0x122>
 80091f0:	6863      	ldr	r3, [r4, #4]
 80091f2:	6922      	ldr	r2, [r4, #16]
 80091f4:	4293      	cmp	r3, r2
 80091f6:	dc02      	bgt.n	80091fe <_printf_i+0x122>
 80091f8:	2330      	movs	r3, #48	; 0x30
 80091fa:	3e01      	subs	r6, #1
 80091fc:	7033      	strb	r3, [r6, #0]
 80091fe:	9b04      	ldr	r3, [sp, #16]
 8009200:	1b9b      	subs	r3, r3, r6
 8009202:	6123      	str	r3, [r4, #16]
 8009204:	9b07      	ldr	r3, [sp, #28]
 8009206:	0021      	movs	r1, r4
 8009208:	9300      	str	r3, [sp, #0]
 800920a:	9805      	ldr	r0, [sp, #20]
 800920c:	9b06      	ldr	r3, [sp, #24]
 800920e:	aa09      	add	r2, sp, #36	; 0x24
 8009210:	f7ff fef4 	bl	8008ffc <_printf_common>
 8009214:	1c43      	adds	r3, r0, #1
 8009216:	d14c      	bne.n	80092b2 <_printf_i+0x1d6>
 8009218:	2001      	movs	r0, #1
 800921a:	4240      	negs	r0, r0
 800921c:	b00b      	add	sp, #44	; 0x2c
 800921e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009220:	3145      	adds	r1, #69	; 0x45
 8009222:	700a      	strb	r2, [r1, #0]
 8009224:	4a34      	ldr	r2, [pc, #208]	; (80092f8 <_printf_i+0x21c>)
 8009226:	9203      	str	r2, [sp, #12]
 8009228:	681a      	ldr	r2, [r3, #0]
 800922a:	6821      	ldr	r1, [r4, #0]
 800922c:	ca20      	ldmia	r2!, {r5}
 800922e:	601a      	str	r2, [r3, #0]
 8009230:	0608      	lsls	r0, r1, #24
 8009232:	d516      	bpl.n	8009262 <_printf_i+0x186>
 8009234:	07cb      	lsls	r3, r1, #31
 8009236:	d502      	bpl.n	800923e <_printf_i+0x162>
 8009238:	2320      	movs	r3, #32
 800923a:	4319      	orrs	r1, r3
 800923c:	6021      	str	r1, [r4, #0]
 800923e:	2710      	movs	r7, #16
 8009240:	2d00      	cmp	r5, #0
 8009242:	d1b2      	bne.n	80091aa <_printf_i+0xce>
 8009244:	2320      	movs	r3, #32
 8009246:	6822      	ldr	r2, [r4, #0]
 8009248:	439a      	bics	r2, r3
 800924a:	6022      	str	r2, [r4, #0]
 800924c:	e7ad      	b.n	80091aa <_printf_i+0xce>
 800924e:	2220      	movs	r2, #32
 8009250:	6809      	ldr	r1, [r1, #0]
 8009252:	430a      	orrs	r2, r1
 8009254:	6022      	str	r2, [r4, #0]
 8009256:	0022      	movs	r2, r4
 8009258:	2178      	movs	r1, #120	; 0x78
 800925a:	3245      	adds	r2, #69	; 0x45
 800925c:	7011      	strb	r1, [r2, #0]
 800925e:	4a27      	ldr	r2, [pc, #156]	; (80092fc <_printf_i+0x220>)
 8009260:	e7e1      	b.n	8009226 <_printf_i+0x14a>
 8009262:	0648      	lsls	r0, r1, #25
 8009264:	d5e6      	bpl.n	8009234 <_printf_i+0x158>
 8009266:	b2ad      	uxth	r5, r5
 8009268:	e7e4      	b.n	8009234 <_printf_i+0x158>
 800926a:	681a      	ldr	r2, [r3, #0]
 800926c:	680d      	ldr	r5, [r1, #0]
 800926e:	1d10      	adds	r0, r2, #4
 8009270:	6949      	ldr	r1, [r1, #20]
 8009272:	6018      	str	r0, [r3, #0]
 8009274:	6813      	ldr	r3, [r2, #0]
 8009276:	062e      	lsls	r6, r5, #24
 8009278:	d501      	bpl.n	800927e <_printf_i+0x1a2>
 800927a:	6019      	str	r1, [r3, #0]
 800927c:	e002      	b.n	8009284 <_printf_i+0x1a8>
 800927e:	066d      	lsls	r5, r5, #25
 8009280:	d5fb      	bpl.n	800927a <_printf_i+0x19e>
 8009282:	8019      	strh	r1, [r3, #0]
 8009284:	2300      	movs	r3, #0
 8009286:	9e04      	ldr	r6, [sp, #16]
 8009288:	6123      	str	r3, [r4, #16]
 800928a:	e7bb      	b.n	8009204 <_printf_i+0x128>
 800928c:	681a      	ldr	r2, [r3, #0]
 800928e:	1d11      	adds	r1, r2, #4
 8009290:	6019      	str	r1, [r3, #0]
 8009292:	6816      	ldr	r6, [r2, #0]
 8009294:	2100      	movs	r1, #0
 8009296:	0030      	movs	r0, r6
 8009298:	6862      	ldr	r2, [r4, #4]
 800929a:	f002 fc33 	bl	800bb04 <memchr>
 800929e:	2800      	cmp	r0, #0
 80092a0:	d001      	beq.n	80092a6 <_printf_i+0x1ca>
 80092a2:	1b80      	subs	r0, r0, r6
 80092a4:	6060      	str	r0, [r4, #4]
 80092a6:	6863      	ldr	r3, [r4, #4]
 80092a8:	6123      	str	r3, [r4, #16]
 80092aa:	2300      	movs	r3, #0
 80092ac:	9a04      	ldr	r2, [sp, #16]
 80092ae:	7013      	strb	r3, [r2, #0]
 80092b0:	e7a8      	b.n	8009204 <_printf_i+0x128>
 80092b2:	6923      	ldr	r3, [r4, #16]
 80092b4:	0032      	movs	r2, r6
 80092b6:	9906      	ldr	r1, [sp, #24]
 80092b8:	9805      	ldr	r0, [sp, #20]
 80092ba:	9d07      	ldr	r5, [sp, #28]
 80092bc:	47a8      	blx	r5
 80092be:	1c43      	adds	r3, r0, #1
 80092c0:	d0aa      	beq.n	8009218 <_printf_i+0x13c>
 80092c2:	6823      	ldr	r3, [r4, #0]
 80092c4:	079b      	lsls	r3, r3, #30
 80092c6:	d415      	bmi.n	80092f4 <_printf_i+0x218>
 80092c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092ca:	68e0      	ldr	r0, [r4, #12]
 80092cc:	4298      	cmp	r0, r3
 80092ce:	daa5      	bge.n	800921c <_printf_i+0x140>
 80092d0:	0018      	movs	r0, r3
 80092d2:	e7a3      	b.n	800921c <_printf_i+0x140>
 80092d4:	0022      	movs	r2, r4
 80092d6:	2301      	movs	r3, #1
 80092d8:	9906      	ldr	r1, [sp, #24]
 80092da:	9805      	ldr	r0, [sp, #20]
 80092dc:	9e07      	ldr	r6, [sp, #28]
 80092de:	3219      	adds	r2, #25
 80092e0:	47b0      	blx	r6
 80092e2:	1c43      	adds	r3, r0, #1
 80092e4:	d098      	beq.n	8009218 <_printf_i+0x13c>
 80092e6:	3501      	adds	r5, #1
 80092e8:	68e3      	ldr	r3, [r4, #12]
 80092ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80092ec:	1a9b      	subs	r3, r3, r2
 80092ee:	42ab      	cmp	r3, r5
 80092f0:	dcf0      	bgt.n	80092d4 <_printf_i+0x1f8>
 80092f2:	e7e9      	b.n	80092c8 <_printf_i+0x1ec>
 80092f4:	2500      	movs	r5, #0
 80092f6:	e7f7      	b.n	80092e8 <_printf_i+0x20c>
 80092f8:	0800dffc 	.word	0x0800dffc
 80092fc:	0800e00d 	.word	0x0800e00d

08009300 <_scanf_float>:
 8009300:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009302:	b08b      	sub	sp, #44	; 0x2c
 8009304:	0015      	movs	r5, r2
 8009306:	9001      	str	r0, [sp, #4]
 8009308:	22ae      	movs	r2, #174	; 0xae
 800930a:	2000      	movs	r0, #0
 800930c:	9306      	str	r3, [sp, #24]
 800930e:	688b      	ldr	r3, [r1, #8]
 8009310:	000e      	movs	r6, r1
 8009312:	1e59      	subs	r1, r3, #1
 8009314:	0052      	lsls	r2, r2, #1
 8009316:	9005      	str	r0, [sp, #20]
 8009318:	4291      	cmp	r1, r2
 800931a:	d905      	bls.n	8009328 <_scanf_float+0x28>
 800931c:	3b5e      	subs	r3, #94	; 0x5e
 800931e:	3bff      	subs	r3, #255	; 0xff
 8009320:	9305      	str	r3, [sp, #20]
 8009322:	235e      	movs	r3, #94	; 0x5e
 8009324:	33ff      	adds	r3, #255	; 0xff
 8009326:	60b3      	str	r3, [r6, #8]
 8009328:	23f0      	movs	r3, #240	; 0xf0
 800932a:	6832      	ldr	r2, [r6, #0]
 800932c:	00db      	lsls	r3, r3, #3
 800932e:	4313      	orrs	r3, r2
 8009330:	6033      	str	r3, [r6, #0]
 8009332:	0033      	movs	r3, r6
 8009334:	2400      	movs	r4, #0
 8009336:	331c      	adds	r3, #28
 8009338:	001f      	movs	r7, r3
 800933a:	9303      	str	r3, [sp, #12]
 800933c:	9402      	str	r4, [sp, #8]
 800933e:	9408      	str	r4, [sp, #32]
 8009340:	9407      	str	r4, [sp, #28]
 8009342:	9400      	str	r4, [sp, #0]
 8009344:	9404      	str	r4, [sp, #16]
 8009346:	68b2      	ldr	r2, [r6, #8]
 8009348:	2a00      	cmp	r2, #0
 800934a:	d00a      	beq.n	8009362 <_scanf_float+0x62>
 800934c:	682b      	ldr	r3, [r5, #0]
 800934e:	781b      	ldrb	r3, [r3, #0]
 8009350:	2b4e      	cmp	r3, #78	; 0x4e
 8009352:	d844      	bhi.n	80093de <_scanf_float+0xde>
 8009354:	0018      	movs	r0, r3
 8009356:	2b40      	cmp	r3, #64	; 0x40
 8009358:	d82c      	bhi.n	80093b4 <_scanf_float+0xb4>
 800935a:	382b      	subs	r0, #43	; 0x2b
 800935c:	b2c1      	uxtb	r1, r0
 800935e:	290e      	cmp	r1, #14
 8009360:	d92a      	bls.n	80093b8 <_scanf_float+0xb8>
 8009362:	9b00      	ldr	r3, [sp, #0]
 8009364:	2b00      	cmp	r3, #0
 8009366:	d003      	beq.n	8009370 <_scanf_float+0x70>
 8009368:	6832      	ldr	r2, [r6, #0]
 800936a:	4ba4      	ldr	r3, [pc, #656]	; (80095fc <_scanf_float+0x2fc>)
 800936c:	4013      	ands	r3, r2
 800936e:	6033      	str	r3, [r6, #0]
 8009370:	9b02      	ldr	r3, [sp, #8]
 8009372:	3b01      	subs	r3, #1
 8009374:	2b01      	cmp	r3, #1
 8009376:	d900      	bls.n	800937a <_scanf_float+0x7a>
 8009378:	e0f9      	b.n	800956e <_scanf_float+0x26e>
 800937a:	24be      	movs	r4, #190	; 0xbe
 800937c:	0064      	lsls	r4, r4, #1
 800937e:	9b03      	ldr	r3, [sp, #12]
 8009380:	429f      	cmp	r7, r3
 8009382:	d900      	bls.n	8009386 <_scanf_float+0x86>
 8009384:	e0e9      	b.n	800955a <_scanf_float+0x25a>
 8009386:	2301      	movs	r3, #1
 8009388:	9302      	str	r3, [sp, #8]
 800938a:	e185      	b.n	8009698 <_scanf_float+0x398>
 800938c:	0018      	movs	r0, r3
 800938e:	3861      	subs	r0, #97	; 0x61
 8009390:	280d      	cmp	r0, #13
 8009392:	d8e6      	bhi.n	8009362 <_scanf_float+0x62>
 8009394:	f7f6 fed0 	bl	8000138 <__gnu_thumb1_case_shi>
 8009398:	ffe50083 	.word	0xffe50083
 800939c:	ffe5ffe5 	.word	0xffe5ffe5
 80093a0:	00a200b6 	.word	0x00a200b6
 80093a4:	ffe5ffe5 	.word	0xffe5ffe5
 80093a8:	ffe50089 	.word	0xffe50089
 80093ac:	ffe5ffe5 	.word	0xffe5ffe5
 80093b0:	0065ffe5 	.word	0x0065ffe5
 80093b4:	3841      	subs	r0, #65	; 0x41
 80093b6:	e7eb      	b.n	8009390 <_scanf_float+0x90>
 80093b8:	280e      	cmp	r0, #14
 80093ba:	d8d2      	bhi.n	8009362 <_scanf_float+0x62>
 80093bc:	f7f6 febc 	bl	8000138 <__gnu_thumb1_case_shi>
 80093c0:	ffd1004b 	.word	0xffd1004b
 80093c4:	0098004b 	.word	0x0098004b
 80093c8:	0020ffd1 	.word	0x0020ffd1
 80093cc:	00400040 	.word	0x00400040
 80093d0:	00400040 	.word	0x00400040
 80093d4:	00400040 	.word	0x00400040
 80093d8:	00400040 	.word	0x00400040
 80093dc:	0040      	.short	0x0040
 80093de:	2b6e      	cmp	r3, #110	; 0x6e
 80093e0:	d809      	bhi.n	80093f6 <_scanf_float+0xf6>
 80093e2:	2b60      	cmp	r3, #96	; 0x60
 80093e4:	d8d2      	bhi.n	800938c <_scanf_float+0x8c>
 80093e6:	2b54      	cmp	r3, #84	; 0x54
 80093e8:	d07d      	beq.n	80094e6 <_scanf_float+0x1e6>
 80093ea:	2b59      	cmp	r3, #89	; 0x59
 80093ec:	d1b9      	bne.n	8009362 <_scanf_float+0x62>
 80093ee:	2c07      	cmp	r4, #7
 80093f0:	d1b7      	bne.n	8009362 <_scanf_float+0x62>
 80093f2:	2408      	movs	r4, #8
 80093f4:	e02c      	b.n	8009450 <_scanf_float+0x150>
 80093f6:	2b74      	cmp	r3, #116	; 0x74
 80093f8:	d075      	beq.n	80094e6 <_scanf_float+0x1e6>
 80093fa:	2b79      	cmp	r3, #121	; 0x79
 80093fc:	d0f7      	beq.n	80093ee <_scanf_float+0xee>
 80093fe:	e7b0      	b.n	8009362 <_scanf_float+0x62>
 8009400:	6831      	ldr	r1, [r6, #0]
 8009402:	05c8      	lsls	r0, r1, #23
 8009404:	d51c      	bpl.n	8009440 <_scanf_float+0x140>
 8009406:	2380      	movs	r3, #128	; 0x80
 8009408:	4399      	bics	r1, r3
 800940a:	9b00      	ldr	r3, [sp, #0]
 800940c:	6031      	str	r1, [r6, #0]
 800940e:	3301      	adds	r3, #1
 8009410:	9300      	str	r3, [sp, #0]
 8009412:	9b05      	ldr	r3, [sp, #20]
 8009414:	2b00      	cmp	r3, #0
 8009416:	d003      	beq.n	8009420 <_scanf_float+0x120>
 8009418:	3b01      	subs	r3, #1
 800941a:	3201      	adds	r2, #1
 800941c:	9305      	str	r3, [sp, #20]
 800941e:	60b2      	str	r2, [r6, #8]
 8009420:	68b3      	ldr	r3, [r6, #8]
 8009422:	3b01      	subs	r3, #1
 8009424:	60b3      	str	r3, [r6, #8]
 8009426:	6933      	ldr	r3, [r6, #16]
 8009428:	3301      	adds	r3, #1
 800942a:	6133      	str	r3, [r6, #16]
 800942c:	686b      	ldr	r3, [r5, #4]
 800942e:	3b01      	subs	r3, #1
 8009430:	606b      	str	r3, [r5, #4]
 8009432:	2b00      	cmp	r3, #0
 8009434:	dc00      	bgt.n	8009438 <_scanf_float+0x138>
 8009436:	e086      	b.n	8009546 <_scanf_float+0x246>
 8009438:	682b      	ldr	r3, [r5, #0]
 800943a:	3301      	adds	r3, #1
 800943c:	602b      	str	r3, [r5, #0]
 800943e:	e782      	b.n	8009346 <_scanf_float+0x46>
 8009440:	9a02      	ldr	r2, [sp, #8]
 8009442:	1912      	adds	r2, r2, r4
 8009444:	2a00      	cmp	r2, #0
 8009446:	d18c      	bne.n	8009362 <_scanf_float+0x62>
 8009448:	4a6d      	ldr	r2, [pc, #436]	; (8009600 <_scanf_float+0x300>)
 800944a:	6831      	ldr	r1, [r6, #0]
 800944c:	400a      	ands	r2, r1
 800944e:	6032      	str	r2, [r6, #0]
 8009450:	703b      	strb	r3, [r7, #0]
 8009452:	3701      	adds	r7, #1
 8009454:	e7e4      	b.n	8009420 <_scanf_float+0x120>
 8009456:	2180      	movs	r1, #128	; 0x80
 8009458:	6832      	ldr	r2, [r6, #0]
 800945a:	420a      	tst	r2, r1
 800945c:	d081      	beq.n	8009362 <_scanf_float+0x62>
 800945e:	438a      	bics	r2, r1
 8009460:	e7f5      	b.n	800944e <_scanf_float+0x14e>
 8009462:	9a02      	ldr	r2, [sp, #8]
 8009464:	2a00      	cmp	r2, #0
 8009466:	d10f      	bne.n	8009488 <_scanf_float+0x188>
 8009468:	9a00      	ldr	r2, [sp, #0]
 800946a:	2a00      	cmp	r2, #0
 800946c:	d10f      	bne.n	800948e <_scanf_float+0x18e>
 800946e:	6832      	ldr	r2, [r6, #0]
 8009470:	21e0      	movs	r1, #224	; 0xe0
 8009472:	0010      	movs	r0, r2
 8009474:	00c9      	lsls	r1, r1, #3
 8009476:	4008      	ands	r0, r1
 8009478:	4288      	cmp	r0, r1
 800947a:	d108      	bne.n	800948e <_scanf_float+0x18e>
 800947c:	4961      	ldr	r1, [pc, #388]	; (8009604 <_scanf_float+0x304>)
 800947e:	400a      	ands	r2, r1
 8009480:	6032      	str	r2, [r6, #0]
 8009482:	2201      	movs	r2, #1
 8009484:	9202      	str	r2, [sp, #8]
 8009486:	e7e3      	b.n	8009450 <_scanf_float+0x150>
 8009488:	9a02      	ldr	r2, [sp, #8]
 800948a:	2a02      	cmp	r2, #2
 800948c:	d059      	beq.n	8009542 <_scanf_float+0x242>
 800948e:	2c01      	cmp	r4, #1
 8009490:	d002      	beq.n	8009498 <_scanf_float+0x198>
 8009492:	2c04      	cmp	r4, #4
 8009494:	d000      	beq.n	8009498 <_scanf_float+0x198>
 8009496:	e764      	b.n	8009362 <_scanf_float+0x62>
 8009498:	3401      	adds	r4, #1
 800949a:	b2e4      	uxtb	r4, r4
 800949c:	e7d8      	b.n	8009450 <_scanf_float+0x150>
 800949e:	9a02      	ldr	r2, [sp, #8]
 80094a0:	2a01      	cmp	r2, #1
 80094a2:	d000      	beq.n	80094a6 <_scanf_float+0x1a6>
 80094a4:	e75d      	b.n	8009362 <_scanf_float+0x62>
 80094a6:	2202      	movs	r2, #2
 80094a8:	e7ec      	b.n	8009484 <_scanf_float+0x184>
 80094aa:	2c00      	cmp	r4, #0
 80094ac:	d110      	bne.n	80094d0 <_scanf_float+0x1d0>
 80094ae:	9a00      	ldr	r2, [sp, #0]
 80094b0:	2a00      	cmp	r2, #0
 80094b2:	d000      	beq.n	80094b6 <_scanf_float+0x1b6>
 80094b4:	e758      	b.n	8009368 <_scanf_float+0x68>
 80094b6:	6832      	ldr	r2, [r6, #0]
 80094b8:	21e0      	movs	r1, #224	; 0xe0
 80094ba:	0010      	movs	r0, r2
 80094bc:	00c9      	lsls	r1, r1, #3
 80094be:	4008      	ands	r0, r1
 80094c0:	4288      	cmp	r0, r1
 80094c2:	d000      	beq.n	80094c6 <_scanf_float+0x1c6>
 80094c4:	e754      	b.n	8009370 <_scanf_float+0x70>
 80094c6:	494f      	ldr	r1, [pc, #316]	; (8009604 <_scanf_float+0x304>)
 80094c8:	3401      	adds	r4, #1
 80094ca:	400a      	ands	r2, r1
 80094cc:	6032      	str	r2, [r6, #0]
 80094ce:	e7bf      	b.n	8009450 <_scanf_float+0x150>
 80094d0:	21fd      	movs	r1, #253	; 0xfd
 80094d2:	1ee2      	subs	r2, r4, #3
 80094d4:	420a      	tst	r2, r1
 80094d6:	d000      	beq.n	80094da <_scanf_float+0x1da>
 80094d8:	e743      	b.n	8009362 <_scanf_float+0x62>
 80094da:	e7dd      	b.n	8009498 <_scanf_float+0x198>
 80094dc:	2c02      	cmp	r4, #2
 80094de:	d000      	beq.n	80094e2 <_scanf_float+0x1e2>
 80094e0:	e73f      	b.n	8009362 <_scanf_float+0x62>
 80094e2:	2403      	movs	r4, #3
 80094e4:	e7b4      	b.n	8009450 <_scanf_float+0x150>
 80094e6:	2c06      	cmp	r4, #6
 80094e8:	d000      	beq.n	80094ec <_scanf_float+0x1ec>
 80094ea:	e73a      	b.n	8009362 <_scanf_float+0x62>
 80094ec:	2407      	movs	r4, #7
 80094ee:	e7af      	b.n	8009450 <_scanf_float+0x150>
 80094f0:	6832      	ldr	r2, [r6, #0]
 80094f2:	0591      	lsls	r1, r2, #22
 80094f4:	d400      	bmi.n	80094f8 <_scanf_float+0x1f8>
 80094f6:	e734      	b.n	8009362 <_scanf_float+0x62>
 80094f8:	4943      	ldr	r1, [pc, #268]	; (8009608 <_scanf_float+0x308>)
 80094fa:	400a      	ands	r2, r1
 80094fc:	6032      	str	r2, [r6, #0]
 80094fe:	9a00      	ldr	r2, [sp, #0]
 8009500:	9204      	str	r2, [sp, #16]
 8009502:	e7a5      	b.n	8009450 <_scanf_float+0x150>
 8009504:	21a0      	movs	r1, #160	; 0xa0
 8009506:	2080      	movs	r0, #128	; 0x80
 8009508:	6832      	ldr	r2, [r6, #0]
 800950a:	00c9      	lsls	r1, r1, #3
 800950c:	4011      	ands	r1, r2
 800950e:	00c0      	lsls	r0, r0, #3
 8009510:	4281      	cmp	r1, r0
 8009512:	d006      	beq.n	8009522 <_scanf_float+0x222>
 8009514:	4202      	tst	r2, r0
 8009516:	d100      	bne.n	800951a <_scanf_float+0x21a>
 8009518:	e723      	b.n	8009362 <_scanf_float+0x62>
 800951a:	9900      	ldr	r1, [sp, #0]
 800951c:	2900      	cmp	r1, #0
 800951e:	d100      	bne.n	8009522 <_scanf_float+0x222>
 8009520:	e726      	b.n	8009370 <_scanf_float+0x70>
 8009522:	0591      	lsls	r1, r2, #22
 8009524:	d404      	bmi.n	8009530 <_scanf_float+0x230>
 8009526:	9900      	ldr	r1, [sp, #0]
 8009528:	9804      	ldr	r0, [sp, #16]
 800952a:	9708      	str	r7, [sp, #32]
 800952c:	1a09      	subs	r1, r1, r0
 800952e:	9107      	str	r1, [sp, #28]
 8009530:	4934      	ldr	r1, [pc, #208]	; (8009604 <_scanf_float+0x304>)
 8009532:	400a      	ands	r2, r1
 8009534:	21c0      	movs	r1, #192	; 0xc0
 8009536:	0049      	lsls	r1, r1, #1
 8009538:	430a      	orrs	r2, r1
 800953a:	6032      	str	r2, [r6, #0]
 800953c:	2200      	movs	r2, #0
 800953e:	9200      	str	r2, [sp, #0]
 8009540:	e786      	b.n	8009450 <_scanf_float+0x150>
 8009542:	2203      	movs	r2, #3
 8009544:	e79e      	b.n	8009484 <_scanf_float+0x184>
 8009546:	23c0      	movs	r3, #192	; 0xc0
 8009548:	005b      	lsls	r3, r3, #1
 800954a:	0029      	movs	r1, r5
 800954c:	58f3      	ldr	r3, [r6, r3]
 800954e:	9801      	ldr	r0, [sp, #4]
 8009550:	4798      	blx	r3
 8009552:	2800      	cmp	r0, #0
 8009554:	d100      	bne.n	8009558 <_scanf_float+0x258>
 8009556:	e6f6      	b.n	8009346 <_scanf_float+0x46>
 8009558:	e703      	b.n	8009362 <_scanf_float+0x62>
 800955a:	3f01      	subs	r7, #1
 800955c:	5933      	ldr	r3, [r6, r4]
 800955e:	002a      	movs	r2, r5
 8009560:	7839      	ldrb	r1, [r7, #0]
 8009562:	9801      	ldr	r0, [sp, #4]
 8009564:	4798      	blx	r3
 8009566:	6933      	ldr	r3, [r6, #16]
 8009568:	3b01      	subs	r3, #1
 800956a:	6133      	str	r3, [r6, #16]
 800956c:	e707      	b.n	800937e <_scanf_float+0x7e>
 800956e:	1e63      	subs	r3, r4, #1
 8009570:	2b06      	cmp	r3, #6
 8009572:	d80e      	bhi.n	8009592 <_scanf_float+0x292>
 8009574:	9702      	str	r7, [sp, #8]
 8009576:	2c02      	cmp	r4, #2
 8009578:	d920      	bls.n	80095bc <_scanf_float+0x2bc>
 800957a:	1be3      	subs	r3, r4, r7
 800957c:	b2db      	uxtb	r3, r3
 800957e:	9305      	str	r3, [sp, #20]
 8009580:	9b02      	ldr	r3, [sp, #8]
 8009582:	9a05      	ldr	r2, [sp, #20]
 8009584:	189b      	adds	r3, r3, r2
 8009586:	b2db      	uxtb	r3, r3
 8009588:	2b03      	cmp	r3, #3
 800958a:	d827      	bhi.n	80095dc <_scanf_float+0x2dc>
 800958c:	3c03      	subs	r4, #3
 800958e:	b2e4      	uxtb	r4, r4
 8009590:	1b3f      	subs	r7, r7, r4
 8009592:	6833      	ldr	r3, [r6, #0]
 8009594:	05da      	lsls	r2, r3, #23
 8009596:	d554      	bpl.n	8009642 <_scanf_float+0x342>
 8009598:	055b      	lsls	r3, r3, #21
 800959a:	d537      	bpl.n	800960c <_scanf_float+0x30c>
 800959c:	24be      	movs	r4, #190	; 0xbe
 800959e:	0064      	lsls	r4, r4, #1
 80095a0:	9b03      	ldr	r3, [sp, #12]
 80095a2:	429f      	cmp	r7, r3
 80095a4:	d800      	bhi.n	80095a8 <_scanf_float+0x2a8>
 80095a6:	e6ee      	b.n	8009386 <_scanf_float+0x86>
 80095a8:	3f01      	subs	r7, #1
 80095aa:	5933      	ldr	r3, [r6, r4]
 80095ac:	002a      	movs	r2, r5
 80095ae:	7839      	ldrb	r1, [r7, #0]
 80095b0:	9801      	ldr	r0, [sp, #4]
 80095b2:	4798      	blx	r3
 80095b4:	6933      	ldr	r3, [r6, #16]
 80095b6:	3b01      	subs	r3, #1
 80095b8:	6133      	str	r3, [r6, #16]
 80095ba:	e7f1      	b.n	80095a0 <_scanf_float+0x2a0>
 80095bc:	24be      	movs	r4, #190	; 0xbe
 80095be:	0064      	lsls	r4, r4, #1
 80095c0:	9b03      	ldr	r3, [sp, #12]
 80095c2:	429f      	cmp	r7, r3
 80095c4:	d800      	bhi.n	80095c8 <_scanf_float+0x2c8>
 80095c6:	e6de      	b.n	8009386 <_scanf_float+0x86>
 80095c8:	3f01      	subs	r7, #1
 80095ca:	5933      	ldr	r3, [r6, r4]
 80095cc:	002a      	movs	r2, r5
 80095ce:	7839      	ldrb	r1, [r7, #0]
 80095d0:	9801      	ldr	r0, [sp, #4]
 80095d2:	4798      	blx	r3
 80095d4:	6933      	ldr	r3, [r6, #16]
 80095d6:	3b01      	subs	r3, #1
 80095d8:	6133      	str	r3, [r6, #16]
 80095da:	e7f1      	b.n	80095c0 <_scanf_float+0x2c0>
 80095dc:	9b02      	ldr	r3, [sp, #8]
 80095de:	002a      	movs	r2, r5
 80095e0:	3b01      	subs	r3, #1
 80095e2:	7819      	ldrb	r1, [r3, #0]
 80095e4:	9302      	str	r3, [sp, #8]
 80095e6:	23be      	movs	r3, #190	; 0xbe
 80095e8:	005b      	lsls	r3, r3, #1
 80095ea:	58f3      	ldr	r3, [r6, r3]
 80095ec:	9801      	ldr	r0, [sp, #4]
 80095ee:	9309      	str	r3, [sp, #36]	; 0x24
 80095f0:	4798      	blx	r3
 80095f2:	6933      	ldr	r3, [r6, #16]
 80095f4:	3b01      	subs	r3, #1
 80095f6:	6133      	str	r3, [r6, #16]
 80095f8:	e7c2      	b.n	8009580 <_scanf_float+0x280>
 80095fa:	46c0      	nop			; (mov r8, r8)
 80095fc:	fffffeff 	.word	0xfffffeff
 8009600:	fffffe7f 	.word	0xfffffe7f
 8009604:	fffff87f 	.word	0xfffff87f
 8009608:	fffffd7f 	.word	0xfffffd7f
 800960c:	6933      	ldr	r3, [r6, #16]
 800960e:	1e7c      	subs	r4, r7, #1
 8009610:	7821      	ldrb	r1, [r4, #0]
 8009612:	3b01      	subs	r3, #1
 8009614:	6133      	str	r3, [r6, #16]
 8009616:	2965      	cmp	r1, #101	; 0x65
 8009618:	d00c      	beq.n	8009634 <_scanf_float+0x334>
 800961a:	2945      	cmp	r1, #69	; 0x45
 800961c:	d00a      	beq.n	8009634 <_scanf_float+0x334>
 800961e:	23be      	movs	r3, #190	; 0xbe
 8009620:	005b      	lsls	r3, r3, #1
 8009622:	58f3      	ldr	r3, [r6, r3]
 8009624:	002a      	movs	r2, r5
 8009626:	9801      	ldr	r0, [sp, #4]
 8009628:	4798      	blx	r3
 800962a:	6933      	ldr	r3, [r6, #16]
 800962c:	1ebc      	subs	r4, r7, #2
 800962e:	3b01      	subs	r3, #1
 8009630:	7821      	ldrb	r1, [r4, #0]
 8009632:	6133      	str	r3, [r6, #16]
 8009634:	23be      	movs	r3, #190	; 0xbe
 8009636:	005b      	lsls	r3, r3, #1
 8009638:	002a      	movs	r2, r5
 800963a:	58f3      	ldr	r3, [r6, r3]
 800963c:	9801      	ldr	r0, [sp, #4]
 800963e:	4798      	blx	r3
 8009640:	0027      	movs	r7, r4
 8009642:	6832      	ldr	r2, [r6, #0]
 8009644:	2310      	movs	r3, #16
 8009646:	0011      	movs	r1, r2
 8009648:	4019      	ands	r1, r3
 800964a:	9102      	str	r1, [sp, #8]
 800964c:	421a      	tst	r2, r3
 800964e:	d158      	bne.n	8009702 <_scanf_float+0x402>
 8009650:	23c0      	movs	r3, #192	; 0xc0
 8009652:	7039      	strb	r1, [r7, #0]
 8009654:	6832      	ldr	r2, [r6, #0]
 8009656:	00db      	lsls	r3, r3, #3
 8009658:	4013      	ands	r3, r2
 800965a:	2280      	movs	r2, #128	; 0x80
 800965c:	00d2      	lsls	r2, r2, #3
 800965e:	4293      	cmp	r3, r2
 8009660:	d11d      	bne.n	800969e <_scanf_float+0x39e>
 8009662:	9b04      	ldr	r3, [sp, #16]
 8009664:	9a00      	ldr	r2, [sp, #0]
 8009666:	9900      	ldr	r1, [sp, #0]
 8009668:	1a9a      	subs	r2, r3, r2
 800966a:	428b      	cmp	r3, r1
 800966c:	d124      	bne.n	80096b8 <_scanf_float+0x3b8>
 800966e:	2200      	movs	r2, #0
 8009670:	9903      	ldr	r1, [sp, #12]
 8009672:	9801      	ldr	r0, [sp, #4]
 8009674:	f000 ff42 	bl	800a4fc <_strtod_r>
 8009678:	9b06      	ldr	r3, [sp, #24]
 800967a:	000d      	movs	r5, r1
 800967c:	6831      	ldr	r1, [r6, #0]
 800967e:	0004      	movs	r4, r0
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	078a      	lsls	r2, r1, #30
 8009684:	d525      	bpl.n	80096d2 <_scanf_float+0x3d2>
 8009686:	1d1a      	adds	r2, r3, #4
 8009688:	9906      	ldr	r1, [sp, #24]
 800968a:	600a      	str	r2, [r1, #0]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	601c      	str	r4, [r3, #0]
 8009690:	605d      	str	r5, [r3, #4]
 8009692:	68f3      	ldr	r3, [r6, #12]
 8009694:	3301      	adds	r3, #1
 8009696:	60f3      	str	r3, [r6, #12]
 8009698:	9802      	ldr	r0, [sp, #8]
 800969a:	b00b      	add	sp, #44	; 0x2c
 800969c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800969e:	9b07      	ldr	r3, [sp, #28]
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d0e4      	beq.n	800966e <_scanf_float+0x36e>
 80096a4:	9b08      	ldr	r3, [sp, #32]
 80096a6:	9a02      	ldr	r2, [sp, #8]
 80096a8:	1c59      	adds	r1, r3, #1
 80096aa:	9801      	ldr	r0, [sp, #4]
 80096ac:	230a      	movs	r3, #10
 80096ae:	f000 ffbb 	bl	800a628 <_strtol_r>
 80096b2:	9b07      	ldr	r3, [sp, #28]
 80096b4:	9f08      	ldr	r7, [sp, #32]
 80096b6:	1ac2      	subs	r2, r0, r3
 80096b8:	0033      	movs	r3, r6
 80096ba:	3370      	adds	r3, #112	; 0x70
 80096bc:	33ff      	adds	r3, #255	; 0xff
 80096be:	429f      	cmp	r7, r3
 80096c0:	d302      	bcc.n	80096c8 <_scanf_float+0x3c8>
 80096c2:	0037      	movs	r7, r6
 80096c4:	376f      	adds	r7, #111	; 0x6f
 80096c6:	37ff      	adds	r7, #255	; 0xff
 80096c8:	0038      	movs	r0, r7
 80096ca:	490f      	ldr	r1, [pc, #60]	; (8009708 <_scanf_float+0x408>)
 80096cc:	f000 f836 	bl	800973c <siprintf>
 80096d0:	e7cd      	b.n	800966e <_scanf_float+0x36e>
 80096d2:	1d1a      	adds	r2, r3, #4
 80096d4:	0749      	lsls	r1, r1, #29
 80096d6:	d4d7      	bmi.n	8009688 <_scanf_float+0x388>
 80096d8:	9906      	ldr	r1, [sp, #24]
 80096da:	0020      	movs	r0, r4
 80096dc:	600a      	str	r2, [r1, #0]
 80096de:	681f      	ldr	r7, [r3, #0]
 80096e0:	0022      	movs	r2, r4
 80096e2:	002b      	movs	r3, r5
 80096e4:	0029      	movs	r1, r5
 80096e6:	f7f9 fa4d 	bl	8002b84 <__aeabi_dcmpun>
 80096ea:	2800      	cmp	r0, #0
 80096ec:	d004      	beq.n	80096f8 <_scanf_float+0x3f8>
 80096ee:	4807      	ldr	r0, [pc, #28]	; (800970c <_scanf_float+0x40c>)
 80096f0:	f000 f820 	bl	8009734 <nanf>
 80096f4:	6038      	str	r0, [r7, #0]
 80096f6:	e7cc      	b.n	8009692 <_scanf_float+0x392>
 80096f8:	0020      	movs	r0, r4
 80096fa:	0029      	movs	r1, r5
 80096fc:	f7f9 fb34 	bl	8002d68 <__aeabi_d2f>
 8009700:	e7f8      	b.n	80096f4 <_scanf_float+0x3f4>
 8009702:	2300      	movs	r3, #0
 8009704:	e640      	b.n	8009388 <_scanf_float+0x88>
 8009706:	46c0      	nop			; (mov r8, r8)
 8009708:	0800e01e 	.word	0x0800e01e
 800970c:	0800e443 	.word	0x0800e443

08009710 <_sbrk_r>:
 8009710:	2300      	movs	r3, #0
 8009712:	b570      	push	{r4, r5, r6, lr}
 8009714:	4d06      	ldr	r5, [pc, #24]	; (8009730 <_sbrk_r+0x20>)
 8009716:	0004      	movs	r4, r0
 8009718:	0008      	movs	r0, r1
 800971a:	602b      	str	r3, [r5, #0]
 800971c:	f7fb fade 	bl	8004cdc <_sbrk>
 8009720:	1c43      	adds	r3, r0, #1
 8009722:	d103      	bne.n	800972c <_sbrk_r+0x1c>
 8009724:	682b      	ldr	r3, [r5, #0]
 8009726:	2b00      	cmp	r3, #0
 8009728:	d000      	beq.n	800972c <_sbrk_r+0x1c>
 800972a:	6023      	str	r3, [r4, #0]
 800972c:	bd70      	pop	{r4, r5, r6, pc}
 800972e:	46c0      	nop			; (mov r8, r8)
 8009730:	20000a28 	.word	0x20000a28

08009734 <nanf>:
 8009734:	4800      	ldr	r0, [pc, #0]	; (8009738 <nanf+0x4>)
 8009736:	4770      	bx	lr
 8009738:	7fc00000 	.word	0x7fc00000

0800973c <siprintf>:
 800973c:	b40e      	push	{r1, r2, r3}
 800973e:	b500      	push	{lr}
 8009740:	490b      	ldr	r1, [pc, #44]	; (8009770 <siprintf+0x34>)
 8009742:	b09c      	sub	sp, #112	; 0x70
 8009744:	ab1d      	add	r3, sp, #116	; 0x74
 8009746:	9002      	str	r0, [sp, #8]
 8009748:	9006      	str	r0, [sp, #24]
 800974a:	9107      	str	r1, [sp, #28]
 800974c:	9104      	str	r1, [sp, #16]
 800974e:	4809      	ldr	r0, [pc, #36]	; (8009774 <siprintf+0x38>)
 8009750:	4909      	ldr	r1, [pc, #36]	; (8009778 <siprintf+0x3c>)
 8009752:	cb04      	ldmia	r3!, {r2}
 8009754:	9105      	str	r1, [sp, #20]
 8009756:	6800      	ldr	r0, [r0, #0]
 8009758:	a902      	add	r1, sp, #8
 800975a:	9301      	str	r3, [sp, #4]
 800975c:	f002 ff46 	bl	800c5ec <_svfiprintf_r>
 8009760:	2300      	movs	r3, #0
 8009762:	9a02      	ldr	r2, [sp, #8]
 8009764:	7013      	strb	r3, [r2, #0]
 8009766:	b01c      	add	sp, #112	; 0x70
 8009768:	bc08      	pop	{r3}
 800976a:	b003      	add	sp, #12
 800976c:	4718      	bx	r3
 800976e:	46c0      	nop			; (mov r8, r8)
 8009770:	7fffffff 	.word	0x7fffffff
 8009774:	20000050 	.word	0x20000050
 8009778:	ffff0208 	.word	0xffff0208

0800977c <siscanf>:
 800977c:	b40e      	push	{r1, r2, r3}
 800977e:	b530      	push	{r4, r5, lr}
 8009780:	2381      	movs	r3, #129	; 0x81
 8009782:	b09c      	sub	sp, #112	; 0x70
 8009784:	466a      	mov	r2, sp
 8009786:	ac1f      	add	r4, sp, #124	; 0x7c
 8009788:	009b      	lsls	r3, r3, #2
 800978a:	cc20      	ldmia	r4!, {r5}
 800978c:	8293      	strh	r3, [r2, #20]
 800978e:	9002      	str	r0, [sp, #8]
 8009790:	9006      	str	r0, [sp, #24]
 8009792:	f7f6 fcbf 	bl	8000114 <strlen>
 8009796:	4b0b      	ldr	r3, [pc, #44]	; (80097c4 <siscanf+0x48>)
 8009798:	466a      	mov	r2, sp
 800979a:	930b      	str	r3, [sp, #44]	; 0x2c
 800979c:	2300      	movs	r3, #0
 800979e:	9003      	str	r0, [sp, #12]
 80097a0:	9007      	str	r0, [sp, #28]
 80097a2:	4809      	ldr	r0, [pc, #36]	; (80097c8 <siscanf+0x4c>)
 80097a4:	930f      	str	r3, [sp, #60]	; 0x3c
 80097a6:	9314      	str	r3, [sp, #80]	; 0x50
 80097a8:	3b01      	subs	r3, #1
 80097aa:	82d3      	strh	r3, [r2, #22]
 80097ac:	a902      	add	r1, sp, #8
 80097ae:	0023      	movs	r3, r4
 80097b0:	002a      	movs	r2, r5
 80097b2:	6800      	ldr	r0, [r0, #0]
 80097b4:	9401      	str	r4, [sp, #4]
 80097b6:	f003 f875 	bl	800c8a4 <__ssvfiscanf_r>
 80097ba:	b01c      	add	sp, #112	; 0x70
 80097bc:	bc30      	pop	{r4, r5}
 80097be:	bc08      	pop	{r3}
 80097c0:	b003      	add	sp, #12
 80097c2:	4718      	bx	r3
 80097c4:	080097f5 	.word	0x080097f5
 80097c8:	20000050 	.word	0x20000050

080097cc <__sread>:
 80097cc:	b570      	push	{r4, r5, r6, lr}
 80097ce:	000c      	movs	r4, r1
 80097d0:	250e      	movs	r5, #14
 80097d2:	5f49      	ldrsh	r1, [r1, r5]
 80097d4:	f003 fb46 	bl	800ce64 <_read_r>
 80097d8:	2800      	cmp	r0, #0
 80097da:	db03      	blt.n	80097e4 <__sread+0x18>
 80097dc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80097de:	181b      	adds	r3, r3, r0
 80097e0:	6563      	str	r3, [r4, #84]	; 0x54
 80097e2:	bd70      	pop	{r4, r5, r6, pc}
 80097e4:	89a3      	ldrh	r3, [r4, #12]
 80097e6:	4a02      	ldr	r2, [pc, #8]	; (80097f0 <__sread+0x24>)
 80097e8:	4013      	ands	r3, r2
 80097ea:	81a3      	strh	r3, [r4, #12]
 80097ec:	e7f9      	b.n	80097e2 <__sread+0x16>
 80097ee:	46c0      	nop			; (mov r8, r8)
 80097f0:	ffffefff 	.word	0xffffefff

080097f4 <__seofread>:
 80097f4:	2000      	movs	r0, #0
 80097f6:	4770      	bx	lr

080097f8 <__swrite>:
 80097f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097fa:	001f      	movs	r7, r3
 80097fc:	898b      	ldrh	r3, [r1, #12]
 80097fe:	0005      	movs	r5, r0
 8009800:	000c      	movs	r4, r1
 8009802:	0016      	movs	r6, r2
 8009804:	05db      	lsls	r3, r3, #23
 8009806:	d505      	bpl.n	8009814 <__swrite+0x1c>
 8009808:	230e      	movs	r3, #14
 800980a:	5ec9      	ldrsh	r1, [r1, r3]
 800980c:	2200      	movs	r2, #0
 800980e:	2302      	movs	r3, #2
 8009810:	f002 f952 	bl	800bab8 <_lseek_r>
 8009814:	89a3      	ldrh	r3, [r4, #12]
 8009816:	4a05      	ldr	r2, [pc, #20]	; (800982c <__swrite+0x34>)
 8009818:	0028      	movs	r0, r5
 800981a:	4013      	ands	r3, r2
 800981c:	81a3      	strh	r3, [r4, #12]
 800981e:	0032      	movs	r2, r6
 8009820:	230e      	movs	r3, #14
 8009822:	5ee1      	ldrsh	r1, [r4, r3]
 8009824:	003b      	movs	r3, r7
 8009826:	f000 ff03 	bl	800a630 <_write_r>
 800982a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800982c:	ffffefff 	.word	0xffffefff

08009830 <__sseek>:
 8009830:	b570      	push	{r4, r5, r6, lr}
 8009832:	000c      	movs	r4, r1
 8009834:	250e      	movs	r5, #14
 8009836:	5f49      	ldrsh	r1, [r1, r5]
 8009838:	f002 f93e 	bl	800bab8 <_lseek_r>
 800983c:	89a3      	ldrh	r3, [r4, #12]
 800983e:	1c42      	adds	r2, r0, #1
 8009840:	d103      	bne.n	800984a <__sseek+0x1a>
 8009842:	4a05      	ldr	r2, [pc, #20]	; (8009858 <__sseek+0x28>)
 8009844:	4013      	ands	r3, r2
 8009846:	81a3      	strh	r3, [r4, #12]
 8009848:	bd70      	pop	{r4, r5, r6, pc}
 800984a:	2280      	movs	r2, #128	; 0x80
 800984c:	0152      	lsls	r2, r2, #5
 800984e:	4313      	orrs	r3, r2
 8009850:	81a3      	strh	r3, [r4, #12]
 8009852:	6560      	str	r0, [r4, #84]	; 0x54
 8009854:	e7f8      	b.n	8009848 <__sseek+0x18>
 8009856:	46c0      	nop			; (mov r8, r8)
 8009858:	ffffefff 	.word	0xffffefff

0800985c <__sclose>:
 800985c:	b510      	push	{r4, lr}
 800985e:	230e      	movs	r3, #14
 8009860:	5ec9      	ldrsh	r1, [r1, r3]
 8009862:	f000 fef9 	bl	800a658 <_close_r>
 8009866:	bd10      	pop	{r4, pc}

08009868 <strcpy>:
 8009868:	0003      	movs	r3, r0
 800986a:	780a      	ldrb	r2, [r1, #0]
 800986c:	3101      	adds	r1, #1
 800986e:	701a      	strb	r2, [r3, #0]
 8009870:	3301      	adds	r3, #1
 8009872:	2a00      	cmp	r2, #0
 8009874:	d1f9      	bne.n	800986a <strcpy+0x2>
 8009876:	4770      	bx	lr

08009878 <strstr>:
 8009878:	780a      	ldrb	r2, [r1, #0]
 800987a:	b530      	push	{r4, r5, lr}
 800987c:	2a00      	cmp	r2, #0
 800987e:	d10c      	bne.n	800989a <strstr+0x22>
 8009880:	bd30      	pop	{r4, r5, pc}
 8009882:	429a      	cmp	r2, r3
 8009884:	d108      	bne.n	8009898 <strstr+0x20>
 8009886:	2301      	movs	r3, #1
 8009888:	5ccc      	ldrb	r4, [r1, r3]
 800988a:	2c00      	cmp	r4, #0
 800988c:	d0f8      	beq.n	8009880 <strstr+0x8>
 800988e:	5cc5      	ldrb	r5, [r0, r3]
 8009890:	42a5      	cmp	r5, r4
 8009892:	d101      	bne.n	8009898 <strstr+0x20>
 8009894:	3301      	adds	r3, #1
 8009896:	e7f7      	b.n	8009888 <strstr+0x10>
 8009898:	3001      	adds	r0, #1
 800989a:	7803      	ldrb	r3, [r0, #0]
 800989c:	2b00      	cmp	r3, #0
 800989e:	d1f0      	bne.n	8009882 <strstr+0xa>
 80098a0:	0018      	movs	r0, r3
 80098a2:	e7ed      	b.n	8009880 <strstr+0x8>

080098a4 <sulp>:
 80098a4:	b570      	push	{r4, r5, r6, lr}
 80098a6:	0016      	movs	r6, r2
 80098a8:	000d      	movs	r5, r1
 80098aa:	f002 fccb 	bl	800c244 <__ulp>
 80098ae:	2e00      	cmp	r6, #0
 80098b0:	d00d      	beq.n	80098ce <sulp+0x2a>
 80098b2:	236b      	movs	r3, #107	; 0x6b
 80098b4:	006a      	lsls	r2, r5, #1
 80098b6:	0d52      	lsrs	r2, r2, #21
 80098b8:	1a9b      	subs	r3, r3, r2
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	dd07      	ble.n	80098ce <sulp+0x2a>
 80098be:	2400      	movs	r4, #0
 80098c0:	4a03      	ldr	r2, [pc, #12]	; (80098d0 <sulp+0x2c>)
 80098c2:	051b      	lsls	r3, r3, #20
 80098c4:	189d      	adds	r5, r3, r2
 80098c6:	002b      	movs	r3, r5
 80098c8:	0022      	movs	r2, r4
 80098ca:	f7f8 fb5d 	bl	8001f88 <__aeabi_dmul>
 80098ce:	bd70      	pop	{r4, r5, r6, pc}
 80098d0:	3ff00000 	.word	0x3ff00000

080098d4 <_strtod_l>:
 80098d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80098d6:	001d      	movs	r5, r3
 80098d8:	2300      	movs	r3, #0
 80098da:	b0a5      	sub	sp, #148	; 0x94
 80098dc:	9320      	str	r3, [sp, #128]	; 0x80
 80098de:	4bac      	ldr	r3, [pc, #688]	; (8009b90 <_strtod_l+0x2bc>)
 80098e0:	9005      	str	r0, [sp, #20]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	9108      	str	r1, [sp, #32]
 80098e6:	0018      	movs	r0, r3
 80098e8:	9307      	str	r3, [sp, #28]
 80098ea:	921b      	str	r2, [sp, #108]	; 0x6c
 80098ec:	f7f6 fc12 	bl	8000114 <strlen>
 80098f0:	2600      	movs	r6, #0
 80098f2:	0004      	movs	r4, r0
 80098f4:	2700      	movs	r7, #0
 80098f6:	9b08      	ldr	r3, [sp, #32]
 80098f8:	931f      	str	r3, [sp, #124]	; 0x7c
 80098fa:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80098fc:	7813      	ldrb	r3, [r2, #0]
 80098fe:	2b2b      	cmp	r3, #43	; 0x2b
 8009900:	d058      	beq.n	80099b4 <_strtod_l+0xe0>
 8009902:	d844      	bhi.n	800998e <_strtod_l+0xba>
 8009904:	2b0d      	cmp	r3, #13
 8009906:	d83d      	bhi.n	8009984 <_strtod_l+0xb0>
 8009908:	2b08      	cmp	r3, #8
 800990a:	d83d      	bhi.n	8009988 <_strtod_l+0xb4>
 800990c:	2b00      	cmp	r3, #0
 800990e:	d047      	beq.n	80099a0 <_strtod_l+0xcc>
 8009910:	2300      	movs	r3, #0
 8009912:	930e      	str	r3, [sp, #56]	; 0x38
 8009914:	2200      	movs	r2, #0
 8009916:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009918:	920a      	str	r2, [sp, #40]	; 0x28
 800991a:	9306      	str	r3, [sp, #24]
 800991c:	781b      	ldrb	r3, [r3, #0]
 800991e:	2b30      	cmp	r3, #48	; 0x30
 8009920:	d000      	beq.n	8009924 <_strtod_l+0x50>
 8009922:	e07f      	b.n	8009a24 <_strtod_l+0x150>
 8009924:	9b06      	ldr	r3, [sp, #24]
 8009926:	3220      	adds	r2, #32
 8009928:	785b      	ldrb	r3, [r3, #1]
 800992a:	4393      	bics	r3, r2
 800992c:	2b58      	cmp	r3, #88	; 0x58
 800992e:	d000      	beq.n	8009932 <_strtod_l+0x5e>
 8009930:	e06e      	b.n	8009a10 <_strtod_l+0x13c>
 8009932:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009934:	9502      	str	r5, [sp, #8]
 8009936:	9301      	str	r3, [sp, #4]
 8009938:	ab20      	add	r3, sp, #128	; 0x80
 800993a:	9300      	str	r3, [sp, #0]
 800993c:	4a95      	ldr	r2, [pc, #596]	; (8009b94 <_strtod_l+0x2c0>)
 800993e:	ab21      	add	r3, sp, #132	; 0x84
 8009940:	9805      	ldr	r0, [sp, #20]
 8009942:	a91f      	add	r1, sp, #124	; 0x7c
 8009944:	f001 fdaa 	bl	800b49c <__gethex>
 8009948:	2307      	movs	r3, #7
 800994a:	0005      	movs	r5, r0
 800994c:	0004      	movs	r4, r0
 800994e:	401d      	ands	r5, r3
 8009950:	4218      	tst	r0, r3
 8009952:	d006      	beq.n	8009962 <_strtod_l+0x8e>
 8009954:	2d06      	cmp	r5, #6
 8009956:	d12f      	bne.n	80099b8 <_strtod_l+0xe4>
 8009958:	9b06      	ldr	r3, [sp, #24]
 800995a:	3301      	adds	r3, #1
 800995c:	931f      	str	r3, [sp, #124]	; 0x7c
 800995e:	2300      	movs	r3, #0
 8009960:	930e      	str	r3, [sp, #56]	; 0x38
 8009962:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009964:	2b00      	cmp	r3, #0
 8009966:	d002      	beq.n	800996e <_strtod_l+0x9a>
 8009968:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800996a:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800996c:	601a      	str	r2, [r3, #0]
 800996e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009970:	2b00      	cmp	r3, #0
 8009972:	d01c      	beq.n	80099ae <_strtod_l+0xda>
 8009974:	2380      	movs	r3, #128	; 0x80
 8009976:	0032      	movs	r2, r6
 8009978:	061b      	lsls	r3, r3, #24
 800997a:	18fb      	adds	r3, r7, r3
 800997c:	0010      	movs	r0, r2
 800997e:	0019      	movs	r1, r3
 8009980:	b025      	add	sp, #148	; 0x94
 8009982:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009984:	2b20      	cmp	r3, #32
 8009986:	d1c3      	bne.n	8009910 <_strtod_l+0x3c>
 8009988:	3201      	adds	r2, #1
 800998a:	921f      	str	r2, [sp, #124]	; 0x7c
 800998c:	e7b5      	b.n	80098fa <_strtod_l+0x26>
 800998e:	2b2d      	cmp	r3, #45	; 0x2d
 8009990:	d1be      	bne.n	8009910 <_strtod_l+0x3c>
 8009992:	3b2c      	subs	r3, #44	; 0x2c
 8009994:	930e      	str	r3, [sp, #56]	; 0x38
 8009996:	1c53      	adds	r3, r2, #1
 8009998:	931f      	str	r3, [sp, #124]	; 0x7c
 800999a:	7853      	ldrb	r3, [r2, #1]
 800999c:	2b00      	cmp	r3, #0
 800999e:	d1b9      	bne.n	8009914 <_strtod_l+0x40>
 80099a0:	9b08      	ldr	r3, [sp, #32]
 80099a2:	931f      	str	r3, [sp, #124]	; 0x7c
 80099a4:	2300      	movs	r3, #0
 80099a6:	930e      	str	r3, [sp, #56]	; 0x38
 80099a8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d1dc      	bne.n	8009968 <_strtod_l+0x94>
 80099ae:	0032      	movs	r2, r6
 80099b0:	003b      	movs	r3, r7
 80099b2:	e7e3      	b.n	800997c <_strtod_l+0xa8>
 80099b4:	2300      	movs	r3, #0
 80099b6:	e7ed      	b.n	8009994 <_strtod_l+0xc0>
 80099b8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80099ba:	2a00      	cmp	r2, #0
 80099bc:	d007      	beq.n	80099ce <_strtod_l+0xfa>
 80099be:	2135      	movs	r1, #53	; 0x35
 80099c0:	a822      	add	r0, sp, #136	; 0x88
 80099c2:	f002 fd40 	bl	800c446 <__copybits>
 80099c6:	9920      	ldr	r1, [sp, #128]	; 0x80
 80099c8:	9805      	ldr	r0, [sp, #20]
 80099ca:	f002 f8fb 	bl	800bbc4 <_Bfree>
 80099ce:	1e68      	subs	r0, r5, #1
 80099d0:	2804      	cmp	r0, #4
 80099d2:	d806      	bhi.n	80099e2 <_strtod_l+0x10e>
 80099d4:	f7f6 fba6 	bl	8000124 <__gnu_thumb1_case_uqi>
 80099d8:	1816030b 	.word	0x1816030b
 80099dc:	0b          	.byte	0x0b
 80099dd:	00          	.byte	0x00
 80099de:	9e22      	ldr	r6, [sp, #136]	; 0x88
 80099e0:	9f23      	ldr	r7, [sp, #140]	; 0x8c
 80099e2:	0723      	lsls	r3, r4, #28
 80099e4:	d5bd      	bpl.n	8009962 <_strtod_l+0x8e>
 80099e6:	2380      	movs	r3, #128	; 0x80
 80099e8:	061b      	lsls	r3, r3, #24
 80099ea:	431f      	orrs	r7, r3
 80099ec:	e7b9      	b.n	8009962 <_strtod_l+0x8e>
 80099ee:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80099f0:	4a69      	ldr	r2, [pc, #420]	; (8009b98 <_strtod_l+0x2c4>)
 80099f2:	496a      	ldr	r1, [pc, #424]	; (8009b9c <_strtod_l+0x2c8>)
 80099f4:	401a      	ands	r2, r3
 80099f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80099f8:	9e22      	ldr	r6, [sp, #136]	; 0x88
 80099fa:	185b      	adds	r3, r3, r1
 80099fc:	051b      	lsls	r3, r3, #20
 80099fe:	431a      	orrs	r2, r3
 8009a00:	0017      	movs	r7, r2
 8009a02:	e7ee      	b.n	80099e2 <_strtod_l+0x10e>
 8009a04:	4f66      	ldr	r7, [pc, #408]	; (8009ba0 <_strtod_l+0x2cc>)
 8009a06:	e7ec      	b.n	80099e2 <_strtod_l+0x10e>
 8009a08:	2601      	movs	r6, #1
 8009a0a:	4f66      	ldr	r7, [pc, #408]	; (8009ba4 <_strtod_l+0x2d0>)
 8009a0c:	4276      	negs	r6, r6
 8009a0e:	e7e8      	b.n	80099e2 <_strtod_l+0x10e>
 8009a10:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009a12:	1c5a      	adds	r2, r3, #1
 8009a14:	921f      	str	r2, [sp, #124]	; 0x7c
 8009a16:	785b      	ldrb	r3, [r3, #1]
 8009a18:	2b30      	cmp	r3, #48	; 0x30
 8009a1a:	d0f9      	beq.n	8009a10 <_strtod_l+0x13c>
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d0a0      	beq.n	8009962 <_strtod_l+0x8e>
 8009a20:	2301      	movs	r3, #1
 8009a22:	930a      	str	r3, [sp, #40]	; 0x28
 8009a24:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009a26:	220a      	movs	r2, #10
 8009a28:	9310      	str	r3, [sp, #64]	; 0x40
 8009a2a:	2300      	movs	r3, #0
 8009a2c:	930f      	str	r3, [sp, #60]	; 0x3c
 8009a2e:	930b      	str	r3, [sp, #44]	; 0x2c
 8009a30:	9309      	str	r3, [sp, #36]	; 0x24
 8009a32:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8009a34:	7805      	ldrb	r5, [r0, #0]
 8009a36:	002b      	movs	r3, r5
 8009a38:	3b30      	subs	r3, #48	; 0x30
 8009a3a:	b2d9      	uxtb	r1, r3
 8009a3c:	2909      	cmp	r1, #9
 8009a3e:	d927      	bls.n	8009a90 <_strtod_l+0x1bc>
 8009a40:	0022      	movs	r2, r4
 8009a42:	9907      	ldr	r1, [sp, #28]
 8009a44:	f003 fa64 	bl	800cf10 <strncmp>
 8009a48:	2800      	cmp	r0, #0
 8009a4a:	d033      	beq.n	8009ab4 <_strtod_l+0x1e0>
 8009a4c:	2000      	movs	r0, #0
 8009a4e:	002b      	movs	r3, r5
 8009a50:	4684      	mov	ip, r0
 8009a52:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009a54:	900c      	str	r0, [sp, #48]	; 0x30
 8009a56:	9206      	str	r2, [sp, #24]
 8009a58:	2220      	movs	r2, #32
 8009a5a:	0019      	movs	r1, r3
 8009a5c:	4391      	bics	r1, r2
 8009a5e:	000a      	movs	r2, r1
 8009a60:	2100      	movs	r1, #0
 8009a62:	9107      	str	r1, [sp, #28]
 8009a64:	2a45      	cmp	r2, #69	; 0x45
 8009a66:	d000      	beq.n	8009a6a <_strtod_l+0x196>
 8009a68:	e0c5      	b.n	8009bf6 <_strtod_l+0x322>
 8009a6a:	9b06      	ldr	r3, [sp, #24]
 8009a6c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009a6e:	4303      	orrs	r3, r0
 8009a70:	4313      	orrs	r3, r2
 8009a72:	428b      	cmp	r3, r1
 8009a74:	d094      	beq.n	80099a0 <_strtod_l+0xcc>
 8009a76:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009a78:	9308      	str	r3, [sp, #32]
 8009a7a:	3301      	adds	r3, #1
 8009a7c:	931f      	str	r3, [sp, #124]	; 0x7c
 8009a7e:	9b08      	ldr	r3, [sp, #32]
 8009a80:	785b      	ldrb	r3, [r3, #1]
 8009a82:	2b2b      	cmp	r3, #43	; 0x2b
 8009a84:	d076      	beq.n	8009b74 <_strtod_l+0x2a0>
 8009a86:	000c      	movs	r4, r1
 8009a88:	2b2d      	cmp	r3, #45	; 0x2d
 8009a8a:	d179      	bne.n	8009b80 <_strtod_l+0x2ac>
 8009a8c:	2401      	movs	r4, #1
 8009a8e:	e072      	b.n	8009b76 <_strtod_l+0x2a2>
 8009a90:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009a92:	2908      	cmp	r1, #8
 8009a94:	dc09      	bgt.n	8009aaa <_strtod_l+0x1d6>
 8009a96:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009a98:	4351      	muls	r1, r2
 8009a9a:	185b      	adds	r3, r3, r1
 8009a9c:	930b      	str	r3, [sp, #44]	; 0x2c
 8009a9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009aa0:	3001      	adds	r0, #1
 8009aa2:	3301      	adds	r3, #1
 8009aa4:	9309      	str	r3, [sp, #36]	; 0x24
 8009aa6:	901f      	str	r0, [sp, #124]	; 0x7c
 8009aa8:	e7c3      	b.n	8009a32 <_strtod_l+0x15e>
 8009aaa:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009aac:	4351      	muls	r1, r2
 8009aae:	185b      	adds	r3, r3, r1
 8009ab0:	930f      	str	r3, [sp, #60]	; 0x3c
 8009ab2:	e7f4      	b.n	8009a9e <_strtod_l+0x1ca>
 8009ab4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009ab6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009ab8:	191c      	adds	r4, r3, r4
 8009aba:	941f      	str	r4, [sp, #124]	; 0x7c
 8009abc:	7823      	ldrb	r3, [r4, #0]
 8009abe:	2a00      	cmp	r2, #0
 8009ac0:	d039      	beq.n	8009b36 <_strtod_l+0x262>
 8009ac2:	900c      	str	r0, [sp, #48]	; 0x30
 8009ac4:	9206      	str	r2, [sp, #24]
 8009ac6:	001a      	movs	r2, r3
 8009ac8:	3a30      	subs	r2, #48	; 0x30
 8009aca:	2a09      	cmp	r2, #9
 8009acc:	d912      	bls.n	8009af4 <_strtod_l+0x220>
 8009ace:	2201      	movs	r2, #1
 8009ad0:	4694      	mov	ip, r2
 8009ad2:	e7c1      	b.n	8009a58 <_strtod_l+0x184>
 8009ad4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009ad6:	3001      	adds	r0, #1
 8009ad8:	1c5a      	adds	r2, r3, #1
 8009ada:	921f      	str	r2, [sp, #124]	; 0x7c
 8009adc:	785b      	ldrb	r3, [r3, #1]
 8009ade:	2b30      	cmp	r3, #48	; 0x30
 8009ae0:	d0f8      	beq.n	8009ad4 <_strtod_l+0x200>
 8009ae2:	001a      	movs	r2, r3
 8009ae4:	3a31      	subs	r2, #49	; 0x31
 8009ae6:	2a08      	cmp	r2, #8
 8009ae8:	d83f      	bhi.n	8009b6a <_strtod_l+0x296>
 8009aea:	900c      	str	r0, [sp, #48]	; 0x30
 8009aec:	2000      	movs	r0, #0
 8009aee:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8009af0:	9006      	str	r0, [sp, #24]
 8009af2:	9210      	str	r2, [sp, #64]	; 0x40
 8009af4:	001a      	movs	r2, r3
 8009af6:	1c41      	adds	r1, r0, #1
 8009af8:	3a30      	subs	r2, #48	; 0x30
 8009afa:	2b30      	cmp	r3, #48	; 0x30
 8009afc:	d015      	beq.n	8009b2a <_strtod_l+0x256>
 8009afe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009b00:	185b      	adds	r3, r3, r1
 8009b02:	210a      	movs	r1, #10
 8009b04:	930c      	str	r3, [sp, #48]	; 0x30
 8009b06:	9b06      	ldr	r3, [sp, #24]
 8009b08:	18c4      	adds	r4, r0, r3
 8009b0a:	42a3      	cmp	r3, r4
 8009b0c:	d115      	bne.n	8009b3a <_strtod_l+0x266>
 8009b0e:	9906      	ldr	r1, [sp, #24]
 8009b10:	9b06      	ldr	r3, [sp, #24]
 8009b12:	3101      	adds	r1, #1
 8009b14:	1809      	adds	r1, r1, r0
 8009b16:	181b      	adds	r3, r3, r0
 8009b18:	9106      	str	r1, [sp, #24]
 8009b1a:	2b08      	cmp	r3, #8
 8009b1c:	dc1b      	bgt.n	8009b56 <_strtod_l+0x282>
 8009b1e:	230a      	movs	r3, #10
 8009b20:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009b22:	434b      	muls	r3, r1
 8009b24:	2100      	movs	r1, #0
 8009b26:	18d3      	adds	r3, r2, r3
 8009b28:	930b      	str	r3, [sp, #44]	; 0x2c
 8009b2a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009b2c:	0008      	movs	r0, r1
 8009b2e:	1c5a      	adds	r2, r3, #1
 8009b30:	921f      	str	r2, [sp, #124]	; 0x7c
 8009b32:	785b      	ldrb	r3, [r3, #1]
 8009b34:	e7c7      	b.n	8009ac6 <_strtod_l+0x1f2>
 8009b36:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009b38:	e7d1      	b.n	8009ade <_strtod_l+0x20a>
 8009b3a:	2b08      	cmp	r3, #8
 8009b3c:	dc04      	bgt.n	8009b48 <_strtod_l+0x274>
 8009b3e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8009b40:	434d      	muls	r5, r1
 8009b42:	950b      	str	r5, [sp, #44]	; 0x2c
 8009b44:	3301      	adds	r3, #1
 8009b46:	e7e0      	b.n	8009b0a <_strtod_l+0x236>
 8009b48:	1c5d      	adds	r5, r3, #1
 8009b4a:	2d10      	cmp	r5, #16
 8009b4c:	dcfa      	bgt.n	8009b44 <_strtod_l+0x270>
 8009b4e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009b50:	434d      	muls	r5, r1
 8009b52:	950f      	str	r5, [sp, #60]	; 0x3c
 8009b54:	e7f6      	b.n	8009b44 <_strtod_l+0x270>
 8009b56:	9b06      	ldr	r3, [sp, #24]
 8009b58:	2100      	movs	r1, #0
 8009b5a:	2b10      	cmp	r3, #16
 8009b5c:	dce5      	bgt.n	8009b2a <_strtod_l+0x256>
 8009b5e:	230a      	movs	r3, #10
 8009b60:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8009b62:	4343      	muls	r3, r0
 8009b64:	18d3      	adds	r3, r2, r3
 8009b66:	930f      	str	r3, [sp, #60]	; 0x3c
 8009b68:	e7df      	b.n	8009b2a <_strtod_l+0x256>
 8009b6a:	2200      	movs	r2, #0
 8009b6c:	920c      	str	r2, [sp, #48]	; 0x30
 8009b6e:	9206      	str	r2, [sp, #24]
 8009b70:	3201      	adds	r2, #1
 8009b72:	e7ad      	b.n	8009ad0 <_strtod_l+0x1fc>
 8009b74:	2400      	movs	r4, #0
 8009b76:	9b08      	ldr	r3, [sp, #32]
 8009b78:	3302      	adds	r3, #2
 8009b7a:	931f      	str	r3, [sp, #124]	; 0x7c
 8009b7c:	9b08      	ldr	r3, [sp, #32]
 8009b7e:	789b      	ldrb	r3, [r3, #2]
 8009b80:	001a      	movs	r2, r3
 8009b82:	3a30      	subs	r2, #48	; 0x30
 8009b84:	2a09      	cmp	r2, #9
 8009b86:	d913      	bls.n	8009bb0 <_strtod_l+0x2dc>
 8009b88:	9a08      	ldr	r2, [sp, #32]
 8009b8a:	921f      	str	r2, [sp, #124]	; 0x7c
 8009b8c:	2200      	movs	r2, #0
 8009b8e:	e031      	b.n	8009bf4 <_strtod_l+0x320>
 8009b90:	0800e270 	.word	0x0800e270
 8009b94:	0800e024 	.word	0x0800e024
 8009b98:	ffefffff 	.word	0xffefffff
 8009b9c:	00000433 	.word	0x00000433
 8009ba0:	7ff00000 	.word	0x7ff00000
 8009ba4:	7fffffff 	.word	0x7fffffff
 8009ba8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009baa:	1c5a      	adds	r2, r3, #1
 8009bac:	921f      	str	r2, [sp, #124]	; 0x7c
 8009bae:	785b      	ldrb	r3, [r3, #1]
 8009bb0:	2b30      	cmp	r3, #48	; 0x30
 8009bb2:	d0f9      	beq.n	8009ba8 <_strtod_l+0x2d4>
 8009bb4:	2200      	movs	r2, #0
 8009bb6:	9207      	str	r2, [sp, #28]
 8009bb8:	001a      	movs	r2, r3
 8009bba:	3a31      	subs	r2, #49	; 0x31
 8009bbc:	2a08      	cmp	r2, #8
 8009bbe:	d81a      	bhi.n	8009bf6 <_strtod_l+0x322>
 8009bc0:	3b30      	subs	r3, #48	; 0x30
 8009bc2:	001a      	movs	r2, r3
 8009bc4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009bc6:	9307      	str	r3, [sp, #28]
 8009bc8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009bca:	1c59      	adds	r1, r3, #1
 8009bcc:	911f      	str	r1, [sp, #124]	; 0x7c
 8009bce:	785b      	ldrb	r3, [r3, #1]
 8009bd0:	001d      	movs	r5, r3
 8009bd2:	3d30      	subs	r5, #48	; 0x30
 8009bd4:	2d09      	cmp	r5, #9
 8009bd6:	d939      	bls.n	8009c4c <_strtod_l+0x378>
 8009bd8:	9d07      	ldr	r5, [sp, #28]
 8009bda:	1b49      	subs	r1, r1, r5
 8009bdc:	4db0      	ldr	r5, [pc, #704]	; (8009ea0 <_strtod_l+0x5cc>)
 8009bde:	9507      	str	r5, [sp, #28]
 8009be0:	2908      	cmp	r1, #8
 8009be2:	dc03      	bgt.n	8009bec <_strtod_l+0x318>
 8009be4:	9207      	str	r2, [sp, #28]
 8009be6:	42aa      	cmp	r2, r5
 8009be8:	dd00      	ble.n	8009bec <_strtod_l+0x318>
 8009bea:	9507      	str	r5, [sp, #28]
 8009bec:	2c00      	cmp	r4, #0
 8009bee:	d002      	beq.n	8009bf6 <_strtod_l+0x322>
 8009bf0:	9a07      	ldr	r2, [sp, #28]
 8009bf2:	4252      	negs	r2, r2
 8009bf4:	9207      	str	r2, [sp, #28]
 8009bf6:	9a06      	ldr	r2, [sp, #24]
 8009bf8:	2a00      	cmp	r2, #0
 8009bfa:	d14b      	bne.n	8009c94 <_strtod_l+0x3c0>
 8009bfc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009bfe:	4310      	orrs	r0, r2
 8009c00:	d000      	beq.n	8009c04 <_strtod_l+0x330>
 8009c02:	e6ae      	b.n	8009962 <_strtod_l+0x8e>
 8009c04:	4662      	mov	r2, ip
 8009c06:	2a00      	cmp	r2, #0
 8009c08:	d000      	beq.n	8009c0c <_strtod_l+0x338>
 8009c0a:	e6c9      	b.n	80099a0 <_strtod_l+0xcc>
 8009c0c:	2b69      	cmp	r3, #105	; 0x69
 8009c0e:	d025      	beq.n	8009c5c <_strtod_l+0x388>
 8009c10:	dc21      	bgt.n	8009c56 <_strtod_l+0x382>
 8009c12:	2b49      	cmp	r3, #73	; 0x49
 8009c14:	d022      	beq.n	8009c5c <_strtod_l+0x388>
 8009c16:	2b4e      	cmp	r3, #78	; 0x4e
 8009c18:	d000      	beq.n	8009c1c <_strtod_l+0x348>
 8009c1a:	e6c1      	b.n	80099a0 <_strtod_l+0xcc>
 8009c1c:	49a1      	ldr	r1, [pc, #644]	; (8009ea4 <_strtod_l+0x5d0>)
 8009c1e:	a81f      	add	r0, sp, #124	; 0x7c
 8009c20:	f001 fe8a 	bl	800b938 <__match>
 8009c24:	2800      	cmp	r0, #0
 8009c26:	d100      	bne.n	8009c2a <_strtod_l+0x356>
 8009c28:	e6ba      	b.n	80099a0 <_strtod_l+0xcc>
 8009c2a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009c2c:	781b      	ldrb	r3, [r3, #0]
 8009c2e:	2b28      	cmp	r3, #40	; 0x28
 8009c30:	d12a      	bne.n	8009c88 <_strtod_l+0x3b4>
 8009c32:	499d      	ldr	r1, [pc, #628]	; (8009ea8 <_strtod_l+0x5d4>)
 8009c34:	aa22      	add	r2, sp, #136	; 0x88
 8009c36:	a81f      	add	r0, sp, #124	; 0x7c
 8009c38:	f001 fe92 	bl	800b960 <__hexnan>
 8009c3c:	2805      	cmp	r0, #5
 8009c3e:	d123      	bne.n	8009c88 <_strtod_l+0x3b4>
 8009c40:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009c42:	4a9a      	ldr	r2, [pc, #616]	; (8009eac <_strtod_l+0x5d8>)
 8009c44:	9e22      	ldr	r6, [sp, #136]	; 0x88
 8009c46:	431a      	orrs	r2, r3
 8009c48:	0017      	movs	r7, r2
 8009c4a:	e68a      	b.n	8009962 <_strtod_l+0x8e>
 8009c4c:	210a      	movs	r1, #10
 8009c4e:	434a      	muls	r2, r1
 8009c50:	18d2      	adds	r2, r2, r3
 8009c52:	3a30      	subs	r2, #48	; 0x30
 8009c54:	e7b8      	b.n	8009bc8 <_strtod_l+0x2f4>
 8009c56:	2b6e      	cmp	r3, #110	; 0x6e
 8009c58:	d0e0      	beq.n	8009c1c <_strtod_l+0x348>
 8009c5a:	e6a1      	b.n	80099a0 <_strtod_l+0xcc>
 8009c5c:	4994      	ldr	r1, [pc, #592]	; (8009eb0 <_strtod_l+0x5dc>)
 8009c5e:	a81f      	add	r0, sp, #124	; 0x7c
 8009c60:	f001 fe6a 	bl	800b938 <__match>
 8009c64:	2800      	cmp	r0, #0
 8009c66:	d100      	bne.n	8009c6a <_strtod_l+0x396>
 8009c68:	e69a      	b.n	80099a0 <_strtod_l+0xcc>
 8009c6a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009c6c:	4991      	ldr	r1, [pc, #580]	; (8009eb4 <_strtod_l+0x5e0>)
 8009c6e:	3b01      	subs	r3, #1
 8009c70:	a81f      	add	r0, sp, #124	; 0x7c
 8009c72:	931f      	str	r3, [sp, #124]	; 0x7c
 8009c74:	f001 fe60 	bl	800b938 <__match>
 8009c78:	2800      	cmp	r0, #0
 8009c7a:	d102      	bne.n	8009c82 <_strtod_l+0x3ae>
 8009c7c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009c7e:	3301      	adds	r3, #1
 8009c80:	931f      	str	r3, [sp, #124]	; 0x7c
 8009c82:	2600      	movs	r6, #0
 8009c84:	4f89      	ldr	r7, [pc, #548]	; (8009eac <_strtod_l+0x5d8>)
 8009c86:	e66c      	b.n	8009962 <_strtod_l+0x8e>
 8009c88:	488b      	ldr	r0, [pc, #556]	; (8009eb8 <_strtod_l+0x5e4>)
 8009c8a:	f003 f8ff 	bl	800ce8c <nan>
 8009c8e:	0006      	movs	r6, r0
 8009c90:	000f      	movs	r7, r1
 8009c92:	e666      	b.n	8009962 <_strtod_l+0x8e>
 8009c94:	9b07      	ldr	r3, [sp, #28]
 8009c96:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009c98:	1a9b      	subs	r3, r3, r2
 8009c9a:	930a      	str	r3, [sp, #40]	; 0x28
 8009c9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d101      	bne.n	8009ca6 <_strtod_l+0x3d2>
 8009ca2:	9b06      	ldr	r3, [sp, #24]
 8009ca4:	9309      	str	r3, [sp, #36]	; 0x24
 8009ca6:	9c06      	ldr	r4, [sp, #24]
 8009ca8:	2c10      	cmp	r4, #16
 8009caa:	dd00      	ble.n	8009cae <_strtod_l+0x3da>
 8009cac:	2410      	movs	r4, #16
 8009cae:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8009cb0:	f7f8 ffec 	bl	8002c8c <__aeabi_ui2d>
 8009cb4:	9b06      	ldr	r3, [sp, #24]
 8009cb6:	0006      	movs	r6, r0
 8009cb8:	000f      	movs	r7, r1
 8009cba:	2b09      	cmp	r3, #9
 8009cbc:	dd15      	ble.n	8009cea <_strtod_l+0x416>
 8009cbe:	0022      	movs	r2, r4
 8009cc0:	4b7e      	ldr	r3, [pc, #504]	; (8009ebc <_strtod_l+0x5e8>)
 8009cc2:	3a09      	subs	r2, #9
 8009cc4:	00d2      	lsls	r2, r2, #3
 8009cc6:	189b      	adds	r3, r3, r2
 8009cc8:	681a      	ldr	r2, [r3, #0]
 8009cca:	685b      	ldr	r3, [r3, #4]
 8009ccc:	f7f8 f95c 	bl	8001f88 <__aeabi_dmul>
 8009cd0:	0006      	movs	r6, r0
 8009cd2:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8009cd4:	000f      	movs	r7, r1
 8009cd6:	f7f8 ffd9 	bl	8002c8c <__aeabi_ui2d>
 8009cda:	0002      	movs	r2, r0
 8009cdc:	000b      	movs	r3, r1
 8009cde:	0030      	movs	r0, r6
 8009ce0:	0039      	movs	r1, r7
 8009ce2:	f7f7 fa13 	bl	800110c <__aeabi_dadd>
 8009ce6:	0006      	movs	r6, r0
 8009ce8:	000f      	movs	r7, r1
 8009cea:	9b06      	ldr	r3, [sp, #24]
 8009cec:	2b0f      	cmp	r3, #15
 8009cee:	dc39      	bgt.n	8009d64 <_strtod_l+0x490>
 8009cf0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d100      	bne.n	8009cf8 <_strtod_l+0x424>
 8009cf6:	e634      	b.n	8009962 <_strtod_l+0x8e>
 8009cf8:	dd24      	ble.n	8009d44 <_strtod_l+0x470>
 8009cfa:	2b16      	cmp	r3, #22
 8009cfc:	dc09      	bgt.n	8009d12 <_strtod_l+0x43e>
 8009cfe:	496f      	ldr	r1, [pc, #444]	; (8009ebc <_strtod_l+0x5e8>)
 8009d00:	00db      	lsls	r3, r3, #3
 8009d02:	18c9      	adds	r1, r1, r3
 8009d04:	0032      	movs	r2, r6
 8009d06:	6808      	ldr	r0, [r1, #0]
 8009d08:	6849      	ldr	r1, [r1, #4]
 8009d0a:	003b      	movs	r3, r7
 8009d0c:	f7f8 f93c 	bl	8001f88 <__aeabi_dmul>
 8009d10:	e7bd      	b.n	8009c8e <_strtod_l+0x3ba>
 8009d12:	2325      	movs	r3, #37	; 0x25
 8009d14:	9a06      	ldr	r2, [sp, #24]
 8009d16:	1a9b      	subs	r3, r3, r2
 8009d18:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009d1a:	4293      	cmp	r3, r2
 8009d1c:	db22      	blt.n	8009d64 <_strtod_l+0x490>
 8009d1e:	240f      	movs	r4, #15
 8009d20:	9b06      	ldr	r3, [sp, #24]
 8009d22:	4d66      	ldr	r5, [pc, #408]	; (8009ebc <_strtod_l+0x5e8>)
 8009d24:	1ae4      	subs	r4, r4, r3
 8009d26:	00e1      	lsls	r1, r4, #3
 8009d28:	1869      	adds	r1, r5, r1
 8009d2a:	0032      	movs	r2, r6
 8009d2c:	6808      	ldr	r0, [r1, #0]
 8009d2e:	6849      	ldr	r1, [r1, #4]
 8009d30:	003b      	movs	r3, r7
 8009d32:	f7f8 f929 	bl	8001f88 <__aeabi_dmul>
 8009d36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d38:	1b1c      	subs	r4, r3, r4
 8009d3a:	00e4      	lsls	r4, r4, #3
 8009d3c:	192c      	adds	r4, r5, r4
 8009d3e:	6822      	ldr	r2, [r4, #0]
 8009d40:	6863      	ldr	r3, [r4, #4]
 8009d42:	e7e3      	b.n	8009d0c <_strtod_l+0x438>
 8009d44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d46:	3316      	adds	r3, #22
 8009d48:	db0c      	blt.n	8009d64 <_strtod_l+0x490>
 8009d4a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009d4c:	9a07      	ldr	r2, [sp, #28]
 8009d4e:	0030      	movs	r0, r6
 8009d50:	1a9a      	subs	r2, r3, r2
 8009d52:	4b5a      	ldr	r3, [pc, #360]	; (8009ebc <_strtod_l+0x5e8>)
 8009d54:	00d2      	lsls	r2, r2, #3
 8009d56:	189b      	adds	r3, r3, r2
 8009d58:	0039      	movs	r1, r7
 8009d5a:	681a      	ldr	r2, [r3, #0]
 8009d5c:	685b      	ldr	r3, [r3, #4]
 8009d5e:	f7f7 fd11 	bl	8001784 <__aeabi_ddiv>
 8009d62:	e794      	b.n	8009c8e <_strtod_l+0x3ba>
 8009d64:	9b06      	ldr	r3, [sp, #24]
 8009d66:	1b1c      	subs	r4, r3, r4
 8009d68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d6a:	18e4      	adds	r4, r4, r3
 8009d6c:	2c00      	cmp	r4, #0
 8009d6e:	dd72      	ble.n	8009e56 <_strtod_l+0x582>
 8009d70:	230f      	movs	r3, #15
 8009d72:	0021      	movs	r1, r4
 8009d74:	4019      	ands	r1, r3
 8009d76:	421c      	tst	r4, r3
 8009d78:	d00a      	beq.n	8009d90 <_strtod_l+0x4bc>
 8009d7a:	00cb      	lsls	r3, r1, #3
 8009d7c:	494f      	ldr	r1, [pc, #316]	; (8009ebc <_strtod_l+0x5e8>)
 8009d7e:	0032      	movs	r2, r6
 8009d80:	18c9      	adds	r1, r1, r3
 8009d82:	6808      	ldr	r0, [r1, #0]
 8009d84:	6849      	ldr	r1, [r1, #4]
 8009d86:	003b      	movs	r3, r7
 8009d88:	f7f8 f8fe 	bl	8001f88 <__aeabi_dmul>
 8009d8c:	0006      	movs	r6, r0
 8009d8e:	000f      	movs	r7, r1
 8009d90:	230f      	movs	r3, #15
 8009d92:	439c      	bics	r4, r3
 8009d94:	d04a      	beq.n	8009e2c <_strtod_l+0x558>
 8009d96:	3326      	adds	r3, #38	; 0x26
 8009d98:	33ff      	adds	r3, #255	; 0xff
 8009d9a:	429c      	cmp	r4, r3
 8009d9c:	dd22      	ble.n	8009de4 <_strtod_l+0x510>
 8009d9e:	2300      	movs	r3, #0
 8009da0:	9306      	str	r3, [sp, #24]
 8009da2:	9307      	str	r3, [sp, #28]
 8009da4:	930b      	str	r3, [sp, #44]	; 0x2c
 8009da6:	9309      	str	r3, [sp, #36]	; 0x24
 8009da8:	2322      	movs	r3, #34	; 0x22
 8009daa:	2600      	movs	r6, #0
 8009dac:	9a05      	ldr	r2, [sp, #20]
 8009dae:	4f3f      	ldr	r7, [pc, #252]	; (8009eac <_strtod_l+0x5d8>)
 8009db0:	6013      	str	r3, [r2, #0]
 8009db2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009db4:	42b3      	cmp	r3, r6
 8009db6:	d100      	bne.n	8009dba <_strtod_l+0x4e6>
 8009db8:	e5d3      	b.n	8009962 <_strtod_l+0x8e>
 8009dba:	9920      	ldr	r1, [sp, #128]	; 0x80
 8009dbc:	9805      	ldr	r0, [sp, #20]
 8009dbe:	f001 ff01 	bl	800bbc4 <_Bfree>
 8009dc2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009dc4:	9805      	ldr	r0, [sp, #20]
 8009dc6:	f001 fefd 	bl	800bbc4 <_Bfree>
 8009dca:	9907      	ldr	r1, [sp, #28]
 8009dcc:	9805      	ldr	r0, [sp, #20]
 8009dce:	f001 fef9 	bl	800bbc4 <_Bfree>
 8009dd2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009dd4:	9805      	ldr	r0, [sp, #20]
 8009dd6:	f001 fef5 	bl	800bbc4 <_Bfree>
 8009dda:	9906      	ldr	r1, [sp, #24]
 8009ddc:	9805      	ldr	r0, [sp, #20]
 8009dde:	f001 fef1 	bl	800bbc4 <_Bfree>
 8009de2:	e5be      	b.n	8009962 <_strtod_l+0x8e>
 8009de4:	2300      	movs	r3, #0
 8009de6:	0030      	movs	r0, r6
 8009de8:	0039      	movs	r1, r7
 8009dea:	4d35      	ldr	r5, [pc, #212]	; (8009ec0 <_strtod_l+0x5ec>)
 8009dec:	1124      	asrs	r4, r4, #4
 8009dee:	9308      	str	r3, [sp, #32]
 8009df0:	2c01      	cmp	r4, #1
 8009df2:	dc1e      	bgt.n	8009e32 <_strtod_l+0x55e>
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d001      	beq.n	8009dfc <_strtod_l+0x528>
 8009df8:	0006      	movs	r6, r0
 8009dfa:	000f      	movs	r7, r1
 8009dfc:	4b31      	ldr	r3, [pc, #196]	; (8009ec4 <_strtod_l+0x5f0>)
 8009dfe:	0032      	movs	r2, r6
 8009e00:	18ff      	adds	r7, r7, r3
 8009e02:	9b08      	ldr	r3, [sp, #32]
 8009e04:	00dd      	lsls	r5, r3, #3
 8009e06:	4b2e      	ldr	r3, [pc, #184]	; (8009ec0 <_strtod_l+0x5ec>)
 8009e08:	195d      	adds	r5, r3, r5
 8009e0a:	6828      	ldr	r0, [r5, #0]
 8009e0c:	6869      	ldr	r1, [r5, #4]
 8009e0e:	003b      	movs	r3, r7
 8009e10:	f7f8 f8ba 	bl	8001f88 <__aeabi_dmul>
 8009e14:	4b25      	ldr	r3, [pc, #148]	; (8009eac <_strtod_l+0x5d8>)
 8009e16:	4a2c      	ldr	r2, [pc, #176]	; (8009ec8 <_strtod_l+0x5f4>)
 8009e18:	0006      	movs	r6, r0
 8009e1a:	400b      	ands	r3, r1
 8009e1c:	4293      	cmp	r3, r2
 8009e1e:	d8be      	bhi.n	8009d9e <_strtod_l+0x4ca>
 8009e20:	4a2a      	ldr	r2, [pc, #168]	; (8009ecc <_strtod_l+0x5f8>)
 8009e22:	4293      	cmp	r3, r2
 8009e24:	d913      	bls.n	8009e4e <_strtod_l+0x57a>
 8009e26:	2601      	movs	r6, #1
 8009e28:	4f29      	ldr	r7, [pc, #164]	; (8009ed0 <_strtod_l+0x5fc>)
 8009e2a:	4276      	negs	r6, r6
 8009e2c:	2300      	movs	r3, #0
 8009e2e:	9308      	str	r3, [sp, #32]
 8009e30:	e087      	b.n	8009f42 <_strtod_l+0x66e>
 8009e32:	2201      	movs	r2, #1
 8009e34:	4214      	tst	r4, r2
 8009e36:	d004      	beq.n	8009e42 <_strtod_l+0x56e>
 8009e38:	682a      	ldr	r2, [r5, #0]
 8009e3a:	686b      	ldr	r3, [r5, #4]
 8009e3c:	f7f8 f8a4 	bl	8001f88 <__aeabi_dmul>
 8009e40:	2301      	movs	r3, #1
 8009e42:	9a08      	ldr	r2, [sp, #32]
 8009e44:	1064      	asrs	r4, r4, #1
 8009e46:	3201      	adds	r2, #1
 8009e48:	9208      	str	r2, [sp, #32]
 8009e4a:	3508      	adds	r5, #8
 8009e4c:	e7d0      	b.n	8009df0 <_strtod_l+0x51c>
 8009e4e:	23d4      	movs	r3, #212	; 0xd4
 8009e50:	049b      	lsls	r3, r3, #18
 8009e52:	18cf      	adds	r7, r1, r3
 8009e54:	e7ea      	b.n	8009e2c <_strtod_l+0x558>
 8009e56:	2c00      	cmp	r4, #0
 8009e58:	d0e8      	beq.n	8009e2c <_strtod_l+0x558>
 8009e5a:	4264      	negs	r4, r4
 8009e5c:	220f      	movs	r2, #15
 8009e5e:	0023      	movs	r3, r4
 8009e60:	4013      	ands	r3, r2
 8009e62:	4214      	tst	r4, r2
 8009e64:	d00a      	beq.n	8009e7c <_strtod_l+0x5a8>
 8009e66:	00da      	lsls	r2, r3, #3
 8009e68:	4b14      	ldr	r3, [pc, #80]	; (8009ebc <_strtod_l+0x5e8>)
 8009e6a:	0030      	movs	r0, r6
 8009e6c:	189b      	adds	r3, r3, r2
 8009e6e:	0039      	movs	r1, r7
 8009e70:	681a      	ldr	r2, [r3, #0]
 8009e72:	685b      	ldr	r3, [r3, #4]
 8009e74:	f7f7 fc86 	bl	8001784 <__aeabi_ddiv>
 8009e78:	0006      	movs	r6, r0
 8009e7a:	000f      	movs	r7, r1
 8009e7c:	1124      	asrs	r4, r4, #4
 8009e7e:	d0d5      	beq.n	8009e2c <_strtod_l+0x558>
 8009e80:	2c1f      	cmp	r4, #31
 8009e82:	dd27      	ble.n	8009ed4 <_strtod_l+0x600>
 8009e84:	2300      	movs	r3, #0
 8009e86:	9306      	str	r3, [sp, #24]
 8009e88:	9307      	str	r3, [sp, #28]
 8009e8a:	930b      	str	r3, [sp, #44]	; 0x2c
 8009e8c:	9309      	str	r3, [sp, #36]	; 0x24
 8009e8e:	2322      	movs	r3, #34	; 0x22
 8009e90:	9a05      	ldr	r2, [sp, #20]
 8009e92:	2600      	movs	r6, #0
 8009e94:	6013      	str	r3, [r2, #0]
 8009e96:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009e98:	2700      	movs	r7, #0
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d18d      	bne.n	8009dba <_strtod_l+0x4e6>
 8009e9e:	e560      	b.n	8009962 <_strtod_l+0x8e>
 8009ea0:	00004e1f 	.word	0x00004e1f
 8009ea4:	0800dff9 	.word	0x0800dff9
 8009ea8:	0800e038 	.word	0x0800e038
 8009eac:	7ff00000 	.word	0x7ff00000
 8009eb0:	0800dff1 	.word	0x0800dff1
 8009eb4:	0800e17c 	.word	0x0800e17c
 8009eb8:	0800e443 	.word	0x0800e443
 8009ebc:	0800e308 	.word	0x0800e308
 8009ec0:	0800e2e0 	.word	0x0800e2e0
 8009ec4:	fcb00000 	.word	0xfcb00000
 8009ec8:	7ca00000 	.word	0x7ca00000
 8009ecc:	7c900000 	.word	0x7c900000
 8009ed0:	7fefffff 	.word	0x7fefffff
 8009ed4:	2310      	movs	r3, #16
 8009ed6:	0022      	movs	r2, r4
 8009ed8:	401a      	ands	r2, r3
 8009eda:	9208      	str	r2, [sp, #32]
 8009edc:	421c      	tst	r4, r3
 8009ede:	d001      	beq.n	8009ee4 <_strtod_l+0x610>
 8009ee0:	335a      	adds	r3, #90	; 0x5a
 8009ee2:	9308      	str	r3, [sp, #32]
 8009ee4:	0030      	movs	r0, r6
 8009ee6:	0039      	movs	r1, r7
 8009ee8:	2300      	movs	r3, #0
 8009eea:	4dc5      	ldr	r5, [pc, #788]	; (800a200 <_strtod_l+0x92c>)
 8009eec:	2201      	movs	r2, #1
 8009eee:	4214      	tst	r4, r2
 8009ef0:	d004      	beq.n	8009efc <_strtod_l+0x628>
 8009ef2:	682a      	ldr	r2, [r5, #0]
 8009ef4:	686b      	ldr	r3, [r5, #4]
 8009ef6:	f7f8 f847 	bl	8001f88 <__aeabi_dmul>
 8009efa:	2301      	movs	r3, #1
 8009efc:	1064      	asrs	r4, r4, #1
 8009efe:	3508      	adds	r5, #8
 8009f00:	2c00      	cmp	r4, #0
 8009f02:	d1f3      	bne.n	8009eec <_strtod_l+0x618>
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d001      	beq.n	8009f0c <_strtod_l+0x638>
 8009f08:	0006      	movs	r6, r0
 8009f0a:	000f      	movs	r7, r1
 8009f0c:	9b08      	ldr	r3, [sp, #32]
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d00f      	beq.n	8009f32 <_strtod_l+0x65e>
 8009f12:	236b      	movs	r3, #107	; 0x6b
 8009f14:	007a      	lsls	r2, r7, #1
 8009f16:	0d52      	lsrs	r2, r2, #21
 8009f18:	0039      	movs	r1, r7
 8009f1a:	1a9b      	subs	r3, r3, r2
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	dd08      	ble.n	8009f32 <_strtod_l+0x65e>
 8009f20:	2b1f      	cmp	r3, #31
 8009f22:	dc00      	bgt.n	8009f26 <_strtod_l+0x652>
 8009f24:	e124      	b.n	800a170 <_strtod_l+0x89c>
 8009f26:	2600      	movs	r6, #0
 8009f28:	2b34      	cmp	r3, #52	; 0x34
 8009f2a:	dc00      	bgt.n	8009f2e <_strtod_l+0x65a>
 8009f2c:	e119      	b.n	800a162 <_strtod_l+0x88e>
 8009f2e:	27dc      	movs	r7, #220	; 0xdc
 8009f30:	04bf      	lsls	r7, r7, #18
 8009f32:	2200      	movs	r2, #0
 8009f34:	2300      	movs	r3, #0
 8009f36:	0030      	movs	r0, r6
 8009f38:	0039      	movs	r1, r7
 8009f3a:	f7f6 fa8d 	bl	8000458 <__aeabi_dcmpeq>
 8009f3e:	2800      	cmp	r0, #0
 8009f40:	d1a0      	bne.n	8009e84 <_strtod_l+0x5b0>
 8009f42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009f44:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009f46:	9300      	str	r3, [sp, #0]
 8009f48:	9910      	ldr	r1, [sp, #64]	; 0x40
 8009f4a:	9b06      	ldr	r3, [sp, #24]
 8009f4c:	9805      	ldr	r0, [sp, #20]
 8009f4e:	f001 fea1 	bl	800bc94 <__s2b>
 8009f52:	900b      	str	r0, [sp, #44]	; 0x2c
 8009f54:	2800      	cmp	r0, #0
 8009f56:	d100      	bne.n	8009f5a <_strtod_l+0x686>
 8009f58:	e721      	b.n	8009d9e <_strtod_l+0x4ca>
 8009f5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f5c:	9907      	ldr	r1, [sp, #28]
 8009f5e:	17da      	asrs	r2, r3, #31
 8009f60:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009f62:	1a5b      	subs	r3, r3, r1
 8009f64:	401a      	ands	r2, r3
 8009f66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f68:	9215      	str	r2, [sp, #84]	; 0x54
 8009f6a:	43db      	mvns	r3, r3
 8009f6c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009f6e:	17db      	asrs	r3, r3, #31
 8009f70:	401a      	ands	r2, r3
 8009f72:	2300      	movs	r3, #0
 8009f74:	921a      	str	r2, [sp, #104]	; 0x68
 8009f76:	9306      	str	r3, [sp, #24]
 8009f78:	9307      	str	r3, [sp, #28]
 8009f7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009f7c:	9805      	ldr	r0, [sp, #20]
 8009f7e:	6859      	ldr	r1, [r3, #4]
 8009f80:	f001 fddc 	bl	800bb3c <_Balloc>
 8009f84:	9009      	str	r0, [sp, #36]	; 0x24
 8009f86:	2800      	cmp	r0, #0
 8009f88:	d100      	bne.n	8009f8c <_strtod_l+0x6b8>
 8009f8a:	e70d      	b.n	8009da8 <_strtod_l+0x4d4>
 8009f8c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009f8e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009f90:	691b      	ldr	r3, [r3, #16]
 8009f92:	310c      	adds	r1, #12
 8009f94:	1c9a      	adds	r2, r3, #2
 8009f96:	0092      	lsls	r2, r2, #2
 8009f98:	300c      	adds	r0, #12
 8009f9a:	930c      	str	r3, [sp, #48]	; 0x30
 8009f9c:	f7fe fc3c 	bl	8008818 <memcpy>
 8009fa0:	ab22      	add	r3, sp, #136	; 0x88
 8009fa2:	9301      	str	r3, [sp, #4]
 8009fa4:	ab21      	add	r3, sp, #132	; 0x84
 8009fa6:	9300      	str	r3, [sp, #0]
 8009fa8:	0032      	movs	r2, r6
 8009faa:	003b      	movs	r3, r7
 8009fac:	9805      	ldr	r0, [sp, #20]
 8009fae:	9612      	str	r6, [sp, #72]	; 0x48
 8009fb0:	9713      	str	r7, [sp, #76]	; 0x4c
 8009fb2:	f002 f9bb 	bl	800c32c <__d2b>
 8009fb6:	9020      	str	r0, [sp, #128]	; 0x80
 8009fb8:	2800      	cmp	r0, #0
 8009fba:	d100      	bne.n	8009fbe <_strtod_l+0x6ea>
 8009fbc:	e6f4      	b.n	8009da8 <_strtod_l+0x4d4>
 8009fbe:	2101      	movs	r1, #1
 8009fc0:	9805      	ldr	r0, [sp, #20]
 8009fc2:	f001 fefb 	bl	800bdbc <__i2b>
 8009fc6:	9007      	str	r0, [sp, #28]
 8009fc8:	2800      	cmp	r0, #0
 8009fca:	d100      	bne.n	8009fce <_strtod_l+0x6fa>
 8009fcc:	e6ec      	b.n	8009da8 <_strtod_l+0x4d4>
 8009fce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009fd0:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009fd2:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8009fd4:	1ad4      	subs	r4, r2, r3
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	db01      	blt.n	8009fde <_strtod_l+0x70a>
 8009fda:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 8009fdc:	195d      	adds	r5, r3, r5
 8009fde:	9908      	ldr	r1, [sp, #32]
 8009fe0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8009fe2:	1a5b      	subs	r3, r3, r1
 8009fe4:	2136      	movs	r1, #54	; 0x36
 8009fe6:	189b      	adds	r3, r3, r2
 8009fe8:	1a8a      	subs	r2, r1, r2
 8009fea:	4986      	ldr	r1, [pc, #536]	; (800a204 <_strtod_l+0x930>)
 8009fec:	2001      	movs	r0, #1
 8009fee:	468c      	mov	ip, r1
 8009ff0:	2100      	movs	r1, #0
 8009ff2:	3b01      	subs	r3, #1
 8009ff4:	9110      	str	r1, [sp, #64]	; 0x40
 8009ff6:	9014      	str	r0, [sp, #80]	; 0x50
 8009ff8:	4563      	cmp	r3, ip
 8009ffa:	da07      	bge.n	800a00c <_strtod_l+0x738>
 8009ffc:	4661      	mov	r1, ip
 8009ffe:	1ac9      	subs	r1, r1, r3
 800a000:	1a52      	subs	r2, r2, r1
 800a002:	291f      	cmp	r1, #31
 800a004:	dd00      	ble.n	800a008 <_strtod_l+0x734>
 800a006:	e0b8      	b.n	800a17a <_strtod_l+0x8a6>
 800a008:	4088      	lsls	r0, r1
 800a00a:	9014      	str	r0, [sp, #80]	; 0x50
 800a00c:	18ab      	adds	r3, r5, r2
 800a00e:	930c      	str	r3, [sp, #48]	; 0x30
 800a010:	18a4      	adds	r4, r4, r2
 800a012:	9b08      	ldr	r3, [sp, #32]
 800a014:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a016:	191c      	adds	r4, r3, r4
 800a018:	002b      	movs	r3, r5
 800a01a:	4295      	cmp	r5, r2
 800a01c:	dd00      	ble.n	800a020 <_strtod_l+0x74c>
 800a01e:	0013      	movs	r3, r2
 800a020:	42a3      	cmp	r3, r4
 800a022:	dd00      	ble.n	800a026 <_strtod_l+0x752>
 800a024:	0023      	movs	r3, r4
 800a026:	2b00      	cmp	r3, #0
 800a028:	dd04      	ble.n	800a034 <_strtod_l+0x760>
 800a02a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a02c:	1ae4      	subs	r4, r4, r3
 800a02e:	1ad2      	subs	r2, r2, r3
 800a030:	920c      	str	r2, [sp, #48]	; 0x30
 800a032:	1aed      	subs	r5, r5, r3
 800a034:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a036:	2b00      	cmp	r3, #0
 800a038:	dd17      	ble.n	800a06a <_strtod_l+0x796>
 800a03a:	001a      	movs	r2, r3
 800a03c:	9907      	ldr	r1, [sp, #28]
 800a03e:	9805      	ldr	r0, [sp, #20]
 800a040:	f001 ff82 	bl	800bf48 <__pow5mult>
 800a044:	9007      	str	r0, [sp, #28]
 800a046:	2800      	cmp	r0, #0
 800a048:	d100      	bne.n	800a04c <_strtod_l+0x778>
 800a04a:	e6ad      	b.n	8009da8 <_strtod_l+0x4d4>
 800a04c:	0001      	movs	r1, r0
 800a04e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a050:	9805      	ldr	r0, [sp, #20]
 800a052:	f001 fec9 	bl	800bde8 <__multiply>
 800a056:	900f      	str	r0, [sp, #60]	; 0x3c
 800a058:	2800      	cmp	r0, #0
 800a05a:	d100      	bne.n	800a05e <_strtod_l+0x78a>
 800a05c:	e6a4      	b.n	8009da8 <_strtod_l+0x4d4>
 800a05e:	9920      	ldr	r1, [sp, #128]	; 0x80
 800a060:	9805      	ldr	r0, [sp, #20]
 800a062:	f001 fdaf 	bl	800bbc4 <_Bfree>
 800a066:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a068:	9320      	str	r3, [sp, #128]	; 0x80
 800a06a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	dd00      	ble.n	800a072 <_strtod_l+0x79e>
 800a070:	e089      	b.n	800a186 <_strtod_l+0x8b2>
 800a072:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a074:	2b00      	cmp	r3, #0
 800a076:	dd08      	ble.n	800a08a <_strtod_l+0x7b6>
 800a078:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800a07a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a07c:	9805      	ldr	r0, [sp, #20]
 800a07e:	f001 ff63 	bl	800bf48 <__pow5mult>
 800a082:	9009      	str	r0, [sp, #36]	; 0x24
 800a084:	2800      	cmp	r0, #0
 800a086:	d100      	bne.n	800a08a <_strtod_l+0x7b6>
 800a088:	e68e      	b.n	8009da8 <_strtod_l+0x4d4>
 800a08a:	2c00      	cmp	r4, #0
 800a08c:	dd08      	ble.n	800a0a0 <_strtod_l+0x7cc>
 800a08e:	0022      	movs	r2, r4
 800a090:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a092:	9805      	ldr	r0, [sp, #20]
 800a094:	f001 ffb4 	bl	800c000 <__lshift>
 800a098:	9009      	str	r0, [sp, #36]	; 0x24
 800a09a:	2800      	cmp	r0, #0
 800a09c:	d100      	bne.n	800a0a0 <_strtod_l+0x7cc>
 800a09e:	e683      	b.n	8009da8 <_strtod_l+0x4d4>
 800a0a0:	2d00      	cmp	r5, #0
 800a0a2:	dd08      	ble.n	800a0b6 <_strtod_l+0x7e2>
 800a0a4:	002a      	movs	r2, r5
 800a0a6:	9907      	ldr	r1, [sp, #28]
 800a0a8:	9805      	ldr	r0, [sp, #20]
 800a0aa:	f001 ffa9 	bl	800c000 <__lshift>
 800a0ae:	9007      	str	r0, [sp, #28]
 800a0b0:	2800      	cmp	r0, #0
 800a0b2:	d100      	bne.n	800a0b6 <_strtod_l+0x7e2>
 800a0b4:	e678      	b.n	8009da8 <_strtod_l+0x4d4>
 800a0b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a0b8:	9920      	ldr	r1, [sp, #128]	; 0x80
 800a0ba:	9805      	ldr	r0, [sp, #20]
 800a0bc:	f002 f82a 	bl	800c114 <__mdiff>
 800a0c0:	9006      	str	r0, [sp, #24]
 800a0c2:	2800      	cmp	r0, #0
 800a0c4:	d100      	bne.n	800a0c8 <_strtod_l+0x7f4>
 800a0c6:	e66f      	b.n	8009da8 <_strtod_l+0x4d4>
 800a0c8:	2200      	movs	r2, #0
 800a0ca:	68c3      	ldr	r3, [r0, #12]
 800a0cc:	9907      	ldr	r1, [sp, #28]
 800a0ce:	60c2      	str	r2, [r0, #12]
 800a0d0:	930f      	str	r3, [sp, #60]	; 0x3c
 800a0d2:	f002 f803 	bl	800c0dc <__mcmp>
 800a0d6:	2800      	cmp	r0, #0
 800a0d8:	da5f      	bge.n	800a19a <_strtod_l+0x8c6>
 800a0da:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a0dc:	4333      	orrs	r3, r6
 800a0de:	d000      	beq.n	800a0e2 <_strtod_l+0x80e>
 800a0e0:	e08a      	b.n	800a1f8 <_strtod_l+0x924>
 800a0e2:	033b      	lsls	r3, r7, #12
 800a0e4:	d000      	beq.n	800a0e8 <_strtod_l+0x814>
 800a0e6:	e087      	b.n	800a1f8 <_strtod_l+0x924>
 800a0e8:	22d6      	movs	r2, #214	; 0xd6
 800a0ea:	4b47      	ldr	r3, [pc, #284]	; (800a208 <_strtod_l+0x934>)
 800a0ec:	04d2      	lsls	r2, r2, #19
 800a0ee:	403b      	ands	r3, r7
 800a0f0:	4293      	cmp	r3, r2
 800a0f2:	d800      	bhi.n	800a0f6 <_strtod_l+0x822>
 800a0f4:	e080      	b.n	800a1f8 <_strtod_l+0x924>
 800a0f6:	9b06      	ldr	r3, [sp, #24]
 800a0f8:	695b      	ldr	r3, [r3, #20]
 800a0fa:	930a      	str	r3, [sp, #40]	; 0x28
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d104      	bne.n	800a10a <_strtod_l+0x836>
 800a100:	9b06      	ldr	r3, [sp, #24]
 800a102:	691b      	ldr	r3, [r3, #16]
 800a104:	930a      	str	r3, [sp, #40]	; 0x28
 800a106:	2b01      	cmp	r3, #1
 800a108:	dd76      	ble.n	800a1f8 <_strtod_l+0x924>
 800a10a:	9906      	ldr	r1, [sp, #24]
 800a10c:	2201      	movs	r2, #1
 800a10e:	9805      	ldr	r0, [sp, #20]
 800a110:	f001 ff76 	bl	800c000 <__lshift>
 800a114:	9907      	ldr	r1, [sp, #28]
 800a116:	9006      	str	r0, [sp, #24]
 800a118:	f001 ffe0 	bl	800c0dc <__mcmp>
 800a11c:	2800      	cmp	r0, #0
 800a11e:	dd6b      	ble.n	800a1f8 <_strtod_l+0x924>
 800a120:	9908      	ldr	r1, [sp, #32]
 800a122:	003b      	movs	r3, r7
 800a124:	4a38      	ldr	r2, [pc, #224]	; (800a208 <_strtod_l+0x934>)
 800a126:	2900      	cmp	r1, #0
 800a128:	d100      	bne.n	800a12c <_strtod_l+0x858>
 800a12a:	e092      	b.n	800a252 <_strtod_l+0x97e>
 800a12c:	0011      	movs	r1, r2
 800a12e:	20d6      	movs	r0, #214	; 0xd6
 800a130:	4039      	ands	r1, r7
 800a132:	04c0      	lsls	r0, r0, #19
 800a134:	4281      	cmp	r1, r0
 800a136:	dd00      	ble.n	800a13a <_strtod_l+0x866>
 800a138:	e08b      	b.n	800a252 <_strtod_l+0x97e>
 800a13a:	23dc      	movs	r3, #220	; 0xdc
 800a13c:	049b      	lsls	r3, r3, #18
 800a13e:	4299      	cmp	r1, r3
 800a140:	dc00      	bgt.n	800a144 <_strtod_l+0x870>
 800a142:	e6a4      	b.n	8009e8e <_strtod_l+0x5ba>
 800a144:	0030      	movs	r0, r6
 800a146:	0039      	movs	r1, r7
 800a148:	2200      	movs	r2, #0
 800a14a:	4b30      	ldr	r3, [pc, #192]	; (800a20c <_strtod_l+0x938>)
 800a14c:	f7f7 ff1c 	bl	8001f88 <__aeabi_dmul>
 800a150:	0006      	movs	r6, r0
 800a152:	000f      	movs	r7, r1
 800a154:	4308      	orrs	r0, r1
 800a156:	d000      	beq.n	800a15a <_strtod_l+0x886>
 800a158:	e62f      	b.n	8009dba <_strtod_l+0x4e6>
 800a15a:	2322      	movs	r3, #34	; 0x22
 800a15c:	9a05      	ldr	r2, [sp, #20]
 800a15e:	6013      	str	r3, [r2, #0]
 800a160:	e62b      	b.n	8009dba <_strtod_l+0x4e6>
 800a162:	234b      	movs	r3, #75	; 0x4b
 800a164:	1a9a      	subs	r2, r3, r2
 800a166:	3b4c      	subs	r3, #76	; 0x4c
 800a168:	4093      	lsls	r3, r2
 800a16a:	4019      	ands	r1, r3
 800a16c:	000f      	movs	r7, r1
 800a16e:	e6e0      	b.n	8009f32 <_strtod_l+0x65e>
 800a170:	2201      	movs	r2, #1
 800a172:	4252      	negs	r2, r2
 800a174:	409a      	lsls	r2, r3
 800a176:	4016      	ands	r6, r2
 800a178:	e6db      	b.n	8009f32 <_strtod_l+0x65e>
 800a17a:	4925      	ldr	r1, [pc, #148]	; (800a210 <_strtod_l+0x93c>)
 800a17c:	1acb      	subs	r3, r1, r3
 800a17e:	0001      	movs	r1, r0
 800a180:	4099      	lsls	r1, r3
 800a182:	9110      	str	r1, [sp, #64]	; 0x40
 800a184:	e741      	b.n	800a00a <_strtod_l+0x736>
 800a186:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a188:	9920      	ldr	r1, [sp, #128]	; 0x80
 800a18a:	9805      	ldr	r0, [sp, #20]
 800a18c:	f001 ff38 	bl	800c000 <__lshift>
 800a190:	9020      	str	r0, [sp, #128]	; 0x80
 800a192:	2800      	cmp	r0, #0
 800a194:	d000      	beq.n	800a198 <_strtod_l+0x8c4>
 800a196:	e76c      	b.n	800a072 <_strtod_l+0x79e>
 800a198:	e606      	b.n	8009da8 <_strtod_l+0x4d4>
 800a19a:	970c      	str	r7, [sp, #48]	; 0x30
 800a19c:	2800      	cmp	r0, #0
 800a19e:	d176      	bne.n	800a28e <_strtod_l+0x9ba>
 800a1a0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a1a2:	033b      	lsls	r3, r7, #12
 800a1a4:	0b1b      	lsrs	r3, r3, #12
 800a1a6:	2a00      	cmp	r2, #0
 800a1a8:	d038      	beq.n	800a21c <_strtod_l+0x948>
 800a1aa:	4a1a      	ldr	r2, [pc, #104]	; (800a214 <_strtod_l+0x940>)
 800a1ac:	4293      	cmp	r3, r2
 800a1ae:	d138      	bne.n	800a222 <_strtod_l+0x94e>
 800a1b0:	2201      	movs	r2, #1
 800a1b2:	9b08      	ldr	r3, [sp, #32]
 800a1b4:	4252      	negs	r2, r2
 800a1b6:	0031      	movs	r1, r6
 800a1b8:	0010      	movs	r0, r2
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d00b      	beq.n	800a1d6 <_strtod_l+0x902>
 800a1be:	24d4      	movs	r4, #212	; 0xd4
 800a1c0:	4b11      	ldr	r3, [pc, #68]	; (800a208 <_strtod_l+0x934>)
 800a1c2:	0010      	movs	r0, r2
 800a1c4:	403b      	ands	r3, r7
 800a1c6:	04e4      	lsls	r4, r4, #19
 800a1c8:	42a3      	cmp	r3, r4
 800a1ca:	d804      	bhi.n	800a1d6 <_strtod_l+0x902>
 800a1cc:	306c      	adds	r0, #108	; 0x6c
 800a1ce:	0d1b      	lsrs	r3, r3, #20
 800a1d0:	1ac3      	subs	r3, r0, r3
 800a1d2:	409a      	lsls	r2, r3
 800a1d4:	0010      	movs	r0, r2
 800a1d6:	4281      	cmp	r1, r0
 800a1d8:	d123      	bne.n	800a222 <_strtod_l+0x94e>
 800a1da:	4b0f      	ldr	r3, [pc, #60]	; (800a218 <_strtod_l+0x944>)
 800a1dc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a1de:	429a      	cmp	r2, r3
 800a1e0:	d102      	bne.n	800a1e8 <_strtod_l+0x914>
 800a1e2:	1c4b      	adds	r3, r1, #1
 800a1e4:	d100      	bne.n	800a1e8 <_strtod_l+0x914>
 800a1e6:	e5df      	b.n	8009da8 <_strtod_l+0x4d4>
 800a1e8:	4b07      	ldr	r3, [pc, #28]	; (800a208 <_strtod_l+0x934>)
 800a1ea:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a1ec:	2600      	movs	r6, #0
 800a1ee:	401a      	ands	r2, r3
 800a1f0:	0013      	movs	r3, r2
 800a1f2:	2280      	movs	r2, #128	; 0x80
 800a1f4:	0352      	lsls	r2, r2, #13
 800a1f6:	189f      	adds	r7, r3, r2
 800a1f8:	9b08      	ldr	r3, [sp, #32]
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d1a2      	bne.n	800a144 <_strtod_l+0x870>
 800a1fe:	e5dc      	b.n	8009dba <_strtod_l+0x4e6>
 800a200:	0800e050 	.word	0x0800e050
 800a204:	fffffc02 	.word	0xfffffc02
 800a208:	7ff00000 	.word	0x7ff00000
 800a20c:	39500000 	.word	0x39500000
 800a210:	fffffbe2 	.word	0xfffffbe2
 800a214:	000fffff 	.word	0x000fffff
 800a218:	7fefffff 	.word	0x7fefffff
 800a21c:	4333      	orrs	r3, r6
 800a21e:	d100      	bne.n	800a222 <_strtod_l+0x94e>
 800a220:	e77e      	b.n	800a120 <_strtod_l+0x84c>
 800a222:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a224:	2b00      	cmp	r3, #0
 800a226:	d01d      	beq.n	800a264 <_strtod_l+0x990>
 800a228:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a22a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a22c:	4213      	tst	r3, r2
 800a22e:	d0e3      	beq.n	800a1f8 <_strtod_l+0x924>
 800a230:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a232:	0030      	movs	r0, r6
 800a234:	0039      	movs	r1, r7
 800a236:	9a08      	ldr	r2, [sp, #32]
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d017      	beq.n	800a26c <_strtod_l+0x998>
 800a23c:	f7ff fb32 	bl	80098a4 <sulp>
 800a240:	0002      	movs	r2, r0
 800a242:	000b      	movs	r3, r1
 800a244:	9812      	ldr	r0, [sp, #72]	; 0x48
 800a246:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800a248:	f7f6 ff60 	bl	800110c <__aeabi_dadd>
 800a24c:	0006      	movs	r6, r0
 800a24e:	000f      	movs	r7, r1
 800a250:	e7d2      	b.n	800a1f8 <_strtod_l+0x924>
 800a252:	2601      	movs	r6, #1
 800a254:	4013      	ands	r3, r2
 800a256:	4a99      	ldr	r2, [pc, #612]	; (800a4bc <_strtod_l+0xbe8>)
 800a258:	4276      	negs	r6, r6
 800a25a:	189b      	adds	r3, r3, r2
 800a25c:	4a98      	ldr	r2, [pc, #608]	; (800a4c0 <_strtod_l+0xbec>)
 800a25e:	431a      	orrs	r2, r3
 800a260:	0017      	movs	r7, r2
 800a262:	e7c9      	b.n	800a1f8 <_strtod_l+0x924>
 800a264:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a266:	4233      	tst	r3, r6
 800a268:	d0c6      	beq.n	800a1f8 <_strtod_l+0x924>
 800a26a:	e7e1      	b.n	800a230 <_strtod_l+0x95c>
 800a26c:	f7ff fb1a 	bl	80098a4 <sulp>
 800a270:	0002      	movs	r2, r0
 800a272:	000b      	movs	r3, r1
 800a274:	9812      	ldr	r0, [sp, #72]	; 0x48
 800a276:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800a278:	f7f8 f8f2 	bl	8002460 <__aeabi_dsub>
 800a27c:	2200      	movs	r2, #0
 800a27e:	2300      	movs	r3, #0
 800a280:	0006      	movs	r6, r0
 800a282:	000f      	movs	r7, r1
 800a284:	f7f6 f8e8 	bl	8000458 <__aeabi_dcmpeq>
 800a288:	2800      	cmp	r0, #0
 800a28a:	d0b5      	beq.n	800a1f8 <_strtod_l+0x924>
 800a28c:	e5ff      	b.n	8009e8e <_strtod_l+0x5ba>
 800a28e:	9907      	ldr	r1, [sp, #28]
 800a290:	9806      	ldr	r0, [sp, #24]
 800a292:	f002 f8af 	bl	800c3f4 <__ratio>
 800a296:	2380      	movs	r3, #128	; 0x80
 800a298:	2200      	movs	r2, #0
 800a29a:	05db      	lsls	r3, r3, #23
 800a29c:	0004      	movs	r4, r0
 800a29e:	000d      	movs	r5, r1
 800a2a0:	f7f6 f8ea 	bl	8000478 <__aeabi_dcmple>
 800a2a4:	2800      	cmp	r0, #0
 800a2a6:	d075      	beq.n	800a394 <_strtod_l+0xac0>
 800a2a8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d047      	beq.n	800a33e <_strtod_l+0xa6a>
 800a2ae:	2300      	movs	r3, #0
 800a2b0:	4c84      	ldr	r4, [pc, #528]	; (800a4c4 <_strtod_l+0xbf0>)
 800a2b2:	2500      	movs	r5, #0
 800a2b4:	9310      	str	r3, [sp, #64]	; 0x40
 800a2b6:	9411      	str	r4, [sp, #68]	; 0x44
 800a2b8:	4c82      	ldr	r4, [pc, #520]	; (800a4c4 <_strtod_l+0xbf0>)
 800a2ba:	4a83      	ldr	r2, [pc, #524]	; (800a4c8 <_strtod_l+0xbf4>)
 800a2bc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a2be:	4013      	ands	r3, r2
 800a2c0:	9314      	str	r3, [sp, #80]	; 0x50
 800a2c2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a2c4:	4b81      	ldr	r3, [pc, #516]	; (800a4cc <_strtod_l+0xbf8>)
 800a2c6:	429a      	cmp	r2, r3
 800a2c8:	d000      	beq.n	800a2cc <_strtod_l+0x9f8>
 800a2ca:	e0ac      	b.n	800a426 <_strtod_l+0xb52>
 800a2cc:	4a80      	ldr	r2, [pc, #512]	; (800a4d0 <_strtod_l+0xbfc>)
 800a2ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a2d0:	4694      	mov	ip, r2
 800a2d2:	4463      	add	r3, ip
 800a2d4:	001f      	movs	r7, r3
 800a2d6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a2d8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a2da:	0030      	movs	r0, r6
 800a2dc:	0039      	movs	r1, r7
 800a2de:	920c      	str	r2, [sp, #48]	; 0x30
 800a2e0:	930d      	str	r3, [sp, #52]	; 0x34
 800a2e2:	f001 ffaf 	bl	800c244 <__ulp>
 800a2e6:	0002      	movs	r2, r0
 800a2e8:	000b      	movs	r3, r1
 800a2ea:	980c      	ldr	r0, [sp, #48]	; 0x30
 800a2ec:	990d      	ldr	r1, [sp, #52]	; 0x34
 800a2ee:	f7f7 fe4b 	bl	8001f88 <__aeabi_dmul>
 800a2f2:	0032      	movs	r2, r6
 800a2f4:	003b      	movs	r3, r7
 800a2f6:	f7f6 ff09 	bl	800110c <__aeabi_dadd>
 800a2fa:	4a73      	ldr	r2, [pc, #460]	; (800a4c8 <_strtod_l+0xbf4>)
 800a2fc:	4b75      	ldr	r3, [pc, #468]	; (800a4d4 <_strtod_l+0xc00>)
 800a2fe:	0006      	movs	r6, r0
 800a300:	400a      	ands	r2, r1
 800a302:	429a      	cmp	r2, r3
 800a304:	d95e      	bls.n	800a3c4 <_strtod_l+0xaf0>
 800a306:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a308:	4b73      	ldr	r3, [pc, #460]	; (800a4d8 <_strtod_l+0xc04>)
 800a30a:	429a      	cmp	r2, r3
 800a30c:	d103      	bne.n	800a316 <_strtod_l+0xa42>
 800a30e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a310:	3301      	adds	r3, #1
 800a312:	d100      	bne.n	800a316 <_strtod_l+0xa42>
 800a314:	e548      	b.n	8009da8 <_strtod_l+0x4d4>
 800a316:	2601      	movs	r6, #1
 800a318:	4f6f      	ldr	r7, [pc, #444]	; (800a4d8 <_strtod_l+0xc04>)
 800a31a:	4276      	negs	r6, r6
 800a31c:	9920      	ldr	r1, [sp, #128]	; 0x80
 800a31e:	9805      	ldr	r0, [sp, #20]
 800a320:	f001 fc50 	bl	800bbc4 <_Bfree>
 800a324:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a326:	9805      	ldr	r0, [sp, #20]
 800a328:	f001 fc4c 	bl	800bbc4 <_Bfree>
 800a32c:	9907      	ldr	r1, [sp, #28]
 800a32e:	9805      	ldr	r0, [sp, #20]
 800a330:	f001 fc48 	bl	800bbc4 <_Bfree>
 800a334:	9906      	ldr	r1, [sp, #24]
 800a336:	9805      	ldr	r0, [sp, #20]
 800a338:	f001 fc44 	bl	800bbc4 <_Bfree>
 800a33c:	e61d      	b.n	8009f7a <_strtod_l+0x6a6>
 800a33e:	2e00      	cmp	r6, #0
 800a340:	d11c      	bne.n	800a37c <_strtod_l+0xaa8>
 800a342:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a344:	031b      	lsls	r3, r3, #12
 800a346:	d11f      	bne.n	800a388 <_strtod_l+0xab4>
 800a348:	2200      	movs	r2, #0
 800a34a:	0020      	movs	r0, r4
 800a34c:	0029      	movs	r1, r5
 800a34e:	4b5d      	ldr	r3, [pc, #372]	; (800a4c4 <_strtod_l+0xbf0>)
 800a350:	f7f6 f888 	bl	8000464 <__aeabi_dcmplt>
 800a354:	2800      	cmp	r0, #0
 800a356:	d11a      	bne.n	800a38e <_strtod_l+0xaba>
 800a358:	0020      	movs	r0, r4
 800a35a:	0029      	movs	r1, r5
 800a35c:	2200      	movs	r2, #0
 800a35e:	4b5f      	ldr	r3, [pc, #380]	; (800a4dc <_strtod_l+0xc08>)
 800a360:	f7f7 fe12 	bl	8001f88 <__aeabi_dmul>
 800a364:	0005      	movs	r5, r0
 800a366:	000c      	movs	r4, r1
 800a368:	2380      	movs	r3, #128	; 0x80
 800a36a:	061b      	lsls	r3, r3, #24
 800a36c:	18e3      	adds	r3, r4, r3
 800a36e:	951c      	str	r5, [sp, #112]	; 0x70
 800a370:	931d      	str	r3, [sp, #116]	; 0x74
 800a372:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800a374:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a376:	9210      	str	r2, [sp, #64]	; 0x40
 800a378:	9311      	str	r3, [sp, #68]	; 0x44
 800a37a:	e79e      	b.n	800a2ba <_strtod_l+0x9e6>
 800a37c:	2e01      	cmp	r6, #1
 800a37e:	d103      	bne.n	800a388 <_strtod_l+0xab4>
 800a380:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a382:	2b00      	cmp	r3, #0
 800a384:	d100      	bne.n	800a388 <_strtod_l+0xab4>
 800a386:	e582      	b.n	8009e8e <_strtod_l+0x5ba>
 800a388:	2300      	movs	r3, #0
 800a38a:	4c55      	ldr	r4, [pc, #340]	; (800a4e0 <_strtod_l+0xc0c>)
 800a38c:	e791      	b.n	800a2b2 <_strtod_l+0x9de>
 800a38e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a390:	4c52      	ldr	r4, [pc, #328]	; (800a4dc <_strtod_l+0xc08>)
 800a392:	e7e9      	b.n	800a368 <_strtod_l+0xa94>
 800a394:	2200      	movs	r2, #0
 800a396:	0020      	movs	r0, r4
 800a398:	0029      	movs	r1, r5
 800a39a:	4b50      	ldr	r3, [pc, #320]	; (800a4dc <_strtod_l+0xc08>)
 800a39c:	f7f7 fdf4 	bl	8001f88 <__aeabi_dmul>
 800a3a0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a3a2:	0005      	movs	r5, r0
 800a3a4:	000b      	movs	r3, r1
 800a3a6:	000c      	movs	r4, r1
 800a3a8:	2a00      	cmp	r2, #0
 800a3aa:	d107      	bne.n	800a3bc <_strtod_l+0xae8>
 800a3ac:	2280      	movs	r2, #128	; 0x80
 800a3ae:	0612      	lsls	r2, r2, #24
 800a3b0:	188b      	adds	r3, r1, r2
 800a3b2:	9016      	str	r0, [sp, #88]	; 0x58
 800a3b4:	9317      	str	r3, [sp, #92]	; 0x5c
 800a3b6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a3b8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a3ba:	e7dc      	b.n	800a376 <_strtod_l+0xaa2>
 800a3bc:	0002      	movs	r2, r0
 800a3be:	9216      	str	r2, [sp, #88]	; 0x58
 800a3c0:	9317      	str	r3, [sp, #92]	; 0x5c
 800a3c2:	e7f8      	b.n	800a3b6 <_strtod_l+0xae2>
 800a3c4:	23d4      	movs	r3, #212	; 0xd4
 800a3c6:	049b      	lsls	r3, r3, #18
 800a3c8:	18cf      	adds	r7, r1, r3
 800a3ca:	9b08      	ldr	r3, [sp, #32]
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d1a5      	bne.n	800a31c <_strtod_l+0xa48>
 800a3d0:	4b3d      	ldr	r3, [pc, #244]	; (800a4c8 <_strtod_l+0xbf4>)
 800a3d2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a3d4:	403b      	ands	r3, r7
 800a3d6:	429a      	cmp	r2, r3
 800a3d8:	d1a0      	bne.n	800a31c <_strtod_l+0xa48>
 800a3da:	0028      	movs	r0, r5
 800a3dc:	0021      	movs	r1, r4
 800a3de:	f7f6 f8c1 	bl	8000564 <__aeabi_d2lz>
 800a3e2:	f7f6 f8fb 	bl	80005dc <__aeabi_l2d>
 800a3e6:	0002      	movs	r2, r0
 800a3e8:	000b      	movs	r3, r1
 800a3ea:	0028      	movs	r0, r5
 800a3ec:	0021      	movs	r1, r4
 800a3ee:	f7f8 f837 	bl	8002460 <__aeabi_dsub>
 800a3f2:	033b      	lsls	r3, r7, #12
 800a3f4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a3f6:	0b1b      	lsrs	r3, r3, #12
 800a3f8:	4333      	orrs	r3, r6
 800a3fa:	4313      	orrs	r3, r2
 800a3fc:	0004      	movs	r4, r0
 800a3fe:	000d      	movs	r5, r1
 800a400:	4a38      	ldr	r2, [pc, #224]	; (800a4e4 <_strtod_l+0xc10>)
 800a402:	2b00      	cmp	r3, #0
 800a404:	d055      	beq.n	800a4b2 <_strtod_l+0xbde>
 800a406:	4b38      	ldr	r3, [pc, #224]	; (800a4e8 <_strtod_l+0xc14>)
 800a408:	f7f6 f82c 	bl	8000464 <__aeabi_dcmplt>
 800a40c:	2800      	cmp	r0, #0
 800a40e:	d000      	beq.n	800a412 <_strtod_l+0xb3e>
 800a410:	e4d3      	b.n	8009dba <_strtod_l+0x4e6>
 800a412:	0020      	movs	r0, r4
 800a414:	0029      	movs	r1, r5
 800a416:	4a35      	ldr	r2, [pc, #212]	; (800a4ec <_strtod_l+0xc18>)
 800a418:	4b30      	ldr	r3, [pc, #192]	; (800a4dc <_strtod_l+0xc08>)
 800a41a:	f7f6 f837 	bl	800048c <__aeabi_dcmpgt>
 800a41e:	2800      	cmp	r0, #0
 800a420:	d100      	bne.n	800a424 <_strtod_l+0xb50>
 800a422:	e77b      	b.n	800a31c <_strtod_l+0xa48>
 800a424:	e4c9      	b.n	8009dba <_strtod_l+0x4e6>
 800a426:	9b08      	ldr	r3, [sp, #32]
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d02b      	beq.n	800a484 <_strtod_l+0xbb0>
 800a42c:	23d4      	movs	r3, #212	; 0xd4
 800a42e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a430:	04db      	lsls	r3, r3, #19
 800a432:	429a      	cmp	r2, r3
 800a434:	d826      	bhi.n	800a484 <_strtod_l+0xbb0>
 800a436:	0028      	movs	r0, r5
 800a438:	0021      	movs	r1, r4
 800a43a:	4a2d      	ldr	r2, [pc, #180]	; (800a4f0 <_strtod_l+0xc1c>)
 800a43c:	4b2d      	ldr	r3, [pc, #180]	; (800a4f4 <_strtod_l+0xc20>)
 800a43e:	f7f6 f81b 	bl	8000478 <__aeabi_dcmple>
 800a442:	2800      	cmp	r0, #0
 800a444:	d017      	beq.n	800a476 <_strtod_l+0xba2>
 800a446:	0028      	movs	r0, r5
 800a448:	0021      	movs	r1, r4
 800a44a:	f7f6 f86d 	bl	8000528 <__aeabi_d2uiz>
 800a44e:	2800      	cmp	r0, #0
 800a450:	d100      	bne.n	800a454 <_strtod_l+0xb80>
 800a452:	3001      	adds	r0, #1
 800a454:	f7f8 fc1a 	bl	8002c8c <__aeabi_ui2d>
 800a458:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a45a:	0005      	movs	r5, r0
 800a45c:	000b      	movs	r3, r1
 800a45e:	000c      	movs	r4, r1
 800a460:	2a00      	cmp	r2, #0
 800a462:	d122      	bne.n	800a4aa <_strtod_l+0xbd6>
 800a464:	2280      	movs	r2, #128	; 0x80
 800a466:	0612      	lsls	r2, r2, #24
 800a468:	188b      	adds	r3, r1, r2
 800a46a:	9018      	str	r0, [sp, #96]	; 0x60
 800a46c:	9319      	str	r3, [sp, #100]	; 0x64
 800a46e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a470:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a472:	9210      	str	r2, [sp, #64]	; 0x40
 800a474:	9311      	str	r3, [sp, #68]	; 0x44
 800a476:	22d6      	movs	r2, #214	; 0xd6
 800a478:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a47a:	04d2      	lsls	r2, r2, #19
 800a47c:	189b      	adds	r3, r3, r2
 800a47e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a480:	1a9b      	subs	r3, r3, r2
 800a482:	9311      	str	r3, [sp, #68]	; 0x44
 800a484:	9812      	ldr	r0, [sp, #72]	; 0x48
 800a486:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800a488:	9e10      	ldr	r6, [sp, #64]	; 0x40
 800a48a:	9f11      	ldr	r7, [sp, #68]	; 0x44
 800a48c:	f001 feda 	bl	800c244 <__ulp>
 800a490:	0002      	movs	r2, r0
 800a492:	000b      	movs	r3, r1
 800a494:	0030      	movs	r0, r6
 800a496:	0039      	movs	r1, r7
 800a498:	f7f7 fd76 	bl	8001f88 <__aeabi_dmul>
 800a49c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a49e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a4a0:	f7f6 fe34 	bl	800110c <__aeabi_dadd>
 800a4a4:	0006      	movs	r6, r0
 800a4a6:	000f      	movs	r7, r1
 800a4a8:	e78f      	b.n	800a3ca <_strtod_l+0xaf6>
 800a4aa:	0002      	movs	r2, r0
 800a4ac:	9218      	str	r2, [sp, #96]	; 0x60
 800a4ae:	9319      	str	r3, [sp, #100]	; 0x64
 800a4b0:	e7dd      	b.n	800a46e <_strtod_l+0xb9a>
 800a4b2:	4b11      	ldr	r3, [pc, #68]	; (800a4f8 <_strtod_l+0xc24>)
 800a4b4:	f7f5 ffd6 	bl	8000464 <__aeabi_dcmplt>
 800a4b8:	e7b1      	b.n	800a41e <_strtod_l+0xb4a>
 800a4ba:	46c0      	nop			; (mov r8, r8)
 800a4bc:	fff00000 	.word	0xfff00000
 800a4c0:	000fffff 	.word	0x000fffff
 800a4c4:	3ff00000 	.word	0x3ff00000
 800a4c8:	7ff00000 	.word	0x7ff00000
 800a4cc:	7fe00000 	.word	0x7fe00000
 800a4d0:	fcb00000 	.word	0xfcb00000
 800a4d4:	7c9fffff 	.word	0x7c9fffff
 800a4d8:	7fefffff 	.word	0x7fefffff
 800a4dc:	3fe00000 	.word	0x3fe00000
 800a4e0:	bff00000 	.word	0xbff00000
 800a4e4:	94a03595 	.word	0x94a03595
 800a4e8:	3fdfffff 	.word	0x3fdfffff
 800a4ec:	35afe535 	.word	0x35afe535
 800a4f0:	ffc00000 	.word	0xffc00000
 800a4f4:	41dfffff 	.word	0x41dfffff
 800a4f8:	3fcfffff 	.word	0x3fcfffff

0800a4fc <_strtod_r>:
 800a4fc:	b510      	push	{r4, lr}
 800a4fe:	4b02      	ldr	r3, [pc, #8]	; (800a508 <_strtod_r+0xc>)
 800a500:	f7ff f9e8 	bl	80098d4 <_strtod_l>
 800a504:	bd10      	pop	{r4, pc}
 800a506:	46c0      	nop			; (mov r8, r8)
 800a508:	200000b8 	.word	0x200000b8

0800a50c <_strtol_l.constprop.0>:
 800a50c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a50e:	b087      	sub	sp, #28
 800a510:	001e      	movs	r6, r3
 800a512:	9005      	str	r0, [sp, #20]
 800a514:	9101      	str	r1, [sp, #4]
 800a516:	9202      	str	r2, [sp, #8]
 800a518:	2b01      	cmp	r3, #1
 800a51a:	d045      	beq.n	800a5a8 <_strtol_l.constprop.0+0x9c>
 800a51c:	000b      	movs	r3, r1
 800a51e:	2e24      	cmp	r6, #36	; 0x24
 800a520:	d842      	bhi.n	800a5a8 <_strtol_l.constprop.0+0x9c>
 800a522:	4a3f      	ldr	r2, [pc, #252]	; (800a620 <_strtol_l.constprop.0+0x114>)
 800a524:	2108      	movs	r1, #8
 800a526:	4694      	mov	ip, r2
 800a528:	001a      	movs	r2, r3
 800a52a:	4660      	mov	r0, ip
 800a52c:	7814      	ldrb	r4, [r2, #0]
 800a52e:	3301      	adds	r3, #1
 800a530:	5d00      	ldrb	r0, [r0, r4]
 800a532:	001d      	movs	r5, r3
 800a534:	0007      	movs	r7, r0
 800a536:	400f      	ands	r7, r1
 800a538:	4208      	tst	r0, r1
 800a53a:	d1f5      	bne.n	800a528 <_strtol_l.constprop.0+0x1c>
 800a53c:	2c2d      	cmp	r4, #45	; 0x2d
 800a53e:	d13a      	bne.n	800a5b6 <_strtol_l.constprop.0+0xaa>
 800a540:	2701      	movs	r7, #1
 800a542:	781c      	ldrb	r4, [r3, #0]
 800a544:	1c95      	adds	r5, r2, #2
 800a546:	2e00      	cmp	r6, #0
 800a548:	d065      	beq.n	800a616 <_strtol_l.constprop.0+0x10a>
 800a54a:	2e10      	cmp	r6, #16
 800a54c:	d109      	bne.n	800a562 <_strtol_l.constprop.0+0x56>
 800a54e:	2c30      	cmp	r4, #48	; 0x30
 800a550:	d107      	bne.n	800a562 <_strtol_l.constprop.0+0x56>
 800a552:	2220      	movs	r2, #32
 800a554:	782b      	ldrb	r3, [r5, #0]
 800a556:	4393      	bics	r3, r2
 800a558:	2b58      	cmp	r3, #88	; 0x58
 800a55a:	d157      	bne.n	800a60c <_strtol_l.constprop.0+0x100>
 800a55c:	2610      	movs	r6, #16
 800a55e:	786c      	ldrb	r4, [r5, #1]
 800a560:	3502      	adds	r5, #2
 800a562:	4b30      	ldr	r3, [pc, #192]	; (800a624 <_strtol_l.constprop.0+0x118>)
 800a564:	0031      	movs	r1, r6
 800a566:	18fb      	adds	r3, r7, r3
 800a568:	0018      	movs	r0, r3
 800a56a:	9303      	str	r3, [sp, #12]
 800a56c:	f7f5 fe74 	bl	8000258 <__aeabi_uidivmod>
 800a570:	2300      	movs	r3, #0
 800a572:	2201      	movs	r2, #1
 800a574:	4684      	mov	ip, r0
 800a576:	0018      	movs	r0, r3
 800a578:	9104      	str	r1, [sp, #16]
 800a57a:	4252      	negs	r2, r2
 800a57c:	0021      	movs	r1, r4
 800a57e:	3930      	subs	r1, #48	; 0x30
 800a580:	2909      	cmp	r1, #9
 800a582:	d81d      	bhi.n	800a5c0 <_strtol_l.constprop.0+0xb4>
 800a584:	000c      	movs	r4, r1
 800a586:	42a6      	cmp	r6, r4
 800a588:	dd28      	ble.n	800a5dc <_strtol_l.constprop.0+0xd0>
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	db24      	blt.n	800a5d8 <_strtol_l.constprop.0+0xcc>
 800a58e:	0013      	movs	r3, r2
 800a590:	4584      	cmp	ip, r0
 800a592:	d306      	bcc.n	800a5a2 <_strtol_l.constprop.0+0x96>
 800a594:	d102      	bne.n	800a59c <_strtol_l.constprop.0+0x90>
 800a596:	9904      	ldr	r1, [sp, #16]
 800a598:	42a1      	cmp	r1, r4
 800a59a:	db02      	blt.n	800a5a2 <_strtol_l.constprop.0+0x96>
 800a59c:	2301      	movs	r3, #1
 800a59e:	4370      	muls	r0, r6
 800a5a0:	1820      	adds	r0, r4, r0
 800a5a2:	782c      	ldrb	r4, [r5, #0]
 800a5a4:	3501      	adds	r5, #1
 800a5a6:	e7e9      	b.n	800a57c <_strtol_l.constprop.0+0x70>
 800a5a8:	f7fe f902 	bl	80087b0 <__errno>
 800a5ac:	2316      	movs	r3, #22
 800a5ae:	6003      	str	r3, [r0, #0]
 800a5b0:	2000      	movs	r0, #0
 800a5b2:	b007      	add	sp, #28
 800a5b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a5b6:	2c2b      	cmp	r4, #43	; 0x2b
 800a5b8:	d1c5      	bne.n	800a546 <_strtol_l.constprop.0+0x3a>
 800a5ba:	781c      	ldrb	r4, [r3, #0]
 800a5bc:	1c95      	adds	r5, r2, #2
 800a5be:	e7c2      	b.n	800a546 <_strtol_l.constprop.0+0x3a>
 800a5c0:	0021      	movs	r1, r4
 800a5c2:	3941      	subs	r1, #65	; 0x41
 800a5c4:	2919      	cmp	r1, #25
 800a5c6:	d801      	bhi.n	800a5cc <_strtol_l.constprop.0+0xc0>
 800a5c8:	3c37      	subs	r4, #55	; 0x37
 800a5ca:	e7dc      	b.n	800a586 <_strtol_l.constprop.0+0x7a>
 800a5cc:	0021      	movs	r1, r4
 800a5ce:	3961      	subs	r1, #97	; 0x61
 800a5d0:	2919      	cmp	r1, #25
 800a5d2:	d803      	bhi.n	800a5dc <_strtol_l.constprop.0+0xd0>
 800a5d4:	3c57      	subs	r4, #87	; 0x57
 800a5d6:	e7d6      	b.n	800a586 <_strtol_l.constprop.0+0x7a>
 800a5d8:	0013      	movs	r3, r2
 800a5da:	e7e2      	b.n	800a5a2 <_strtol_l.constprop.0+0x96>
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	da09      	bge.n	800a5f4 <_strtol_l.constprop.0+0xe8>
 800a5e0:	2322      	movs	r3, #34	; 0x22
 800a5e2:	9a05      	ldr	r2, [sp, #20]
 800a5e4:	9803      	ldr	r0, [sp, #12]
 800a5e6:	6013      	str	r3, [r2, #0]
 800a5e8:	9b02      	ldr	r3, [sp, #8]
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d0e1      	beq.n	800a5b2 <_strtol_l.constprop.0+0xa6>
 800a5ee:	1e6b      	subs	r3, r5, #1
 800a5f0:	9301      	str	r3, [sp, #4]
 800a5f2:	e007      	b.n	800a604 <_strtol_l.constprop.0+0xf8>
 800a5f4:	2f00      	cmp	r7, #0
 800a5f6:	d000      	beq.n	800a5fa <_strtol_l.constprop.0+0xee>
 800a5f8:	4240      	negs	r0, r0
 800a5fa:	9a02      	ldr	r2, [sp, #8]
 800a5fc:	2a00      	cmp	r2, #0
 800a5fe:	d0d8      	beq.n	800a5b2 <_strtol_l.constprop.0+0xa6>
 800a600:	2b00      	cmp	r3, #0
 800a602:	d1f4      	bne.n	800a5ee <_strtol_l.constprop.0+0xe2>
 800a604:	9b02      	ldr	r3, [sp, #8]
 800a606:	9a01      	ldr	r2, [sp, #4]
 800a608:	601a      	str	r2, [r3, #0]
 800a60a:	e7d2      	b.n	800a5b2 <_strtol_l.constprop.0+0xa6>
 800a60c:	2430      	movs	r4, #48	; 0x30
 800a60e:	2e00      	cmp	r6, #0
 800a610:	d1a7      	bne.n	800a562 <_strtol_l.constprop.0+0x56>
 800a612:	3608      	adds	r6, #8
 800a614:	e7a5      	b.n	800a562 <_strtol_l.constprop.0+0x56>
 800a616:	2c30      	cmp	r4, #48	; 0x30
 800a618:	d09b      	beq.n	800a552 <_strtol_l.constprop.0+0x46>
 800a61a:	260a      	movs	r6, #10
 800a61c:	e7a1      	b.n	800a562 <_strtol_l.constprop.0+0x56>
 800a61e:	46c0      	nop			; (mov r8, r8)
 800a620:	0800e079 	.word	0x0800e079
 800a624:	7fffffff 	.word	0x7fffffff

0800a628 <_strtol_r>:
 800a628:	b510      	push	{r4, lr}
 800a62a:	f7ff ff6f 	bl	800a50c <_strtol_l.constprop.0>
 800a62e:	bd10      	pop	{r4, pc}

0800a630 <_write_r>:
 800a630:	b570      	push	{r4, r5, r6, lr}
 800a632:	0004      	movs	r4, r0
 800a634:	0008      	movs	r0, r1
 800a636:	0011      	movs	r1, r2
 800a638:	001a      	movs	r2, r3
 800a63a:	2300      	movs	r3, #0
 800a63c:	4d05      	ldr	r5, [pc, #20]	; (800a654 <_write_r+0x24>)
 800a63e:	602b      	str	r3, [r5, #0]
 800a640:	f7fa fb03 	bl	8004c4a <_write>
 800a644:	1c43      	adds	r3, r0, #1
 800a646:	d103      	bne.n	800a650 <_write_r+0x20>
 800a648:	682b      	ldr	r3, [r5, #0]
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d000      	beq.n	800a650 <_write_r+0x20>
 800a64e:	6023      	str	r3, [r4, #0]
 800a650:	bd70      	pop	{r4, r5, r6, pc}
 800a652:	46c0      	nop			; (mov r8, r8)
 800a654:	20000a28 	.word	0x20000a28

0800a658 <_close_r>:
 800a658:	2300      	movs	r3, #0
 800a65a:	b570      	push	{r4, r5, r6, lr}
 800a65c:	4d06      	ldr	r5, [pc, #24]	; (800a678 <_close_r+0x20>)
 800a65e:	0004      	movs	r4, r0
 800a660:	0008      	movs	r0, r1
 800a662:	602b      	str	r3, [r5, #0]
 800a664:	f7fa fb0d 	bl	8004c82 <_close>
 800a668:	1c43      	adds	r3, r0, #1
 800a66a:	d103      	bne.n	800a674 <_close_r+0x1c>
 800a66c:	682b      	ldr	r3, [r5, #0]
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d000      	beq.n	800a674 <_close_r+0x1c>
 800a672:	6023      	str	r3, [r4, #0]
 800a674:	bd70      	pop	{r4, r5, r6, pc}
 800a676:	46c0      	nop			; (mov r8, r8)
 800a678:	20000a28 	.word	0x20000a28

0800a67c <quorem>:
 800a67c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a67e:	0006      	movs	r6, r0
 800a680:	690b      	ldr	r3, [r1, #16]
 800a682:	6932      	ldr	r2, [r6, #16]
 800a684:	b087      	sub	sp, #28
 800a686:	2000      	movs	r0, #0
 800a688:	9103      	str	r1, [sp, #12]
 800a68a:	429a      	cmp	r2, r3
 800a68c:	db65      	blt.n	800a75a <quorem+0xde>
 800a68e:	3b01      	subs	r3, #1
 800a690:	009c      	lsls	r4, r3, #2
 800a692:	9300      	str	r3, [sp, #0]
 800a694:	000b      	movs	r3, r1
 800a696:	3314      	adds	r3, #20
 800a698:	9305      	str	r3, [sp, #20]
 800a69a:	191b      	adds	r3, r3, r4
 800a69c:	9304      	str	r3, [sp, #16]
 800a69e:	0033      	movs	r3, r6
 800a6a0:	3314      	adds	r3, #20
 800a6a2:	9302      	str	r3, [sp, #8]
 800a6a4:	191c      	adds	r4, r3, r4
 800a6a6:	9b04      	ldr	r3, [sp, #16]
 800a6a8:	6827      	ldr	r7, [r4, #0]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	0038      	movs	r0, r7
 800a6ae:	1c5d      	adds	r5, r3, #1
 800a6b0:	0029      	movs	r1, r5
 800a6b2:	9301      	str	r3, [sp, #4]
 800a6b4:	f7f5 fd4a 	bl	800014c <__udivsi3>
 800a6b8:	9001      	str	r0, [sp, #4]
 800a6ba:	42af      	cmp	r7, r5
 800a6bc:	d324      	bcc.n	800a708 <quorem+0x8c>
 800a6be:	2500      	movs	r5, #0
 800a6c0:	46ac      	mov	ip, r5
 800a6c2:	9802      	ldr	r0, [sp, #8]
 800a6c4:	9f05      	ldr	r7, [sp, #20]
 800a6c6:	cf08      	ldmia	r7!, {r3}
 800a6c8:	9a01      	ldr	r2, [sp, #4]
 800a6ca:	b299      	uxth	r1, r3
 800a6cc:	4351      	muls	r1, r2
 800a6ce:	0c1b      	lsrs	r3, r3, #16
 800a6d0:	4353      	muls	r3, r2
 800a6d2:	1949      	adds	r1, r1, r5
 800a6d4:	0c0a      	lsrs	r2, r1, #16
 800a6d6:	189b      	adds	r3, r3, r2
 800a6d8:	6802      	ldr	r2, [r0, #0]
 800a6da:	b289      	uxth	r1, r1
 800a6dc:	b292      	uxth	r2, r2
 800a6de:	4462      	add	r2, ip
 800a6e0:	1a52      	subs	r2, r2, r1
 800a6e2:	6801      	ldr	r1, [r0, #0]
 800a6e4:	0c1d      	lsrs	r5, r3, #16
 800a6e6:	0c09      	lsrs	r1, r1, #16
 800a6e8:	b29b      	uxth	r3, r3
 800a6ea:	1acb      	subs	r3, r1, r3
 800a6ec:	1411      	asrs	r1, r2, #16
 800a6ee:	185b      	adds	r3, r3, r1
 800a6f0:	1419      	asrs	r1, r3, #16
 800a6f2:	b292      	uxth	r2, r2
 800a6f4:	041b      	lsls	r3, r3, #16
 800a6f6:	431a      	orrs	r2, r3
 800a6f8:	9b04      	ldr	r3, [sp, #16]
 800a6fa:	468c      	mov	ip, r1
 800a6fc:	c004      	stmia	r0!, {r2}
 800a6fe:	42bb      	cmp	r3, r7
 800a700:	d2e1      	bcs.n	800a6c6 <quorem+0x4a>
 800a702:	6823      	ldr	r3, [r4, #0]
 800a704:	2b00      	cmp	r3, #0
 800a706:	d030      	beq.n	800a76a <quorem+0xee>
 800a708:	0030      	movs	r0, r6
 800a70a:	9903      	ldr	r1, [sp, #12]
 800a70c:	f001 fce6 	bl	800c0dc <__mcmp>
 800a710:	2800      	cmp	r0, #0
 800a712:	db21      	blt.n	800a758 <quorem+0xdc>
 800a714:	0030      	movs	r0, r6
 800a716:	2400      	movs	r4, #0
 800a718:	9b01      	ldr	r3, [sp, #4]
 800a71a:	9903      	ldr	r1, [sp, #12]
 800a71c:	3301      	adds	r3, #1
 800a71e:	9301      	str	r3, [sp, #4]
 800a720:	3014      	adds	r0, #20
 800a722:	3114      	adds	r1, #20
 800a724:	6803      	ldr	r3, [r0, #0]
 800a726:	c920      	ldmia	r1!, {r5}
 800a728:	b29a      	uxth	r2, r3
 800a72a:	1914      	adds	r4, r2, r4
 800a72c:	b2aa      	uxth	r2, r5
 800a72e:	1aa2      	subs	r2, r4, r2
 800a730:	0c1b      	lsrs	r3, r3, #16
 800a732:	0c2d      	lsrs	r5, r5, #16
 800a734:	1414      	asrs	r4, r2, #16
 800a736:	1b5b      	subs	r3, r3, r5
 800a738:	191b      	adds	r3, r3, r4
 800a73a:	141c      	asrs	r4, r3, #16
 800a73c:	b292      	uxth	r2, r2
 800a73e:	041b      	lsls	r3, r3, #16
 800a740:	4313      	orrs	r3, r2
 800a742:	c008      	stmia	r0!, {r3}
 800a744:	9b04      	ldr	r3, [sp, #16]
 800a746:	428b      	cmp	r3, r1
 800a748:	d2ec      	bcs.n	800a724 <quorem+0xa8>
 800a74a:	9b00      	ldr	r3, [sp, #0]
 800a74c:	9a02      	ldr	r2, [sp, #8]
 800a74e:	009b      	lsls	r3, r3, #2
 800a750:	18d3      	adds	r3, r2, r3
 800a752:	681a      	ldr	r2, [r3, #0]
 800a754:	2a00      	cmp	r2, #0
 800a756:	d015      	beq.n	800a784 <quorem+0x108>
 800a758:	9801      	ldr	r0, [sp, #4]
 800a75a:	b007      	add	sp, #28
 800a75c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a75e:	6823      	ldr	r3, [r4, #0]
 800a760:	2b00      	cmp	r3, #0
 800a762:	d106      	bne.n	800a772 <quorem+0xf6>
 800a764:	9b00      	ldr	r3, [sp, #0]
 800a766:	3b01      	subs	r3, #1
 800a768:	9300      	str	r3, [sp, #0]
 800a76a:	9b02      	ldr	r3, [sp, #8]
 800a76c:	3c04      	subs	r4, #4
 800a76e:	42a3      	cmp	r3, r4
 800a770:	d3f5      	bcc.n	800a75e <quorem+0xe2>
 800a772:	9b00      	ldr	r3, [sp, #0]
 800a774:	6133      	str	r3, [r6, #16]
 800a776:	e7c7      	b.n	800a708 <quorem+0x8c>
 800a778:	681a      	ldr	r2, [r3, #0]
 800a77a:	2a00      	cmp	r2, #0
 800a77c:	d106      	bne.n	800a78c <quorem+0x110>
 800a77e:	9a00      	ldr	r2, [sp, #0]
 800a780:	3a01      	subs	r2, #1
 800a782:	9200      	str	r2, [sp, #0]
 800a784:	9a02      	ldr	r2, [sp, #8]
 800a786:	3b04      	subs	r3, #4
 800a788:	429a      	cmp	r2, r3
 800a78a:	d3f5      	bcc.n	800a778 <quorem+0xfc>
 800a78c:	9b00      	ldr	r3, [sp, #0]
 800a78e:	6133      	str	r3, [r6, #16]
 800a790:	e7e2      	b.n	800a758 <quorem+0xdc>
	...

0800a794 <_dtoa_r>:
 800a794:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a796:	b09d      	sub	sp, #116	; 0x74
 800a798:	9202      	str	r2, [sp, #8]
 800a79a:	9303      	str	r3, [sp, #12]
 800a79c:	9b02      	ldr	r3, [sp, #8]
 800a79e:	9c03      	ldr	r4, [sp, #12]
 800a7a0:	9308      	str	r3, [sp, #32]
 800a7a2:	9409      	str	r4, [sp, #36]	; 0x24
 800a7a4:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800a7a6:	0007      	movs	r7, r0
 800a7a8:	9d25      	ldr	r5, [sp, #148]	; 0x94
 800a7aa:	2c00      	cmp	r4, #0
 800a7ac:	d10e      	bne.n	800a7cc <_dtoa_r+0x38>
 800a7ae:	2010      	movs	r0, #16
 800a7b0:	f7fe f828 	bl	8008804 <malloc>
 800a7b4:	1e02      	subs	r2, r0, #0
 800a7b6:	6278      	str	r0, [r7, #36]	; 0x24
 800a7b8:	d104      	bne.n	800a7c4 <_dtoa_r+0x30>
 800a7ba:	21ea      	movs	r1, #234	; 0xea
 800a7bc:	4bc7      	ldr	r3, [pc, #796]	; (800aadc <_dtoa_r+0x348>)
 800a7be:	48c8      	ldr	r0, [pc, #800]	; (800aae0 <_dtoa_r+0x34c>)
 800a7c0:	f002 fc92 	bl	800d0e8 <__assert_func>
 800a7c4:	6044      	str	r4, [r0, #4]
 800a7c6:	6084      	str	r4, [r0, #8]
 800a7c8:	6004      	str	r4, [r0, #0]
 800a7ca:	60c4      	str	r4, [r0, #12]
 800a7cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7ce:	6819      	ldr	r1, [r3, #0]
 800a7d0:	2900      	cmp	r1, #0
 800a7d2:	d00a      	beq.n	800a7ea <_dtoa_r+0x56>
 800a7d4:	685a      	ldr	r2, [r3, #4]
 800a7d6:	2301      	movs	r3, #1
 800a7d8:	4093      	lsls	r3, r2
 800a7da:	604a      	str	r2, [r1, #4]
 800a7dc:	608b      	str	r3, [r1, #8]
 800a7de:	0038      	movs	r0, r7
 800a7e0:	f001 f9f0 	bl	800bbc4 <_Bfree>
 800a7e4:	2200      	movs	r2, #0
 800a7e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7e8:	601a      	str	r2, [r3, #0]
 800a7ea:	9b03      	ldr	r3, [sp, #12]
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	da20      	bge.n	800a832 <_dtoa_r+0x9e>
 800a7f0:	2301      	movs	r3, #1
 800a7f2:	602b      	str	r3, [r5, #0]
 800a7f4:	9b03      	ldr	r3, [sp, #12]
 800a7f6:	005b      	lsls	r3, r3, #1
 800a7f8:	085b      	lsrs	r3, r3, #1
 800a7fa:	9309      	str	r3, [sp, #36]	; 0x24
 800a7fc:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800a7fe:	4bb9      	ldr	r3, [pc, #740]	; (800aae4 <_dtoa_r+0x350>)
 800a800:	4ab8      	ldr	r2, [pc, #736]	; (800aae4 <_dtoa_r+0x350>)
 800a802:	402b      	ands	r3, r5
 800a804:	4293      	cmp	r3, r2
 800a806:	d117      	bne.n	800a838 <_dtoa_r+0xa4>
 800a808:	4bb7      	ldr	r3, [pc, #732]	; (800aae8 <_dtoa_r+0x354>)
 800a80a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a80c:	0328      	lsls	r0, r5, #12
 800a80e:	6013      	str	r3, [r2, #0]
 800a810:	9b02      	ldr	r3, [sp, #8]
 800a812:	0b00      	lsrs	r0, r0, #12
 800a814:	4318      	orrs	r0, r3
 800a816:	d101      	bne.n	800a81c <_dtoa_r+0x88>
 800a818:	f000 fdbf 	bl	800b39a <_dtoa_r+0xc06>
 800a81c:	48b3      	ldr	r0, [pc, #716]	; (800aaec <_dtoa_r+0x358>)
 800a81e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a820:	9006      	str	r0, [sp, #24]
 800a822:	2b00      	cmp	r3, #0
 800a824:	d002      	beq.n	800a82c <_dtoa_r+0x98>
 800a826:	4bb2      	ldr	r3, [pc, #712]	; (800aaf0 <_dtoa_r+0x35c>)
 800a828:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800a82a:	6013      	str	r3, [r2, #0]
 800a82c:	9806      	ldr	r0, [sp, #24]
 800a82e:	b01d      	add	sp, #116	; 0x74
 800a830:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a832:	2300      	movs	r3, #0
 800a834:	602b      	str	r3, [r5, #0]
 800a836:	e7e1      	b.n	800a7fc <_dtoa_r+0x68>
 800a838:	9b08      	ldr	r3, [sp, #32]
 800a83a:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800a83c:	9312      	str	r3, [sp, #72]	; 0x48
 800a83e:	9413      	str	r4, [sp, #76]	; 0x4c
 800a840:	9812      	ldr	r0, [sp, #72]	; 0x48
 800a842:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800a844:	2200      	movs	r2, #0
 800a846:	2300      	movs	r3, #0
 800a848:	f7f5 fe06 	bl	8000458 <__aeabi_dcmpeq>
 800a84c:	1e04      	subs	r4, r0, #0
 800a84e:	d009      	beq.n	800a864 <_dtoa_r+0xd0>
 800a850:	2301      	movs	r3, #1
 800a852:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a854:	6013      	str	r3, [r2, #0]
 800a856:	4ba7      	ldr	r3, [pc, #668]	; (800aaf4 <_dtoa_r+0x360>)
 800a858:	9306      	str	r3, [sp, #24]
 800a85a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d0e5      	beq.n	800a82c <_dtoa_r+0x98>
 800a860:	4ba5      	ldr	r3, [pc, #660]	; (800aaf8 <_dtoa_r+0x364>)
 800a862:	e7e1      	b.n	800a828 <_dtoa_r+0x94>
 800a864:	ab1a      	add	r3, sp, #104	; 0x68
 800a866:	9301      	str	r3, [sp, #4]
 800a868:	ab1b      	add	r3, sp, #108	; 0x6c
 800a86a:	9300      	str	r3, [sp, #0]
 800a86c:	0038      	movs	r0, r7
 800a86e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a870:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a872:	f001 fd5b 	bl	800c32c <__d2b>
 800a876:	006e      	lsls	r6, r5, #1
 800a878:	9005      	str	r0, [sp, #20]
 800a87a:	0d76      	lsrs	r6, r6, #21
 800a87c:	d100      	bne.n	800a880 <_dtoa_r+0xec>
 800a87e:	e07c      	b.n	800a97a <_dtoa_r+0x1e6>
 800a880:	9812      	ldr	r0, [sp, #72]	; 0x48
 800a882:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800a884:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a886:	4a9d      	ldr	r2, [pc, #628]	; (800aafc <_dtoa_r+0x368>)
 800a888:	031b      	lsls	r3, r3, #12
 800a88a:	0b1b      	lsrs	r3, r3, #12
 800a88c:	431a      	orrs	r2, r3
 800a88e:	0011      	movs	r1, r2
 800a890:	4b9b      	ldr	r3, [pc, #620]	; (800ab00 <_dtoa_r+0x36c>)
 800a892:	9418      	str	r4, [sp, #96]	; 0x60
 800a894:	18f6      	adds	r6, r6, r3
 800a896:	2200      	movs	r2, #0
 800a898:	4b9a      	ldr	r3, [pc, #616]	; (800ab04 <_dtoa_r+0x370>)
 800a89a:	f7f7 fde1 	bl	8002460 <__aeabi_dsub>
 800a89e:	4a9a      	ldr	r2, [pc, #616]	; (800ab08 <_dtoa_r+0x374>)
 800a8a0:	4b9a      	ldr	r3, [pc, #616]	; (800ab0c <_dtoa_r+0x378>)
 800a8a2:	f7f7 fb71 	bl	8001f88 <__aeabi_dmul>
 800a8a6:	4a9a      	ldr	r2, [pc, #616]	; (800ab10 <_dtoa_r+0x37c>)
 800a8a8:	4b9a      	ldr	r3, [pc, #616]	; (800ab14 <_dtoa_r+0x380>)
 800a8aa:	f7f6 fc2f 	bl	800110c <__aeabi_dadd>
 800a8ae:	0004      	movs	r4, r0
 800a8b0:	0030      	movs	r0, r6
 800a8b2:	000d      	movs	r5, r1
 800a8b4:	f7f8 f9ba 	bl	8002c2c <__aeabi_i2d>
 800a8b8:	4a97      	ldr	r2, [pc, #604]	; (800ab18 <_dtoa_r+0x384>)
 800a8ba:	4b98      	ldr	r3, [pc, #608]	; (800ab1c <_dtoa_r+0x388>)
 800a8bc:	f7f7 fb64 	bl	8001f88 <__aeabi_dmul>
 800a8c0:	0002      	movs	r2, r0
 800a8c2:	000b      	movs	r3, r1
 800a8c4:	0020      	movs	r0, r4
 800a8c6:	0029      	movs	r1, r5
 800a8c8:	f7f6 fc20 	bl	800110c <__aeabi_dadd>
 800a8cc:	0004      	movs	r4, r0
 800a8ce:	000d      	movs	r5, r1
 800a8d0:	f7f8 f976 	bl	8002bc0 <__aeabi_d2iz>
 800a8d4:	2200      	movs	r2, #0
 800a8d6:	9002      	str	r0, [sp, #8]
 800a8d8:	2300      	movs	r3, #0
 800a8da:	0020      	movs	r0, r4
 800a8dc:	0029      	movs	r1, r5
 800a8de:	f7f5 fdc1 	bl	8000464 <__aeabi_dcmplt>
 800a8e2:	2800      	cmp	r0, #0
 800a8e4:	d00b      	beq.n	800a8fe <_dtoa_r+0x16a>
 800a8e6:	9802      	ldr	r0, [sp, #8]
 800a8e8:	f7f8 f9a0 	bl	8002c2c <__aeabi_i2d>
 800a8ec:	002b      	movs	r3, r5
 800a8ee:	0022      	movs	r2, r4
 800a8f0:	f7f5 fdb2 	bl	8000458 <__aeabi_dcmpeq>
 800a8f4:	4243      	negs	r3, r0
 800a8f6:	4158      	adcs	r0, r3
 800a8f8:	9b02      	ldr	r3, [sp, #8]
 800a8fa:	1a1b      	subs	r3, r3, r0
 800a8fc:	9302      	str	r3, [sp, #8]
 800a8fe:	2301      	movs	r3, #1
 800a900:	9316      	str	r3, [sp, #88]	; 0x58
 800a902:	9b02      	ldr	r3, [sp, #8]
 800a904:	2b16      	cmp	r3, #22
 800a906:	d80f      	bhi.n	800a928 <_dtoa_r+0x194>
 800a908:	9812      	ldr	r0, [sp, #72]	; 0x48
 800a90a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800a90c:	00da      	lsls	r2, r3, #3
 800a90e:	4b84      	ldr	r3, [pc, #528]	; (800ab20 <_dtoa_r+0x38c>)
 800a910:	189b      	adds	r3, r3, r2
 800a912:	681a      	ldr	r2, [r3, #0]
 800a914:	685b      	ldr	r3, [r3, #4]
 800a916:	f7f5 fda5 	bl	8000464 <__aeabi_dcmplt>
 800a91a:	2800      	cmp	r0, #0
 800a91c:	d049      	beq.n	800a9b2 <_dtoa_r+0x21e>
 800a91e:	9b02      	ldr	r3, [sp, #8]
 800a920:	3b01      	subs	r3, #1
 800a922:	9302      	str	r3, [sp, #8]
 800a924:	2300      	movs	r3, #0
 800a926:	9316      	str	r3, [sp, #88]	; 0x58
 800a928:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800a92a:	1b9e      	subs	r6, r3, r6
 800a92c:	2300      	movs	r3, #0
 800a92e:	930a      	str	r3, [sp, #40]	; 0x28
 800a930:	0033      	movs	r3, r6
 800a932:	3b01      	subs	r3, #1
 800a934:	930d      	str	r3, [sp, #52]	; 0x34
 800a936:	d504      	bpl.n	800a942 <_dtoa_r+0x1ae>
 800a938:	2301      	movs	r3, #1
 800a93a:	1b9b      	subs	r3, r3, r6
 800a93c:	930a      	str	r3, [sp, #40]	; 0x28
 800a93e:	2300      	movs	r3, #0
 800a940:	930d      	str	r3, [sp, #52]	; 0x34
 800a942:	9b02      	ldr	r3, [sp, #8]
 800a944:	2b00      	cmp	r3, #0
 800a946:	db36      	blt.n	800a9b6 <_dtoa_r+0x222>
 800a948:	9a02      	ldr	r2, [sp, #8]
 800a94a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a94c:	4694      	mov	ip, r2
 800a94e:	4463      	add	r3, ip
 800a950:	930d      	str	r3, [sp, #52]	; 0x34
 800a952:	2300      	movs	r3, #0
 800a954:	9215      	str	r2, [sp, #84]	; 0x54
 800a956:	930e      	str	r3, [sp, #56]	; 0x38
 800a958:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a95a:	2401      	movs	r4, #1
 800a95c:	2b09      	cmp	r3, #9
 800a95e:	d864      	bhi.n	800aa2a <_dtoa_r+0x296>
 800a960:	2b05      	cmp	r3, #5
 800a962:	dd02      	ble.n	800a96a <_dtoa_r+0x1d6>
 800a964:	2400      	movs	r4, #0
 800a966:	3b04      	subs	r3, #4
 800a968:	9322      	str	r3, [sp, #136]	; 0x88
 800a96a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a96c:	1e98      	subs	r0, r3, #2
 800a96e:	2803      	cmp	r0, #3
 800a970:	d864      	bhi.n	800aa3c <_dtoa_r+0x2a8>
 800a972:	f7f5 fbd7 	bl	8000124 <__gnu_thumb1_case_uqi>
 800a976:	3829      	.short	0x3829
 800a978:	5836      	.short	0x5836
 800a97a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800a97c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800a97e:	189e      	adds	r6, r3, r2
 800a980:	4b68      	ldr	r3, [pc, #416]	; (800ab24 <_dtoa_r+0x390>)
 800a982:	18f2      	adds	r2, r6, r3
 800a984:	2a20      	cmp	r2, #32
 800a986:	dd0f      	ble.n	800a9a8 <_dtoa_r+0x214>
 800a988:	2340      	movs	r3, #64	; 0x40
 800a98a:	1a9b      	subs	r3, r3, r2
 800a98c:	409d      	lsls	r5, r3
 800a98e:	4b66      	ldr	r3, [pc, #408]	; (800ab28 <_dtoa_r+0x394>)
 800a990:	9802      	ldr	r0, [sp, #8]
 800a992:	18f3      	adds	r3, r6, r3
 800a994:	40d8      	lsrs	r0, r3
 800a996:	4328      	orrs	r0, r5
 800a998:	f7f8 f978 	bl	8002c8c <__aeabi_ui2d>
 800a99c:	2301      	movs	r3, #1
 800a99e:	4c63      	ldr	r4, [pc, #396]	; (800ab2c <_dtoa_r+0x398>)
 800a9a0:	3e01      	subs	r6, #1
 800a9a2:	1909      	adds	r1, r1, r4
 800a9a4:	9318      	str	r3, [sp, #96]	; 0x60
 800a9a6:	e776      	b.n	800a896 <_dtoa_r+0x102>
 800a9a8:	2320      	movs	r3, #32
 800a9aa:	9802      	ldr	r0, [sp, #8]
 800a9ac:	1a9b      	subs	r3, r3, r2
 800a9ae:	4098      	lsls	r0, r3
 800a9b0:	e7f2      	b.n	800a998 <_dtoa_r+0x204>
 800a9b2:	9016      	str	r0, [sp, #88]	; 0x58
 800a9b4:	e7b8      	b.n	800a928 <_dtoa_r+0x194>
 800a9b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a9b8:	9a02      	ldr	r2, [sp, #8]
 800a9ba:	1a9b      	subs	r3, r3, r2
 800a9bc:	930a      	str	r3, [sp, #40]	; 0x28
 800a9be:	4253      	negs	r3, r2
 800a9c0:	930e      	str	r3, [sp, #56]	; 0x38
 800a9c2:	2300      	movs	r3, #0
 800a9c4:	9315      	str	r3, [sp, #84]	; 0x54
 800a9c6:	e7c7      	b.n	800a958 <_dtoa_r+0x1c4>
 800a9c8:	2300      	movs	r3, #0
 800a9ca:	930f      	str	r3, [sp, #60]	; 0x3c
 800a9cc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a9ce:	930c      	str	r3, [sp, #48]	; 0x30
 800a9d0:	9307      	str	r3, [sp, #28]
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	dc13      	bgt.n	800a9fe <_dtoa_r+0x26a>
 800a9d6:	2301      	movs	r3, #1
 800a9d8:	001a      	movs	r2, r3
 800a9da:	930c      	str	r3, [sp, #48]	; 0x30
 800a9dc:	9307      	str	r3, [sp, #28]
 800a9de:	9223      	str	r2, [sp, #140]	; 0x8c
 800a9e0:	e00d      	b.n	800a9fe <_dtoa_r+0x26a>
 800a9e2:	2301      	movs	r3, #1
 800a9e4:	e7f1      	b.n	800a9ca <_dtoa_r+0x236>
 800a9e6:	2300      	movs	r3, #0
 800a9e8:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800a9ea:	930f      	str	r3, [sp, #60]	; 0x3c
 800a9ec:	4694      	mov	ip, r2
 800a9ee:	9b02      	ldr	r3, [sp, #8]
 800a9f0:	4463      	add	r3, ip
 800a9f2:	930c      	str	r3, [sp, #48]	; 0x30
 800a9f4:	3301      	adds	r3, #1
 800a9f6:	9307      	str	r3, [sp, #28]
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	dc00      	bgt.n	800a9fe <_dtoa_r+0x26a>
 800a9fc:	2301      	movs	r3, #1
 800a9fe:	2200      	movs	r2, #0
 800aa00:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800aa02:	6042      	str	r2, [r0, #4]
 800aa04:	3204      	adds	r2, #4
 800aa06:	0015      	movs	r5, r2
 800aa08:	3514      	adds	r5, #20
 800aa0a:	6841      	ldr	r1, [r0, #4]
 800aa0c:	429d      	cmp	r5, r3
 800aa0e:	d919      	bls.n	800aa44 <_dtoa_r+0x2b0>
 800aa10:	0038      	movs	r0, r7
 800aa12:	f001 f893 	bl	800bb3c <_Balloc>
 800aa16:	9006      	str	r0, [sp, #24]
 800aa18:	2800      	cmp	r0, #0
 800aa1a:	d117      	bne.n	800aa4c <_dtoa_r+0x2b8>
 800aa1c:	21d5      	movs	r1, #213	; 0xd5
 800aa1e:	0002      	movs	r2, r0
 800aa20:	4b43      	ldr	r3, [pc, #268]	; (800ab30 <_dtoa_r+0x39c>)
 800aa22:	0049      	lsls	r1, r1, #1
 800aa24:	e6cb      	b.n	800a7be <_dtoa_r+0x2a>
 800aa26:	2301      	movs	r3, #1
 800aa28:	e7de      	b.n	800a9e8 <_dtoa_r+0x254>
 800aa2a:	2300      	movs	r3, #0
 800aa2c:	940f      	str	r4, [sp, #60]	; 0x3c
 800aa2e:	9322      	str	r3, [sp, #136]	; 0x88
 800aa30:	3b01      	subs	r3, #1
 800aa32:	930c      	str	r3, [sp, #48]	; 0x30
 800aa34:	9307      	str	r3, [sp, #28]
 800aa36:	2200      	movs	r2, #0
 800aa38:	3313      	adds	r3, #19
 800aa3a:	e7d0      	b.n	800a9de <_dtoa_r+0x24a>
 800aa3c:	2301      	movs	r3, #1
 800aa3e:	930f      	str	r3, [sp, #60]	; 0x3c
 800aa40:	3b02      	subs	r3, #2
 800aa42:	e7f6      	b.n	800aa32 <_dtoa_r+0x29e>
 800aa44:	3101      	adds	r1, #1
 800aa46:	6041      	str	r1, [r0, #4]
 800aa48:	0052      	lsls	r2, r2, #1
 800aa4a:	e7dc      	b.n	800aa06 <_dtoa_r+0x272>
 800aa4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa4e:	9a06      	ldr	r2, [sp, #24]
 800aa50:	601a      	str	r2, [r3, #0]
 800aa52:	9b07      	ldr	r3, [sp, #28]
 800aa54:	2b0e      	cmp	r3, #14
 800aa56:	d900      	bls.n	800aa5a <_dtoa_r+0x2c6>
 800aa58:	e0eb      	b.n	800ac32 <_dtoa_r+0x49e>
 800aa5a:	2c00      	cmp	r4, #0
 800aa5c:	d100      	bne.n	800aa60 <_dtoa_r+0x2cc>
 800aa5e:	e0e8      	b.n	800ac32 <_dtoa_r+0x49e>
 800aa60:	9b02      	ldr	r3, [sp, #8]
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	dd68      	ble.n	800ab38 <_dtoa_r+0x3a4>
 800aa66:	001a      	movs	r2, r3
 800aa68:	210f      	movs	r1, #15
 800aa6a:	4b2d      	ldr	r3, [pc, #180]	; (800ab20 <_dtoa_r+0x38c>)
 800aa6c:	400a      	ands	r2, r1
 800aa6e:	00d2      	lsls	r2, r2, #3
 800aa70:	189b      	adds	r3, r3, r2
 800aa72:	681d      	ldr	r5, [r3, #0]
 800aa74:	685e      	ldr	r6, [r3, #4]
 800aa76:	9b02      	ldr	r3, [sp, #8]
 800aa78:	111c      	asrs	r4, r3, #4
 800aa7a:	2302      	movs	r3, #2
 800aa7c:	9310      	str	r3, [sp, #64]	; 0x40
 800aa7e:	9b02      	ldr	r3, [sp, #8]
 800aa80:	05db      	lsls	r3, r3, #23
 800aa82:	d50b      	bpl.n	800aa9c <_dtoa_r+0x308>
 800aa84:	4b2b      	ldr	r3, [pc, #172]	; (800ab34 <_dtoa_r+0x3a0>)
 800aa86:	400c      	ands	r4, r1
 800aa88:	6a1a      	ldr	r2, [r3, #32]
 800aa8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa8c:	9812      	ldr	r0, [sp, #72]	; 0x48
 800aa8e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800aa90:	f7f6 fe78 	bl	8001784 <__aeabi_ddiv>
 800aa94:	2303      	movs	r3, #3
 800aa96:	9008      	str	r0, [sp, #32]
 800aa98:	9109      	str	r1, [sp, #36]	; 0x24
 800aa9a:	9310      	str	r3, [sp, #64]	; 0x40
 800aa9c:	4b25      	ldr	r3, [pc, #148]	; (800ab34 <_dtoa_r+0x3a0>)
 800aa9e:	9314      	str	r3, [sp, #80]	; 0x50
 800aaa0:	2c00      	cmp	r4, #0
 800aaa2:	d108      	bne.n	800aab6 <_dtoa_r+0x322>
 800aaa4:	9808      	ldr	r0, [sp, #32]
 800aaa6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800aaa8:	002a      	movs	r2, r5
 800aaaa:	0033      	movs	r3, r6
 800aaac:	f7f6 fe6a 	bl	8001784 <__aeabi_ddiv>
 800aab0:	9008      	str	r0, [sp, #32]
 800aab2:	9109      	str	r1, [sp, #36]	; 0x24
 800aab4:	e05c      	b.n	800ab70 <_dtoa_r+0x3dc>
 800aab6:	2301      	movs	r3, #1
 800aab8:	421c      	tst	r4, r3
 800aaba:	d00b      	beq.n	800aad4 <_dtoa_r+0x340>
 800aabc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800aabe:	0028      	movs	r0, r5
 800aac0:	3301      	adds	r3, #1
 800aac2:	9310      	str	r3, [sp, #64]	; 0x40
 800aac4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800aac6:	0031      	movs	r1, r6
 800aac8:	681a      	ldr	r2, [r3, #0]
 800aaca:	685b      	ldr	r3, [r3, #4]
 800aacc:	f7f7 fa5c 	bl	8001f88 <__aeabi_dmul>
 800aad0:	0005      	movs	r5, r0
 800aad2:	000e      	movs	r6, r1
 800aad4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800aad6:	1064      	asrs	r4, r4, #1
 800aad8:	3308      	adds	r3, #8
 800aada:	e7e0      	b.n	800aa9e <_dtoa_r+0x30a>
 800aadc:	0800e186 	.word	0x0800e186
 800aae0:	0800e19d 	.word	0x0800e19d
 800aae4:	7ff00000 	.word	0x7ff00000
 800aae8:	0000270f 	.word	0x0000270f
 800aaec:	0800e182 	.word	0x0800e182
 800aaf0:	0800e185 	.word	0x0800e185
 800aaf4:	0800e3f1 	.word	0x0800e3f1
 800aaf8:	0800e3f2 	.word	0x0800e3f2
 800aafc:	3ff00000 	.word	0x3ff00000
 800ab00:	fffffc01 	.word	0xfffffc01
 800ab04:	3ff80000 	.word	0x3ff80000
 800ab08:	636f4361 	.word	0x636f4361
 800ab0c:	3fd287a7 	.word	0x3fd287a7
 800ab10:	8b60c8b3 	.word	0x8b60c8b3
 800ab14:	3fc68a28 	.word	0x3fc68a28
 800ab18:	509f79fb 	.word	0x509f79fb
 800ab1c:	3fd34413 	.word	0x3fd34413
 800ab20:	0800e308 	.word	0x0800e308
 800ab24:	00000432 	.word	0x00000432
 800ab28:	00000412 	.word	0x00000412
 800ab2c:	fe100000 	.word	0xfe100000
 800ab30:	0800e1f8 	.word	0x0800e1f8
 800ab34:	0800e2e0 	.word	0x0800e2e0
 800ab38:	2302      	movs	r3, #2
 800ab3a:	9310      	str	r3, [sp, #64]	; 0x40
 800ab3c:	9b02      	ldr	r3, [sp, #8]
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d016      	beq.n	800ab70 <_dtoa_r+0x3dc>
 800ab42:	9812      	ldr	r0, [sp, #72]	; 0x48
 800ab44:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800ab46:	425c      	negs	r4, r3
 800ab48:	230f      	movs	r3, #15
 800ab4a:	4ab6      	ldr	r2, [pc, #728]	; (800ae24 <_dtoa_r+0x690>)
 800ab4c:	4023      	ands	r3, r4
 800ab4e:	00db      	lsls	r3, r3, #3
 800ab50:	18d3      	adds	r3, r2, r3
 800ab52:	681a      	ldr	r2, [r3, #0]
 800ab54:	685b      	ldr	r3, [r3, #4]
 800ab56:	f7f7 fa17 	bl	8001f88 <__aeabi_dmul>
 800ab5a:	2601      	movs	r6, #1
 800ab5c:	2300      	movs	r3, #0
 800ab5e:	9008      	str	r0, [sp, #32]
 800ab60:	9109      	str	r1, [sp, #36]	; 0x24
 800ab62:	4db1      	ldr	r5, [pc, #708]	; (800ae28 <_dtoa_r+0x694>)
 800ab64:	1124      	asrs	r4, r4, #4
 800ab66:	2c00      	cmp	r4, #0
 800ab68:	d000      	beq.n	800ab6c <_dtoa_r+0x3d8>
 800ab6a:	e094      	b.n	800ac96 <_dtoa_r+0x502>
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d19f      	bne.n	800aab0 <_dtoa_r+0x31c>
 800ab70:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d100      	bne.n	800ab78 <_dtoa_r+0x3e4>
 800ab76:	e09b      	b.n	800acb0 <_dtoa_r+0x51c>
 800ab78:	9c08      	ldr	r4, [sp, #32]
 800ab7a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800ab7c:	2200      	movs	r2, #0
 800ab7e:	0020      	movs	r0, r4
 800ab80:	0029      	movs	r1, r5
 800ab82:	4baa      	ldr	r3, [pc, #680]	; (800ae2c <_dtoa_r+0x698>)
 800ab84:	f7f5 fc6e 	bl	8000464 <__aeabi_dcmplt>
 800ab88:	2800      	cmp	r0, #0
 800ab8a:	d100      	bne.n	800ab8e <_dtoa_r+0x3fa>
 800ab8c:	e090      	b.n	800acb0 <_dtoa_r+0x51c>
 800ab8e:	9b07      	ldr	r3, [sp, #28]
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d100      	bne.n	800ab96 <_dtoa_r+0x402>
 800ab94:	e08c      	b.n	800acb0 <_dtoa_r+0x51c>
 800ab96:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	dd46      	ble.n	800ac2a <_dtoa_r+0x496>
 800ab9c:	9b02      	ldr	r3, [sp, #8]
 800ab9e:	2200      	movs	r2, #0
 800aba0:	0020      	movs	r0, r4
 800aba2:	0029      	movs	r1, r5
 800aba4:	1e5e      	subs	r6, r3, #1
 800aba6:	4ba2      	ldr	r3, [pc, #648]	; (800ae30 <_dtoa_r+0x69c>)
 800aba8:	f7f7 f9ee 	bl	8001f88 <__aeabi_dmul>
 800abac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800abae:	9008      	str	r0, [sp, #32]
 800abb0:	9109      	str	r1, [sp, #36]	; 0x24
 800abb2:	3301      	adds	r3, #1
 800abb4:	9310      	str	r3, [sp, #64]	; 0x40
 800abb6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800abb8:	9810      	ldr	r0, [sp, #64]	; 0x40
 800abba:	9c08      	ldr	r4, [sp, #32]
 800abbc:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800abbe:	9314      	str	r3, [sp, #80]	; 0x50
 800abc0:	f7f8 f834 	bl	8002c2c <__aeabi_i2d>
 800abc4:	0022      	movs	r2, r4
 800abc6:	002b      	movs	r3, r5
 800abc8:	f7f7 f9de 	bl	8001f88 <__aeabi_dmul>
 800abcc:	2200      	movs	r2, #0
 800abce:	4b99      	ldr	r3, [pc, #612]	; (800ae34 <_dtoa_r+0x6a0>)
 800abd0:	f7f6 fa9c 	bl	800110c <__aeabi_dadd>
 800abd4:	9010      	str	r0, [sp, #64]	; 0x40
 800abd6:	9111      	str	r1, [sp, #68]	; 0x44
 800abd8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800abda:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800abdc:	9208      	str	r2, [sp, #32]
 800abde:	9309      	str	r3, [sp, #36]	; 0x24
 800abe0:	4a95      	ldr	r2, [pc, #596]	; (800ae38 <_dtoa_r+0x6a4>)
 800abe2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800abe4:	4694      	mov	ip, r2
 800abe6:	4463      	add	r3, ip
 800abe8:	9317      	str	r3, [sp, #92]	; 0x5c
 800abea:	9309      	str	r3, [sp, #36]	; 0x24
 800abec:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d161      	bne.n	800acb6 <_dtoa_r+0x522>
 800abf2:	2200      	movs	r2, #0
 800abf4:	0020      	movs	r0, r4
 800abf6:	0029      	movs	r1, r5
 800abf8:	4b90      	ldr	r3, [pc, #576]	; (800ae3c <_dtoa_r+0x6a8>)
 800abfa:	f7f7 fc31 	bl	8002460 <__aeabi_dsub>
 800abfe:	9a08      	ldr	r2, [sp, #32]
 800ac00:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ac02:	0004      	movs	r4, r0
 800ac04:	000d      	movs	r5, r1
 800ac06:	f7f5 fc41 	bl	800048c <__aeabi_dcmpgt>
 800ac0a:	2800      	cmp	r0, #0
 800ac0c:	d000      	beq.n	800ac10 <_dtoa_r+0x47c>
 800ac0e:	e2af      	b.n	800b170 <_dtoa_r+0x9dc>
 800ac10:	488b      	ldr	r0, [pc, #556]	; (800ae40 <_dtoa_r+0x6ac>)
 800ac12:	9911      	ldr	r1, [sp, #68]	; 0x44
 800ac14:	4684      	mov	ip, r0
 800ac16:	4461      	add	r1, ip
 800ac18:	000b      	movs	r3, r1
 800ac1a:	0020      	movs	r0, r4
 800ac1c:	0029      	movs	r1, r5
 800ac1e:	9a08      	ldr	r2, [sp, #32]
 800ac20:	f7f5 fc20 	bl	8000464 <__aeabi_dcmplt>
 800ac24:	2800      	cmp	r0, #0
 800ac26:	d000      	beq.n	800ac2a <_dtoa_r+0x496>
 800ac28:	e29f      	b.n	800b16a <_dtoa_r+0x9d6>
 800ac2a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ac2c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800ac2e:	9308      	str	r3, [sp, #32]
 800ac30:	9409      	str	r4, [sp, #36]	; 0x24
 800ac32:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	da00      	bge.n	800ac3a <_dtoa_r+0x4a6>
 800ac38:	e172      	b.n	800af20 <_dtoa_r+0x78c>
 800ac3a:	9a02      	ldr	r2, [sp, #8]
 800ac3c:	2a0e      	cmp	r2, #14
 800ac3e:	dd00      	ble.n	800ac42 <_dtoa_r+0x4ae>
 800ac40:	e16e      	b.n	800af20 <_dtoa_r+0x78c>
 800ac42:	4b78      	ldr	r3, [pc, #480]	; (800ae24 <_dtoa_r+0x690>)
 800ac44:	00d2      	lsls	r2, r2, #3
 800ac46:	189b      	adds	r3, r3, r2
 800ac48:	685c      	ldr	r4, [r3, #4]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	930a      	str	r3, [sp, #40]	; 0x28
 800ac4e:	940b      	str	r4, [sp, #44]	; 0x2c
 800ac50:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	db00      	blt.n	800ac58 <_dtoa_r+0x4c4>
 800ac56:	e0f7      	b.n	800ae48 <_dtoa_r+0x6b4>
 800ac58:	9b07      	ldr	r3, [sp, #28]
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	dd00      	ble.n	800ac60 <_dtoa_r+0x4cc>
 800ac5e:	e0f3      	b.n	800ae48 <_dtoa_r+0x6b4>
 800ac60:	d000      	beq.n	800ac64 <_dtoa_r+0x4d0>
 800ac62:	e282      	b.n	800b16a <_dtoa_r+0x9d6>
 800ac64:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ac66:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ac68:	2200      	movs	r2, #0
 800ac6a:	4b74      	ldr	r3, [pc, #464]	; (800ae3c <_dtoa_r+0x6a8>)
 800ac6c:	f7f7 f98c 	bl	8001f88 <__aeabi_dmul>
 800ac70:	9a08      	ldr	r2, [sp, #32]
 800ac72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac74:	f7f5 fc14 	bl	80004a0 <__aeabi_dcmpge>
 800ac78:	9e07      	ldr	r6, [sp, #28]
 800ac7a:	0035      	movs	r5, r6
 800ac7c:	2800      	cmp	r0, #0
 800ac7e:	d000      	beq.n	800ac82 <_dtoa_r+0x4ee>
 800ac80:	e259      	b.n	800b136 <_dtoa_r+0x9a2>
 800ac82:	9b06      	ldr	r3, [sp, #24]
 800ac84:	9a06      	ldr	r2, [sp, #24]
 800ac86:	3301      	adds	r3, #1
 800ac88:	9308      	str	r3, [sp, #32]
 800ac8a:	2331      	movs	r3, #49	; 0x31
 800ac8c:	7013      	strb	r3, [r2, #0]
 800ac8e:	9b02      	ldr	r3, [sp, #8]
 800ac90:	3301      	adds	r3, #1
 800ac92:	9302      	str	r3, [sp, #8]
 800ac94:	e254      	b.n	800b140 <_dtoa_r+0x9ac>
 800ac96:	4234      	tst	r4, r6
 800ac98:	d007      	beq.n	800acaa <_dtoa_r+0x516>
 800ac9a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ac9c:	3301      	adds	r3, #1
 800ac9e:	9310      	str	r3, [sp, #64]	; 0x40
 800aca0:	682a      	ldr	r2, [r5, #0]
 800aca2:	686b      	ldr	r3, [r5, #4]
 800aca4:	f7f7 f970 	bl	8001f88 <__aeabi_dmul>
 800aca8:	0033      	movs	r3, r6
 800acaa:	1064      	asrs	r4, r4, #1
 800acac:	3508      	adds	r5, #8
 800acae:	e75a      	b.n	800ab66 <_dtoa_r+0x3d2>
 800acb0:	9e02      	ldr	r6, [sp, #8]
 800acb2:	9b07      	ldr	r3, [sp, #28]
 800acb4:	e780      	b.n	800abb8 <_dtoa_r+0x424>
 800acb6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800acb8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800acba:	1e5a      	subs	r2, r3, #1
 800acbc:	4b59      	ldr	r3, [pc, #356]	; (800ae24 <_dtoa_r+0x690>)
 800acbe:	00d2      	lsls	r2, r2, #3
 800acc0:	189b      	adds	r3, r3, r2
 800acc2:	681a      	ldr	r2, [r3, #0]
 800acc4:	685b      	ldr	r3, [r3, #4]
 800acc6:	2900      	cmp	r1, #0
 800acc8:	d051      	beq.n	800ad6e <_dtoa_r+0x5da>
 800acca:	2000      	movs	r0, #0
 800accc:	495d      	ldr	r1, [pc, #372]	; (800ae44 <_dtoa_r+0x6b0>)
 800acce:	f7f6 fd59 	bl	8001784 <__aeabi_ddiv>
 800acd2:	9a08      	ldr	r2, [sp, #32]
 800acd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800acd6:	f7f7 fbc3 	bl	8002460 <__aeabi_dsub>
 800acda:	9a06      	ldr	r2, [sp, #24]
 800acdc:	9b06      	ldr	r3, [sp, #24]
 800acde:	4694      	mov	ip, r2
 800ace0:	9317      	str	r3, [sp, #92]	; 0x5c
 800ace2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ace4:	9010      	str	r0, [sp, #64]	; 0x40
 800ace6:	9111      	str	r1, [sp, #68]	; 0x44
 800ace8:	4463      	add	r3, ip
 800acea:	9319      	str	r3, [sp, #100]	; 0x64
 800acec:	0029      	movs	r1, r5
 800acee:	0020      	movs	r0, r4
 800acf0:	f7f7 ff66 	bl	8002bc0 <__aeabi_d2iz>
 800acf4:	9014      	str	r0, [sp, #80]	; 0x50
 800acf6:	f7f7 ff99 	bl	8002c2c <__aeabi_i2d>
 800acfa:	0002      	movs	r2, r0
 800acfc:	000b      	movs	r3, r1
 800acfe:	0020      	movs	r0, r4
 800ad00:	0029      	movs	r1, r5
 800ad02:	f7f7 fbad 	bl	8002460 <__aeabi_dsub>
 800ad06:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ad08:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ad0a:	3301      	adds	r3, #1
 800ad0c:	9308      	str	r3, [sp, #32]
 800ad0e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ad10:	0004      	movs	r4, r0
 800ad12:	3330      	adds	r3, #48	; 0x30
 800ad14:	7013      	strb	r3, [r2, #0]
 800ad16:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ad18:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ad1a:	000d      	movs	r5, r1
 800ad1c:	f7f5 fba2 	bl	8000464 <__aeabi_dcmplt>
 800ad20:	2800      	cmp	r0, #0
 800ad22:	d175      	bne.n	800ae10 <_dtoa_r+0x67c>
 800ad24:	0022      	movs	r2, r4
 800ad26:	002b      	movs	r3, r5
 800ad28:	2000      	movs	r0, #0
 800ad2a:	4940      	ldr	r1, [pc, #256]	; (800ae2c <_dtoa_r+0x698>)
 800ad2c:	f7f7 fb98 	bl	8002460 <__aeabi_dsub>
 800ad30:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ad32:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ad34:	f7f5 fb96 	bl	8000464 <__aeabi_dcmplt>
 800ad38:	2800      	cmp	r0, #0
 800ad3a:	d000      	beq.n	800ad3e <_dtoa_r+0x5aa>
 800ad3c:	e0d2      	b.n	800aee4 <_dtoa_r+0x750>
 800ad3e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ad40:	9a08      	ldr	r2, [sp, #32]
 800ad42:	4293      	cmp	r3, r2
 800ad44:	d100      	bne.n	800ad48 <_dtoa_r+0x5b4>
 800ad46:	e770      	b.n	800ac2a <_dtoa_r+0x496>
 800ad48:	9810      	ldr	r0, [sp, #64]	; 0x40
 800ad4a:	9911      	ldr	r1, [sp, #68]	; 0x44
 800ad4c:	2200      	movs	r2, #0
 800ad4e:	4b38      	ldr	r3, [pc, #224]	; (800ae30 <_dtoa_r+0x69c>)
 800ad50:	f7f7 f91a 	bl	8001f88 <__aeabi_dmul>
 800ad54:	4b36      	ldr	r3, [pc, #216]	; (800ae30 <_dtoa_r+0x69c>)
 800ad56:	9010      	str	r0, [sp, #64]	; 0x40
 800ad58:	9111      	str	r1, [sp, #68]	; 0x44
 800ad5a:	2200      	movs	r2, #0
 800ad5c:	0020      	movs	r0, r4
 800ad5e:	0029      	movs	r1, r5
 800ad60:	f7f7 f912 	bl	8001f88 <__aeabi_dmul>
 800ad64:	9b08      	ldr	r3, [sp, #32]
 800ad66:	0004      	movs	r4, r0
 800ad68:	000d      	movs	r5, r1
 800ad6a:	9317      	str	r3, [sp, #92]	; 0x5c
 800ad6c:	e7be      	b.n	800acec <_dtoa_r+0x558>
 800ad6e:	9808      	ldr	r0, [sp, #32]
 800ad70:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ad72:	f7f7 f909 	bl	8001f88 <__aeabi_dmul>
 800ad76:	9a06      	ldr	r2, [sp, #24]
 800ad78:	9b06      	ldr	r3, [sp, #24]
 800ad7a:	4694      	mov	ip, r2
 800ad7c:	9308      	str	r3, [sp, #32]
 800ad7e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ad80:	9010      	str	r0, [sp, #64]	; 0x40
 800ad82:	9111      	str	r1, [sp, #68]	; 0x44
 800ad84:	4463      	add	r3, ip
 800ad86:	9319      	str	r3, [sp, #100]	; 0x64
 800ad88:	0029      	movs	r1, r5
 800ad8a:	0020      	movs	r0, r4
 800ad8c:	f7f7 ff18 	bl	8002bc0 <__aeabi_d2iz>
 800ad90:	9017      	str	r0, [sp, #92]	; 0x5c
 800ad92:	f7f7 ff4b 	bl	8002c2c <__aeabi_i2d>
 800ad96:	0002      	movs	r2, r0
 800ad98:	000b      	movs	r3, r1
 800ad9a:	0020      	movs	r0, r4
 800ad9c:	0029      	movs	r1, r5
 800ad9e:	f7f7 fb5f 	bl	8002460 <__aeabi_dsub>
 800ada2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ada4:	9a08      	ldr	r2, [sp, #32]
 800ada6:	3330      	adds	r3, #48	; 0x30
 800ada8:	7013      	strb	r3, [r2, #0]
 800adaa:	0013      	movs	r3, r2
 800adac:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800adae:	3301      	adds	r3, #1
 800adb0:	0004      	movs	r4, r0
 800adb2:	000d      	movs	r5, r1
 800adb4:	9308      	str	r3, [sp, #32]
 800adb6:	4293      	cmp	r3, r2
 800adb8:	d12c      	bne.n	800ae14 <_dtoa_r+0x680>
 800adba:	9810      	ldr	r0, [sp, #64]	; 0x40
 800adbc:	9911      	ldr	r1, [sp, #68]	; 0x44
 800adbe:	9a06      	ldr	r2, [sp, #24]
 800adc0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800adc2:	4694      	mov	ip, r2
 800adc4:	4463      	add	r3, ip
 800adc6:	2200      	movs	r2, #0
 800adc8:	9308      	str	r3, [sp, #32]
 800adca:	4b1e      	ldr	r3, [pc, #120]	; (800ae44 <_dtoa_r+0x6b0>)
 800adcc:	f7f6 f99e 	bl	800110c <__aeabi_dadd>
 800add0:	0002      	movs	r2, r0
 800add2:	000b      	movs	r3, r1
 800add4:	0020      	movs	r0, r4
 800add6:	0029      	movs	r1, r5
 800add8:	f7f5 fb58 	bl	800048c <__aeabi_dcmpgt>
 800addc:	2800      	cmp	r0, #0
 800adde:	d000      	beq.n	800ade2 <_dtoa_r+0x64e>
 800ade0:	e080      	b.n	800aee4 <_dtoa_r+0x750>
 800ade2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ade4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ade6:	2000      	movs	r0, #0
 800ade8:	4916      	ldr	r1, [pc, #88]	; (800ae44 <_dtoa_r+0x6b0>)
 800adea:	f7f7 fb39 	bl	8002460 <__aeabi_dsub>
 800adee:	0002      	movs	r2, r0
 800adf0:	000b      	movs	r3, r1
 800adf2:	0020      	movs	r0, r4
 800adf4:	0029      	movs	r1, r5
 800adf6:	f7f5 fb35 	bl	8000464 <__aeabi_dcmplt>
 800adfa:	2800      	cmp	r0, #0
 800adfc:	d100      	bne.n	800ae00 <_dtoa_r+0x66c>
 800adfe:	e714      	b.n	800ac2a <_dtoa_r+0x496>
 800ae00:	9b08      	ldr	r3, [sp, #32]
 800ae02:	001a      	movs	r2, r3
 800ae04:	3a01      	subs	r2, #1
 800ae06:	9208      	str	r2, [sp, #32]
 800ae08:	7812      	ldrb	r2, [r2, #0]
 800ae0a:	2a30      	cmp	r2, #48	; 0x30
 800ae0c:	d0f8      	beq.n	800ae00 <_dtoa_r+0x66c>
 800ae0e:	9308      	str	r3, [sp, #32]
 800ae10:	9602      	str	r6, [sp, #8]
 800ae12:	e055      	b.n	800aec0 <_dtoa_r+0x72c>
 800ae14:	2200      	movs	r2, #0
 800ae16:	4b06      	ldr	r3, [pc, #24]	; (800ae30 <_dtoa_r+0x69c>)
 800ae18:	f7f7 f8b6 	bl	8001f88 <__aeabi_dmul>
 800ae1c:	0004      	movs	r4, r0
 800ae1e:	000d      	movs	r5, r1
 800ae20:	e7b2      	b.n	800ad88 <_dtoa_r+0x5f4>
 800ae22:	46c0      	nop			; (mov r8, r8)
 800ae24:	0800e308 	.word	0x0800e308
 800ae28:	0800e2e0 	.word	0x0800e2e0
 800ae2c:	3ff00000 	.word	0x3ff00000
 800ae30:	40240000 	.word	0x40240000
 800ae34:	401c0000 	.word	0x401c0000
 800ae38:	fcc00000 	.word	0xfcc00000
 800ae3c:	40140000 	.word	0x40140000
 800ae40:	7cc00000 	.word	0x7cc00000
 800ae44:	3fe00000 	.word	0x3fe00000
 800ae48:	9b07      	ldr	r3, [sp, #28]
 800ae4a:	9e06      	ldr	r6, [sp, #24]
 800ae4c:	3b01      	subs	r3, #1
 800ae4e:	199b      	adds	r3, r3, r6
 800ae50:	930c      	str	r3, [sp, #48]	; 0x30
 800ae52:	9c08      	ldr	r4, [sp, #32]
 800ae54:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800ae56:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ae58:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ae5a:	0020      	movs	r0, r4
 800ae5c:	0029      	movs	r1, r5
 800ae5e:	f7f6 fc91 	bl	8001784 <__aeabi_ddiv>
 800ae62:	f7f7 fead 	bl	8002bc0 <__aeabi_d2iz>
 800ae66:	9007      	str	r0, [sp, #28]
 800ae68:	f7f7 fee0 	bl	8002c2c <__aeabi_i2d>
 800ae6c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ae6e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ae70:	f7f7 f88a 	bl	8001f88 <__aeabi_dmul>
 800ae74:	0002      	movs	r2, r0
 800ae76:	000b      	movs	r3, r1
 800ae78:	0020      	movs	r0, r4
 800ae7a:	0029      	movs	r1, r5
 800ae7c:	f7f7 faf0 	bl	8002460 <__aeabi_dsub>
 800ae80:	0033      	movs	r3, r6
 800ae82:	9a07      	ldr	r2, [sp, #28]
 800ae84:	3601      	adds	r6, #1
 800ae86:	3230      	adds	r2, #48	; 0x30
 800ae88:	701a      	strb	r2, [r3, #0]
 800ae8a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ae8c:	9608      	str	r6, [sp, #32]
 800ae8e:	429a      	cmp	r2, r3
 800ae90:	d139      	bne.n	800af06 <_dtoa_r+0x772>
 800ae92:	0002      	movs	r2, r0
 800ae94:	000b      	movs	r3, r1
 800ae96:	f7f6 f939 	bl	800110c <__aeabi_dadd>
 800ae9a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ae9c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ae9e:	0004      	movs	r4, r0
 800aea0:	000d      	movs	r5, r1
 800aea2:	f7f5 faf3 	bl	800048c <__aeabi_dcmpgt>
 800aea6:	2800      	cmp	r0, #0
 800aea8:	d11b      	bne.n	800aee2 <_dtoa_r+0x74e>
 800aeaa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800aeac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aeae:	0020      	movs	r0, r4
 800aeb0:	0029      	movs	r1, r5
 800aeb2:	f7f5 fad1 	bl	8000458 <__aeabi_dcmpeq>
 800aeb6:	2800      	cmp	r0, #0
 800aeb8:	d002      	beq.n	800aec0 <_dtoa_r+0x72c>
 800aeba:	9b07      	ldr	r3, [sp, #28]
 800aebc:	07db      	lsls	r3, r3, #31
 800aebe:	d410      	bmi.n	800aee2 <_dtoa_r+0x74e>
 800aec0:	0038      	movs	r0, r7
 800aec2:	9905      	ldr	r1, [sp, #20]
 800aec4:	f000 fe7e 	bl	800bbc4 <_Bfree>
 800aec8:	2300      	movs	r3, #0
 800aeca:	9a08      	ldr	r2, [sp, #32]
 800aecc:	9802      	ldr	r0, [sp, #8]
 800aece:	7013      	strb	r3, [r2, #0]
 800aed0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800aed2:	3001      	adds	r0, #1
 800aed4:	6018      	str	r0, [r3, #0]
 800aed6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d100      	bne.n	800aede <_dtoa_r+0x74a>
 800aedc:	e4a6      	b.n	800a82c <_dtoa_r+0x98>
 800aede:	601a      	str	r2, [r3, #0]
 800aee0:	e4a4      	b.n	800a82c <_dtoa_r+0x98>
 800aee2:	9e02      	ldr	r6, [sp, #8]
 800aee4:	9b08      	ldr	r3, [sp, #32]
 800aee6:	9308      	str	r3, [sp, #32]
 800aee8:	3b01      	subs	r3, #1
 800aeea:	781a      	ldrb	r2, [r3, #0]
 800aeec:	2a39      	cmp	r2, #57	; 0x39
 800aeee:	d106      	bne.n	800aefe <_dtoa_r+0x76a>
 800aef0:	9a06      	ldr	r2, [sp, #24]
 800aef2:	429a      	cmp	r2, r3
 800aef4:	d1f7      	bne.n	800aee6 <_dtoa_r+0x752>
 800aef6:	2230      	movs	r2, #48	; 0x30
 800aef8:	9906      	ldr	r1, [sp, #24]
 800aefa:	3601      	adds	r6, #1
 800aefc:	700a      	strb	r2, [r1, #0]
 800aefe:	781a      	ldrb	r2, [r3, #0]
 800af00:	3201      	adds	r2, #1
 800af02:	701a      	strb	r2, [r3, #0]
 800af04:	e784      	b.n	800ae10 <_dtoa_r+0x67c>
 800af06:	2200      	movs	r2, #0
 800af08:	4baa      	ldr	r3, [pc, #680]	; (800b1b4 <_dtoa_r+0xa20>)
 800af0a:	f7f7 f83d 	bl	8001f88 <__aeabi_dmul>
 800af0e:	2200      	movs	r2, #0
 800af10:	2300      	movs	r3, #0
 800af12:	0004      	movs	r4, r0
 800af14:	000d      	movs	r5, r1
 800af16:	f7f5 fa9f 	bl	8000458 <__aeabi_dcmpeq>
 800af1a:	2800      	cmp	r0, #0
 800af1c:	d09b      	beq.n	800ae56 <_dtoa_r+0x6c2>
 800af1e:	e7cf      	b.n	800aec0 <_dtoa_r+0x72c>
 800af20:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800af22:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800af24:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800af26:	2d00      	cmp	r5, #0
 800af28:	d012      	beq.n	800af50 <_dtoa_r+0x7bc>
 800af2a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800af2c:	2a01      	cmp	r2, #1
 800af2e:	dc66      	bgt.n	800affe <_dtoa_r+0x86a>
 800af30:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800af32:	2a00      	cmp	r2, #0
 800af34:	d05d      	beq.n	800aff2 <_dtoa_r+0x85e>
 800af36:	4aa0      	ldr	r2, [pc, #640]	; (800b1b8 <_dtoa_r+0xa24>)
 800af38:	189b      	adds	r3, r3, r2
 800af3a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800af3c:	2101      	movs	r1, #1
 800af3e:	18d2      	adds	r2, r2, r3
 800af40:	920a      	str	r2, [sp, #40]	; 0x28
 800af42:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800af44:	0038      	movs	r0, r7
 800af46:	18d3      	adds	r3, r2, r3
 800af48:	930d      	str	r3, [sp, #52]	; 0x34
 800af4a:	f000 ff37 	bl	800bdbc <__i2b>
 800af4e:	0005      	movs	r5, r0
 800af50:	2c00      	cmp	r4, #0
 800af52:	dd0e      	ble.n	800af72 <_dtoa_r+0x7de>
 800af54:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800af56:	2b00      	cmp	r3, #0
 800af58:	dd0b      	ble.n	800af72 <_dtoa_r+0x7de>
 800af5a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800af5c:	0023      	movs	r3, r4
 800af5e:	4294      	cmp	r4, r2
 800af60:	dd00      	ble.n	800af64 <_dtoa_r+0x7d0>
 800af62:	0013      	movs	r3, r2
 800af64:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800af66:	1ae4      	subs	r4, r4, r3
 800af68:	1ad2      	subs	r2, r2, r3
 800af6a:	920a      	str	r2, [sp, #40]	; 0x28
 800af6c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800af6e:	1ad3      	subs	r3, r2, r3
 800af70:	930d      	str	r3, [sp, #52]	; 0x34
 800af72:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800af74:	2b00      	cmp	r3, #0
 800af76:	d01f      	beq.n	800afb8 <_dtoa_r+0x824>
 800af78:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d054      	beq.n	800b028 <_dtoa_r+0x894>
 800af7e:	2e00      	cmp	r6, #0
 800af80:	dd11      	ble.n	800afa6 <_dtoa_r+0x812>
 800af82:	0029      	movs	r1, r5
 800af84:	0032      	movs	r2, r6
 800af86:	0038      	movs	r0, r7
 800af88:	f000 ffde 	bl	800bf48 <__pow5mult>
 800af8c:	9a05      	ldr	r2, [sp, #20]
 800af8e:	0001      	movs	r1, r0
 800af90:	0005      	movs	r5, r0
 800af92:	0038      	movs	r0, r7
 800af94:	f000 ff28 	bl	800bde8 <__multiply>
 800af98:	9905      	ldr	r1, [sp, #20]
 800af9a:	9014      	str	r0, [sp, #80]	; 0x50
 800af9c:	0038      	movs	r0, r7
 800af9e:	f000 fe11 	bl	800bbc4 <_Bfree>
 800afa2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800afa4:	9305      	str	r3, [sp, #20]
 800afa6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800afa8:	1b9a      	subs	r2, r3, r6
 800afaa:	42b3      	cmp	r3, r6
 800afac:	d004      	beq.n	800afb8 <_dtoa_r+0x824>
 800afae:	0038      	movs	r0, r7
 800afb0:	9905      	ldr	r1, [sp, #20]
 800afb2:	f000 ffc9 	bl	800bf48 <__pow5mult>
 800afb6:	9005      	str	r0, [sp, #20]
 800afb8:	2101      	movs	r1, #1
 800afba:	0038      	movs	r0, r7
 800afbc:	f000 fefe 	bl	800bdbc <__i2b>
 800afc0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800afc2:	0006      	movs	r6, r0
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	dd31      	ble.n	800b02c <_dtoa_r+0x898>
 800afc8:	001a      	movs	r2, r3
 800afca:	0001      	movs	r1, r0
 800afcc:	0038      	movs	r0, r7
 800afce:	f000 ffbb 	bl	800bf48 <__pow5mult>
 800afd2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800afd4:	0006      	movs	r6, r0
 800afd6:	2b01      	cmp	r3, #1
 800afd8:	dd2d      	ble.n	800b036 <_dtoa_r+0x8a2>
 800afda:	2300      	movs	r3, #0
 800afdc:	930e      	str	r3, [sp, #56]	; 0x38
 800afde:	6933      	ldr	r3, [r6, #16]
 800afe0:	3303      	adds	r3, #3
 800afe2:	009b      	lsls	r3, r3, #2
 800afe4:	18f3      	adds	r3, r6, r3
 800afe6:	6858      	ldr	r0, [r3, #4]
 800afe8:	f000 fea0 	bl	800bd2c <__hi0bits>
 800afec:	2320      	movs	r3, #32
 800afee:	1a18      	subs	r0, r3, r0
 800aff0:	e039      	b.n	800b066 <_dtoa_r+0x8d2>
 800aff2:	2336      	movs	r3, #54	; 0x36
 800aff4:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800aff6:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800aff8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800affa:	1a9b      	subs	r3, r3, r2
 800affc:	e79d      	b.n	800af3a <_dtoa_r+0x7a6>
 800affe:	9b07      	ldr	r3, [sp, #28]
 800b000:	1e5e      	subs	r6, r3, #1
 800b002:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b004:	42b3      	cmp	r3, r6
 800b006:	db07      	blt.n	800b018 <_dtoa_r+0x884>
 800b008:	1b9e      	subs	r6, r3, r6
 800b00a:	9b07      	ldr	r3, [sp, #28]
 800b00c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800b00e:	2b00      	cmp	r3, #0
 800b010:	da93      	bge.n	800af3a <_dtoa_r+0x7a6>
 800b012:	1ae4      	subs	r4, r4, r3
 800b014:	2300      	movs	r3, #0
 800b016:	e790      	b.n	800af3a <_dtoa_r+0x7a6>
 800b018:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b01a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b01c:	1af3      	subs	r3, r6, r3
 800b01e:	18d3      	adds	r3, r2, r3
 800b020:	960e      	str	r6, [sp, #56]	; 0x38
 800b022:	9315      	str	r3, [sp, #84]	; 0x54
 800b024:	2600      	movs	r6, #0
 800b026:	e7f0      	b.n	800b00a <_dtoa_r+0x876>
 800b028:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b02a:	e7c0      	b.n	800afae <_dtoa_r+0x81a>
 800b02c:	2300      	movs	r3, #0
 800b02e:	930e      	str	r3, [sp, #56]	; 0x38
 800b030:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b032:	2b01      	cmp	r3, #1
 800b034:	dc13      	bgt.n	800b05e <_dtoa_r+0x8ca>
 800b036:	2300      	movs	r3, #0
 800b038:	930e      	str	r3, [sp, #56]	; 0x38
 800b03a:	9b08      	ldr	r3, [sp, #32]
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d10e      	bne.n	800b05e <_dtoa_r+0x8ca>
 800b040:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b042:	031b      	lsls	r3, r3, #12
 800b044:	d10b      	bne.n	800b05e <_dtoa_r+0x8ca>
 800b046:	4b5d      	ldr	r3, [pc, #372]	; (800b1bc <_dtoa_r+0xa28>)
 800b048:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b04a:	4213      	tst	r3, r2
 800b04c:	d007      	beq.n	800b05e <_dtoa_r+0x8ca>
 800b04e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b050:	3301      	adds	r3, #1
 800b052:	930a      	str	r3, [sp, #40]	; 0x28
 800b054:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b056:	3301      	adds	r3, #1
 800b058:	930d      	str	r3, [sp, #52]	; 0x34
 800b05a:	2301      	movs	r3, #1
 800b05c:	930e      	str	r3, [sp, #56]	; 0x38
 800b05e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b060:	2001      	movs	r0, #1
 800b062:	2b00      	cmp	r3, #0
 800b064:	d1bb      	bne.n	800afde <_dtoa_r+0x84a>
 800b066:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b068:	221f      	movs	r2, #31
 800b06a:	1818      	adds	r0, r3, r0
 800b06c:	0003      	movs	r3, r0
 800b06e:	4013      	ands	r3, r2
 800b070:	4210      	tst	r0, r2
 800b072:	d046      	beq.n	800b102 <_dtoa_r+0x96e>
 800b074:	3201      	adds	r2, #1
 800b076:	1ad2      	subs	r2, r2, r3
 800b078:	2a04      	cmp	r2, #4
 800b07a:	dd3f      	ble.n	800b0fc <_dtoa_r+0x968>
 800b07c:	221c      	movs	r2, #28
 800b07e:	1ad3      	subs	r3, r2, r3
 800b080:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b082:	18e4      	adds	r4, r4, r3
 800b084:	18d2      	adds	r2, r2, r3
 800b086:	920a      	str	r2, [sp, #40]	; 0x28
 800b088:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b08a:	18d3      	adds	r3, r2, r3
 800b08c:	930d      	str	r3, [sp, #52]	; 0x34
 800b08e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b090:	2b00      	cmp	r3, #0
 800b092:	dd05      	ble.n	800b0a0 <_dtoa_r+0x90c>
 800b094:	001a      	movs	r2, r3
 800b096:	0038      	movs	r0, r7
 800b098:	9905      	ldr	r1, [sp, #20]
 800b09a:	f000 ffb1 	bl	800c000 <__lshift>
 800b09e:	9005      	str	r0, [sp, #20]
 800b0a0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	dd05      	ble.n	800b0b2 <_dtoa_r+0x91e>
 800b0a6:	0031      	movs	r1, r6
 800b0a8:	001a      	movs	r2, r3
 800b0aa:	0038      	movs	r0, r7
 800b0ac:	f000 ffa8 	bl	800c000 <__lshift>
 800b0b0:	0006      	movs	r6, r0
 800b0b2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d026      	beq.n	800b106 <_dtoa_r+0x972>
 800b0b8:	0031      	movs	r1, r6
 800b0ba:	9805      	ldr	r0, [sp, #20]
 800b0bc:	f001 f80e 	bl	800c0dc <__mcmp>
 800b0c0:	2800      	cmp	r0, #0
 800b0c2:	da20      	bge.n	800b106 <_dtoa_r+0x972>
 800b0c4:	9b02      	ldr	r3, [sp, #8]
 800b0c6:	220a      	movs	r2, #10
 800b0c8:	3b01      	subs	r3, #1
 800b0ca:	9302      	str	r3, [sp, #8]
 800b0cc:	0038      	movs	r0, r7
 800b0ce:	2300      	movs	r3, #0
 800b0d0:	9905      	ldr	r1, [sp, #20]
 800b0d2:	f000 fd9b 	bl	800bc0c <__multadd>
 800b0d6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b0d8:	9005      	str	r0, [sp, #20]
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d100      	bne.n	800b0e0 <_dtoa_r+0x94c>
 800b0de:	e166      	b.n	800b3ae <_dtoa_r+0xc1a>
 800b0e0:	2300      	movs	r3, #0
 800b0e2:	0029      	movs	r1, r5
 800b0e4:	220a      	movs	r2, #10
 800b0e6:	0038      	movs	r0, r7
 800b0e8:	f000 fd90 	bl	800bc0c <__multadd>
 800b0ec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b0ee:	0005      	movs	r5, r0
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	dc47      	bgt.n	800b184 <_dtoa_r+0x9f0>
 800b0f4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b0f6:	2b02      	cmp	r3, #2
 800b0f8:	dc0d      	bgt.n	800b116 <_dtoa_r+0x982>
 800b0fa:	e043      	b.n	800b184 <_dtoa_r+0x9f0>
 800b0fc:	2a04      	cmp	r2, #4
 800b0fe:	d0c6      	beq.n	800b08e <_dtoa_r+0x8fa>
 800b100:	0013      	movs	r3, r2
 800b102:	331c      	adds	r3, #28
 800b104:	e7bc      	b.n	800b080 <_dtoa_r+0x8ec>
 800b106:	9b07      	ldr	r3, [sp, #28]
 800b108:	2b00      	cmp	r3, #0
 800b10a:	dc35      	bgt.n	800b178 <_dtoa_r+0x9e4>
 800b10c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b10e:	2b02      	cmp	r3, #2
 800b110:	dd32      	ble.n	800b178 <_dtoa_r+0x9e4>
 800b112:	9b07      	ldr	r3, [sp, #28]
 800b114:	930c      	str	r3, [sp, #48]	; 0x30
 800b116:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d10c      	bne.n	800b136 <_dtoa_r+0x9a2>
 800b11c:	0031      	movs	r1, r6
 800b11e:	2205      	movs	r2, #5
 800b120:	0038      	movs	r0, r7
 800b122:	f000 fd73 	bl	800bc0c <__multadd>
 800b126:	0006      	movs	r6, r0
 800b128:	0001      	movs	r1, r0
 800b12a:	9805      	ldr	r0, [sp, #20]
 800b12c:	f000 ffd6 	bl	800c0dc <__mcmp>
 800b130:	2800      	cmp	r0, #0
 800b132:	dd00      	ble.n	800b136 <_dtoa_r+0x9a2>
 800b134:	e5a5      	b.n	800ac82 <_dtoa_r+0x4ee>
 800b136:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b138:	43db      	mvns	r3, r3
 800b13a:	9302      	str	r3, [sp, #8]
 800b13c:	9b06      	ldr	r3, [sp, #24]
 800b13e:	9308      	str	r3, [sp, #32]
 800b140:	2400      	movs	r4, #0
 800b142:	0031      	movs	r1, r6
 800b144:	0038      	movs	r0, r7
 800b146:	f000 fd3d 	bl	800bbc4 <_Bfree>
 800b14a:	2d00      	cmp	r5, #0
 800b14c:	d100      	bne.n	800b150 <_dtoa_r+0x9bc>
 800b14e:	e6b7      	b.n	800aec0 <_dtoa_r+0x72c>
 800b150:	2c00      	cmp	r4, #0
 800b152:	d005      	beq.n	800b160 <_dtoa_r+0x9cc>
 800b154:	42ac      	cmp	r4, r5
 800b156:	d003      	beq.n	800b160 <_dtoa_r+0x9cc>
 800b158:	0021      	movs	r1, r4
 800b15a:	0038      	movs	r0, r7
 800b15c:	f000 fd32 	bl	800bbc4 <_Bfree>
 800b160:	0029      	movs	r1, r5
 800b162:	0038      	movs	r0, r7
 800b164:	f000 fd2e 	bl	800bbc4 <_Bfree>
 800b168:	e6aa      	b.n	800aec0 <_dtoa_r+0x72c>
 800b16a:	2600      	movs	r6, #0
 800b16c:	0035      	movs	r5, r6
 800b16e:	e7e2      	b.n	800b136 <_dtoa_r+0x9a2>
 800b170:	9602      	str	r6, [sp, #8]
 800b172:	9e14      	ldr	r6, [sp, #80]	; 0x50
 800b174:	0035      	movs	r5, r6
 800b176:	e584      	b.n	800ac82 <_dtoa_r+0x4ee>
 800b178:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d100      	bne.n	800b180 <_dtoa_r+0x9ec>
 800b17e:	e0ce      	b.n	800b31e <_dtoa_r+0xb8a>
 800b180:	9b07      	ldr	r3, [sp, #28]
 800b182:	930c      	str	r3, [sp, #48]	; 0x30
 800b184:	2c00      	cmp	r4, #0
 800b186:	dd05      	ble.n	800b194 <_dtoa_r+0xa00>
 800b188:	0029      	movs	r1, r5
 800b18a:	0022      	movs	r2, r4
 800b18c:	0038      	movs	r0, r7
 800b18e:	f000 ff37 	bl	800c000 <__lshift>
 800b192:	0005      	movs	r5, r0
 800b194:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b196:	0028      	movs	r0, r5
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d022      	beq.n	800b1e2 <_dtoa_r+0xa4e>
 800b19c:	0038      	movs	r0, r7
 800b19e:	6869      	ldr	r1, [r5, #4]
 800b1a0:	f000 fccc 	bl	800bb3c <_Balloc>
 800b1a4:	1e04      	subs	r4, r0, #0
 800b1a6:	d10f      	bne.n	800b1c8 <_dtoa_r+0xa34>
 800b1a8:	0002      	movs	r2, r0
 800b1aa:	4b05      	ldr	r3, [pc, #20]	; (800b1c0 <_dtoa_r+0xa2c>)
 800b1ac:	4905      	ldr	r1, [pc, #20]	; (800b1c4 <_dtoa_r+0xa30>)
 800b1ae:	f7ff fb06 	bl	800a7be <_dtoa_r+0x2a>
 800b1b2:	46c0      	nop			; (mov r8, r8)
 800b1b4:	40240000 	.word	0x40240000
 800b1b8:	00000433 	.word	0x00000433
 800b1bc:	7ff00000 	.word	0x7ff00000
 800b1c0:	0800e1f8 	.word	0x0800e1f8
 800b1c4:	000002ea 	.word	0x000002ea
 800b1c8:	0029      	movs	r1, r5
 800b1ca:	692b      	ldr	r3, [r5, #16]
 800b1cc:	310c      	adds	r1, #12
 800b1ce:	1c9a      	adds	r2, r3, #2
 800b1d0:	0092      	lsls	r2, r2, #2
 800b1d2:	300c      	adds	r0, #12
 800b1d4:	f7fd fb20 	bl	8008818 <memcpy>
 800b1d8:	2201      	movs	r2, #1
 800b1da:	0021      	movs	r1, r4
 800b1dc:	0038      	movs	r0, r7
 800b1de:	f000 ff0f 	bl	800c000 <__lshift>
 800b1e2:	9b06      	ldr	r3, [sp, #24]
 800b1e4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b1e6:	930a      	str	r3, [sp, #40]	; 0x28
 800b1e8:	3b01      	subs	r3, #1
 800b1ea:	189b      	adds	r3, r3, r2
 800b1ec:	2201      	movs	r2, #1
 800b1ee:	002c      	movs	r4, r5
 800b1f0:	0005      	movs	r5, r0
 800b1f2:	9314      	str	r3, [sp, #80]	; 0x50
 800b1f4:	9b08      	ldr	r3, [sp, #32]
 800b1f6:	4013      	ands	r3, r2
 800b1f8:	930f      	str	r3, [sp, #60]	; 0x3c
 800b1fa:	0031      	movs	r1, r6
 800b1fc:	9805      	ldr	r0, [sp, #20]
 800b1fe:	f7ff fa3d 	bl	800a67c <quorem>
 800b202:	0003      	movs	r3, r0
 800b204:	0021      	movs	r1, r4
 800b206:	3330      	adds	r3, #48	; 0x30
 800b208:	900d      	str	r0, [sp, #52]	; 0x34
 800b20a:	9805      	ldr	r0, [sp, #20]
 800b20c:	9307      	str	r3, [sp, #28]
 800b20e:	f000 ff65 	bl	800c0dc <__mcmp>
 800b212:	002a      	movs	r2, r5
 800b214:	900e      	str	r0, [sp, #56]	; 0x38
 800b216:	0031      	movs	r1, r6
 800b218:	0038      	movs	r0, r7
 800b21a:	f000 ff7b 	bl	800c114 <__mdiff>
 800b21e:	68c3      	ldr	r3, [r0, #12]
 800b220:	9008      	str	r0, [sp, #32]
 800b222:	9310      	str	r3, [sp, #64]	; 0x40
 800b224:	2301      	movs	r3, #1
 800b226:	930c      	str	r3, [sp, #48]	; 0x30
 800b228:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d104      	bne.n	800b238 <_dtoa_r+0xaa4>
 800b22e:	0001      	movs	r1, r0
 800b230:	9805      	ldr	r0, [sp, #20]
 800b232:	f000 ff53 	bl	800c0dc <__mcmp>
 800b236:	900c      	str	r0, [sp, #48]	; 0x30
 800b238:	0038      	movs	r0, r7
 800b23a:	9908      	ldr	r1, [sp, #32]
 800b23c:	f000 fcc2 	bl	800bbc4 <_Bfree>
 800b240:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b242:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b244:	3301      	adds	r3, #1
 800b246:	9308      	str	r3, [sp, #32]
 800b248:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b24a:	4313      	orrs	r3, r2
 800b24c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b24e:	4313      	orrs	r3, r2
 800b250:	d10c      	bne.n	800b26c <_dtoa_r+0xad8>
 800b252:	9b07      	ldr	r3, [sp, #28]
 800b254:	2b39      	cmp	r3, #57	; 0x39
 800b256:	d026      	beq.n	800b2a6 <_dtoa_r+0xb12>
 800b258:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	dd02      	ble.n	800b264 <_dtoa_r+0xad0>
 800b25e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b260:	3331      	adds	r3, #49	; 0x31
 800b262:	9307      	str	r3, [sp, #28]
 800b264:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b266:	9a07      	ldr	r2, [sp, #28]
 800b268:	701a      	strb	r2, [r3, #0]
 800b26a:	e76a      	b.n	800b142 <_dtoa_r+0x9ae>
 800b26c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b26e:	2b00      	cmp	r3, #0
 800b270:	db04      	blt.n	800b27c <_dtoa_r+0xae8>
 800b272:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800b274:	4313      	orrs	r3, r2
 800b276:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b278:	4313      	orrs	r3, r2
 800b27a:	d11f      	bne.n	800b2bc <_dtoa_r+0xb28>
 800b27c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b27e:	2b00      	cmp	r3, #0
 800b280:	ddf0      	ble.n	800b264 <_dtoa_r+0xad0>
 800b282:	9905      	ldr	r1, [sp, #20]
 800b284:	2201      	movs	r2, #1
 800b286:	0038      	movs	r0, r7
 800b288:	f000 feba 	bl	800c000 <__lshift>
 800b28c:	0031      	movs	r1, r6
 800b28e:	9005      	str	r0, [sp, #20]
 800b290:	f000 ff24 	bl	800c0dc <__mcmp>
 800b294:	2800      	cmp	r0, #0
 800b296:	dc03      	bgt.n	800b2a0 <_dtoa_r+0xb0c>
 800b298:	d1e4      	bne.n	800b264 <_dtoa_r+0xad0>
 800b29a:	9b07      	ldr	r3, [sp, #28]
 800b29c:	07db      	lsls	r3, r3, #31
 800b29e:	d5e1      	bpl.n	800b264 <_dtoa_r+0xad0>
 800b2a0:	9b07      	ldr	r3, [sp, #28]
 800b2a2:	2b39      	cmp	r3, #57	; 0x39
 800b2a4:	d1db      	bne.n	800b25e <_dtoa_r+0xaca>
 800b2a6:	2339      	movs	r3, #57	; 0x39
 800b2a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b2aa:	7013      	strb	r3, [r2, #0]
 800b2ac:	9b08      	ldr	r3, [sp, #32]
 800b2ae:	9308      	str	r3, [sp, #32]
 800b2b0:	3b01      	subs	r3, #1
 800b2b2:	781a      	ldrb	r2, [r3, #0]
 800b2b4:	2a39      	cmp	r2, #57	; 0x39
 800b2b6:	d068      	beq.n	800b38a <_dtoa_r+0xbf6>
 800b2b8:	3201      	adds	r2, #1
 800b2ba:	e7d5      	b.n	800b268 <_dtoa_r+0xad4>
 800b2bc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	dd07      	ble.n	800b2d2 <_dtoa_r+0xb3e>
 800b2c2:	9b07      	ldr	r3, [sp, #28]
 800b2c4:	2b39      	cmp	r3, #57	; 0x39
 800b2c6:	d0ee      	beq.n	800b2a6 <_dtoa_r+0xb12>
 800b2c8:	9b07      	ldr	r3, [sp, #28]
 800b2ca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b2cc:	3301      	adds	r3, #1
 800b2ce:	7013      	strb	r3, [r2, #0]
 800b2d0:	e737      	b.n	800b142 <_dtoa_r+0x9ae>
 800b2d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b2d4:	9a07      	ldr	r2, [sp, #28]
 800b2d6:	701a      	strb	r2, [r3, #0]
 800b2d8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b2da:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b2dc:	4293      	cmp	r3, r2
 800b2de:	d03e      	beq.n	800b35e <_dtoa_r+0xbca>
 800b2e0:	2300      	movs	r3, #0
 800b2e2:	220a      	movs	r2, #10
 800b2e4:	9905      	ldr	r1, [sp, #20]
 800b2e6:	0038      	movs	r0, r7
 800b2e8:	f000 fc90 	bl	800bc0c <__multadd>
 800b2ec:	2300      	movs	r3, #0
 800b2ee:	9005      	str	r0, [sp, #20]
 800b2f0:	220a      	movs	r2, #10
 800b2f2:	0021      	movs	r1, r4
 800b2f4:	0038      	movs	r0, r7
 800b2f6:	42ac      	cmp	r4, r5
 800b2f8:	d106      	bne.n	800b308 <_dtoa_r+0xb74>
 800b2fa:	f000 fc87 	bl	800bc0c <__multadd>
 800b2fe:	0004      	movs	r4, r0
 800b300:	0005      	movs	r5, r0
 800b302:	9b08      	ldr	r3, [sp, #32]
 800b304:	930a      	str	r3, [sp, #40]	; 0x28
 800b306:	e778      	b.n	800b1fa <_dtoa_r+0xa66>
 800b308:	f000 fc80 	bl	800bc0c <__multadd>
 800b30c:	0029      	movs	r1, r5
 800b30e:	0004      	movs	r4, r0
 800b310:	2300      	movs	r3, #0
 800b312:	220a      	movs	r2, #10
 800b314:	0038      	movs	r0, r7
 800b316:	f000 fc79 	bl	800bc0c <__multadd>
 800b31a:	0005      	movs	r5, r0
 800b31c:	e7f1      	b.n	800b302 <_dtoa_r+0xb6e>
 800b31e:	9b07      	ldr	r3, [sp, #28]
 800b320:	930c      	str	r3, [sp, #48]	; 0x30
 800b322:	2400      	movs	r4, #0
 800b324:	0031      	movs	r1, r6
 800b326:	9805      	ldr	r0, [sp, #20]
 800b328:	f7ff f9a8 	bl	800a67c <quorem>
 800b32c:	9b06      	ldr	r3, [sp, #24]
 800b32e:	3030      	adds	r0, #48	; 0x30
 800b330:	5518      	strb	r0, [r3, r4]
 800b332:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b334:	3401      	adds	r4, #1
 800b336:	9007      	str	r0, [sp, #28]
 800b338:	42a3      	cmp	r3, r4
 800b33a:	dd07      	ble.n	800b34c <_dtoa_r+0xbb8>
 800b33c:	2300      	movs	r3, #0
 800b33e:	220a      	movs	r2, #10
 800b340:	0038      	movs	r0, r7
 800b342:	9905      	ldr	r1, [sp, #20]
 800b344:	f000 fc62 	bl	800bc0c <__multadd>
 800b348:	9005      	str	r0, [sp, #20]
 800b34a:	e7eb      	b.n	800b324 <_dtoa_r+0xb90>
 800b34c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b34e:	2001      	movs	r0, #1
 800b350:	2b00      	cmp	r3, #0
 800b352:	dd00      	ble.n	800b356 <_dtoa_r+0xbc2>
 800b354:	0018      	movs	r0, r3
 800b356:	2400      	movs	r4, #0
 800b358:	9b06      	ldr	r3, [sp, #24]
 800b35a:	181b      	adds	r3, r3, r0
 800b35c:	9308      	str	r3, [sp, #32]
 800b35e:	9905      	ldr	r1, [sp, #20]
 800b360:	2201      	movs	r2, #1
 800b362:	0038      	movs	r0, r7
 800b364:	f000 fe4c 	bl	800c000 <__lshift>
 800b368:	0031      	movs	r1, r6
 800b36a:	9005      	str	r0, [sp, #20]
 800b36c:	f000 feb6 	bl	800c0dc <__mcmp>
 800b370:	2800      	cmp	r0, #0
 800b372:	dc9b      	bgt.n	800b2ac <_dtoa_r+0xb18>
 800b374:	d102      	bne.n	800b37c <_dtoa_r+0xbe8>
 800b376:	9b07      	ldr	r3, [sp, #28]
 800b378:	07db      	lsls	r3, r3, #31
 800b37a:	d497      	bmi.n	800b2ac <_dtoa_r+0xb18>
 800b37c:	9b08      	ldr	r3, [sp, #32]
 800b37e:	9308      	str	r3, [sp, #32]
 800b380:	3b01      	subs	r3, #1
 800b382:	781a      	ldrb	r2, [r3, #0]
 800b384:	2a30      	cmp	r2, #48	; 0x30
 800b386:	d0fa      	beq.n	800b37e <_dtoa_r+0xbea>
 800b388:	e6db      	b.n	800b142 <_dtoa_r+0x9ae>
 800b38a:	9a06      	ldr	r2, [sp, #24]
 800b38c:	429a      	cmp	r2, r3
 800b38e:	d18e      	bne.n	800b2ae <_dtoa_r+0xb1a>
 800b390:	9b02      	ldr	r3, [sp, #8]
 800b392:	3301      	adds	r3, #1
 800b394:	9302      	str	r3, [sp, #8]
 800b396:	2331      	movs	r3, #49	; 0x31
 800b398:	e799      	b.n	800b2ce <_dtoa_r+0xb3a>
 800b39a:	4b09      	ldr	r3, [pc, #36]	; (800b3c0 <_dtoa_r+0xc2c>)
 800b39c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800b39e:	9306      	str	r3, [sp, #24]
 800b3a0:	4b08      	ldr	r3, [pc, #32]	; (800b3c4 <_dtoa_r+0xc30>)
 800b3a2:	2a00      	cmp	r2, #0
 800b3a4:	d001      	beq.n	800b3aa <_dtoa_r+0xc16>
 800b3a6:	f7ff fa3f 	bl	800a828 <_dtoa_r+0x94>
 800b3aa:	f7ff fa3f 	bl	800a82c <_dtoa_r+0x98>
 800b3ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	dcb6      	bgt.n	800b322 <_dtoa_r+0xb8e>
 800b3b4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b3b6:	2b02      	cmp	r3, #2
 800b3b8:	dd00      	ble.n	800b3bc <_dtoa_r+0xc28>
 800b3ba:	e6ac      	b.n	800b116 <_dtoa_r+0x982>
 800b3bc:	e7b1      	b.n	800b322 <_dtoa_r+0xb8e>
 800b3be:	46c0      	nop			; (mov r8, r8)
 800b3c0:	0800e179 	.word	0x0800e179
 800b3c4:	0800e181 	.word	0x0800e181

0800b3c8 <rshift>:
 800b3c8:	0002      	movs	r2, r0
 800b3ca:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b3cc:	6904      	ldr	r4, [r0, #16]
 800b3ce:	3214      	adds	r2, #20
 800b3d0:	0013      	movs	r3, r2
 800b3d2:	b085      	sub	sp, #20
 800b3d4:	114f      	asrs	r7, r1, #5
 800b3d6:	42bc      	cmp	r4, r7
 800b3d8:	dd31      	ble.n	800b43e <rshift+0x76>
 800b3da:	00bb      	lsls	r3, r7, #2
 800b3dc:	18d3      	adds	r3, r2, r3
 800b3de:	261f      	movs	r6, #31
 800b3e0:	9301      	str	r3, [sp, #4]
 800b3e2:	000b      	movs	r3, r1
 800b3e4:	00a5      	lsls	r5, r4, #2
 800b3e6:	4033      	ands	r3, r6
 800b3e8:	1955      	adds	r5, r2, r5
 800b3ea:	9302      	str	r3, [sp, #8]
 800b3ec:	4231      	tst	r1, r6
 800b3ee:	d10c      	bne.n	800b40a <rshift+0x42>
 800b3f0:	0016      	movs	r6, r2
 800b3f2:	9901      	ldr	r1, [sp, #4]
 800b3f4:	428d      	cmp	r5, r1
 800b3f6:	d838      	bhi.n	800b46a <rshift+0xa2>
 800b3f8:	9901      	ldr	r1, [sp, #4]
 800b3fa:	2300      	movs	r3, #0
 800b3fc:	3903      	subs	r1, #3
 800b3fe:	428d      	cmp	r5, r1
 800b400:	d301      	bcc.n	800b406 <rshift+0x3e>
 800b402:	1be3      	subs	r3, r4, r7
 800b404:	009b      	lsls	r3, r3, #2
 800b406:	18d3      	adds	r3, r2, r3
 800b408:	e019      	b.n	800b43e <rshift+0x76>
 800b40a:	2120      	movs	r1, #32
 800b40c:	9b02      	ldr	r3, [sp, #8]
 800b40e:	9e01      	ldr	r6, [sp, #4]
 800b410:	1acb      	subs	r3, r1, r3
 800b412:	9303      	str	r3, [sp, #12]
 800b414:	ce02      	ldmia	r6!, {r1}
 800b416:	9b02      	ldr	r3, [sp, #8]
 800b418:	4694      	mov	ip, r2
 800b41a:	40d9      	lsrs	r1, r3
 800b41c:	9100      	str	r1, [sp, #0]
 800b41e:	42b5      	cmp	r5, r6
 800b420:	d816      	bhi.n	800b450 <rshift+0x88>
 800b422:	9e01      	ldr	r6, [sp, #4]
 800b424:	2300      	movs	r3, #0
 800b426:	3601      	adds	r6, #1
 800b428:	42b5      	cmp	r5, r6
 800b42a:	d302      	bcc.n	800b432 <rshift+0x6a>
 800b42c:	1be3      	subs	r3, r4, r7
 800b42e:	009b      	lsls	r3, r3, #2
 800b430:	3b04      	subs	r3, #4
 800b432:	9900      	ldr	r1, [sp, #0]
 800b434:	18d3      	adds	r3, r2, r3
 800b436:	6019      	str	r1, [r3, #0]
 800b438:	2900      	cmp	r1, #0
 800b43a:	d000      	beq.n	800b43e <rshift+0x76>
 800b43c:	3304      	adds	r3, #4
 800b43e:	1a99      	subs	r1, r3, r2
 800b440:	1089      	asrs	r1, r1, #2
 800b442:	6101      	str	r1, [r0, #16]
 800b444:	4293      	cmp	r3, r2
 800b446:	d101      	bne.n	800b44c <rshift+0x84>
 800b448:	2300      	movs	r3, #0
 800b44a:	6143      	str	r3, [r0, #20]
 800b44c:	b005      	add	sp, #20
 800b44e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b450:	6833      	ldr	r3, [r6, #0]
 800b452:	9903      	ldr	r1, [sp, #12]
 800b454:	408b      	lsls	r3, r1
 800b456:	9900      	ldr	r1, [sp, #0]
 800b458:	4319      	orrs	r1, r3
 800b45a:	4663      	mov	r3, ip
 800b45c:	c302      	stmia	r3!, {r1}
 800b45e:	469c      	mov	ip, r3
 800b460:	ce02      	ldmia	r6!, {r1}
 800b462:	9b02      	ldr	r3, [sp, #8]
 800b464:	40d9      	lsrs	r1, r3
 800b466:	9100      	str	r1, [sp, #0]
 800b468:	e7d9      	b.n	800b41e <rshift+0x56>
 800b46a:	c908      	ldmia	r1!, {r3}
 800b46c:	c608      	stmia	r6!, {r3}
 800b46e:	e7c1      	b.n	800b3f4 <rshift+0x2c>

0800b470 <__hexdig_fun>:
 800b470:	0002      	movs	r2, r0
 800b472:	3a30      	subs	r2, #48	; 0x30
 800b474:	0003      	movs	r3, r0
 800b476:	2a09      	cmp	r2, #9
 800b478:	d802      	bhi.n	800b480 <__hexdig_fun+0x10>
 800b47a:	3b20      	subs	r3, #32
 800b47c:	b2d8      	uxtb	r0, r3
 800b47e:	4770      	bx	lr
 800b480:	0002      	movs	r2, r0
 800b482:	3a61      	subs	r2, #97	; 0x61
 800b484:	2a05      	cmp	r2, #5
 800b486:	d801      	bhi.n	800b48c <__hexdig_fun+0x1c>
 800b488:	3b47      	subs	r3, #71	; 0x47
 800b48a:	e7f7      	b.n	800b47c <__hexdig_fun+0xc>
 800b48c:	001a      	movs	r2, r3
 800b48e:	3a41      	subs	r2, #65	; 0x41
 800b490:	2000      	movs	r0, #0
 800b492:	2a05      	cmp	r2, #5
 800b494:	d8f3      	bhi.n	800b47e <__hexdig_fun+0xe>
 800b496:	3b27      	subs	r3, #39	; 0x27
 800b498:	e7f0      	b.n	800b47c <__hexdig_fun+0xc>
	...

0800b49c <__gethex>:
 800b49c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b49e:	b08d      	sub	sp, #52	; 0x34
 800b4a0:	930a      	str	r3, [sp, #40]	; 0x28
 800b4a2:	4bbf      	ldr	r3, [pc, #764]	; (800b7a0 <__gethex+0x304>)
 800b4a4:	9005      	str	r0, [sp, #20]
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	9109      	str	r1, [sp, #36]	; 0x24
 800b4aa:	0018      	movs	r0, r3
 800b4ac:	9202      	str	r2, [sp, #8]
 800b4ae:	9307      	str	r3, [sp, #28]
 800b4b0:	f7f4 fe30 	bl	8000114 <strlen>
 800b4b4:	2202      	movs	r2, #2
 800b4b6:	9b07      	ldr	r3, [sp, #28]
 800b4b8:	4252      	negs	r2, r2
 800b4ba:	181b      	adds	r3, r3, r0
 800b4bc:	3b01      	subs	r3, #1
 800b4be:	781b      	ldrb	r3, [r3, #0]
 800b4c0:	9003      	str	r0, [sp, #12]
 800b4c2:	930b      	str	r3, [sp, #44]	; 0x2c
 800b4c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b4c6:	6819      	ldr	r1, [r3, #0]
 800b4c8:	1c8b      	adds	r3, r1, #2
 800b4ca:	1a52      	subs	r2, r2, r1
 800b4cc:	18d1      	adds	r1, r2, r3
 800b4ce:	9301      	str	r3, [sp, #4]
 800b4d0:	9108      	str	r1, [sp, #32]
 800b4d2:	9901      	ldr	r1, [sp, #4]
 800b4d4:	3301      	adds	r3, #1
 800b4d6:	7808      	ldrb	r0, [r1, #0]
 800b4d8:	2830      	cmp	r0, #48	; 0x30
 800b4da:	d0f7      	beq.n	800b4cc <__gethex+0x30>
 800b4dc:	f7ff ffc8 	bl	800b470 <__hexdig_fun>
 800b4e0:	2300      	movs	r3, #0
 800b4e2:	001c      	movs	r4, r3
 800b4e4:	9304      	str	r3, [sp, #16]
 800b4e6:	4298      	cmp	r0, r3
 800b4e8:	d11f      	bne.n	800b52a <__gethex+0x8e>
 800b4ea:	9a03      	ldr	r2, [sp, #12]
 800b4ec:	9907      	ldr	r1, [sp, #28]
 800b4ee:	9801      	ldr	r0, [sp, #4]
 800b4f0:	f001 fd0e 	bl	800cf10 <strncmp>
 800b4f4:	0007      	movs	r7, r0
 800b4f6:	42a0      	cmp	r0, r4
 800b4f8:	d000      	beq.n	800b4fc <__gethex+0x60>
 800b4fa:	e06b      	b.n	800b5d4 <__gethex+0x138>
 800b4fc:	9b01      	ldr	r3, [sp, #4]
 800b4fe:	9a03      	ldr	r2, [sp, #12]
 800b500:	5c98      	ldrb	r0, [r3, r2]
 800b502:	189d      	adds	r5, r3, r2
 800b504:	f7ff ffb4 	bl	800b470 <__hexdig_fun>
 800b508:	2301      	movs	r3, #1
 800b50a:	9304      	str	r3, [sp, #16]
 800b50c:	42a0      	cmp	r0, r4
 800b50e:	d030      	beq.n	800b572 <__gethex+0xd6>
 800b510:	9501      	str	r5, [sp, #4]
 800b512:	9b01      	ldr	r3, [sp, #4]
 800b514:	7818      	ldrb	r0, [r3, #0]
 800b516:	2830      	cmp	r0, #48	; 0x30
 800b518:	d009      	beq.n	800b52e <__gethex+0x92>
 800b51a:	f7ff ffa9 	bl	800b470 <__hexdig_fun>
 800b51e:	4242      	negs	r2, r0
 800b520:	4142      	adcs	r2, r0
 800b522:	2301      	movs	r3, #1
 800b524:	002c      	movs	r4, r5
 800b526:	9204      	str	r2, [sp, #16]
 800b528:	9308      	str	r3, [sp, #32]
 800b52a:	9d01      	ldr	r5, [sp, #4]
 800b52c:	e004      	b.n	800b538 <__gethex+0x9c>
 800b52e:	9b01      	ldr	r3, [sp, #4]
 800b530:	3301      	adds	r3, #1
 800b532:	9301      	str	r3, [sp, #4]
 800b534:	e7ed      	b.n	800b512 <__gethex+0x76>
 800b536:	3501      	adds	r5, #1
 800b538:	7828      	ldrb	r0, [r5, #0]
 800b53a:	f7ff ff99 	bl	800b470 <__hexdig_fun>
 800b53e:	1e07      	subs	r7, r0, #0
 800b540:	d1f9      	bne.n	800b536 <__gethex+0x9a>
 800b542:	0028      	movs	r0, r5
 800b544:	9a03      	ldr	r2, [sp, #12]
 800b546:	9907      	ldr	r1, [sp, #28]
 800b548:	f001 fce2 	bl	800cf10 <strncmp>
 800b54c:	2800      	cmp	r0, #0
 800b54e:	d10e      	bne.n	800b56e <__gethex+0xd2>
 800b550:	2c00      	cmp	r4, #0
 800b552:	d107      	bne.n	800b564 <__gethex+0xc8>
 800b554:	9b03      	ldr	r3, [sp, #12]
 800b556:	18ed      	adds	r5, r5, r3
 800b558:	002c      	movs	r4, r5
 800b55a:	7828      	ldrb	r0, [r5, #0]
 800b55c:	f7ff ff88 	bl	800b470 <__hexdig_fun>
 800b560:	2800      	cmp	r0, #0
 800b562:	d102      	bne.n	800b56a <__gethex+0xce>
 800b564:	1b64      	subs	r4, r4, r5
 800b566:	00a7      	lsls	r7, r4, #2
 800b568:	e003      	b.n	800b572 <__gethex+0xd6>
 800b56a:	3501      	adds	r5, #1
 800b56c:	e7f5      	b.n	800b55a <__gethex+0xbe>
 800b56e:	2c00      	cmp	r4, #0
 800b570:	d1f8      	bne.n	800b564 <__gethex+0xc8>
 800b572:	2220      	movs	r2, #32
 800b574:	782b      	ldrb	r3, [r5, #0]
 800b576:	002e      	movs	r6, r5
 800b578:	4393      	bics	r3, r2
 800b57a:	2b50      	cmp	r3, #80	; 0x50
 800b57c:	d11d      	bne.n	800b5ba <__gethex+0x11e>
 800b57e:	786b      	ldrb	r3, [r5, #1]
 800b580:	2b2b      	cmp	r3, #43	; 0x2b
 800b582:	d02c      	beq.n	800b5de <__gethex+0x142>
 800b584:	2b2d      	cmp	r3, #45	; 0x2d
 800b586:	d02e      	beq.n	800b5e6 <__gethex+0x14a>
 800b588:	2300      	movs	r3, #0
 800b58a:	1c6e      	adds	r6, r5, #1
 800b58c:	9306      	str	r3, [sp, #24]
 800b58e:	7830      	ldrb	r0, [r6, #0]
 800b590:	f7ff ff6e 	bl	800b470 <__hexdig_fun>
 800b594:	1e43      	subs	r3, r0, #1
 800b596:	b2db      	uxtb	r3, r3
 800b598:	2b18      	cmp	r3, #24
 800b59a:	d82b      	bhi.n	800b5f4 <__gethex+0x158>
 800b59c:	3810      	subs	r0, #16
 800b59e:	0004      	movs	r4, r0
 800b5a0:	7870      	ldrb	r0, [r6, #1]
 800b5a2:	f7ff ff65 	bl	800b470 <__hexdig_fun>
 800b5a6:	1e43      	subs	r3, r0, #1
 800b5a8:	b2db      	uxtb	r3, r3
 800b5aa:	3601      	adds	r6, #1
 800b5ac:	2b18      	cmp	r3, #24
 800b5ae:	d91c      	bls.n	800b5ea <__gethex+0x14e>
 800b5b0:	9b06      	ldr	r3, [sp, #24]
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d000      	beq.n	800b5b8 <__gethex+0x11c>
 800b5b6:	4264      	negs	r4, r4
 800b5b8:	193f      	adds	r7, r7, r4
 800b5ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b5bc:	601e      	str	r6, [r3, #0]
 800b5be:	9b04      	ldr	r3, [sp, #16]
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d019      	beq.n	800b5f8 <__gethex+0x15c>
 800b5c4:	2600      	movs	r6, #0
 800b5c6:	9b08      	ldr	r3, [sp, #32]
 800b5c8:	42b3      	cmp	r3, r6
 800b5ca:	d100      	bne.n	800b5ce <__gethex+0x132>
 800b5cc:	3606      	adds	r6, #6
 800b5ce:	0030      	movs	r0, r6
 800b5d0:	b00d      	add	sp, #52	; 0x34
 800b5d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b5d4:	2301      	movs	r3, #1
 800b5d6:	2700      	movs	r7, #0
 800b5d8:	9d01      	ldr	r5, [sp, #4]
 800b5da:	9304      	str	r3, [sp, #16]
 800b5dc:	e7c9      	b.n	800b572 <__gethex+0xd6>
 800b5de:	2300      	movs	r3, #0
 800b5e0:	9306      	str	r3, [sp, #24]
 800b5e2:	1cae      	adds	r6, r5, #2
 800b5e4:	e7d3      	b.n	800b58e <__gethex+0xf2>
 800b5e6:	2301      	movs	r3, #1
 800b5e8:	e7fa      	b.n	800b5e0 <__gethex+0x144>
 800b5ea:	230a      	movs	r3, #10
 800b5ec:	435c      	muls	r4, r3
 800b5ee:	1824      	adds	r4, r4, r0
 800b5f0:	3c10      	subs	r4, #16
 800b5f2:	e7d5      	b.n	800b5a0 <__gethex+0x104>
 800b5f4:	002e      	movs	r6, r5
 800b5f6:	e7e0      	b.n	800b5ba <__gethex+0x11e>
 800b5f8:	9b01      	ldr	r3, [sp, #4]
 800b5fa:	9904      	ldr	r1, [sp, #16]
 800b5fc:	1aeb      	subs	r3, r5, r3
 800b5fe:	3b01      	subs	r3, #1
 800b600:	2b07      	cmp	r3, #7
 800b602:	dc0a      	bgt.n	800b61a <__gethex+0x17e>
 800b604:	9805      	ldr	r0, [sp, #20]
 800b606:	f000 fa99 	bl	800bb3c <_Balloc>
 800b60a:	1e04      	subs	r4, r0, #0
 800b60c:	d108      	bne.n	800b620 <__gethex+0x184>
 800b60e:	0002      	movs	r2, r0
 800b610:	21de      	movs	r1, #222	; 0xde
 800b612:	4b64      	ldr	r3, [pc, #400]	; (800b7a4 <__gethex+0x308>)
 800b614:	4864      	ldr	r0, [pc, #400]	; (800b7a8 <__gethex+0x30c>)
 800b616:	f001 fd67 	bl	800d0e8 <__assert_func>
 800b61a:	3101      	adds	r1, #1
 800b61c:	105b      	asrs	r3, r3, #1
 800b61e:	e7ef      	b.n	800b600 <__gethex+0x164>
 800b620:	0003      	movs	r3, r0
 800b622:	3314      	adds	r3, #20
 800b624:	9304      	str	r3, [sp, #16]
 800b626:	9309      	str	r3, [sp, #36]	; 0x24
 800b628:	2300      	movs	r3, #0
 800b62a:	001e      	movs	r6, r3
 800b62c:	9306      	str	r3, [sp, #24]
 800b62e:	9b01      	ldr	r3, [sp, #4]
 800b630:	42ab      	cmp	r3, r5
 800b632:	d340      	bcc.n	800b6b6 <__gethex+0x21a>
 800b634:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800b636:	9b04      	ldr	r3, [sp, #16]
 800b638:	c540      	stmia	r5!, {r6}
 800b63a:	1aed      	subs	r5, r5, r3
 800b63c:	10ad      	asrs	r5, r5, #2
 800b63e:	0030      	movs	r0, r6
 800b640:	6125      	str	r5, [r4, #16]
 800b642:	f000 fb73 	bl	800bd2c <__hi0bits>
 800b646:	9b02      	ldr	r3, [sp, #8]
 800b648:	016d      	lsls	r5, r5, #5
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	1a2e      	subs	r6, r5, r0
 800b64e:	9301      	str	r3, [sp, #4]
 800b650:	429e      	cmp	r6, r3
 800b652:	dd5a      	ble.n	800b70a <__gethex+0x26e>
 800b654:	1af6      	subs	r6, r6, r3
 800b656:	0031      	movs	r1, r6
 800b658:	0020      	movs	r0, r4
 800b65a:	f000 ff15 	bl	800c488 <__any_on>
 800b65e:	1e05      	subs	r5, r0, #0
 800b660:	d016      	beq.n	800b690 <__gethex+0x1f4>
 800b662:	2501      	movs	r5, #1
 800b664:	211f      	movs	r1, #31
 800b666:	0028      	movs	r0, r5
 800b668:	1e73      	subs	r3, r6, #1
 800b66a:	4019      	ands	r1, r3
 800b66c:	4088      	lsls	r0, r1
 800b66e:	0001      	movs	r1, r0
 800b670:	115a      	asrs	r2, r3, #5
 800b672:	9804      	ldr	r0, [sp, #16]
 800b674:	0092      	lsls	r2, r2, #2
 800b676:	5812      	ldr	r2, [r2, r0]
 800b678:	420a      	tst	r2, r1
 800b67a:	d009      	beq.n	800b690 <__gethex+0x1f4>
 800b67c:	42ab      	cmp	r3, r5
 800b67e:	dd06      	ble.n	800b68e <__gethex+0x1f2>
 800b680:	0020      	movs	r0, r4
 800b682:	1eb1      	subs	r1, r6, #2
 800b684:	f000 ff00 	bl	800c488 <__any_on>
 800b688:	3502      	adds	r5, #2
 800b68a:	2800      	cmp	r0, #0
 800b68c:	d100      	bne.n	800b690 <__gethex+0x1f4>
 800b68e:	2502      	movs	r5, #2
 800b690:	0031      	movs	r1, r6
 800b692:	0020      	movs	r0, r4
 800b694:	f7ff fe98 	bl	800b3c8 <rshift>
 800b698:	19bf      	adds	r7, r7, r6
 800b69a:	9b02      	ldr	r3, [sp, #8]
 800b69c:	689b      	ldr	r3, [r3, #8]
 800b69e:	9303      	str	r3, [sp, #12]
 800b6a0:	42bb      	cmp	r3, r7
 800b6a2:	da42      	bge.n	800b72a <__gethex+0x28e>
 800b6a4:	0021      	movs	r1, r4
 800b6a6:	9805      	ldr	r0, [sp, #20]
 800b6a8:	f000 fa8c 	bl	800bbc4 <_Bfree>
 800b6ac:	2300      	movs	r3, #0
 800b6ae:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b6b0:	26a3      	movs	r6, #163	; 0xa3
 800b6b2:	6013      	str	r3, [r2, #0]
 800b6b4:	e78b      	b.n	800b5ce <__gethex+0x132>
 800b6b6:	1e6b      	subs	r3, r5, #1
 800b6b8:	9308      	str	r3, [sp, #32]
 800b6ba:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b6bc:	781b      	ldrb	r3, [r3, #0]
 800b6be:	4293      	cmp	r3, r2
 800b6c0:	d014      	beq.n	800b6ec <__gethex+0x250>
 800b6c2:	9b06      	ldr	r3, [sp, #24]
 800b6c4:	2b20      	cmp	r3, #32
 800b6c6:	d104      	bne.n	800b6d2 <__gethex+0x236>
 800b6c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b6ca:	c340      	stmia	r3!, {r6}
 800b6cc:	2600      	movs	r6, #0
 800b6ce:	9309      	str	r3, [sp, #36]	; 0x24
 800b6d0:	9606      	str	r6, [sp, #24]
 800b6d2:	9b08      	ldr	r3, [sp, #32]
 800b6d4:	7818      	ldrb	r0, [r3, #0]
 800b6d6:	f7ff fecb 	bl	800b470 <__hexdig_fun>
 800b6da:	230f      	movs	r3, #15
 800b6dc:	4018      	ands	r0, r3
 800b6de:	9b06      	ldr	r3, [sp, #24]
 800b6e0:	9d08      	ldr	r5, [sp, #32]
 800b6e2:	4098      	lsls	r0, r3
 800b6e4:	3304      	adds	r3, #4
 800b6e6:	4306      	orrs	r6, r0
 800b6e8:	9306      	str	r3, [sp, #24]
 800b6ea:	e7a0      	b.n	800b62e <__gethex+0x192>
 800b6ec:	2301      	movs	r3, #1
 800b6ee:	9a03      	ldr	r2, [sp, #12]
 800b6f0:	1a9d      	subs	r5, r3, r2
 800b6f2:	9b08      	ldr	r3, [sp, #32]
 800b6f4:	195d      	adds	r5, r3, r5
 800b6f6:	9b01      	ldr	r3, [sp, #4]
 800b6f8:	429d      	cmp	r5, r3
 800b6fa:	d3e2      	bcc.n	800b6c2 <__gethex+0x226>
 800b6fc:	0028      	movs	r0, r5
 800b6fe:	9907      	ldr	r1, [sp, #28]
 800b700:	f001 fc06 	bl	800cf10 <strncmp>
 800b704:	2800      	cmp	r0, #0
 800b706:	d1dc      	bne.n	800b6c2 <__gethex+0x226>
 800b708:	e791      	b.n	800b62e <__gethex+0x192>
 800b70a:	9b01      	ldr	r3, [sp, #4]
 800b70c:	2500      	movs	r5, #0
 800b70e:	429e      	cmp	r6, r3
 800b710:	dac3      	bge.n	800b69a <__gethex+0x1fe>
 800b712:	1b9e      	subs	r6, r3, r6
 800b714:	0021      	movs	r1, r4
 800b716:	0032      	movs	r2, r6
 800b718:	9805      	ldr	r0, [sp, #20]
 800b71a:	f000 fc71 	bl	800c000 <__lshift>
 800b71e:	0003      	movs	r3, r0
 800b720:	3314      	adds	r3, #20
 800b722:	0004      	movs	r4, r0
 800b724:	1bbf      	subs	r7, r7, r6
 800b726:	9304      	str	r3, [sp, #16]
 800b728:	e7b7      	b.n	800b69a <__gethex+0x1fe>
 800b72a:	9b02      	ldr	r3, [sp, #8]
 800b72c:	685e      	ldr	r6, [r3, #4]
 800b72e:	42be      	cmp	r6, r7
 800b730:	dd71      	ble.n	800b816 <__gethex+0x37a>
 800b732:	9b01      	ldr	r3, [sp, #4]
 800b734:	1bf6      	subs	r6, r6, r7
 800b736:	42b3      	cmp	r3, r6
 800b738:	dc38      	bgt.n	800b7ac <__gethex+0x310>
 800b73a:	9b02      	ldr	r3, [sp, #8]
 800b73c:	68db      	ldr	r3, [r3, #12]
 800b73e:	2b02      	cmp	r3, #2
 800b740:	d026      	beq.n	800b790 <__gethex+0x2f4>
 800b742:	2b03      	cmp	r3, #3
 800b744:	d028      	beq.n	800b798 <__gethex+0x2fc>
 800b746:	2b01      	cmp	r3, #1
 800b748:	d119      	bne.n	800b77e <__gethex+0x2e2>
 800b74a:	9b01      	ldr	r3, [sp, #4]
 800b74c:	42b3      	cmp	r3, r6
 800b74e:	d116      	bne.n	800b77e <__gethex+0x2e2>
 800b750:	2b01      	cmp	r3, #1
 800b752:	d10d      	bne.n	800b770 <__gethex+0x2d4>
 800b754:	9b02      	ldr	r3, [sp, #8]
 800b756:	2662      	movs	r6, #98	; 0x62
 800b758:	685b      	ldr	r3, [r3, #4]
 800b75a:	9301      	str	r3, [sp, #4]
 800b75c:	9a01      	ldr	r2, [sp, #4]
 800b75e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b760:	601a      	str	r2, [r3, #0]
 800b762:	2301      	movs	r3, #1
 800b764:	9a04      	ldr	r2, [sp, #16]
 800b766:	6123      	str	r3, [r4, #16]
 800b768:	6013      	str	r3, [r2, #0]
 800b76a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b76c:	601c      	str	r4, [r3, #0]
 800b76e:	e72e      	b.n	800b5ce <__gethex+0x132>
 800b770:	9901      	ldr	r1, [sp, #4]
 800b772:	0020      	movs	r0, r4
 800b774:	3901      	subs	r1, #1
 800b776:	f000 fe87 	bl	800c488 <__any_on>
 800b77a:	2800      	cmp	r0, #0
 800b77c:	d1ea      	bne.n	800b754 <__gethex+0x2b8>
 800b77e:	0021      	movs	r1, r4
 800b780:	9805      	ldr	r0, [sp, #20]
 800b782:	f000 fa1f 	bl	800bbc4 <_Bfree>
 800b786:	2300      	movs	r3, #0
 800b788:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b78a:	2650      	movs	r6, #80	; 0x50
 800b78c:	6013      	str	r3, [r2, #0]
 800b78e:	e71e      	b.n	800b5ce <__gethex+0x132>
 800b790:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b792:	2b00      	cmp	r3, #0
 800b794:	d1f3      	bne.n	800b77e <__gethex+0x2e2>
 800b796:	e7dd      	b.n	800b754 <__gethex+0x2b8>
 800b798:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	d1da      	bne.n	800b754 <__gethex+0x2b8>
 800b79e:	e7ee      	b.n	800b77e <__gethex+0x2e2>
 800b7a0:	0800e270 	.word	0x0800e270
 800b7a4:	0800e1f8 	.word	0x0800e1f8
 800b7a8:	0800e209 	.word	0x0800e209
 800b7ac:	1e77      	subs	r7, r6, #1
 800b7ae:	2d00      	cmp	r5, #0
 800b7b0:	d12f      	bne.n	800b812 <__gethex+0x376>
 800b7b2:	2f00      	cmp	r7, #0
 800b7b4:	d004      	beq.n	800b7c0 <__gethex+0x324>
 800b7b6:	0039      	movs	r1, r7
 800b7b8:	0020      	movs	r0, r4
 800b7ba:	f000 fe65 	bl	800c488 <__any_on>
 800b7be:	0005      	movs	r5, r0
 800b7c0:	231f      	movs	r3, #31
 800b7c2:	117a      	asrs	r2, r7, #5
 800b7c4:	401f      	ands	r7, r3
 800b7c6:	3b1e      	subs	r3, #30
 800b7c8:	40bb      	lsls	r3, r7
 800b7ca:	9904      	ldr	r1, [sp, #16]
 800b7cc:	0092      	lsls	r2, r2, #2
 800b7ce:	5852      	ldr	r2, [r2, r1]
 800b7d0:	421a      	tst	r2, r3
 800b7d2:	d001      	beq.n	800b7d8 <__gethex+0x33c>
 800b7d4:	2302      	movs	r3, #2
 800b7d6:	431d      	orrs	r5, r3
 800b7d8:	9b01      	ldr	r3, [sp, #4]
 800b7da:	0031      	movs	r1, r6
 800b7dc:	1b9b      	subs	r3, r3, r6
 800b7de:	2602      	movs	r6, #2
 800b7e0:	0020      	movs	r0, r4
 800b7e2:	9301      	str	r3, [sp, #4]
 800b7e4:	f7ff fdf0 	bl	800b3c8 <rshift>
 800b7e8:	9b02      	ldr	r3, [sp, #8]
 800b7ea:	685f      	ldr	r7, [r3, #4]
 800b7ec:	2d00      	cmp	r5, #0
 800b7ee:	d041      	beq.n	800b874 <__gethex+0x3d8>
 800b7f0:	9b02      	ldr	r3, [sp, #8]
 800b7f2:	68db      	ldr	r3, [r3, #12]
 800b7f4:	2b02      	cmp	r3, #2
 800b7f6:	d010      	beq.n	800b81a <__gethex+0x37e>
 800b7f8:	2b03      	cmp	r3, #3
 800b7fa:	d012      	beq.n	800b822 <__gethex+0x386>
 800b7fc:	2b01      	cmp	r3, #1
 800b7fe:	d106      	bne.n	800b80e <__gethex+0x372>
 800b800:	07aa      	lsls	r2, r5, #30
 800b802:	d504      	bpl.n	800b80e <__gethex+0x372>
 800b804:	9a04      	ldr	r2, [sp, #16]
 800b806:	6810      	ldr	r0, [r2, #0]
 800b808:	4305      	orrs	r5, r0
 800b80a:	421d      	tst	r5, r3
 800b80c:	d10c      	bne.n	800b828 <__gethex+0x38c>
 800b80e:	2310      	movs	r3, #16
 800b810:	e02f      	b.n	800b872 <__gethex+0x3d6>
 800b812:	2501      	movs	r5, #1
 800b814:	e7d4      	b.n	800b7c0 <__gethex+0x324>
 800b816:	2601      	movs	r6, #1
 800b818:	e7e8      	b.n	800b7ec <__gethex+0x350>
 800b81a:	2301      	movs	r3, #1
 800b81c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b81e:	1a9b      	subs	r3, r3, r2
 800b820:	9313      	str	r3, [sp, #76]	; 0x4c
 800b822:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b824:	2b00      	cmp	r3, #0
 800b826:	d0f2      	beq.n	800b80e <__gethex+0x372>
 800b828:	6923      	ldr	r3, [r4, #16]
 800b82a:	2000      	movs	r0, #0
 800b82c:	9303      	str	r3, [sp, #12]
 800b82e:	009b      	lsls	r3, r3, #2
 800b830:	9304      	str	r3, [sp, #16]
 800b832:	0023      	movs	r3, r4
 800b834:	9a04      	ldr	r2, [sp, #16]
 800b836:	3314      	adds	r3, #20
 800b838:	1899      	adds	r1, r3, r2
 800b83a:	681a      	ldr	r2, [r3, #0]
 800b83c:	1c55      	adds	r5, r2, #1
 800b83e:	d01e      	beq.n	800b87e <__gethex+0x3e2>
 800b840:	3201      	adds	r2, #1
 800b842:	601a      	str	r2, [r3, #0]
 800b844:	0023      	movs	r3, r4
 800b846:	3314      	adds	r3, #20
 800b848:	2e02      	cmp	r6, #2
 800b84a:	d140      	bne.n	800b8ce <__gethex+0x432>
 800b84c:	9a02      	ldr	r2, [sp, #8]
 800b84e:	9901      	ldr	r1, [sp, #4]
 800b850:	6812      	ldr	r2, [r2, #0]
 800b852:	3a01      	subs	r2, #1
 800b854:	428a      	cmp	r2, r1
 800b856:	d10b      	bne.n	800b870 <__gethex+0x3d4>
 800b858:	114a      	asrs	r2, r1, #5
 800b85a:	211f      	movs	r1, #31
 800b85c:	9801      	ldr	r0, [sp, #4]
 800b85e:	0092      	lsls	r2, r2, #2
 800b860:	4001      	ands	r1, r0
 800b862:	2001      	movs	r0, #1
 800b864:	0005      	movs	r5, r0
 800b866:	408d      	lsls	r5, r1
 800b868:	58d3      	ldr	r3, [r2, r3]
 800b86a:	422b      	tst	r3, r5
 800b86c:	d000      	beq.n	800b870 <__gethex+0x3d4>
 800b86e:	2601      	movs	r6, #1
 800b870:	2320      	movs	r3, #32
 800b872:	431e      	orrs	r6, r3
 800b874:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b876:	601c      	str	r4, [r3, #0]
 800b878:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b87a:	601f      	str	r7, [r3, #0]
 800b87c:	e6a7      	b.n	800b5ce <__gethex+0x132>
 800b87e:	c301      	stmia	r3!, {r0}
 800b880:	4299      	cmp	r1, r3
 800b882:	d8da      	bhi.n	800b83a <__gethex+0x39e>
 800b884:	9b03      	ldr	r3, [sp, #12]
 800b886:	68a2      	ldr	r2, [r4, #8]
 800b888:	4293      	cmp	r3, r2
 800b88a:	db17      	blt.n	800b8bc <__gethex+0x420>
 800b88c:	6863      	ldr	r3, [r4, #4]
 800b88e:	9805      	ldr	r0, [sp, #20]
 800b890:	1c59      	adds	r1, r3, #1
 800b892:	f000 f953 	bl	800bb3c <_Balloc>
 800b896:	1e05      	subs	r5, r0, #0
 800b898:	d103      	bne.n	800b8a2 <__gethex+0x406>
 800b89a:	0002      	movs	r2, r0
 800b89c:	2184      	movs	r1, #132	; 0x84
 800b89e:	4b1c      	ldr	r3, [pc, #112]	; (800b910 <__gethex+0x474>)
 800b8a0:	e6b8      	b.n	800b614 <__gethex+0x178>
 800b8a2:	0021      	movs	r1, r4
 800b8a4:	6923      	ldr	r3, [r4, #16]
 800b8a6:	310c      	adds	r1, #12
 800b8a8:	1c9a      	adds	r2, r3, #2
 800b8aa:	0092      	lsls	r2, r2, #2
 800b8ac:	300c      	adds	r0, #12
 800b8ae:	f7fc ffb3 	bl	8008818 <memcpy>
 800b8b2:	0021      	movs	r1, r4
 800b8b4:	9805      	ldr	r0, [sp, #20]
 800b8b6:	f000 f985 	bl	800bbc4 <_Bfree>
 800b8ba:	002c      	movs	r4, r5
 800b8bc:	6923      	ldr	r3, [r4, #16]
 800b8be:	1c5a      	adds	r2, r3, #1
 800b8c0:	6122      	str	r2, [r4, #16]
 800b8c2:	2201      	movs	r2, #1
 800b8c4:	3304      	adds	r3, #4
 800b8c6:	009b      	lsls	r3, r3, #2
 800b8c8:	18e3      	adds	r3, r4, r3
 800b8ca:	605a      	str	r2, [r3, #4]
 800b8cc:	e7ba      	b.n	800b844 <__gethex+0x3a8>
 800b8ce:	6922      	ldr	r2, [r4, #16]
 800b8d0:	9903      	ldr	r1, [sp, #12]
 800b8d2:	428a      	cmp	r2, r1
 800b8d4:	dd09      	ble.n	800b8ea <__gethex+0x44e>
 800b8d6:	2101      	movs	r1, #1
 800b8d8:	0020      	movs	r0, r4
 800b8da:	f7ff fd75 	bl	800b3c8 <rshift>
 800b8de:	9b02      	ldr	r3, [sp, #8]
 800b8e0:	3701      	adds	r7, #1
 800b8e2:	689b      	ldr	r3, [r3, #8]
 800b8e4:	42bb      	cmp	r3, r7
 800b8e6:	dac2      	bge.n	800b86e <__gethex+0x3d2>
 800b8e8:	e6dc      	b.n	800b6a4 <__gethex+0x208>
 800b8ea:	221f      	movs	r2, #31
 800b8ec:	9d01      	ldr	r5, [sp, #4]
 800b8ee:	9901      	ldr	r1, [sp, #4]
 800b8f0:	2601      	movs	r6, #1
 800b8f2:	4015      	ands	r5, r2
 800b8f4:	4211      	tst	r1, r2
 800b8f6:	d0bb      	beq.n	800b870 <__gethex+0x3d4>
 800b8f8:	9a04      	ldr	r2, [sp, #16]
 800b8fa:	189b      	adds	r3, r3, r2
 800b8fc:	3b04      	subs	r3, #4
 800b8fe:	6818      	ldr	r0, [r3, #0]
 800b900:	f000 fa14 	bl	800bd2c <__hi0bits>
 800b904:	2320      	movs	r3, #32
 800b906:	1b5d      	subs	r5, r3, r5
 800b908:	42a8      	cmp	r0, r5
 800b90a:	dbe4      	blt.n	800b8d6 <__gethex+0x43a>
 800b90c:	e7b0      	b.n	800b870 <__gethex+0x3d4>
 800b90e:	46c0      	nop			; (mov r8, r8)
 800b910:	0800e1f8 	.word	0x0800e1f8

0800b914 <L_shift>:
 800b914:	2308      	movs	r3, #8
 800b916:	b570      	push	{r4, r5, r6, lr}
 800b918:	2520      	movs	r5, #32
 800b91a:	1a9a      	subs	r2, r3, r2
 800b91c:	0092      	lsls	r2, r2, #2
 800b91e:	1aad      	subs	r5, r5, r2
 800b920:	6843      	ldr	r3, [r0, #4]
 800b922:	6806      	ldr	r6, [r0, #0]
 800b924:	001c      	movs	r4, r3
 800b926:	40ac      	lsls	r4, r5
 800b928:	40d3      	lsrs	r3, r2
 800b92a:	4334      	orrs	r4, r6
 800b92c:	6004      	str	r4, [r0, #0]
 800b92e:	6043      	str	r3, [r0, #4]
 800b930:	3004      	adds	r0, #4
 800b932:	4288      	cmp	r0, r1
 800b934:	d3f4      	bcc.n	800b920 <L_shift+0xc>
 800b936:	bd70      	pop	{r4, r5, r6, pc}

0800b938 <__match>:
 800b938:	b530      	push	{r4, r5, lr}
 800b93a:	6803      	ldr	r3, [r0, #0]
 800b93c:	780c      	ldrb	r4, [r1, #0]
 800b93e:	3301      	adds	r3, #1
 800b940:	2c00      	cmp	r4, #0
 800b942:	d102      	bne.n	800b94a <__match+0x12>
 800b944:	6003      	str	r3, [r0, #0]
 800b946:	2001      	movs	r0, #1
 800b948:	bd30      	pop	{r4, r5, pc}
 800b94a:	781a      	ldrb	r2, [r3, #0]
 800b94c:	0015      	movs	r5, r2
 800b94e:	3d41      	subs	r5, #65	; 0x41
 800b950:	2d19      	cmp	r5, #25
 800b952:	d800      	bhi.n	800b956 <__match+0x1e>
 800b954:	3220      	adds	r2, #32
 800b956:	3101      	adds	r1, #1
 800b958:	42a2      	cmp	r2, r4
 800b95a:	d0ef      	beq.n	800b93c <__match+0x4>
 800b95c:	2000      	movs	r0, #0
 800b95e:	e7f3      	b.n	800b948 <__match+0x10>

0800b960 <__hexnan>:
 800b960:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b962:	680b      	ldr	r3, [r1, #0]
 800b964:	b08b      	sub	sp, #44	; 0x2c
 800b966:	9201      	str	r2, [sp, #4]
 800b968:	9901      	ldr	r1, [sp, #4]
 800b96a:	115a      	asrs	r2, r3, #5
 800b96c:	0092      	lsls	r2, r2, #2
 800b96e:	188a      	adds	r2, r1, r2
 800b970:	9202      	str	r2, [sp, #8]
 800b972:	0019      	movs	r1, r3
 800b974:	221f      	movs	r2, #31
 800b976:	4011      	ands	r1, r2
 800b978:	9008      	str	r0, [sp, #32]
 800b97a:	9106      	str	r1, [sp, #24]
 800b97c:	4213      	tst	r3, r2
 800b97e:	d002      	beq.n	800b986 <__hexnan+0x26>
 800b980:	9b02      	ldr	r3, [sp, #8]
 800b982:	3304      	adds	r3, #4
 800b984:	9302      	str	r3, [sp, #8]
 800b986:	9b02      	ldr	r3, [sp, #8]
 800b988:	2500      	movs	r5, #0
 800b98a:	1f1e      	subs	r6, r3, #4
 800b98c:	0037      	movs	r7, r6
 800b98e:	0034      	movs	r4, r6
 800b990:	9b08      	ldr	r3, [sp, #32]
 800b992:	6035      	str	r5, [r6, #0]
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	9507      	str	r5, [sp, #28]
 800b998:	9305      	str	r3, [sp, #20]
 800b99a:	9503      	str	r5, [sp, #12]
 800b99c:	9b05      	ldr	r3, [sp, #20]
 800b99e:	3301      	adds	r3, #1
 800b9a0:	9309      	str	r3, [sp, #36]	; 0x24
 800b9a2:	9b05      	ldr	r3, [sp, #20]
 800b9a4:	785b      	ldrb	r3, [r3, #1]
 800b9a6:	9304      	str	r3, [sp, #16]
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d028      	beq.n	800b9fe <__hexnan+0x9e>
 800b9ac:	9804      	ldr	r0, [sp, #16]
 800b9ae:	f7ff fd5f 	bl	800b470 <__hexdig_fun>
 800b9b2:	2800      	cmp	r0, #0
 800b9b4:	d154      	bne.n	800ba60 <__hexnan+0x100>
 800b9b6:	9b04      	ldr	r3, [sp, #16]
 800b9b8:	2b20      	cmp	r3, #32
 800b9ba:	d819      	bhi.n	800b9f0 <__hexnan+0x90>
 800b9bc:	9b03      	ldr	r3, [sp, #12]
 800b9be:	9a07      	ldr	r2, [sp, #28]
 800b9c0:	4293      	cmp	r3, r2
 800b9c2:	dd12      	ble.n	800b9ea <__hexnan+0x8a>
 800b9c4:	42bc      	cmp	r4, r7
 800b9c6:	d206      	bcs.n	800b9d6 <__hexnan+0x76>
 800b9c8:	2d07      	cmp	r5, #7
 800b9ca:	dc04      	bgt.n	800b9d6 <__hexnan+0x76>
 800b9cc:	002a      	movs	r2, r5
 800b9ce:	0039      	movs	r1, r7
 800b9d0:	0020      	movs	r0, r4
 800b9d2:	f7ff ff9f 	bl	800b914 <L_shift>
 800b9d6:	9b01      	ldr	r3, [sp, #4]
 800b9d8:	2508      	movs	r5, #8
 800b9da:	429c      	cmp	r4, r3
 800b9dc:	d905      	bls.n	800b9ea <__hexnan+0x8a>
 800b9de:	1f27      	subs	r7, r4, #4
 800b9e0:	2500      	movs	r5, #0
 800b9e2:	003c      	movs	r4, r7
 800b9e4:	9b03      	ldr	r3, [sp, #12]
 800b9e6:	603d      	str	r5, [r7, #0]
 800b9e8:	9307      	str	r3, [sp, #28]
 800b9ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b9ec:	9305      	str	r3, [sp, #20]
 800b9ee:	e7d5      	b.n	800b99c <__hexnan+0x3c>
 800b9f0:	9b04      	ldr	r3, [sp, #16]
 800b9f2:	2b29      	cmp	r3, #41	; 0x29
 800b9f4:	d159      	bne.n	800baaa <__hexnan+0x14a>
 800b9f6:	9b05      	ldr	r3, [sp, #20]
 800b9f8:	9a08      	ldr	r2, [sp, #32]
 800b9fa:	3302      	adds	r3, #2
 800b9fc:	6013      	str	r3, [r2, #0]
 800b9fe:	9b03      	ldr	r3, [sp, #12]
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d052      	beq.n	800baaa <__hexnan+0x14a>
 800ba04:	42bc      	cmp	r4, r7
 800ba06:	d206      	bcs.n	800ba16 <__hexnan+0xb6>
 800ba08:	2d07      	cmp	r5, #7
 800ba0a:	dc04      	bgt.n	800ba16 <__hexnan+0xb6>
 800ba0c:	002a      	movs	r2, r5
 800ba0e:	0039      	movs	r1, r7
 800ba10:	0020      	movs	r0, r4
 800ba12:	f7ff ff7f 	bl	800b914 <L_shift>
 800ba16:	9b01      	ldr	r3, [sp, #4]
 800ba18:	429c      	cmp	r4, r3
 800ba1a:	d935      	bls.n	800ba88 <__hexnan+0x128>
 800ba1c:	001a      	movs	r2, r3
 800ba1e:	0023      	movs	r3, r4
 800ba20:	cb02      	ldmia	r3!, {r1}
 800ba22:	c202      	stmia	r2!, {r1}
 800ba24:	429e      	cmp	r6, r3
 800ba26:	d2fb      	bcs.n	800ba20 <__hexnan+0xc0>
 800ba28:	9b02      	ldr	r3, [sp, #8]
 800ba2a:	1c61      	adds	r1, r4, #1
 800ba2c:	1eda      	subs	r2, r3, #3
 800ba2e:	2304      	movs	r3, #4
 800ba30:	4291      	cmp	r1, r2
 800ba32:	d805      	bhi.n	800ba40 <__hexnan+0xe0>
 800ba34:	9b02      	ldr	r3, [sp, #8]
 800ba36:	3b04      	subs	r3, #4
 800ba38:	1b1b      	subs	r3, r3, r4
 800ba3a:	089b      	lsrs	r3, r3, #2
 800ba3c:	3301      	adds	r3, #1
 800ba3e:	009b      	lsls	r3, r3, #2
 800ba40:	9a01      	ldr	r2, [sp, #4]
 800ba42:	18d3      	adds	r3, r2, r3
 800ba44:	2200      	movs	r2, #0
 800ba46:	c304      	stmia	r3!, {r2}
 800ba48:	429e      	cmp	r6, r3
 800ba4a:	d2fc      	bcs.n	800ba46 <__hexnan+0xe6>
 800ba4c:	6833      	ldr	r3, [r6, #0]
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d104      	bne.n	800ba5c <__hexnan+0xfc>
 800ba52:	9b01      	ldr	r3, [sp, #4]
 800ba54:	429e      	cmp	r6, r3
 800ba56:	d126      	bne.n	800baa6 <__hexnan+0x146>
 800ba58:	2301      	movs	r3, #1
 800ba5a:	6033      	str	r3, [r6, #0]
 800ba5c:	2005      	movs	r0, #5
 800ba5e:	e025      	b.n	800baac <__hexnan+0x14c>
 800ba60:	9b03      	ldr	r3, [sp, #12]
 800ba62:	3501      	adds	r5, #1
 800ba64:	3301      	adds	r3, #1
 800ba66:	9303      	str	r3, [sp, #12]
 800ba68:	2d08      	cmp	r5, #8
 800ba6a:	dd06      	ble.n	800ba7a <__hexnan+0x11a>
 800ba6c:	9b01      	ldr	r3, [sp, #4]
 800ba6e:	429c      	cmp	r4, r3
 800ba70:	d9bb      	bls.n	800b9ea <__hexnan+0x8a>
 800ba72:	2300      	movs	r3, #0
 800ba74:	2501      	movs	r5, #1
 800ba76:	3c04      	subs	r4, #4
 800ba78:	6023      	str	r3, [r4, #0]
 800ba7a:	220f      	movs	r2, #15
 800ba7c:	6823      	ldr	r3, [r4, #0]
 800ba7e:	4010      	ands	r0, r2
 800ba80:	011b      	lsls	r3, r3, #4
 800ba82:	4318      	orrs	r0, r3
 800ba84:	6020      	str	r0, [r4, #0]
 800ba86:	e7b0      	b.n	800b9ea <__hexnan+0x8a>
 800ba88:	9b06      	ldr	r3, [sp, #24]
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d0de      	beq.n	800ba4c <__hexnan+0xec>
 800ba8e:	2120      	movs	r1, #32
 800ba90:	9a06      	ldr	r2, [sp, #24]
 800ba92:	9b02      	ldr	r3, [sp, #8]
 800ba94:	1a89      	subs	r1, r1, r2
 800ba96:	2201      	movs	r2, #1
 800ba98:	4252      	negs	r2, r2
 800ba9a:	40ca      	lsrs	r2, r1
 800ba9c:	3b04      	subs	r3, #4
 800ba9e:	6819      	ldr	r1, [r3, #0]
 800baa0:	400a      	ands	r2, r1
 800baa2:	601a      	str	r2, [r3, #0]
 800baa4:	e7d2      	b.n	800ba4c <__hexnan+0xec>
 800baa6:	3e04      	subs	r6, #4
 800baa8:	e7d0      	b.n	800ba4c <__hexnan+0xec>
 800baaa:	2004      	movs	r0, #4
 800baac:	b00b      	add	sp, #44	; 0x2c
 800baae:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800bab0 <_localeconv_r>:
 800bab0:	4800      	ldr	r0, [pc, #0]	; (800bab4 <_localeconv_r+0x4>)
 800bab2:	4770      	bx	lr
 800bab4:	200001a8 	.word	0x200001a8

0800bab8 <_lseek_r>:
 800bab8:	b570      	push	{r4, r5, r6, lr}
 800baba:	0004      	movs	r4, r0
 800babc:	0008      	movs	r0, r1
 800babe:	0011      	movs	r1, r2
 800bac0:	001a      	movs	r2, r3
 800bac2:	2300      	movs	r3, #0
 800bac4:	4d05      	ldr	r5, [pc, #20]	; (800badc <_lseek_r+0x24>)
 800bac6:	602b      	str	r3, [r5, #0]
 800bac8:	f7f9 f8fc 	bl	8004cc4 <_lseek>
 800bacc:	1c43      	adds	r3, r0, #1
 800bace:	d103      	bne.n	800bad8 <_lseek_r+0x20>
 800bad0:	682b      	ldr	r3, [r5, #0]
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d000      	beq.n	800bad8 <_lseek_r+0x20>
 800bad6:	6023      	str	r3, [r4, #0]
 800bad8:	bd70      	pop	{r4, r5, r6, pc}
 800bada:	46c0      	nop			; (mov r8, r8)
 800badc:	20000a28 	.word	0x20000a28

0800bae0 <__ascii_mbtowc>:
 800bae0:	b082      	sub	sp, #8
 800bae2:	2900      	cmp	r1, #0
 800bae4:	d100      	bne.n	800bae8 <__ascii_mbtowc+0x8>
 800bae6:	a901      	add	r1, sp, #4
 800bae8:	1e10      	subs	r0, r2, #0
 800baea:	d006      	beq.n	800bafa <__ascii_mbtowc+0x1a>
 800baec:	2b00      	cmp	r3, #0
 800baee:	d006      	beq.n	800bafe <__ascii_mbtowc+0x1e>
 800baf0:	7813      	ldrb	r3, [r2, #0]
 800baf2:	600b      	str	r3, [r1, #0]
 800baf4:	7810      	ldrb	r0, [r2, #0]
 800baf6:	1e43      	subs	r3, r0, #1
 800baf8:	4198      	sbcs	r0, r3
 800bafa:	b002      	add	sp, #8
 800bafc:	4770      	bx	lr
 800bafe:	2002      	movs	r0, #2
 800bb00:	4240      	negs	r0, r0
 800bb02:	e7fa      	b.n	800bafa <__ascii_mbtowc+0x1a>

0800bb04 <memchr>:
 800bb04:	b2c9      	uxtb	r1, r1
 800bb06:	1882      	adds	r2, r0, r2
 800bb08:	4290      	cmp	r0, r2
 800bb0a:	d101      	bne.n	800bb10 <memchr+0xc>
 800bb0c:	2000      	movs	r0, #0
 800bb0e:	4770      	bx	lr
 800bb10:	7803      	ldrb	r3, [r0, #0]
 800bb12:	428b      	cmp	r3, r1
 800bb14:	d0fb      	beq.n	800bb0e <memchr+0xa>
 800bb16:	3001      	adds	r0, #1
 800bb18:	e7f6      	b.n	800bb08 <memchr+0x4>
	...

0800bb1c <__malloc_lock>:
 800bb1c:	b510      	push	{r4, lr}
 800bb1e:	4802      	ldr	r0, [pc, #8]	; (800bb28 <__malloc_lock+0xc>)
 800bb20:	f001 fcdf 	bl	800d4e2 <__retarget_lock_acquire_recursive>
 800bb24:	bd10      	pop	{r4, pc}
 800bb26:	46c0      	nop			; (mov r8, r8)
 800bb28:	20000a2c 	.word	0x20000a2c

0800bb2c <__malloc_unlock>:
 800bb2c:	b510      	push	{r4, lr}
 800bb2e:	4802      	ldr	r0, [pc, #8]	; (800bb38 <__malloc_unlock+0xc>)
 800bb30:	f001 fcd8 	bl	800d4e4 <__retarget_lock_release_recursive>
 800bb34:	bd10      	pop	{r4, pc}
 800bb36:	46c0      	nop			; (mov r8, r8)
 800bb38:	20000a2c 	.word	0x20000a2c

0800bb3c <_Balloc>:
 800bb3c:	b570      	push	{r4, r5, r6, lr}
 800bb3e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800bb40:	0006      	movs	r6, r0
 800bb42:	000c      	movs	r4, r1
 800bb44:	2d00      	cmp	r5, #0
 800bb46:	d10e      	bne.n	800bb66 <_Balloc+0x2a>
 800bb48:	2010      	movs	r0, #16
 800bb4a:	f7fc fe5b 	bl	8008804 <malloc>
 800bb4e:	1e02      	subs	r2, r0, #0
 800bb50:	6270      	str	r0, [r6, #36]	; 0x24
 800bb52:	d104      	bne.n	800bb5e <_Balloc+0x22>
 800bb54:	2166      	movs	r1, #102	; 0x66
 800bb56:	4b19      	ldr	r3, [pc, #100]	; (800bbbc <_Balloc+0x80>)
 800bb58:	4819      	ldr	r0, [pc, #100]	; (800bbc0 <_Balloc+0x84>)
 800bb5a:	f001 fac5 	bl	800d0e8 <__assert_func>
 800bb5e:	6045      	str	r5, [r0, #4]
 800bb60:	6085      	str	r5, [r0, #8]
 800bb62:	6005      	str	r5, [r0, #0]
 800bb64:	60c5      	str	r5, [r0, #12]
 800bb66:	6a75      	ldr	r5, [r6, #36]	; 0x24
 800bb68:	68eb      	ldr	r3, [r5, #12]
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d013      	beq.n	800bb96 <_Balloc+0x5a>
 800bb6e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800bb70:	00a2      	lsls	r2, r4, #2
 800bb72:	68db      	ldr	r3, [r3, #12]
 800bb74:	189b      	adds	r3, r3, r2
 800bb76:	6818      	ldr	r0, [r3, #0]
 800bb78:	2800      	cmp	r0, #0
 800bb7a:	d118      	bne.n	800bbae <_Balloc+0x72>
 800bb7c:	2101      	movs	r1, #1
 800bb7e:	000d      	movs	r5, r1
 800bb80:	40a5      	lsls	r5, r4
 800bb82:	1d6a      	adds	r2, r5, #5
 800bb84:	0030      	movs	r0, r6
 800bb86:	0092      	lsls	r2, r2, #2
 800bb88:	f000 fca1 	bl	800c4ce <_calloc_r>
 800bb8c:	2800      	cmp	r0, #0
 800bb8e:	d00c      	beq.n	800bbaa <_Balloc+0x6e>
 800bb90:	6044      	str	r4, [r0, #4]
 800bb92:	6085      	str	r5, [r0, #8]
 800bb94:	e00d      	b.n	800bbb2 <_Balloc+0x76>
 800bb96:	2221      	movs	r2, #33	; 0x21
 800bb98:	2104      	movs	r1, #4
 800bb9a:	0030      	movs	r0, r6
 800bb9c:	f000 fc97 	bl	800c4ce <_calloc_r>
 800bba0:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800bba2:	60e8      	str	r0, [r5, #12]
 800bba4:	68db      	ldr	r3, [r3, #12]
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d1e1      	bne.n	800bb6e <_Balloc+0x32>
 800bbaa:	2000      	movs	r0, #0
 800bbac:	bd70      	pop	{r4, r5, r6, pc}
 800bbae:	6802      	ldr	r2, [r0, #0]
 800bbb0:	601a      	str	r2, [r3, #0]
 800bbb2:	2300      	movs	r3, #0
 800bbb4:	6103      	str	r3, [r0, #16]
 800bbb6:	60c3      	str	r3, [r0, #12]
 800bbb8:	e7f8      	b.n	800bbac <_Balloc+0x70>
 800bbba:	46c0      	nop			; (mov r8, r8)
 800bbbc:	0800e186 	.word	0x0800e186
 800bbc0:	0800e284 	.word	0x0800e284

0800bbc4 <_Bfree>:
 800bbc4:	b570      	push	{r4, r5, r6, lr}
 800bbc6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bbc8:	0005      	movs	r5, r0
 800bbca:	000c      	movs	r4, r1
 800bbcc:	2e00      	cmp	r6, #0
 800bbce:	d10e      	bne.n	800bbee <_Bfree+0x2a>
 800bbd0:	2010      	movs	r0, #16
 800bbd2:	f7fc fe17 	bl	8008804 <malloc>
 800bbd6:	1e02      	subs	r2, r0, #0
 800bbd8:	6268      	str	r0, [r5, #36]	; 0x24
 800bbda:	d104      	bne.n	800bbe6 <_Bfree+0x22>
 800bbdc:	218a      	movs	r1, #138	; 0x8a
 800bbde:	4b09      	ldr	r3, [pc, #36]	; (800bc04 <_Bfree+0x40>)
 800bbe0:	4809      	ldr	r0, [pc, #36]	; (800bc08 <_Bfree+0x44>)
 800bbe2:	f001 fa81 	bl	800d0e8 <__assert_func>
 800bbe6:	6046      	str	r6, [r0, #4]
 800bbe8:	6086      	str	r6, [r0, #8]
 800bbea:	6006      	str	r6, [r0, #0]
 800bbec:	60c6      	str	r6, [r0, #12]
 800bbee:	2c00      	cmp	r4, #0
 800bbf0:	d007      	beq.n	800bc02 <_Bfree+0x3e>
 800bbf2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800bbf4:	6862      	ldr	r2, [r4, #4]
 800bbf6:	68db      	ldr	r3, [r3, #12]
 800bbf8:	0092      	lsls	r2, r2, #2
 800bbfa:	189b      	adds	r3, r3, r2
 800bbfc:	681a      	ldr	r2, [r3, #0]
 800bbfe:	6022      	str	r2, [r4, #0]
 800bc00:	601c      	str	r4, [r3, #0]
 800bc02:	bd70      	pop	{r4, r5, r6, pc}
 800bc04:	0800e186 	.word	0x0800e186
 800bc08:	0800e284 	.word	0x0800e284

0800bc0c <__multadd>:
 800bc0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bc0e:	000e      	movs	r6, r1
 800bc10:	9001      	str	r0, [sp, #4]
 800bc12:	000c      	movs	r4, r1
 800bc14:	001d      	movs	r5, r3
 800bc16:	2000      	movs	r0, #0
 800bc18:	690f      	ldr	r7, [r1, #16]
 800bc1a:	3614      	adds	r6, #20
 800bc1c:	6833      	ldr	r3, [r6, #0]
 800bc1e:	3001      	adds	r0, #1
 800bc20:	b299      	uxth	r1, r3
 800bc22:	4351      	muls	r1, r2
 800bc24:	0c1b      	lsrs	r3, r3, #16
 800bc26:	4353      	muls	r3, r2
 800bc28:	1949      	adds	r1, r1, r5
 800bc2a:	0c0d      	lsrs	r5, r1, #16
 800bc2c:	195b      	adds	r3, r3, r5
 800bc2e:	0c1d      	lsrs	r5, r3, #16
 800bc30:	b289      	uxth	r1, r1
 800bc32:	041b      	lsls	r3, r3, #16
 800bc34:	185b      	adds	r3, r3, r1
 800bc36:	c608      	stmia	r6!, {r3}
 800bc38:	4287      	cmp	r7, r0
 800bc3a:	dcef      	bgt.n	800bc1c <__multadd+0x10>
 800bc3c:	2d00      	cmp	r5, #0
 800bc3e:	d022      	beq.n	800bc86 <__multadd+0x7a>
 800bc40:	68a3      	ldr	r3, [r4, #8]
 800bc42:	42bb      	cmp	r3, r7
 800bc44:	dc19      	bgt.n	800bc7a <__multadd+0x6e>
 800bc46:	6863      	ldr	r3, [r4, #4]
 800bc48:	9801      	ldr	r0, [sp, #4]
 800bc4a:	1c59      	adds	r1, r3, #1
 800bc4c:	f7ff ff76 	bl	800bb3c <_Balloc>
 800bc50:	1e06      	subs	r6, r0, #0
 800bc52:	d105      	bne.n	800bc60 <__multadd+0x54>
 800bc54:	0002      	movs	r2, r0
 800bc56:	21b5      	movs	r1, #181	; 0xb5
 800bc58:	4b0c      	ldr	r3, [pc, #48]	; (800bc8c <__multadd+0x80>)
 800bc5a:	480d      	ldr	r0, [pc, #52]	; (800bc90 <__multadd+0x84>)
 800bc5c:	f001 fa44 	bl	800d0e8 <__assert_func>
 800bc60:	0021      	movs	r1, r4
 800bc62:	6923      	ldr	r3, [r4, #16]
 800bc64:	310c      	adds	r1, #12
 800bc66:	1c9a      	adds	r2, r3, #2
 800bc68:	0092      	lsls	r2, r2, #2
 800bc6a:	300c      	adds	r0, #12
 800bc6c:	f7fc fdd4 	bl	8008818 <memcpy>
 800bc70:	0021      	movs	r1, r4
 800bc72:	9801      	ldr	r0, [sp, #4]
 800bc74:	f7ff ffa6 	bl	800bbc4 <_Bfree>
 800bc78:	0034      	movs	r4, r6
 800bc7a:	1d3b      	adds	r3, r7, #4
 800bc7c:	009b      	lsls	r3, r3, #2
 800bc7e:	18e3      	adds	r3, r4, r3
 800bc80:	605d      	str	r5, [r3, #4]
 800bc82:	1c7b      	adds	r3, r7, #1
 800bc84:	6123      	str	r3, [r4, #16]
 800bc86:	0020      	movs	r0, r4
 800bc88:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800bc8a:	46c0      	nop			; (mov r8, r8)
 800bc8c:	0800e1f8 	.word	0x0800e1f8
 800bc90:	0800e284 	.word	0x0800e284

0800bc94 <__s2b>:
 800bc94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bc96:	0006      	movs	r6, r0
 800bc98:	0018      	movs	r0, r3
 800bc9a:	000c      	movs	r4, r1
 800bc9c:	3008      	adds	r0, #8
 800bc9e:	2109      	movs	r1, #9
 800bca0:	9301      	str	r3, [sp, #4]
 800bca2:	0015      	movs	r5, r2
 800bca4:	f7f4 fadc 	bl	8000260 <__divsi3>
 800bca8:	2301      	movs	r3, #1
 800bcaa:	2100      	movs	r1, #0
 800bcac:	4283      	cmp	r3, r0
 800bcae:	db0a      	blt.n	800bcc6 <__s2b+0x32>
 800bcb0:	0030      	movs	r0, r6
 800bcb2:	f7ff ff43 	bl	800bb3c <_Balloc>
 800bcb6:	1e01      	subs	r1, r0, #0
 800bcb8:	d108      	bne.n	800bccc <__s2b+0x38>
 800bcba:	0002      	movs	r2, r0
 800bcbc:	4b19      	ldr	r3, [pc, #100]	; (800bd24 <__s2b+0x90>)
 800bcbe:	481a      	ldr	r0, [pc, #104]	; (800bd28 <__s2b+0x94>)
 800bcc0:	31ce      	adds	r1, #206	; 0xce
 800bcc2:	f001 fa11 	bl	800d0e8 <__assert_func>
 800bcc6:	005b      	lsls	r3, r3, #1
 800bcc8:	3101      	adds	r1, #1
 800bcca:	e7ef      	b.n	800bcac <__s2b+0x18>
 800bccc:	9b08      	ldr	r3, [sp, #32]
 800bcce:	6143      	str	r3, [r0, #20]
 800bcd0:	2301      	movs	r3, #1
 800bcd2:	6103      	str	r3, [r0, #16]
 800bcd4:	2d09      	cmp	r5, #9
 800bcd6:	dd18      	ble.n	800bd0a <__s2b+0x76>
 800bcd8:	0023      	movs	r3, r4
 800bcda:	3309      	adds	r3, #9
 800bcdc:	001f      	movs	r7, r3
 800bcde:	9300      	str	r3, [sp, #0]
 800bce0:	1964      	adds	r4, r4, r5
 800bce2:	783b      	ldrb	r3, [r7, #0]
 800bce4:	220a      	movs	r2, #10
 800bce6:	0030      	movs	r0, r6
 800bce8:	3b30      	subs	r3, #48	; 0x30
 800bcea:	f7ff ff8f 	bl	800bc0c <__multadd>
 800bcee:	3701      	adds	r7, #1
 800bcf0:	0001      	movs	r1, r0
 800bcf2:	42a7      	cmp	r7, r4
 800bcf4:	d1f5      	bne.n	800bce2 <__s2b+0x4e>
 800bcf6:	002c      	movs	r4, r5
 800bcf8:	9b00      	ldr	r3, [sp, #0]
 800bcfa:	3c08      	subs	r4, #8
 800bcfc:	191c      	adds	r4, r3, r4
 800bcfe:	002f      	movs	r7, r5
 800bd00:	9b01      	ldr	r3, [sp, #4]
 800bd02:	429f      	cmp	r7, r3
 800bd04:	db04      	blt.n	800bd10 <__s2b+0x7c>
 800bd06:	0008      	movs	r0, r1
 800bd08:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800bd0a:	2509      	movs	r5, #9
 800bd0c:	340a      	adds	r4, #10
 800bd0e:	e7f6      	b.n	800bcfe <__s2b+0x6a>
 800bd10:	1b63      	subs	r3, r4, r5
 800bd12:	5ddb      	ldrb	r3, [r3, r7]
 800bd14:	220a      	movs	r2, #10
 800bd16:	0030      	movs	r0, r6
 800bd18:	3b30      	subs	r3, #48	; 0x30
 800bd1a:	f7ff ff77 	bl	800bc0c <__multadd>
 800bd1e:	3701      	adds	r7, #1
 800bd20:	0001      	movs	r1, r0
 800bd22:	e7ed      	b.n	800bd00 <__s2b+0x6c>
 800bd24:	0800e1f8 	.word	0x0800e1f8
 800bd28:	0800e284 	.word	0x0800e284

0800bd2c <__hi0bits>:
 800bd2c:	0003      	movs	r3, r0
 800bd2e:	0c02      	lsrs	r2, r0, #16
 800bd30:	2000      	movs	r0, #0
 800bd32:	4282      	cmp	r2, r0
 800bd34:	d101      	bne.n	800bd3a <__hi0bits+0xe>
 800bd36:	041b      	lsls	r3, r3, #16
 800bd38:	3010      	adds	r0, #16
 800bd3a:	0e1a      	lsrs	r2, r3, #24
 800bd3c:	d101      	bne.n	800bd42 <__hi0bits+0x16>
 800bd3e:	3008      	adds	r0, #8
 800bd40:	021b      	lsls	r3, r3, #8
 800bd42:	0f1a      	lsrs	r2, r3, #28
 800bd44:	d101      	bne.n	800bd4a <__hi0bits+0x1e>
 800bd46:	3004      	adds	r0, #4
 800bd48:	011b      	lsls	r3, r3, #4
 800bd4a:	0f9a      	lsrs	r2, r3, #30
 800bd4c:	d101      	bne.n	800bd52 <__hi0bits+0x26>
 800bd4e:	3002      	adds	r0, #2
 800bd50:	009b      	lsls	r3, r3, #2
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	db03      	blt.n	800bd5e <__hi0bits+0x32>
 800bd56:	3001      	adds	r0, #1
 800bd58:	005b      	lsls	r3, r3, #1
 800bd5a:	d400      	bmi.n	800bd5e <__hi0bits+0x32>
 800bd5c:	2020      	movs	r0, #32
 800bd5e:	4770      	bx	lr

0800bd60 <__lo0bits>:
 800bd60:	6803      	ldr	r3, [r0, #0]
 800bd62:	0002      	movs	r2, r0
 800bd64:	2107      	movs	r1, #7
 800bd66:	0018      	movs	r0, r3
 800bd68:	4008      	ands	r0, r1
 800bd6a:	420b      	tst	r3, r1
 800bd6c:	d00d      	beq.n	800bd8a <__lo0bits+0x2a>
 800bd6e:	3906      	subs	r1, #6
 800bd70:	2000      	movs	r0, #0
 800bd72:	420b      	tst	r3, r1
 800bd74:	d105      	bne.n	800bd82 <__lo0bits+0x22>
 800bd76:	3002      	adds	r0, #2
 800bd78:	4203      	tst	r3, r0
 800bd7a:	d003      	beq.n	800bd84 <__lo0bits+0x24>
 800bd7c:	40cb      	lsrs	r3, r1
 800bd7e:	0008      	movs	r0, r1
 800bd80:	6013      	str	r3, [r2, #0]
 800bd82:	4770      	bx	lr
 800bd84:	089b      	lsrs	r3, r3, #2
 800bd86:	6013      	str	r3, [r2, #0]
 800bd88:	e7fb      	b.n	800bd82 <__lo0bits+0x22>
 800bd8a:	b299      	uxth	r1, r3
 800bd8c:	2900      	cmp	r1, #0
 800bd8e:	d101      	bne.n	800bd94 <__lo0bits+0x34>
 800bd90:	2010      	movs	r0, #16
 800bd92:	0c1b      	lsrs	r3, r3, #16
 800bd94:	b2d9      	uxtb	r1, r3
 800bd96:	2900      	cmp	r1, #0
 800bd98:	d101      	bne.n	800bd9e <__lo0bits+0x3e>
 800bd9a:	3008      	adds	r0, #8
 800bd9c:	0a1b      	lsrs	r3, r3, #8
 800bd9e:	0719      	lsls	r1, r3, #28
 800bda0:	d101      	bne.n	800bda6 <__lo0bits+0x46>
 800bda2:	3004      	adds	r0, #4
 800bda4:	091b      	lsrs	r3, r3, #4
 800bda6:	0799      	lsls	r1, r3, #30
 800bda8:	d101      	bne.n	800bdae <__lo0bits+0x4e>
 800bdaa:	3002      	adds	r0, #2
 800bdac:	089b      	lsrs	r3, r3, #2
 800bdae:	07d9      	lsls	r1, r3, #31
 800bdb0:	d4e9      	bmi.n	800bd86 <__lo0bits+0x26>
 800bdb2:	3001      	adds	r0, #1
 800bdb4:	085b      	lsrs	r3, r3, #1
 800bdb6:	d1e6      	bne.n	800bd86 <__lo0bits+0x26>
 800bdb8:	2020      	movs	r0, #32
 800bdba:	e7e2      	b.n	800bd82 <__lo0bits+0x22>

0800bdbc <__i2b>:
 800bdbc:	b510      	push	{r4, lr}
 800bdbe:	000c      	movs	r4, r1
 800bdc0:	2101      	movs	r1, #1
 800bdc2:	f7ff febb 	bl	800bb3c <_Balloc>
 800bdc6:	2800      	cmp	r0, #0
 800bdc8:	d106      	bne.n	800bdd8 <__i2b+0x1c>
 800bdca:	21a0      	movs	r1, #160	; 0xa0
 800bdcc:	0002      	movs	r2, r0
 800bdce:	4b04      	ldr	r3, [pc, #16]	; (800bde0 <__i2b+0x24>)
 800bdd0:	4804      	ldr	r0, [pc, #16]	; (800bde4 <__i2b+0x28>)
 800bdd2:	0049      	lsls	r1, r1, #1
 800bdd4:	f001 f988 	bl	800d0e8 <__assert_func>
 800bdd8:	2301      	movs	r3, #1
 800bdda:	6144      	str	r4, [r0, #20]
 800bddc:	6103      	str	r3, [r0, #16]
 800bdde:	bd10      	pop	{r4, pc}
 800bde0:	0800e1f8 	.word	0x0800e1f8
 800bde4:	0800e284 	.word	0x0800e284

0800bde8 <__multiply>:
 800bde8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bdea:	690b      	ldr	r3, [r1, #16]
 800bdec:	0014      	movs	r4, r2
 800bdee:	6912      	ldr	r2, [r2, #16]
 800bdf0:	000d      	movs	r5, r1
 800bdf2:	b089      	sub	sp, #36	; 0x24
 800bdf4:	4293      	cmp	r3, r2
 800bdf6:	da01      	bge.n	800bdfc <__multiply+0x14>
 800bdf8:	0025      	movs	r5, r4
 800bdfa:	000c      	movs	r4, r1
 800bdfc:	692f      	ldr	r7, [r5, #16]
 800bdfe:	6926      	ldr	r6, [r4, #16]
 800be00:	6869      	ldr	r1, [r5, #4]
 800be02:	19bb      	adds	r3, r7, r6
 800be04:	9302      	str	r3, [sp, #8]
 800be06:	68ab      	ldr	r3, [r5, #8]
 800be08:	19ba      	adds	r2, r7, r6
 800be0a:	4293      	cmp	r3, r2
 800be0c:	da00      	bge.n	800be10 <__multiply+0x28>
 800be0e:	3101      	adds	r1, #1
 800be10:	f7ff fe94 	bl	800bb3c <_Balloc>
 800be14:	9001      	str	r0, [sp, #4]
 800be16:	2800      	cmp	r0, #0
 800be18:	d106      	bne.n	800be28 <__multiply+0x40>
 800be1a:	215e      	movs	r1, #94	; 0x5e
 800be1c:	0002      	movs	r2, r0
 800be1e:	4b48      	ldr	r3, [pc, #288]	; (800bf40 <__multiply+0x158>)
 800be20:	4848      	ldr	r0, [pc, #288]	; (800bf44 <__multiply+0x15c>)
 800be22:	31ff      	adds	r1, #255	; 0xff
 800be24:	f001 f960 	bl	800d0e8 <__assert_func>
 800be28:	9b01      	ldr	r3, [sp, #4]
 800be2a:	2200      	movs	r2, #0
 800be2c:	3314      	adds	r3, #20
 800be2e:	469c      	mov	ip, r3
 800be30:	19bb      	adds	r3, r7, r6
 800be32:	009b      	lsls	r3, r3, #2
 800be34:	4463      	add	r3, ip
 800be36:	9303      	str	r3, [sp, #12]
 800be38:	4663      	mov	r3, ip
 800be3a:	9903      	ldr	r1, [sp, #12]
 800be3c:	428b      	cmp	r3, r1
 800be3e:	d32c      	bcc.n	800be9a <__multiply+0xb2>
 800be40:	002b      	movs	r3, r5
 800be42:	0022      	movs	r2, r4
 800be44:	3314      	adds	r3, #20
 800be46:	00bf      	lsls	r7, r7, #2
 800be48:	3214      	adds	r2, #20
 800be4a:	9306      	str	r3, [sp, #24]
 800be4c:	00b6      	lsls	r6, r6, #2
 800be4e:	19db      	adds	r3, r3, r7
 800be50:	9304      	str	r3, [sp, #16]
 800be52:	1993      	adds	r3, r2, r6
 800be54:	9307      	str	r3, [sp, #28]
 800be56:	2304      	movs	r3, #4
 800be58:	9305      	str	r3, [sp, #20]
 800be5a:	002b      	movs	r3, r5
 800be5c:	9904      	ldr	r1, [sp, #16]
 800be5e:	3315      	adds	r3, #21
 800be60:	9200      	str	r2, [sp, #0]
 800be62:	4299      	cmp	r1, r3
 800be64:	d305      	bcc.n	800be72 <__multiply+0x8a>
 800be66:	1b4b      	subs	r3, r1, r5
 800be68:	3b15      	subs	r3, #21
 800be6a:	089b      	lsrs	r3, r3, #2
 800be6c:	3301      	adds	r3, #1
 800be6e:	009b      	lsls	r3, r3, #2
 800be70:	9305      	str	r3, [sp, #20]
 800be72:	9b07      	ldr	r3, [sp, #28]
 800be74:	9a00      	ldr	r2, [sp, #0]
 800be76:	429a      	cmp	r2, r3
 800be78:	d311      	bcc.n	800be9e <__multiply+0xb6>
 800be7a:	9b02      	ldr	r3, [sp, #8]
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	dd06      	ble.n	800be8e <__multiply+0xa6>
 800be80:	9b03      	ldr	r3, [sp, #12]
 800be82:	3b04      	subs	r3, #4
 800be84:	9303      	str	r3, [sp, #12]
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	9300      	str	r3, [sp, #0]
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d053      	beq.n	800bf36 <__multiply+0x14e>
 800be8e:	9b01      	ldr	r3, [sp, #4]
 800be90:	9a02      	ldr	r2, [sp, #8]
 800be92:	0018      	movs	r0, r3
 800be94:	611a      	str	r2, [r3, #16]
 800be96:	b009      	add	sp, #36	; 0x24
 800be98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800be9a:	c304      	stmia	r3!, {r2}
 800be9c:	e7cd      	b.n	800be3a <__multiply+0x52>
 800be9e:	9b00      	ldr	r3, [sp, #0]
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	b298      	uxth	r0, r3
 800bea4:	2800      	cmp	r0, #0
 800bea6:	d01b      	beq.n	800bee0 <__multiply+0xf8>
 800bea8:	4667      	mov	r7, ip
 800beaa:	2400      	movs	r4, #0
 800beac:	9e06      	ldr	r6, [sp, #24]
 800beae:	ce02      	ldmia	r6!, {r1}
 800beb0:	683a      	ldr	r2, [r7, #0]
 800beb2:	b28b      	uxth	r3, r1
 800beb4:	4343      	muls	r3, r0
 800beb6:	b292      	uxth	r2, r2
 800beb8:	189b      	adds	r3, r3, r2
 800beba:	191b      	adds	r3, r3, r4
 800bebc:	0c0c      	lsrs	r4, r1, #16
 800bebe:	4344      	muls	r4, r0
 800bec0:	683a      	ldr	r2, [r7, #0]
 800bec2:	0c11      	lsrs	r1, r2, #16
 800bec4:	1861      	adds	r1, r4, r1
 800bec6:	0c1c      	lsrs	r4, r3, #16
 800bec8:	1909      	adds	r1, r1, r4
 800beca:	0c0c      	lsrs	r4, r1, #16
 800becc:	b29b      	uxth	r3, r3
 800bece:	0409      	lsls	r1, r1, #16
 800bed0:	430b      	orrs	r3, r1
 800bed2:	c708      	stmia	r7!, {r3}
 800bed4:	9b04      	ldr	r3, [sp, #16]
 800bed6:	42b3      	cmp	r3, r6
 800bed8:	d8e9      	bhi.n	800beae <__multiply+0xc6>
 800beda:	4663      	mov	r3, ip
 800bedc:	9a05      	ldr	r2, [sp, #20]
 800bede:	509c      	str	r4, [r3, r2]
 800bee0:	9b00      	ldr	r3, [sp, #0]
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	0c1e      	lsrs	r6, r3, #16
 800bee6:	d020      	beq.n	800bf2a <__multiply+0x142>
 800bee8:	4663      	mov	r3, ip
 800beea:	002c      	movs	r4, r5
 800beec:	4660      	mov	r0, ip
 800beee:	2700      	movs	r7, #0
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	3414      	adds	r4, #20
 800bef4:	6822      	ldr	r2, [r4, #0]
 800bef6:	b29b      	uxth	r3, r3
 800bef8:	b291      	uxth	r1, r2
 800befa:	4371      	muls	r1, r6
 800befc:	6802      	ldr	r2, [r0, #0]
 800befe:	0c12      	lsrs	r2, r2, #16
 800bf00:	1889      	adds	r1, r1, r2
 800bf02:	19cf      	adds	r7, r1, r7
 800bf04:	0439      	lsls	r1, r7, #16
 800bf06:	430b      	orrs	r3, r1
 800bf08:	6003      	str	r3, [r0, #0]
 800bf0a:	cc02      	ldmia	r4!, {r1}
 800bf0c:	6843      	ldr	r3, [r0, #4]
 800bf0e:	0c09      	lsrs	r1, r1, #16
 800bf10:	4371      	muls	r1, r6
 800bf12:	b29b      	uxth	r3, r3
 800bf14:	0c3f      	lsrs	r7, r7, #16
 800bf16:	18cb      	adds	r3, r1, r3
 800bf18:	9a04      	ldr	r2, [sp, #16]
 800bf1a:	19db      	adds	r3, r3, r7
 800bf1c:	0c1f      	lsrs	r7, r3, #16
 800bf1e:	3004      	adds	r0, #4
 800bf20:	42a2      	cmp	r2, r4
 800bf22:	d8e7      	bhi.n	800bef4 <__multiply+0x10c>
 800bf24:	4662      	mov	r2, ip
 800bf26:	9905      	ldr	r1, [sp, #20]
 800bf28:	5053      	str	r3, [r2, r1]
 800bf2a:	9b00      	ldr	r3, [sp, #0]
 800bf2c:	3304      	adds	r3, #4
 800bf2e:	9300      	str	r3, [sp, #0]
 800bf30:	2304      	movs	r3, #4
 800bf32:	449c      	add	ip, r3
 800bf34:	e79d      	b.n	800be72 <__multiply+0x8a>
 800bf36:	9b02      	ldr	r3, [sp, #8]
 800bf38:	3b01      	subs	r3, #1
 800bf3a:	9302      	str	r3, [sp, #8]
 800bf3c:	e79d      	b.n	800be7a <__multiply+0x92>
 800bf3e:	46c0      	nop			; (mov r8, r8)
 800bf40:	0800e1f8 	.word	0x0800e1f8
 800bf44:	0800e284 	.word	0x0800e284

0800bf48 <__pow5mult>:
 800bf48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bf4a:	2303      	movs	r3, #3
 800bf4c:	0015      	movs	r5, r2
 800bf4e:	0007      	movs	r7, r0
 800bf50:	000e      	movs	r6, r1
 800bf52:	401a      	ands	r2, r3
 800bf54:	421d      	tst	r5, r3
 800bf56:	d008      	beq.n	800bf6a <__pow5mult+0x22>
 800bf58:	4925      	ldr	r1, [pc, #148]	; (800bff0 <__pow5mult+0xa8>)
 800bf5a:	3a01      	subs	r2, #1
 800bf5c:	0092      	lsls	r2, r2, #2
 800bf5e:	5852      	ldr	r2, [r2, r1]
 800bf60:	2300      	movs	r3, #0
 800bf62:	0031      	movs	r1, r6
 800bf64:	f7ff fe52 	bl	800bc0c <__multadd>
 800bf68:	0006      	movs	r6, r0
 800bf6a:	10ad      	asrs	r5, r5, #2
 800bf6c:	d03d      	beq.n	800bfea <__pow5mult+0xa2>
 800bf6e:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800bf70:	2c00      	cmp	r4, #0
 800bf72:	d10f      	bne.n	800bf94 <__pow5mult+0x4c>
 800bf74:	2010      	movs	r0, #16
 800bf76:	f7fc fc45 	bl	8008804 <malloc>
 800bf7a:	1e02      	subs	r2, r0, #0
 800bf7c:	6278      	str	r0, [r7, #36]	; 0x24
 800bf7e:	d105      	bne.n	800bf8c <__pow5mult+0x44>
 800bf80:	21d7      	movs	r1, #215	; 0xd7
 800bf82:	4b1c      	ldr	r3, [pc, #112]	; (800bff4 <__pow5mult+0xac>)
 800bf84:	481c      	ldr	r0, [pc, #112]	; (800bff8 <__pow5mult+0xb0>)
 800bf86:	0049      	lsls	r1, r1, #1
 800bf88:	f001 f8ae 	bl	800d0e8 <__assert_func>
 800bf8c:	6044      	str	r4, [r0, #4]
 800bf8e:	6084      	str	r4, [r0, #8]
 800bf90:	6004      	str	r4, [r0, #0]
 800bf92:	60c4      	str	r4, [r0, #12]
 800bf94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf96:	689c      	ldr	r4, [r3, #8]
 800bf98:	9301      	str	r3, [sp, #4]
 800bf9a:	2c00      	cmp	r4, #0
 800bf9c:	d108      	bne.n	800bfb0 <__pow5mult+0x68>
 800bf9e:	0038      	movs	r0, r7
 800bfa0:	4916      	ldr	r1, [pc, #88]	; (800bffc <__pow5mult+0xb4>)
 800bfa2:	f7ff ff0b 	bl	800bdbc <__i2b>
 800bfa6:	9b01      	ldr	r3, [sp, #4]
 800bfa8:	0004      	movs	r4, r0
 800bfaa:	6098      	str	r0, [r3, #8]
 800bfac:	2300      	movs	r3, #0
 800bfae:	6003      	str	r3, [r0, #0]
 800bfb0:	2301      	movs	r3, #1
 800bfb2:	421d      	tst	r5, r3
 800bfb4:	d00a      	beq.n	800bfcc <__pow5mult+0x84>
 800bfb6:	0031      	movs	r1, r6
 800bfb8:	0022      	movs	r2, r4
 800bfba:	0038      	movs	r0, r7
 800bfbc:	f7ff ff14 	bl	800bde8 <__multiply>
 800bfc0:	0031      	movs	r1, r6
 800bfc2:	9001      	str	r0, [sp, #4]
 800bfc4:	0038      	movs	r0, r7
 800bfc6:	f7ff fdfd 	bl	800bbc4 <_Bfree>
 800bfca:	9e01      	ldr	r6, [sp, #4]
 800bfcc:	106d      	asrs	r5, r5, #1
 800bfce:	d00c      	beq.n	800bfea <__pow5mult+0xa2>
 800bfd0:	6820      	ldr	r0, [r4, #0]
 800bfd2:	2800      	cmp	r0, #0
 800bfd4:	d107      	bne.n	800bfe6 <__pow5mult+0x9e>
 800bfd6:	0022      	movs	r2, r4
 800bfd8:	0021      	movs	r1, r4
 800bfda:	0038      	movs	r0, r7
 800bfdc:	f7ff ff04 	bl	800bde8 <__multiply>
 800bfe0:	2300      	movs	r3, #0
 800bfe2:	6020      	str	r0, [r4, #0]
 800bfe4:	6003      	str	r3, [r0, #0]
 800bfe6:	0004      	movs	r4, r0
 800bfe8:	e7e2      	b.n	800bfb0 <__pow5mult+0x68>
 800bfea:	0030      	movs	r0, r6
 800bfec:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800bfee:	46c0      	nop			; (mov r8, r8)
 800bff0:	0800e3d0 	.word	0x0800e3d0
 800bff4:	0800e186 	.word	0x0800e186
 800bff8:	0800e284 	.word	0x0800e284
 800bffc:	00000271 	.word	0x00000271

0800c000 <__lshift>:
 800c000:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c002:	000c      	movs	r4, r1
 800c004:	0017      	movs	r7, r2
 800c006:	6923      	ldr	r3, [r4, #16]
 800c008:	1155      	asrs	r5, r2, #5
 800c00a:	b087      	sub	sp, #28
 800c00c:	18eb      	adds	r3, r5, r3
 800c00e:	9302      	str	r3, [sp, #8]
 800c010:	3301      	adds	r3, #1
 800c012:	9301      	str	r3, [sp, #4]
 800c014:	6849      	ldr	r1, [r1, #4]
 800c016:	68a3      	ldr	r3, [r4, #8]
 800c018:	9004      	str	r0, [sp, #16]
 800c01a:	9a01      	ldr	r2, [sp, #4]
 800c01c:	4293      	cmp	r3, r2
 800c01e:	db10      	blt.n	800c042 <__lshift+0x42>
 800c020:	9804      	ldr	r0, [sp, #16]
 800c022:	f7ff fd8b 	bl	800bb3c <_Balloc>
 800c026:	2300      	movs	r3, #0
 800c028:	0002      	movs	r2, r0
 800c02a:	0006      	movs	r6, r0
 800c02c:	0019      	movs	r1, r3
 800c02e:	3214      	adds	r2, #20
 800c030:	4298      	cmp	r0, r3
 800c032:	d10c      	bne.n	800c04e <__lshift+0x4e>
 800c034:	21da      	movs	r1, #218	; 0xda
 800c036:	0002      	movs	r2, r0
 800c038:	4b26      	ldr	r3, [pc, #152]	; (800c0d4 <__lshift+0xd4>)
 800c03a:	4827      	ldr	r0, [pc, #156]	; (800c0d8 <__lshift+0xd8>)
 800c03c:	31ff      	adds	r1, #255	; 0xff
 800c03e:	f001 f853 	bl	800d0e8 <__assert_func>
 800c042:	3101      	adds	r1, #1
 800c044:	005b      	lsls	r3, r3, #1
 800c046:	e7e8      	b.n	800c01a <__lshift+0x1a>
 800c048:	0098      	lsls	r0, r3, #2
 800c04a:	5011      	str	r1, [r2, r0]
 800c04c:	3301      	adds	r3, #1
 800c04e:	42ab      	cmp	r3, r5
 800c050:	dbfa      	blt.n	800c048 <__lshift+0x48>
 800c052:	43eb      	mvns	r3, r5
 800c054:	17db      	asrs	r3, r3, #31
 800c056:	401d      	ands	r5, r3
 800c058:	211f      	movs	r1, #31
 800c05a:	0023      	movs	r3, r4
 800c05c:	0038      	movs	r0, r7
 800c05e:	00ad      	lsls	r5, r5, #2
 800c060:	1955      	adds	r5, r2, r5
 800c062:	6922      	ldr	r2, [r4, #16]
 800c064:	3314      	adds	r3, #20
 800c066:	0092      	lsls	r2, r2, #2
 800c068:	4008      	ands	r0, r1
 800c06a:	4684      	mov	ip, r0
 800c06c:	189a      	adds	r2, r3, r2
 800c06e:	420f      	tst	r7, r1
 800c070:	d02a      	beq.n	800c0c8 <__lshift+0xc8>
 800c072:	3101      	adds	r1, #1
 800c074:	1a09      	subs	r1, r1, r0
 800c076:	9105      	str	r1, [sp, #20]
 800c078:	2100      	movs	r1, #0
 800c07a:	9503      	str	r5, [sp, #12]
 800c07c:	4667      	mov	r7, ip
 800c07e:	6818      	ldr	r0, [r3, #0]
 800c080:	40b8      	lsls	r0, r7
 800c082:	4301      	orrs	r1, r0
 800c084:	9803      	ldr	r0, [sp, #12]
 800c086:	c002      	stmia	r0!, {r1}
 800c088:	cb02      	ldmia	r3!, {r1}
 800c08a:	9003      	str	r0, [sp, #12]
 800c08c:	9805      	ldr	r0, [sp, #20]
 800c08e:	40c1      	lsrs	r1, r0
 800c090:	429a      	cmp	r2, r3
 800c092:	d8f3      	bhi.n	800c07c <__lshift+0x7c>
 800c094:	0020      	movs	r0, r4
 800c096:	3015      	adds	r0, #21
 800c098:	2304      	movs	r3, #4
 800c09a:	4282      	cmp	r2, r0
 800c09c:	d304      	bcc.n	800c0a8 <__lshift+0xa8>
 800c09e:	1b13      	subs	r3, r2, r4
 800c0a0:	3b15      	subs	r3, #21
 800c0a2:	089b      	lsrs	r3, r3, #2
 800c0a4:	3301      	adds	r3, #1
 800c0a6:	009b      	lsls	r3, r3, #2
 800c0a8:	50e9      	str	r1, [r5, r3]
 800c0aa:	2900      	cmp	r1, #0
 800c0ac:	d002      	beq.n	800c0b4 <__lshift+0xb4>
 800c0ae:	9b02      	ldr	r3, [sp, #8]
 800c0b0:	3302      	adds	r3, #2
 800c0b2:	9301      	str	r3, [sp, #4]
 800c0b4:	9b01      	ldr	r3, [sp, #4]
 800c0b6:	9804      	ldr	r0, [sp, #16]
 800c0b8:	3b01      	subs	r3, #1
 800c0ba:	0021      	movs	r1, r4
 800c0bc:	6133      	str	r3, [r6, #16]
 800c0be:	f7ff fd81 	bl	800bbc4 <_Bfree>
 800c0c2:	0030      	movs	r0, r6
 800c0c4:	b007      	add	sp, #28
 800c0c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c0c8:	cb02      	ldmia	r3!, {r1}
 800c0ca:	c502      	stmia	r5!, {r1}
 800c0cc:	429a      	cmp	r2, r3
 800c0ce:	d8fb      	bhi.n	800c0c8 <__lshift+0xc8>
 800c0d0:	e7f0      	b.n	800c0b4 <__lshift+0xb4>
 800c0d2:	46c0      	nop			; (mov r8, r8)
 800c0d4:	0800e1f8 	.word	0x0800e1f8
 800c0d8:	0800e284 	.word	0x0800e284

0800c0dc <__mcmp>:
 800c0dc:	6902      	ldr	r2, [r0, #16]
 800c0de:	690b      	ldr	r3, [r1, #16]
 800c0e0:	b530      	push	{r4, r5, lr}
 800c0e2:	0004      	movs	r4, r0
 800c0e4:	1ad0      	subs	r0, r2, r3
 800c0e6:	429a      	cmp	r2, r3
 800c0e8:	d10d      	bne.n	800c106 <__mcmp+0x2a>
 800c0ea:	009b      	lsls	r3, r3, #2
 800c0ec:	3414      	adds	r4, #20
 800c0ee:	3114      	adds	r1, #20
 800c0f0:	18e2      	adds	r2, r4, r3
 800c0f2:	18c9      	adds	r1, r1, r3
 800c0f4:	3a04      	subs	r2, #4
 800c0f6:	3904      	subs	r1, #4
 800c0f8:	6815      	ldr	r5, [r2, #0]
 800c0fa:	680b      	ldr	r3, [r1, #0]
 800c0fc:	429d      	cmp	r5, r3
 800c0fe:	d003      	beq.n	800c108 <__mcmp+0x2c>
 800c100:	2001      	movs	r0, #1
 800c102:	429d      	cmp	r5, r3
 800c104:	d303      	bcc.n	800c10e <__mcmp+0x32>
 800c106:	bd30      	pop	{r4, r5, pc}
 800c108:	4294      	cmp	r4, r2
 800c10a:	d3f3      	bcc.n	800c0f4 <__mcmp+0x18>
 800c10c:	e7fb      	b.n	800c106 <__mcmp+0x2a>
 800c10e:	4240      	negs	r0, r0
 800c110:	e7f9      	b.n	800c106 <__mcmp+0x2a>
	...

0800c114 <__mdiff>:
 800c114:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c116:	000e      	movs	r6, r1
 800c118:	0007      	movs	r7, r0
 800c11a:	0011      	movs	r1, r2
 800c11c:	0030      	movs	r0, r6
 800c11e:	b087      	sub	sp, #28
 800c120:	0014      	movs	r4, r2
 800c122:	f7ff ffdb 	bl	800c0dc <__mcmp>
 800c126:	1e05      	subs	r5, r0, #0
 800c128:	d110      	bne.n	800c14c <__mdiff+0x38>
 800c12a:	0001      	movs	r1, r0
 800c12c:	0038      	movs	r0, r7
 800c12e:	f7ff fd05 	bl	800bb3c <_Balloc>
 800c132:	1e02      	subs	r2, r0, #0
 800c134:	d104      	bne.n	800c140 <__mdiff+0x2c>
 800c136:	4b40      	ldr	r3, [pc, #256]	; (800c238 <__mdiff+0x124>)
 800c138:	4940      	ldr	r1, [pc, #256]	; (800c23c <__mdiff+0x128>)
 800c13a:	4841      	ldr	r0, [pc, #260]	; (800c240 <__mdiff+0x12c>)
 800c13c:	f000 ffd4 	bl	800d0e8 <__assert_func>
 800c140:	2301      	movs	r3, #1
 800c142:	6145      	str	r5, [r0, #20]
 800c144:	6103      	str	r3, [r0, #16]
 800c146:	0010      	movs	r0, r2
 800c148:	b007      	add	sp, #28
 800c14a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c14c:	2301      	movs	r3, #1
 800c14e:	9301      	str	r3, [sp, #4]
 800c150:	2800      	cmp	r0, #0
 800c152:	db04      	blt.n	800c15e <__mdiff+0x4a>
 800c154:	0023      	movs	r3, r4
 800c156:	0034      	movs	r4, r6
 800c158:	001e      	movs	r6, r3
 800c15a:	2300      	movs	r3, #0
 800c15c:	9301      	str	r3, [sp, #4]
 800c15e:	0038      	movs	r0, r7
 800c160:	6861      	ldr	r1, [r4, #4]
 800c162:	f7ff fceb 	bl	800bb3c <_Balloc>
 800c166:	1e02      	subs	r2, r0, #0
 800c168:	d103      	bne.n	800c172 <__mdiff+0x5e>
 800c16a:	2190      	movs	r1, #144	; 0x90
 800c16c:	4b32      	ldr	r3, [pc, #200]	; (800c238 <__mdiff+0x124>)
 800c16e:	0089      	lsls	r1, r1, #2
 800c170:	e7e3      	b.n	800c13a <__mdiff+0x26>
 800c172:	9b01      	ldr	r3, [sp, #4]
 800c174:	2700      	movs	r7, #0
 800c176:	60c3      	str	r3, [r0, #12]
 800c178:	6920      	ldr	r0, [r4, #16]
 800c17a:	3414      	adds	r4, #20
 800c17c:	9401      	str	r4, [sp, #4]
 800c17e:	9b01      	ldr	r3, [sp, #4]
 800c180:	0084      	lsls	r4, r0, #2
 800c182:	191b      	adds	r3, r3, r4
 800c184:	0034      	movs	r4, r6
 800c186:	9302      	str	r3, [sp, #8]
 800c188:	6933      	ldr	r3, [r6, #16]
 800c18a:	3414      	adds	r4, #20
 800c18c:	0099      	lsls	r1, r3, #2
 800c18e:	1863      	adds	r3, r4, r1
 800c190:	9303      	str	r3, [sp, #12]
 800c192:	0013      	movs	r3, r2
 800c194:	3314      	adds	r3, #20
 800c196:	469c      	mov	ip, r3
 800c198:	9305      	str	r3, [sp, #20]
 800c19a:	9b01      	ldr	r3, [sp, #4]
 800c19c:	9304      	str	r3, [sp, #16]
 800c19e:	9b04      	ldr	r3, [sp, #16]
 800c1a0:	cc02      	ldmia	r4!, {r1}
 800c1a2:	cb20      	ldmia	r3!, {r5}
 800c1a4:	9304      	str	r3, [sp, #16]
 800c1a6:	b2ab      	uxth	r3, r5
 800c1a8:	19df      	adds	r7, r3, r7
 800c1aa:	b28b      	uxth	r3, r1
 800c1ac:	1afb      	subs	r3, r7, r3
 800c1ae:	0c09      	lsrs	r1, r1, #16
 800c1b0:	0c2d      	lsrs	r5, r5, #16
 800c1b2:	1a6d      	subs	r5, r5, r1
 800c1b4:	1419      	asrs	r1, r3, #16
 800c1b6:	186d      	adds	r5, r5, r1
 800c1b8:	4661      	mov	r1, ip
 800c1ba:	142f      	asrs	r7, r5, #16
 800c1bc:	b29b      	uxth	r3, r3
 800c1be:	042d      	lsls	r5, r5, #16
 800c1c0:	432b      	orrs	r3, r5
 800c1c2:	c108      	stmia	r1!, {r3}
 800c1c4:	9b03      	ldr	r3, [sp, #12]
 800c1c6:	468c      	mov	ip, r1
 800c1c8:	42a3      	cmp	r3, r4
 800c1ca:	d8e8      	bhi.n	800c19e <__mdiff+0x8a>
 800c1cc:	0031      	movs	r1, r6
 800c1ce:	9c03      	ldr	r4, [sp, #12]
 800c1d0:	3115      	adds	r1, #21
 800c1d2:	2304      	movs	r3, #4
 800c1d4:	428c      	cmp	r4, r1
 800c1d6:	d304      	bcc.n	800c1e2 <__mdiff+0xce>
 800c1d8:	1ba3      	subs	r3, r4, r6
 800c1da:	3b15      	subs	r3, #21
 800c1dc:	089b      	lsrs	r3, r3, #2
 800c1de:	3301      	adds	r3, #1
 800c1e0:	009b      	lsls	r3, r3, #2
 800c1e2:	9901      	ldr	r1, [sp, #4]
 800c1e4:	18cc      	adds	r4, r1, r3
 800c1e6:	9905      	ldr	r1, [sp, #20]
 800c1e8:	0026      	movs	r6, r4
 800c1ea:	18cb      	adds	r3, r1, r3
 800c1ec:	469c      	mov	ip, r3
 800c1ee:	9902      	ldr	r1, [sp, #8]
 800c1f0:	428e      	cmp	r6, r1
 800c1f2:	d310      	bcc.n	800c216 <__mdiff+0x102>
 800c1f4:	9e02      	ldr	r6, [sp, #8]
 800c1f6:	1ee1      	subs	r1, r4, #3
 800c1f8:	2500      	movs	r5, #0
 800c1fa:	428e      	cmp	r6, r1
 800c1fc:	d304      	bcc.n	800c208 <__mdiff+0xf4>
 800c1fe:	0031      	movs	r1, r6
 800c200:	3103      	adds	r1, #3
 800c202:	1b0c      	subs	r4, r1, r4
 800c204:	08a4      	lsrs	r4, r4, #2
 800c206:	00a5      	lsls	r5, r4, #2
 800c208:	195b      	adds	r3, r3, r5
 800c20a:	3b04      	subs	r3, #4
 800c20c:	6819      	ldr	r1, [r3, #0]
 800c20e:	2900      	cmp	r1, #0
 800c210:	d00f      	beq.n	800c232 <__mdiff+0x11e>
 800c212:	6110      	str	r0, [r2, #16]
 800c214:	e797      	b.n	800c146 <__mdiff+0x32>
 800c216:	ce02      	ldmia	r6!, {r1}
 800c218:	b28d      	uxth	r5, r1
 800c21a:	19ed      	adds	r5, r5, r7
 800c21c:	0c0f      	lsrs	r7, r1, #16
 800c21e:	1429      	asrs	r1, r5, #16
 800c220:	1879      	adds	r1, r7, r1
 800c222:	140f      	asrs	r7, r1, #16
 800c224:	b2ad      	uxth	r5, r5
 800c226:	0409      	lsls	r1, r1, #16
 800c228:	430d      	orrs	r5, r1
 800c22a:	4661      	mov	r1, ip
 800c22c:	c120      	stmia	r1!, {r5}
 800c22e:	468c      	mov	ip, r1
 800c230:	e7dd      	b.n	800c1ee <__mdiff+0xda>
 800c232:	3801      	subs	r0, #1
 800c234:	e7e9      	b.n	800c20a <__mdiff+0xf6>
 800c236:	46c0      	nop			; (mov r8, r8)
 800c238:	0800e1f8 	.word	0x0800e1f8
 800c23c:	00000232 	.word	0x00000232
 800c240:	0800e284 	.word	0x0800e284

0800c244 <__ulp>:
 800c244:	4b0f      	ldr	r3, [pc, #60]	; (800c284 <__ulp+0x40>)
 800c246:	4019      	ands	r1, r3
 800c248:	4b0f      	ldr	r3, [pc, #60]	; (800c288 <__ulp+0x44>)
 800c24a:	18c9      	adds	r1, r1, r3
 800c24c:	2900      	cmp	r1, #0
 800c24e:	dd04      	ble.n	800c25a <__ulp+0x16>
 800c250:	2200      	movs	r2, #0
 800c252:	000b      	movs	r3, r1
 800c254:	0010      	movs	r0, r2
 800c256:	0019      	movs	r1, r3
 800c258:	4770      	bx	lr
 800c25a:	4249      	negs	r1, r1
 800c25c:	2200      	movs	r2, #0
 800c25e:	2300      	movs	r3, #0
 800c260:	1509      	asrs	r1, r1, #20
 800c262:	2913      	cmp	r1, #19
 800c264:	dc04      	bgt.n	800c270 <__ulp+0x2c>
 800c266:	2080      	movs	r0, #128	; 0x80
 800c268:	0300      	lsls	r0, r0, #12
 800c26a:	4108      	asrs	r0, r1
 800c26c:	0003      	movs	r3, r0
 800c26e:	e7f1      	b.n	800c254 <__ulp+0x10>
 800c270:	3914      	subs	r1, #20
 800c272:	2001      	movs	r0, #1
 800c274:	291e      	cmp	r1, #30
 800c276:	dc02      	bgt.n	800c27e <__ulp+0x3a>
 800c278:	2080      	movs	r0, #128	; 0x80
 800c27a:	0600      	lsls	r0, r0, #24
 800c27c:	40c8      	lsrs	r0, r1
 800c27e:	0002      	movs	r2, r0
 800c280:	e7e8      	b.n	800c254 <__ulp+0x10>
 800c282:	46c0      	nop			; (mov r8, r8)
 800c284:	7ff00000 	.word	0x7ff00000
 800c288:	fcc00000 	.word	0xfcc00000

0800c28c <__b2d>:
 800c28c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c28e:	0006      	movs	r6, r0
 800c290:	6903      	ldr	r3, [r0, #16]
 800c292:	3614      	adds	r6, #20
 800c294:	009b      	lsls	r3, r3, #2
 800c296:	18f3      	adds	r3, r6, r3
 800c298:	1f1d      	subs	r5, r3, #4
 800c29a:	682c      	ldr	r4, [r5, #0]
 800c29c:	000f      	movs	r7, r1
 800c29e:	0020      	movs	r0, r4
 800c2a0:	9301      	str	r3, [sp, #4]
 800c2a2:	f7ff fd43 	bl	800bd2c <__hi0bits>
 800c2a6:	2320      	movs	r3, #32
 800c2a8:	1a1b      	subs	r3, r3, r0
 800c2aa:	491f      	ldr	r1, [pc, #124]	; (800c328 <__b2d+0x9c>)
 800c2ac:	603b      	str	r3, [r7, #0]
 800c2ae:	280a      	cmp	r0, #10
 800c2b0:	dc16      	bgt.n	800c2e0 <__b2d+0x54>
 800c2b2:	230b      	movs	r3, #11
 800c2b4:	0027      	movs	r7, r4
 800c2b6:	1a1b      	subs	r3, r3, r0
 800c2b8:	40df      	lsrs	r7, r3
 800c2ba:	4339      	orrs	r1, r7
 800c2bc:	469c      	mov	ip, r3
 800c2be:	000b      	movs	r3, r1
 800c2c0:	2100      	movs	r1, #0
 800c2c2:	42ae      	cmp	r6, r5
 800c2c4:	d202      	bcs.n	800c2cc <__b2d+0x40>
 800c2c6:	9901      	ldr	r1, [sp, #4]
 800c2c8:	3908      	subs	r1, #8
 800c2ca:	6809      	ldr	r1, [r1, #0]
 800c2cc:	3015      	adds	r0, #21
 800c2ce:	4084      	lsls	r4, r0
 800c2d0:	4660      	mov	r0, ip
 800c2d2:	40c1      	lsrs	r1, r0
 800c2d4:	430c      	orrs	r4, r1
 800c2d6:	0022      	movs	r2, r4
 800c2d8:	0010      	movs	r0, r2
 800c2da:	0019      	movs	r1, r3
 800c2dc:	b003      	add	sp, #12
 800c2de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c2e0:	2700      	movs	r7, #0
 800c2e2:	42ae      	cmp	r6, r5
 800c2e4:	d202      	bcs.n	800c2ec <__b2d+0x60>
 800c2e6:	9d01      	ldr	r5, [sp, #4]
 800c2e8:	3d08      	subs	r5, #8
 800c2ea:	682f      	ldr	r7, [r5, #0]
 800c2ec:	230b      	movs	r3, #11
 800c2ee:	425b      	negs	r3, r3
 800c2f0:	469c      	mov	ip, r3
 800c2f2:	4484      	add	ip, r0
 800c2f4:	280b      	cmp	r0, #11
 800c2f6:	d013      	beq.n	800c320 <__b2d+0x94>
 800c2f8:	4663      	mov	r3, ip
 800c2fa:	2020      	movs	r0, #32
 800c2fc:	409c      	lsls	r4, r3
 800c2fe:	1ac0      	subs	r0, r0, r3
 800c300:	003b      	movs	r3, r7
 800c302:	40c3      	lsrs	r3, r0
 800c304:	431c      	orrs	r4, r3
 800c306:	4321      	orrs	r1, r4
 800c308:	000b      	movs	r3, r1
 800c30a:	2100      	movs	r1, #0
 800c30c:	42b5      	cmp	r5, r6
 800c30e:	d901      	bls.n	800c314 <__b2d+0x88>
 800c310:	3d04      	subs	r5, #4
 800c312:	6829      	ldr	r1, [r5, #0]
 800c314:	4664      	mov	r4, ip
 800c316:	40c1      	lsrs	r1, r0
 800c318:	40a7      	lsls	r7, r4
 800c31a:	430f      	orrs	r7, r1
 800c31c:	003a      	movs	r2, r7
 800c31e:	e7db      	b.n	800c2d8 <__b2d+0x4c>
 800c320:	4321      	orrs	r1, r4
 800c322:	000b      	movs	r3, r1
 800c324:	e7fa      	b.n	800c31c <__b2d+0x90>
 800c326:	46c0      	nop			; (mov r8, r8)
 800c328:	3ff00000 	.word	0x3ff00000

0800c32c <__d2b>:
 800c32c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c32e:	2101      	movs	r1, #1
 800c330:	0014      	movs	r4, r2
 800c332:	001e      	movs	r6, r3
 800c334:	9f08      	ldr	r7, [sp, #32]
 800c336:	f7ff fc01 	bl	800bb3c <_Balloc>
 800c33a:	1e05      	subs	r5, r0, #0
 800c33c:	d105      	bne.n	800c34a <__d2b+0x1e>
 800c33e:	0002      	movs	r2, r0
 800c340:	4b26      	ldr	r3, [pc, #152]	; (800c3dc <__d2b+0xb0>)
 800c342:	4927      	ldr	r1, [pc, #156]	; (800c3e0 <__d2b+0xb4>)
 800c344:	4827      	ldr	r0, [pc, #156]	; (800c3e4 <__d2b+0xb8>)
 800c346:	f000 fecf 	bl	800d0e8 <__assert_func>
 800c34a:	0333      	lsls	r3, r6, #12
 800c34c:	0076      	lsls	r6, r6, #1
 800c34e:	0b1b      	lsrs	r3, r3, #12
 800c350:	0d76      	lsrs	r6, r6, #21
 800c352:	d124      	bne.n	800c39e <__d2b+0x72>
 800c354:	9301      	str	r3, [sp, #4]
 800c356:	2c00      	cmp	r4, #0
 800c358:	d027      	beq.n	800c3aa <__d2b+0x7e>
 800c35a:	4668      	mov	r0, sp
 800c35c:	9400      	str	r4, [sp, #0]
 800c35e:	f7ff fcff 	bl	800bd60 <__lo0bits>
 800c362:	9c00      	ldr	r4, [sp, #0]
 800c364:	2800      	cmp	r0, #0
 800c366:	d01e      	beq.n	800c3a6 <__d2b+0x7a>
 800c368:	9b01      	ldr	r3, [sp, #4]
 800c36a:	2120      	movs	r1, #32
 800c36c:	001a      	movs	r2, r3
 800c36e:	1a09      	subs	r1, r1, r0
 800c370:	408a      	lsls	r2, r1
 800c372:	40c3      	lsrs	r3, r0
 800c374:	4322      	orrs	r2, r4
 800c376:	616a      	str	r2, [r5, #20]
 800c378:	9301      	str	r3, [sp, #4]
 800c37a:	9c01      	ldr	r4, [sp, #4]
 800c37c:	61ac      	str	r4, [r5, #24]
 800c37e:	1e63      	subs	r3, r4, #1
 800c380:	419c      	sbcs	r4, r3
 800c382:	3401      	adds	r4, #1
 800c384:	612c      	str	r4, [r5, #16]
 800c386:	2e00      	cmp	r6, #0
 800c388:	d018      	beq.n	800c3bc <__d2b+0x90>
 800c38a:	4b17      	ldr	r3, [pc, #92]	; (800c3e8 <__d2b+0xbc>)
 800c38c:	18f6      	adds	r6, r6, r3
 800c38e:	2335      	movs	r3, #53	; 0x35
 800c390:	1836      	adds	r6, r6, r0
 800c392:	1a18      	subs	r0, r3, r0
 800c394:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c396:	603e      	str	r6, [r7, #0]
 800c398:	6018      	str	r0, [r3, #0]
 800c39a:	0028      	movs	r0, r5
 800c39c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c39e:	2280      	movs	r2, #128	; 0x80
 800c3a0:	0352      	lsls	r2, r2, #13
 800c3a2:	4313      	orrs	r3, r2
 800c3a4:	e7d6      	b.n	800c354 <__d2b+0x28>
 800c3a6:	616c      	str	r4, [r5, #20]
 800c3a8:	e7e7      	b.n	800c37a <__d2b+0x4e>
 800c3aa:	a801      	add	r0, sp, #4
 800c3ac:	f7ff fcd8 	bl	800bd60 <__lo0bits>
 800c3b0:	2401      	movs	r4, #1
 800c3b2:	9b01      	ldr	r3, [sp, #4]
 800c3b4:	612c      	str	r4, [r5, #16]
 800c3b6:	616b      	str	r3, [r5, #20]
 800c3b8:	3020      	adds	r0, #32
 800c3ba:	e7e4      	b.n	800c386 <__d2b+0x5a>
 800c3bc:	4b0b      	ldr	r3, [pc, #44]	; (800c3ec <__d2b+0xc0>)
 800c3be:	18c0      	adds	r0, r0, r3
 800c3c0:	4b0b      	ldr	r3, [pc, #44]	; (800c3f0 <__d2b+0xc4>)
 800c3c2:	6038      	str	r0, [r7, #0]
 800c3c4:	18e3      	adds	r3, r4, r3
 800c3c6:	009b      	lsls	r3, r3, #2
 800c3c8:	18eb      	adds	r3, r5, r3
 800c3ca:	6958      	ldr	r0, [r3, #20]
 800c3cc:	f7ff fcae 	bl	800bd2c <__hi0bits>
 800c3d0:	0164      	lsls	r4, r4, #5
 800c3d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c3d4:	1a24      	subs	r4, r4, r0
 800c3d6:	601c      	str	r4, [r3, #0]
 800c3d8:	e7df      	b.n	800c39a <__d2b+0x6e>
 800c3da:	46c0      	nop			; (mov r8, r8)
 800c3dc:	0800e1f8 	.word	0x0800e1f8
 800c3e0:	0000030a 	.word	0x0000030a
 800c3e4:	0800e284 	.word	0x0800e284
 800c3e8:	fffffbcd 	.word	0xfffffbcd
 800c3ec:	fffffbce 	.word	0xfffffbce
 800c3f0:	3fffffff 	.word	0x3fffffff

0800c3f4 <__ratio>:
 800c3f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c3f6:	b087      	sub	sp, #28
 800c3f8:	000f      	movs	r7, r1
 800c3fa:	a904      	add	r1, sp, #16
 800c3fc:	0006      	movs	r6, r0
 800c3fe:	f7ff ff45 	bl	800c28c <__b2d>
 800c402:	9000      	str	r0, [sp, #0]
 800c404:	9101      	str	r1, [sp, #4]
 800c406:	9c00      	ldr	r4, [sp, #0]
 800c408:	9d01      	ldr	r5, [sp, #4]
 800c40a:	0038      	movs	r0, r7
 800c40c:	a905      	add	r1, sp, #20
 800c40e:	f7ff ff3d 	bl	800c28c <__b2d>
 800c412:	9002      	str	r0, [sp, #8]
 800c414:	9103      	str	r1, [sp, #12]
 800c416:	9a02      	ldr	r2, [sp, #8]
 800c418:	9b03      	ldr	r3, [sp, #12]
 800c41a:	6931      	ldr	r1, [r6, #16]
 800c41c:	6938      	ldr	r0, [r7, #16]
 800c41e:	9e05      	ldr	r6, [sp, #20]
 800c420:	1a08      	subs	r0, r1, r0
 800c422:	9904      	ldr	r1, [sp, #16]
 800c424:	0140      	lsls	r0, r0, #5
 800c426:	1b89      	subs	r1, r1, r6
 800c428:	1841      	adds	r1, r0, r1
 800c42a:	0508      	lsls	r0, r1, #20
 800c42c:	2900      	cmp	r1, #0
 800c42e:	dd07      	ble.n	800c440 <__ratio+0x4c>
 800c430:	9901      	ldr	r1, [sp, #4]
 800c432:	1845      	adds	r5, r0, r1
 800c434:	0020      	movs	r0, r4
 800c436:	0029      	movs	r1, r5
 800c438:	f7f5 f9a4 	bl	8001784 <__aeabi_ddiv>
 800c43c:	b007      	add	sp, #28
 800c43e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c440:	9903      	ldr	r1, [sp, #12]
 800c442:	1a0b      	subs	r3, r1, r0
 800c444:	e7f6      	b.n	800c434 <__ratio+0x40>

0800c446 <__copybits>:
 800c446:	b570      	push	{r4, r5, r6, lr}
 800c448:	0014      	movs	r4, r2
 800c44a:	0005      	movs	r5, r0
 800c44c:	3901      	subs	r1, #1
 800c44e:	6913      	ldr	r3, [r2, #16]
 800c450:	1149      	asrs	r1, r1, #5
 800c452:	3101      	adds	r1, #1
 800c454:	0089      	lsls	r1, r1, #2
 800c456:	3414      	adds	r4, #20
 800c458:	009b      	lsls	r3, r3, #2
 800c45a:	1841      	adds	r1, r0, r1
 800c45c:	18e3      	adds	r3, r4, r3
 800c45e:	42a3      	cmp	r3, r4
 800c460:	d80d      	bhi.n	800c47e <__copybits+0x38>
 800c462:	0014      	movs	r4, r2
 800c464:	3411      	adds	r4, #17
 800c466:	2500      	movs	r5, #0
 800c468:	429c      	cmp	r4, r3
 800c46a:	d803      	bhi.n	800c474 <__copybits+0x2e>
 800c46c:	1a9b      	subs	r3, r3, r2
 800c46e:	3b11      	subs	r3, #17
 800c470:	089b      	lsrs	r3, r3, #2
 800c472:	009d      	lsls	r5, r3, #2
 800c474:	2300      	movs	r3, #0
 800c476:	1940      	adds	r0, r0, r5
 800c478:	4281      	cmp	r1, r0
 800c47a:	d803      	bhi.n	800c484 <__copybits+0x3e>
 800c47c:	bd70      	pop	{r4, r5, r6, pc}
 800c47e:	cc40      	ldmia	r4!, {r6}
 800c480:	c540      	stmia	r5!, {r6}
 800c482:	e7ec      	b.n	800c45e <__copybits+0x18>
 800c484:	c008      	stmia	r0!, {r3}
 800c486:	e7f7      	b.n	800c478 <__copybits+0x32>

0800c488 <__any_on>:
 800c488:	0002      	movs	r2, r0
 800c48a:	6900      	ldr	r0, [r0, #16]
 800c48c:	b510      	push	{r4, lr}
 800c48e:	3214      	adds	r2, #20
 800c490:	114b      	asrs	r3, r1, #5
 800c492:	4298      	cmp	r0, r3
 800c494:	db13      	blt.n	800c4be <__any_on+0x36>
 800c496:	dd0c      	ble.n	800c4b2 <__any_on+0x2a>
 800c498:	241f      	movs	r4, #31
 800c49a:	0008      	movs	r0, r1
 800c49c:	4020      	ands	r0, r4
 800c49e:	4221      	tst	r1, r4
 800c4a0:	d007      	beq.n	800c4b2 <__any_on+0x2a>
 800c4a2:	0099      	lsls	r1, r3, #2
 800c4a4:	588c      	ldr	r4, [r1, r2]
 800c4a6:	0021      	movs	r1, r4
 800c4a8:	40c1      	lsrs	r1, r0
 800c4aa:	4081      	lsls	r1, r0
 800c4ac:	2001      	movs	r0, #1
 800c4ae:	428c      	cmp	r4, r1
 800c4b0:	d104      	bne.n	800c4bc <__any_on+0x34>
 800c4b2:	009b      	lsls	r3, r3, #2
 800c4b4:	18d3      	adds	r3, r2, r3
 800c4b6:	4293      	cmp	r3, r2
 800c4b8:	d803      	bhi.n	800c4c2 <__any_on+0x3a>
 800c4ba:	2000      	movs	r0, #0
 800c4bc:	bd10      	pop	{r4, pc}
 800c4be:	0003      	movs	r3, r0
 800c4c0:	e7f7      	b.n	800c4b2 <__any_on+0x2a>
 800c4c2:	3b04      	subs	r3, #4
 800c4c4:	6819      	ldr	r1, [r3, #0]
 800c4c6:	2900      	cmp	r1, #0
 800c4c8:	d0f5      	beq.n	800c4b6 <__any_on+0x2e>
 800c4ca:	2001      	movs	r0, #1
 800c4cc:	e7f6      	b.n	800c4bc <__any_on+0x34>

0800c4ce <_calloc_r>:
 800c4ce:	b570      	push	{r4, r5, r6, lr}
 800c4d0:	0c13      	lsrs	r3, r2, #16
 800c4d2:	0c0d      	lsrs	r5, r1, #16
 800c4d4:	d11e      	bne.n	800c514 <_calloc_r+0x46>
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d10c      	bne.n	800c4f4 <_calloc_r+0x26>
 800c4da:	b289      	uxth	r1, r1
 800c4dc:	b294      	uxth	r4, r2
 800c4de:	434c      	muls	r4, r1
 800c4e0:	0021      	movs	r1, r4
 800c4e2:	f7fc fa29 	bl	8008938 <_malloc_r>
 800c4e6:	1e05      	subs	r5, r0, #0
 800c4e8:	d01b      	beq.n	800c522 <_calloc_r+0x54>
 800c4ea:	0022      	movs	r2, r4
 800c4ec:	2100      	movs	r1, #0
 800c4ee:	f7fc f9af 	bl	8008850 <memset>
 800c4f2:	e016      	b.n	800c522 <_calloc_r+0x54>
 800c4f4:	1c1d      	adds	r5, r3, #0
 800c4f6:	1c0b      	adds	r3, r1, #0
 800c4f8:	b292      	uxth	r2, r2
 800c4fa:	b289      	uxth	r1, r1
 800c4fc:	b29c      	uxth	r4, r3
 800c4fe:	4351      	muls	r1, r2
 800c500:	b2ab      	uxth	r3, r5
 800c502:	4363      	muls	r3, r4
 800c504:	0c0c      	lsrs	r4, r1, #16
 800c506:	191c      	adds	r4, r3, r4
 800c508:	0c22      	lsrs	r2, r4, #16
 800c50a:	d107      	bne.n	800c51c <_calloc_r+0x4e>
 800c50c:	0424      	lsls	r4, r4, #16
 800c50e:	b289      	uxth	r1, r1
 800c510:	430c      	orrs	r4, r1
 800c512:	e7e5      	b.n	800c4e0 <_calloc_r+0x12>
 800c514:	2b00      	cmp	r3, #0
 800c516:	d101      	bne.n	800c51c <_calloc_r+0x4e>
 800c518:	1c13      	adds	r3, r2, #0
 800c51a:	e7ed      	b.n	800c4f8 <_calloc_r+0x2a>
 800c51c:	230c      	movs	r3, #12
 800c51e:	2500      	movs	r5, #0
 800c520:	6003      	str	r3, [r0, #0]
 800c522:	0028      	movs	r0, r5
 800c524:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c528 <__ssputs_r>:
 800c528:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c52a:	688e      	ldr	r6, [r1, #8]
 800c52c:	b085      	sub	sp, #20
 800c52e:	0007      	movs	r7, r0
 800c530:	000c      	movs	r4, r1
 800c532:	9203      	str	r2, [sp, #12]
 800c534:	9301      	str	r3, [sp, #4]
 800c536:	429e      	cmp	r6, r3
 800c538:	d83c      	bhi.n	800c5b4 <__ssputs_r+0x8c>
 800c53a:	2390      	movs	r3, #144	; 0x90
 800c53c:	898a      	ldrh	r2, [r1, #12]
 800c53e:	00db      	lsls	r3, r3, #3
 800c540:	421a      	tst	r2, r3
 800c542:	d034      	beq.n	800c5ae <__ssputs_r+0x86>
 800c544:	6909      	ldr	r1, [r1, #16]
 800c546:	6823      	ldr	r3, [r4, #0]
 800c548:	6960      	ldr	r0, [r4, #20]
 800c54a:	1a5b      	subs	r3, r3, r1
 800c54c:	9302      	str	r3, [sp, #8]
 800c54e:	2303      	movs	r3, #3
 800c550:	4343      	muls	r3, r0
 800c552:	0fdd      	lsrs	r5, r3, #31
 800c554:	18ed      	adds	r5, r5, r3
 800c556:	9b01      	ldr	r3, [sp, #4]
 800c558:	9802      	ldr	r0, [sp, #8]
 800c55a:	3301      	adds	r3, #1
 800c55c:	181b      	adds	r3, r3, r0
 800c55e:	106d      	asrs	r5, r5, #1
 800c560:	42ab      	cmp	r3, r5
 800c562:	d900      	bls.n	800c566 <__ssputs_r+0x3e>
 800c564:	001d      	movs	r5, r3
 800c566:	0553      	lsls	r3, r2, #21
 800c568:	d532      	bpl.n	800c5d0 <__ssputs_r+0xa8>
 800c56a:	0029      	movs	r1, r5
 800c56c:	0038      	movs	r0, r7
 800c56e:	f7fc f9e3 	bl	8008938 <_malloc_r>
 800c572:	1e06      	subs	r6, r0, #0
 800c574:	d109      	bne.n	800c58a <__ssputs_r+0x62>
 800c576:	230c      	movs	r3, #12
 800c578:	603b      	str	r3, [r7, #0]
 800c57a:	2340      	movs	r3, #64	; 0x40
 800c57c:	2001      	movs	r0, #1
 800c57e:	89a2      	ldrh	r2, [r4, #12]
 800c580:	4240      	negs	r0, r0
 800c582:	4313      	orrs	r3, r2
 800c584:	81a3      	strh	r3, [r4, #12]
 800c586:	b005      	add	sp, #20
 800c588:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c58a:	9a02      	ldr	r2, [sp, #8]
 800c58c:	6921      	ldr	r1, [r4, #16]
 800c58e:	f7fc f943 	bl	8008818 <memcpy>
 800c592:	89a3      	ldrh	r3, [r4, #12]
 800c594:	4a14      	ldr	r2, [pc, #80]	; (800c5e8 <__ssputs_r+0xc0>)
 800c596:	401a      	ands	r2, r3
 800c598:	2380      	movs	r3, #128	; 0x80
 800c59a:	4313      	orrs	r3, r2
 800c59c:	81a3      	strh	r3, [r4, #12]
 800c59e:	9b02      	ldr	r3, [sp, #8]
 800c5a0:	6126      	str	r6, [r4, #16]
 800c5a2:	18f6      	adds	r6, r6, r3
 800c5a4:	6026      	str	r6, [r4, #0]
 800c5a6:	6165      	str	r5, [r4, #20]
 800c5a8:	9e01      	ldr	r6, [sp, #4]
 800c5aa:	1aed      	subs	r5, r5, r3
 800c5ac:	60a5      	str	r5, [r4, #8]
 800c5ae:	9b01      	ldr	r3, [sp, #4]
 800c5b0:	429e      	cmp	r6, r3
 800c5b2:	d900      	bls.n	800c5b6 <__ssputs_r+0x8e>
 800c5b4:	9e01      	ldr	r6, [sp, #4]
 800c5b6:	0032      	movs	r2, r6
 800c5b8:	9903      	ldr	r1, [sp, #12]
 800c5ba:	6820      	ldr	r0, [r4, #0]
 800c5bc:	f7fc f935 	bl	800882a <memmove>
 800c5c0:	68a3      	ldr	r3, [r4, #8]
 800c5c2:	2000      	movs	r0, #0
 800c5c4:	1b9b      	subs	r3, r3, r6
 800c5c6:	60a3      	str	r3, [r4, #8]
 800c5c8:	6823      	ldr	r3, [r4, #0]
 800c5ca:	199e      	adds	r6, r3, r6
 800c5cc:	6026      	str	r6, [r4, #0]
 800c5ce:	e7da      	b.n	800c586 <__ssputs_r+0x5e>
 800c5d0:	002a      	movs	r2, r5
 800c5d2:	0038      	movs	r0, r7
 800c5d4:	f000 ff87 	bl	800d4e6 <_realloc_r>
 800c5d8:	1e06      	subs	r6, r0, #0
 800c5da:	d1e0      	bne.n	800c59e <__ssputs_r+0x76>
 800c5dc:	0038      	movs	r0, r7
 800c5de:	6921      	ldr	r1, [r4, #16]
 800c5e0:	f7fc f93e 	bl	8008860 <_free_r>
 800c5e4:	e7c7      	b.n	800c576 <__ssputs_r+0x4e>
 800c5e6:	46c0      	nop			; (mov r8, r8)
 800c5e8:	fffffb7f 	.word	0xfffffb7f

0800c5ec <_svfiprintf_r>:
 800c5ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c5ee:	b0a1      	sub	sp, #132	; 0x84
 800c5f0:	9003      	str	r0, [sp, #12]
 800c5f2:	001d      	movs	r5, r3
 800c5f4:	898b      	ldrh	r3, [r1, #12]
 800c5f6:	000f      	movs	r7, r1
 800c5f8:	0016      	movs	r6, r2
 800c5fa:	061b      	lsls	r3, r3, #24
 800c5fc:	d511      	bpl.n	800c622 <_svfiprintf_r+0x36>
 800c5fe:	690b      	ldr	r3, [r1, #16]
 800c600:	2b00      	cmp	r3, #0
 800c602:	d10e      	bne.n	800c622 <_svfiprintf_r+0x36>
 800c604:	2140      	movs	r1, #64	; 0x40
 800c606:	f7fc f997 	bl	8008938 <_malloc_r>
 800c60a:	6038      	str	r0, [r7, #0]
 800c60c:	6138      	str	r0, [r7, #16]
 800c60e:	2800      	cmp	r0, #0
 800c610:	d105      	bne.n	800c61e <_svfiprintf_r+0x32>
 800c612:	230c      	movs	r3, #12
 800c614:	9a03      	ldr	r2, [sp, #12]
 800c616:	3801      	subs	r0, #1
 800c618:	6013      	str	r3, [r2, #0]
 800c61a:	b021      	add	sp, #132	; 0x84
 800c61c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c61e:	2340      	movs	r3, #64	; 0x40
 800c620:	617b      	str	r3, [r7, #20]
 800c622:	2300      	movs	r3, #0
 800c624:	ac08      	add	r4, sp, #32
 800c626:	6163      	str	r3, [r4, #20]
 800c628:	3320      	adds	r3, #32
 800c62a:	7663      	strb	r3, [r4, #25]
 800c62c:	3310      	adds	r3, #16
 800c62e:	76a3      	strb	r3, [r4, #26]
 800c630:	9507      	str	r5, [sp, #28]
 800c632:	0035      	movs	r5, r6
 800c634:	782b      	ldrb	r3, [r5, #0]
 800c636:	2b00      	cmp	r3, #0
 800c638:	d001      	beq.n	800c63e <_svfiprintf_r+0x52>
 800c63a:	2b25      	cmp	r3, #37	; 0x25
 800c63c:	d147      	bne.n	800c6ce <_svfiprintf_r+0xe2>
 800c63e:	1bab      	subs	r3, r5, r6
 800c640:	9305      	str	r3, [sp, #20]
 800c642:	42b5      	cmp	r5, r6
 800c644:	d00c      	beq.n	800c660 <_svfiprintf_r+0x74>
 800c646:	0032      	movs	r2, r6
 800c648:	0039      	movs	r1, r7
 800c64a:	9803      	ldr	r0, [sp, #12]
 800c64c:	f7ff ff6c 	bl	800c528 <__ssputs_r>
 800c650:	1c43      	adds	r3, r0, #1
 800c652:	d100      	bne.n	800c656 <_svfiprintf_r+0x6a>
 800c654:	e0ae      	b.n	800c7b4 <_svfiprintf_r+0x1c8>
 800c656:	6962      	ldr	r2, [r4, #20]
 800c658:	9b05      	ldr	r3, [sp, #20]
 800c65a:	4694      	mov	ip, r2
 800c65c:	4463      	add	r3, ip
 800c65e:	6163      	str	r3, [r4, #20]
 800c660:	782b      	ldrb	r3, [r5, #0]
 800c662:	2b00      	cmp	r3, #0
 800c664:	d100      	bne.n	800c668 <_svfiprintf_r+0x7c>
 800c666:	e0a5      	b.n	800c7b4 <_svfiprintf_r+0x1c8>
 800c668:	2201      	movs	r2, #1
 800c66a:	2300      	movs	r3, #0
 800c66c:	4252      	negs	r2, r2
 800c66e:	6062      	str	r2, [r4, #4]
 800c670:	a904      	add	r1, sp, #16
 800c672:	3254      	adds	r2, #84	; 0x54
 800c674:	1852      	adds	r2, r2, r1
 800c676:	1c6e      	adds	r6, r5, #1
 800c678:	6023      	str	r3, [r4, #0]
 800c67a:	60e3      	str	r3, [r4, #12]
 800c67c:	60a3      	str	r3, [r4, #8]
 800c67e:	7013      	strb	r3, [r2, #0]
 800c680:	65a3      	str	r3, [r4, #88]	; 0x58
 800c682:	2205      	movs	r2, #5
 800c684:	7831      	ldrb	r1, [r6, #0]
 800c686:	4854      	ldr	r0, [pc, #336]	; (800c7d8 <_svfiprintf_r+0x1ec>)
 800c688:	f7ff fa3c 	bl	800bb04 <memchr>
 800c68c:	1c75      	adds	r5, r6, #1
 800c68e:	2800      	cmp	r0, #0
 800c690:	d11f      	bne.n	800c6d2 <_svfiprintf_r+0xe6>
 800c692:	6822      	ldr	r2, [r4, #0]
 800c694:	06d3      	lsls	r3, r2, #27
 800c696:	d504      	bpl.n	800c6a2 <_svfiprintf_r+0xb6>
 800c698:	2353      	movs	r3, #83	; 0x53
 800c69a:	a904      	add	r1, sp, #16
 800c69c:	185b      	adds	r3, r3, r1
 800c69e:	2120      	movs	r1, #32
 800c6a0:	7019      	strb	r1, [r3, #0]
 800c6a2:	0713      	lsls	r3, r2, #28
 800c6a4:	d504      	bpl.n	800c6b0 <_svfiprintf_r+0xc4>
 800c6a6:	2353      	movs	r3, #83	; 0x53
 800c6a8:	a904      	add	r1, sp, #16
 800c6aa:	185b      	adds	r3, r3, r1
 800c6ac:	212b      	movs	r1, #43	; 0x2b
 800c6ae:	7019      	strb	r1, [r3, #0]
 800c6b0:	7833      	ldrb	r3, [r6, #0]
 800c6b2:	2b2a      	cmp	r3, #42	; 0x2a
 800c6b4:	d016      	beq.n	800c6e4 <_svfiprintf_r+0xf8>
 800c6b6:	0035      	movs	r5, r6
 800c6b8:	2100      	movs	r1, #0
 800c6ba:	200a      	movs	r0, #10
 800c6bc:	68e3      	ldr	r3, [r4, #12]
 800c6be:	782a      	ldrb	r2, [r5, #0]
 800c6c0:	1c6e      	adds	r6, r5, #1
 800c6c2:	3a30      	subs	r2, #48	; 0x30
 800c6c4:	2a09      	cmp	r2, #9
 800c6c6:	d94e      	bls.n	800c766 <_svfiprintf_r+0x17a>
 800c6c8:	2900      	cmp	r1, #0
 800c6ca:	d111      	bne.n	800c6f0 <_svfiprintf_r+0x104>
 800c6cc:	e017      	b.n	800c6fe <_svfiprintf_r+0x112>
 800c6ce:	3501      	adds	r5, #1
 800c6d0:	e7b0      	b.n	800c634 <_svfiprintf_r+0x48>
 800c6d2:	4b41      	ldr	r3, [pc, #260]	; (800c7d8 <_svfiprintf_r+0x1ec>)
 800c6d4:	6822      	ldr	r2, [r4, #0]
 800c6d6:	1ac0      	subs	r0, r0, r3
 800c6d8:	2301      	movs	r3, #1
 800c6da:	4083      	lsls	r3, r0
 800c6dc:	4313      	orrs	r3, r2
 800c6de:	002e      	movs	r6, r5
 800c6e0:	6023      	str	r3, [r4, #0]
 800c6e2:	e7ce      	b.n	800c682 <_svfiprintf_r+0x96>
 800c6e4:	9b07      	ldr	r3, [sp, #28]
 800c6e6:	1d19      	adds	r1, r3, #4
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	9107      	str	r1, [sp, #28]
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	db01      	blt.n	800c6f4 <_svfiprintf_r+0x108>
 800c6f0:	930b      	str	r3, [sp, #44]	; 0x2c
 800c6f2:	e004      	b.n	800c6fe <_svfiprintf_r+0x112>
 800c6f4:	425b      	negs	r3, r3
 800c6f6:	60e3      	str	r3, [r4, #12]
 800c6f8:	2302      	movs	r3, #2
 800c6fa:	4313      	orrs	r3, r2
 800c6fc:	6023      	str	r3, [r4, #0]
 800c6fe:	782b      	ldrb	r3, [r5, #0]
 800c700:	2b2e      	cmp	r3, #46	; 0x2e
 800c702:	d10a      	bne.n	800c71a <_svfiprintf_r+0x12e>
 800c704:	786b      	ldrb	r3, [r5, #1]
 800c706:	2b2a      	cmp	r3, #42	; 0x2a
 800c708:	d135      	bne.n	800c776 <_svfiprintf_r+0x18a>
 800c70a:	9b07      	ldr	r3, [sp, #28]
 800c70c:	3502      	adds	r5, #2
 800c70e:	1d1a      	adds	r2, r3, #4
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	9207      	str	r2, [sp, #28]
 800c714:	2b00      	cmp	r3, #0
 800c716:	db2b      	blt.n	800c770 <_svfiprintf_r+0x184>
 800c718:	9309      	str	r3, [sp, #36]	; 0x24
 800c71a:	4e30      	ldr	r6, [pc, #192]	; (800c7dc <_svfiprintf_r+0x1f0>)
 800c71c:	2203      	movs	r2, #3
 800c71e:	0030      	movs	r0, r6
 800c720:	7829      	ldrb	r1, [r5, #0]
 800c722:	f7ff f9ef 	bl	800bb04 <memchr>
 800c726:	2800      	cmp	r0, #0
 800c728:	d006      	beq.n	800c738 <_svfiprintf_r+0x14c>
 800c72a:	2340      	movs	r3, #64	; 0x40
 800c72c:	1b80      	subs	r0, r0, r6
 800c72e:	4083      	lsls	r3, r0
 800c730:	6822      	ldr	r2, [r4, #0]
 800c732:	3501      	adds	r5, #1
 800c734:	4313      	orrs	r3, r2
 800c736:	6023      	str	r3, [r4, #0]
 800c738:	7829      	ldrb	r1, [r5, #0]
 800c73a:	2206      	movs	r2, #6
 800c73c:	4828      	ldr	r0, [pc, #160]	; (800c7e0 <_svfiprintf_r+0x1f4>)
 800c73e:	1c6e      	adds	r6, r5, #1
 800c740:	7621      	strb	r1, [r4, #24]
 800c742:	f7ff f9df 	bl	800bb04 <memchr>
 800c746:	2800      	cmp	r0, #0
 800c748:	d03c      	beq.n	800c7c4 <_svfiprintf_r+0x1d8>
 800c74a:	4b26      	ldr	r3, [pc, #152]	; (800c7e4 <_svfiprintf_r+0x1f8>)
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	d125      	bne.n	800c79c <_svfiprintf_r+0x1b0>
 800c750:	2207      	movs	r2, #7
 800c752:	9b07      	ldr	r3, [sp, #28]
 800c754:	3307      	adds	r3, #7
 800c756:	4393      	bics	r3, r2
 800c758:	3308      	adds	r3, #8
 800c75a:	9307      	str	r3, [sp, #28]
 800c75c:	6963      	ldr	r3, [r4, #20]
 800c75e:	9a04      	ldr	r2, [sp, #16]
 800c760:	189b      	adds	r3, r3, r2
 800c762:	6163      	str	r3, [r4, #20]
 800c764:	e765      	b.n	800c632 <_svfiprintf_r+0x46>
 800c766:	4343      	muls	r3, r0
 800c768:	0035      	movs	r5, r6
 800c76a:	2101      	movs	r1, #1
 800c76c:	189b      	adds	r3, r3, r2
 800c76e:	e7a6      	b.n	800c6be <_svfiprintf_r+0xd2>
 800c770:	2301      	movs	r3, #1
 800c772:	425b      	negs	r3, r3
 800c774:	e7d0      	b.n	800c718 <_svfiprintf_r+0x12c>
 800c776:	2300      	movs	r3, #0
 800c778:	200a      	movs	r0, #10
 800c77a:	001a      	movs	r2, r3
 800c77c:	3501      	adds	r5, #1
 800c77e:	6063      	str	r3, [r4, #4]
 800c780:	7829      	ldrb	r1, [r5, #0]
 800c782:	1c6e      	adds	r6, r5, #1
 800c784:	3930      	subs	r1, #48	; 0x30
 800c786:	2909      	cmp	r1, #9
 800c788:	d903      	bls.n	800c792 <_svfiprintf_r+0x1a6>
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d0c5      	beq.n	800c71a <_svfiprintf_r+0x12e>
 800c78e:	9209      	str	r2, [sp, #36]	; 0x24
 800c790:	e7c3      	b.n	800c71a <_svfiprintf_r+0x12e>
 800c792:	4342      	muls	r2, r0
 800c794:	0035      	movs	r5, r6
 800c796:	2301      	movs	r3, #1
 800c798:	1852      	adds	r2, r2, r1
 800c79a:	e7f1      	b.n	800c780 <_svfiprintf_r+0x194>
 800c79c:	ab07      	add	r3, sp, #28
 800c79e:	9300      	str	r3, [sp, #0]
 800c7a0:	003a      	movs	r2, r7
 800c7a2:	0021      	movs	r1, r4
 800c7a4:	4b10      	ldr	r3, [pc, #64]	; (800c7e8 <_svfiprintf_r+0x1fc>)
 800c7a6:	9803      	ldr	r0, [sp, #12]
 800c7a8:	f7fc f9e6 	bl	8008b78 <_printf_float>
 800c7ac:	9004      	str	r0, [sp, #16]
 800c7ae:	9b04      	ldr	r3, [sp, #16]
 800c7b0:	3301      	adds	r3, #1
 800c7b2:	d1d3      	bne.n	800c75c <_svfiprintf_r+0x170>
 800c7b4:	89bb      	ldrh	r3, [r7, #12]
 800c7b6:	980d      	ldr	r0, [sp, #52]	; 0x34
 800c7b8:	065b      	lsls	r3, r3, #25
 800c7ba:	d400      	bmi.n	800c7be <_svfiprintf_r+0x1d2>
 800c7bc:	e72d      	b.n	800c61a <_svfiprintf_r+0x2e>
 800c7be:	2001      	movs	r0, #1
 800c7c0:	4240      	negs	r0, r0
 800c7c2:	e72a      	b.n	800c61a <_svfiprintf_r+0x2e>
 800c7c4:	ab07      	add	r3, sp, #28
 800c7c6:	9300      	str	r3, [sp, #0]
 800c7c8:	003a      	movs	r2, r7
 800c7ca:	0021      	movs	r1, r4
 800c7cc:	4b06      	ldr	r3, [pc, #24]	; (800c7e8 <_svfiprintf_r+0x1fc>)
 800c7ce:	9803      	ldr	r0, [sp, #12]
 800c7d0:	f7fc fc84 	bl	80090dc <_printf_i>
 800c7d4:	e7ea      	b.n	800c7ac <_svfiprintf_r+0x1c0>
 800c7d6:	46c0      	nop			; (mov r8, r8)
 800c7d8:	0800e3dc 	.word	0x0800e3dc
 800c7dc:	0800e3e2 	.word	0x0800e3e2
 800c7e0:	0800e3e6 	.word	0x0800e3e6
 800c7e4:	08008b79 	.word	0x08008b79
 800c7e8:	0800c529 	.word	0x0800c529

0800c7ec <_sungetc_r>:
 800c7ec:	b570      	push	{r4, r5, r6, lr}
 800c7ee:	0014      	movs	r4, r2
 800c7f0:	1c4b      	adds	r3, r1, #1
 800c7f2:	d103      	bne.n	800c7fc <_sungetc_r+0x10>
 800c7f4:	2501      	movs	r5, #1
 800c7f6:	426d      	negs	r5, r5
 800c7f8:	0028      	movs	r0, r5
 800c7fa:	bd70      	pop	{r4, r5, r6, pc}
 800c7fc:	8993      	ldrh	r3, [r2, #12]
 800c7fe:	2220      	movs	r2, #32
 800c800:	4393      	bics	r3, r2
 800c802:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800c804:	81a3      	strh	r3, [r4, #12]
 800c806:	b2ce      	uxtb	r6, r1
 800c808:	6863      	ldr	r3, [r4, #4]
 800c80a:	b2cd      	uxtb	r5, r1
 800c80c:	2a00      	cmp	r2, #0
 800c80e:	d010      	beq.n	800c832 <_sungetc_r+0x46>
 800c810:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800c812:	429a      	cmp	r2, r3
 800c814:	dd07      	ble.n	800c826 <_sungetc_r+0x3a>
 800c816:	6823      	ldr	r3, [r4, #0]
 800c818:	3b01      	subs	r3, #1
 800c81a:	6023      	str	r3, [r4, #0]
 800c81c:	701e      	strb	r6, [r3, #0]
 800c81e:	6863      	ldr	r3, [r4, #4]
 800c820:	3301      	adds	r3, #1
 800c822:	6063      	str	r3, [r4, #4]
 800c824:	e7e8      	b.n	800c7f8 <_sungetc_r+0xc>
 800c826:	0021      	movs	r1, r4
 800c828:	f000 fc12 	bl	800d050 <__submore>
 800c82c:	2800      	cmp	r0, #0
 800c82e:	d0f2      	beq.n	800c816 <_sungetc_r+0x2a>
 800c830:	e7e0      	b.n	800c7f4 <_sungetc_r+0x8>
 800c832:	6921      	ldr	r1, [r4, #16]
 800c834:	6822      	ldr	r2, [r4, #0]
 800c836:	2900      	cmp	r1, #0
 800c838:	d007      	beq.n	800c84a <_sungetc_r+0x5e>
 800c83a:	4291      	cmp	r1, r2
 800c83c:	d205      	bcs.n	800c84a <_sungetc_r+0x5e>
 800c83e:	1e51      	subs	r1, r2, #1
 800c840:	7808      	ldrb	r0, [r1, #0]
 800c842:	42a8      	cmp	r0, r5
 800c844:	d101      	bne.n	800c84a <_sungetc_r+0x5e>
 800c846:	6021      	str	r1, [r4, #0]
 800c848:	e7ea      	b.n	800c820 <_sungetc_r+0x34>
 800c84a:	6423      	str	r3, [r4, #64]	; 0x40
 800c84c:	0023      	movs	r3, r4
 800c84e:	3344      	adds	r3, #68	; 0x44
 800c850:	6363      	str	r3, [r4, #52]	; 0x34
 800c852:	2303      	movs	r3, #3
 800c854:	63a3      	str	r3, [r4, #56]	; 0x38
 800c856:	0023      	movs	r3, r4
 800c858:	3346      	adds	r3, #70	; 0x46
 800c85a:	63e2      	str	r2, [r4, #60]	; 0x3c
 800c85c:	701e      	strb	r6, [r3, #0]
 800c85e:	6023      	str	r3, [r4, #0]
 800c860:	2301      	movs	r3, #1
 800c862:	e7de      	b.n	800c822 <_sungetc_r+0x36>

0800c864 <__ssrefill_r>:
 800c864:	b510      	push	{r4, lr}
 800c866:	000c      	movs	r4, r1
 800c868:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800c86a:	2900      	cmp	r1, #0
 800c86c:	d00e      	beq.n	800c88c <__ssrefill_r+0x28>
 800c86e:	0023      	movs	r3, r4
 800c870:	3344      	adds	r3, #68	; 0x44
 800c872:	4299      	cmp	r1, r3
 800c874:	d001      	beq.n	800c87a <__ssrefill_r+0x16>
 800c876:	f7fb fff3 	bl	8008860 <_free_r>
 800c87a:	2000      	movs	r0, #0
 800c87c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c87e:	6360      	str	r0, [r4, #52]	; 0x34
 800c880:	6063      	str	r3, [r4, #4]
 800c882:	4283      	cmp	r3, r0
 800c884:	d002      	beq.n	800c88c <__ssrefill_r+0x28>
 800c886:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800c888:	6023      	str	r3, [r4, #0]
 800c88a:	bd10      	pop	{r4, pc}
 800c88c:	6923      	ldr	r3, [r4, #16]
 800c88e:	2001      	movs	r0, #1
 800c890:	6023      	str	r3, [r4, #0]
 800c892:	2300      	movs	r3, #0
 800c894:	89a2      	ldrh	r2, [r4, #12]
 800c896:	6063      	str	r3, [r4, #4]
 800c898:	3320      	adds	r3, #32
 800c89a:	4313      	orrs	r3, r2
 800c89c:	81a3      	strh	r3, [r4, #12]
 800c89e:	4240      	negs	r0, r0
 800c8a0:	e7f3      	b.n	800c88a <__ssrefill_r+0x26>
	...

0800c8a4 <__ssvfiscanf_r>:
 800c8a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c8a6:	4cb8      	ldr	r4, [pc, #736]	; (800cb88 <__ssvfiscanf_r+0x2e4>)
 800c8a8:	0006      	movs	r6, r0
 800c8aa:	44a5      	add	sp, r4
 800c8ac:	000c      	movs	r4, r1
 800c8ae:	2100      	movs	r1, #0
 800c8b0:	9146      	str	r1, [sp, #280]	; 0x118
 800c8b2:	9147      	str	r1, [sp, #284]	; 0x11c
 800c8b4:	a903      	add	r1, sp, #12
 800c8b6:	9148      	str	r1, [sp, #288]	; 0x120
 800c8b8:	21be      	movs	r1, #190	; 0xbe
 800c8ba:	48b4      	ldr	r0, [pc, #720]	; (800cb8c <__ssvfiscanf_r+0x2e8>)
 800c8bc:	0049      	lsls	r1, r1, #1
 800c8be:	ad43      	add	r5, sp, #268	; 0x10c
 800c8c0:	5068      	str	r0, [r5, r1]
 800c8c2:	25c0      	movs	r5, #192	; 0xc0
 800c8c4:	49b2      	ldr	r1, [pc, #712]	; (800cb90 <__ssvfiscanf_r+0x2ec>)
 800c8c6:	006d      	lsls	r5, r5, #1
 800c8c8:	a843      	add	r0, sp, #268	; 0x10c
 800c8ca:	5141      	str	r1, [r0, r5]
 800c8cc:	9302      	str	r3, [sp, #8]
 800c8ce:	7813      	ldrb	r3, [r2, #0]
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d100      	bne.n	800c8d6 <__ssvfiscanf_r+0x32>
 800c8d4:	e155      	b.n	800cb82 <__ssvfiscanf_r+0x2de>
 800c8d6:	49af      	ldr	r1, [pc, #700]	; (800cb94 <__ssvfiscanf_r+0x2f0>)
 800c8d8:	2508      	movs	r5, #8
 800c8da:	5cc8      	ldrb	r0, [r1, r3]
 800c8dc:	2108      	movs	r1, #8
 800c8de:	1c57      	adds	r7, r2, #1
 800c8e0:	4001      	ands	r1, r0
 800c8e2:	4228      	tst	r0, r5
 800c8e4:	d020      	beq.n	800c928 <__ssvfiscanf_r+0x84>
 800c8e6:	6863      	ldr	r3, [r4, #4]
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	dd12      	ble.n	800c912 <__ssvfiscanf_r+0x6e>
 800c8ec:	6823      	ldr	r3, [r4, #0]
 800c8ee:	49a9      	ldr	r1, [pc, #676]	; (800cb94 <__ssvfiscanf_r+0x2f0>)
 800c8f0:	781a      	ldrb	r2, [r3, #0]
 800c8f2:	5c8a      	ldrb	r2, [r1, r2]
 800c8f4:	2108      	movs	r1, #8
 800c8f6:	420a      	tst	r2, r1
 800c8f8:	d101      	bne.n	800c8fe <__ssvfiscanf_r+0x5a>
 800c8fa:	003a      	movs	r2, r7
 800c8fc:	e7e7      	b.n	800c8ce <__ssvfiscanf_r+0x2a>
 800c8fe:	9a47      	ldr	r2, [sp, #284]	; 0x11c
 800c900:	3301      	adds	r3, #1
 800c902:	9200      	str	r2, [sp, #0]
 800c904:	3201      	adds	r2, #1
 800c906:	9247      	str	r2, [sp, #284]	; 0x11c
 800c908:	6862      	ldr	r2, [r4, #4]
 800c90a:	6023      	str	r3, [r4, #0]
 800c90c:	3a01      	subs	r2, #1
 800c90e:	6062      	str	r2, [r4, #4]
 800c910:	e7e9      	b.n	800c8e6 <__ssvfiscanf_r+0x42>
 800c912:	22c0      	movs	r2, #192	; 0xc0
 800c914:	ab43      	add	r3, sp, #268	; 0x10c
 800c916:	0052      	lsls	r2, r2, #1
 800c918:	589b      	ldr	r3, [r3, r2]
 800c91a:	0021      	movs	r1, r4
 800c91c:	0030      	movs	r0, r6
 800c91e:	9300      	str	r3, [sp, #0]
 800c920:	4798      	blx	r3
 800c922:	2800      	cmp	r0, #0
 800c924:	d0e2      	beq.n	800c8ec <__ssvfiscanf_r+0x48>
 800c926:	e7e8      	b.n	800c8fa <__ssvfiscanf_r+0x56>
 800c928:	001d      	movs	r5, r3
 800c92a:	2b25      	cmp	r3, #37	; 0x25
 800c92c:	d164      	bne.n	800c9f8 <__ssvfiscanf_r+0x154>
 800c92e:	9145      	str	r1, [sp, #276]	; 0x114
 800c930:	9143      	str	r1, [sp, #268]	; 0x10c
 800c932:	7853      	ldrb	r3, [r2, #1]
 800c934:	2b2a      	cmp	r3, #42	; 0x2a
 800c936:	d102      	bne.n	800c93e <__ssvfiscanf_r+0x9a>
 800c938:	3b1a      	subs	r3, #26
 800c93a:	9343      	str	r3, [sp, #268]	; 0x10c
 800c93c:	1c97      	adds	r7, r2, #2
 800c93e:	003d      	movs	r5, r7
 800c940:	220a      	movs	r2, #10
 800c942:	7829      	ldrb	r1, [r5, #0]
 800c944:	1c6b      	adds	r3, r5, #1
 800c946:	9300      	str	r3, [sp, #0]
 800c948:	000b      	movs	r3, r1
 800c94a:	3b30      	subs	r3, #48	; 0x30
 800c94c:	2b09      	cmp	r3, #9
 800c94e:	d91f      	bls.n	800c990 <__ssvfiscanf_r+0xec>
 800c950:	4f91      	ldr	r7, [pc, #580]	; (800cb98 <__ssvfiscanf_r+0x2f4>)
 800c952:	2203      	movs	r2, #3
 800c954:	0038      	movs	r0, r7
 800c956:	f7ff f8d5 	bl	800bb04 <memchr>
 800c95a:	2800      	cmp	r0, #0
 800c95c:	d007      	beq.n	800c96e <__ssvfiscanf_r+0xca>
 800c95e:	2301      	movs	r3, #1
 800c960:	1bc0      	subs	r0, r0, r7
 800c962:	4083      	lsls	r3, r0
 800c964:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 800c966:	9d00      	ldr	r5, [sp, #0]
 800c968:	4313      	orrs	r3, r2
 800c96a:	9201      	str	r2, [sp, #4]
 800c96c:	9343      	str	r3, [sp, #268]	; 0x10c
 800c96e:	1c6f      	adds	r7, r5, #1
 800c970:	782d      	ldrb	r5, [r5, #0]
 800c972:	2d78      	cmp	r5, #120	; 0x78
 800c974:	d807      	bhi.n	800c986 <__ssvfiscanf_r+0xe2>
 800c976:	2d57      	cmp	r5, #87	; 0x57
 800c978:	d812      	bhi.n	800c9a0 <__ssvfiscanf_r+0xfc>
 800c97a:	2d25      	cmp	r5, #37	; 0x25
 800c97c:	d03c      	beq.n	800c9f8 <__ssvfiscanf_r+0x154>
 800c97e:	d836      	bhi.n	800c9ee <__ssvfiscanf_r+0x14a>
 800c980:	2d00      	cmp	r5, #0
 800c982:	d100      	bne.n	800c986 <__ssvfiscanf_r+0xe2>
 800c984:	e0fa      	b.n	800cb7c <__ssvfiscanf_r+0x2d8>
 800c986:	2303      	movs	r3, #3
 800c988:	9349      	str	r3, [sp, #292]	; 0x124
 800c98a:	3307      	adds	r3, #7
 800c98c:	9344      	str	r3, [sp, #272]	; 0x110
 800c98e:	e06d      	b.n	800ca6c <__ssvfiscanf_r+0x1c8>
 800c990:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800c992:	9d00      	ldr	r5, [sp, #0]
 800c994:	9301      	str	r3, [sp, #4]
 800c996:	4353      	muls	r3, r2
 800c998:	3b30      	subs	r3, #48	; 0x30
 800c99a:	185b      	adds	r3, r3, r1
 800c99c:	9345      	str	r3, [sp, #276]	; 0x114
 800c99e:	e7d0      	b.n	800c942 <__ssvfiscanf_r+0x9e>
 800c9a0:	0028      	movs	r0, r5
 800c9a2:	3858      	subs	r0, #88	; 0x58
 800c9a4:	2820      	cmp	r0, #32
 800c9a6:	d8ee      	bhi.n	800c986 <__ssvfiscanf_r+0xe2>
 800c9a8:	f7f3 fbc6 	bl	8000138 <__gnu_thumb1_case_shi>
 800c9ac:	ffed0051 	.word	0xffed0051
 800c9b0:	0087ffed 	.word	0x0087ffed
 800c9b4:	ffedffed 	.word	0xffedffed
 800c9b8:	ffedffed 	.word	0xffedffed
 800c9bc:	ffedffed 	.word	0xffedffed
 800c9c0:	0095ffed 	.word	0x0095ffed
 800c9c4:	0024007d 	.word	0x0024007d
 800c9c8:	00240024 	.word	0x00240024
 800c9cc:	007fffed 	.word	0x007fffed
 800c9d0:	ffedffed 	.word	0xffedffed
 800c9d4:	ffedffed 	.word	0xffedffed
 800c9d8:	0083009f 	.word	0x0083009f
 800c9dc:	ffed004b 	.word	0xffed004b
 800c9e0:	009dffed 	.word	0x009dffed
 800c9e4:	007dffed 	.word	0x007dffed
 800c9e8:	ffedffed 	.word	0xffedffed
 800c9ec:	0051      	.short	0x0051
 800c9ee:	3d45      	subs	r5, #69	; 0x45
 800c9f0:	2d02      	cmp	r5, #2
 800c9f2:	d8c8      	bhi.n	800c986 <__ssvfiscanf_r+0xe2>
 800c9f4:	2305      	movs	r3, #5
 800c9f6:	e06c      	b.n	800cad2 <__ssvfiscanf_r+0x22e>
 800c9f8:	6863      	ldr	r3, [r4, #4]
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	dd0e      	ble.n	800ca1c <__ssvfiscanf_r+0x178>
 800c9fe:	6823      	ldr	r3, [r4, #0]
 800ca00:	781a      	ldrb	r2, [r3, #0]
 800ca02:	42aa      	cmp	r2, r5
 800ca04:	d000      	beq.n	800ca08 <__ssvfiscanf_r+0x164>
 800ca06:	e0bc      	b.n	800cb82 <__ssvfiscanf_r+0x2de>
 800ca08:	3301      	adds	r3, #1
 800ca0a:	6862      	ldr	r2, [r4, #4]
 800ca0c:	6023      	str	r3, [r4, #0]
 800ca0e:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800ca10:	3a01      	subs	r2, #1
 800ca12:	9300      	str	r3, [sp, #0]
 800ca14:	3301      	adds	r3, #1
 800ca16:	6062      	str	r2, [r4, #4]
 800ca18:	9347      	str	r3, [sp, #284]	; 0x11c
 800ca1a:	e76e      	b.n	800c8fa <__ssvfiscanf_r+0x56>
 800ca1c:	22c0      	movs	r2, #192	; 0xc0
 800ca1e:	ab43      	add	r3, sp, #268	; 0x10c
 800ca20:	0052      	lsls	r2, r2, #1
 800ca22:	589b      	ldr	r3, [r3, r2]
 800ca24:	0021      	movs	r1, r4
 800ca26:	0030      	movs	r0, r6
 800ca28:	9300      	str	r3, [sp, #0]
 800ca2a:	4798      	blx	r3
 800ca2c:	2800      	cmp	r0, #0
 800ca2e:	d0e6      	beq.n	800c9fe <__ssvfiscanf_r+0x15a>
 800ca30:	9846      	ldr	r0, [sp, #280]	; 0x118
 800ca32:	2800      	cmp	r0, #0
 800ca34:	d000      	beq.n	800ca38 <__ssvfiscanf_r+0x194>
 800ca36:	e09d      	b.n	800cb74 <__ssvfiscanf_r+0x2d0>
 800ca38:	3801      	subs	r0, #1
 800ca3a:	23a5      	movs	r3, #165	; 0xa5
 800ca3c:	009b      	lsls	r3, r3, #2
 800ca3e:	449d      	add	sp, r3
 800ca40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ca42:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800ca44:	9300      	str	r3, [sp, #0]
 800ca46:	2320      	movs	r3, #32
 800ca48:	9a00      	ldr	r2, [sp, #0]
 800ca4a:	4313      	orrs	r3, r2
 800ca4c:	9343      	str	r3, [sp, #268]	; 0x10c
 800ca4e:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800ca50:	9300      	str	r3, [sp, #0]
 800ca52:	2380      	movs	r3, #128	; 0x80
 800ca54:	9a00      	ldr	r2, [sp, #0]
 800ca56:	009b      	lsls	r3, r3, #2
 800ca58:	4313      	orrs	r3, r2
 800ca5a:	9343      	str	r3, [sp, #268]	; 0x10c
 800ca5c:	2310      	movs	r3, #16
 800ca5e:	9344      	str	r3, [sp, #272]	; 0x110
 800ca60:	236e      	movs	r3, #110	; 0x6e
 800ca62:	42ab      	cmp	r3, r5
 800ca64:	41ad      	sbcs	r5, r5
 800ca66:	426d      	negs	r5, r5
 800ca68:	3503      	adds	r5, #3
 800ca6a:	9549      	str	r5, [sp, #292]	; 0x124
 800ca6c:	6863      	ldr	r3, [r4, #4]
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	dd4a      	ble.n	800cb08 <__ssvfiscanf_r+0x264>
 800ca72:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800ca74:	9300      	str	r3, [sp, #0]
 800ca76:	065b      	lsls	r3, r3, #25
 800ca78:	d406      	bmi.n	800ca88 <__ssvfiscanf_r+0x1e4>
 800ca7a:	6823      	ldr	r3, [r4, #0]
 800ca7c:	4945      	ldr	r1, [pc, #276]	; (800cb94 <__ssvfiscanf_r+0x2f0>)
 800ca7e:	781a      	ldrb	r2, [r3, #0]
 800ca80:	5c8a      	ldrb	r2, [r1, r2]
 800ca82:	2108      	movs	r1, #8
 800ca84:	420a      	tst	r2, r1
 800ca86:	d14a      	bne.n	800cb1e <__ssvfiscanf_r+0x27a>
 800ca88:	9b49      	ldr	r3, [sp, #292]	; 0x124
 800ca8a:	2b02      	cmp	r3, #2
 800ca8c:	dc5e      	bgt.n	800cb4c <__ssvfiscanf_r+0x2a8>
 800ca8e:	0022      	movs	r2, r4
 800ca90:	0030      	movs	r0, r6
 800ca92:	ab02      	add	r3, sp, #8
 800ca94:	a943      	add	r1, sp, #268	; 0x10c
 800ca96:	f000 f883 	bl	800cba0 <_scanf_chars>
 800ca9a:	2801      	cmp	r0, #1
 800ca9c:	d071      	beq.n	800cb82 <__ssvfiscanf_r+0x2de>
 800ca9e:	2802      	cmp	r0, #2
 800caa0:	d000      	beq.n	800caa4 <__ssvfiscanf_r+0x200>
 800caa2:	e72a      	b.n	800c8fa <__ssvfiscanf_r+0x56>
 800caa4:	e7c4      	b.n	800ca30 <__ssvfiscanf_r+0x18c>
 800caa6:	230a      	movs	r3, #10
 800caa8:	e7d9      	b.n	800ca5e <__ssvfiscanf_r+0x1ba>
 800caaa:	2300      	movs	r3, #0
 800caac:	2503      	movs	r5, #3
 800caae:	9344      	str	r3, [sp, #272]	; 0x110
 800cab0:	e7db      	b.n	800ca6a <__ssvfiscanf_r+0x1c6>
 800cab2:	2308      	movs	r3, #8
 800cab4:	2504      	movs	r5, #4
 800cab6:	9344      	str	r3, [sp, #272]	; 0x110
 800cab8:	e7d7      	b.n	800ca6a <__ssvfiscanf_r+0x1c6>
 800caba:	0039      	movs	r1, r7
 800cabc:	a803      	add	r0, sp, #12
 800cabe:	f000 f9eb 	bl	800ce98 <__sccl>
 800cac2:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800cac4:	0007      	movs	r7, r0
 800cac6:	9300      	str	r3, [sp, #0]
 800cac8:	2340      	movs	r3, #64	; 0x40
 800caca:	9a00      	ldr	r2, [sp, #0]
 800cacc:	4313      	orrs	r3, r2
 800cace:	9343      	str	r3, [sp, #268]	; 0x10c
 800cad0:	2301      	movs	r3, #1
 800cad2:	9349      	str	r3, [sp, #292]	; 0x124
 800cad4:	e7ca      	b.n	800ca6c <__ssvfiscanf_r+0x1c8>
 800cad6:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800cad8:	9300      	str	r3, [sp, #0]
 800cada:	2340      	movs	r3, #64	; 0x40
 800cadc:	9a00      	ldr	r2, [sp, #0]
 800cade:	4313      	orrs	r3, r2
 800cae0:	9343      	str	r3, [sp, #268]	; 0x10c
 800cae2:	2300      	movs	r3, #0
 800cae4:	e7f5      	b.n	800cad2 <__ssvfiscanf_r+0x22e>
 800cae6:	2302      	movs	r3, #2
 800cae8:	e7f3      	b.n	800cad2 <__ssvfiscanf_r+0x22e>
 800caea:	9843      	ldr	r0, [sp, #268]	; 0x10c
 800caec:	06c3      	lsls	r3, r0, #27
 800caee:	d500      	bpl.n	800caf2 <__ssvfiscanf_r+0x24e>
 800caf0:	e703      	b.n	800c8fa <__ssvfiscanf_r+0x56>
 800caf2:	9b02      	ldr	r3, [sp, #8]
 800caf4:	9a47      	ldr	r2, [sp, #284]	; 0x11c
 800caf6:	1d19      	adds	r1, r3, #4
 800caf8:	9102      	str	r1, [sp, #8]
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	07c5      	lsls	r5, r0, #31
 800cafe:	d501      	bpl.n	800cb04 <__ssvfiscanf_r+0x260>
 800cb00:	801a      	strh	r2, [r3, #0]
 800cb02:	e6fa      	b.n	800c8fa <__ssvfiscanf_r+0x56>
 800cb04:	601a      	str	r2, [r3, #0]
 800cb06:	e6f8      	b.n	800c8fa <__ssvfiscanf_r+0x56>
 800cb08:	22c0      	movs	r2, #192	; 0xc0
 800cb0a:	ab43      	add	r3, sp, #268	; 0x10c
 800cb0c:	0052      	lsls	r2, r2, #1
 800cb0e:	589b      	ldr	r3, [r3, r2]
 800cb10:	0021      	movs	r1, r4
 800cb12:	0030      	movs	r0, r6
 800cb14:	9300      	str	r3, [sp, #0]
 800cb16:	4798      	blx	r3
 800cb18:	2800      	cmp	r0, #0
 800cb1a:	d0aa      	beq.n	800ca72 <__ssvfiscanf_r+0x1ce>
 800cb1c:	e788      	b.n	800ca30 <__ssvfiscanf_r+0x18c>
 800cb1e:	9a47      	ldr	r2, [sp, #284]	; 0x11c
 800cb20:	9200      	str	r2, [sp, #0]
 800cb22:	3201      	adds	r2, #1
 800cb24:	9247      	str	r2, [sp, #284]	; 0x11c
 800cb26:	6862      	ldr	r2, [r4, #4]
 800cb28:	3a01      	subs	r2, #1
 800cb2a:	6062      	str	r2, [r4, #4]
 800cb2c:	2a00      	cmp	r2, #0
 800cb2e:	dd02      	ble.n	800cb36 <__ssvfiscanf_r+0x292>
 800cb30:	3301      	adds	r3, #1
 800cb32:	6023      	str	r3, [r4, #0]
 800cb34:	e7a1      	b.n	800ca7a <__ssvfiscanf_r+0x1d6>
 800cb36:	22c0      	movs	r2, #192	; 0xc0
 800cb38:	ab43      	add	r3, sp, #268	; 0x10c
 800cb3a:	0052      	lsls	r2, r2, #1
 800cb3c:	589b      	ldr	r3, [r3, r2]
 800cb3e:	0021      	movs	r1, r4
 800cb40:	0030      	movs	r0, r6
 800cb42:	9300      	str	r3, [sp, #0]
 800cb44:	4798      	blx	r3
 800cb46:	2800      	cmp	r0, #0
 800cb48:	d097      	beq.n	800ca7a <__ssvfiscanf_r+0x1d6>
 800cb4a:	e771      	b.n	800ca30 <__ssvfiscanf_r+0x18c>
 800cb4c:	2b04      	cmp	r3, #4
 800cb4e:	dc06      	bgt.n	800cb5e <__ssvfiscanf_r+0x2ba>
 800cb50:	0022      	movs	r2, r4
 800cb52:	0030      	movs	r0, r6
 800cb54:	ab02      	add	r3, sp, #8
 800cb56:	a943      	add	r1, sp, #268	; 0x10c
 800cb58:	f000 f880 	bl	800cc5c <_scanf_i>
 800cb5c:	e79d      	b.n	800ca9a <__ssvfiscanf_r+0x1f6>
 800cb5e:	4b0f      	ldr	r3, [pc, #60]	; (800cb9c <__ssvfiscanf_r+0x2f8>)
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	d100      	bne.n	800cb66 <__ssvfiscanf_r+0x2c2>
 800cb64:	e6c9      	b.n	800c8fa <__ssvfiscanf_r+0x56>
 800cb66:	0022      	movs	r2, r4
 800cb68:	0030      	movs	r0, r6
 800cb6a:	ab02      	add	r3, sp, #8
 800cb6c:	a943      	add	r1, sp, #268	; 0x10c
 800cb6e:	f7fc fbc7 	bl	8009300 <_scanf_float>
 800cb72:	e792      	b.n	800ca9a <__ssvfiscanf_r+0x1f6>
 800cb74:	89a3      	ldrh	r3, [r4, #12]
 800cb76:	065b      	lsls	r3, r3, #25
 800cb78:	d400      	bmi.n	800cb7c <__ssvfiscanf_r+0x2d8>
 800cb7a:	e75e      	b.n	800ca3a <__ssvfiscanf_r+0x196>
 800cb7c:	2001      	movs	r0, #1
 800cb7e:	4240      	negs	r0, r0
 800cb80:	e75b      	b.n	800ca3a <__ssvfiscanf_r+0x196>
 800cb82:	9846      	ldr	r0, [sp, #280]	; 0x118
 800cb84:	e759      	b.n	800ca3a <__ssvfiscanf_r+0x196>
 800cb86:	46c0      	nop			; (mov r8, r8)
 800cb88:	fffffd6c 	.word	0xfffffd6c
 800cb8c:	0800c7ed 	.word	0x0800c7ed
 800cb90:	0800c865 	.word	0x0800c865
 800cb94:	0800e079 	.word	0x0800e079
 800cb98:	0800e3e2 	.word	0x0800e3e2
 800cb9c:	08009301 	.word	0x08009301

0800cba0 <_scanf_chars>:
 800cba0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cba2:	0015      	movs	r5, r2
 800cba4:	688a      	ldr	r2, [r1, #8]
 800cba6:	000c      	movs	r4, r1
 800cba8:	9001      	str	r0, [sp, #4]
 800cbaa:	2a00      	cmp	r2, #0
 800cbac:	d105      	bne.n	800cbba <_scanf_chars+0x1a>
 800cbae:	6989      	ldr	r1, [r1, #24]
 800cbb0:	3201      	adds	r2, #1
 800cbb2:	2900      	cmp	r1, #0
 800cbb4:	d000      	beq.n	800cbb8 <_scanf_chars+0x18>
 800cbb6:	3a02      	subs	r2, #2
 800cbb8:	60a2      	str	r2, [r4, #8]
 800cbba:	6822      	ldr	r2, [r4, #0]
 800cbbc:	06d2      	lsls	r2, r2, #27
 800cbbe:	d403      	bmi.n	800cbc8 <_scanf_chars+0x28>
 800cbc0:	681a      	ldr	r2, [r3, #0]
 800cbc2:	1d11      	adds	r1, r2, #4
 800cbc4:	6019      	str	r1, [r3, #0]
 800cbc6:	6817      	ldr	r7, [r2, #0]
 800cbc8:	2600      	movs	r6, #0
 800cbca:	69a0      	ldr	r0, [r4, #24]
 800cbcc:	2800      	cmp	r0, #0
 800cbce:	d013      	beq.n	800cbf8 <_scanf_chars+0x58>
 800cbd0:	2801      	cmp	r0, #1
 800cbd2:	d108      	bne.n	800cbe6 <_scanf_chars+0x46>
 800cbd4:	682b      	ldr	r3, [r5, #0]
 800cbd6:	6962      	ldr	r2, [r4, #20]
 800cbd8:	781b      	ldrb	r3, [r3, #0]
 800cbda:	5cd3      	ldrb	r3, [r2, r3]
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d10b      	bne.n	800cbf8 <_scanf_chars+0x58>
 800cbe0:	2e00      	cmp	r6, #0
 800cbe2:	d038      	beq.n	800cc56 <_scanf_chars+0xb6>
 800cbe4:	e026      	b.n	800cc34 <_scanf_chars+0x94>
 800cbe6:	2802      	cmp	r0, #2
 800cbe8:	d124      	bne.n	800cc34 <_scanf_chars+0x94>
 800cbea:	682b      	ldr	r3, [r5, #0]
 800cbec:	4a1a      	ldr	r2, [pc, #104]	; (800cc58 <_scanf_chars+0xb8>)
 800cbee:	781b      	ldrb	r3, [r3, #0]
 800cbf0:	5cd3      	ldrb	r3, [r2, r3]
 800cbf2:	2208      	movs	r2, #8
 800cbf4:	4213      	tst	r3, r2
 800cbf6:	d11d      	bne.n	800cc34 <_scanf_chars+0x94>
 800cbf8:	2210      	movs	r2, #16
 800cbfa:	6823      	ldr	r3, [r4, #0]
 800cbfc:	3601      	adds	r6, #1
 800cbfe:	4213      	tst	r3, r2
 800cc00:	d103      	bne.n	800cc0a <_scanf_chars+0x6a>
 800cc02:	682b      	ldr	r3, [r5, #0]
 800cc04:	781b      	ldrb	r3, [r3, #0]
 800cc06:	703b      	strb	r3, [r7, #0]
 800cc08:	3701      	adds	r7, #1
 800cc0a:	682a      	ldr	r2, [r5, #0]
 800cc0c:	686b      	ldr	r3, [r5, #4]
 800cc0e:	3201      	adds	r2, #1
 800cc10:	602a      	str	r2, [r5, #0]
 800cc12:	68a2      	ldr	r2, [r4, #8]
 800cc14:	3b01      	subs	r3, #1
 800cc16:	3a01      	subs	r2, #1
 800cc18:	606b      	str	r3, [r5, #4]
 800cc1a:	60a2      	str	r2, [r4, #8]
 800cc1c:	2a00      	cmp	r2, #0
 800cc1e:	d009      	beq.n	800cc34 <_scanf_chars+0x94>
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	dcd2      	bgt.n	800cbca <_scanf_chars+0x2a>
 800cc24:	23c0      	movs	r3, #192	; 0xc0
 800cc26:	005b      	lsls	r3, r3, #1
 800cc28:	0029      	movs	r1, r5
 800cc2a:	58e3      	ldr	r3, [r4, r3]
 800cc2c:	9801      	ldr	r0, [sp, #4]
 800cc2e:	4798      	blx	r3
 800cc30:	2800      	cmp	r0, #0
 800cc32:	d0ca      	beq.n	800cbca <_scanf_chars+0x2a>
 800cc34:	6822      	ldr	r2, [r4, #0]
 800cc36:	2310      	movs	r3, #16
 800cc38:	0011      	movs	r1, r2
 800cc3a:	4019      	ands	r1, r3
 800cc3c:	421a      	tst	r2, r3
 800cc3e:	d106      	bne.n	800cc4e <_scanf_chars+0xae>
 800cc40:	68e3      	ldr	r3, [r4, #12]
 800cc42:	3301      	adds	r3, #1
 800cc44:	60e3      	str	r3, [r4, #12]
 800cc46:	69a3      	ldr	r3, [r4, #24]
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d000      	beq.n	800cc4e <_scanf_chars+0xae>
 800cc4c:	7039      	strb	r1, [r7, #0]
 800cc4e:	2000      	movs	r0, #0
 800cc50:	6923      	ldr	r3, [r4, #16]
 800cc52:	199e      	adds	r6, r3, r6
 800cc54:	6126      	str	r6, [r4, #16]
 800cc56:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800cc58:	0800e079 	.word	0x0800e079

0800cc5c <_scanf_i>:
 800cc5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cc5e:	000c      	movs	r4, r1
 800cc60:	b08d      	sub	sp, #52	; 0x34
 800cc62:	9302      	str	r3, [sp, #8]
 800cc64:	4b79      	ldr	r3, [pc, #484]	; (800ce4c <_scanf_i+0x1f0>)
 800cc66:	0016      	movs	r6, r2
 800cc68:	9005      	str	r0, [sp, #20]
 800cc6a:	aa09      	add	r2, sp, #36	; 0x24
 800cc6c:	cb23      	ldmia	r3!, {r0, r1, r5}
 800cc6e:	c223      	stmia	r2!, {r0, r1, r5}
 800cc70:	4b77      	ldr	r3, [pc, #476]	; (800ce50 <_scanf_i+0x1f4>)
 800cc72:	9306      	str	r3, [sp, #24]
 800cc74:	69a3      	ldr	r3, [r4, #24]
 800cc76:	2b03      	cmp	r3, #3
 800cc78:	d001      	beq.n	800cc7e <_scanf_i+0x22>
 800cc7a:	4b76      	ldr	r3, [pc, #472]	; (800ce54 <_scanf_i+0x1f8>)
 800cc7c:	9306      	str	r3, [sp, #24]
 800cc7e:	22ae      	movs	r2, #174	; 0xae
 800cc80:	2000      	movs	r0, #0
 800cc82:	68a3      	ldr	r3, [r4, #8]
 800cc84:	0052      	lsls	r2, r2, #1
 800cc86:	1e59      	subs	r1, r3, #1
 800cc88:	9004      	str	r0, [sp, #16]
 800cc8a:	4291      	cmp	r1, r2
 800cc8c:	d905      	bls.n	800cc9a <_scanf_i+0x3e>
 800cc8e:	3b5e      	subs	r3, #94	; 0x5e
 800cc90:	3bff      	subs	r3, #255	; 0xff
 800cc92:	9304      	str	r3, [sp, #16]
 800cc94:	235e      	movs	r3, #94	; 0x5e
 800cc96:	33ff      	adds	r3, #255	; 0xff
 800cc98:	60a3      	str	r3, [r4, #8]
 800cc9a:	0023      	movs	r3, r4
 800cc9c:	331c      	adds	r3, #28
 800cc9e:	9301      	str	r3, [sp, #4]
 800cca0:	23d0      	movs	r3, #208	; 0xd0
 800cca2:	2700      	movs	r7, #0
 800cca4:	6822      	ldr	r2, [r4, #0]
 800cca6:	011b      	lsls	r3, r3, #4
 800cca8:	4313      	orrs	r3, r2
 800ccaa:	6023      	str	r3, [r4, #0]
 800ccac:	9b01      	ldr	r3, [sp, #4]
 800ccae:	9303      	str	r3, [sp, #12]
 800ccb0:	6833      	ldr	r3, [r6, #0]
 800ccb2:	a809      	add	r0, sp, #36	; 0x24
 800ccb4:	7819      	ldrb	r1, [r3, #0]
 800ccb6:	00bb      	lsls	r3, r7, #2
 800ccb8:	2202      	movs	r2, #2
 800ccba:	5818      	ldr	r0, [r3, r0]
 800ccbc:	f7fe ff22 	bl	800bb04 <memchr>
 800ccc0:	2800      	cmp	r0, #0
 800ccc2:	d02b      	beq.n	800cd1c <_scanf_i+0xc0>
 800ccc4:	2f01      	cmp	r7, #1
 800ccc6:	d162      	bne.n	800cd8e <_scanf_i+0x132>
 800ccc8:	6863      	ldr	r3, [r4, #4]
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d106      	bne.n	800ccdc <_scanf_i+0x80>
 800ccce:	3308      	adds	r3, #8
 800ccd0:	6822      	ldr	r2, [r4, #0]
 800ccd2:	6063      	str	r3, [r4, #4]
 800ccd4:	33f9      	adds	r3, #249	; 0xf9
 800ccd6:	33ff      	adds	r3, #255	; 0xff
 800ccd8:	4313      	orrs	r3, r2
 800ccda:	6023      	str	r3, [r4, #0]
 800ccdc:	4b5e      	ldr	r3, [pc, #376]	; (800ce58 <_scanf_i+0x1fc>)
 800ccde:	6822      	ldr	r2, [r4, #0]
 800cce0:	4013      	ands	r3, r2
 800cce2:	6023      	str	r3, [r4, #0]
 800cce4:	68a3      	ldr	r3, [r4, #8]
 800cce6:	1e5a      	subs	r2, r3, #1
 800cce8:	60a2      	str	r2, [r4, #8]
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	d016      	beq.n	800cd1c <_scanf_i+0xc0>
 800ccee:	6833      	ldr	r3, [r6, #0]
 800ccf0:	1c5a      	adds	r2, r3, #1
 800ccf2:	6032      	str	r2, [r6, #0]
 800ccf4:	781b      	ldrb	r3, [r3, #0]
 800ccf6:	9a03      	ldr	r2, [sp, #12]
 800ccf8:	7013      	strb	r3, [r2, #0]
 800ccfa:	6873      	ldr	r3, [r6, #4]
 800ccfc:	1c55      	adds	r5, r2, #1
 800ccfe:	3b01      	subs	r3, #1
 800cd00:	6073      	str	r3, [r6, #4]
 800cd02:	9503      	str	r5, [sp, #12]
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	dc09      	bgt.n	800cd1c <_scanf_i+0xc0>
 800cd08:	23c0      	movs	r3, #192	; 0xc0
 800cd0a:	005b      	lsls	r3, r3, #1
 800cd0c:	58e3      	ldr	r3, [r4, r3]
 800cd0e:	0031      	movs	r1, r6
 800cd10:	9805      	ldr	r0, [sp, #20]
 800cd12:	9307      	str	r3, [sp, #28]
 800cd14:	4798      	blx	r3
 800cd16:	2800      	cmp	r0, #0
 800cd18:	d000      	beq.n	800cd1c <_scanf_i+0xc0>
 800cd1a:	e081      	b.n	800ce20 <_scanf_i+0x1c4>
 800cd1c:	3701      	adds	r7, #1
 800cd1e:	2f03      	cmp	r7, #3
 800cd20:	d1c6      	bne.n	800ccb0 <_scanf_i+0x54>
 800cd22:	6863      	ldr	r3, [r4, #4]
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	d101      	bne.n	800cd2c <_scanf_i+0xd0>
 800cd28:	330a      	adds	r3, #10
 800cd2a:	6063      	str	r3, [r4, #4]
 800cd2c:	2110      	movs	r1, #16
 800cd2e:	2700      	movs	r7, #0
 800cd30:	6863      	ldr	r3, [r4, #4]
 800cd32:	6960      	ldr	r0, [r4, #20]
 800cd34:	1ac9      	subs	r1, r1, r3
 800cd36:	4b49      	ldr	r3, [pc, #292]	; (800ce5c <_scanf_i+0x200>)
 800cd38:	18c9      	adds	r1, r1, r3
 800cd3a:	f000 f8ad 	bl	800ce98 <__sccl>
 800cd3e:	9d03      	ldr	r5, [sp, #12]
 800cd40:	68a3      	ldr	r3, [r4, #8]
 800cd42:	6822      	ldr	r2, [r4, #0]
 800cd44:	9303      	str	r3, [sp, #12]
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	d041      	beq.n	800cdce <_scanf_i+0x172>
 800cd4a:	6831      	ldr	r1, [r6, #0]
 800cd4c:	6963      	ldr	r3, [r4, #20]
 800cd4e:	7808      	ldrb	r0, [r1, #0]
 800cd50:	5c1b      	ldrb	r3, [r3, r0]
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	d03b      	beq.n	800cdce <_scanf_i+0x172>
 800cd56:	2830      	cmp	r0, #48	; 0x30
 800cd58:	d129      	bne.n	800cdae <_scanf_i+0x152>
 800cd5a:	2380      	movs	r3, #128	; 0x80
 800cd5c:	011b      	lsls	r3, r3, #4
 800cd5e:	421a      	tst	r2, r3
 800cd60:	d025      	beq.n	800cdae <_scanf_i+0x152>
 800cd62:	9b04      	ldr	r3, [sp, #16]
 800cd64:	3701      	adds	r7, #1
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	d005      	beq.n	800cd76 <_scanf_i+0x11a>
 800cd6a:	001a      	movs	r2, r3
 800cd6c:	9b03      	ldr	r3, [sp, #12]
 800cd6e:	3a01      	subs	r2, #1
 800cd70:	3301      	adds	r3, #1
 800cd72:	9204      	str	r2, [sp, #16]
 800cd74:	60a3      	str	r3, [r4, #8]
 800cd76:	6873      	ldr	r3, [r6, #4]
 800cd78:	3b01      	subs	r3, #1
 800cd7a:	6073      	str	r3, [r6, #4]
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	dd1d      	ble.n	800cdbc <_scanf_i+0x160>
 800cd80:	6833      	ldr	r3, [r6, #0]
 800cd82:	3301      	adds	r3, #1
 800cd84:	6033      	str	r3, [r6, #0]
 800cd86:	68a3      	ldr	r3, [r4, #8]
 800cd88:	3b01      	subs	r3, #1
 800cd8a:	60a3      	str	r3, [r4, #8]
 800cd8c:	e7d8      	b.n	800cd40 <_scanf_i+0xe4>
 800cd8e:	2f02      	cmp	r7, #2
 800cd90:	d1a8      	bne.n	800cce4 <_scanf_i+0x88>
 800cd92:	21c0      	movs	r1, #192	; 0xc0
 800cd94:	2380      	movs	r3, #128	; 0x80
 800cd96:	6822      	ldr	r2, [r4, #0]
 800cd98:	00c9      	lsls	r1, r1, #3
 800cd9a:	4011      	ands	r1, r2
 800cd9c:	009b      	lsls	r3, r3, #2
 800cd9e:	4299      	cmp	r1, r3
 800cda0:	d1bf      	bne.n	800cd22 <_scanf_i+0xc6>
 800cda2:	3bf1      	subs	r3, #241	; 0xf1
 800cda4:	3bff      	subs	r3, #255	; 0xff
 800cda6:	6063      	str	r3, [r4, #4]
 800cda8:	33f0      	adds	r3, #240	; 0xf0
 800cdaa:	4313      	orrs	r3, r2
 800cdac:	e799      	b.n	800cce2 <_scanf_i+0x86>
 800cdae:	4b2c      	ldr	r3, [pc, #176]	; (800ce60 <_scanf_i+0x204>)
 800cdb0:	4013      	ands	r3, r2
 800cdb2:	6023      	str	r3, [r4, #0]
 800cdb4:	780b      	ldrb	r3, [r1, #0]
 800cdb6:	702b      	strb	r3, [r5, #0]
 800cdb8:	3501      	adds	r5, #1
 800cdba:	e7dc      	b.n	800cd76 <_scanf_i+0x11a>
 800cdbc:	23c0      	movs	r3, #192	; 0xc0
 800cdbe:	005b      	lsls	r3, r3, #1
 800cdc0:	58e3      	ldr	r3, [r4, r3]
 800cdc2:	0031      	movs	r1, r6
 800cdc4:	9805      	ldr	r0, [sp, #20]
 800cdc6:	9303      	str	r3, [sp, #12]
 800cdc8:	4798      	blx	r3
 800cdca:	2800      	cmp	r0, #0
 800cdcc:	d0db      	beq.n	800cd86 <_scanf_i+0x12a>
 800cdce:	6823      	ldr	r3, [r4, #0]
 800cdd0:	05db      	lsls	r3, r3, #23
 800cdd2:	d50e      	bpl.n	800cdf2 <_scanf_i+0x196>
 800cdd4:	9b01      	ldr	r3, [sp, #4]
 800cdd6:	429d      	cmp	r5, r3
 800cdd8:	d907      	bls.n	800cdea <_scanf_i+0x18e>
 800cdda:	23be      	movs	r3, #190	; 0xbe
 800cddc:	3d01      	subs	r5, #1
 800cdde:	005b      	lsls	r3, r3, #1
 800cde0:	0032      	movs	r2, r6
 800cde2:	7829      	ldrb	r1, [r5, #0]
 800cde4:	58e3      	ldr	r3, [r4, r3]
 800cde6:	9805      	ldr	r0, [sp, #20]
 800cde8:	4798      	blx	r3
 800cdea:	9b01      	ldr	r3, [sp, #4]
 800cdec:	2001      	movs	r0, #1
 800cdee:	429d      	cmp	r5, r3
 800cdf0:	d029      	beq.n	800ce46 <_scanf_i+0x1ea>
 800cdf2:	6821      	ldr	r1, [r4, #0]
 800cdf4:	2310      	movs	r3, #16
 800cdf6:	000a      	movs	r2, r1
 800cdf8:	401a      	ands	r2, r3
 800cdfa:	4219      	tst	r1, r3
 800cdfc:	d11c      	bne.n	800ce38 <_scanf_i+0x1dc>
 800cdfe:	702a      	strb	r2, [r5, #0]
 800ce00:	6863      	ldr	r3, [r4, #4]
 800ce02:	9901      	ldr	r1, [sp, #4]
 800ce04:	9805      	ldr	r0, [sp, #20]
 800ce06:	9e06      	ldr	r6, [sp, #24]
 800ce08:	47b0      	blx	r6
 800ce0a:	9b02      	ldr	r3, [sp, #8]
 800ce0c:	6821      	ldr	r1, [r4, #0]
 800ce0e:	681b      	ldr	r3, [r3, #0]
 800ce10:	068a      	lsls	r2, r1, #26
 800ce12:	d507      	bpl.n	800ce24 <_scanf_i+0x1c8>
 800ce14:	1d1a      	adds	r2, r3, #4
 800ce16:	9902      	ldr	r1, [sp, #8]
 800ce18:	600a      	str	r2, [r1, #0]
 800ce1a:	681b      	ldr	r3, [r3, #0]
 800ce1c:	6018      	str	r0, [r3, #0]
 800ce1e:	e008      	b.n	800ce32 <_scanf_i+0x1d6>
 800ce20:	2700      	movs	r7, #0
 800ce22:	e7d4      	b.n	800cdce <_scanf_i+0x172>
 800ce24:	1d1a      	adds	r2, r3, #4
 800ce26:	07ce      	lsls	r6, r1, #31
 800ce28:	d5f5      	bpl.n	800ce16 <_scanf_i+0x1ba>
 800ce2a:	9902      	ldr	r1, [sp, #8]
 800ce2c:	600a      	str	r2, [r1, #0]
 800ce2e:	681b      	ldr	r3, [r3, #0]
 800ce30:	8018      	strh	r0, [r3, #0]
 800ce32:	68e3      	ldr	r3, [r4, #12]
 800ce34:	3301      	adds	r3, #1
 800ce36:	60e3      	str	r3, [r4, #12]
 800ce38:	2000      	movs	r0, #0
 800ce3a:	9b01      	ldr	r3, [sp, #4]
 800ce3c:	1aed      	subs	r5, r5, r3
 800ce3e:	6923      	ldr	r3, [r4, #16]
 800ce40:	19ef      	adds	r7, r5, r7
 800ce42:	19df      	adds	r7, r3, r7
 800ce44:	6127      	str	r7, [r4, #16]
 800ce46:	b00d      	add	sp, #52	; 0x34
 800ce48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ce4a:	46c0      	nop			; (mov r8, r8)
 800ce4c:	0800de54 	.word	0x0800de54
 800ce50:	0800a629 	.word	0x0800a629
 800ce54:	0800d049 	.word	0x0800d049
 800ce58:	fffffaff 	.word	0xfffffaff
 800ce5c:	0800e3f6 	.word	0x0800e3f6
 800ce60:	fffff6ff 	.word	0xfffff6ff

0800ce64 <_read_r>:
 800ce64:	b570      	push	{r4, r5, r6, lr}
 800ce66:	0004      	movs	r4, r0
 800ce68:	0008      	movs	r0, r1
 800ce6a:	0011      	movs	r1, r2
 800ce6c:	001a      	movs	r2, r3
 800ce6e:	2300      	movs	r3, #0
 800ce70:	4d05      	ldr	r5, [pc, #20]	; (800ce88 <_read_r+0x24>)
 800ce72:	602b      	str	r3, [r5, #0]
 800ce74:	f7f7 fecc 	bl	8004c10 <_read>
 800ce78:	1c43      	adds	r3, r0, #1
 800ce7a:	d103      	bne.n	800ce84 <_read_r+0x20>
 800ce7c:	682b      	ldr	r3, [r5, #0]
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d000      	beq.n	800ce84 <_read_r+0x20>
 800ce82:	6023      	str	r3, [r4, #0]
 800ce84:	bd70      	pop	{r4, r5, r6, pc}
 800ce86:	46c0      	nop			; (mov r8, r8)
 800ce88:	20000a28 	.word	0x20000a28

0800ce8c <nan>:
 800ce8c:	2000      	movs	r0, #0
 800ce8e:	4901      	ldr	r1, [pc, #4]	; (800ce94 <nan+0x8>)
 800ce90:	4770      	bx	lr
 800ce92:	46c0      	nop			; (mov r8, r8)
 800ce94:	7ff80000 	.word	0x7ff80000

0800ce98 <__sccl>:
 800ce98:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ce9a:	780b      	ldrb	r3, [r1, #0]
 800ce9c:	0004      	movs	r4, r0
 800ce9e:	2b5e      	cmp	r3, #94	; 0x5e
 800cea0:	d00c      	beq.n	800cebc <__sccl+0x24>
 800cea2:	1c48      	adds	r0, r1, #1
 800cea4:	2100      	movs	r1, #0
 800cea6:	0022      	movs	r2, r4
 800cea8:	1c65      	adds	r5, r4, #1
 800ceaa:	35ff      	adds	r5, #255	; 0xff
 800ceac:	7011      	strb	r1, [r2, #0]
 800ceae:	3201      	adds	r2, #1
 800ceb0:	42aa      	cmp	r2, r5
 800ceb2:	d1fb      	bne.n	800ceac <__sccl+0x14>
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	d105      	bne.n	800cec4 <__sccl+0x2c>
 800ceb8:	3801      	subs	r0, #1
 800ceba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cebc:	784b      	ldrb	r3, [r1, #1]
 800cebe:	1c88      	adds	r0, r1, #2
 800cec0:	2101      	movs	r1, #1
 800cec2:	e7f0      	b.n	800cea6 <__sccl+0xe>
 800cec4:	2201      	movs	r2, #1
 800cec6:	262d      	movs	r6, #45	; 0x2d
 800cec8:	4051      	eors	r1, r2
 800ceca:	0002      	movs	r2, r0
 800cecc:	54e1      	strb	r1, [r4, r3]
 800cece:	7815      	ldrb	r5, [r2, #0]
 800ced0:	1c50      	adds	r0, r2, #1
 800ced2:	2d2d      	cmp	r5, #45	; 0x2d
 800ced4:	d009      	beq.n	800ceea <__sccl+0x52>
 800ced6:	2d5d      	cmp	r5, #93	; 0x5d
 800ced8:	d0ef      	beq.n	800ceba <__sccl+0x22>
 800ceda:	2d00      	cmp	r5, #0
 800cedc:	d101      	bne.n	800cee2 <__sccl+0x4a>
 800cede:	0010      	movs	r0, r2
 800cee0:	e7eb      	b.n	800ceba <__sccl+0x22>
 800cee2:	002b      	movs	r3, r5
 800cee4:	e7f1      	b.n	800ceca <__sccl+0x32>
 800cee6:	0033      	movs	r3, r6
 800cee8:	e7ef      	b.n	800ceca <__sccl+0x32>
 800ceea:	7855      	ldrb	r5, [r2, #1]
 800ceec:	2d5d      	cmp	r5, #93	; 0x5d
 800ceee:	d0fa      	beq.n	800cee6 <__sccl+0x4e>
 800cef0:	42ab      	cmp	r3, r5
 800cef2:	dcf8      	bgt.n	800cee6 <__sccl+0x4e>
 800cef4:	0018      	movs	r0, r3
 800cef6:	3202      	adds	r2, #2
 800cef8:	3001      	adds	r0, #1
 800cefa:	5421      	strb	r1, [r4, r0]
 800cefc:	4285      	cmp	r5, r0
 800cefe:	dcfb      	bgt.n	800cef8 <__sccl+0x60>
 800cf00:	2000      	movs	r0, #0
 800cf02:	1c5f      	adds	r7, r3, #1
 800cf04:	42ab      	cmp	r3, r5
 800cf06:	da01      	bge.n	800cf0c <__sccl+0x74>
 800cf08:	1ae8      	subs	r0, r5, r3
 800cf0a:	3801      	subs	r0, #1
 800cf0c:	183b      	adds	r3, r7, r0
 800cf0e:	e7de      	b.n	800cece <__sccl+0x36>

0800cf10 <strncmp>:
 800cf10:	b530      	push	{r4, r5, lr}
 800cf12:	0005      	movs	r5, r0
 800cf14:	1e10      	subs	r0, r2, #0
 800cf16:	d008      	beq.n	800cf2a <strncmp+0x1a>
 800cf18:	2400      	movs	r4, #0
 800cf1a:	3a01      	subs	r2, #1
 800cf1c:	5d2b      	ldrb	r3, [r5, r4]
 800cf1e:	5d08      	ldrb	r0, [r1, r4]
 800cf20:	4283      	cmp	r3, r0
 800cf22:	d101      	bne.n	800cf28 <strncmp+0x18>
 800cf24:	4294      	cmp	r4, r2
 800cf26:	d101      	bne.n	800cf2c <strncmp+0x1c>
 800cf28:	1a18      	subs	r0, r3, r0
 800cf2a:	bd30      	pop	{r4, r5, pc}
 800cf2c:	3401      	adds	r4, #1
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	d1f4      	bne.n	800cf1c <strncmp+0xc>
 800cf32:	e7f9      	b.n	800cf28 <strncmp+0x18>

0800cf34 <_strtoul_l.constprop.0>:
 800cf34:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cf36:	b087      	sub	sp, #28
 800cf38:	9202      	str	r2, [sp, #8]
 800cf3a:	4a42      	ldr	r2, [pc, #264]	; (800d044 <_strtoul_l.constprop.0+0x110>)
 800cf3c:	001e      	movs	r6, r3
 800cf3e:	9101      	str	r1, [sp, #4]
 800cf40:	000b      	movs	r3, r1
 800cf42:	4694      	mov	ip, r2
 800cf44:	2108      	movs	r1, #8
 800cf46:	9005      	str	r0, [sp, #20]
 800cf48:	001a      	movs	r2, r3
 800cf4a:	4660      	mov	r0, ip
 800cf4c:	7814      	ldrb	r4, [r2, #0]
 800cf4e:	3301      	adds	r3, #1
 800cf50:	5d00      	ldrb	r0, [r0, r4]
 800cf52:	001d      	movs	r5, r3
 800cf54:	0007      	movs	r7, r0
 800cf56:	400f      	ands	r7, r1
 800cf58:	4208      	tst	r0, r1
 800cf5a:	d1f5      	bne.n	800cf48 <_strtoul_l.constprop.0+0x14>
 800cf5c:	2c2d      	cmp	r4, #45	; 0x2d
 800cf5e:	d13a      	bne.n	800cfd6 <_strtoul_l.constprop.0+0xa2>
 800cf60:	2701      	movs	r7, #1
 800cf62:	781c      	ldrb	r4, [r3, #0]
 800cf64:	1c95      	adds	r5, r2, #2
 800cf66:	2e00      	cmp	r6, #0
 800cf68:	d067      	beq.n	800d03a <_strtoul_l.constprop.0+0x106>
 800cf6a:	2e10      	cmp	r6, #16
 800cf6c:	d109      	bne.n	800cf82 <_strtoul_l.constprop.0+0x4e>
 800cf6e:	2c30      	cmp	r4, #48	; 0x30
 800cf70:	d107      	bne.n	800cf82 <_strtoul_l.constprop.0+0x4e>
 800cf72:	2220      	movs	r2, #32
 800cf74:	782b      	ldrb	r3, [r5, #0]
 800cf76:	4393      	bics	r3, r2
 800cf78:	2b58      	cmp	r3, #88	; 0x58
 800cf7a:	d159      	bne.n	800d030 <_strtoul_l.constprop.0+0xfc>
 800cf7c:	2610      	movs	r6, #16
 800cf7e:	786c      	ldrb	r4, [r5, #1]
 800cf80:	3502      	adds	r5, #2
 800cf82:	2001      	movs	r0, #1
 800cf84:	0031      	movs	r1, r6
 800cf86:	4240      	negs	r0, r0
 800cf88:	f7f3 f8e0 	bl	800014c <__udivsi3>
 800cf8c:	9003      	str	r0, [sp, #12]
 800cf8e:	2001      	movs	r0, #1
 800cf90:	0031      	movs	r1, r6
 800cf92:	4240      	negs	r0, r0
 800cf94:	f7f3 f960 	bl	8000258 <__aeabi_uidivmod>
 800cf98:	2300      	movs	r3, #0
 800cf9a:	9104      	str	r1, [sp, #16]
 800cf9c:	2101      	movs	r1, #1
 800cf9e:	2201      	movs	r2, #1
 800cfa0:	0018      	movs	r0, r3
 800cfa2:	468c      	mov	ip, r1
 800cfa4:	4252      	negs	r2, r2
 800cfa6:	0021      	movs	r1, r4
 800cfa8:	3930      	subs	r1, #48	; 0x30
 800cfaa:	2909      	cmp	r1, #9
 800cfac:	d818      	bhi.n	800cfe0 <_strtoul_l.constprop.0+0xac>
 800cfae:	000c      	movs	r4, r1
 800cfb0:	42a6      	cmp	r6, r4
 800cfb2:	dd23      	ble.n	800cffc <_strtoul_l.constprop.0+0xc8>
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	db1f      	blt.n	800cff8 <_strtoul_l.constprop.0+0xc4>
 800cfb8:	9903      	ldr	r1, [sp, #12]
 800cfba:	0013      	movs	r3, r2
 800cfbc:	4281      	cmp	r1, r0
 800cfbe:	d307      	bcc.n	800cfd0 <_strtoul_l.constprop.0+0x9c>
 800cfc0:	d103      	bne.n	800cfca <_strtoul_l.constprop.0+0x96>
 800cfc2:	9904      	ldr	r1, [sp, #16]
 800cfc4:	0013      	movs	r3, r2
 800cfc6:	42a1      	cmp	r1, r4
 800cfc8:	db02      	blt.n	800cfd0 <_strtoul_l.constprop.0+0x9c>
 800cfca:	4663      	mov	r3, ip
 800cfcc:	4370      	muls	r0, r6
 800cfce:	1820      	adds	r0, r4, r0
 800cfd0:	782c      	ldrb	r4, [r5, #0]
 800cfd2:	3501      	adds	r5, #1
 800cfd4:	e7e7      	b.n	800cfa6 <_strtoul_l.constprop.0+0x72>
 800cfd6:	2c2b      	cmp	r4, #43	; 0x2b
 800cfd8:	d1c5      	bne.n	800cf66 <_strtoul_l.constprop.0+0x32>
 800cfda:	781c      	ldrb	r4, [r3, #0]
 800cfdc:	1c95      	adds	r5, r2, #2
 800cfde:	e7c2      	b.n	800cf66 <_strtoul_l.constprop.0+0x32>
 800cfe0:	0021      	movs	r1, r4
 800cfe2:	3941      	subs	r1, #65	; 0x41
 800cfe4:	2919      	cmp	r1, #25
 800cfe6:	d801      	bhi.n	800cfec <_strtoul_l.constprop.0+0xb8>
 800cfe8:	3c37      	subs	r4, #55	; 0x37
 800cfea:	e7e1      	b.n	800cfb0 <_strtoul_l.constprop.0+0x7c>
 800cfec:	0021      	movs	r1, r4
 800cfee:	3961      	subs	r1, #97	; 0x61
 800cff0:	2919      	cmp	r1, #25
 800cff2:	d803      	bhi.n	800cffc <_strtoul_l.constprop.0+0xc8>
 800cff4:	3c57      	subs	r4, #87	; 0x57
 800cff6:	e7db      	b.n	800cfb0 <_strtoul_l.constprop.0+0x7c>
 800cff8:	0013      	movs	r3, r2
 800cffa:	e7e9      	b.n	800cfd0 <_strtoul_l.constprop.0+0x9c>
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	da09      	bge.n	800d014 <_strtoul_l.constprop.0+0xe0>
 800d000:	2322      	movs	r3, #34	; 0x22
 800d002:	2001      	movs	r0, #1
 800d004:	9a05      	ldr	r2, [sp, #20]
 800d006:	4240      	negs	r0, r0
 800d008:	6013      	str	r3, [r2, #0]
 800d00a:	9b02      	ldr	r3, [sp, #8]
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	d109      	bne.n	800d024 <_strtoul_l.constprop.0+0xf0>
 800d010:	b007      	add	sp, #28
 800d012:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d014:	2f00      	cmp	r7, #0
 800d016:	d000      	beq.n	800d01a <_strtoul_l.constprop.0+0xe6>
 800d018:	4240      	negs	r0, r0
 800d01a:	9a02      	ldr	r2, [sp, #8]
 800d01c:	2a00      	cmp	r2, #0
 800d01e:	d0f7      	beq.n	800d010 <_strtoul_l.constprop.0+0xdc>
 800d020:	2b00      	cmp	r3, #0
 800d022:	d001      	beq.n	800d028 <_strtoul_l.constprop.0+0xf4>
 800d024:	1e6b      	subs	r3, r5, #1
 800d026:	9301      	str	r3, [sp, #4]
 800d028:	9b02      	ldr	r3, [sp, #8]
 800d02a:	9a01      	ldr	r2, [sp, #4]
 800d02c:	601a      	str	r2, [r3, #0]
 800d02e:	e7ef      	b.n	800d010 <_strtoul_l.constprop.0+0xdc>
 800d030:	2430      	movs	r4, #48	; 0x30
 800d032:	2e00      	cmp	r6, #0
 800d034:	d1a5      	bne.n	800cf82 <_strtoul_l.constprop.0+0x4e>
 800d036:	3608      	adds	r6, #8
 800d038:	e7a3      	b.n	800cf82 <_strtoul_l.constprop.0+0x4e>
 800d03a:	2c30      	cmp	r4, #48	; 0x30
 800d03c:	d099      	beq.n	800cf72 <_strtoul_l.constprop.0+0x3e>
 800d03e:	260a      	movs	r6, #10
 800d040:	e79f      	b.n	800cf82 <_strtoul_l.constprop.0+0x4e>
 800d042:	46c0      	nop			; (mov r8, r8)
 800d044:	0800e079 	.word	0x0800e079

0800d048 <_strtoul_r>:
 800d048:	b510      	push	{r4, lr}
 800d04a:	f7ff ff73 	bl	800cf34 <_strtoul_l.constprop.0>
 800d04e:	bd10      	pop	{r4, pc}

0800d050 <__submore>:
 800d050:	000b      	movs	r3, r1
 800d052:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d054:	6b4d      	ldr	r5, [r1, #52]	; 0x34
 800d056:	3344      	adds	r3, #68	; 0x44
 800d058:	000c      	movs	r4, r1
 800d05a:	429d      	cmp	r5, r3
 800d05c:	d11c      	bne.n	800d098 <__submore+0x48>
 800d05e:	2680      	movs	r6, #128	; 0x80
 800d060:	00f6      	lsls	r6, r6, #3
 800d062:	0031      	movs	r1, r6
 800d064:	f7fb fc68 	bl	8008938 <_malloc_r>
 800d068:	2800      	cmp	r0, #0
 800d06a:	d102      	bne.n	800d072 <__submore+0x22>
 800d06c:	2001      	movs	r0, #1
 800d06e:	4240      	negs	r0, r0
 800d070:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d072:	0023      	movs	r3, r4
 800d074:	6360      	str	r0, [r4, #52]	; 0x34
 800d076:	63a6      	str	r6, [r4, #56]	; 0x38
 800d078:	3346      	adds	r3, #70	; 0x46
 800d07a:	781a      	ldrb	r2, [r3, #0]
 800d07c:	4b10      	ldr	r3, [pc, #64]	; (800d0c0 <__submore+0x70>)
 800d07e:	54c2      	strb	r2, [r0, r3]
 800d080:	0023      	movs	r3, r4
 800d082:	3345      	adds	r3, #69	; 0x45
 800d084:	781a      	ldrb	r2, [r3, #0]
 800d086:	4b0f      	ldr	r3, [pc, #60]	; (800d0c4 <__submore+0x74>)
 800d088:	54c2      	strb	r2, [r0, r3]
 800d08a:	782a      	ldrb	r2, [r5, #0]
 800d08c:	4b0e      	ldr	r3, [pc, #56]	; (800d0c8 <__submore+0x78>)
 800d08e:	54c2      	strb	r2, [r0, r3]
 800d090:	18c0      	adds	r0, r0, r3
 800d092:	6020      	str	r0, [r4, #0]
 800d094:	2000      	movs	r0, #0
 800d096:	e7eb      	b.n	800d070 <__submore+0x20>
 800d098:	6b8e      	ldr	r6, [r1, #56]	; 0x38
 800d09a:	0029      	movs	r1, r5
 800d09c:	0073      	lsls	r3, r6, #1
 800d09e:	001a      	movs	r2, r3
 800d0a0:	9301      	str	r3, [sp, #4]
 800d0a2:	f000 fa20 	bl	800d4e6 <_realloc_r>
 800d0a6:	1e05      	subs	r5, r0, #0
 800d0a8:	d0e0      	beq.n	800d06c <__submore+0x1c>
 800d0aa:	1987      	adds	r7, r0, r6
 800d0ac:	0001      	movs	r1, r0
 800d0ae:	0032      	movs	r2, r6
 800d0b0:	0038      	movs	r0, r7
 800d0b2:	f7fb fbb1 	bl	8008818 <memcpy>
 800d0b6:	9b01      	ldr	r3, [sp, #4]
 800d0b8:	6027      	str	r7, [r4, #0]
 800d0ba:	6365      	str	r5, [r4, #52]	; 0x34
 800d0bc:	63a3      	str	r3, [r4, #56]	; 0x38
 800d0be:	e7e9      	b.n	800d094 <__submore+0x44>
 800d0c0:	000003ff 	.word	0x000003ff
 800d0c4:	000003fe 	.word	0x000003fe
 800d0c8:	000003fd 	.word	0x000003fd

0800d0cc <__ascii_wctomb>:
 800d0cc:	0003      	movs	r3, r0
 800d0ce:	1e08      	subs	r0, r1, #0
 800d0d0:	d005      	beq.n	800d0de <__ascii_wctomb+0x12>
 800d0d2:	2aff      	cmp	r2, #255	; 0xff
 800d0d4:	d904      	bls.n	800d0e0 <__ascii_wctomb+0x14>
 800d0d6:	228a      	movs	r2, #138	; 0x8a
 800d0d8:	2001      	movs	r0, #1
 800d0da:	601a      	str	r2, [r3, #0]
 800d0dc:	4240      	negs	r0, r0
 800d0de:	4770      	bx	lr
 800d0e0:	2001      	movs	r0, #1
 800d0e2:	700a      	strb	r2, [r1, #0]
 800d0e4:	e7fb      	b.n	800d0de <__ascii_wctomb+0x12>
	...

0800d0e8 <__assert_func>:
 800d0e8:	b530      	push	{r4, r5, lr}
 800d0ea:	0014      	movs	r4, r2
 800d0ec:	001a      	movs	r2, r3
 800d0ee:	4b09      	ldr	r3, [pc, #36]	; (800d114 <__assert_func+0x2c>)
 800d0f0:	0005      	movs	r5, r0
 800d0f2:	681b      	ldr	r3, [r3, #0]
 800d0f4:	b085      	sub	sp, #20
 800d0f6:	68d8      	ldr	r0, [r3, #12]
 800d0f8:	4b07      	ldr	r3, [pc, #28]	; (800d118 <__assert_func+0x30>)
 800d0fa:	2c00      	cmp	r4, #0
 800d0fc:	d101      	bne.n	800d102 <__assert_func+0x1a>
 800d0fe:	4b07      	ldr	r3, [pc, #28]	; (800d11c <__assert_func+0x34>)
 800d100:	001c      	movs	r4, r3
 800d102:	9301      	str	r3, [sp, #4]
 800d104:	9100      	str	r1, [sp, #0]
 800d106:	002b      	movs	r3, r5
 800d108:	4905      	ldr	r1, [pc, #20]	; (800d120 <__assert_func+0x38>)
 800d10a:	9402      	str	r4, [sp, #8]
 800d10c:	f000 f9b8 	bl	800d480 <fiprintf>
 800d110:	f000 fc48 	bl	800d9a4 <abort>
 800d114:	20000050 	.word	0x20000050
 800d118:	0800e408 	.word	0x0800e408
 800d11c:	0800e443 	.word	0x0800e443
 800d120:	0800e415 	.word	0x0800e415

0800d124 <__sflush_r>:
 800d124:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d126:	898b      	ldrh	r3, [r1, #12]
 800d128:	0005      	movs	r5, r0
 800d12a:	000c      	movs	r4, r1
 800d12c:	071a      	lsls	r2, r3, #28
 800d12e:	d45f      	bmi.n	800d1f0 <__sflush_r+0xcc>
 800d130:	684a      	ldr	r2, [r1, #4]
 800d132:	2a00      	cmp	r2, #0
 800d134:	dc04      	bgt.n	800d140 <__sflush_r+0x1c>
 800d136:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800d138:	2a00      	cmp	r2, #0
 800d13a:	dc01      	bgt.n	800d140 <__sflush_r+0x1c>
 800d13c:	2000      	movs	r0, #0
 800d13e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d140:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800d142:	2f00      	cmp	r7, #0
 800d144:	d0fa      	beq.n	800d13c <__sflush_r+0x18>
 800d146:	2200      	movs	r2, #0
 800d148:	2180      	movs	r1, #128	; 0x80
 800d14a:	682e      	ldr	r6, [r5, #0]
 800d14c:	602a      	str	r2, [r5, #0]
 800d14e:	001a      	movs	r2, r3
 800d150:	0149      	lsls	r1, r1, #5
 800d152:	400a      	ands	r2, r1
 800d154:	420b      	tst	r3, r1
 800d156:	d034      	beq.n	800d1c2 <__sflush_r+0x9e>
 800d158:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d15a:	89a3      	ldrh	r3, [r4, #12]
 800d15c:	075b      	lsls	r3, r3, #29
 800d15e:	d506      	bpl.n	800d16e <__sflush_r+0x4a>
 800d160:	6863      	ldr	r3, [r4, #4]
 800d162:	1ac0      	subs	r0, r0, r3
 800d164:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d166:	2b00      	cmp	r3, #0
 800d168:	d001      	beq.n	800d16e <__sflush_r+0x4a>
 800d16a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d16c:	1ac0      	subs	r0, r0, r3
 800d16e:	0002      	movs	r2, r0
 800d170:	6a21      	ldr	r1, [r4, #32]
 800d172:	2300      	movs	r3, #0
 800d174:	0028      	movs	r0, r5
 800d176:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800d178:	47b8      	blx	r7
 800d17a:	89a1      	ldrh	r1, [r4, #12]
 800d17c:	1c43      	adds	r3, r0, #1
 800d17e:	d106      	bne.n	800d18e <__sflush_r+0x6a>
 800d180:	682b      	ldr	r3, [r5, #0]
 800d182:	2b1d      	cmp	r3, #29
 800d184:	d831      	bhi.n	800d1ea <__sflush_r+0xc6>
 800d186:	4a2c      	ldr	r2, [pc, #176]	; (800d238 <__sflush_r+0x114>)
 800d188:	40da      	lsrs	r2, r3
 800d18a:	07d3      	lsls	r3, r2, #31
 800d18c:	d52d      	bpl.n	800d1ea <__sflush_r+0xc6>
 800d18e:	2300      	movs	r3, #0
 800d190:	6063      	str	r3, [r4, #4]
 800d192:	6923      	ldr	r3, [r4, #16]
 800d194:	6023      	str	r3, [r4, #0]
 800d196:	04cb      	lsls	r3, r1, #19
 800d198:	d505      	bpl.n	800d1a6 <__sflush_r+0x82>
 800d19a:	1c43      	adds	r3, r0, #1
 800d19c:	d102      	bne.n	800d1a4 <__sflush_r+0x80>
 800d19e:	682b      	ldr	r3, [r5, #0]
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	d100      	bne.n	800d1a6 <__sflush_r+0x82>
 800d1a4:	6560      	str	r0, [r4, #84]	; 0x54
 800d1a6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d1a8:	602e      	str	r6, [r5, #0]
 800d1aa:	2900      	cmp	r1, #0
 800d1ac:	d0c6      	beq.n	800d13c <__sflush_r+0x18>
 800d1ae:	0023      	movs	r3, r4
 800d1b0:	3344      	adds	r3, #68	; 0x44
 800d1b2:	4299      	cmp	r1, r3
 800d1b4:	d002      	beq.n	800d1bc <__sflush_r+0x98>
 800d1b6:	0028      	movs	r0, r5
 800d1b8:	f7fb fb52 	bl	8008860 <_free_r>
 800d1bc:	2000      	movs	r0, #0
 800d1be:	6360      	str	r0, [r4, #52]	; 0x34
 800d1c0:	e7bd      	b.n	800d13e <__sflush_r+0x1a>
 800d1c2:	2301      	movs	r3, #1
 800d1c4:	0028      	movs	r0, r5
 800d1c6:	6a21      	ldr	r1, [r4, #32]
 800d1c8:	47b8      	blx	r7
 800d1ca:	1c43      	adds	r3, r0, #1
 800d1cc:	d1c5      	bne.n	800d15a <__sflush_r+0x36>
 800d1ce:	682b      	ldr	r3, [r5, #0]
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	d0c2      	beq.n	800d15a <__sflush_r+0x36>
 800d1d4:	2b1d      	cmp	r3, #29
 800d1d6:	d001      	beq.n	800d1dc <__sflush_r+0xb8>
 800d1d8:	2b16      	cmp	r3, #22
 800d1da:	d101      	bne.n	800d1e0 <__sflush_r+0xbc>
 800d1dc:	602e      	str	r6, [r5, #0]
 800d1de:	e7ad      	b.n	800d13c <__sflush_r+0x18>
 800d1e0:	2340      	movs	r3, #64	; 0x40
 800d1e2:	89a2      	ldrh	r2, [r4, #12]
 800d1e4:	4313      	orrs	r3, r2
 800d1e6:	81a3      	strh	r3, [r4, #12]
 800d1e8:	e7a9      	b.n	800d13e <__sflush_r+0x1a>
 800d1ea:	2340      	movs	r3, #64	; 0x40
 800d1ec:	430b      	orrs	r3, r1
 800d1ee:	e7fa      	b.n	800d1e6 <__sflush_r+0xc2>
 800d1f0:	690f      	ldr	r7, [r1, #16]
 800d1f2:	2f00      	cmp	r7, #0
 800d1f4:	d0a2      	beq.n	800d13c <__sflush_r+0x18>
 800d1f6:	680a      	ldr	r2, [r1, #0]
 800d1f8:	600f      	str	r7, [r1, #0]
 800d1fa:	1bd2      	subs	r2, r2, r7
 800d1fc:	9201      	str	r2, [sp, #4]
 800d1fe:	2200      	movs	r2, #0
 800d200:	079b      	lsls	r3, r3, #30
 800d202:	d100      	bne.n	800d206 <__sflush_r+0xe2>
 800d204:	694a      	ldr	r2, [r1, #20]
 800d206:	60a2      	str	r2, [r4, #8]
 800d208:	9b01      	ldr	r3, [sp, #4]
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	dc00      	bgt.n	800d210 <__sflush_r+0xec>
 800d20e:	e795      	b.n	800d13c <__sflush_r+0x18>
 800d210:	003a      	movs	r2, r7
 800d212:	0028      	movs	r0, r5
 800d214:	9b01      	ldr	r3, [sp, #4]
 800d216:	6a21      	ldr	r1, [r4, #32]
 800d218:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d21a:	47b0      	blx	r6
 800d21c:	2800      	cmp	r0, #0
 800d21e:	dc06      	bgt.n	800d22e <__sflush_r+0x10a>
 800d220:	2340      	movs	r3, #64	; 0x40
 800d222:	2001      	movs	r0, #1
 800d224:	89a2      	ldrh	r2, [r4, #12]
 800d226:	4240      	negs	r0, r0
 800d228:	4313      	orrs	r3, r2
 800d22a:	81a3      	strh	r3, [r4, #12]
 800d22c:	e787      	b.n	800d13e <__sflush_r+0x1a>
 800d22e:	9b01      	ldr	r3, [sp, #4]
 800d230:	183f      	adds	r7, r7, r0
 800d232:	1a1b      	subs	r3, r3, r0
 800d234:	9301      	str	r3, [sp, #4]
 800d236:	e7e7      	b.n	800d208 <__sflush_r+0xe4>
 800d238:	20400001 	.word	0x20400001

0800d23c <_fflush_r>:
 800d23c:	690b      	ldr	r3, [r1, #16]
 800d23e:	b570      	push	{r4, r5, r6, lr}
 800d240:	0005      	movs	r5, r0
 800d242:	000c      	movs	r4, r1
 800d244:	2b00      	cmp	r3, #0
 800d246:	d102      	bne.n	800d24e <_fflush_r+0x12>
 800d248:	2500      	movs	r5, #0
 800d24a:	0028      	movs	r0, r5
 800d24c:	bd70      	pop	{r4, r5, r6, pc}
 800d24e:	2800      	cmp	r0, #0
 800d250:	d004      	beq.n	800d25c <_fflush_r+0x20>
 800d252:	6983      	ldr	r3, [r0, #24]
 800d254:	2b00      	cmp	r3, #0
 800d256:	d101      	bne.n	800d25c <_fflush_r+0x20>
 800d258:	f000 f892 	bl	800d380 <__sinit>
 800d25c:	4b14      	ldr	r3, [pc, #80]	; (800d2b0 <_fflush_r+0x74>)
 800d25e:	429c      	cmp	r4, r3
 800d260:	d11b      	bne.n	800d29a <_fflush_r+0x5e>
 800d262:	686c      	ldr	r4, [r5, #4]
 800d264:	220c      	movs	r2, #12
 800d266:	5ea3      	ldrsh	r3, [r4, r2]
 800d268:	2b00      	cmp	r3, #0
 800d26a:	d0ed      	beq.n	800d248 <_fflush_r+0xc>
 800d26c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d26e:	07d2      	lsls	r2, r2, #31
 800d270:	d404      	bmi.n	800d27c <_fflush_r+0x40>
 800d272:	059b      	lsls	r3, r3, #22
 800d274:	d402      	bmi.n	800d27c <_fflush_r+0x40>
 800d276:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d278:	f000 f933 	bl	800d4e2 <__retarget_lock_acquire_recursive>
 800d27c:	0028      	movs	r0, r5
 800d27e:	0021      	movs	r1, r4
 800d280:	f7ff ff50 	bl	800d124 <__sflush_r>
 800d284:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d286:	0005      	movs	r5, r0
 800d288:	07db      	lsls	r3, r3, #31
 800d28a:	d4de      	bmi.n	800d24a <_fflush_r+0xe>
 800d28c:	89a3      	ldrh	r3, [r4, #12]
 800d28e:	059b      	lsls	r3, r3, #22
 800d290:	d4db      	bmi.n	800d24a <_fflush_r+0xe>
 800d292:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d294:	f000 f926 	bl	800d4e4 <__retarget_lock_release_recursive>
 800d298:	e7d7      	b.n	800d24a <_fflush_r+0xe>
 800d29a:	4b06      	ldr	r3, [pc, #24]	; (800d2b4 <_fflush_r+0x78>)
 800d29c:	429c      	cmp	r4, r3
 800d29e:	d101      	bne.n	800d2a4 <_fflush_r+0x68>
 800d2a0:	68ac      	ldr	r4, [r5, #8]
 800d2a2:	e7df      	b.n	800d264 <_fflush_r+0x28>
 800d2a4:	4b04      	ldr	r3, [pc, #16]	; (800d2b8 <_fflush_r+0x7c>)
 800d2a6:	429c      	cmp	r4, r3
 800d2a8:	d1dc      	bne.n	800d264 <_fflush_r+0x28>
 800d2aa:	68ec      	ldr	r4, [r5, #12]
 800d2ac:	e7da      	b.n	800d264 <_fflush_r+0x28>
 800d2ae:	46c0      	nop			; (mov r8, r8)
 800d2b0:	0800e464 	.word	0x0800e464
 800d2b4:	0800e484 	.word	0x0800e484
 800d2b8:	0800e444 	.word	0x0800e444

0800d2bc <std>:
 800d2bc:	2300      	movs	r3, #0
 800d2be:	b510      	push	{r4, lr}
 800d2c0:	0004      	movs	r4, r0
 800d2c2:	6003      	str	r3, [r0, #0]
 800d2c4:	6043      	str	r3, [r0, #4]
 800d2c6:	6083      	str	r3, [r0, #8]
 800d2c8:	8181      	strh	r1, [r0, #12]
 800d2ca:	6643      	str	r3, [r0, #100]	; 0x64
 800d2cc:	0019      	movs	r1, r3
 800d2ce:	81c2      	strh	r2, [r0, #14]
 800d2d0:	6103      	str	r3, [r0, #16]
 800d2d2:	6143      	str	r3, [r0, #20]
 800d2d4:	6183      	str	r3, [r0, #24]
 800d2d6:	2208      	movs	r2, #8
 800d2d8:	305c      	adds	r0, #92	; 0x5c
 800d2da:	f7fb fab9 	bl	8008850 <memset>
 800d2de:	4b05      	ldr	r3, [pc, #20]	; (800d2f4 <std+0x38>)
 800d2e0:	6224      	str	r4, [r4, #32]
 800d2e2:	6263      	str	r3, [r4, #36]	; 0x24
 800d2e4:	4b04      	ldr	r3, [pc, #16]	; (800d2f8 <std+0x3c>)
 800d2e6:	62a3      	str	r3, [r4, #40]	; 0x28
 800d2e8:	4b04      	ldr	r3, [pc, #16]	; (800d2fc <std+0x40>)
 800d2ea:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d2ec:	4b04      	ldr	r3, [pc, #16]	; (800d300 <std+0x44>)
 800d2ee:	6323      	str	r3, [r4, #48]	; 0x30
 800d2f0:	bd10      	pop	{r4, pc}
 800d2f2:	46c0      	nop			; (mov r8, r8)
 800d2f4:	080097cd 	.word	0x080097cd
 800d2f8:	080097f9 	.word	0x080097f9
 800d2fc:	08009831 	.word	0x08009831
 800d300:	0800985d 	.word	0x0800985d

0800d304 <_cleanup_r>:
 800d304:	b510      	push	{r4, lr}
 800d306:	4902      	ldr	r1, [pc, #8]	; (800d310 <_cleanup_r+0xc>)
 800d308:	f000 f8ca 	bl	800d4a0 <_fwalk_reent>
 800d30c:	bd10      	pop	{r4, pc}
 800d30e:	46c0      	nop			; (mov r8, r8)
 800d310:	0800d23d 	.word	0x0800d23d

0800d314 <__sfmoreglue>:
 800d314:	b570      	push	{r4, r5, r6, lr}
 800d316:	2568      	movs	r5, #104	; 0x68
 800d318:	1e4a      	subs	r2, r1, #1
 800d31a:	4355      	muls	r5, r2
 800d31c:	000e      	movs	r6, r1
 800d31e:	0029      	movs	r1, r5
 800d320:	3174      	adds	r1, #116	; 0x74
 800d322:	f7fb fb09 	bl	8008938 <_malloc_r>
 800d326:	1e04      	subs	r4, r0, #0
 800d328:	d008      	beq.n	800d33c <__sfmoreglue+0x28>
 800d32a:	2100      	movs	r1, #0
 800d32c:	002a      	movs	r2, r5
 800d32e:	6001      	str	r1, [r0, #0]
 800d330:	6046      	str	r6, [r0, #4]
 800d332:	300c      	adds	r0, #12
 800d334:	60a0      	str	r0, [r4, #8]
 800d336:	3268      	adds	r2, #104	; 0x68
 800d338:	f7fb fa8a 	bl	8008850 <memset>
 800d33c:	0020      	movs	r0, r4
 800d33e:	bd70      	pop	{r4, r5, r6, pc}

0800d340 <__sfp_lock_acquire>:
 800d340:	b510      	push	{r4, lr}
 800d342:	4802      	ldr	r0, [pc, #8]	; (800d34c <__sfp_lock_acquire+0xc>)
 800d344:	f000 f8cd 	bl	800d4e2 <__retarget_lock_acquire_recursive>
 800d348:	bd10      	pop	{r4, pc}
 800d34a:	46c0      	nop			; (mov r8, r8)
 800d34c:	20000a2d 	.word	0x20000a2d

0800d350 <__sfp_lock_release>:
 800d350:	b510      	push	{r4, lr}
 800d352:	4802      	ldr	r0, [pc, #8]	; (800d35c <__sfp_lock_release+0xc>)
 800d354:	f000 f8c6 	bl	800d4e4 <__retarget_lock_release_recursive>
 800d358:	bd10      	pop	{r4, pc}
 800d35a:	46c0      	nop			; (mov r8, r8)
 800d35c:	20000a2d 	.word	0x20000a2d

0800d360 <__sinit_lock_acquire>:
 800d360:	b510      	push	{r4, lr}
 800d362:	4802      	ldr	r0, [pc, #8]	; (800d36c <__sinit_lock_acquire+0xc>)
 800d364:	f000 f8bd 	bl	800d4e2 <__retarget_lock_acquire_recursive>
 800d368:	bd10      	pop	{r4, pc}
 800d36a:	46c0      	nop			; (mov r8, r8)
 800d36c:	20000a2e 	.word	0x20000a2e

0800d370 <__sinit_lock_release>:
 800d370:	b510      	push	{r4, lr}
 800d372:	4802      	ldr	r0, [pc, #8]	; (800d37c <__sinit_lock_release+0xc>)
 800d374:	f000 f8b6 	bl	800d4e4 <__retarget_lock_release_recursive>
 800d378:	bd10      	pop	{r4, pc}
 800d37a:	46c0      	nop			; (mov r8, r8)
 800d37c:	20000a2e 	.word	0x20000a2e

0800d380 <__sinit>:
 800d380:	b513      	push	{r0, r1, r4, lr}
 800d382:	0004      	movs	r4, r0
 800d384:	f7ff ffec 	bl	800d360 <__sinit_lock_acquire>
 800d388:	69a3      	ldr	r3, [r4, #24]
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	d002      	beq.n	800d394 <__sinit+0x14>
 800d38e:	f7ff ffef 	bl	800d370 <__sinit_lock_release>
 800d392:	bd13      	pop	{r0, r1, r4, pc}
 800d394:	64a3      	str	r3, [r4, #72]	; 0x48
 800d396:	64e3      	str	r3, [r4, #76]	; 0x4c
 800d398:	6523      	str	r3, [r4, #80]	; 0x50
 800d39a:	4b13      	ldr	r3, [pc, #76]	; (800d3e8 <__sinit+0x68>)
 800d39c:	4a13      	ldr	r2, [pc, #76]	; (800d3ec <__sinit+0x6c>)
 800d39e:	681b      	ldr	r3, [r3, #0]
 800d3a0:	62a2      	str	r2, [r4, #40]	; 0x28
 800d3a2:	9301      	str	r3, [sp, #4]
 800d3a4:	42a3      	cmp	r3, r4
 800d3a6:	d101      	bne.n	800d3ac <__sinit+0x2c>
 800d3a8:	2301      	movs	r3, #1
 800d3aa:	61a3      	str	r3, [r4, #24]
 800d3ac:	0020      	movs	r0, r4
 800d3ae:	f000 f81f 	bl	800d3f0 <__sfp>
 800d3b2:	6060      	str	r0, [r4, #4]
 800d3b4:	0020      	movs	r0, r4
 800d3b6:	f000 f81b 	bl	800d3f0 <__sfp>
 800d3ba:	60a0      	str	r0, [r4, #8]
 800d3bc:	0020      	movs	r0, r4
 800d3be:	f000 f817 	bl	800d3f0 <__sfp>
 800d3c2:	2200      	movs	r2, #0
 800d3c4:	2104      	movs	r1, #4
 800d3c6:	60e0      	str	r0, [r4, #12]
 800d3c8:	6860      	ldr	r0, [r4, #4]
 800d3ca:	f7ff ff77 	bl	800d2bc <std>
 800d3ce:	2201      	movs	r2, #1
 800d3d0:	2109      	movs	r1, #9
 800d3d2:	68a0      	ldr	r0, [r4, #8]
 800d3d4:	f7ff ff72 	bl	800d2bc <std>
 800d3d8:	2202      	movs	r2, #2
 800d3da:	2112      	movs	r1, #18
 800d3dc:	68e0      	ldr	r0, [r4, #12]
 800d3de:	f7ff ff6d 	bl	800d2bc <std>
 800d3e2:	2301      	movs	r3, #1
 800d3e4:	61a3      	str	r3, [r4, #24]
 800d3e6:	e7d2      	b.n	800d38e <__sinit+0xe>
 800d3e8:	0800dfe8 	.word	0x0800dfe8
 800d3ec:	0800d305 	.word	0x0800d305

0800d3f0 <__sfp>:
 800d3f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d3f2:	0007      	movs	r7, r0
 800d3f4:	f7ff ffa4 	bl	800d340 <__sfp_lock_acquire>
 800d3f8:	4b1f      	ldr	r3, [pc, #124]	; (800d478 <__sfp+0x88>)
 800d3fa:	681e      	ldr	r6, [r3, #0]
 800d3fc:	69b3      	ldr	r3, [r6, #24]
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	d102      	bne.n	800d408 <__sfp+0x18>
 800d402:	0030      	movs	r0, r6
 800d404:	f7ff ffbc 	bl	800d380 <__sinit>
 800d408:	3648      	adds	r6, #72	; 0x48
 800d40a:	68b4      	ldr	r4, [r6, #8]
 800d40c:	6873      	ldr	r3, [r6, #4]
 800d40e:	3b01      	subs	r3, #1
 800d410:	d504      	bpl.n	800d41c <__sfp+0x2c>
 800d412:	6833      	ldr	r3, [r6, #0]
 800d414:	2b00      	cmp	r3, #0
 800d416:	d022      	beq.n	800d45e <__sfp+0x6e>
 800d418:	6836      	ldr	r6, [r6, #0]
 800d41a:	e7f6      	b.n	800d40a <__sfp+0x1a>
 800d41c:	220c      	movs	r2, #12
 800d41e:	5ea5      	ldrsh	r5, [r4, r2]
 800d420:	2d00      	cmp	r5, #0
 800d422:	d11a      	bne.n	800d45a <__sfp+0x6a>
 800d424:	0020      	movs	r0, r4
 800d426:	4b15      	ldr	r3, [pc, #84]	; (800d47c <__sfp+0x8c>)
 800d428:	3058      	adds	r0, #88	; 0x58
 800d42a:	60e3      	str	r3, [r4, #12]
 800d42c:	6665      	str	r5, [r4, #100]	; 0x64
 800d42e:	f000 f857 	bl	800d4e0 <__retarget_lock_init_recursive>
 800d432:	f7ff ff8d 	bl	800d350 <__sfp_lock_release>
 800d436:	0020      	movs	r0, r4
 800d438:	2208      	movs	r2, #8
 800d43a:	0029      	movs	r1, r5
 800d43c:	6025      	str	r5, [r4, #0]
 800d43e:	60a5      	str	r5, [r4, #8]
 800d440:	6065      	str	r5, [r4, #4]
 800d442:	6125      	str	r5, [r4, #16]
 800d444:	6165      	str	r5, [r4, #20]
 800d446:	61a5      	str	r5, [r4, #24]
 800d448:	305c      	adds	r0, #92	; 0x5c
 800d44a:	f7fb fa01 	bl	8008850 <memset>
 800d44e:	6365      	str	r5, [r4, #52]	; 0x34
 800d450:	63a5      	str	r5, [r4, #56]	; 0x38
 800d452:	64a5      	str	r5, [r4, #72]	; 0x48
 800d454:	64e5      	str	r5, [r4, #76]	; 0x4c
 800d456:	0020      	movs	r0, r4
 800d458:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d45a:	3468      	adds	r4, #104	; 0x68
 800d45c:	e7d7      	b.n	800d40e <__sfp+0x1e>
 800d45e:	2104      	movs	r1, #4
 800d460:	0038      	movs	r0, r7
 800d462:	f7ff ff57 	bl	800d314 <__sfmoreglue>
 800d466:	1e04      	subs	r4, r0, #0
 800d468:	6030      	str	r0, [r6, #0]
 800d46a:	d1d5      	bne.n	800d418 <__sfp+0x28>
 800d46c:	f7ff ff70 	bl	800d350 <__sfp_lock_release>
 800d470:	230c      	movs	r3, #12
 800d472:	603b      	str	r3, [r7, #0]
 800d474:	e7ef      	b.n	800d456 <__sfp+0x66>
 800d476:	46c0      	nop			; (mov r8, r8)
 800d478:	0800dfe8 	.word	0x0800dfe8
 800d47c:	ffff0001 	.word	0xffff0001

0800d480 <fiprintf>:
 800d480:	b40e      	push	{r1, r2, r3}
 800d482:	b503      	push	{r0, r1, lr}
 800d484:	0001      	movs	r1, r0
 800d486:	ab03      	add	r3, sp, #12
 800d488:	4804      	ldr	r0, [pc, #16]	; (800d49c <fiprintf+0x1c>)
 800d48a:	cb04      	ldmia	r3!, {r2}
 800d48c:	6800      	ldr	r0, [r0, #0]
 800d48e:	9301      	str	r3, [sp, #4]
 800d490:	f000 f880 	bl	800d594 <_vfiprintf_r>
 800d494:	b002      	add	sp, #8
 800d496:	bc08      	pop	{r3}
 800d498:	b003      	add	sp, #12
 800d49a:	4718      	bx	r3
 800d49c:	20000050 	.word	0x20000050

0800d4a0 <_fwalk_reent>:
 800d4a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d4a2:	0004      	movs	r4, r0
 800d4a4:	0006      	movs	r6, r0
 800d4a6:	2700      	movs	r7, #0
 800d4a8:	9101      	str	r1, [sp, #4]
 800d4aa:	3448      	adds	r4, #72	; 0x48
 800d4ac:	6863      	ldr	r3, [r4, #4]
 800d4ae:	68a5      	ldr	r5, [r4, #8]
 800d4b0:	9300      	str	r3, [sp, #0]
 800d4b2:	9b00      	ldr	r3, [sp, #0]
 800d4b4:	3b01      	subs	r3, #1
 800d4b6:	9300      	str	r3, [sp, #0]
 800d4b8:	d504      	bpl.n	800d4c4 <_fwalk_reent+0x24>
 800d4ba:	6824      	ldr	r4, [r4, #0]
 800d4bc:	2c00      	cmp	r4, #0
 800d4be:	d1f5      	bne.n	800d4ac <_fwalk_reent+0xc>
 800d4c0:	0038      	movs	r0, r7
 800d4c2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d4c4:	89ab      	ldrh	r3, [r5, #12]
 800d4c6:	2b01      	cmp	r3, #1
 800d4c8:	d908      	bls.n	800d4dc <_fwalk_reent+0x3c>
 800d4ca:	220e      	movs	r2, #14
 800d4cc:	5eab      	ldrsh	r3, [r5, r2]
 800d4ce:	3301      	adds	r3, #1
 800d4d0:	d004      	beq.n	800d4dc <_fwalk_reent+0x3c>
 800d4d2:	0029      	movs	r1, r5
 800d4d4:	0030      	movs	r0, r6
 800d4d6:	9b01      	ldr	r3, [sp, #4]
 800d4d8:	4798      	blx	r3
 800d4da:	4307      	orrs	r7, r0
 800d4dc:	3568      	adds	r5, #104	; 0x68
 800d4de:	e7e8      	b.n	800d4b2 <_fwalk_reent+0x12>

0800d4e0 <__retarget_lock_init_recursive>:
 800d4e0:	4770      	bx	lr

0800d4e2 <__retarget_lock_acquire_recursive>:
 800d4e2:	4770      	bx	lr

0800d4e4 <__retarget_lock_release_recursive>:
 800d4e4:	4770      	bx	lr

0800d4e6 <_realloc_r>:
 800d4e6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d4e8:	0007      	movs	r7, r0
 800d4ea:	000e      	movs	r6, r1
 800d4ec:	0014      	movs	r4, r2
 800d4ee:	2900      	cmp	r1, #0
 800d4f0:	d105      	bne.n	800d4fe <_realloc_r+0x18>
 800d4f2:	0011      	movs	r1, r2
 800d4f4:	f7fb fa20 	bl	8008938 <_malloc_r>
 800d4f8:	0005      	movs	r5, r0
 800d4fa:	0028      	movs	r0, r5
 800d4fc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d4fe:	2a00      	cmp	r2, #0
 800d500:	d103      	bne.n	800d50a <_realloc_r+0x24>
 800d502:	f7fb f9ad 	bl	8008860 <_free_r>
 800d506:	0025      	movs	r5, r4
 800d508:	e7f7      	b.n	800d4fa <_realloc_r+0x14>
 800d50a:	f000 fabf 	bl	800da8c <_malloc_usable_size_r>
 800d50e:	9001      	str	r0, [sp, #4]
 800d510:	4284      	cmp	r4, r0
 800d512:	d803      	bhi.n	800d51c <_realloc_r+0x36>
 800d514:	0035      	movs	r5, r6
 800d516:	0843      	lsrs	r3, r0, #1
 800d518:	42a3      	cmp	r3, r4
 800d51a:	d3ee      	bcc.n	800d4fa <_realloc_r+0x14>
 800d51c:	0021      	movs	r1, r4
 800d51e:	0038      	movs	r0, r7
 800d520:	f7fb fa0a 	bl	8008938 <_malloc_r>
 800d524:	1e05      	subs	r5, r0, #0
 800d526:	d0e8      	beq.n	800d4fa <_realloc_r+0x14>
 800d528:	9b01      	ldr	r3, [sp, #4]
 800d52a:	0022      	movs	r2, r4
 800d52c:	429c      	cmp	r4, r3
 800d52e:	d900      	bls.n	800d532 <_realloc_r+0x4c>
 800d530:	001a      	movs	r2, r3
 800d532:	0031      	movs	r1, r6
 800d534:	0028      	movs	r0, r5
 800d536:	f7fb f96f 	bl	8008818 <memcpy>
 800d53a:	0031      	movs	r1, r6
 800d53c:	0038      	movs	r0, r7
 800d53e:	f7fb f98f 	bl	8008860 <_free_r>
 800d542:	e7da      	b.n	800d4fa <_realloc_r+0x14>

0800d544 <__sfputc_r>:
 800d544:	6893      	ldr	r3, [r2, #8]
 800d546:	b510      	push	{r4, lr}
 800d548:	3b01      	subs	r3, #1
 800d54a:	6093      	str	r3, [r2, #8]
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	da04      	bge.n	800d55a <__sfputc_r+0x16>
 800d550:	6994      	ldr	r4, [r2, #24]
 800d552:	42a3      	cmp	r3, r4
 800d554:	db07      	blt.n	800d566 <__sfputc_r+0x22>
 800d556:	290a      	cmp	r1, #10
 800d558:	d005      	beq.n	800d566 <__sfputc_r+0x22>
 800d55a:	6813      	ldr	r3, [r2, #0]
 800d55c:	1c58      	adds	r0, r3, #1
 800d55e:	6010      	str	r0, [r2, #0]
 800d560:	7019      	strb	r1, [r3, #0]
 800d562:	0008      	movs	r0, r1
 800d564:	bd10      	pop	{r4, pc}
 800d566:	f000 f94f 	bl	800d808 <__swbuf_r>
 800d56a:	0001      	movs	r1, r0
 800d56c:	e7f9      	b.n	800d562 <__sfputc_r+0x1e>

0800d56e <__sfputs_r>:
 800d56e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d570:	0006      	movs	r6, r0
 800d572:	000f      	movs	r7, r1
 800d574:	0014      	movs	r4, r2
 800d576:	18d5      	adds	r5, r2, r3
 800d578:	42ac      	cmp	r4, r5
 800d57a:	d101      	bne.n	800d580 <__sfputs_r+0x12>
 800d57c:	2000      	movs	r0, #0
 800d57e:	e007      	b.n	800d590 <__sfputs_r+0x22>
 800d580:	7821      	ldrb	r1, [r4, #0]
 800d582:	003a      	movs	r2, r7
 800d584:	0030      	movs	r0, r6
 800d586:	f7ff ffdd 	bl	800d544 <__sfputc_r>
 800d58a:	3401      	adds	r4, #1
 800d58c:	1c43      	adds	r3, r0, #1
 800d58e:	d1f3      	bne.n	800d578 <__sfputs_r+0xa>
 800d590:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d594 <_vfiprintf_r>:
 800d594:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d596:	b0a1      	sub	sp, #132	; 0x84
 800d598:	0006      	movs	r6, r0
 800d59a:	000c      	movs	r4, r1
 800d59c:	001f      	movs	r7, r3
 800d59e:	9203      	str	r2, [sp, #12]
 800d5a0:	2800      	cmp	r0, #0
 800d5a2:	d004      	beq.n	800d5ae <_vfiprintf_r+0x1a>
 800d5a4:	6983      	ldr	r3, [r0, #24]
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	d101      	bne.n	800d5ae <_vfiprintf_r+0x1a>
 800d5aa:	f7ff fee9 	bl	800d380 <__sinit>
 800d5ae:	4b8e      	ldr	r3, [pc, #568]	; (800d7e8 <_vfiprintf_r+0x254>)
 800d5b0:	429c      	cmp	r4, r3
 800d5b2:	d11c      	bne.n	800d5ee <_vfiprintf_r+0x5a>
 800d5b4:	6874      	ldr	r4, [r6, #4]
 800d5b6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d5b8:	07db      	lsls	r3, r3, #31
 800d5ba:	d405      	bmi.n	800d5c8 <_vfiprintf_r+0x34>
 800d5bc:	89a3      	ldrh	r3, [r4, #12]
 800d5be:	059b      	lsls	r3, r3, #22
 800d5c0:	d402      	bmi.n	800d5c8 <_vfiprintf_r+0x34>
 800d5c2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d5c4:	f7ff ff8d 	bl	800d4e2 <__retarget_lock_acquire_recursive>
 800d5c8:	89a3      	ldrh	r3, [r4, #12]
 800d5ca:	071b      	lsls	r3, r3, #28
 800d5cc:	d502      	bpl.n	800d5d4 <_vfiprintf_r+0x40>
 800d5ce:	6923      	ldr	r3, [r4, #16]
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	d11d      	bne.n	800d610 <_vfiprintf_r+0x7c>
 800d5d4:	0021      	movs	r1, r4
 800d5d6:	0030      	movs	r0, r6
 800d5d8:	f000 f96c 	bl	800d8b4 <__swsetup_r>
 800d5dc:	2800      	cmp	r0, #0
 800d5de:	d017      	beq.n	800d610 <_vfiprintf_r+0x7c>
 800d5e0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d5e2:	07db      	lsls	r3, r3, #31
 800d5e4:	d50d      	bpl.n	800d602 <_vfiprintf_r+0x6e>
 800d5e6:	2001      	movs	r0, #1
 800d5e8:	4240      	negs	r0, r0
 800d5ea:	b021      	add	sp, #132	; 0x84
 800d5ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d5ee:	4b7f      	ldr	r3, [pc, #508]	; (800d7ec <_vfiprintf_r+0x258>)
 800d5f0:	429c      	cmp	r4, r3
 800d5f2:	d101      	bne.n	800d5f8 <_vfiprintf_r+0x64>
 800d5f4:	68b4      	ldr	r4, [r6, #8]
 800d5f6:	e7de      	b.n	800d5b6 <_vfiprintf_r+0x22>
 800d5f8:	4b7d      	ldr	r3, [pc, #500]	; (800d7f0 <_vfiprintf_r+0x25c>)
 800d5fa:	429c      	cmp	r4, r3
 800d5fc:	d1db      	bne.n	800d5b6 <_vfiprintf_r+0x22>
 800d5fe:	68f4      	ldr	r4, [r6, #12]
 800d600:	e7d9      	b.n	800d5b6 <_vfiprintf_r+0x22>
 800d602:	89a3      	ldrh	r3, [r4, #12]
 800d604:	059b      	lsls	r3, r3, #22
 800d606:	d4ee      	bmi.n	800d5e6 <_vfiprintf_r+0x52>
 800d608:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d60a:	f7ff ff6b 	bl	800d4e4 <__retarget_lock_release_recursive>
 800d60e:	e7ea      	b.n	800d5e6 <_vfiprintf_r+0x52>
 800d610:	2300      	movs	r3, #0
 800d612:	ad08      	add	r5, sp, #32
 800d614:	616b      	str	r3, [r5, #20]
 800d616:	3320      	adds	r3, #32
 800d618:	766b      	strb	r3, [r5, #25]
 800d61a:	3310      	adds	r3, #16
 800d61c:	76ab      	strb	r3, [r5, #26]
 800d61e:	9707      	str	r7, [sp, #28]
 800d620:	9f03      	ldr	r7, [sp, #12]
 800d622:	783b      	ldrb	r3, [r7, #0]
 800d624:	2b00      	cmp	r3, #0
 800d626:	d001      	beq.n	800d62c <_vfiprintf_r+0x98>
 800d628:	2b25      	cmp	r3, #37	; 0x25
 800d62a:	d14e      	bne.n	800d6ca <_vfiprintf_r+0x136>
 800d62c:	9b03      	ldr	r3, [sp, #12]
 800d62e:	1afb      	subs	r3, r7, r3
 800d630:	9305      	str	r3, [sp, #20]
 800d632:	9b03      	ldr	r3, [sp, #12]
 800d634:	429f      	cmp	r7, r3
 800d636:	d00d      	beq.n	800d654 <_vfiprintf_r+0xc0>
 800d638:	9b05      	ldr	r3, [sp, #20]
 800d63a:	0021      	movs	r1, r4
 800d63c:	0030      	movs	r0, r6
 800d63e:	9a03      	ldr	r2, [sp, #12]
 800d640:	f7ff ff95 	bl	800d56e <__sfputs_r>
 800d644:	1c43      	adds	r3, r0, #1
 800d646:	d100      	bne.n	800d64a <_vfiprintf_r+0xb6>
 800d648:	e0b5      	b.n	800d7b6 <_vfiprintf_r+0x222>
 800d64a:	696a      	ldr	r2, [r5, #20]
 800d64c:	9b05      	ldr	r3, [sp, #20]
 800d64e:	4694      	mov	ip, r2
 800d650:	4463      	add	r3, ip
 800d652:	616b      	str	r3, [r5, #20]
 800d654:	783b      	ldrb	r3, [r7, #0]
 800d656:	2b00      	cmp	r3, #0
 800d658:	d100      	bne.n	800d65c <_vfiprintf_r+0xc8>
 800d65a:	e0ac      	b.n	800d7b6 <_vfiprintf_r+0x222>
 800d65c:	2201      	movs	r2, #1
 800d65e:	1c7b      	adds	r3, r7, #1
 800d660:	9303      	str	r3, [sp, #12]
 800d662:	2300      	movs	r3, #0
 800d664:	4252      	negs	r2, r2
 800d666:	606a      	str	r2, [r5, #4]
 800d668:	a904      	add	r1, sp, #16
 800d66a:	3254      	adds	r2, #84	; 0x54
 800d66c:	1852      	adds	r2, r2, r1
 800d66e:	602b      	str	r3, [r5, #0]
 800d670:	60eb      	str	r3, [r5, #12]
 800d672:	60ab      	str	r3, [r5, #8]
 800d674:	7013      	strb	r3, [r2, #0]
 800d676:	65ab      	str	r3, [r5, #88]	; 0x58
 800d678:	9b03      	ldr	r3, [sp, #12]
 800d67a:	2205      	movs	r2, #5
 800d67c:	7819      	ldrb	r1, [r3, #0]
 800d67e:	485d      	ldr	r0, [pc, #372]	; (800d7f4 <_vfiprintf_r+0x260>)
 800d680:	f7fe fa40 	bl	800bb04 <memchr>
 800d684:	9b03      	ldr	r3, [sp, #12]
 800d686:	1c5f      	adds	r7, r3, #1
 800d688:	2800      	cmp	r0, #0
 800d68a:	d120      	bne.n	800d6ce <_vfiprintf_r+0x13a>
 800d68c:	682a      	ldr	r2, [r5, #0]
 800d68e:	06d3      	lsls	r3, r2, #27
 800d690:	d504      	bpl.n	800d69c <_vfiprintf_r+0x108>
 800d692:	2353      	movs	r3, #83	; 0x53
 800d694:	a904      	add	r1, sp, #16
 800d696:	185b      	adds	r3, r3, r1
 800d698:	2120      	movs	r1, #32
 800d69a:	7019      	strb	r1, [r3, #0]
 800d69c:	0713      	lsls	r3, r2, #28
 800d69e:	d504      	bpl.n	800d6aa <_vfiprintf_r+0x116>
 800d6a0:	2353      	movs	r3, #83	; 0x53
 800d6a2:	a904      	add	r1, sp, #16
 800d6a4:	185b      	adds	r3, r3, r1
 800d6a6:	212b      	movs	r1, #43	; 0x2b
 800d6a8:	7019      	strb	r1, [r3, #0]
 800d6aa:	9b03      	ldr	r3, [sp, #12]
 800d6ac:	781b      	ldrb	r3, [r3, #0]
 800d6ae:	2b2a      	cmp	r3, #42	; 0x2a
 800d6b0:	d016      	beq.n	800d6e0 <_vfiprintf_r+0x14c>
 800d6b2:	2100      	movs	r1, #0
 800d6b4:	68eb      	ldr	r3, [r5, #12]
 800d6b6:	9f03      	ldr	r7, [sp, #12]
 800d6b8:	783a      	ldrb	r2, [r7, #0]
 800d6ba:	1c78      	adds	r0, r7, #1
 800d6bc:	3a30      	subs	r2, #48	; 0x30
 800d6be:	4684      	mov	ip, r0
 800d6c0:	2a09      	cmp	r2, #9
 800d6c2:	d94f      	bls.n	800d764 <_vfiprintf_r+0x1d0>
 800d6c4:	2900      	cmp	r1, #0
 800d6c6:	d111      	bne.n	800d6ec <_vfiprintf_r+0x158>
 800d6c8:	e017      	b.n	800d6fa <_vfiprintf_r+0x166>
 800d6ca:	3701      	adds	r7, #1
 800d6cc:	e7a9      	b.n	800d622 <_vfiprintf_r+0x8e>
 800d6ce:	4b49      	ldr	r3, [pc, #292]	; (800d7f4 <_vfiprintf_r+0x260>)
 800d6d0:	682a      	ldr	r2, [r5, #0]
 800d6d2:	1ac0      	subs	r0, r0, r3
 800d6d4:	2301      	movs	r3, #1
 800d6d6:	4083      	lsls	r3, r0
 800d6d8:	4313      	orrs	r3, r2
 800d6da:	602b      	str	r3, [r5, #0]
 800d6dc:	9703      	str	r7, [sp, #12]
 800d6de:	e7cb      	b.n	800d678 <_vfiprintf_r+0xe4>
 800d6e0:	9b07      	ldr	r3, [sp, #28]
 800d6e2:	1d19      	adds	r1, r3, #4
 800d6e4:	681b      	ldr	r3, [r3, #0]
 800d6e6:	9107      	str	r1, [sp, #28]
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	db01      	blt.n	800d6f0 <_vfiprintf_r+0x15c>
 800d6ec:	930b      	str	r3, [sp, #44]	; 0x2c
 800d6ee:	e004      	b.n	800d6fa <_vfiprintf_r+0x166>
 800d6f0:	425b      	negs	r3, r3
 800d6f2:	60eb      	str	r3, [r5, #12]
 800d6f4:	2302      	movs	r3, #2
 800d6f6:	4313      	orrs	r3, r2
 800d6f8:	602b      	str	r3, [r5, #0]
 800d6fa:	783b      	ldrb	r3, [r7, #0]
 800d6fc:	2b2e      	cmp	r3, #46	; 0x2e
 800d6fe:	d10a      	bne.n	800d716 <_vfiprintf_r+0x182>
 800d700:	787b      	ldrb	r3, [r7, #1]
 800d702:	2b2a      	cmp	r3, #42	; 0x2a
 800d704:	d137      	bne.n	800d776 <_vfiprintf_r+0x1e2>
 800d706:	9b07      	ldr	r3, [sp, #28]
 800d708:	3702      	adds	r7, #2
 800d70a:	1d1a      	adds	r2, r3, #4
 800d70c:	681b      	ldr	r3, [r3, #0]
 800d70e:	9207      	str	r2, [sp, #28]
 800d710:	2b00      	cmp	r3, #0
 800d712:	db2d      	blt.n	800d770 <_vfiprintf_r+0x1dc>
 800d714:	9309      	str	r3, [sp, #36]	; 0x24
 800d716:	2203      	movs	r2, #3
 800d718:	7839      	ldrb	r1, [r7, #0]
 800d71a:	4837      	ldr	r0, [pc, #220]	; (800d7f8 <_vfiprintf_r+0x264>)
 800d71c:	f7fe f9f2 	bl	800bb04 <memchr>
 800d720:	2800      	cmp	r0, #0
 800d722:	d007      	beq.n	800d734 <_vfiprintf_r+0x1a0>
 800d724:	4b34      	ldr	r3, [pc, #208]	; (800d7f8 <_vfiprintf_r+0x264>)
 800d726:	682a      	ldr	r2, [r5, #0]
 800d728:	1ac0      	subs	r0, r0, r3
 800d72a:	2340      	movs	r3, #64	; 0x40
 800d72c:	4083      	lsls	r3, r0
 800d72e:	4313      	orrs	r3, r2
 800d730:	3701      	adds	r7, #1
 800d732:	602b      	str	r3, [r5, #0]
 800d734:	7839      	ldrb	r1, [r7, #0]
 800d736:	1c7b      	adds	r3, r7, #1
 800d738:	2206      	movs	r2, #6
 800d73a:	4830      	ldr	r0, [pc, #192]	; (800d7fc <_vfiprintf_r+0x268>)
 800d73c:	9303      	str	r3, [sp, #12]
 800d73e:	7629      	strb	r1, [r5, #24]
 800d740:	f7fe f9e0 	bl	800bb04 <memchr>
 800d744:	2800      	cmp	r0, #0
 800d746:	d045      	beq.n	800d7d4 <_vfiprintf_r+0x240>
 800d748:	4b2d      	ldr	r3, [pc, #180]	; (800d800 <_vfiprintf_r+0x26c>)
 800d74a:	2b00      	cmp	r3, #0
 800d74c:	d127      	bne.n	800d79e <_vfiprintf_r+0x20a>
 800d74e:	2207      	movs	r2, #7
 800d750:	9b07      	ldr	r3, [sp, #28]
 800d752:	3307      	adds	r3, #7
 800d754:	4393      	bics	r3, r2
 800d756:	3308      	adds	r3, #8
 800d758:	9307      	str	r3, [sp, #28]
 800d75a:	696b      	ldr	r3, [r5, #20]
 800d75c:	9a04      	ldr	r2, [sp, #16]
 800d75e:	189b      	adds	r3, r3, r2
 800d760:	616b      	str	r3, [r5, #20]
 800d762:	e75d      	b.n	800d620 <_vfiprintf_r+0x8c>
 800d764:	210a      	movs	r1, #10
 800d766:	434b      	muls	r3, r1
 800d768:	4667      	mov	r7, ip
 800d76a:	189b      	adds	r3, r3, r2
 800d76c:	3909      	subs	r1, #9
 800d76e:	e7a3      	b.n	800d6b8 <_vfiprintf_r+0x124>
 800d770:	2301      	movs	r3, #1
 800d772:	425b      	negs	r3, r3
 800d774:	e7ce      	b.n	800d714 <_vfiprintf_r+0x180>
 800d776:	2300      	movs	r3, #0
 800d778:	001a      	movs	r2, r3
 800d77a:	3701      	adds	r7, #1
 800d77c:	606b      	str	r3, [r5, #4]
 800d77e:	7839      	ldrb	r1, [r7, #0]
 800d780:	1c78      	adds	r0, r7, #1
 800d782:	3930      	subs	r1, #48	; 0x30
 800d784:	4684      	mov	ip, r0
 800d786:	2909      	cmp	r1, #9
 800d788:	d903      	bls.n	800d792 <_vfiprintf_r+0x1fe>
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	d0c3      	beq.n	800d716 <_vfiprintf_r+0x182>
 800d78e:	9209      	str	r2, [sp, #36]	; 0x24
 800d790:	e7c1      	b.n	800d716 <_vfiprintf_r+0x182>
 800d792:	230a      	movs	r3, #10
 800d794:	435a      	muls	r2, r3
 800d796:	4667      	mov	r7, ip
 800d798:	1852      	adds	r2, r2, r1
 800d79a:	3b09      	subs	r3, #9
 800d79c:	e7ef      	b.n	800d77e <_vfiprintf_r+0x1ea>
 800d79e:	ab07      	add	r3, sp, #28
 800d7a0:	9300      	str	r3, [sp, #0]
 800d7a2:	0022      	movs	r2, r4
 800d7a4:	0029      	movs	r1, r5
 800d7a6:	0030      	movs	r0, r6
 800d7a8:	4b16      	ldr	r3, [pc, #88]	; (800d804 <_vfiprintf_r+0x270>)
 800d7aa:	f7fb f9e5 	bl	8008b78 <_printf_float>
 800d7ae:	9004      	str	r0, [sp, #16]
 800d7b0:	9b04      	ldr	r3, [sp, #16]
 800d7b2:	3301      	adds	r3, #1
 800d7b4:	d1d1      	bne.n	800d75a <_vfiprintf_r+0x1c6>
 800d7b6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d7b8:	07db      	lsls	r3, r3, #31
 800d7ba:	d405      	bmi.n	800d7c8 <_vfiprintf_r+0x234>
 800d7bc:	89a3      	ldrh	r3, [r4, #12]
 800d7be:	059b      	lsls	r3, r3, #22
 800d7c0:	d402      	bmi.n	800d7c8 <_vfiprintf_r+0x234>
 800d7c2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d7c4:	f7ff fe8e 	bl	800d4e4 <__retarget_lock_release_recursive>
 800d7c8:	89a3      	ldrh	r3, [r4, #12]
 800d7ca:	065b      	lsls	r3, r3, #25
 800d7cc:	d500      	bpl.n	800d7d0 <_vfiprintf_r+0x23c>
 800d7ce:	e70a      	b.n	800d5e6 <_vfiprintf_r+0x52>
 800d7d0:	980d      	ldr	r0, [sp, #52]	; 0x34
 800d7d2:	e70a      	b.n	800d5ea <_vfiprintf_r+0x56>
 800d7d4:	ab07      	add	r3, sp, #28
 800d7d6:	9300      	str	r3, [sp, #0]
 800d7d8:	0022      	movs	r2, r4
 800d7da:	0029      	movs	r1, r5
 800d7dc:	0030      	movs	r0, r6
 800d7de:	4b09      	ldr	r3, [pc, #36]	; (800d804 <_vfiprintf_r+0x270>)
 800d7e0:	f7fb fc7c 	bl	80090dc <_printf_i>
 800d7e4:	e7e3      	b.n	800d7ae <_vfiprintf_r+0x21a>
 800d7e6:	46c0      	nop			; (mov r8, r8)
 800d7e8:	0800e464 	.word	0x0800e464
 800d7ec:	0800e484 	.word	0x0800e484
 800d7f0:	0800e444 	.word	0x0800e444
 800d7f4:	0800e3dc 	.word	0x0800e3dc
 800d7f8:	0800e3e2 	.word	0x0800e3e2
 800d7fc:	0800e3e6 	.word	0x0800e3e6
 800d800:	08008b79 	.word	0x08008b79
 800d804:	0800d56f 	.word	0x0800d56f

0800d808 <__swbuf_r>:
 800d808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d80a:	0005      	movs	r5, r0
 800d80c:	000e      	movs	r6, r1
 800d80e:	0014      	movs	r4, r2
 800d810:	2800      	cmp	r0, #0
 800d812:	d004      	beq.n	800d81e <__swbuf_r+0x16>
 800d814:	6983      	ldr	r3, [r0, #24]
 800d816:	2b00      	cmp	r3, #0
 800d818:	d101      	bne.n	800d81e <__swbuf_r+0x16>
 800d81a:	f7ff fdb1 	bl	800d380 <__sinit>
 800d81e:	4b22      	ldr	r3, [pc, #136]	; (800d8a8 <__swbuf_r+0xa0>)
 800d820:	429c      	cmp	r4, r3
 800d822:	d12e      	bne.n	800d882 <__swbuf_r+0x7a>
 800d824:	686c      	ldr	r4, [r5, #4]
 800d826:	69a3      	ldr	r3, [r4, #24]
 800d828:	60a3      	str	r3, [r4, #8]
 800d82a:	89a3      	ldrh	r3, [r4, #12]
 800d82c:	071b      	lsls	r3, r3, #28
 800d82e:	d532      	bpl.n	800d896 <__swbuf_r+0x8e>
 800d830:	6923      	ldr	r3, [r4, #16]
 800d832:	2b00      	cmp	r3, #0
 800d834:	d02f      	beq.n	800d896 <__swbuf_r+0x8e>
 800d836:	6823      	ldr	r3, [r4, #0]
 800d838:	6922      	ldr	r2, [r4, #16]
 800d83a:	b2f7      	uxtb	r7, r6
 800d83c:	1a98      	subs	r0, r3, r2
 800d83e:	6963      	ldr	r3, [r4, #20]
 800d840:	b2f6      	uxtb	r6, r6
 800d842:	4283      	cmp	r3, r0
 800d844:	dc05      	bgt.n	800d852 <__swbuf_r+0x4a>
 800d846:	0021      	movs	r1, r4
 800d848:	0028      	movs	r0, r5
 800d84a:	f7ff fcf7 	bl	800d23c <_fflush_r>
 800d84e:	2800      	cmp	r0, #0
 800d850:	d127      	bne.n	800d8a2 <__swbuf_r+0x9a>
 800d852:	68a3      	ldr	r3, [r4, #8]
 800d854:	3001      	adds	r0, #1
 800d856:	3b01      	subs	r3, #1
 800d858:	60a3      	str	r3, [r4, #8]
 800d85a:	6823      	ldr	r3, [r4, #0]
 800d85c:	1c5a      	adds	r2, r3, #1
 800d85e:	6022      	str	r2, [r4, #0]
 800d860:	701f      	strb	r7, [r3, #0]
 800d862:	6963      	ldr	r3, [r4, #20]
 800d864:	4283      	cmp	r3, r0
 800d866:	d004      	beq.n	800d872 <__swbuf_r+0x6a>
 800d868:	89a3      	ldrh	r3, [r4, #12]
 800d86a:	07db      	lsls	r3, r3, #31
 800d86c:	d507      	bpl.n	800d87e <__swbuf_r+0x76>
 800d86e:	2e0a      	cmp	r6, #10
 800d870:	d105      	bne.n	800d87e <__swbuf_r+0x76>
 800d872:	0021      	movs	r1, r4
 800d874:	0028      	movs	r0, r5
 800d876:	f7ff fce1 	bl	800d23c <_fflush_r>
 800d87a:	2800      	cmp	r0, #0
 800d87c:	d111      	bne.n	800d8a2 <__swbuf_r+0x9a>
 800d87e:	0030      	movs	r0, r6
 800d880:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d882:	4b0a      	ldr	r3, [pc, #40]	; (800d8ac <__swbuf_r+0xa4>)
 800d884:	429c      	cmp	r4, r3
 800d886:	d101      	bne.n	800d88c <__swbuf_r+0x84>
 800d888:	68ac      	ldr	r4, [r5, #8]
 800d88a:	e7cc      	b.n	800d826 <__swbuf_r+0x1e>
 800d88c:	4b08      	ldr	r3, [pc, #32]	; (800d8b0 <__swbuf_r+0xa8>)
 800d88e:	429c      	cmp	r4, r3
 800d890:	d1c9      	bne.n	800d826 <__swbuf_r+0x1e>
 800d892:	68ec      	ldr	r4, [r5, #12]
 800d894:	e7c7      	b.n	800d826 <__swbuf_r+0x1e>
 800d896:	0021      	movs	r1, r4
 800d898:	0028      	movs	r0, r5
 800d89a:	f000 f80b 	bl	800d8b4 <__swsetup_r>
 800d89e:	2800      	cmp	r0, #0
 800d8a0:	d0c9      	beq.n	800d836 <__swbuf_r+0x2e>
 800d8a2:	2601      	movs	r6, #1
 800d8a4:	4276      	negs	r6, r6
 800d8a6:	e7ea      	b.n	800d87e <__swbuf_r+0x76>
 800d8a8:	0800e464 	.word	0x0800e464
 800d8ac:	0800e484 	.word	0x0800e484
 800d8b0:	0800e444 	.word	0x0800e444

0800d8b4 <__swsetup_r>:
 800d8b4:	4b37      	ldr	r3, [pc, #220]	; (800d994 <__swsetup_r+0xe0>)
 800d8b6:	b570      	push	{r4, r5, r6, lr}
 800d8b8:	681d      	ldr	r5, [r3, #0]
 800d8ba:	0006      	movs	r6, r0
 800d8bc:	000c      	movs	r4, r1
 800d8be:	2d00      	cmp	r5, #0
 800d8c0:	d005      	beq.n	800d8ce <__swsetup_r+0x1a>
 800d8c2:	69ab      	ldr	r3, [r5, #24]
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	d102      	bne.n	800d8ce <__swsetup_r+0x1a>
 800d8c8:	0028      	movs	r0, r5
 800d8ca:	f7ff fd59 	bl	800d380 <__sinit>
 800d8ce:	4b32      	ldr	r3, [pc, #200]	; (800d998 <__swsetup_r+0xe4>)
 800d8d0:	429c      	cmp	r4, r3
 800d8d2:	d10f      	bne.n	800d8f4 <__swsetup_r+0x40>
 800d8d4:	686c      	ldr	r4, [r5, #4]
 800d8d6:	230c      	movs	r3, #12
 800d8d8:	5ee2      	ldrsh	r2, [r4, r3]
 800d8da:	b293      	uxth	r3, r2
 800d8dc:	0711      	lsls	r1, r2, #28
 800d8de:	d42d      	bmi.n	800d93c <__swsetup_r+0x88>
 800d8e0:	06d9      	lsls	r1, r3, #27
 800d8e2:	d411      	bmi.n	800d908 <__swsetup_r+0x54>
 800d8e4:	2309      	movs	r3, #9
 800d8e6:	2001      	movs	r0, #1
 800d8e8:	6033      	str	r3, [r6, #0]
 800d8ea:	3337      	adds	r3, #55	; 0x37
 800d8ec:	4313      	orrs	r3, r2
 800d8ee:	81a3      	strh	r3, [r4, #12]
 800d8f0:	4240      	negs	r0, r0
 800d8f2:	bd70      	pop	{r4, r5, r6, pc}
 800d8f4:	4b29      	ldr	r3, [pc, #164]	; (800d99c <__swsetup_r+0xe8>)
 800d8f6:	429c      	cmp	r4, r3
 800d8f8:	d101      	bne.n	800d8fe <__swsetup_r+0x4a>
 800d8fa:	68ac      	ldr	r4, [r5, #8]
 800d8fc:	e7eb      	b.n	800d8d6 <__swsetup_r+0x22>
 800d8fe:	4b28      	ldr	r3, [pc, #160]	; (800d9a0 <__swsetup_r+0xec>)
 800d900:	429c      	cmp	r4, r3
 800d902:	d1e8      	bne.n	800d8d6 <__swsetup_r+0x22>
 800d904:	68ec      	ldr	r4, [r5, #12]
 800d906:	e7e6      	b.n	800d8d6 <__swsetup_r+0x22>
 800d908:	075b      	lsls	r3, r3, #29
 800d90a:	d513      	bpl.n	800d934 <__swsetup_r+0x80>
 800d90c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d90e:	2900      	cmp	r1, #0
 800d910:	d008      	beq.n	800d924 <__swsetup_r+0x70>
 800d912:	0023      	movs	r3, r4
 800d914:	3344      	adds	r3, #68	; 0x44
 800d916:	4299      	cmp	r1, r3
 800d918:	d002      	beq.n	800d920 <__swsetup_r+0x6c>
 800d91a:	0030      	movs	r0, r6
 800d91c:	f7fa ffa0 	bl	8008860 <_free_r>
 800d920:	2300      	movs	r3, #0
 800d922:	6363      	str	r3, [r4, #52]	; 0x34
 800d924:	2224      	movs	r2, #36	; 0x24
 800d926:	89a3      	ldrh	r3, [r4, #12]
 800d928:	4393      	bics	r3, r2
 800d92a:	81a3      	strh	r3, [r4, #12]
 800d92c:	2300      	movs	r3, #0
 800d92e:	6063      	str	r3, [r4, #4]
 800d930:	6923      	ldr	r3, [r4, #16]
 800d932:	6023      	str	r3, [r4, #0]
 800d934:	2308      	movs	r3, #8
 800d936:	89a2      	ldrh	r2, [r4, #12]
 800d938:	4313      	orrs	r3, r2
 800d93a:	81a3      	strh	r3, [r4, #12]
 800d93c:	6923      	ldr	r3, [r4, #16]
 800d93e:	2b00      	cmp	r3, #0
 800d940:	d10b      	bne.n	800d95a <__swsetup_r+0xa6>
 800d942:	21a0      	movs	r1, #160	; 0xa0
 800d944:	2280      	movs	r2, #128	; 0x80
 800d946:	89a3      	ldrh	r3, [r4, #12]
 800d948:	0089      	lsls	r1, r1, #2
 800d94a:	0092      	lsls	r2, r2, #2
 800d94c:	400b      	ands	r3, r1
 800d94e:	4293      	cmp	r3, r2
 800d950:	d003      	beq.n	800d95a <__swsetup_r+0xa6>
 800d952:	0021      	movs	r1, r4
 800d954:	0030      	movs	r0, r6
 800d956:	f000 f855 	bl	800da04 <__smakebuf_r>
 800d95a:	220c      	movs	r2, #12
 800d95c:	5ea3      	ldrsh	r3, [r4, r2]
 800d95e:	2001      	movs	r0, #1
 800d960:	001a      	movs	r2, r3
 800d962:	b299      	uxth	r1, r3
 800d964:	4002      	ands	r2, r0
 800d966:	4203      	tst	r3, r0
 800d968:	d00f      	beq.n	800d98a <__swsetup_r+0xd6>
 800d96a:	2200      	movs	r2, #0
 800d96c:	60a2      	str	r2, [r4, #8]
 800d96e:	6962      	ldr	r2, [r4, #20]
 800d970:	4252      	negs	r2, r2
 800d972:	61a2      	str	r2, [r4, #24]
 800d974:	2000      	movs	r0, #0
 800d976:	6922      	ldr	r2, [r4, #16]
 800d978:	4282      	cmp	r2, r0
 800d97a:	d1ba      	bne.n	800d8f2 <__swsetup_r+0x3e>
 800d97c:	060a      	lsls	r2, r1, #24
 800d97e:	d5b8      	bpl.n	800d8f2 <__swsetup_r+0x3e>
 800d980:	2240      	movs	r2, #64	; 0x40
 800d982:	4313      	orrs	r3, r2
 800d984:	81a3      	strh	r3, [r4, #12]
 800d986:	3801      	subs	r0, #1
 800d988:	e7b3      	b.n	800d8f2 <__swsetup_r+0x3e>
 800d98a:	0788      	lsls	r0, r1, #30
 800d98c:	d400      	bmi.n	800d990 <__swsetup_r+0xdc>
 800d98e:	6962      	ldr	r2, [r4, #20]
 800d990:	60a2      	str	r2, [r4, #8]
 800d992:	e7ef      	b.n	800d974 <__swsetup_r+0xc0>
 800d994:	20000050 	.word	0x20000050
 800d998:	0800e464 	.word	0x0800e464
 800d99c:	0800e484 	.word	0x0800e484
 800d9a0:	0800e444 	.word	0x0800e444

0800d9a4 <abort>:
 800d9a4:	2006      	movs	r0, #6
 800d9a6:	b510      	push	{r4, lr}
 800d9a8:	f000 f8a2 	bl	800daf0 <raise>
 800d9ac:	2001      	movs	r0, #1
 800d9ae:	f7f7 f923 	bl	8004bf8 <_exit>
	...

0800d9b4 <__swhatbuf_r>:
 800d9b4:	b570      	push	{r4, r5, r6, lr}
 800d9b6:	000e      	movs	r6, r1
 800d9b8:	001d      	movs	r5, r3
 800d9ba:	230e      	movs	r3, #14
 800d9bc:	5ec9      	ldrsh	r1, [r1, r3]
 800d9be:	0014      	movs	r4, r2
 800d9c0:	b096      	sub	sp, #88	; 0x58
 800d9c2:	2900      	cmp	r1, #0
 800d9c4:	da08      	bge.n	800d9d8 <__swhatbuf_r+0x24>
 800d9c6:	220c      	movs	r2, #12
 800d9c8:	5eb3      	ldrsh	r3, [r6, r2]
 800d9ca:	2200      	movs	r2, #0
 800d9cc:	602a      	str	r2, [r5, #0]
 800d9ce:	061b      	lsls	r3, r3, #24
 800d9d0:	d411      	bmi.n	800d9f6 <__swhatbuf_r+0x42>
 800d9d2:	2380      	movs	r3, #128	; 0x80
 800d9d4:	00db      	lsls	r3, r3, #3
 800d9d6:	e00f      	b.n	800d9f8 <__swhatbuf_r+0x44>
 800d9d8:	466a      	mov	r2, sp
 800d9da:	f000 f8a9 	bl	800db30 <_fstat_r>
 800d9de:	2800      	cmp	r0, #0
 800d9e0:	dbf1      	blt.n	800d9c6 <__swhatbuf_r+0x12>
 800d9e2:	23f0      	movs	r3, #240	; 0xf0
 800d9e4:	9901      	ldr	r1, [sp, #4]
 800d9e6:	021b      	lsls	r3, r3, #8
 800d9e8:	4019      	ands	r1, r3
 800d9ea:	4b05      	ldr	r3, [pc, #20]	; (800da00 <__swhatbuf_r+0x4c>)
 800d9ec:	18c9      	adds	r1, r1, r3
 800d9ee:	424b      	negs	r3, r1
 800d9f0:	4159      	adcs	r1, r3
 800d9f2:	6029      	str	r1, [r5, #0]
 800d9f4:	e7ed      	b.n	800d9d2 <__swhatbuf_r+0x1e>
 800d9f6:	2340      	movs	r3, #64	; 0x40
 800d9f8:	2000      	movs	r0, #0
 800d9fa:	6023      	str	r3, [r4, #0]
 800d9fc:	b016      	add	sp, #88	; 0x58
 800d9fe:	bd70      	pop	{r4, r5, r6, pc}
 800da00:	ffffe000 	.word	0xffffe000

0800da04 <__smakebuf_r>:
 800da04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800da06:	2602      	movs	r6, #2
 800da08:	898b      	ldrh	r3, [r1, #12]
 800da0a:	0005      	movs	r5, r0
 800da0c:	000c      	movs	r4, r1
 800da0e:	4233      	tst	r3, r6
 800da10:	d006      	beq.n	800da20 <__smakebuf_r+0x1c>
 800da12:	0023      	movs	r3, r4
 800da14:	3347      	adds	r3, #71	; 0x47
 800da16:	6023      	str	r3, [r4, #0]
 800da18:	6123      	str	r3, [r4, #16]
 800da1a:	2301      	movs	r3, #1
 800da1c:	6163      	str	r3, [r4, #20]
 800da1e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800da20:	466a      	mov	r2, sp
 800da22:	ab01      	add	r3, sp, #4
 800da24:	f7ff ffc6 	bl	800d9b4 <__swhatbuf_r>
 800da28:	9900      	ldr	r1, [sp, #0]
 800da2a:	0007      	movs	r7, r0
 800da2c:	0028      	movs	r0, r5
 800da2e:	f7fa ff83 	bl	8008938 <_malloc_r>
 800da32:	2800      	cmp	r0, #0
 800da34:	d108      	bne.n	800da48 <__smakebuf_r+0x44>
 800da36:	220c      	movs	r2, #12
 800da38:	5ea3      	ldrsh	r3, [r4, r2]
 800da3a:	059a      	lsls	r2, r3, #22
 800da3c:	d4ef      	bmi.n	800da1e <__smakebuf_r+0x1a>
 800da3e:	2203      	movs	r2, #3
 800da40:	4393      	bics	r3, r2
 800da42:	431e      	orrs	r6, r3
 800da44:	81a6      	strh	r6, [r4, #12]
 800da46:	e7e4      	b.n	800da12 <__smakebuf_r+0xe>
 800da48:	4b0f      	ldr	r3, [pc, #60]	; (800da88 <__smakebuf_r+0x84>)
 800da4a:	62ab      	str	r3, [r5, #40]	; 0x28
 800da4c:	2380      	movs	r3, #128	; 0x80
 800da4e:	89a2      	ldrh	r2, [r4, #12]
 800da50:	6020      	str	r0, [r4, #0]
 800da52:	4313      	orrs	r3, r2
 800da54:	81a3      	strh	r3, [r4, #12]
 800da56:	9b00      	ldr	r3, [sp, #0]
 800da58:	6120      	str	r0, [r4, #16]
 800da5a:	6163      	str	r3, [r4, #20]
 800da5c:	9b01      	ldr	r3, [sp, #4]
 800da5e:	2b00      	cmp	r3, #0
 800da60:	d00d      	beq.n	800da7e <__smakebuf_r+0x7a>
 800da62:	0028      	movs	r0, r5
 800da64:	230e      	movs	r3, #14
 800da66:	5ee1      	ldrsh	r1, [r4, r3]
 800da68:	f000 f874 	bl	800db54 <_isatty_r>
 800da6c:	2800      	cmp	r0, #0
 800da6e:	d006      	beq.n	800da7e <__smakebuf_r+0x7a>
 800da70:	2203      	movs	r2, #3
 800da72:	89a3      	ldrh	r3, [r4, #12]
 800da74:	4393      	bics	r3, r2
 800da76:	001a      	movs	r2, r3
 800da78:	2301      	movs	r3, #1
 800da7a:	4313      	orrs	r3, r2
 800da7c:	81a3      	strh	r3, [r4, #12]
 800da7e:	89a0      	ldrh	r0, [r4, #12]
 800da80:	4307      	orrs	r7, r0
 800da82:	81a7      	strh	r7, [r4, #12]
 800da84:	e7cb      	b.n	800da1e <__smakebuf_r+0x1a>
 800da86:	46c0      	nop			; (mov r8, r8)
 800da88:	0800d305 	.word	0x0800d305

0800da8c <_malloc_usable_size_r>:
 800da8c:	1f0b      	subs	r3, r1, #4
 800da8e:	681b      	ldr	r3, [r3, #0]
 800da90:	1f18      	subs	r0, r3, #4
 800da92:	2b00      	cmp	r3, #0
 800da94:	da01      	bge.n	800da9a <_malloc_usable_size_r+0xe>
 800da96:	580b      	ldr	r3, [r1, r0]
 800da98:	18c0      	adds	r0, r0, r3
 800da9a:	4770      	bx	lr

0800da9c <_raise_r>:
 800da9c:	b570      	push	{r4, r5, r6, lr}
 800da9e:	0004      	movs	r4, r0
 800daa0:	000d      	movs	r5, r1
 800daa2:	291f      	cmp	r1, #31
 800daa4:	d904      	bls.n	800dab0 <_raise_r+0x14>
 800daa6:	2316      	movs	r3, #22
 800daa8:	6003      	str	r3, [r0, #0]
 800daaa:	2001      	movs	r0, #1
 800daac:	4240      	negs	r0, r0
 800daae:	bd70      	pop	{r4, r5, r6, pc}
 800dab0:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	d004      	beq.n	800dac0 <_raise_r+0x24>
 800dab6:	008a      	lsls	r2, r1, #2
 800dab8:	189b      	adds	r3, r3, r2
 800daba:	681a      	ldr	r2, [r3, #0]
 800dabc:	2a00      	cmp	r2, #0
 800dabe:	d108      	bne.n	800dad2 <_raise_r+0x36>
 800dac0:	0020      	movs	r0, r4
 800dac2:	f000 f831 	bl	800db28 <_getpid_r>
 800dac6:	002a      	movs	r2, r5
 800dac8:	0001      	movs	r1, r0
 800daca:	0020      	movs	r0, r4
 800dacc:	f000 f81a 	bl	800db04 <_kill_r>
 800dad0:	e7ed      	b.n	800daae <_raise_r+0x12>
 800dad2:	2000      	movs	r0, #0
 800dad4:	2a01      	cmp	r2, #1
 800dad6:	d0ea      	beq.n	800daae <_raise_r+0x12>
 800dad8:	1c51      	adds	r1, r2, #1
 800dada:	d103      	bne.n	800dae4 <_raise_r+0x48>
 800dadc:	2316      	movs	r3, #22
 800dade:	3001      	adds	r0, #1
 800dae0:	6023      	str	r3, [r4, #0]
 800dae2:	e7e4      	b.n	800daae <_raise_r+0x12>
 800dae4:	2400      	movs	r4, #0
 800dae6:	0028      	movs	r0, r5
 800dae8:	601c      	str	r4, [r3, #0]
 800daea:	4790      	blx	r2
 800daec:	0020      	movs	r0, r4
 800daee:	e7de      	b.n	800daae <_raise_r+0x12>

0800daf0 <raise>:
 800daf0:	b510      	push	{r4, lr}
 800daf2:	4b03      	ldr	r3, [pc, #12]	; (800db00 <raise+0x10>)
 800daf4:	0001      	movs	r1, r0
 800daf6:	6818      	ldr	r0, [r3, #0]
 800daf8:	f7ff ffd0 	bl	800da9c <_raise_r>
 800dafc:	bd10      	pop	{r4, pc}
 800dafe:	46c0      	nop			; (mov r8, r8)
 800db00:	20000050 	.word	0x20000050

0800db04 <_kill_r>:
 800db04:	2300      	movs	r3, #0
 800db06:	b570      	push	{r4, r5, r6, lr}
 800db08:	4d06      	ldr	r5, [pc, #24]	; (800db24 <_kill_r+0x20>)
 800db0a:	0004      	movs	r4, r0
 800db0c:	0008      	movs	r0, r1
 800db0e:	0011      	movs	r1, r2
 800db10:	602b      	str	r3, [r5, #0]
 800db12:	f7f7 f861 	bl	8004bd8 <_kill>
 800db16:	1c43      	adds	r3, r0, #1
 800db18:	d103      	bne.n	800db22 <_kill_r+0x1e>
 800db1a:	682b      	ldr	r3, [r5, #0]
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	d000      	beq.n	800db22 <_kill_r+0x1e>
 800db20:	6023      	str	r3, [r4, #0]
 800db22:	bd70      	pop	{r4, r5, r6, pc}
 800db24:	20000a28 	.word	0x20000a28

0800db28 <_getpid_r>:
 800db28:	b510      	push	{r4, lr}
 800db2a:	f7f7 f84f 	bl	8004bcc <_getpid>
 800db2e:	bd10      	pop	{r4, pc}

0800db30 <_fstat_r>:
 800db30:	2300      	movs	r3, #0
 800db32:	b570      	push	{r4, r5, r6, lr}
 800db34:	4d06      	ldr	r5, [pc, #24]	; (800db50 <_fstat_r+0x20>)
 800db36:	0004      	movs	r4, r0
 800db38:	0008      	movs	r0, r1
 800db3a:	0011      	movs	r1, r2
 800db3c:	602b      	str	r3, [r5, #0]
 800db3e:	f7f7 f8aa 	bl	8004c96 <_fstat>
 800db42:	1c43      	adds	r3, r0, #1
 800db44:	d103      	bne.n	800db4e <_fstat_r+0x1e>
 800db46:	682b      	ldr	r3, [r5, #0]
 800db48:	2b00      	cmp	r3, #0
 800db4a:	d000      	beq.n	800db4e <_fstat_r+0x1e>
 800db4c:	6023      	str	r3, [r4, #0]
 800db4e:	bd70      	pop	{r4, r5, r6, pc}
 800db50:	20000a28 	.word	0x20000a28

0800db54 <_isatty_r>:
 800db54:	2300      	movs	r3, #0
 800db56:	b570      	push	{r4, r5, r6, lr}
 800db58:	4d06      	ldr	r5, [pc, #24]	; (800db74 <_isatty_r+0x20>)
 800db5a:	0004      	movs	r4, r0
 800db5c:	0008      	movs	r0, r1
 800db5e:	602b      	str	r3, [r5, #0]
 800db60:	f7f7 f8a7 	bl	8004cb2 <_isatty>
 800db64:	1c43      	adds	r3, r0, #1
 800db66:	d103      	bne.n	800db70 <_isatty_r+0x1c>
 800db68:	682b      	ldr	r3, [r5, #0]
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	d000      	beq.n	800db70 <_isatty_r+0x1c>
 800db6e:	6023      	str	r3, [r4, #0]
 800db70:	bd70      	pop	{r4, r5, r6, pc}
 800db72:	46c0      	nop			; (mov r8, r8)
 800db74:	20000a28 	.word	0x20000a28

0800db78 <_init>:
 800db78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db7a:	46c0      	nop			; (mov r8, r8)
 800db7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800db7e:	bc08      	pop	{r3}
 800db80:	469e      	mov	lr, r3
 800db82:	4770      	bx	lr

0800db84 <_fini>:
 800db84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db86:	46c0      	nop			; (mov r8, r8)
 800db88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800db8a:	bc08      	pop	{r3}
 800db8c:	469e      	mov	lr, r3
 800db8e:	4770      	bx	lr
