
MotoTracer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005054  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002f0  0800510c  0800510c  0001510c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080053fc  080053fc  000200a4  2**0
                  CONTENTS
  4 .ARM          00000000  080053fc  080053fc  000200a4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080053fc  080053fc  000200a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080053fc  080053fc  000153fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005400  08005400  00015400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a4  20000000  08005404  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000728  200000a4  080054a8  000200a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200007cc  080054a8  000207cc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b9e9  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d5c  00000000  00000000  0002bab5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000878  00000000  00000000  0002d818  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007c0  00000000  00000000  0002e090  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015550  00000000  00000000  0002e850  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b5f1  00000000  00000000  00043da0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000842eb  00000000  00000000  0004f391  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d367c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002694  00000000  00000000  000d36cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	200000a4 	.word	0x200000a4
 80000d8:	00000000 	.word	0x00000000
 80000dc:	080050f4 	.word	0x080050f4

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	200000a8 	.word	0x200000a8
 80000fc:	080050f4 	.word	0x080050f4

08000100 <strcmp>:
 8000100:	7802      	ldrb	r2, [r0, #0]
 8000102:	780b      	ldrb	r3, [r1, #0]
 8000104:	2a00      	cmp	r2, #0
 8000106:	d003      	beq.n	8000110 <strcmp+0x10>
 8000108:	3001      	adds	r0, #1
 800010a:	3101      	adds	r1, #1
 800010c:	429a      	cmp	r2, r3
 800010e:	d0f7      	beq.n	8000100 <strcmp>
 8000110:	1ad0      	subs	r0, r2, r3
 8000112:	4770      	bx	lr

08000114 <strlen>:
 8000114:	2300      	movs	r3, #0
 8000116:	5cc2      	ldrb	r2, [r0, r3]
 8000118:	3301      	adds	r3, #1
 800011a:	2a00      	cmp	r2, #0
 800011c:	d1fb      	bne.n	8000116 <strlen+0x2>
 800011e:	1e58      	subs	r0, r3, #1
 8000120:	4770      	bx	lr
	...

08000124 <__gnu_thumb1_case_shi>:
 8000124:	b403      	push	{r0, r1}
 8000126:	4671      	mov	r1, lr
 8000128:	0849      	lsrs	r1, r1, #1
 800012a:	0040      	lsls	r0, r0, #1
 800012c:	0049      	lsls	r1, r1, #1
 800012e:	5e09      	ldrsh	r1, [r1, r0]
 8000130:	0049      	lsls	r1, r1, #1
 8000132:	448e      	add	lr, r1
 8000134:	bc03      	pop	{r0, r1}
 8000136:	4770      	bx	lr

08000138 <__udivsi3>:
 8000138:	2200      	movs	r2, #0
 800013a:	0843      	lsrs	r3, r0, #1
 800013c:	428b      	cmp	r3, r1
 800013e:	d374      	bcc.n	800022a <__udivsi3+0xf2>
 8000140:	0903      	lsrs	r3, r0, #4
 8000142:	428b      	cmp	r3, r1
 8000144:	d35f      	bcc.n	8000206 <__udivsi3+0xce>
 8000146:	0a03      	lsrs	r3, r0, #8
 8000148:	428b      	cmp	r3, r1
 800014a:	d344      	bcc.n	80001d6 <__udivsi3+0x9e>
 800014c:	0b03      	lsrs	r3, r0, #12
 800014e:	428b      	cmp	r3, r1
 8000150:	d328      	bcc.n	80001a4 <__udivsi3+0x6c>
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d30d      	bcc.n	8000174 <__udivsi3+0x3c>
 8000158:	22ff      	movs	r2, #255	; 0xff
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	ba12      	rev	r2, r2
 800015e:	0c03      	lsrs	r3, r0, #16
 8000160:	428b      	cmp	r3, r1
 8000162:	d302      	bcc.n	800016a <__udivsi3+0x32>
 8000164:	1212      	asrs	r2, r2, #8
 8000166:	0209      	lsls	r1, r1, #8
 8000168:	d065      	beq.n	8000236 <__udivsi3+0xfe>
 800016a:	0b03      	lsrs	r3, r0, #12
 800016c:	428b      	cmp	r3, r1
 800016e:	d319      	bcc.n	80001a4 <__udivsi3+0x6c>
 8000170:	e000      	b.n	8000174 <__udivsi3+0x3c>
 8000172:	0a09      	lsrs	r1, r1, #8
 8000174:	0bc3      	lsrs	r3, r0, #15
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x46>
 800017a:	03cb      	lsls	r3, r1, #15
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b83      	lsrs	r3, r0, #14
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x52>
 8000186:	038b      	lsls	r3, r1, #14
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b43      	lsrs	r3, r0, #13
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x5e>
 8000192:	034b      	lsls	r3, r1, #13
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0b03      	lsrs	r3, r0, #12
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x6a>
 800019e:	030b      	lsls	r3, r1, #12
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0ac3      	lsrs	r3, r0, #11
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x76>
 80001aa:	02cb      	lsls	r3, r1, #11
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a83      	lsrs	r3, r0, #10
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x82>
 80001b6:	028b      	lsls	r3, r1, #10
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a43      	lsrs	r3, r0, #9
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x8e>
 80001c2:	024b      	lsls	r3, r1, #9
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	0a03      	lsrs	r3, r0, #8
 80001ca:	428b      	cmp	r3, r1
 80001cc:	d301      	bcc.n	80001d2 <__udivsi3+0x9a>
 80001ce:	020b      	lsls	r3, r1, #8
 80001d0:	1ac0      	subs	r0, r0, r3
 80001d2:	4152      	adcs	r2, r2
 80001d4:	d2cd      	bcs.n	8000172 <__udivsi3+0x3a>
 80001d6:	09c3      	lsrs	r3, r0, #7
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xa8>
 80001dc:	01cb      	lsls	r3, r1, #7
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0983      	lsrs	r3, r0, #6
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xb4>
 80001e8:	018b      	lsls	r3, r1, #6
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0943      	lsrs	r3, r0, #5
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xc0>
 80001f4:	014b      	lsls	r3, r1, #5
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0903      	lsrs	r3, r0, #4
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xcc>
 8000200:	010b      	lsls	r3, r1, #4
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	08c3      	lsrs	r3, r0, #3
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xd8>
 800020c:	00cb      	lsls	r3, r1, #3
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0883      	lsrs	r3, r0, #2
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xe4>
 8000218:	008b      	lsls	r3, r1, #2
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	0843      	lsrs	r3, r0, #1
 8000220:	428b      	cmp	r3, r1
 8000222:	d301      	bcc.n	8000228 <__udivsi3+0xf0>
 8000224:	004b      	lsls	r3, r1, #1
 8000226:	1ac0      	subs	r0, r0, r3
 8000228:	4152      	adcs	r2, r2
 800022a:	1a41      	subs	r1, r0, r1
 800022c:	d200      	bcs.n	8000230 <__udivsi3+0xf8>
 800022e:	4601      	mov	r1, r0
 8000230:	4152      	adcs	r2, r2
 8000232:	4610      	mov	r0, r2
 8000234:	4770      	bx	lr
 8000236:	e7ff      	b.n	8000238 <__udivsi3+0x100>
 8000238:	b501      	push	{r0, lr}
 800023a:	2000      	movs	r0, #0
 800023c:	f000 f8f0 	bl	8000420 <__aeabi_idiv0>
 8000240:	bd02      	pop	{r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <__aeabi_uidivmod>:
 8000244:	2900      	cmp	r1, #0
 8000246:	d0f7      	beq.n	8000238 <__udivsi3+0x100>
 8000248:	e776      	b.n	8000138 <__udivsi3>
 800024a:	4770      	bx	lr

0800024c <__divsi3>:
 800024c:	4603      	mov	r3, r0
 800024e:	430b      	orrs	r3, r1
 8000250:	d47f      	bmi.n	8000352 <__divsi3+0x106>
 8000252:	2200      	movs	r2, #0
 8000254:	0843      	lsrs	r3, r0, #1
 8000256:	428b      	cmp	r3, r1
 8000258:	d374      	bcc.n	8000344 <__divsi3+0xf8>
 800025a:	0903      	lsrs	r3, r0, #4
 800025c:	428b      	cmp	r3, r1
 800025e:	d35f      	bcc.n	8000320 <__divsi3+0xd4>
 8000260:	0a03      	lsrs	r3, r0, #8
 8000262:	428b      	cmp	r3, r1
 8000264:	d344      	bcc.n	80002f0 <__divsi3+0xa4>
 8000266:	0b03      	lsrs	r3, r0, #12
 8000268:	428b      	cmp	r3, r1
 800026a:	d328      	bcc.n	80002be <__divsi3+0x72>
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d30d      	bcc.n	800028e <__divsi3+0x42>
 8000272:	22ff      	movs	r2, #255	; 0xff
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	ba12      	rev	r2, r2
 8000278:	0c03      	lsrs	r3, r0, #16
 800027a:	428b      	cmp	r3, r1
 800027c:	d302      	bcc.n	8000284 <__divsi3+0x38>
 800027e:	1212      	asrs	r2, r2, #8
 8000280:	0209      	lsls	r1, r1, #8
 8000282:	d065      	beq.n	8000350 <__divsi3+0x104>
 8000284:	0b03      	lsrs	r3, r0, #12
 8000286:	428b      	cmp	r3, r1
 8000288:	d319      	bcc.n	80002be <__divsi3+0x72>
 800028a:	e000      	b.n	800028e <__divsi3+0x42>
 800028c:	0a09      	lsrs	r1, r1, #8
 800028e:	0bc3      	lsrs	r3, r0, #15
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x4c>
 8000294:	03cb      	lsls	r3, r1, #15
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b83      	lsrs	r3, r0, #14
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x58>
 80002a0:	038b      	lsls	r3, r1, #14
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b43      	lsrs	r3, r0, #13
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x64>
 80002ac:	034b      	lsls	r3, r1, #13
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0b03      	lsrs	r3, r0, #12
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x70>
 80002b8:	030b      	lsls	r3, r1, #12
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0ac3      	lsrs	r3, r0, #11
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x7c>
 80002c4:	02cb      	lsls	r3, r1, #11
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a83      	lsrs	r3, r0, #10
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x88>
 80002d0:	028b      	lsls	r3, r1, #10
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a43      	lsrs	r3, r0, #9
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0x94>
 80002dc:	024b      	lsls	r3, r1, #9
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	0a03      	lsrs	r3, r0, #8
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d301      	bcc.n	80002ec <__divsi3+0xa0>
 80002e8:	020b      	lsls	r3, r1, #8
 80002ea:	1ac0      	subs	r0, r0, r3
 80002ec:	4152      	adcs	r2, r2
 80002ee:	d2cd      	bcs.n	800028c <__divsi3+0x40>
 80002f0:	09c3      	lsrs	r3, r0, #7
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xae>
 80002f6:	01cb      	lsls	r3, r1, #7
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0983      	lsrs	r3, r0, #6
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xba>
 8000302:	018b      	lsls	r3, r1, #6
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0943      	lsrs	r3, r0, #5
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xc6>
 800030e:	014b      	lsls	r3, r1, #5
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0903      	lsrs	r3, r0, #4
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xd2>
 800031a:	010b      	lsls	r3, r1, #4
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	08c3      	lsrs	r3, r0, #3
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xde>
 8000326:	00cb      	lsls	r3, r1, #3
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0883      	lsrs	r3, r0, #2
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xea>
 8000332:	008b      	lsls	r3, r1, #2
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	0843      	lsrs	r3, r0, #1
 800033a:	428b      	cmp	r3, r1
 800033c:	d301      	bcc.n	8000342 <__divsi3+0xf6>
 800033e:	004b      	lsls	r3, r1, #1
 8000340:	1ac0      	subs	r0, r0, r3
 8000342:	4152      	adcs	r2, r2
 8000344:	1a41      	subs	r1, r0, r1
 8000346:	d200      	bcs.n	800034a <__divsi3+0xfe>
 8000348:	4601      	mov	r1, r0
 800034a:	4152      	adcs	r2, r2
 800034c:	4610      	mov	r0, r2
 800034e:	4770      	bx	lr
 8000350:	e05d      	b.n	800040e <__divsi3+0x1c2>
 8000352:	0fca      	lsrs	r2, r1, #31
 8000354:	d000      	beq.n	8000358 <__divsi3+0x10c>
 8000356:	4249      	negs	r1, r1
 8000358:	1003      	asrs	r3, r0, #32
 800035a:	d300      	bcc.n	800035e <__divsi3+0x112>
 800035c:	4240      	negs	r0, r0
 800035e:	4053      	eors	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	469c      	mov	ip, r3
 8000364:	0903      	lsrs	r3, r0, #4
 8000366:	428b      	cmp	r3, r1
 8000368:	d32d      	bcc.n	80003c6 <__divsi3+0x17a>
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d312      	bcc.n	8000396 <__divsi3+0x14a>
 8000370:	22fc      	movs	r2, #252	; 0xfc
 8000372:	0189      	lsls	r1, r1, #6
 8000374:	ba12      	rev	r2, r2
 8000376:	0a03      	lsrs	r3, r0, #8
 8000378:	428b      	cmp	r3, r1
 800037a:	d30c      	bcc.n	8000396 <__divsi3+0x14a>
 800037c:	0189      	lsls	r1, r1, #6
 800037e:	1192      	asrs	r2, r2, #6
 8000380:	428b      	cmp	r3, r1
 8000382:	d308      	bcc.n	8000396 <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d304      	bcc.n	8000396 <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	d03a      	beq.n	8000406 <__divsi3+0x1ba>
 8000390:	1192      	asrs	r2, r2, #6
 8000392:	e000      	b.n	8000396 <__divsi3+0x14a>
 8000394:	0989      	lsrs	r1, r1, #6
 8000396:	09c3      	lsrs	r3, r0, #7
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x154>
 800039c:	01cb      	lsls	r3, r1, #7
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0983      	lsrs	r3, r0, #6
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x160>
 80003a8:	018b      	lsls	r3, r1, #6
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0943      	lsrs	r3, r0, #5
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x16c>
 80003b4:	014b      	lsls	r3, r1, #5
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	0903      	lsrs	r3, r0, #4
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x178>
 80003c0:	010b      	lsls	r3, r1, #4
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	08c3      	lsrs	r3, r0, #3
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x184>
 80003cc:	00cb      	lsls	r3, r1, #3
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	0883      	lsrs	r3, r0, #2
 80003d4:	428b      	cmp	r3, r1
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x190>
 80003d8:	008b      	lsls	r3, r1, #2
 80003da:	1ac0      	subs	r0, r0, r3
 80003dc:	4152      	adcs	r2, r2
 80003de:	d2d9      	bcs.n	8000394 <__divsi3+0x148>
 80003e0:	0843      	lsrs	r3, r0, #1
 80003e2:	428b      	cmp	r3, r1
 80003e4:	d301      	bcc.n	80003ea <__divsi3+0x19e>
 80003e6:	004b      	lsls	r3, r1, #1
 80003e8:	1ac0      	subs	r0, r0, r3
 80003ea:	4152      	adcs	r2, r2
 80003ec:	1a41      	subs	r1, r0, r1
 80003ee:	d200      	bcs.n	80003f2 <__divsi3+0x1a6>
 80003f0:	4601      	mov	r1, r0
 80003f2:	4663      	mov	r3, ip
 80003f4:	4152      	adcs	r2, r2
 80003f6:	105b      	asrs	r3, r3, #1
 80003f8:	4610      	mov	r0, r2
 80003fa:	d301      	bcc.n	8000400 <__divsi3+0x1b4>
 80003fc:	4240      	negs	r0, r0
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d500      	bpl.n	8000404 <__divsi3+0x1b8>
 8000402:	4249      	negs	r1, r1
 8000404:	4770      	bx	lr
 8000406:	4663      	mov	r3, ip
 8000408:	105b      	asrs	r3, r3, #1
 800040a:	d300      	bcc.n	800040e <__divsi3+0x1c2>
 800040c:	4240      	negs	r0, r0
 800040e:	b501      	push	{r0, lr}
 8000410:	2000      	movs	r0, #0
 8000412:	f000 f805 	bl	8000420 <__aeabi_idiv0>
 8000416:	bd02      	pop	{r1, pc}

08000418 <__aeabi_idivmod>:
 8000418:	2900      	cmp	r1, #0
 800041a:	d0f8      	beq.n	800040e <__divsi3+0x1c2>
 800041c:	e716      	b.n	800024c <__divsi3>
 800041e:	4770      	bx	lr

08000420 <__aeabi_idiv0>:
 8000420:	4770      	bx	lr
 8000422:	46c0      	nop			; (mov r8, r8)

08000424 <__aeabi_fadd>:
 8000424:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000426:	46c6      	mov	lr, r8
 8000428:	0243      	lsls	r3, r0, #9
 800042a:	0a5b      	lsrs	r3, r3, #9
 800042c:	024e      	lsls	r6, r1, #9
 800042e:	0045      	lsls	r5, r0, #1
 8000430:	004f      	lsls	r7, r1, #1
 8000432:	00da      	lsls	r2, r3, #3
 8000434:	0fc4      	lsrs	r4, r0, #31
 8000436:	469c      	mov	ip, r3
 8000438:	0a70      	lsrs	r0, r6, #9
 800043a:	4690      	mov	r8, r2
 800043c:	b500      	push	{lr}
 800043e:	0e2d      	lsrs	r5, r5, #24
 8000440:	0e3f      	lsrs	r7, r7, #24
 8000442:	0fc9      	lsrs	r1, r1, #31
 8000444:	09b6      	lsrs	r6, r6, #6
 8000446:	428c      	cmp	r4, r1
 8000448:	d04b      	beq.n	80004e2 <__aeabi_fadd+0xbe>
 800044a:	1bea      	subs	r2, r5, r7
 800044c:	2a00      	cmp	r2, #0
 800044e:	dd36      	ble.n	80004be <__aeabi_fadd+0x9a>
 8000450:	2f00      	cmp	r7, #0
 8000452:	d061      	beq.n	8000518 <__aeabi_fadd+0xf4>
 8000454:	2dff      	cmp	r5, #255	; 0xff
 8000456:	d100      	bne.n	800045a <__aeabi_fadd+0x36>
 8000458:	e0ad      	b.n	80005b6 <__aeabi_fadd+0x192>
 800045a:	2380      	movs	r3, #128	; 0x80
 800045c:	04db      	lsls	r3, r3, #19
 800045e:	431e      	orrs	r6, r3
 8000460:	2a1b      	cmp	r2, #27
 8000462:	dc00      	bgt.n	8000466 <__aeabi_fadd+0x42>
 8000464:	e0d3      	b.n	800060e <__aeabi_fadd+0x1ea>
 8000466:	2001      	movs	r0, #1
 8000468:	4643      	mov	r3, r8
 800046a:	1a18      	subs	r0, r3, r0
 800046c:	0143      	lsls	r3, r0, #5
 800046e:	d400      	bmi.n	8000472 <__aeabi_fadd+0x4e>
 8000470:	e08c      	b.n	800058c <__aeabi_fadd+0x168>
 8000472:	0180      	lsls	r0, r0, #6
 8000474:	0987      	lsrs	r7, r0, #6
 8000476:	0038      	movs	r0, r7
 8000478:	f000 fcee 	bl	8000e58 <__clzsi2>
 800047c:	3805      	subs	r0, #5
 800047e:	4087      	lsls	r7, r0
 8000480:	4285      	cmp	r5, r0
 8000482:	dc00      	bgt.n	8000486 <__aeabi_fadd+0x62>
 8000484:	e0b6      	b.n	80005f4 <__aeabi_fadd+0x1d0>
 8000486:	1a2d      	subs	r5, r5, r0
 8000488:	48b3      	ldr	r0, [pc, #716]	; (8000758 <__aeabi_fadd+0x334>)
 800048a:	4038      	ands	r0, r7
 800048c:	0743      	lsls	r3, r0, #29
 800048e:	d004      	beq.n	800049a <__aeabi_fadd+0x76>
 8000490:	230f      	movs	r3, #15
 8000492:	4003      	ands	r3, r0
 8000494:	2b04      	cmp	r3, #4
 8000496:	d000      	beq.n	800049a <__aeabi_fadd+0x76>
 8000498:	3004      	adds	r0, #4
 800049a:	0143      	lsls	r3, r0, #5
 800049c:	d400      	bmi.n	80004a0 <__aeabi_fadd+0x7c>
 800049e:	e078      	b.n	8000592 <__aeabi_fadd+0x16e>
 80004a0:	1c6a      	adds	r2, r5, #1
 80004a2:	2dfe      	cmp	r5, #254	; 0xfe
 80004a4:	d065      	beq.n	8000572 <__aeabi_fadd+0x14e>
 80004a6:	0180      	lsls	r0, r0, #6
 80004a8:	0a43      	lsrs	r3, r0, #9
 80004aa:	469c      	mov	ip, r3
 80004ac:	b2d2      	uxtb	r2, r2
 80004ae:	4663      	mov	r3, ip
 80004b0:	05d0      	lsls	r0, r2, #23
 80004b2:	4318      	orrs	r0, r3
 80004b4:	07e4      	lsls	r4, r4, #31
 80004b6:	4320      	orrs	r0, r4
 80004b8:	bc80      	pop	{r7}
 80004ba:	46b8      	mov	r8, r7
 80004bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004be:	2a00      	cmp	r2, #0
 80004c0:	d035      	beq.n	800052e <__aeabi_fadd+0x10a>
 80004c2:	1b7a      	subs	r2, r7, r5
 80004c4:	2d00      	cmp	r5, #0
 80004c6:	d000      	beq.n	80004ca <__aeabi_fadd+0xa6>
 80004c8:	e0af      	b.n	800062a <__aeabi_fadd+0x206>
 80004ca:	4643      	mov	r3, r8
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	d100      	bne.n	80004d2 <__aeabi_fadd+0xae>
 80004d0:	e0a7      	b.n	8000622 <__aeabi_fadd+0x1fe>
 80004d2:	1e53      	subs	r3, r2, #1
 80004d4:	2a01      	cmp	r2, #1
 80004d6:	d100      	bne.n	80004da <__aeabi_fadd+0xb6>
 80004d8:	e12f      	b.n	800073a <__aeabi_fadd+0x316>
 80004da:	2aff      	cmp	r2, #255	; 0xff
 80004dc:	d069      	beq.n	80005b2 <__aeabi_fadd+0x18e>
 80004de:	001a      	movs	r2, r3
 80004e0:	e0aa      	b.n	8000638 <__aeabi_fadd+0x214>
 80004e2:	1be9      	subs	r1, r5, r7
 80004e4:	2900      	cmp	r1, #0
 80004e6:	dd70      	ble.n	80005ca <__aeabi_fadd+0x1a6>
 80004e8:	2f00      	cmp	r7, #0
 80004ea:	d037      	beq.n	800055c <__aeabi_fadd+0x138>
 80004ec:	2dff      	cmp	r5, #255	; 0xff
 80004ee:	d062      	beq.n	80005b6 <__aeabi_fadd+0x192>
 80004f0:	2380      	movs	r3, #128	; 0x80
 80004f2:	04db      	lsls	r3, r3, #19
 80004f4:	431e      	orrs	r6, r3
 80004f6:	291b      	cmp	r1, #27
 80004f8:	dc00      	bgt.n	80004fc <__aeabi_fadd+0xd8>
 80004fa:	e0b0      	b.n	800065e <__aeabi_fadd+0x23a>
 80004fc:	2001      	movs	r0, #1
 80004fe:	4440      	add	r0, r8
 8000500:	0143      	lsls	r3, r0, #5
 8000502:	d543      	bpl.n	800058c <__aeabi_fadd+0x168>
 8000504:	3501      	adds	r5, #1
 8000506:	2dff      	cmp	r5, #255	; 0xff
 8000508:	d033      	beq.n	8000572 <__aeabi_fadd+0x14e>
 800050a:	2301      	movs	r3, #1
 800050c:	4a93      	ldr	r2, [pc, #588]	; (800075c <__aeabi_fadd+0x338>)
 800050e:	4003      	ands	r3, r0
 8000510:	0840      	lsrs	r0, r0, #1
 8000512:	4010      	ands	r0, r2
 8000514:	4318      	orrs	r0, r3
 8000516:	e7b9      	b.n	800048c <__aeabi_fadd+0x68>
 8000518:	2e00      	cmp	r6, #0
 800051a:	d100      	bne.n	800051e <__aeabi_fadd+0xfa>
 800051c:	e083      	b.n	8000626 <__aeabi_fadd+0x202>
 800051e:	1e51      	subs	r1, r2, #1
 8000520:	2a01      	cmp	r2, #1
 8000522:	d100      	bne.n	8000526 <__aeabi_fadd+0x102>
 8000524:	e0d8      	b.n	80006d8 <__aeabi_fadd+0x2b4>
 8000526:	2aff      	cmp	r2, #255	; 0xff
 8000528:	d045      	beq.n	80005b6 <__aeabi_fadd+0x192>
 800052a:	000a      	movs	r2, r1
 800052c:	e798      	b.n	8000460 <__aeabi_fadd+0x3c>
 800052e:	27fe      	movs	r7, #254	; 0xfe
 8000530:	1c6a      	adds	r2, r5, #1
 8000532:	4217      	tst	r7, r2
 8000534:	d000      	beq.n	8000538 <__aeabi_fadd+0x114>
 8000536:	e086      	b.n	8000646 <__aeabi_fadd+0x222>
 8000538:	2d00      	cmp	r5, #0
 800053a:	d000      	beq.n	800053e <__aeabi_fadd+0x11a>
 800053c:	e0b7      	b.n	80006ae <__aeabi_fadd+0x28a>
 800053e:	4643      	mov	r3, r8
 8000540:	2b00      	cmp	r3, #0
 8000542:	d100      	bne.n	8000546 <__aeabi_fadd+0x122>
 8000544:	e0f3      	b.n	800072e <__aeabi_fadd+0x30a>
 8000546:	2200      	movs	r2, #0
 8000548:	2e00      	cmp	r6, #0
 800054a:	d0b0      	beq.n	80004ae <__aeabi_fadd+0x8a>
 800054c:	1b98      	subs	r0, r3, r6
 800054e:	0143      	lsls	r3, r0, #5
 8000550:	d400      	bmi.n	8000554 <__aeabi_fadd+0x130>
 8000552:	e0fa      	b.n	800074a <__aeabi_fadd+0x326>
 8000554:	4643      	mov	r3, r8
 8000556:	000c      	movs	r4, r1
 8000558:	1af0      	subs	r0, r6, r3
 800055a:	e797      	b.n	800048c <__aeabi_fadd+0x68>
 800055c:	2e00      	cmp	r6, #0
 800055e:	d100      	bne.n	8000562 <__aeabi_fadd+0x13e>
 8000560:	e0c8      	b.n	80006f4 <__aeabi_fadd+0x2d0>
 8000562:	1e4a      	subs	r2, r1, #1
 8000564:	2901      	cmp	r1, #1
 8000566:	d100      	bne.n	800056a <__aeabi_fadd+0x146>
 8000568:	e0ae      	b.n	80006c8 <__aeabi_fadd+0x2a4>
 800056a:	29ff      	cmp	r1, #255	; 0xff
 800056c:	d023      	beq.n	80005b6 <__aeabi_fadd+0x192>
 800056e:	0011      	movs	r1, r2
 8000570:	e7c1      	b.n	80004f6 <__aeabi_fadd+0xd2>
 8000572:	2300      	movs	r3, #0
 8000574:	22ff      	movs	r2, #255	; 0xff
 8000576:	469c      	mov	ip, r3
 8000578:	e799      	b.n	80004ae <__aeabi_fadd+0x8a>
 800057a:	21fe      	movs	r1, #254	; 0xfe
 800057c:	1c6a      	adds	r2, r5, #1
 800057e:	4211      	tst	r1, r2
 8000580:	d077      	beq.n	8000672 <__aeabi_fadd+0x24e>
 8000582:	2aff      	cmp	r2, #255	; 0xff
 8000584:	d0f5      	beq.n	8000572 <__aeabi_fadd+0x14e>
 8000586:	0015      	movs	r5, r2
 8000588:	4446      	add	r6, r8
 800058a:	0870      	lsrs	r0, r6, #1
 800058c:	0743      	lsls	r3, r0, #29
 800058e:	d000      	beq.n	8000592 <__aeabi_fadd+0x16e>
 8000590:	e77e      	b.n	8000490 <__aeabi_fadd+0x6c>
 8000592:	08c3      	lsrs	r3, r0, #3
 8000594:	2dff      	cmp	r5, #255	; 0xff
 8000596:	d00e      	beq.n	80005b6 <__aeabi_fadd+0x192>
 8000598:	025b      	lsls	r3, r3, #9
 800059a:	0a5b      	lsrs	r3, r3, #9
 800059c:	469c      	mov	ip, r3
 800059e:	b2ea      	uxtb	r2, r5
 80005a0:	e785      	b.n	80004ae <__aeabi_fadd+0x8a>
 80005a2:	2e00      	cmp	r6, #0
 80005a4:	d007      	beq.n	80005b6 <__aeabi_fadd+0x192>
 80005a6:	2280      	movs	r2, #128	; 0x80
 80005a8:	03d2      	lsls	r2, r2, #15
 80005aa:	4213      	tst	r3, r2
 80005ac:	d003      	beq.n	80005b6 <__aeabi_fadd+0x192>
 80005ae:	4210      	tst	r0, r2
 80005b0:	d101      	bne.n	80005b6 <__aeabi_fadd+0x192>
 80005b2:	000c      	movs	r4, r1
 80005b4:	0003      	movs	r3, r0
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d0db      	beq.n	8000572 <__aeabi_fadd+0x14e>
 80005ba:	2080      	movs	r0, #128	; 0x80
 80005bc:	03c0      	lsls	r0, r0, #15
 80005be:	4318      	orrs	r0, r3
 80005c0:	0240      	lsls	r0, r0, #9
 80005c2:	0a43      	lsrs	r3, r0, #9
 80005c4:	469c      	mov	ip, r3
 80005c6:	22ff      	movs	r2, #255	; 0xff
 80005c8:	e771      	b.n	80004ae <__aeabi_fadd+0x8a>
 80005ca:	2900      	cmp	r1, #0
 80005cc:	d0d5      	beq.n	800057a <__aeabi_fadd+0x156>
 80005ce:	1b7a      	subs	r2, r7, r5
 80005d0:	2d00      	cmp	r5, #0
 80005d2:	d160      	bne.n	8000696 <__aeabi_fadd+0x272>
 80005d4:	4643      	mov	r3, r8
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d024      	beq.n	8000624 <__aeabi_fadd+0x200>
 80005da:	1e53      	subs	r3, r2, #1
 80005dc:	2a01      	cmp	r2, #1
 80005de:	d073      	beq.n	80006c8 <__aeabi_fadd+0x2a4>
 80005e0:	2aff      	cmp	r2, #255	; 0xff
 80005e2:	d0e7      	beq.n	80005b4 <__aeabi_fadd+0x190>
 80005e4:	001a      	movs	r2, r3
 80005e6:	2a1b      	cmp	r2, #27
 80005e8:	dc00      	bgt.n	80005ec <__aeabi_fadd+0x1c8>
 80005ea:	e085      	b.n	80006f8 <__aeabi_fadd+0x2d4>
 80005ec:	2001      	movs	r0, #1
 80005ee:	003d      	movs	r5, r7
 80005f0:	1980      	adds	r0, r0, r6
 80005f2:	e785      	b.n	8000500 <__aeabi_fadd+0xdc>
 80005f4:	2320      	movs	r3, #32
 80005f6:	003a      	movs	r2, r7
 80005f8:	1b45      	subs	r5, r0, r5
 80005fa:	0038      	movs	r0, r7
 80005fc:	3501      	adds	r5, #1
 80005fe:	40ea      	lsrs	r2, r5
 8000600:	1b5d      	subs	r5, r3, r5
 8000602:	40a8      	lsls	r0, r5
 8000604:	1e43      	subs	r3, r0, #1
 8000606:	4198      	sbcs	r0, r3
 8000608:	2500      	movs	r5, #0
 800060a:	4310      	orrs	r0, r2
 800060c:	e73e      	b.n	800048c <__aeabi_fadd+0x68>
 800060e:	2320      	movs	r3, #32
 8000610:	0030      	movs	r0, r6
 8000612:	1a9b      	subs	r3, r3, r2
 8000614:	0031      	movs	r1, r6
 8000616:	4098      	lsls	r0, r3
 8000618:	40d1      	lsrs	r1, r2
 800061a:	1e43      	subs	r3, r0, #1
 800061c:	4198      	sbcs	r0, r3
 800061e:	4308      	orrs	r0, r1
 8000620:	e722      	b.n	8000468 <__aeabi_fadd+0x44>
 8000622:	000c      	movs	r4, r1
 8000624:	0003      	movs	r3, r0
 8000626:	0015      	movs	r5, r2
 8000628:	e7b4      	b.n	8000594 <__aeabi_fadd+0x170>
 800062a:	2fff      	cmp	r7, #255	; 0xff
 800062c:	d0c1      	beq.n	80005b2 <__aeabi_fadd+0x18e>
 800062e:	2380      	movs	r3, #128	; 0x80
 8000630:	4640      	mov	r0, r8
 8000632:	04db      	lsls	r3, r3, #19
 8000634:	4318      	orrs	r0, r3
 8000636:	4680      	mov	r8, r0
 8000638:	2a1b      	cmp	r2, #27
 800063a:	dd51      	ble.n	80006e0 <__aeabi_fadd+0x2bc>
 800063c:	2001      	movs	r0, #1
 800063e:	000c      	movs	r4, r1
 8000640:	003d      	movs	r5, r7
 8000642:	1a30      	subs	r0, r6, r0
 8000644:	e712      	b.n	800046c <__aeabi_fadd+0x48>
 8000646:	4643      	mov	r3, r8
 8000648:	1b9f      	subs	r7, r3, r6
 800064a:	017b      	lsls	r3, r7, #5
 800064c:	d42b      	bmi.n	80006a6 <__aeabi_fadd+0x282>
 800064e:	2f00      	cmp	r7, #0
 8000650:	d000      	beq.n	8000654 <__aeabi_fadd+0x230>
 8000652:	e710      	b.n	8000476 <__aeabi_fadd+0x52>
 8000654:	2300      	movs	r3, #0
 8000656:	2400      	movs	r4, #0
 8000658:	2200      	movs	r2, #0
 800065a:	469c      	mov	ip, r3
 800065c:	e727      	b.n	80004ae <__aeabi_fadd+0x8a>
 800065e:	2320      	movs	r3, #32
 8000660:	0032      	movs	r2, r6
 8000662:	0030      	movs	r0, r6
 8000664:	40ca      	lsrs	r2, r1
 8000666:	1a59      	subs	r1, r3, r1
 8000668:	4088      	lsls	r0, r1
 800066a:	1e43      	subs	r3, r0, #1
 800066c:	4198      	sbcs	r0, r3
 800066e:	4310      	orrs	r0, r2
 8000670:	e745      	b.n	80004fe <__aeabi_fadd+0xda>
 8000672:	2d00      	cmp	r5, #0
 8000674:	d14a      	bne.n	800070c <__aeabi_fadd+0x2e8>
 8000676:	4643      	mov	r3, r8
 8000678:	2b00      	cmp	r3, #0
 800067a:	d063      	beq.n	8000744 <__aeabi_fadd+0x320>
 800067c:	2200      	movs	r2, #0
 800067e:	2e00      	cmp	r6, #0
 8000680:	d100      	bne.n	8000684 <__aeabi_fadd+0x260>
 8000682:	e714      	b.n	80004ae <__aeabi_fadd+0x8a>
 8000684:	0030      	movs	r0, r6
 8000686:	4440      	add	r0, r8
 8000688:	0143      	lsls	r3, r0, #5
 800068a:	d400      	bmi.n	800068e <__aeabi_fadd+0x26a>
 800068c:	e77e      	b.n	800058c <__aeabi_fadd+0x168>
 800068e:	4b32      	ldr	r3, [pc, #200]	; (8000758 <__aeabi_fadd+0x334>)
 8000690:	3501      	adds	r5, #1
 8000692:	4018      	ands	r0, r3
 8000694:	e77a      	b.n	800058c <__aeabi_fadd+0x168>
 8000696:	2fff      	cmp	r7, #255	; 0xff
 8000698:	d08c      	beq.n	80005b4 <__aeabi_fadd+0x190>
 800069a:	2380      	movs	r3, #128	; 0x80
 800069c:	4641      	mov	r1, r8
 800069e:	04db      	lsls	r3, r3, #19
 80006a0:	4319      	orrs	r1, r3
 80006a2:	4688      	mov	r8, r1
 80006a4:	e79f      	b.n	80005e6 <__aeabi_fadd+0x1c2>
 80006a6:	4643      	mov	r3, r8
 80006a8:	000c      	movs	r4, r1
 80006aa:	1af7      	subs	r7, r6, r3
 80006ac:	e6e3      	b.n	8000476 <__aeabi_fadd+0x52>
 80006ae:	4642      	mov	r2, r8
 80006b0:	2a00      	cmp	r2, #0
 80006b2:	d000      	beq.n	80006b6 <__aeabi_fadd+0x292>
 80006b4:	e775      	b.n	80005a2 <__aeabi_fadd+0x17e>
 80006b6:	2e00      	cmp	r6, #0
 80006b8:	d000      	beq.n	80006bc <__aeabi_fadd+0x298>
 80006ba:	e77a      	b.n	80005b2 <__aeabi_fadd+0x18e>
 80006bc:	2380      	movs	r3, #128	; 0x80
 80006be:	03db      	lsls	r3, r3, #15
 80006c0:	2400      	movs	r4, #0
 80006c2:	469c      	mov	ip, r3
 80006c4:	22ff      	movs	r2, #255	; 0xff
 80006c6:	e6f2      	b.n	80004ae <__aeabi_fadd+0x8a>
 80006c8:	0030      	movs	r0, r6
 80006ca:	4440      	add	r0, r8
 80006cc:	2501      	movs	r5, #1
 80006ce:	0143      	lsls	r3, r0, #5
 80006d0:	d400      	bmi.n	80006d4 <__aeabi_fadd+0x2b0>
 80006d2:	e75b      	b.n	800058c <__aeabi_fadd+0x168>
 80006d4:	2502      	movs	r5, #2
 80006d6:	e718      	b.n	800050a <__aeabi_fadd+0xe6>
 80006d8:	4643      	mov	r3, r8
 80006da:	2501      	movs	r5, #1
 80006dc:	1b98      	subs	r0, r3, r6
 80006de:	e6c5      	b.n	800046c <__aeabi_fadd+0x48>
 80006e0:	2320      	movs	r3, #32
 80006e2:	4644      	mov	r4, r8
 80006e4:	4640      	mov	r0, r8
 80006e6:	40d4      	lsrs	r4, r2
 80006e8:	1a9a      	subs	r2, r3, r2
 80006ea:	4090      	lsls	r0, r2
 80006ec:	1e43      	subs	r3, r0, #1
 80006ee:	4198      	sbcs	r0, r3
 80006f0:	4320      	orrs	r0, r4
 80006f2:	e7a4      	b.n	800063e <__aeabi_fadd+0x21a>
 80006f4:	000d      	movs	r5, r1
 80006f6:	e74d      	b.n	8000594 <__aeabi_fadd+0x170>
 80006f8:	2320      	movs	r3, #32
 80006fa:	4641      	mov	r1, r8
 80006fc:	4640      	mov	r0, r8
 80006fe:	40d1      	lsrs	r1, r2
 8000700:	1a9a      	subs	r2, r3, r2
 8000702:	4090      	lsls	r0, r2
 8000704:	1e43      	subs	r3, r0, #1
 8000706:	4198      	sbcs	r0, r3
 8000708:	4308      	orrs	r0, r1
 800070a:	e770      	b.n	80005ee <__aeabi_fadd+0x1ca>
 800070c:	4642      	mov	r2, r8
 800070e:	2a00      	cmp	r2, #0
 8000710:	d100      	bne.n	8000714 <__aeabi_fadd+0x2f0>
 8000712:	e74f      	b.n	80005b4 <__aeabi_fadd+0x190>
 8000714:	2e00      	cmp	r6, #0
 8000716:	d100      	bne.n	800071a <__aeabi_fadd+0x2f6>
 8000718:	e74d      	b.n	80005b6 <__aeabi_fadd+0x192>
 800071a:	2280      	movs	r2, #128	; 0x80
 800071c:	03d2      	lsls	r2, r2, #15
 800071e:	4213      	tst	r3, r2
 8000720:	d100      	bne.n	8000724 <__aeabi_fadd+0x300>
 8000722:	e748      	b.n	80005b6 <__aeabi_fadd+0x192>
 8000724:	4210      	tst	r0, r2
 8000726:	d000      	beq.n	800072a <__aeabi_fadd+0x306>
 8000728:	e745      	b.n	80005b6 <__aeabi_fadd+0x192>
 800072a:	0003      	movs	r3, r0
 800072c:	e743      	b.n	80005b6 <__aeabi_fadd+0x192>
 800072e:	2e00      	cmp	r6, #0
 8000730:	d090      	beq.n	8000654 <__aeabi_fadd+0x230>
 8000732:	000c      	movs	r4, r1
 8000734:	4684      	mov	ip, r0
 8000736:	2200      	movs	r2, #0
 8000738:	e6b9      	b.n	80004ae <__aeabi_fadd+0x8a>
 800073a:	4643      	mov	r3, r8
 800073c:	000c      	movs	r4, r1
 800073e:	1af0      	subs	r0, r6, r3
 8000740:	3501      	adds	r5, #1
 8000742:	e693      	b.n	800046c <__aeabi_fadd+0x48>
 8000744:	4684      	mov	ip, r0
 8000746:	2200      	movs	r2, #0
 8000748:	e6b1      	b.n	80004ae <__aeabi_fadd+0x8a>
 800074a:	2800      	cmp	r0, #0
 800074c:	d000      	beq.n	8000750 <__aeabi_fadd+0x32c>
 800074e:	e71d      	b.n	800058c <__aeabi_fadd+0x168>
 8000750:	2300      	movs	r3, #0
 8000752:	2400      	movs	r4, #0
 8000754:	469c      	mov	ip, r3
 8000756:	e6aa      	b.n	80004ae <__aeabi_fadd+0x8a>
 8000758:	fbffffff 	.word	0xfbffffff
 800075c:	7dffffff 	.word	0x7dffffff

08000760 <__aeabi_fdiv>:
 8000760:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000762:	464f      	mov	r7, r9
 8000764:	4646      	mov	r6, r8
 8000766:	46d6      	mov	lr, sl
 8000768:	0245      	lsls	r5, r0, #9
 800076a:	b5c0      	push	{r6, r7, lr}
 800076c:	0047      	lsls	r7, r0, #1
 800076e:	1c0c      	adds	r4, r1, #0
 8000770:	0a6d      	lsrs	r5, r5, #9
 8000772:	0e3f      	lsrs	r7, r7, #24
 8000774:	0fc6      	lsrs	r6, r0, #31
 8000776:	2f00      	cmp	r7, #0
 8000778:	d100      	bne.n	800077c <__aeabi_fdiv+0x1c>
 800077a:	e070      	b.n	800085e <__aeabi_fdiv+0xfe>
 800077c:	2fff      	cmp	r7, #255	; 0xff
 800077e:	d100      	bne.n	8000782 <__aeabi_fdiv+0x22>
 8000780:	e075      	b.n	800086e <__aeabi_fdiv+0x10e>
 8000782:	00eb      	lsls	r3, r5, #3
 8000784:	2580      	movs	r5, #128	; 0x80
 8000786:	04ed      	lsls	r5, r5, #19
 8000788:	431d      	orrs	r5, r3
 800078a:	2300      	movs	r3, #0
 800078c:	4699      	mov	r9, r3
 800078e:	469a      	mov	sl, r3
 8000790:	3f7f      	subs	r7, #127	; 0x7f
 8000792:	0260      	lsls	r0, r4, #9
 8000794:	0a43      	lsrs	r3, r0, #9
 8000796:	4698      	mov	r8, r3
 8000798:	0063      	lsls	r3, r4, #1
 800079a:	0e1b      	lsrs	r3, r3, #24
 800079c:	0fe4      	lsrs	r4, r4, #31
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d04e      	beq.n	8000840 <__aeabi_fdiv+0xe0>
 80007a2:	2bff      	cmp	r3, #255	; 0xff
 80007a4:	d046      	beq.n	8000834 <__aeabi_fdiv+0xd4>
 80007a6:	4642      	mov	r2, r8
 80007a8:	00d0      	lsls	r0, r2, #3
 80007aa:	2280      	movs	r2, #128	; 0x80
 80007ac:	04d2      	lsls	r2, r2, #19
 80007ae:	4302      	orrs	r2, r0
 80007b0:	4690      	mov	r8, r2
 80007b2:	2200      	movs	r2, #0
 80007b4:	3b7f      	subs	r3, #127	; 0x7f
 80007b6:	0031      	movs	r1, r6
 80007b8:	1aff      	subs	r7, r7, r3
 80007ba:	464b      	mov	r3, r9
 80007bc:	4061      	eors	r1, r4
 80007be:	b2c9      	uxtb	r1, r1
 80007c0:	4313      	orrs	r3, r2
 80007c2:	2b0f      	cmp	r3, #15
 80007c4:	d900      	bls.n	80007c8 <__aeabi_fdiv+0x68>
 80007c6:	e0b5      	b.n	8000934 <__aeabi_fdiv+0x1d4>
 80007c8:	486e      	ldr	r0, [pc, #440]	; (8000984 <__aeabi_fdiv+0x224>)
 80007ca:	009b      	lsls	r3, r3, #2
 80007cc:	58c3      	ldr	r3, [r0, r3]
 80007ce:	469f      	mov	pc, r3
 80007d0:	2300      	movs	r3, #0
 80007d2:	4698      	mov	r8, r3
 80007d4:	0026      	movs	r6, r4
 80007d6:	4645      	mov	r5, r8
 80007d8:	4692      	mov	sl, r2
 80007da:	4653      	mov	r3, sl
 80007dc:	2b02      	cmp	r3, #2
 80007de:	d100      	bne.n	80007e2 <__aeabi_fdiv+0x82>
 80007e0:	e089      	b.n	80008f6 <__aeabi_fdiv+0x196>
 80007e2:	2b03      	cmp	r3, #3
 80007e4:	d100      	bne.n	80007e8 <__aeabi_fdiv+0x88>
 80007e6:	e09e      	b.n	8000926 <__aeabi_fdiv+0x1c6>
 80007e8:	2b01      	cmp	r3, #1
 80007ea:	d018      	beq.n	800081e <__aeabi_fdiv+0xbe>
 80007ec:	003b      	movs	r3, r7
 80007ee:	337f      	adds	r3, #127	; 0x7f
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	dd69      	ble.n	80008c8 <__aeabi_fdiv+0x168>
 80007f4:	076a      	lsls	r2, r5, #29
 80007f6:	d004      	beq.n	8000802 <__aeabi_fdiv+0xa2>
 80007f8:	220f      	movs	r2, #15
 80007fa:	402a      	ands	r2, r5
 80007fc:	2a04      	cmp	r2, #4
 80007fe:	d000      	beq.n	8000802 <__aeabi_fdiv+0xa2>
 8000800:	3504      	adds	r5, #4
 8000802:	012a      	lsls	r2, r5, #4
 8000804:	d503      	bpl.n	800080e <__aeabi_fdiv+0xae>
 8000806:	4b60      	ldr	r3, [pc, #384]	; (8000988 <__aeabi_fdiv+0x228>)
 8000808:	401d      	ands	r5, r3
 800080a:	003b      	movs	r3, r7
 800080c:	3380      	adds	r3, #128	; 0x80
 800080e:	2bfe      	cmp	r3, #254	; 0xfe
 8000810:	dd00      	ble.n	8000814 <__aeabi_fdiv+0xb4>
 8000812:	e070      	b.n	80008f6 <__aeabi_fdiv+0x196>
 8000814:	01ad      	lsls	r5, r5, #6
 8000816:	0a6d      	lsrs	r5, r5, #9
 8000818:	b2d8      	uxtb	r0, r3
 800081a:	e002      	b.n	8000822 <__aeabi_fdiv+0xc2>
 800081c:	000e      	movs	r6, r1
 800081e:	2000      	movs	r0, #0
 8000820:	2500      	movs	r5, #0
 8000822:	05c0      	lsls	r0, r0, #23
 8000824:	4328      	orrs	r0, r5
 8000826:	07f6      	lsls	r6, r6, #31
 8000828:	4330      	orrs	r0, r6
 800082a:	bce0      	pop	{r5, r6, r7}
 800082c:	46ba      	mov	sl, r7
 800082e:	46b1      	mov	r9, r6
 8000830:	46a8      	mov	r8, r5
 8000832:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000834:	4643      	mov	r3, r8
 8000836:	2b00      	cmp	r3, #0
 8000838:	d13f      	bne.n	80008ba <__aeabi_fdiv+0x15a>
 800083a:	2202      	movs	r2, #2
 800083c:	3fff      	subs	r7, #255	; 0xff
 800083e:	e003      	b.n	8000848 <__aeabi_fdiv+0xe8>
 8000840:	4643      	mov	r3, r8
 8000842:	2b00      	cmp	r3, #0
 8000844:	d12d      	bne.n	80008a2 <__aeabi_fdiv+0x142>
 8000846:	2201      	movs	r2, #1
 8000848:	0031      	movs	r1, r6
 800084a:	464b      	mov	r3, r9
 800084c:	4061      	eors	r1, r4
 800084e:	b2c9      	uxtb	r1, r1
 8000850:	4313      	orrs	r3, r2
 8000852:	2b0f      	cmp	r3, #15
 8000854:	d834      	bhi.n	80008c0 <__aeabi_fdiv+0x160>
 8000856:	484d      	ldr	r0, [pc, #308]	; (800098c <__aeabi_fdiv+0x22c>)
 8000858:	009b      	lsls	r3, r3, #2
 800085a:	58c3      	ldr	r3, [r0, r3]
 800085c:	469f      	mov	pc, r3
 800085e:	2d00      	cmp	r5, #0
 8000860:	d113      	bne.n	800088a <__aeabi_fdiv+0x12a>
 8000862:	2304      	movs	r3, #4
 8000864:	4699      	mov	r9, r3
 8000866:	3b03      	subs	r3, #3
 8000868:	2700      	movs	r7, #0
 800086a:	469a      	mov	sl, r3
 800086c:	e791      	b.n	8000792 <__aeabi_fdiv+0x32>
 800086e:	2d00      	cmp	r5, #0
 8000870:	d105      	bne.n	800087e <__aeabi_fdiv+0x11e>
 8000872:	2308      	movs	r3, #8
 8000874:	4699      	mov	r9, r3
 8000876:	3b06      	subs	r3, #6
 8000878:	27ff      	movs	r7, #255	; 0xff
 800087a:	469a      	mov	sl, r3
 800087c:	e789      	b.n	8000792 <__aeabi_fdiv+0x32>
 800087e:	230c      	movs	r3, #12
 8000880:	4699      	mov	r9, r3
 8000882:	3b09      	subs	r3, #9
 8000884:	27ff      	movs	r7, #255	; 0xff
 8000886:	469a      	mov	sl, r3
 8000888:	e783      	b.n	8000792 <__aeabi_fdiv+0x32>
 800088a:	0028      	movs	r0, r5
 800088c:	f000 fae4 	bl	8000e58 <__clzsi2>
 8000890:	2776      	movs	r7, #118	; 0x76
 8000892:	1f43      	subs	r3, r0, #5
 8000894:	409d      	lsls	r5, r3
 8000896:	2300      	movs	r3, #0
 8000898:	427f      	negs	r7, r7
 800089a:	4699      	mov	r9, r3
 800089c:	469a      	mov	sl, r3
 800089e:	1a3f      	subs	r7, r7, r0
 80008a0:	e777      	b.n	8000792 <__aeabi_fdiv+0x32>
 80008a2:	4640      	mov	r0, r8
 80008a4:	f000 fad8 	bl	8000e58 <__clzsi2>
 80008a8:	4642      	mov	r2, r8
 80008aa:	1f43      	subs	r3, r0, #5
 80008ac:	409a      	lsls	r2, r3
 80008ae:	2376      	movs	r3, #118	; 0x76
 80008b0:	425b      	negs	r3, r3
 80008b2:	4690      	mov	r8, r2
 80008b4:	1a1b      	subs	r3, r3, r0
 80008b6:	2200      	movs	r2, #0
 80008b8:	e77d      	b.n	80007b6 <__aeabi_fdiv+0x56>
 80008ba:	23ff      	movs	r3, #255	; 0xff
 80008bc:	2203      	movs	r2, #3
 80008be:	e77a      	b.n	80007b6 <__aeabi_fdiv+0x56>
 80008c0:	000e      	movs	r6, r1
 80008c2:	20ff      	movs	r0, #255	; 0xff
 80008c4:	2500      	movs	r5, #0
 80008c6:	e7ac      	b.n	8000822 <__aeabi_fdiv+0xc2>
 80008c8:	2001      	movs	r0, #1
 80008ca:	1ac0      	subs	r0, r0, r3
 80008cc:	281b      	cmp	r0, #27
 80008ce:	dca6      	bgt.n	800081e <__aeabi_fdiv+0xbe>
 80008d0:	379e      	adds	r7, #158	; 0x9e
 80008d2:	002a      	movs	r2, r5
 80008d4:	40bd      	lsls	r5, r7
 80008d6:	40c2      	lsrs	r2, r0
 80008d8:	1e6b      	subs	r3, r5, #1
 80008da:	419d      	sbcs	r5, r3
 80008dc:	4315      	orrs	r5, r2
 80008de:	076b      	lsls	r3, r5, #29
 80008e0:	d004      	beq.n	80008ec <__aeabi_fdiv+0x18c>
 80008e2:	230f      	movs	r3, #15
 80008e4:	402b      	ands	r3, r5
 80008e6:	2b04      	cmp	r3, #4
 80008e8:	d000      	beq.n	80008ec <__aeabi_fdiv+0x18c>
 80008ea:	3504      	adds	r5, #4
 80008ec:	016b      	lsls	r3, r5, #5
 80008ee:	d544      	bpl.n	800097a <__aeabi_fdiv+0x21a>
 80008f0:	2001      	movs	r0, #1
 80008f2:	2500      	movs	r5, #0
 80008f4:	e795      	b.n	8000822 <__aeabi_fdiv+0xc2>
 80008f6:	20ff      	movs	r0, #255	; 0xff
 80008f8:	2500      	movs	r5, #0
 80008fa:	e792      	b.n	8000822 <__aeabi_fdiv+0xc2>
 80008fc:	2580      	movs	r5, #128	; 0x80
 80008fe:	2600      	movs	r6, #0
 8000900:	20ff      	movs	r0, #255	; 0xff
 8000902:	03ed      	lsls	r5, r5, #15
 8000904:	e78d      	b.n	8000822 <__aeabi_fdiv+0xc2>
 8000906:	2300      	movs	r3, #0
 8000908:	4698      	mov	r8, r3
 800090a:	2080      	movs	r0, #128	; 0x80
 800090c:	03c0      	lsls	r0, r0, #15
 800090e:	4205      	tst	r5, r0
 8000910:	d009      	beq.n	8000926 <__aeabi_fdiv+0x1c6>
 8000912:	4643      	mov	r3, r8
 8000914:	4203      	tst	r3, r0
 8000916:	d106      	bne.n	8000926 <__aeabi_fdiv+0x1c6>
 8000918:	4645      	mov	r5, r8
 800091a:	4305      	orrs	r5, r0
 800091c:	026d      	lsls	r5, r5, #9
 800091e:	0026      	movs	r6, r4
 8000920:	20ff      	movs	r0, #255	; 0xff
 8000922:	0a6d      	lsrs	r5, r5, #9
 8000924:	e77d      	b.n	8000822 <__aeabi_fdiv+0xc2>
 8000926:	2080      	movs	r0, #128	; 0x80
 8000928:	03c0      	lsls	r0, r0, #15
 800092a:	4305      	orrs	r5, r0
 800092c:	026d      	lsls	r5, r5, #9
 800092e:	20ff      	movs	r0, #255	; 0xff
 8000930:	0a6d      	lsrs	r5, r5, #9
 8000932:	e776      	b.n	8000822 <__aeabi_fdiv+0xc2>
 8000934:	4642      	mov	r2, r8
 8000936:	016b      	lsls	r3, r5, #5
 8000938:	0150      	lsls	r0, r2, #5
 800093a:	4283      	cmp	r3, r0
 800093c:	d219      	bcs.n	8000972 <__aeabi_fdiv+0x212>
 800093e:	221b      	movs	r2, #27
 8000940:	2500      	movs	r5, #0
 8000942:	3f01      	subs	r7, #1
 8000944:	2601      	movs	r6, #1
 8000946:	001c      	movs	r4, r3
 8000948:	006d      	lsls	r5, r5, #1
 800094a:	005b      	lsls	r3, r3, #1
 800094c:	2c00      	cmp	r4, #0
 800094e:	db01      	blt.n	8000954 <__aeabi_fdiv+0x1f4>
 8000950:	4298      	cmp	r0, r3
 8000952:	d801      	bhi.n	8000958 <__aeabi_fdiv+0x1f8>
 8000954:	1a1b      	subs	r3, r3, r0
 8000956:	4335      	orrs	r5, r6
 8000958:	3a01      	subs	r2, #1
 800095a:	2a00      	cmp	r2, #0
 800095c:	d1f3      	bne.n	8000946 <__aeabi_fdiv+0x1e6>
 800095e:	1e5a      	subs	r2, r3, #1
 8000960:	4193      	sbcs	r3, r2
 8000962:	431d      	orrs	r5, r3
 8000964:	003b      	movs	r3, r7
 8000966:	337f      	adds	r3, #127	; 0x7f
 8000968:	000e      	movs	r6, r1
 800096a:	2b00      	cmp	r3, #0
 800096c:	dd00      	ble.n	8000970 <__aeabi_fdiv+0x210>
 800096e:	e741      	b.n	80007f4 <__aeabi_fdiv+0x94>
 8000970:	e7aa      	b.n	80008c8 <__aeabi_fdiv+0x168>
 8000972:	221a      	movs	r2, #26
 8000974:	2501      	movs	r5, #1
 8000976:	1a1b      	subs	r3, r3, r0
 8000978:	e7e4      	b.n	8000944 <__aeabi_fdiv+0x1e4>
 800097a:	01ad      	lsls	r5, r5, #6
 800097c:	2000      	movs	r0, #0
 800097e:	0a6d      	lsrs	r5, r5, #9
 8000980:	e74f      	b.n	8000822 <__aeabi_fdiv+0xc2>
 8000982:	46c0      	nop			; (mov r8, r8)
 8000984:	08005144 	.word	0x08005144
 8000988:	f7ffffff 	.word	0xf7ffffff
 800098c:	08005184 	.word	0x08005184

08000990 <__aeabi_fsub>:
 8000990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000992:	46ce      	mov	lr, r9
 8000994:	4647      	mov	r7, r8
 8000996:	0243      	lsls	r3, r0, #9
 8000998:	0a5b      	lsrs	r3, r3, #9
 800099a:	024e      	lsls	r6, r1, #9
 800099c:	00da      	lsls	r2, r3, #3
 800099e:	4694      	mov	ip, r2
 80009a0:	0a72      	lsrs	r2, r6, #9
 80009a2:	4691      	mov	r9, r2
 80009a4:	0045      	lsls	r5, r0, #1
 80009a6:	004a      	lsls	r2, r1, #1
 80009a8:	b580      	push	{r7, lr}
 80009aa:	0e2d      	lsrs	r5, r5, #24
 80009ac:	001f      	movs	r7, r3
 80009ae:	0fc4      	lsrs	r4, r0, #31
 80009b0:	0e12      	lsrs	r2, r2, #24
 80009b2:	0fc9      	lsrs	r1, r1, #31
 80009b4:	09b6      	lsrs	r6, r6, #6
 80009b6:	2aff      	cmp	r2, #255	; 0xff
 80009b8:	d05b      	beq.n	8000a72 <__aeabi_fsub+0xe2>
 80009ba:	2001      	movs	r0, #1
 80009bc:	4041      	eors	r1, r0
 80009be:	428c      	cmp	r4, r1
 80009c0:	d039      	beq.n	8000a36 <__aeabi_fsub+0xa6>
 80009c2:	1aa8      	subs	r0, r5, r2
 80009c4:	2800      	cmp	r0, #0
 80009c6:	dd5a      	ble.n	8000a7e <__aeabi_fsub+0xee>
 80009c8:	2a00      	cmp	r2, #0
 80009ca:	d06a      	beq.n	8000aa2 <__aeabi_fsub+0x112>
 80009cc:	2dff      	cmp	r5, #255	; 0xff
 80009ce:	d100      	bne.n	80009d2 <__aeabi_fsub+0x42>
 80009d0:	e0d9      	b.n	8000b86 <__aeabi_fsub+0x1f6>
 80009d2:	2280      	movs	r2, #128	; 0x80
 80009d4:	04d2      	lsls	r2, r2, #19
 80009d6:	4316      	orrs	r6, r2
 80009d8:	281b      	cmp	r0, #27
 80009da:	dc00      	bgt.n	80009de <__aeabi_fsub+0x4e>
 80009dc:	e0e9      	b.n	8000bb2 <__aeabi_fsub+0x222>
 80009de:	2001      	movs	r0, #1
 80009e0:	4663      	mov	r3, ip
 80009e2:	1a18      	subs	r0, r3, r0
 80009e4:	0143      	lsls	r3, r0, #5
 80009e6:	d400      	bmi.n	80009ea <__aeabi_fsub+0x5a>
 80009e8:	e0b4      	b.n	8000b54 <__aeabi_fsub+0x1c4>
 80009ea:	0180      	lsls	r0, r0, #6
 80009ec:	0987      	lsrs	r7, r0, #6
 80009ee:	0038      	movs	r0, r7
 80009f0:	f000 fa32 	bl	8000e58 <__clzsi2>
 80009f4:	3805      	subs	r0, #5
 80009f6:	4087      	lsls	r7, r0
 80009f8:	4285      	cmp	r5, r0
 80009fa:	dc00      	bgt.n	80009fe <__aeabi_fsub+0x6e>
 80009fc:	e0cc      	b.n	8000b98 <__aeabi_fsub+0x208>
 80009fe:	1a2d      	subs	r5, r5, r0
 8000a00:	48b5      	ldr	r0, [pc, #724]	; (8000cd8 <__aeabi_fsub+0x348>)
 8000a02:	4038      	ands	r0, r7
 8000a04:	0743      	lsls	r3, r0, #29
 8000a06:	d004      	beq.n	8000a12 <__aeabi_fsub+0x82>
 8000a08:	230f      	movs	r3, #15
 8000a0a:	4003      	ands	r3, r0
 8000a0c:	2b04      	cmp	r3, #4
 8000a0e:	d000      	beq.n	8000a12 <__aeabi_fsub+0x82>
 8000a10:	3004      	adds	r0, #4
 8000a12:	0143      	lsls	r3, r0, #5
 8000a14:	d400      	bmi.n	8000a18 <__aeabi_fsub+0x88>
 8000a16:	e0a0      	b.n	8000b5a <__aeabi_fsub+0x1ca>
 8000a18:	1c6a      	adds	r2, r5, #1
 8000a1a:	2dfe      	cmp	r5, #254	; 0xfe
 8000a1c:	d100      	bne.n	8000a20 <__aeabi_fsub+0x90>
 8000a1e:	e08d      	b.n	8000b3c <__aeabi_fsub+0x1ac>
 8000a20:	0180      	lsls	r0, r0, #6
 8000a22:	0a47      	lsrs	r7, r0, #9
 8000a24:	b2d2      	uxtb	r2, r2
 8000a26:	05d0      	lsls	r0, r2, #23
 8000a28:	4338      	orrs	r0, r7
 8000a2a:	07e4      	lsls	r4, r4, #31
 8000a2c:	4320      	orrs	r0, r4
 8000a2e:	bcc0      	pop	{r6, r7}
 8000a30:	46b9      	mov	r9, r7
 8000a32:	46b0      	mov	r8, r6
 8000a34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000a36:	1aa8      	subs	r0, r5, r2
 8000a38:	4680      	mov	r8, r0
 8000a3a:	2800      	cmp	r0, #0
 8000a3c:	dd45      	ble.n	8000aca <__aeabi_fsub+0x13a>
 8000a3e:	2a00      	cmp	r2, #0
 8000a40:	d070      	beq.n	8000b24 <__aeabi_fsub+0x194>
 8000a42:	2dff      	cmp	r5, #255	; 0xff
 8000a44:	d100      	bne.n	8000a48 <__aeabi_fsub+0xb8>
 8000a46:	e09e      	b.n	8000b86 <__aeabi_fsub+0x1f6>
 8000a48:	2380      	movs	r3, #128	; 0x80
 8000a4a:	04db      	lsls	r3, r3, #19
 8000a4c:	431e      	orrs	r6, r3
 8000a4e:	4643      	mov	r3, r8
 8000a50:	2b1b      	cmp	r3, #27
 8000a52:	dc00      	bgt.n	8000a56 <__aeabi_fsub+0xc6>
 8000a54:	e0d2      	b.n	8000bfc <__aeabi_fsub+0x26c>
 8000a56:	2001      	movs	r0, #1
 8000a58:	4460      	add	r0, ip
 8000a5a:	0143      	lsls	r3, r0, #5
 8000a5c:	d57a      	bpl.n	8000b54 <__aeabi_fsub+0x1c4>
 8000a5e:	3501      	adds	r5, #1
 8000a60:	2dff      	cmp	r5, #255	; 0xff
 8000a62:	d06b      	beq.n	8000b3c <__aeabi_fsub+0x1ac>
 8000a64:	2301      	movs	r3, #1
 8000a66:	4a9d      	ldr	r2, [pc, #628]	; (8000cdc <__aeabi_fsub+0x34c>)
 8000a68:	4003      	ands	r3, r0
 8000a6a:	0840      	lsrs	r0, r0, #1
 8000a6c:	4010      	ands	r0, r2
 8000a6e:	4318      	orrs	r0, r3
 8000a70:	e7c8      	b.n	8000a04 <__aeabi_fsub+0x74>
 8000a72:	2e00      	cmp	r6, #0
 8000a74:	d020      	beq.n	8000ab8 <__aeabi_fsub+0x128>
 8000a76:	428c      	cmp	r4, r1
 8000a78:	d023      	beq.n	8000ac2 <__aeabi_fsub+0x132>
 8000a7a:	0028      	movs	r0, r5
 8000a7c:	38ff      	subs	r0, #255	; 0xff
 8000a7e:	2800      	cmp	r0, #0
 8000a80:	d039      	beq.n	8000af6 <__aeabi_fsub+0x166>
 8000a82:	1b57      	subs	r7, r2, r5
 8000a84:	2d00      	cmp	r5, #0
 8000a86:	d000      	beq.n	8000a8a <__aeabi_fsub+0xfa>
 8000a88:	e09d      	b.n	8000bc6 <__aeabi_fsub+0x236>
 8000a8a:	4663      	mov	r3, ip
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d100      	bne.n	8000a92 <__aeabi_fsub+0x102>
 8000a90:	e0db      	b.n	8000c4a <__aeabi_fsub+0x2ba>
 8000a92:	1e7b      	subs	r3, r7, #1
 8000a94:	2f01      	cmp	r7, #1
 8000a96:	d100      	bne.n	8000a9a <__aeabi_fsub+0x10a>
 8000a98:	e10d      	b.n	8000cb6 <__aeabi_fsub+0x326>
 8000a9a:	2fff      	cmp	r7, #255	; 0xff
 8000a9c:	d071      	beq.n	8000b82 <__aeabi_fsub+0x1f2>
 8000a9e:	001f      	movs	r7, r3
 8000aa0:	e098      	b.n	8000bd4 <__aeabi_fsub+0x244>
 8000aa2:	2e00      	cmp	r6, #0
 8000aa4:	d100      	bne.n	8000aa8 <__aeabi_fsub+0x118>
 8000aa6:	e0a7      	b.n	8000bf8 <__aeabi_fsub+0x268>
 8000aa8:	1e42      	subs	r2, r0, #1
 8000aaa:	2801      	cmp	r0, #1
 8000aac:	d100      	bne.n	8000ab0 <__aeabi_fsub+0x120>
 8000aae:	e0e6      	b.n	8000c7e <__aeabi_fsub+0x2ee>
 8000ab0:	28ff      	cmp	r0, #255	; 0xff
 8000ab2:	d068      	beq.n	8000b86 <__aeabi_fsub+0x1f6>
 8000ab4:	0010      	movs	r0, r2
 8000ab6:	e78f      	b.n	80009d8 <__aeabi_fsub+0x48>
 8000ab8:	2001      	movs	r0, #1
 8000aba:	4041      	eors	r1, r0
 8000abc:	42a1      	cmp	r1, r4
 8000abe:	d000      	beq.n	8000ac2 <__aeabi_fsub+0x132>
 8000ac0:	e77f      	b.n	80009c2 <__aeabi_fsub+0x32>
 8000ac2:	20ff      	movs	r0, #255	; 0xff
 8000ac4:	4240      	negs	r0, r0
 8000ac6:	4680      	mov	r8, r0
 8000ac8:	44a8      	add	r8, r5
 8000aca:	4640      	mov	r0, r8
 8000acc:	2800      	cmp	r0, #0
 8000ace:	d038      	beq.n	8000b42 <__aeabi_fsub+0x1b2>
 8000ad0:	1b51      	subs	r1, r2, r5
 8000ad2:	2d00      	cmp	r5, #0
 8000ad4:	d100      	bne.n	8000ad8 <__aeabi_fsub+0x148>
 8000ad6:	e0ae      	b.n	8000c36 <__aeabi_fsub+0x2a6>
 8000ad8:	2aff      	cmp	r2, #255	; 0xff
 8000ada:	d100      	bne.n	8000ade <__aeabi_fsub+0x14e>
 8000adc:	e0df      	b.n	8000c9e <__aeabi_fsub+0x30e>
 8000ade:	2380      	movs	r3, #128	; 0x80
 8000ae0:	4660      	mov	r0, ip
 8000ae2:	04db      	lsls	r3, r3, #19
 8000ae4:	4318      	orrs	r0, r3
 8000ae6:	4684      	mov	ip, r0
 8000ae8:	291b      	cmp	r1, #27
 8000aea:	dc00      	bgt.n	8000aee <__aeabi_fsub+0x15e>
 8000aec:	e0d9      	b.n	8000ca2 <__aeabi_fsub+0x312>
 8000aee:	2001      	movs	r0, #1
 8000af0:	0015      	movs	r5, r2
 8000af2:	1980      	adds	r0, r0, r6
 8000af4:	e7b1      	b.n	8000a5a <__aeabi_fsub+0xca>
 8000af6:	20fe      	movs	r0, #254	; 0xfe
 8000af8:	1c6a      	adds	r2, r5, #1
 8000afa:	4210      	tst	r0, r2
 8000afc:	d171      	bne.n	8000be2 <__aeabi_fsub+0x252>
 8000afe:	2d00      	cmp	r5, #0
 8000b00:	d000      	beq.n	8000b04 <__aeabi_fsub+0x174>
 8000b02:	e0a6      	b.n	8000c52 <__aeabi_fsub+0x2c2>
 8000b04:	4663      	mov	r3, ip
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d100      	bne.n	8000b0c <__aeabi_fsub+0x17c>
 8000b0a:	e0d9      	b.n	8000cc0 <__aeabi_fsub+0x330>
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	2e00      	cmp	r6, #0
 8000b10:	d100      	bne.n	8000b14 <__aeabi_fsub+0x184>
 8000b12:	e788      	b.n	8000a26 <__aeabi_fsub+0x96>
 8000b14:	1b98      	subs	r0, r3, r6
 8000b16:	0143      	lsls	r3, r0, #5
 8000b18:	d400      	bmi.n	8000b1c <__aeabi_fsub+0x18c>
 8000b1a:	e0e1      	b.n	8000ce0 <__aeabi_fsub+0x350>
 8000b1c:	4663      	mov	r3, ip
 8000b1e:	000c      	movs	r4, r1
 8000b20:	1af0      	subs	r0, r6, r3
 8000b22:	e76f      	b.n	8000a04 <__aeabi_fsub+0x74>
 8000b24:	2e00      	cmp	r6, #0
 8000b26:	d100      	bne.n	8000b2a <__aeabi_fsub+0x19a>
 8000b28:	e0b7      	b.n	8000c9a <__aeabi_fsub+0x30a>
 8000b2a:	0002      	movs	r2, r0
 8000b2c:	3a01      	subs	r2, #1
 8000b2e:	2801      	cmp	r0, #1
 8000b30:	d100      	bne.n	8000b34 <__aeabi_fsub+0x1a4>
 8000b32:	e09c      	b.n	8000c6e <__aeabi_fsub+0x2de>
 8000b34:	28ff      	cmp	r0, #255	; 0xff
 8000b36:	d026      	beq.n	8000b86 <__aeabi_fsub+0x1f6>
 8000b38:	4690      	mov	r8, r2
 8000b3a:	e788      	b.n	8000a4e <__aeabi_fsub+0xbe>
 8000b3c:	22ff      	movs	r2, #255	; 0xff
 8000b3e:	2700      	movs	r7, #0
 8000b40:	e771      	b.n	8000a26 <__aeabi_fsub+0x96>
 8000b42:	20fe      	movs	r0, #254	; 0xfe
 8000b44:	1c6a      	adds	r2, r5, #1
 8000b46:	4210      	tst	r0, r2
 8000b48:	d064      	beq.n	8000c14 <__aeabi_fsub+0x284>
 8000b4a:	2aff      	cmp	r2, #255	; 0xff
 8000b4c:	d0f6      	beq.n	8000b3c <__aeabi_fsub+0x1ac>
 8000b4e:	0015      	movs	r5, r2
 8000b50:	4466      	add	r6, ip
 8000b52:	0870      	lsrs	r0, r6, #1
 8000b54:	0743      	lsls	r3, r0, #29
 8000b56:	d000      	beq.n	8000b5a <__aeabi_fsub+0x1ca>
 8000b58:	e756      	b.n	8000a08 <__aeabi_fsub+0x78>
 8000b5a:	08c3      	lsrs	r3, r0, #3
 8000b5c:	2dff      	cmp	r5, #255	; 0xff
 8000b5e:	d012      	beq.n	8000b86 <__aeabi_fsub+0x1f6>
 8000b60:	025b      	lsls	r3, r3, #9
 8000b62:	0a5f      	lsrs	r7, r3, #9
 8000b64:	b2ea      	uxtb	r2, r5
 8000b66:	e75e      	b.n	8000a26 <__aeabi_fsub+0x96>
 8000b68:	4662      	mov	r2, ip
 8000b6a:	2a00      	cmp	r2, #0
 8000b6c:	d100      	bne.n	8000b70 <__aeabi_fsub+0x1e0>
 8000b6e:	e096      	b.n	8000c9e <__aeabi_fsub+0x30e>
 8000b70:	2e00      	cmp	r6, #0
 8000b72:	d008      	beq.n	8000b86 <__aeabi_fsub+0x1f6>
 8000b74:	2280      	movs	r2, #128	; 0x80
 8000b76:	03d2      	lsls	r2, r2, #15
 8000b78:	4213      	tst	r3, r2
 8000b7a:	d004      	beq.n	8000b86 <__aeabi_fsub+0x1f6>
 8000b7c:	4648      	mov	r0, r9
 8000b7e:	4210      	tst	r0, r2
 8000b80:	d101      	bne.n	8000b86 <__aeabi_fsub+0x1f6>
 8000b82:	000c      	movs	r4, r1
 8000b84:	464b      	mov	r3, r9
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d0d8      	beq.n	8000b3c <__aeabi_fsub+0x1ac>
 8000b8a:	2780      	movs	r7, #128	; 0x80
 8000b8c:	03ff      	lsls	r7, r7, #15
 8000b8e:	431f      	orrs	r7, r3
 8000b90:	027f      	lsls	r7, r7, #9
 8000b92:	22ff      	movs	r2, #255	; 0xff
 8000b94:	0a7f      	lsrs	r7, r7, #9
 8000b96:	e746      	b.n	8000a26 <__aeabi_fsub+0x96>
 8000b98:	2320      	movs	r3, #32
 8000b9a:	003a      	movs	r2, r7
 8000b9c:	1b45      	subs	r5, r0, r5
 8000b9e:	0038      	movs	r0, r7
 8000ba0:	3501      	adds	r5, #1
 8000ba2:	40ea      	lsrs	r2, r5
 8000ba4:	1b5d      	subs	r5, r3, r5
 8000ba6:	40a8      	lsls	r0, r5
 8000ba8:	1e43      	subs	r3, r0, #1
 8000baa:	4198      	sbcs	r0, r3
 8000bac:	2500      	movs	r5, #0
 8000bae:	4310      	orrs	r0, r2
 8000bb0:	e728      	b.n	8000a04 <__aeabi_fsub+0x74>
 8000bb2:	2320      	movs	r3, #32
 8000bb4:	1a1b      	subs	r3, r3, r0
 8000bb6:	0032      	movs	r2, r6
 8000bb8:	409e      	lsls	r6, r3
 8000bba:	40c2      	lsrs	r2, r0
 8000bbc:	0030      	movs	r0, r6
 8000bbe:	1e43      	subs	r3, r0, #1
 8000bc0:	4198      	sbcs	r0, r3
 8000bc2:	4310      	orrs	r0, r2
 8000bc4:	e70c      	b.n	80009e0 <__aeabi_fsub+0x50>
 8000bc6:	2aff      	cmp	r2, #255	; 0xff
 8000bc8:	d0db      	beq.n	8000b82 <__aeabi_fsub+0x1f2>
 8000bca:	2380      	movs	r3, #128	; 0x80
 8000bcc:	4660      	mov	r0, ip
 8000bce:	04db      	lsls	r3, r3, #19
 8000bd0:	4318      	orrs	r0, r3
 8000bd2:	4684      	mov	ip, r0
 8000bd4:	2f1b      	cmp	r7, #27
 8000bd6:	dd56      	ble.n	8000c86 <__aeabi_fsub+0x2f6>
 8000bd8:	2001      	movs	r0, #1
 8000bda:	000c      	movs	r4, r1
 8000bdc:	0015      	movs	r5, r2
 8000bde:	1a30      	subs	r0, r6, r0
 8000be0:	e700      	b.n	80009e4 <__aeabi_fsub+0x54>
 8000be2:	4663      	mov	r3, ip
 8000be4:	1b9f      	subs	r7, r3, r6
 8000be6:	017b      	lsls	r3, r7, #5
 8000be8:	d43d      	bmi.n	8000c66 <__aeabi_fsub+0x2d6>
 8000bea:	2f00      	cmp	r7, #0
 8000bec:	d000      	beq.n	8000bf0 <__aeabi_fsub+0x260>
 8000bee:	e6fe      	b.n	80009ee <__aeabi_fsub+0x5e>
 8000bf0:	2400      	movs	r4, #0
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	2700      	movs	r7, #0
 8000bf6:	e716      	b.n	8000a26 <__aeabi_fsub+0x96>
 8000bf8:	0005      	movs	r5, r0
 8000bfa:	e7af      	b.n	8000b5c <__aeabi_fsub+0x1cc>
 8000bfc:	0032      	movs	r2, r6
 8000bfe:	4643      	mov	r3, r8
 8000c00:	4641      	mov	r1, r8
 8000c02:	40da      	lsrs	r2, r3
 8000c04:	2320      	movs	r3, #32
 8000c06:	1a5b      	subs	r3, r3, r1
 8000c08:	409e      	lsls	r6, r3
 8000c0a:	0030      	movs	r0, r6
 8000c0c:	1e43      	subs	r3, r0, #1
 8000c0e:	4198      	sbcs	r0, r3
 8000c10:	4310      	orrs	r0, r2
 8000c12:	e721      	b.n	8000a58 <__aeabi_fsub+0xc8>
 8000c14:	2d00      	cmp	r5, #0
 8000c16:	d1a7      	bne.n	8000b68 <__aeabi_fsub+0x1d8>
 8000c18:	4663      	mov	r3, ip
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d059      	beq.n	8000cd2 <__aeabi_fsub+0x342>
 8000c1e:	2200      	movs	r2, #0
 8000c20:	2e00      	cmp	r6, #0
 8000c22:	d100      	bne.n	8000c26 <__aeabi_fsub+0x296>
 8000c24:	e6ff      	b.n	8000a26 <__aeabi_fsub+0x96>
 8000c26:	0030      	movs	r0, r6
 8000c28:	4460      	add	r0, ip
 8000c2a:	0143      	lsls	r3, r0, #5
 8000c2c:	d592      	bpl.n	8000b54 <__aeabi_fsub+0x1c4>
 8000c2e:	4b2a      	ldr	r3, [pc, #168]	; (8000cd8 <__aeabi_fsub+0x348>)
 8000c30:	3501      	adds	r5, #1
 8000c32:	4018      	ands	r0, r3
 8000c34:	e78e      	b.n	8000b54 <__aeabi_fsub+0x1c4>
 8000c36:	4663      	mov	r3, ip
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d047      	beq.n	8000ccc <__aeabi_fsub+0x33c>
 8000c3c:	1e4b      	subs	r3, r1, #1
 8000c3e:	2901      	cmp	r1, #1
 8000c40:	d015      	beq.n	8000c6e <__aeabi_fsub+0x2de>
 8000c42:	29ff      	cmp	r1, #255	; 0xff
 8000c44:	d02b      	beq.n	8000c9e <__aeabi_fsub+0x30e>
 8000c46:	0019      	movs	r1, r3
 8000c48:	e74e      	b.n	8000ae8 <__aeabi_fsub+0x158>
 8000c4a:	000c      	movs	r4, r1
 8000c4c:	464b      	mov	r3, r9
 8000c4e:	003d      	movs	r5, r7
 8000c50:	e784      	b.n	8000b5c <__aeabi_fsub+0x1cc>
 8000c52:	4662      	mov	r2, ip
 8000c54:	2a00      	cmp	r2, #0
 8000c56:	d18b      	bne.n	8000b70 <__aeabi_fsub+0x1e0>
 8000c58:	2e00      	cmp	r6, #0
 8000c5a:	d192      	bne.n	8000b82 <__aeabi_fsub+0x1f2>
 8000c5c:	2780      	movs	r7, #128	; 0x80
 8000c5e:	2400      	movs	r4, #0
 8000c60:	22ff      	movs	r2, #255	; 0xff
 8000c62:	03ff      	lsls	r7, r7, #15
 8000c64:	e6df      	b.n	8000a26 <__aeabi_fsub+0x96>
 8000c66:	4663      	mov	r3, ip
 8000c68:	000c      	movs	r4, r1
 8000c6a:	1af7      	subs	r7, r6, r3
 8000c6c:	e6bf      	b.n	80009ee <__aeabi_fsub+0x5e>
 8000c6e:	0030      	movs	r0, r6
 8000c70:	4460      	add	r0, ip
 8000c72:	2501      	movs	r5, #1
 8000c74:	0143      	lsls	r3, r0, #5
 8000c76:	d400      	bmi.n	8000c7a <__aeabi_fsub+0x2ea>
 8000c78:	e76c      	b.n	8000b54 <__aeabi_fsub+0x1c4>
 8000c7a:	2502      	movs	r5, #2
 8000c7c:	e6f2      	b.n	8000a64 <__aeabi_fsub+0xd4>
 8000c7e:	4663      	mov	r3, ip
 8000c80:	2501      	movs	r5, #1
 8000c82:	1b98      	subs	r0, r3, r6
 8000c84:	e6ae      	b.n	80009e4 <__aeabi_fsub+0x54>
 8000c86:	2320      	movs	r3, #32
 8000c88:	4664      	mov	r4, ip
 8000c8a:	4660      	mov	r0, ip
 8000c8c:	40fc      	lsrs	r4, r7
 8000c8e:	1bdf      	subs	r7, r3, r7
 8000c90:	40b8      	lsls	r0, r7
 8000c92:	1e43      	subs	r3, r0, #1
 8000c94:	4198      	sbcs	r0, r3
 8000c96:	4320      	orrs	r0, r4
 8000c98:	e79f      	b.n	8000bda <__aeabi_fsub+0x24a>
 8000c9a:	0005      	movs	r5, r0
 8000c9c:	e75e      	b.n	8000b5c <__aeabi_fsub+0x1cc>
 8000c9e:	464b      	mov	r3, r9
 8000ca0:	e771      	b.n	8000b86 <__aeabi_fsub+0x1f6>
 8000ca2:	2320      	movs	r3, #32
 8000ca4:	4665      	mov	r5, ip
 8000ca6:	4660      	mov	r0, ip
 8000ca8:	40cd      	lsrs	r5, r1
 8000caa:	1a59      	subs	r1, r3, r1
 8000cac:	4088      	lsls	r0, r1
 8000cae:	1e43      	subs	r3, r0, #1
 8000cb0:	4198      	sbcs	r0, r3
 8000cb2:	4328      	orrs	r0, r5
 8000cb4:	e71c      	b.n	8000af0 <__aeabi_fsub+0x160>
 8000cb6:	4663      	mov	r3, ip
 8000cb8:	000c      	movs	r4, r1
 8000cba:	2501      	movs	r5, #1
 8000cbc:	1af0      	subs	r0, r6, r3
 8000cbe:	e691      	b.n	80009e4 <__aeabi_fsub+0x54>
 8000cc0:	2e00      	cmp	r6, #0
 8000cc2:	d095      	beq.n	8000bf0 <__aeabi_fsub+0x260>
 8000cc4:	000c      	movs	r4, r1
 8000cc6:	464f      	mov	r7, r9
 8000cc8:	2200      	movs	r2, #0
 8000cca:	e6ac      	b.n	8000a26 <__aeabi_fsub+0x96>
 8000ccc:	464b      	mov	r3, r9
 8000cce:	000d      	movs	r5, r1
 8000cd0:	e744      	b.n	8000b5c <__aeabi_fsub+0x1cc>
 8000cd2:	464f      	mov	r7, r9
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	e6a6      	b.n	8000a26 <__aeabi_fsub+0x96>
 8000cd8:	fbffffff 	.word	0xfbffffff
 8000cdc:	7dffffff 	.word	0x7dffffff
 8000ce0:	2800      	cmp	r0, #0
 8000ce2:	d000      	beq.n	8000ce6 <__aeabi_fsub+0x356>
 8000ce4:	e736      	b.n	8000b54 <__aeabi_fsub+0x1c4>
 8000ce6:	2400      	movs	r4, #0
 8000ce8:	2700      	movs	r7, #0
 8000cea:	e69c      	b.n	8000a26 <__aeabi_fsub+0x96>

08000cec <__aeabi_f2iz>:
 8000cec:	0241      	lsls	r1, r0, #9
 8000cee:	0042      	lsls	r2, r0, #1
 8000cf0:	0fc3      	lsrs	r3, r0, #31
 8000cf2:	0a49      	lsrs	r1, r1, #9
 8000cf4:	2000      	movs	r0, #0
 8000cf6:	0e12      	lsrs	r2, r2, #24
 8000cf8:	2a7e      	cmp	r2, #126	; 0x7e
 8000cfa:	dd03      	ble.n	8000d04 <__aeabi_f2iz+0x18>
 8000cfc:	2a9d      	cmp	r2, #157	; 0x9d
 8000cfe:	dd02      	ble.n	8000d06 <__aeabi_f2iz+0x1a>
 8000d00:	4a09      	ldr	r2, [pc, #36]	; (8000d28 <__aeabi_f2iz+0x3c>)
 8000d02:	1898      	adds	r0, r3, r2
 8000d04:	4770      	bx	lr
 8000d06:	2080      	movs	r0, #128	; 0x80
 8000d08:	0400      	lsls	r0, r0, #16
 8000d0a:	4301      	orrs	r1, r0
 8000d0c:	2a95      	cmp	r2, #149	; 0x95
 8000d0e:	dc07      	bgt.n	8000d20 <__aeabi_f2iz+0x34>
 8000d10:	2096      	movs	r0, #150	; 0x96
 8000d12:	1a82      	subs	r2, r0, r2
 8000d14:	40d1      	lsrs	r1, r2
 8000d16:	4248      	negs	r0, r1
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d1f3      	bne.n	8000d04 <__aeabi_f2iz+0x18>
 8000d1c:	0008      	movs	r0, r1
 8000d1e:	e7f1      	b.n	8000d04 <__aeabi_f2iz+0x18>
 8000d20:	3a96      	subs	r2, #150	; 0x96
 8000d22:	4091      	lsls	r1, r2
 8000d24:	e7f7      	b.n	8000d16 <__aeabi_f2iz+0x2a>
 8000d26:	46c0      	nop			; (mov r8, r8)
 8000d28:	7fffffff 	.word	0x7fffffff

08000d2c <__aeabi_i2f>:
 8000d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d2e:	2800      	cmp	r0, #0
 8000d30:	d013      	beq.n	8000d5a <__aeabi_i2f+0x2e>
 8000d32:	17c3      	asrs	r3, r0, #31
 8000d34:	18c6      	adds	r6, r0, r3
 8000d36:	405e      	eors	r6, r3
 8000d38:	0fc4      	lsrs	r4, r0, #31
 8000d3a:	0030      	movs	r0, r6
 8000d3c:	f000 f88c 	bl	8000e58 <__clzsi2>
 8000d40:	239e      	movs	r3, #158	; 0x9e
 8000d42:	0005      	movs	r5, r0
 8000d44:	1a1b      	subs	r3, r3, r0
 8000d46:	2b96      	cmp	r3, #150	; 0x96
 8000d48:	dc0f      	bgt.n	8000d6a <__aeabi_i2f+0x3e>
 8000d4a:	2808      	cmp	r0, #8
 8000d4c:	dd01      	ble.n	8000d52 <__aeabi_i2f+0x26>
 8000d4e:	3d08      	subs	r5, #8
 8000d50:	40ae      	lsls	r6, r5
 8000d52:	0276      	lsls	r6, r6, #9
 8000d54:	0a76      	lsrs	r6, r6, #9
 8000d56:	b2d8      	uxtb	r0, r3
 8000d58:	e002      	b.n	8000d60 <__aeabi_i2f+0x34>
 8000d5a:	2400      	movs	r4, #0
 8000d5c:	2000      	movs	r0, #0
 8000d5e:	2600      	movs	r6, #0
 8000d60:	05c0      	lsls	r0, r0, #23
 8000d62:	4330      	orrs	r0, r6
 8000d64:	07e4      	lsls	r4, r4, #31
 8000d66:	4320      	orrs	r0, r4
 8000d68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000d6a:	2b99      	cmp	r3, #153	; 0x99
 8000d6c:	dd0c      	ble.n	8000d88 <__aeabi_i2f+0x5c>
 8000d6e:	2205      	movs	r2, #5
 8000d70:	0031      	movs	r1, r6
 8000d72:	1a12      	subs	r2, r2, r0
 8000d74:	40d1      	lsrs	r1, r2
 8000d76:	000a      	movs	r2, r1
 8000d78:	0001      	movs	r1, r0
 8000d7a:	0030      	movs	r0, r6
 8000d7c:	311b      	adds	r1, #27
 8000d7e:	4088      	lsls	r0, r1
 8000d80:	1e41      	subs	r1, r0, #1
 8000d82:	4188      	sbcs	r0, r1
 8000d84:	4302      	orrs	r2, r0
 8000d86:	0016      	movs	r6, r2
 8000d88:	2d05      	cmp	r5, #5
 8000d8a:	dc12      	bgt.n	8000db2 <__aeabi_i2f+0x86>
 8000d8c:	0031      	movs	r1, r6
 8000d8e:	4f0d      	ldr	r7, [pc, #52]	; (8000dc4 <__aeabi_i2f+0x98>)
 8000d90:	4039      	ands	r1, r7
 8000d92:	0772      	lsls	r2, r6, #29
 8000d94:	d009      	beq.n	8000daa <__aeabi_i2f+0x7e>
 8000d96:	200f      	movs	r0, #15
 8000d98:	4030      	ands	r0, r6
 8000d9a:	2804      	cmp	r0, #4
 8000d9c:	d005      	beq.n	8000daa <__aeabi_i2f+0x7e>
 8000d9e:	3104      	adds	r1, #4
 8000da0:	014a      	lsls	r2, r1, #5
 8000da2:	d502      	bpl.n	8000daa <__aeabi_i2f+0x7e>
 8000da4:	239f      	movs	r3, #159	; 0x9f
 8000da6:	4039      	ands	r1, r7
 8000da8:	1b5b      	subs	r3, r3, r5
 8000daa:	0189      	lsls	r1, r1, #6
 8000dac:	0a4e      	lsrs	r6, r1, #9
 8000dae:	b2d8      	uxtb	r0, r3
 8000db0:	e7d6      	b.n	8000d60 <__aeabi_i2f+0x34>
 8000db2:	1f6a      	subs	r2, r5, #5
 8000db4:	4096      	lsls	r6, r2
 8000db6:	0031      	movs	r1, r6
 8000db8:	4f02      	ldr	r7, [pc, #8]	; (8000dc4 <__aeabi_i2f+0x98>)
 8000dba:	4039      	ands	r1, r7
 8000dbc:	0772      	lsls	r2, r6, #29
 8000dbe:	d0f4      	beq.n	8000daa <__aeabi_i2f+0x7e>
 8000dc0:	e7e9      	b.n	8000d96 <__aeabi_i2f+0x6a>
 8000dc2:	46c0      	nop			; (mov r8, r8)
 8000dc4:	fbffffff 	.word	0xfbffffff

08000dc8 <__aeabi_f2d>:
 8000dc8:	b570      	push	{r4, r5, r6, lr}
 8000dca:	0043      	lsls	r3, r0, #1
 8000dcc:	0246      	lsls	r6, r0, #9
 8000dce:	0fc4      	lsrs	r4, r0, #31
 8000dd0:	20fe      	movs	r0, #254	; 0xfe
 8000dd2:	0e1b      	lsrs	r3, r3, #24
 8000dd4:	1c59      	adds	r1, r3, #1
 8000dd6:	0a75      	lsrs	r5, r6, #9
 8000dd8:	4208      	tst	r0, r1
 8000dda:	d00c      	beq.n	8000df6 <__aeabi_f2d+0x2e>
 8000ddc:	22e0      	movs	r2, #224	; 0xe0
 8000dde:	0092      	lsls	r2, r2, #2
 8000de0:	4694      	mov	ip, r2
 8000de2:	076d      	lsls	r5, r5, #29
 8000de4:	0b36      	lsrs	r6, r6, #12
 8000de6:	4463      	add	r3, ip
 8000de8:	051b      	lsls	r3, r3, #20
 8000dea:	4333      	orrs	r3, r6
 8000dec:	07e4      	lsls	r4, r4, #31
 8000dee:	4323      	orrs	r3, r4
 8000df0:	0028      	movs	r0, r5
 8000df2:	0019      	movs	r1, r3
 8000df4:	bd70      	pop	{r4, r5, r6, pc}
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d114      	bne.n	8000e24 <__aeabi_f2d+0x5c>
 8000dfa:	2d00      	cmp	r5, #0
 8000dfc:	d01b      	beq.n	8000e36 <__aeabi_f2d+0x6e>
 8000dfe:	0028      	movs	r0, r5
 8000e00:	f000 f82a 	bl	8000e58 <__clzsi2>
 8000e04:	280a      	cmp	r0, #10
 8000e06:	dc1c      	bgt.n	8000e42 <__aeabi_f2d+0x7a>
 8000e08:	230b      	movs	r3, #11
 8000e0a:	002e      	movs	r6, r5
 8000e0c:	1a1b      	subs	r3, r3, r0
 8000e0e:	40de      	lsrs	r6, r3
 8000e10:	0003      	movs	r3, r0
 8000e12:	3315      	adds	r3, #21
 8000e14:	409d      	lsls	r5, r3
 8000e16:	4a0e      	ldr	r2, [pc, #56]	; (8000e50 <__aeabi_f2d+0x88>)
 8000e18:	0336      	lsls	r6, r6, #12
 8000e1a:	1a12      	subs	r2, r2, r0
 8000e1c:	0552      	lsls	r2, r2, #21
 8000e1e:	0b36      	lsrs	r6, r6, #12
 8000e20:	0d53      	lsrs	r3, r2, #21
 8000e22:	e7e1      	b.n	8000de8 <__aeabi_f2d+0x20>
 8000e24:	2d00      	cmp	r5, #0
 8000e26:	d009      	beq.n	8000e3c <__aeabi_f2d+0x74>
 8000e28:	2280      	movs	r2, #128	; 0x80
 8000e2a:	0b36      	lsrs	r6, r6, #12
 8000e2c:	0312      	lsls	r2, r2, #12
 8000e2e:	4b09      	ldr	r3, [pc, #36]	; (8000e54 <__aeabi_f2d+0x8c>)
 8000e30:	076d      	lsls	r5, r5, #29
 8000e32:	4316      	orrs	r6, r2
 8000e34:	e7d8      	b.n	8000de8 <__aeabi_f2d+0x20>
 8000e36:	2300      	movs	r3, #0
 8000e38:	2600      	movs	r6, #0
 8000e3a:	e7d5      	b.n	8000de8 <__aeabi_f2d+0x20>
 8000e3c:	2600      	movs	r6, #0
 8000e3e:	4b05      	ldr	r3, [pc, #20]	; (8000e54 <__aeabi_f2d+0x8c>)
 8000e40:	e7d2      	b.n	8000de8 <__aeabi_f2d+0x20>
 8000e42:	0003      	movs	r3, r0
 8000e44:	3b0b      	subs	r3, #11
 8000e46:	409d      	lsls	r5, r3
 8000e48:	002e      	movs	r6, r5
 8000e4a:	2500      	movs	r5, #0
 8000e4c:	e7e3      	b.n	8000e16 <__aeabi_f2d+0x4e>
 8000e4e:	46c0      	nop			; (mov r8, r8)
 8000e50:	00000389 	.word	0x00000389
 8000e54:	000007ff 	.word	0x000007ff

08000e58 <__clzsi2>:
 8000e58:	211c      	movs	r1, #28
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	041b      	lsls	r3, r3, #16
 8000e5e:	4298      	cmp	r0, r3
 8000e60:	d301      	bcc.n	8000e66 <__clzsi2+0xe>
 8000e62:	0c00      	lsrs	r0, r0, #16
 8000e64:	3910      	subs	r1, #16
 8000e66:	0a1b      	lsrs	r3, r3, #8
 8000e68:	4298      	cmp	r0, r3
 8000e6a:	d301      	bcc.n	8000e70 <__clzsi2+0x18>
 8000e6c:	0a00      	lsrs	r0, r0, #8
 8000e6e:	3908      	subs	r1, #8
 8000e70:	091b      	lsrs	r3, r3, #4
 8000e72:	4298      	cmp	r0, r3
 8000e74:	d301      	bcc.n	8000e7a <__clzsi2+0x22>
 8000e76:	0900      	lsrs	r0, r0, #4
 8000e78:	3904      	subs	r1, #4
 8000e7a:	a202      	add	r2, pc, #8	; (adr r2, 8000e84 <__clzsi2+0x2c>)
 8000e7c:	5c10      	ldrb	r0, [r2, r0]
 8000e7e:	1840      	adds	r0, r0, r1
 8000e80:	4770      	bx	lr
 8000e82:	46c0      	nop			; (mov r8, r8)
 8000e84:	02020304 	.word	0x02020304
 8000e88:	01010101 	.word	0x01010101
	...

08000e94 <convert_DDmm_to_DDD>:
static void MX_USART2_UART_Init(void);
static void MX_DMA_Init(void);
static void MX_USART1_UART_Init(void);
/* USER CODE BEGIN PFP */

float convert_DDmm_to_DDD(float DDmm, char *sign){
 8000e94:	b590      	push	{r4, r7, lr}
 8000e96:	b087      	sub	sp, #28
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
 8000e9c:	6039      	str	r1, [r7, #0]

    //convert to DDD format
    int DD = ((int)DDmm)/100;
 8000e9e:	6878      	ldr	r0, [r7, #4]
 8000ea0:	f7ff ff24 	bl	8000cec <__aeabi_f2iz>
 8000ea4:	0003      	movs	r3, r0
 8000ea6:	2164      	movs	r1, #100	; 0x64
 8000ea8:	0018      	movs	r0, r3
 8000eaa:	f7ff f9cf 	bl	800024c <__divsi3>
 8000eae:	0003      	movs	r3, r0
 8000eb0:	613b      	str	r3, [r7, #16]
    float mm = DDmm - DD*100;
 8000eb2:	693b      	ldr	r3, [r7, #16]
 8000eb4:	2264      	movs	r2, #100	; 0x64
 8000eb6:	4353      	muls	r3, r2
 8000eb8:	0018      	movs	r0, r3
 8000eba:	f7ff ff37 	bl	8000d2c <__aeabi_i2f>
 8000ebe:	1c03      	adds	r3, r0, #0
 8000ec0:	1c19      	adds	r1, r3, #0
 8000ec2:	6878      	ldr	r0, [r7, #4]
 8000ec4:	f7ff fd64 	bl	8000990 <__aeabi_fsub>
 8000ec8:	1c03      	adds	r3, r0, #0
 8000eca:	60fb      	str	r3, [r7, #12]
    float DDD = DD + mm/60;
 8000ecc:	6938      	ldr	r0, [r7, #16]
 8000ece:	f7ff ff2d 	bl	8000d2c <__aeabi_i2f>
 8000ed2:	1c04      	adds	r4, r0, #0
 8000ed4:	4912      	ldr	r1, [pc, #72]	; (8000f20 <convert_DDmm_to_DDD+0x8c>)
 8000ed6:	68f8      	ldr	r0, [r7, #12]
 8000ed8:	f7ff fc42 	bl	8000760 <__aeabi_fdiv>
 8000edc:	1c03      	adds	r3, r0, #0
 8000ede:	1c19      	adds	r1, r3, #0
 8000ee0:	1c20      	adds	r0, r4, #0
 8000ee2:	f7ff fa9f 	bl	8000424 <__aeabi_fadd>
 8000ee6:	1c03      	adds	r3, r0, #0
 8000ee8:	617b      	str	r3, [r7, #20]

    //add negative sign if south or west
    if (strcmp(sign,"S") == 0 || strcmp(sign,"W") == 0){
 8000eea:	4a0e      	ldr	r2, [pc, #56]	; (8000f24 <convert_DDmm_to_DDD+0x90>)
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	0011      	movs	r1, r2
 8000ef0:	0018      	movs	r0, r3
 8000ef2:	f7ff f905 	bl	8000100 <strcmp>
 8000ef6:	1e03      	subs	r3, r0, #0
 8000ef8:	d007      	beq.n	8000f0a <convert_DDmm_to_DDD+0x76>
 8000efa:	4a0b      	ldr	r2, [pc, #44]	; (8000f28 <convert_DDmm_to_DDD+0x94>)
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	0011      	movs	r1, r2
 8000f00:	0018      	movs	r0, r3
 8000f02:	f7ff f8fd 	bl	8000100 <strcmp>
 8000f06:	1e03      	subs	r3, r0, #0
 8000f08:	d104      	bne.n	8000f14 <convert_DDmm_to_DDD+0x80>
        DDD = -DDD;
 8000f0a:	697b      	ldr	r3, [r7, #20]
 8000f0c:	2280      	movs	r2, #128	; 0x80
 8000f0e:	0612      	lsls	r2, r2, #24
 8000f10:	4053      	eors	r3, r2
 8000f12:	617b      	str	r3, [r7, #20]
    }

    return DDD;
 8000f14:	697b      	ldr	r3, [r7, #20]
}
 8000f16:	1c18      	adds	r0, r3, #0
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	b007      	add	sp, #28
 8000f1c:	bd90      	pop	{r4, r7, pc}
 8000f1e:	46c0      	nop			; (mov r8, r8)
 8000f20:	42700000 	.word	0x42700000
 8000f24:	0800510c 	.word	0x0800510c
 8000f28:	08005110 	.word	0x08005110

08000f2c <extract_location_from_nmea_raw_data>:

void extract_location_from_nmea_raw_data(char nmea_raw_data[], char *loc_str[]){
 8000f2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f2e:	b08b      	sub	sp, #44	; 0x2c
 8000f30:	af02      	add	r7, sp, #8
 8000f32:	6078      	str	r0, [r7, #4]
 8000f34:	6039      	str	r1, [r7, #0]

    const __uint8_t GLL_MSG_LEN = 47;
 8000f36:	241f      	movs	r4, #31
 8000f38:	193b      	adds	r3, r7, r4
 8000f3a:	222f      	movs	r2, #47	; 0x2f
 8000f3c:	701a      	strb	r2, [r3, #0]
    float latitude, longitude;
    char lat_sign, long_sign;
    char *start_GLL_msg;
    int len_GLL_msg;

    start_GLL_msg = strstr(nmea_raw_data, "GLL");
 8000f3e:	4a24      	ldr	r2, [pc, #144]	; (8000fd0 <extract_location_from_nmea_raw_data+0xa4>)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	0011      	movs	r1, r2
 8000f44:	0018      	movs	r0, r3
 8000f46:	f002 ff9f 	bl	8003e88 <strstr>
 8000f4a:	0003      	movs	r3, r0
 8000f4c:	61bb      	str	r3, [r7, #24]
    len_GLL_msg = strlen(start_GLL_msg);
 8000f4e:	69bb      	ldr	r3, [r7, #24]
 8000f50:	0018      	movs	r0, r3
 8000f52:	f7ff f8df 	bl	8000114 <strlen>
 8000f56:	0003      	movs	r3, r0
 8000f58:	617b      	str	r3, [r7, #20]

    //message is not valid as does not have minimum length
    if (len_GLL_msg < GLL_MSG_LEN){
 8000f5a:	193b      	adds	r3, r7, r4
 8000f5c:	781b      	ldrb	r3, [r3, #0]
 8000f5e:	697a      	ldr	r2, [r7, #20]
 8000f60:	429a      	cmp	r2, r3
 8000f62:	da03      	bge.n	8000f6c <extract_location_from_nmea_raw_data+0x40>
        *loc_str = "";
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	4a1b      	ldr	r2, [pc, #108]	; (8000fd4 <extract_location_from_nmea_raw_data+0xa8>)
 8000f68:	601a      	str	r2, [r3, #0]
 8000f6a:	e02e      	b.n	8000fca <extract_location_from_nmea_raw_data+0x9e>
        return;
    }

    sscanf(start_GLL_msg, "GLL,%f,%c,%f,%c,",&latitude, &lat_sign, &longitude, &long_sign);
 8000f6c:	250b      	movs	r5, #11
 8000f6e:	197c      	adds	r4, r7, r5
 8000f70:	2310      	movs	r3, #16
 8000f72:	18fa      	adds	r2, r7, r3
 8000f74:	4918      	ldr	r1, [pc, #96]	; (8000fd8 <extract_location_from_nmea_raw_data+0xac>)
 8000f76:	69b8      	ldr	r0, [r7, #24]
 8000f78:	260a      	movs	r6, #10
 8000f7a:	19bb      	adds	r3, r7, r6
 8000f7c:	9301      	str	r3, [sp, #4]
 8000f7e:	230c      	movs	r3, #12
 8000f80:	18fb      	adds	r3, r7, r3
 8000f82:	9300      	str	r3, [sp, #0]
 8000f84:	0023      	movs	r3, r4
 8000f86:	f002 ff55 	bl	8003e34 <siscanf>

    sprintf(loc_str, "%f,%f\r\n",convert_DDmm_to_DDD(latitude,&lat_sign),convert_DDmm_to_DDD(longitude,&long_sign));
 8000f8a:	693b      	ldr	r3, [r7, #16]
 8000f8c:	197a      	adds	r2, r7, r5
 8000f8e:	0011      	movs	r1, r2
 8000f90:	1c18      	adds	r0, r3, #0
 8000f92:	f7ff ff7f 	bl	8000e94 <convert_DDmm_to_DDD>
 8000f96:	1c03      	adds	r3, r0, #0
 8000f98:	1c18      	adds	r0, r3, #0
 8000f9a:	f7ff ff15 	bl	8000dc8 <__aeabi_f2d>
 8000f9e:	0004      	movs	r4, r0
 8000fa0:	000d      	movs	r5, r1
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	19ba      	adds	r2, r7, r6
 8000fa6:	0011      	movs	r1, r2
 8000fa8:	1c18      	adds	r0, r3, #0
 8000faa:	f7ff ff73 	bl	8000e94 <convert_DDmm_to_DDD>
 8000fae:	1c03      	adds	r3, r0, #0
 8000fb0:	1c18      	adds	r0, r3, #0
 8000fb2:	f7ff ff09 	bl	8000dc8 <__aeabi_f2d>
 8000fb6:	0002      	movs	r2, r0
 8000fb8:	000b      	movs	r3, r1
 8000fba:	4908      	ldr	r1, [pc, #32]	; (8000fdc <extract_location_from_nmea_raw_data+0xb0>)
 8000fbc:	6838      	ldr	r0, [r7, #0]
 8000fbe:	9200      	str	r2, [sp, #0]
 8000fc0:	9301      	str	r3, [sp, #4]
 8000fc2:	0022      	movs	r2, r4
 8000fc4:	002b      	movs	r3, r5
 8000fc6:	f002 ff15 	bl	8003df4 <siprintf>

}
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	b009      	add	sp, #36	; 0x24
 8000fce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000fd0:	08005114 	.word	0x08005114
 8000fd4:	08005118 	.word	0x08005118
 8000fd8:	0800511c 	.word	0x0800511c
 8000fdc:	08005130 	.word	0x08005130

08000fe0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fe6:	f000 fb73 	bl	80016d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fea:	f000 f835 	bl	8001058 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fee:	f000 f935 	bl	800125c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000ff2:	f000 f8c7 	bl	8001184 <MX_USART2_UART_Init>
  MX_DMA_Init();
 8000ff6:	f000 f913 	bl	8001220 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000ffa:	f000 f875 	bl	80010e8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_DMA (&huart1, (uint8_t*)UART1_rxBuffer, 700);
 8000ffe:	23af      	movs	r3, #175	; 0xaf
 8001000:	009a      	lsls	r2, r3, #2
 8001002:	4911      	ldr	r1, [pc, #68]	; (8001048 <main+0x68>)
 8001004:	4b11      	ldr	r3, [pc, #68]	; (800104c <main+0x6c>)
 8001006:	0018      	movs	r0, r3
 8001008:	f001 ff74 	bl	8002ef4 <HAL_UART_Receive_DMA>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	//copy buffer content into char array
	int i = 0;
 800100c:	2300      	movs	r3, #0
 800100e:	607b      	str	r3, [r7, #4]
    for (i=0;i<BUFF_SIZE;i++){
 8001010:	2300      	movs	r3, #0
 8001012:	607b      	str	r3, [r7, #4]
 8001014:	e00b      	b.n	800102e <main+0x4e>
        nmea_raw_data[i] = (char) UART1_rxBuffer[i];
 8001016:	4a0c      	ldr	r2, [pc, #48]	; (8001048 <main+0x68>)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	18d3      	adds	r3, r2, r3
 800101c:	7819      	ldrb	r1, [r3, #0]
 800101e:	4a0c      	ldr	r2, [pc, #48]	; (8001050 <main+0x70>)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	18d3      	adds	r3, r2, r3
 8001024:	1c0a      	adds	r2, r1, #0
 8001026:	701a      	strb	r2, [r3, #0]
    for (i=0;i<BUFF_SIZE;i++){
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	3301      	adds	r3, #1
 800102c:	607b      	str	r3, [r7, #4]
 800102e:	687a      	ldr	r2, [r7, #4]
 8001030:	23af      	movs	r3, #175	; 0xaf
 8001032:	009b      	lsls	r3, r3, #2
 8001034:	429a      	cmp	r2, r3
 8001036:	dbee      	blt.n	8001016 <main+0x36>
    }

    //extract location under "DDD,DDD" format
	extract_location_from_nmea_raw_data(nmea_raw_data, &loc_str);
 8001038:	4a06      	ldr	r2, [pc, #24]	; (8001054 <main+0x74>)
 800103a:	4b05      	ldr	r3, [pc, #20]	; (8001050 <main+0x70>)
 800103c:	0011      	movs	r1, r2
 800103e:	0018      	movs	r0, r3
 8001040:	f7ff ff74 	bl	8000f2c <extract_location_from_nmea_raw_data>
  {
 8001044:	e7e2      	b.n	800100c <main+0x2c>
 8001046:	46c0      	nop			; (mov r8, r8)
 8001048:	200000c0 	.word	0x200000c0
 800104c:	20000638 	.word	0x20000638
 8001050:	2000037c 	.word	0x2000037c
 8001054:	20000000 	.word	0x20000000

08001058 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001058:	b590      	push	{r4, r7, lr}
 800105a:	b093      	sub	sp, #76	; 0x4c
 800105c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800105e:	2414      	movs	r4, #20
 8001060:	193b      	adds	r3, r7, r4
 8001062:	0018      	movs	r0, r3
 8001064:	2334      	movs	r3, #52	; 0x34
 8001066:	001a      	movs	r2, r3
 8001068:	2100      	movs	r1, #0
 800106a:	f002 febb 	bl	8003de4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800106e:	1d3b      	adds	r3, r7, #4
 8001070:	0018      	movs	r0, r3
 8001072:	2310      	movs	r3, #16
 8001074:	001a      	movs	r2, r3
 8001076:	2100      	movs	r1, #0
 8001078:	f002 feb4 	bl	8003de4 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800107c:	2380      	movs	r3, #128	; 0x80
 800107e:	009b      	lsls	r3, r3, #2
 8001080:	0018      	movs	r0, r3
 8001082:	f001 f8a7 	bl	80021d4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001086:	193b      	adds	r3, r7, r4
 8001088:	2202      	movs	r2, #2
 800108a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800108c:	193b      	adds	r3, r7, r4
 800108e:	2280      	movs	r2, #128	; 0x80
 8001090:	0052      	lsls	r2, r2, #1
 8001092:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8001094:	193b      	adds	r3, r7, r4
 8001096:	2200      	movs	r2, #0
 8001098:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800109a:	193b      	adds	r3, r7, r4
 800109c:	2240      	movs	r2, #64	; 0x40
 800109e:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80010a0:	193b      	adds	r3, r7, r4
 80010a2:	2200      	movs	r2, #0
 80010a4:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010a6:	193b      	adds	r3, r7, r4
 80010a8:	0018      	movs	r0, r3
 80010aa:	f001 f8df 	bl	800226c <HAL_RCC_OscConfig>
 80010ae:	1e03      	subs	r3, r0, #0
 80010b0:	d001      	beq.n	80010b6 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80010b2:	f000 f974 	bl	800139e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010b6:	1d3b      	adds	r3, r7, #4
 80010b8:	2207      	movs	r2, #7
 80010ba:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80010bc:	1d3b      	adds	r3, r7, #4
 80010be:	2200      	movs	r2, #0
 80010c0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010c2:	1d3b      	adds	r3, r7, #4
 80010c4:	2200      	movs	r2, #0
 80010c6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010c8:	1d3b      	adds	r3, r7, #4
 80010ca:	2200      	movs	r2, #0
 80010cc:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80010ce:	1d3b      	adds	r3, r7, #4
 80010d0:	2100      	movs	r1, #0
 80010d2:	0018      	movs	r0, r3
 80010d4:	f001 fbda 	bl	800288c <HAL_RCC_ClockConfig>
 80010d8:	1e03      	subs	r3, r0, #0
 80010da:	d001      	beq.n	80010e0 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80010dc:	f000 f95f 	bl	800139e <Error_Handler>
  }
}
 80010e0:	46c0      	nop			; (mov r8, r8)
 80010e2:	46bd      	mov	sp, r7
 80010e4:	b013      	add	sp, #76	; 0x4c
 80010e6:	bd90      	pop	{r4, r7, pc}

080010e8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80010ec:	4b23      	ldr	r3, [pc, #140]	; (800117c <MX_USART1_UART_Init+0x94>)
 80010ee:	4a24      	ldr	r2, [pc, #144]	; (8001180 <MX_USART1_UART_Init+0x98>)
 80010f0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 80010f2:	4b22      	ldr	r3, [pc, #136]	; (800117c <MX_USART1_UART_Init+0x94>)
 80010f4:	2296      	movs	r2, #150	; 0x96
 80010f6:	0212      	lsls	r2, r2, #8
 80010f8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80010fa:	4b20      	ldr	r3, [pc, #128]	; (800117c <MX_USART1_UART_Init+0x94>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001100:	4b1e      	ldr	r3, [pc, #120]	; (800117c <MX_USART1_UART_Init+0x94>)
 8001102:	2200      	movs	r2, #0
 8001104:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001106:	4b1d      	ldr	r3, [pc, #116]	; (800117c <MX_USART1_UART_Init+0x94>)
 8001108:	2200      	movs	r2, #0
 800110a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800110c:	4b1b      	ldr	r3, [pc, #108]	; (800117c <MX_USART1_UART_Init+0x94>)
 800110e:	220c      	movs	r2, #12
 8001110:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001112:	4b1a      	ldr	r3, [pc, #104]	; (800117c <MX_USART1_UART_Init+0x94>)
 8001114:	2200      	movs	r2, #0
 8001116:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001118:	4b18      	ldr	r3, [pc, #96]	; (800117c <MX_USART1_UART_Init+0x94>)
 800111a:	2200      	movs	r2, #0
 800111c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800111e:	4b17      	ldr	r3, [pc, #92]	; (800117c <MX_USART1_UART_Init+0x94>)
 8001120:	2200      	movs	r2, #0
 8001122:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001124:	4b15      	ldr	r3, [pc, #84]	; (800117c <MX_USART1_UART_Init+0x94>)
 8001126:	2200      	movs	r2, #0
 8001128:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800112a:	4b14      	ldr	r3, [pc, #80]	; (800117c <MX_USART1_UART_Init+0x94>)
 800112c:	2200      	movs	r2, #0
 800112e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001130:	4b12      	ldr	r3, [pc, #72]	; (800117c <MX_USART1_UART_Init+0x94>)
 8001132:	0018      	movs	r0, r3
 8001134:	f001 fe88 	bl	8002e48 <HAL_UART_Init>
 8001138:	1e03      	subs	r3, r0, #0
 800113a:	d001      	beq.n	8001140 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800113c:	f000 f92f 	bl	800139e <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001140:	4b0e      	ldr	r3, [pc, #56]	; (800117c <MX_USART1_UART_Init+0x94>)
 8001142:	2100      	movs	r1, #0
 8001144:	0018      	movs	r0, r3
 8001146:	f002 fd43 	bl	8003bd0 <HAL_UARTEx_SetTxFifoThreshold>
 800114a:	1e03      	subs	r3, r0, #0
 800114c:	d001      	beq.n	8001152 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800114e:	f000 f926 	bl	800139e <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001152:	4b0a      	ldr	r3, [pc, #40]	; (800117c <MX_USART1_UART_Init+0x94>)
 8001154:	2100      	movs	r1, #0
 8001156:	0018      	movs	r0, r3
 8001158:	f002 fd7a 	bl	8003c50 <HAL_UARTEx_SetRxFifoThreshold>
 800115c:	1e03      	subs	r3, r0, #0
 800115e:	d001      	beq.n	8001164 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001160:	f000 f91d 	bl	800139e <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001164:	4b05      	ldr	r3, [pc, #20]	; (800117c <MX_USART1_UART_Init+0x94>)
 8001166:	0018      	movs	r0, r3
 8001168:	f002 fcf8 	bl	8003b5c <HAL_UARTEx_DisableFifoMode>
 800116c:	1e03      	subs	r3, r0, #0
 800116e:	d001      	beq.n	8001174 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001170:	f000 f915 	bl	800139e <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001174:	46c0      	nop			; (mov r8, r8)
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	46c0      	nop			; (mov r8, r8)
 800117c:	20000638 	.word	0x20000638
 8001180:	40013800 	.word	0x40013800

08001184 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001188:	4b23      	ldr	r3, [pc, #140]	; (8001218 <MX_USART2_UART_Init+0x94>)
 800118a:	4a24      	ldr	r2, [pc, #144]	; (800121c <MX_USART2_UART_Init+0x98>)
 800118c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800118e:	4b22      	ldr	r3, [pc, #136]	; (8001218 <MX_USART2_UART_Init+0x94>)
 8001190:	2296      	movs	r2, #150	; 0x96
 8001192:	0212      	lsls	r2, r2, #8
 8001194:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001196:	4b20      	ldr	r3, [pc, #128]	; (8001218 <MX_USART2_UART_Init+0x94>)
 8001198:	2200      	movs	r2, #0
 800119a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800119c:	4b1e      	ldr	r3, [pc, #120]	; (8001218 <MX_USART2_UART_Init+0x94>)
 800119e:	2200      	movs	r2, #0
 80011a0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80011a2:	4b1d      	ldr	r3, [pc, #116]	; (8001218 <MX_USART2_UART_Init+0x94>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011a8:	4b1b      	ldr	r3, [pc, #108]	; (8001218 <MX_USART2_UART_Init+0x94>)
 80011aa:	220c      	movs	r2, #12
 80011ac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011ae:	4b1a      	ldr	r3, [pc, #104]	; (8001218 <MX_USART2_UART_Init+0x94>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011b4:	4b18      	ldr	r3, [pc, #96]	; (8001218 <MX_USART2_UART_Init+0x94>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011ba:	4b17      	ldr	r3, [pc, #92]	; (8001218 <MX_USART2_UART_Init+0x94>)
 80011bc:	2200      	movs	r2, #0
 80011be:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80011c0:	4b15      	ldr	r3, [pc, #84]	; (8001218 <MX_USART2_UART_Init+0x94>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011c6:	4b14      	ldr	r3, [pc, #80]	; (8001218 <MX_USART2_UART_Init+0x94>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011cc:	4b12      	ldr	r3, [pc, #72]	; (8001218 <MX_USART2_UART_Init+0x94>)
 80011ce:	0018      	movs	r0, r3
 80011d0:	f001 fe3a 	bl	8002e48 <HAL_UART_Init>
 80011d4:	1e03      	subs	r3, r0, #0
 80011d6:	d001      	beq.n	80011dc <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80011d8:	f000 f8e1 	bl	800139e <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011dc:	4b0e      	ldr	r3, [pc, #56]	; (8001218 <MX_USART2_UART_Init+0x94>)
 80011de:	2100      	movs	r1, #0
 80011e0:	0018      	movs	r0, r3
 80011e2:	f002 fcf5 	bl	8003bd0 <HAL_UARTEx_SetTxFifoThreshold>
 80011e6:	1e03      	subs	r3, r0, #0
 80011e8:	d001      	beq.n	80011ee <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80011ea:	f000 f8d8 	bl	800139e <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011ee:	4b0a      	ldr	r3, [pc, #40]	; (8001218 <MX_USART2_UART_Init+0x94>)
 80011f0:	2100      	movs	r1, #0
 80011f2:	0018      	movs	r0, r3
 80011f4:	f002 fd2c 	bl	8003c50 <HAL_UARTEx_SetRxFifoThreshold>
 80011f8:	1e03      	subs	r3, r0, #0
 80011fa:	d001      	beq.n	8001200 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80011fc:	f000 f8cf 	bl	800139e <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001200:	4b05      	ldr	r3, [pc, #20]	; (8001218 <MX_USART2_UART_Init+0x94>)
 8001202:	0018      	movs	r0, r3
 8001204:	f002 fcaa 	bl	8003b5c <HAL_UARTEx_DisableFifoMode>
 8001208:	1e03      	subs	r3, r0, #0
 800120a:	d001      	beq.n	8001210 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800120c:	f000 f8c7 	bl	800139e <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001210:	46c0      	nop			; (mov r8, r8)
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	46c0      	nop			; (mov r8, r8)
 8001218:	200006c8 	.word	0x200006c8
 800121c:	40004400 	.word	0x40004400

08001220 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001226:	4b0c      	ldr	r3, [pc, #48]	; (8001258 <MX_DMA_Init+0x38>)
 8001228:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800122a:	4b0b      	ldr	r3, [pc, #44]	; (8001258 <MX_DMA_Init+0x38>)
 800122c:	2101      	movs	r1, #1
 800122e:	430a      	orrs	r2, r1
 8001230:	639a      	str	r2, [r3, #56]	; 0x38
 8001232:	4b09      	ldr	r3, [pc, #36]	; (8001258 <MX_DMA_Init+0x38>)
 8001234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001236:	2201      	movs	r2, #1
 8001238:	4013      	ands	r3, r2
 800123a:	607b      	str	r3, [r7, #4]
 800123c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800123e:	2200      	movs	r2, #0
 8001240:	2100      	movs	r1, #0
 8001242:	2009      	movs	r0, #9
 8001244:	f000 fb8c 	bl	8001960 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001248:	2009      	movs	r0, #9
 800124a:	f000 fb9e 	bl	800198a <HAL_NVIC_EnableIRQ>

}
 800124e:	46c0      	nop			; (mov r8, r8)
 8001250:	46bd      	mov	sp, r7
 8001252:	b002      	add	sp, #8
 8001254:	bd80      	pop	{r7, pc}
 8001256:	46c0      	nop			; (mov r8, r8)
 8001258:	40021000 	.word	0x40021000

0800125c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800125c:	b590      	push	{r4, r7, lr}
 800125e:	b089      	sub	sp, #36	; 0x24
 8001260:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001262:	240c      	movs	r4, #12
 8001264:	193b      	adds	r3, r7, r4
 8001266:	0018      	movs	r0, r3
 8001268:	2314      	movs	r3, #20
 800126a:	001a      	movs	r2, r3
 800126c:	2100      	movs	r1, #0
 800126e:	f002 fdb9 	bl	8003de4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001272:	4b38      	ldr	r3, [pc, #224]	; (8001354 <MX_GPIO_Init+0xf8>)
 8001274:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001276:	4b37      	ldr	r3, [pc, #220]	; (8001354 <MX_GPIO_Init+0xf8>)
 8001278:	2104      	movs	r1, #4
 800127a:	430a      	orrs	r2, r1
 800127c:	635a      	str	r2, [r3, #52]	; 0x34
 800127e:	4b35      	ldr	r3, [pc, #212]	; (8001354 <MX_GPIO_Init+0xf8>)
 8001280:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001282:	2204      	movs	r2, #4
 8001284:	4013      	ands	r3, r2
 8001286:	60bb      	str	r3, [r7, #8]
 8001288:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800128a:	4b32      	ldr	r3, [pc, #200]	; (8001354 <MX_GPIO_Init+0xf8>)
 800128c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800128e:	4b31      	ldr	r3, [pc, #196]	; (8001354 <MX_GPIO_Init+0xf8>)
 8001290:	2120      	movs	r1, #32
 8001292:	430a      	orrs	r2, r1
 8001294:	635a      	str	r2, [r3, #52]	; 0x34
 8001296:	4b2f      	ldr	r3, [pc, #188]	; (8001354 <MX_GPIO_Init+0xf8>)
 8001298:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800129a:	2220      	movs	r2, #32
 800129c:	4013      	ands	r3, r2
 800129e:	607b      	str	r3, [r7, #4]
 80012a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012a2:	4b2c      	ldr	r3, [pc, #176]	; (8001354 <MX_GPIO_Init+0xf8>)
 80012a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80012a6:	4b2b      	ldr	r3, [pc, #172]	; (8001354 <MX_GPIO_Init+0xf8>)
 80012a8:	2101      	movs	r1, #1
 80012aa:	430a      	orrs	r2, r1
 80012ac:	635a      	str	r2, [r3, #52]	; 0x34
 80012ae:	4b29      	ldr	r3, [pc, #164]	; (8001354 <MX_GPIO_Init+0xf8>)
 80012b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012b2:	2201      	movs	r2, #1
 80012b4:	4013      	ands	r3, r2
 80012b6:	603b      	str	r3, [r7, #0]
 80012b8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_GREEN_Pin|GPIO_PIN_10, GPIO_PIN_RESET);
 80012ba:	2384      	movs	r3, #132	; 0x84
 80012bc:	00d9      	lsls	r1, r3, #3
 80012be:	23a0      	movs	r3, #160	; 0xa0
 80012c0:	05db      	lsls	r3, r3, #23
 80012c2:	2200      	movs	r2, #0
 80012c4:	0018      	movs	r0, r3
 80012c6:	f000 ff33 	bl	8002130 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80012ca:	193b      	adds	r3, r7, r4
 80012cc:	2280      	movs	r2, #128	; 0x80
 80012ce:	0192      	lsls	r2, r2, #6
 80012d0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012d2:	193b      	adds	r3, r7, r4
 80012d4:	2288      	movs	r2, #136	; 0x88
 80012d6:	0352      	lsls	r2, r2, #13
 80012d8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012da:	193b      	adds	r3, r7, r4
 80012dc:	2200      	movs	r2, #0
 80012de:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80012e0:	193b      	adds	r3, r7, r4
 80012e2:	4a1d      	ldr	r2, [pc, #116]	; (8001358 <MX_GPIO_Init+0xfc>)
 80012e4:	0019      	movs	r1, r3
 80012e6:	0010      	movs	r0, r2
 80012e8:	f000 fdbe 	bl	8001e68 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 80012ec:	193b      	adds	r3, r7, r4
 80012ee:	2220      	movs	r2, #32
 80012f0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012f2:	193b      	adds	r3, r7, r4
 80012f4:	2201      	movs	r2, #1
 80012f6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f8:	193b      	adds	r3, r7, r4
 80012fa:	2200      	movs	r2, #0
 80012fc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012fe:	193b      	adds	r3, r7, r4
 8001300:	2202      	movs	r2, #2
 8001302:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8001304:	193a      	adds	r2, r7, r4
 8001306:	23a0      	movs	r3, #160	; 0xa0
 8001308:	05db      	lsls	r3, r3, #23
 800130a:	0011      	movs	r1, r2
 800130c:	0018      	movs	r0, r3
 800130e:	f000 fdab 	bl	8001e68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001312:	0021      	movs	r1, r4
 8001314:	187b      	adds	r3, r7, r1
 8001316:	2280      	movs	r2, #128	; 0x80
 8001318:	00d2      	lsls	r2, r2, #3
 800131a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800131c:	187b      	adds	r3, r7, r1
 800131e:	2201      	movs	r2, #1
 8001320:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001322:	187b      	adds	r3, r7, r1
 8001324:	2202      	movs	r2, #2
 8001326:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001328:	187b      	adds	r3, r7, r1
 800132a:	2202      	movs	r2, #2
 800132c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800132e:	187a      	adds	r2, r7, r1
 8001330:	23a0      	movs	r3, #160	; 0xa0
 8001332:	05db      	lsls	r3, r3, #23
 8001334:	0011      	movs	r1, r2
 8001336:	0018      	movs	r0, r3
 8001338:	f000 fd96 	bl	8001e68 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 800133c:	2200      	movs	r2, #0
 800133e:	2100      	movs	r1, #0
 8001340:	2007      	movs	r0, #7
 8001342:	f000 fb0d 	bl	8001960 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8001346:	2007      	movs	r0, #7
 8001348:	f000 fb1f 	bl	800198a <HAL_NVIC_EnableIRQ>

}
 800134c:	46c0      	nop			; (mov r8, r8)
 800134e:	46bd      	mov	sp, r7
 8001350:	b009      	add	sp, #36	; 0x24
 8001352:	bd90      	pop	{r4, r7, pc}
 8001354:	40021000 	.word	0x40021000
 8001358:	50000800 	.word	0x50000800

0800135c <HAL_GPIO_EXTI_Rising_Callback>:
    HAL_UART_Receive_DMA(&huart2, UART2_rxBuffer, 12);
}
*/

void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b082      	sub	sp, #8
 8001360:	af00      	add	r7, sp, #0
 8001362:	0002      	movs	r2, r0
 8001364:	1dbb      	adds	r3, r7, #6
 8001366:	801a      	strh	r2, [r3, #0]
  if(GPIO_Pin == GPIO_PIN_13) {
 8001368:	1dbb      	adds	r3, r7, #6
 800136a:	881a      	ldrh	r2, [r3, #0]
 800136c:	2380      	movs	r3, #128	; 0x80
 800136e:	019b      	lsls	r3, r3, #6
 8001370:	429a      	cmp	r2, r3
 8001372:	d10f      	bne.n	8001394 <HAL_GPIO_EXTI_Rising_Callback+0x38>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001374:	2380      	movs	r3, #128	; 0x80
 8001376:	00d9      	lsls	r1, r3, #3
 8001378:	23a0      	movs	r3, #160	; 0xa0
 800137a:	05db      	lsls	r3, r3, #23
 800137c:	2201      	movs	r2, #1
 800137e:	0018      	movs	r0, r3
 8001380:	f000 fed6 	bl	8002130 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8001384:	23a0      	movs	r3, #160	; 0xa0
 8001386:	05db      	lsls	r3, r3, #23
 8001388:	2201      	movs	r2, #1
 800138a:	2120      	movs	r1, #32
 800138c:	0018      	movs	r0, r3
 800138e:	f000 fecf 	bl	8002130 <HAL_GPIO_WritePin>
    //HAL_UART_Transmit(&huart2, (uint8_t*) loc_str, 50, 100);
  } else {
      __NOP();
  }
}
 8001392:	e000      	b.n	8001396 <HAL_GPIO_EXTI_Rising_Callback+0x3a>
      __NOP();
 8001394:	46c0      	nop			; (mov r8, r8)
}
 8001396:	46c0      	nop			; (mov r8, r8)
 8001398:	46bd      	mov	sp, r7
 800139a:	b002      	add	sp, #8
 800139c:	bd80      	pop	{r7, pc}

0800139e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800139e:	b580      	push	{r7, lr}
 80013a0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013a2:	b672      	cpsid	i
}
 80013a4:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013a6:	e7fe      	b.n	80013a6 <Error_Handler+0x8>

080013a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013ae:	4b11      	ldr	r3, [pc, #68]	; (80013f4 <HAL_MspInit+0x4c>)
 80013b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80013b2:	4b10      	ldr	r3, [pc, #64]	; (80013f4 <HAL_MspInit+0x4c>)
 80013b4:	2101      	movs	r1, #1
 80013b6:	430a      	orrs	r2, r1
 80013b8:	641a      	str	r2, [r3, #64]	; 0x40
 80013ba:	4b0e      	ldr	r3, [pc, #56]	; (80013f4 <HAL_MspInit+0x4c>)
 80013bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013be:	2201      	movs	r2, #1
 80013c0:	4013      	ands	r3, r2
 80013c2:	607b      	str	r3, [r7, #4]
 80013c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013c6:	4b0b      	ldr	r3, [pc, #44]	; (80013f4 <HAL_MspInit+0x4c>)
 80013c8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80013ca:	4b0a      	ldr	r3, [pc, #40]	; (80013f4 <HAL_MspInit+0x4c>)
 80013cc:	2180      	movs	r1, #128	; 0x80
 80013ce:	0549      	lsls	r1, r1, #21
 80013d0:	430a      	orrs	r2, r1
 80013d2:	63da      	str	r2, [r3, #60]	; 0x3c
 80013d4:	4b07      	ldr	r3, [pc, #28]	; (80013f4 <HAL_MspInit+0x4c>)
 80013d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80013d8:	2380      	movs	r3, #128	; 0x80
 80013da:	055b      	lsls	r3, r3, #21
 80013dc:	4013      	ands	r3, r2
 80013de:	603b      	str	r3, [r7, #0]
 80013e0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 80013e2:	23c0      	movs	r3, #192	; 0xc0
 80013e4:	00db      	lsls	r3, r3, #3
 80013e6:	0018      	movs	r0, r3
 80013e8:	f000 f9f8 	bl	80017dc <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013ec:	46c0      	nop			; (mov r8, r8)
 80013ee:	46bd      	mov	sp, r7
 80013f0:	b002      	add	sp, #8
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	40021000 	.word	0x40021000

080013f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013f8:	b590      	push	{r4, r7, lr}
 80013fa:	b093      	sub	sp, #76	; 0x4c
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001400:	2334      	movs	r3, #52	; 0x34
 8001402:	18fb      	adds	r3, r7, r3
 8001404:	0018      	movs	r0, r3
 8001406:	2314      	movs	r3, #20
 8001408:	001a      	movs	r2, r3
 800140a:	2100      	movs	r1, #0
 800140c:	f002 fcea 	bl	8003de4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001410:	2418      	movs	r4, #24
 8001412:	193b      	adds	r3, r7, r4
 8001414:	0018      	movs	r0, r3
 8001416:	231c      	movs	r3, #28
 8001418:	001a      	movs	r2, r3
 800141a:	2100      	movs	r1, #0
 800141c:	f002 fce2 	bl	8003de4 <memset>
  if(huart->Instance==USART1)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a5a      	ldr	r2, [pc, #360]	; (8001590 <HAL_UART_MspInit+0x198>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d168      	bne.n	80014fc <HAL_UART_MspInit+0x104>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800142a:	193b      	adds	r3, r7, r4
 800142c:	2201      	movs	r2, #1
 800142e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8001430:	193b      	adds	r3, r7, r4
 8001432:	2200      	movs	r2, #0
 8001434:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001436:	193b      	adds	r3, r7, r4
 8001438:	0018      	movs	r0, r3
 800143a:	f001 fbd1 	bl	8002be0 <HAL_RCCEx_PeriphCLKConfig>
 800143e:	1e03      	subs	r3, r0, #0
 8001440:	d001      	beq.n	8001446 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001442:	f7ff ffac 	bl	800139e <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001446:	4b53      	ldr	r3, [pc, #332]	; (8001594 <HAL_UART_MspInit+0x19c>)
 8001448:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800144a:	4b52      	ldr	r3, [pc, #328]	; (8001594 <HAL_UART_MspInit+0x19c>)
 800144c:	2180      	movs	r1, #128	; 0x80
 800144e:	01c9      	lsls	r1, r1, #7
 8001450:	430a      	orrs	r2, r1
 8001452:	641a      	str	r2, [r3, #64]	; 0x40
 8001454:	4b4f      	ldr	r3, [pc, #316]	; (8001594 <HAL_UART_MspInit+0x19c>)
 8001456:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001458:	2380      	movs	r3, #128	; 0x80
 800145a:	01db      	lsls	r3, r3, #7
 800145c:	4013      	ands	r3, r2
 800145e:	617b      	str	r3, [r7, #20]
 8001460:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001462:	4b4c      	ldr	r3, [pc, #304]	; (8001594 <HAL_UART_MspInit+0x19c>)
 8001464:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001466:	4b4b      	ldr	r3, [pc, #300]	; (8001594 <HAL_UART_MspInit+0x19c>)
 8001468:	2104      	movs	r1, #4
 800146a:	430a      	orrs	r2, r1
 800146c:	635a      	str	r2, [r3, #52]	; 0x34
 800146e:	4b49      	ldr	r3, [pc, #292]	; (8001594 <HAL_UART_MspInit+0x19c>)
 8001470:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001472:	2204      	movs	r2, #4
 8001474:	4013      	ands	r3, r2
 8001476:	613b      	str	r3, [r7, #16]
 8001478:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800147a:	2134      	movs	r1, #52	; 0x34
 800147c:	187b      	adds	r3, r7, r1
 800147e:	2230      	movs	r2, #48	; 0x30
 8001480:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001482:	187b      	adds	r3, r7, r1
 8001484:	2202      	movs	r2, #2
 8001486:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001488:	187b      	adds	r3, r7, r1
 800148a:	2200      	movs	r2, #0
 800148c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800148e:	187b      	adds	r3, r7, r1
 8001490:	2200      	movs	r2, #0
 8001492:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8001494:	187b      	adds	r3, r7, r1
 8001496:	2201      	movs	r2, #1
 8001498:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800149a:	187b      	adds	r3, r7, r1
 800149c:	4a3e      	ldr	r2, [pc, #248]	; (8001598 <HAL_UART_MspInit+0x1a0>)
 800149e:	0019      	movs	r1, r3
 80014a0:	0010      	movs	r0, r2
 80014a2:	f000 fce1 	bl	8001e68 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 80014a6:	4b3d      	ldr	r3, [pc, #244]	; (800159c <HAL_UART_MspInit+0x1a4>)
 80014a8:	4a3d      	ldr	r2, [pc, #244]	; (80015a0 <HAL_UART_MspInit+0x1a8>)
 80014aa:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 80014ac:	4b3b      	ldr	r3, [pc, #236]	; (800159c <HAL_UART_MspInit+0x1a4>)
 80014ae:	2232      	movs	r2, #50	; 0x32
 80014b0:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80014b2:	4b3a      	ldr	r3, [pc, #232]	; (800159c <HAL_UART_MspInit+0x1a4>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80014b8:	4b38      	ldr	r3, [pc, #224]	; (800159c <HAL_UART_MspInit+0x1a4>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80014be:	4b37      	ldr	r3, [pc, #220]	; (800159c <HAL_UART_MspInit+0x1a4>)
 80014c0:	2280      	movs	r2, #128	; 0x80
 80014c2:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80014c4:	4b35      	ldr	r3, [pc, #212]	; (800159c <HAL_UART_MspInit+0x1a4>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80014ca:	4b34      	ldr	r3, [pc, #208]	; (800159c <HAL_UART_MspInit+0x1a4>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80014d0:	4b32      	ldr	r3, [pc, #200]	; (800159c <HAL_UART_MspInit+0x1a4>)
 80014d2:	2220      	movs	r2, #32
 80014d4:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80014d6:	4b31      	ldr	r3, [pc, #196]	; (800159c <HAL_UART_MspInit+0x1a4>)
 80014d8:	22c0      	movs	r2, #192	; 0xc0
 80014da:	0192      	lsls	r2, r2, #6
 80014dc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80014de:	4b2f      	ldr	r3, [pc, #188]	; (800159c <HAL_UART_MspInit+0x1a4>)
 80014e0:	0018      	movs	r0, r3
 80014e2:	f000 fa6f 	bl	80019c4 <HAL_DMA_Init>
 80014e6:	1e03      	subs	r3, r0, #0
 80014e8:	d001      	beq.n	80014ee <HAL_UART_MspInit+0xf6>
    {
      Error_Handler();
 80014ea:	f7ff ff58 	bl	800139e <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	4a2a      	ldr	r2, [pc, #168]	; (800159c <HAL_UART_MspInit+0x1a4>)
 80014f2:	67da      	str	r2, [r3, #124]	; 0x7c
 80014f4:	4b29      	ldr	r3, [pc, #164]	; (800159c <HAL_UART_MspInit+0x1a4>)
 80014f6:	687a      	ldr	r2, [r7, #4]
 80014f8:	629a      	str	r2, [r3, #40]	; 0x28
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80014fa:	e044      	b.n	8001586 <HAL_UART_MspInit+0x18e>
  else if(huart->Instance==USART2)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a28      	ldr	r2, [pc, #160]	; (80015a4 <HAL_UART_MspInit+0x1ac>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d13f      	bne.n	8001586 <HAL_UART_MspInit+0x18e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001506:	2118      	movs	r1, #24
 8001508:	187b      	adds	r3, r7, r1
 800150a:	2202      	movs	r2, #2
 800150c:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800150e:	187b      	adds	r3, r7, r1
 8001510:	2200      	movs	r2, #0
 8001512:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001514:	187b      	adds	r3, r7, r1
 8001516:	0018      	movs	r0, r3
 8001518:	f001 fb62 	bl	8002be0 <HAL_RCCEx_PeriphCLKConfig>
 800151c:	1e03      	subs	r3, r0, #0
 800151e:	d001      	beq.n	8001524 <HAL_UART_MspInit+0x12c>
      Error_Handler();
 8001520:	f7ff ff3d 	bl	800139e <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001524:	4b1b      	ldr	r3, [pc, #108]	; (8001594 <HAL_UART_MspInit+0x19c>)
 8001526:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001528:	4b1a      	ldr	r3, [pc, #104]	; (8001594 <HAL_UART_MspInit+0x19c>)
 800152a:	2180      	movs	r1, #128	; 0x80
 800152c:	0289      	lsls	r1, r1, #10
 800152e:	430a      	orrs	r2, r1
 8001530:	63da      	str	r2, [r3, #60]	; 0x3c
 8001532:	4b18      	ldr	r3, [pc, #96]	; (8001594 <HAL_UART_MspInit+0x19c>)
 8001534:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001536:	2380      	movs	r3, #128	; 0x80
 8001538:	029b      	lsls	r3, r3, #10
 800153a:	4013      	ands	r3, r2
 800153c:	60fb      	str	r3, [r7, #12]
 800153e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001540:	4b14      	ldr	r3, [pc, #80]	; (8001594 <HAL_UART_MspInit+0x19c>)
 8001542:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001544:	4b13      	ldr	r3, [pc, #76]	; (8001594 <HAL_UART_MspInit+0x19c>)
 8001546:	2101      	movs	r1, #1
 8001548:	430a      	orrs	r2, r1
 800154a:	635a      	str	r2, [r3, #52]	; 0x34
 800154c:	4b11      	ldr	r3, [pc, #68]	; (8001594 <HAL_UART_MspInit+0x19c>)
 800154e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001550:	2201      	movs	r2, #1
 8001552:	4013      	ands	r3, r2
 8001554:	60bb      	str	r3, [r7, #8]
 8001556:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001558:	2134      	movs	r1, #52	; 0x34
 800155a:	187b      	adds	r3, r7, r1
 800155c:	220c      	movs	r2, #12
 800155e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001560:	187b      	adds	r3, r7, r1
 8001562:	2202      	movs	r2, #2
 8001564:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001566:	187b      	adds	r3, r7, r1
 8001568:	2201      	movs	r2, #1
 800156a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800156c:	187b      	adds	r3, r7, r1
 800156e:	2200      	movs	r2, #0
 8001570:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8001572:	187b      	adds	r3, r7, r1
 8001574:	2201      	movs	r2, #1
 8001576:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001578:	187a      	adds	r2, r7, r1
 800157a:	23a0      	movs	r3, #160	; 0xa0
 800157c:	05db      	lsls	r3, r3, #23
 800157e:	0011      	movs	r1, r2
 8001580:	0018      	movs	r0, r3
 8001582:	f000 fc71 	bl	8001e68 <HAL_GPIO_Init>
}
 8001586:	46c0      	nop			; (mov r8, r8)
 8001588:	46bd      	mov	sp, r7
 800158a:	b013      	add	sp, #76	; 0x4c
 800158c:	bd90      	pop	{r4, r7, pc}
 800158e:	46c0      	nop			; (mov r8, r8)
 8001590:	40013800 	.word	0x40013800
 8001594:	40021000 	.word	0x40021000
 8001598:	50000800 	.word	0x50000800
 800159c:	20000758 	.word	0x20000758
 80015a0:	40020008 	.word	0x40020008
 80015a4:	40004400 	.word	0x40004400

080015a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015ac:	e7fe      	b.n	80015ac <NMI_Handler+0x4>

080015ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015ae:	b580      	push	{r7, lr}
 80015b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015b2:	e7fe      	b.n	80015b2 <HardFault_Handler+0x4>

080015b4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80015b8:	46c0      	nop			; (mov r8, r8)
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}

080015be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015be:	b580      	push	{r7, lr}
 80015c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015c2:	46c0      	nop			; (mov r8, r8)
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}

080015c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015cc:	f000 f8ea 	bl	80017a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015d0:	46c0      	nop			; (mov r8, r8)
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}

080015d6 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 80015d6:	b580      	push	{r7, lr}
 80015d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80015da:	2380      	movs	r3, #128	; 0x80
 80015dc:	019b      	lsls	r3, r3, #6
 80015de:	0018      	movs	r0, r3
 80015e0:	f000 fdc4 	bl	800216c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80015e4:	46c0      	nop			; (mov r8, r8)
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
	...

080015ec <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80015f0:	4b03      	ldr	r3, [pc, #12]	; (8001600 <DMA1_Channel1_IRQHandler+0x14>)
 80015f2:	0018      	movs	r0, r3
 80015f4:	f000 faf6 	bl	8001be4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80015f8:	46c0      	nop			; (mov r8, r8)
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	46c0      	nop			; (mov r8, r8)
 8001600:	20000758 	.word	0x20000758

08001604 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b086      	sub	sp, #24
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800160c:	4a14      	ldr	r2, [pc, #80]	; (8001660 <_sbrk+0x5c>)
 800160e:	4b15      	ldr	r3, [pc, #84]	; (8001664 <_sbrk+0x60>)
 8001610:	1ad3      	subs	r3, r2, r3
 8001612:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001618:	4b13      	ldr	r3, [pc, #76]	; (8001668 <_sbrk+0x64>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d102      	bne.n	8001626 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001620:	4b11      	ldr	r3, [pc, #68]	; (8001668 <_sbrk+0x64>)
 8001622:	4a12      	ldr	r2, [pc, #72]	; (800166c <_sbrk+0x68>)
 8001624:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001626:	4b10      	ldr	r3, [pc, #64]	; (8001668 <_sbrk+0x64>)
 8001628:	681a      	ldr	r2, [r3, #0]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	18d3      	adds	r3, r2, r3
 800162e:	693a      	ldr	r2, [r7, #16]
 8001630:	429a      	cmp	r2, r3
 8001632:	d207      	bcs.n	8001644 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001634:	f002 fbac 	bl	8003d90 <__errno>
 8001638:	0003      	movs	r3, r0
 800163a:	220c      	movs	r2, #12
 800163c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800163e:	2301      	movs	r3, #1
 8001640:	425b      	negs	r3, r3
 8001642:	e009      	b.n	8001658 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001644:	4b08      	ldr	r3, [pc, #32]	; (8001668 <_sbrk+0x64>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800164a:	4b07      	ldr	r3, [pc, #28]	; (8001668 <_sbrk+0x64>)
 800164c:	681a      	ldr	r2, [r3, #0]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	18d2      	adds	r2, r2, r3
 8001652:	4b05      	ldr	r3, [pc, #20]	; (8001668 <_sbrk+0x64>)
 8001654:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001656:	68fb      	ldr	r3, [r7, #12]
}
 8001658:	0018      	movs	r0, r3
 800165a:	46bd      	mov	sp, r7
 800165c:	b006      	add	sp, #24
 800165e:	bd80      	pop	{r7, pc}
 8001660:	20009000 	.word	0x20009000
 8001664:	00000400 	.word	0x00000400
 8001668:	200007b4 	.word	0x200007b4
 800166c:	200007d0 	.word	0x200007d0

08001670 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001674:	46c0      	nop			; (mov r8, r8)
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
	...

0800167c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800167c:	480d      	ldr	r0, [pc, #52]	; (80016b4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800167e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001680:	f7ff fff6 	bl	8001670 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001684:	480c      	ldr	r0, [pc, #48]	; (80016b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001686:	490d      	ldr	r1, [pc, #52]	; (80016bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001688:	4a0d      	ldr	r2, [pc, #52]	; (80016c0 <LoopForever+0xe>)
  movs r3, #0
 800168a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800168c:	e002      	b.n	8001694 <LoopCopyDataInit>

0800168e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800168e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001690:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001692:	3304      	adds	r3, #4

08001694 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001694:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001696:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001698:	d3f9      	bcc.n	800168e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800169a:	4a0a      	ldr	r2, [pc, #40]	; (80016c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800169c:	4c0a      	ldr	r4, [pc, #40]	; (80016c8 <LoopForever+0x16>)
  movs r3, #0
 800169e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016a0:	e001      	b.n	80016a6 <LoopFillZerobss>

080016a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016a4:	3204      	adds	r2, #4

080016a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016a8:	d3fb      	bcc.n	80016a2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80016aa:	f002 fb77 	bl	8003d9c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80016ae:	f7ff fc97 	bl	8000fe0 <main>

080016b2 <LoopForever>:

LoopForever:
  b LoopForever
 80016b2:	e7fe      	b.n	80016b2 <LoopForever>
  ldr   r0, =_estack
 80016b4:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 80016b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016bc:	200000a4 	.word	0x200000a4
  ldr r2, =_sidata
 80016c0:	08005404 	.word	0x08005404
  ldr r2, =_sbss
 80016c4:	200000a4 	.word	0x200000a4
  ldr r4, =_ebss
 80016c8:	200007cc 	.word	0x200007cc

080016cc <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80016cc:	e7fe      	b.n	80016cc <ADC1_IRQHandler>
	...

080016d0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b082      	sub	sp, #8
 80016d4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80016d6:	1dfb      	adds	r3, r7, #7
 80016d8:	2200      	movs	r2, #0
 80016da:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016dc:	4b0b      	ldr	r3, [pc, #44]	; (800170c <HAL_Init+0x3c>)
 80016de:	681a      	ldr	r2, [r3, #0]
 80016e0:	4b0a      	ldr	r3, [pc, #40]	; (800170c <HAL_Init+0x3c>)
 80016e2:	2180      	movs	r1, #128	; 0x80
 80016e4:	0049      	lsls	r1, r1, #1
 80016e6:	430a      	orrs	r2, r1
 80016e8:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80016ea:	2000      	movs	r0, #0
 80016ec:	f000 f810 	bl	8001710 <HAL_InitTick>
 80016f0:	1e03      	subs	r3, r0, #0
 80016f2:	d003      	beq.n	80016fc <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80016f4:	1dfb      	adds	r3, r7, #7
 80016f6:	2201      	movs	r2, #1
 80016f8:	701a      	strb	r2, [r3, #0]
 80016fa:	e001      	b.n	8001700 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80016fc:	f7ff fe54 	bl	80013a8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001700:	1dfb      	adds	r3, r7, #7
 8001702:	781b      	ldrb	r3, [r3, #0]
}
 8001704:	0018      	movs	r0, r3
 8001706:	46bd      	mov	sp, r7
 8001708:	b002      	add	sp, #8
 800170a:	bd80      	pop	{r7, pc}
 800170c:	40022000 	.word	0x40022000

08001710 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001710:	b590      	push	{r4, r7, lr}
 8001712:	b085      	sub	sp, #20
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001718:	230f      	movs	r3, #15
 800171a:	18fb      	adds	r3, r7, r3
 800171c:	2200      	movs	r2, #0
 800171e:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001720:	4b1d      	ldr	r3, [pc, #116]	; (8001798 <HAL_InitTick+0x88>)
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d02b      	beq.n	8001780 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001728:	4b1c      	ldr	r3, [pc, #112]	; (800179c <HAL_InitTick+0x8c>)
 800172a:	681c      	ldr	r4, [r3, #0]
 800172c:	4b1a      	ldr	r3, [pc, #104]	; (8001798 <HAL_InitTick+0x88>)
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	0019      	movs	r1, r3
 8001732:	23fa      	movs	r3, #250	; 0xfa
 8001734:	0098      	lsls	r0, r3, #2
 8001736:	f7fe fcff 	bl	8000138 <__udivsi3>
 800173a:	0003      	movs	r3, r0
 800173c:	0019      	movs	r1, r3
 800173e:	0020      	movs	r0, r4
 8001740:	f7fe fcfa 	bl	8000138 <__udivsi3>
 8001744:	0003      	movs	r3, r0
 8001746:	0018      	movs	r0, r3
 8001748:	f000 f92f 	bl	80019aa <HAL_SYSTICK_Config>
 800174c:	1e03      	subs	r3, r0, #0
 800174e:	d112      	bne.n	8001776 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2b03      	cmp	r3, #3
 8001754:	d80a      	bhi.n	800176c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001756:	6879      	ldr	r1, [r7, #4]
 8001758:	2301      	movs	r3, #1
 800175a:	425b      	negs	r3, r3
 800175c:	2200      	movs	r2, #0
 800175e:	0018      	movs	r0, r3
 8001760:	f000 f8fe 	bl	8001960 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001764:	4b0e      	ldr	r3, [pc, #56]	; (80017a0 <HAL_InitTick+0x90>)
 8001766:	687a      	ldr	r2, [r7, #4]
 8001768:	601a      	str	r2, [r3, #0]
 800176a:	e00d      	b.n	8001788 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 800176c:	230f      	movs	r3, #15
 800176e:	18fb      	adds	r3, r7, r3
 8001770:	2201      	movs	r2, #1
 8001772:	701a      	strb	r2, [r3, #0]
 8001774:	e008      	b.n	8001788 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001776:	230f      	movs	r3, #15
 8001778:	18fb      	adds	r3, r7, r3
 800177a:	2201      	movs	r2, #1
 800177c:	701a      	strb	r2, [r3, #0]
 800177e:	e003      	b.n	8001788 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001780:	230f      	movs	r3, #15
 8001782:	18fb      	adds	r3, r7, r3
 8001784:	2201      	movs	r2, #1
 8001786:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001788:	230f      	movs	r3, #15
 800178a:	18fb      	adds	r3, r7, r3
 800178c:	781b      	ldrb	r3, [r3, #0]
}
 800178e:	0018      	movs	r0, r3
 8001790:	46bd      	mov	sp, r7
 8001792:	b005      	add	sp, #20
 8001794:	bd90      	pop	{r4, r7, pc}
 8001796:	46c0      	nop			; (mov r8, r8)
 8001798:	2000003c 	.word	0x2000003c
 800179c:	20000034 	.word	0x20000034
 80017a0:	20000038 	.word	0x20000038

080017a4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80017a8:	4b05      	ldr	r3, [pc, #20]	; (80017c0 <HAL_IncTick+0x1c>)
 80017aa:	781b      	ldrb	r3, [r3, #0]
 80017ac:	001a      	movs	r2, r3
 80017ae:	4b05      	ldr	r3, [pc, #20]	; (80017c4 <HAL_IncTick+0x20>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	18d2      	adds	r2, r2, r3
 80017b4:	4b03      	ldr	r3, [pc, #12]	; (80017c4 <HAL_IncTick+0x20>)
 80017b6:	601a      	str	r2, [r3, #0]
}
 80017b8:	46c0      	nop			; (mov r8, r8)
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	46c0      	nop			; (mov r8, r8)
 80017c0:	2000003c 	.word	0x2000003c
 80017c4:	200007b8 	.word	0x200007b8

080017c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	af00      	add	r7, sp, #0
  return uwTick;
 80017cc:	4b02      	ldr	r3, [pc, #8]	; (80017d8 <HAL_GetTick+0x10>)
 80017ce:	681b      	ldr	r3, [r3, #0]
}
 80017d0:	0018      	movs	r0, r3
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	46c0      	nop			; (mov r8, r8)
 80017d8:	200007b8 	.word	0x200007b8

080017dc <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b082      	sub	sp, #8
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 80017e4:	4b06      	ldr	r3, [pc, #24]	; (8001800 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a06      	ldr	r2, [pc, #24]	; (8001804 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 80017ea:	4013      	ands	r3, r2
 80017ec:	0019      	movs	r1, r3
 80017ee:	4b04      	ldr	r3, [pc, #16]	; (8001800 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80017f0:	687a      	ldr	r2, [r7, #4]
 80017f2:	430a      	orrs	r2, r1
 80017f4:	601a      	str	r2, [r3, #0]
}
 80017f6:	46c0      	nop			; (mov r8, r8)
 80017f8:	46bd      	mov	sp, r7
 80017fa:	b002      	add	sp, #8
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	46c0      	nop			; (mov r8, r8)
 8001800:	40010000 	.word	0x40010000
 8001804:	fffff9ff 	.word	0xfffff9ff

08001808 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0
 800180e:	0002      	movs	r2, r0
 8001810:	1dfb      	adds	r3, r7, #7
 8001812:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001814:	1dfb      	adds	r3, r7, #7
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	2b7f      	cmp	r3, #127	; 0x7f
 800181a:	d809      	bhi.n	8001830 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800181c:	1dfb      	adds	r3, r7, #7
 800181e:	781b      	ldrb	r3, [r3, #0]
 8001820:	001a      	movs	r2, r3
 8001822:	231f      	movs	r3, #31
 8001824:	401a      	ands	r2, r3
 8001826:	4b04      	ldr	r3, [pc, #16]	; (8001838 <__NVIC_EnableIRQ+0x30>)
 8001828:	2101      	movs	r1, #1
 800182a:	4091      	lsls	r1, r2
 800182c:	000a      	movs	r2, r1
 800182e:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8001830:	46c0      	nop			; (mov r8, r8)
 8001832:	46bd      	mov	sp, r7
 8001834:	b002      	add	sp, #8
 8001836:	bd80      	pop	{r7, pc}
 8001838:	e000e100 	.word	0xe000e100

0800183c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800183c:	b590      	push	{r4, r7, lr}
 800183e:	b083      	sub	sp, #12
 8001840:	af00      	add	r7, sp, #0
 8001842:	0002      	movs	r2, r0
 8001844:	6039      	str	r1, [r7, #0]
 8001846:	1dfb      	adds	r3, r7, #7
 8001848:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800184a:	1dfb      	adds	r3, r7, #7
 800184c:	781b      	ldrb	r3, [r3, #0]
 800184e:	2b7f      	cmp	r3, #127	; 0x7f
 8001850:	d828      	bhi.n	80018a4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001852:	4a2f      	ldr	r2, [pc, #188]	; (8001910 <__NVIC_SetPriority+0xd4>)
 8001854:	1dfb      	adds	r3, r7, #7
 8001856:	781b      	ldrb	r3, [r3, #0]
 8001858:	b25b      	sxtb	r3, r3
 800185a:	089b      	lsrs	r3, r3, #2
 800185c:	33c0      	adds	r3, #192	; 0xc0
 800185e:	009b      	lsls	r3, r3, #2
 8001860:	589b      	ldr	r3, [r3, r2]
 8001862:	1dfa      	adds	r2, r7, #7
 8001864:	7812      	ldrb	r2, [r2, #0]
 8001866:	0011      	movs	r1, r2
 8001868:	2203      	movs	r2, #3
 800186a:	400a      	ands	r2, r1
 800186c:	00d2      	lsls	r2, r2, #3
 800186e:	21ff      	movs	r1, #255	; 0xff
 8001870:	4091      	lsls	r1, r2
 8001872:	000a      	movs	r2, r1
 8001874:	43d2      	mvns	r2, r2
 8001876:	401a      	ands	r2, r3
 8001878:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	019b      	lsls	r3, r3, #6
 800187e:	22ff      	movs	r2, #255	; 0xff
 8001880:	401a      	ands	r2, r3
 8001882:	1dfb      	adds	r3, r7, #7
 8001884:	781b      	ldrb	r3, [r3, #0]
 8001886:	0018      	movs	r0, r3
 8001888:	2303      	movs	r3, #3
 800188a:	4003      	ands	r3, r0
 800188c:	00db      	lsls	r3, r3, #3
 800188e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001890:	481f      	ldr	r0, [pc, #124]	; (8001910 <__NVIC_SetPriority+0xd4>)
 8001892:	1dfb      	adds	r3, r7, #7
 8001894:	781b      	ldrb	r3, [r3, #0]
 8001896:	b25b      	sxtb	r3, r3
 8001898:	089b      	lsrs	r3, r3, #2
 800189a:	430a      	orrs	r2, r1
 800189c:	33c0      	adds	r3, #192	; 0xc0
 800189e:	009b      	lsls	r3, r3, #2
 80018a0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80018a2:	e031      	b.n	8001908 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80018a4:	4a1b      	ldr	r2, [pc, #108]	; (8001914 <__NVIC_SetPriority+0xd8>)
 80018a6:	1dfb      	adds	r3, r7, #7
 80018a8:	781b      	ldrb	r3, [r3, #0]
 80018aa:	0019      	movs	r1, r3
 80018ac:	230f      	movs	r3, #15
 80018ae:	400b      	ands	r3, r1
 80018b0:	3b08      	subs	r3, #8
 80018b2:	089b      	lsrs	r3, r3, #2
 80018b4:	3306      	adds	r3, #6
 80018b6:	009b      	lsls	r3, r3, #2
 80018b8:	18d3      	adds	r3, r2, r3
 80018ba:	3304      	adds	r3, #4
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	1dfa      	adds	r2, r7, #7
 80018c0:	7812      	ldrb	r2, [r2, #0]
 80018c2:	0011      	movs	r1, r2
 80018c4:	2203      	movs	r2, #3
 80018c6:	400a      	ands	r2, r1
 80018c8:	00d2      	lsls	r2, r2, #3
 80018ca:	21ff      	movs	r1, #255	; 0xff
 80018cc:	4091      	lsls	r1, r2
 80018ce:	000a      	movs	r2, r1
 80018d0:	43d2      	mvns	r2, r2
 80018d2:	401a      	ands	r2, r3
 80018d4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	019b      	lsls	r3, r3, #6
 80018da:	22ff      	movs	r2, #255	; 0xff
 80018dc:	401a      	ands	r2, r3
 80018de:	1dfb      	adds	r3, r7, #7
 80018e0:	781b      	ldrb	r3, [r3, #0]
 80018e2:	0018      	movs	r0, r3
 80018e4:	2303      	movs	r3, #3
 80018e6:	4003      	ands	r3, r0
 80018e8:	00db      	lsls	r3, r3, #3
 80018ea:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80018ec:	4809      	ldr	r0, [pc, #36]	; (8001914 <__NVIC_SetPriority+0xd8>)
 80018ee:	1dfb      	adds	r3, r7, #7
 80018f0:	781b      	ldrb	r3, [r3, #0]
 80018f2:	001c      	movs	r4, r3
 80018f4:	230f      	movs	r3, #15
 80018f6:	4023      	ands	r3, r4
 80018f8:	3b08      	subs	r3, #8
 80018fa:	089b      	lsrs	r3, r3, #2
 80018fc:	430a      	orrs	r2, r1
 80018fe:	3306      	adds	r3, #6
 8001900:	009b      	lsls	r3, r3, #2
 8001902:	18c3      	adds	r3, r0, r3
 8001904:	3304      	adds	r3, #4
 8001906:	601a      	str	r2, [r3, #0]
}
 8001908:	46c0      	nop			; (mov r8, r8)
 800190a:	46bd      	mov	sp, r7
 800190c:	b003      	add	sp, #12
 800190e:	bd90      	pop	{r4, r7, pc}
 8001910:	e000e100 	.word	0xe000e100
 8001914:	e000ed00 	.word	0xe000ed00

08001918 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b082      	sub	sp, #8
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	1e5a      	subs	r2, r3, #1
 8001924:	2380      	movs	r3, #128	; 0x80
 8001926:	045b      	lsls	r3, r3, #17
 8001928:	429a      	cmp	r2, r3
 800192a:	d301      	bcc.n	8001930 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800192c:	2301      	movs	r3, #1
 800192e:	e010      	b.n	8001952 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001930:	4b0a      	ldr	r3, [pc, #40]	; (800195c <SysTick_Config+0x44>)
 8001932:	687a      	ldr	r2, [r7, #4]
 8001934:	3a01      	subs	r2, #1
 8001936:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001938:	2301      	movs	r3, #1
 800193a:	425b      	negs	r3, r3
 800193c:	2103      	movs	r1, #3
 800193e:	0018      	movs	r0, r3
 8001940:	f7ff ff7c 	bl	800183c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001944:	4b05      	ldr	r3, [pc, #20]	; (800195c <SysTick_Config+0x44>)
 8001946:	2200      	movs	r2, #0
 8001948:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800194a:	4b04      	ldr	r3, [pc, #16]	; (800195c <SysTick_Config+0x44>)
 800194c:	2207      	movs	r2, #7
 800194e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001950:	2300      	movs	r3, #0
}
 8001952:	0018      	movs	r0, r3
 8001954:	46bd      	mov	sp, r7
 8001956:	b002      	add	sp, #8
 8001958:	bd80      	pop	{r7, pc}
 800195a:	46c0      	nop			; (mov r8, r8)
 800195c:	e000e010 	.word	0xe000e010

08001960 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b084      	sub	sp, #16
 8001964:	af00      	add	r7, sp, #0
 8001966:	60b9      	str	r1, [r7, #8]
 8001968:	607a      	str	r2, [r7, #4]
 800196a:	210f      	movs	r1, #15
 800196c:	187b      	adds	r3, r7, r1
 800196e:	1c02      	adds	r2, r0, #0
 8001970:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001972:	68ba      	ldr	r2, [r7, #8]
 8001974:	187b      	adds	r3, r7, r1
 8001976:	781b      	ldrb	r3, [r3, #0]
 8001978:	b25b      	sxtb	r3, r3
 800197a:	0011      	movs	r1, r2
 800197c:	0018      	movs	r0, r3
 800197e:	f7ff ff5d 	bl	800183c <__NVIC_SetPriority>
}
 8001982:	46c0      	nop			; (mov r8, r8)
 8001984:	46bd      	mov	sp, r7
 8001986:	b004      	add	sp, #16
 8001988:	bd80      	pop	{r7, pc}

0800198a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800198a:	b580      	push	{r7, lr}
 800198c:	b082      	sub	sp, #8
 800198e:	af00      	add	r7, sp, #0
 8001990:	0002      	movs	r2, r0
 8001992:	1dfb      	adds	r3, r7, #7
 8001994:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001996:	1dfb      	adds	r3, r7, #7
 8001998:	781b      	ldrb	r3, [r3, #0]
 800199a:	b25b      	sxtb	r3, r3
 800199c:	0018      	movs	r0, r3
 800199e:	f7ff ff33 	bl	8001808 <__NVIC_EnableIRQ>
}
 80019a2:	46c0      	nop			; (mov r8, r8)
 80019a4:	46bd      	mov	sp, r7
 80019a6:	b002      	add	sp, #8
 80019a8:	bd80      	pop	{r7, pc}

080019aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019aa:	b580      	push	{r7, lr}
 80019ac:	b082      	sub	sp, #8
 80019ae:	af00      	add	r7, sp, #0
 80019b0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	0018      	movs	r0, r3
 80019b6:	f7ff ffaf 	bl	8001918 <SysTick_Config>
 80019ba:	0003      	movs	r3, r0
}
 80019bc:	0018      	movs	r0, r3
 80019be:	46bd      	mov	sp, r7
 80019c0:	b002      	add	sp, #8
 80019c2:	bd80      	pop	{r7, pc}

080019c4 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b082      	sub	sp, #8
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d101      	bne.n	80019d6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80019d2:	2301      	movs	r3, #1
 80019d4:	e077      	b.n	8001ac6 <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4a3d      	ldr	r2, [pc, #244]	; (8001ad0 <HAL_DMA_Init+0x10c>)
 80019dc:	4694      	mov	ip, r2
 80019de:	4463      	add	r3, ip
 80019e0:	2114      	movs	r1, #20
 80019e2:	0018      	movs	r0, r3
 80019e4:	f7fe fba8 	bl	8000138 <__udivsi3>
 80019e8:	0003      	movs	r3, r0
 80019ea:	009a      	lsls	r2, r3, #2
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2225      	movs	r2, #37	; 0x25
 80019f4:	2102      	movs	r1, #2
 80019f6:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	681a      	ldr	r2, [r3, #0]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4934      	ldr	r1, [pc, #208]	; (8001ad4 <HAL_DMA_Init+0x110>)
 8001a04:	400a      	ands	r2, r1
 8001a06:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	6819      	ldr	r1, [r3, #0]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	689a      	ldr	r2, [r3, #8]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	68db      	ldr	r3, [r3, #12]
 8001a16:	431a      	orrs	r2, r3
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	691b      	ldr	r3, [r3, #16]
 8001a1c:	431a      	orrs	r2, r3
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	695b      	ldr	r3, [r3, #20]
 8001a22:	431a      	orrs	r2, r3
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	699b      	ldr	r3, [r3, #24]
 8001a28:	431a      	orrs	r2, r3
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	69db      	ldr	r3, [r3, #28]
 8001a2e:	431a      	orrs	r2, r3
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6a1b      	ldr	r3, [r3, #32]
 8001a34:	431a      	orrs	r2, r3
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	430a      	orrs	r2, r1
 8001a3c:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	0018      	movs	r0, r3
 8001a42:	f000 f9c1 	bl	8001dc8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	689a      	ldr	r2, [r3, #8]
 8001a4a:	2380      	movs	r3, #128	; 0x80
 8001a4c:	01db      	lsls	r3, r3, #7
 8001a4e:	429a      	cmp	r2, r3
 8001a50:	d102      	bne.n	8001a58 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2200      	movs	r2, #0
 8001a56:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	685a      	ldr	r2, [r3, #4]
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a60:	213f      	movs	r1, #63	; 0x3f
 8001a62:	400a      	ands	r2, r1
 8001a64:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a6a:	687a      	ldr	r2, [r7, #4]
 8001a6c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001a6e:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d011      	beq.n	8001a9c <HAL_DMA_Init+0xd8>
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	2b04      	cmp	r3, #4
 8001a7e:	d80d      	bhi.n	8001a9c <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	0018      	movs	r0, r3
 8001a84:	f000 f9cc 	bl	8001e20 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a94:	687a      	ldr	r2, [r7, #4]
 8001a96:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8001a98:	605a      	str	r2, [r3, #4]
 8001a9a:	e008      	b.n	8001aae <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2200      	movs	r2, #0
 8001aac:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2225      	movs	r2, #37	; 0x25
 8001ab8:	2101      	movs	r1, #1
 8001aba:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2224      	movs	r2, #36	; 0x24
 8001ac0:	2100      	movs	r1, #0
 8001ac2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001ac4:	2300      	movs	r3, #0
}
 8001ac6:	0018      	movs	r0, r3
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	b002      	add	sp, #8
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	46c0      	nop			; (mov r8, r8)
 8001ad0:	bffdfff8 	.word	0xbffdfff8
 8001ad4:	ffff800f 	.word	0xffff800f

08001ad8 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b086      	sub	sp, #24
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	60f8      	str	r0, [r7, #12]
 8001ae0:	60b9      	str	r1, [r7, #8]
 8001ae2:	607a      	str	r2, [r7, #4]
 8001ae4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001ae6:	2317      	movs	r3, #23
 8001ae8:	18fb      	adds	r3, r7, r3
 8001aea:	2200      	movs	r2, #0
 8001aec:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	2224      	movs	r2, #36	; 0x24
 8001af2:	5c9b      	ldrb	r3, [r3, r2]
 8001af4:	2b01      	cmp	r3, #1
 8001af6:	d101      	bne.n	8001afc <HAL_DMA_Start_IT+0x24>
 8001af8:	2302      	movs	r3, #2
 8001afa:	e06f      	b.n	8001bdc <HAL_DMA_Start_IT+0x104>
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	2224      	movs	r2, #36	; 0x24
 8001b00:	2101      	movs	r1, #1
 8001b02:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	2225      	movs	r2, #37	; 0x25
 8001b08:	5c9b      	ldrb	r3, [r3, r2]
 8001b0a:	b2db      	uxtb	r3, r3
 8001b0c:	2b01      	cmp	r3, #1
 8001b0e:	d157      	bne.n	8001bc0 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	2225      	movs	r2, #37	; 0x25
 8001b14:	2102      	movs	r1, #2
 8001b16:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	681a      	ldr	r2, [r3, #0]
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	2101      	movs	r1, #1
 8001b2a:	438a      	bics	r2, r1
 8001b2c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	687a      	ldr	r2, [r7, #4]
 8001b32:	68b9      	ldr	r1, [r7, #8]
 8001b34:	68f8      	ldr	r0, [r7, #12]
 8001b36:	f000 f907 	bl	8001d48 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d008      	beq.n	8001b54 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	681a      	ldr	r2, [r3, #0]
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	210e      	movs	r1, #14
 8001b4e:	430a      	orrs	r2, r1
 8001b50:	601a      	str	r2, [r3, #0]
 8001b52:	e00f      	b.n	8001b74 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	681a      	ldr	r2, [r3, #0]
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	2104      	movs	r1, #4
 8001b60:	438a      	bics	r2, r1
 8001b62:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	210a      	movs	r1, #10
 8001b70:	430a      	orrs	r2, r1
 8001b72:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b78:	681a      	ldr	r2, [r3, #0]
 8001b7a:	2380      	movs	r3, #128	; 0x80
 8001b7c:	025b      	lsls	r3, r3, #9
 8001b7e:	4013      	ands	r3, r2
 8001b80:	d008      	beq.n	8001b94 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b86:	681a      	ldr	r2, [r3, #0]
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b8c:	2180      	movs	r1, #128	; 0x80
 8001b8e:	0049      	lsls	r1, r1, #1
 8001b90:	430a      	orrs	r2, r1
 8001b92:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d008      	beq.n	8001bae <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ba0:	681a      	ldr	r2, [r3, #0]
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ba6:	2180      	movs	r1, #128	; 0x80
 8001ba8:	0049      	lsls	r1, r1, #1
 8001baa:	430a      	orrs	r2, r1
 8001bac:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	681a      	ldr	r2, [r3, #0]
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	2101      	movs	r1, #1
 8001bba:	430a      	orrs	r2, r1
 8001bbc:	601a      	str	r2, [r3, #0]
 8001bbe:	e00a      	b.n	8001bd6 <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	2280      	movs	r2, #128	; 0x80
 8001bc4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	2224      	movs	r2, #36	; 0x24
 8001bca:	2100      	movs	r1, #0
 8001bcc:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 8001bce:	2317      	movs	r3, #23
 8001bd0:	18fb      	adds	r3, r7, r3
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8001bd6:	2317      	movs	r3, #23
 8001bd8:	18fb      	adds	r3, r7, r3
 8001bda:	781b      	ldrb	r3, [r3, #0]
}
 8001bdc:	0018      	movs	r0, r3
 8001bde:	46bd      	mov	sp, r7
 8001be0:	b006      	add	sp, #24
 8001be2:	bd80      	pop	{r7, pc}

08001be4 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b084      	sub	sp, #16
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8001bec:	4b55      	ldr	r3, [pc, #340]	; (8001d44 <HAL_DMA_IRQHandler+0x160>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bfe:	221c      	movs	r2, #28
 8001c00:	4013      	ands	r3, r2
 8001c02:	2204      	movs	r2, #4
 8001c04:	409a      	lsls	r2, r3
 8001c06:	0013      	movs	r3, r2
 8001c08:	68fa      	ldr	r2, [r7, #12]
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	d027      	beq.n	8001c5e <HAL_DMA_IRQHandler+0x7a>
 8001c0e:	68bb      	ldr	r3, [r7, #8]
 8001c10:	2204      	movs	r2, #4
 8001c12:	4013      	ands	r3, r2
 8001c14:	d023      	beq.n	8001c5e <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	2220      	movs	r2, #32
 8001c1e:	4013      	ands	r3, r2
 8001c20:	d107      	bne.n	8001c32 <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	681a      	ldr	r2, [r3, #0]
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	2104      	movs	r1, #4
 8001c2e:	438a      	bics	r2, r1
 8001c30:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8001c32:	4b44      	ldr	r3, [pc, #272]	; (8001d44 <HAL_DMA_IRQHandler+0x160>)
 8001c34:	6859      	ldr	r1, [r3, #4]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c3a:	221c      	movs	r2, #28
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	2204      	movs	r2, #4
 8001c40:	409a      	lsls	r2, r3
 8001c42:	4b40      	ldr	r3, [pc, #256]	; (8001d44 <HAL_DMA_IRQHandler+0x160>)
 8001c44:	430a      	orrs	r2, r1
 8001c46:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d100      	bne.n	8001c52 <HAL_DMA_IRQHandler+0x6e>
 8001c50:	e073      	b.n	8001d3a <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c56:	687a      	ldr	r2, [r7, #4]
 8001c58:	0010      	movs	r0, r2
 8001c5a:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8001c5c:	e06d      	b.n	8001d3a <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c62:	221c      	movs	r2, #28
 8001c64:	4013      	ands	r3, r2
 8001c66:	2202      	movs	r2, #2
 8001c68:	409a      	lsls	r2, r3
 8001c6a:	0013      	movs	r3, r2
 8001c6c:	68fa      	ldr	r2, [r7, #12]
 8001c6e:	4013      	ands	r3, r2
 8001c70:	d02e      	beq.n	8001cd0 <HAL_DMA_IRQHandler+0xec>
 8001c72:	68bb      	ldr	r3, [r7, #8]
 8001c74:	2202      	movs	r2, #2
 8001c76:	4013      	ands	r3, r2
 8001c78:	d02a      	beq.n	8001cd0 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	2220      	movs	r2, #32
 8001c82:	4013      	ands	r3, r2
 8001c84:	d10b      	bne.n	8001c9e <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	681a      	ldr	r2, [r3, #0]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	210a      	movs	r1, #10
 8001c92:	438a      	bics	r2, r1
 8001c94:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2225      	movs	r2, #37	; 0x25
 8001c9a:	2101      	movs	r1, #1
 8001c9c:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8001c9e:	4b29      	ldr	r3, [pc, #164]	; (8001d44 <HAL_DMA_IRQHandler+0x160>)
 8001ca0:	6859      	ldr	r1, [r3, #4]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca6:	221c      	movs	r2, #28
 8001ca8:	4013      	ands	r3, r2
 8001caa:	2202      	movs	r2, #2
 8001cac:	409a      	lsls	r2, r3
 8001cae:	4b25      	ldr	r3, [pc, #148]	; (8001d44 <HAL_DMA_IRQHandler+0x160>)
 8001cb0:	430a      	orrs	r2, r1
 8001cb2:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2224      	movs	r2, #36	; 0x24
 8001cb8:	2100      	movs	r1, #0
 8001cba:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d03a      	beq.n	8001d3a <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cc8:	687a      	ldr	r2, [r7, #4]
 8001cca:	0010      	movs	r0, r2
 8001ccc:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8001cce:	e034      	b.n	8001d3a <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd4:	221c      	movs	r2, #28
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	2208      	movs	r2, #8
 8001cda:	409a      	lsls	r2, r3
 8001cdc:	0013      	movs	r3, r2
 8001cde:	68fa      	ldr	r2, [r7, #12]
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	d02b      	beq.n	8001d3c <HAL_DMA_IRQHandler+0x158>
 8001ce4:	68bb      	ldr	r3, [r7, #8]
 8001ce6:	2208      	movs	r2, #8
 8001ce8:	4013      	ands	r3, r2
 8001cea:	d027      	beq.n	8001d3c <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	681a      	ldr	r2, [r3, #0]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	210e      	movs	r1, #14
 8001cf8:	438a      	bics	r2, r1
 8001cfa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8001cfc:	4b11      	ldr	r3, [pc, #68]	; (8001d44 <HAL_DMA_IRQHandler+0x160>)
 8001cfe:	6859      	ldr	r1, [r3, #4]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d04:	221c      	movs	r2, #28
 8001d06:	4013      	ands	r3, r2
 8001d08:	2201      	movs	r2, #1
 8001d0a:	409a      	lsls	r2, r3
 8001d0c:	4b0d      	ldr	r3, [pc, #52]	; (8001d44 <HAL_DMA_IRQHandler+0x160>)
 8001d0e:	430a      	orrs	r2, r1
 8001d10:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2201      	movs	r2, #1
 8001d16:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2225      	movs	r2, #37	; 0x25
 8001d1c:	2101      	movs	r1, #1
 8001d1e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2224      	movs	r2, #36	; 0x24
 8001d24:	2100      	movs	r1, #0
 8001d26:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d005      	beq.n	8001d3c <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d34:	687a      	ldr	r2, [r7, #4]
 8001d36:	0010      	movs	r0, r2
 8001d38:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001d3a:	46c0      	nop			; (mov r8, r8)
 8001d3c:	46c0      	nop			; (mov r8, r8)
}
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	b004      	add	sp, #16
 8001d42:	bd80      	pop	{r7, pc}
 8001d44:	40020000 	.word	0x40020000

08001d48 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b084      	sub	sp, #16
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	60f8      	str	r0, [r7, #12]
 8001d50:	60b9      	str	r1, [r7, #8]
 8001d52:	607a      	str	r2, [r7, #4]
 8001d54:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d5a:	68fa      	ldr	r2, [r7, #12]
 8001d5c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001d5e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d004      	beq.n	8001d72 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d6c:	68fa      	ldr	r2, [r7, #12]
 8001d6e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8001d70:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8001d72:	4b14      	ldr	r3, [pc, #80]	; (8001dc4 <DMA_SetConfig+0x7c>)
 8001d74:	6859      	ldr	r1, [r3, #4]
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7a:	221c      	movs	r2, #28
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	2201      	movs	r2, #1
 8001d80:	409a      	lsls	r2, r3
 8001d82:	4b10      	ldr	r3, [pc, #64]	; (8001dc4 <DMA_SetConfig+0x7c>)
 8001d84:	430a      	orrs	r2, r1
 8001d86:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	683a      	ldr	r2, [r7, #0]
 8001d8e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	2b10      	cmp	r3, #16
 8001d96:	d108      	bne.n	8001daa <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	687a      	ldr	r2, [r7, #4]
 8001d9e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	68ba      	ldr	r2, [r7, #8]
 8001da6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001da8:	e007      	b.n	8001dba <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	68ba      	ldr	r2, [r7, #8]
 8001db0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	687a      	ldr	r2, [r7, #4]
 8001db8:	60da      	str	r2, [r3, #12]
}
 8001dba:	46c0      	nop			; (mov r8, r8)
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	b004      	add	sp, #16
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	46c0      	nop			; (mov r8, r8)
 8001dc4:	40020000 	.word	0x40020000

08001dc8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b084      	sub	sp, #16
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd4:	089b      	lsrs	r3, r3, #2
 8001dd6:	4a10      	ldr	r2, [pc, #64]	; (8001e18 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8001dd8:	4694      	mov	ip, r2
 8001dda:	4463      	add	r3, ip
 8001ddc:	009b      	lsls	r3, r3, #2
 8001dde:	001a      	movs	r2, r3
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	001a      	movs	r2, r3
 8001dea:	23ff      	movs	r3, #255	; 0xff
 8001dec:	4013      	ands	r3, r2
 8001dee:	3b08      	subs	r3, #8
 8001df0:	2114      	movs	r1, #20
 8001df2:	0018      	movs	r0, r3
 8001df4:	f7fe f9a0 	bl	8000138 <__udivsi3>
 8001df8:	0003      	movs	r3, r0
 8001dfa:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	4a07      	ldr	r2, [pc, #28]	; (8001e1c <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8001e00:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	221f      	movs	r2, #31
 8001e06:	4013      	ands	r3, r2
 8001e08:	2201      	movs	r2, #1
 8001e0a:	409a      	lsls	r2, r3
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8001e10:	46c0      	nop			; (mov r8, r8)
 8001e12:	46bd      	mov	sp, r7
 8001e14:	b004      	add	sp, #16
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	10008200 	.word	0x10008200
 8001e1c:	40020880 	.word	0x40020880

08001e20 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b084      	sub	sp, #16
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	223f      	movs	r2, #63	; 0x3f
 8001e2e:	4013      	ands	r3, r2
 8001e30:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	4a0a      	ldr	r2, [pc, #40]	; (8001e60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001e36:	4694      	mov	ip, r2
 8001e38:	4463      	add	r3, ip
 8001e3a:	009b      	lsls	r3, r3, #2
 8001e3c:	001a      	movs	r2, r3
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	4a07      	ldr	r2, [pc, #28]	; (8001e64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001e46:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	3b01      	subs	r3, #1
 8001e4c:	2203      	movs	r2, #3
 8001e4e:	4013      	ands	r3, r2
 8001e50:	2201      	movs	r2, #1
 8001e52:	409a      	lsls	r2, r3
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	659a      	str	r2, [r3, #88]	; 0x58
}
 8001e58:	46c0      	nop			; (mov r8, r8)
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	b004      	add	sp, #16
 8001e5e:	bd80      	pop	{r7, pc}
 8001e60:	1000823f 	.word	0x1000823f
 8001e64:	40020940 	.word	0x40020940

08001e68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b086      	sub	sp, #24
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
 8001e70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e72:	2300      	movs	r3, #0
 8001e74:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e76:	e147      	b.n	8002108 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	2101      	movs	r1, #1
 8001e7e:	697a      	ldr	r2, [r7, #20]
 8001e80:	4091      	lsls	r1, r2
 8001e82:	000a      	movs	r2, r1
 8001e84:	4013      	ands	r3, r2
 8001e86:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d100      	bne.n	8001e90 <HAL_GPIO_Init+0x28>
 8001e8e:	e138      	b.n	8002102 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	2203      	movs	r2, #3
 8001e96:	4013      	ands	r3, r2
 8001e98:	2b01      	cmp	r3, #1
 8001e9a:	d005      	beq.n	8001ea8 <HAL_GPIO_Init+0x40>
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	2203      	movs	r2, #3
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	2b02      	cmp	r3, #2
 8001ea6:	d130      	bne.n	8001f0a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	689b      	ldr	r3, [r3, #8]
 8001eac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	005b      	lsls	r3, r3, #1
 8001eb2:	2203      	movs	r2, #3
 8001eb4:	409a      	lsls	r2, r3
 8001eb6:	0013      	movs	r3, r2
 8001eb8:	43da      	mvns	r2, r3
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	68da      	ldr	r2, [r3, #12]
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	005b      	lsls	r3, r3, #1
 8001ec8:	409a      	lsls	r2, r3
 8001eca:	0013      	movs	r3, r2
 8001ecc:	693a      	ldr	r2, [r7, #16]
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	693a      	ldr	r2, [r7, #16]
 8001ed6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001ede:	2201      	movs	r2, #1
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	409a      	lsls	r2, r3
 8001ee4:	0013      	movs	r3, r2
 8001ee6:	43da      	mvns	r2, r3
 8001ee8:	693b      	ldr	r3, [r7, #16]
 8001eea:	4013      	ands	r3, r2
 8001eec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	091b      	lsrs	r3, r3, #4
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	401a      	ands	r2, r3
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	409a      	lsls	r2, r3
 8001efc:	0013      	movs	r3, r2
 8001efe:	693a      	ldr	r2, [r7, #16]
 8001f00:	4313      	orrs	r3, r2
 8001f02:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	693a      	ldr	r2, [r7, #16]
 8001f08:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	2203      	movs	r2, #3
 8001f10:	4013      	ands	r3, r2
 8001f12:	2b03      	cmp	r3, #3
 8001f14:	d017      	beq.n	8001f46 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	68db      	ldr	r3, [r3, #12]
 8001f1a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	005b      	lsls	r3, r3, #1
 8001f20:	2203      	movs	r2, #3
 8001f22:	409a      	lsls	r2, r3
 8001f24:	0013      	movs	r3, r2
 8001f26:	43da      	mvns	r2, r3
 8001f28:	693b      	ldr	r3, [r7, #16]
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	689a      	ldr	r2, [r3, #8]
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	005b      	lsls	r3, r3, #1
 8001f36:	409a      	lsls	r2, r3
 8001f38:	0013      	movs	r3, r2
 8001f3a:	693a      	ldr	r2, [r7, #16]
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	693a      	ldr	r2, [r7, #16]
 8001f44:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	2203      	movs	r2, #3
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	2b02      	cmp	r3, #2
 8001f50:	d123      	bne.n	8001f9a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	08da      	lsrs	r2, r3, #3
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	3208      	adds	r2, #8
 8001f5a:	0092      	lsls	r2, r2, #2
 8001f5c:	58d3      	ldr	r3, [r2, r3]
 8001f5e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	2207      	movs	r2, #7
 8001f64:	4013      	ands	r3, r2
 8001f66:	009b      	lsls	r3, r3, #2
 8001f68:	220f      	movs	r2, #15
 8001f6a:	409a      	lsls	r2, r3
 8001f6c:	0013      	movs	r3, r2
 8001f6e:	43da      	mvns	r2, r3
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	4013      	ands	r3, r2
 8001f74:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	691a      	ldr	r2, [r3, #16]
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	2107      	movs	r1, #7
 8001f7e:	400b      	ands	r3, r1
 8001f80:	009b      	lsls	r3, r3, #2
 8001f82:	409a      	lsls	r2, r3
 8001f84:	0013      	movs	r3, r2
 8001f86:	693a      	ldr	r2, [r7, #16]
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	08da      	lsrs	r2, r3, #3
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	3208      	adds	r2, #8
 8001f94:	0092      	lsls	r2, r2, #2
 8001f96:	6939      	ldr	r1, [r7, #16]
 8001f98:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	005b      	lsls	r3, r3, #1
 8001fa4:	2203      	movs	r2, #3
 8001fa6:	409a      	lsls	r2, r3
 8001fa8:	0013      	movs	r3, r2
 8001faa:	43da      	mvns	r2, r3
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	4013      	ands	r3, r2
 8001fb0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	2203      	movs	r2, #3
 8001fb8:	401a      	ands	r2, r3
 8001fba:	697b      	ldr	r3, [r7, #20]
 8001fbc:	005b      	lsls	r3, r3, #1
 8001fbe:	409a      	lsls	r2, r3
 8001fc0:	0013      	movs	r3, r2
 8001fc2:	693a      	ldr	r2, [r7, #16]
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	693a      	ldr	r2, [r7, #16]
 8001fcc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	685a      	ldr	r2, [r3, #4]
 8001fd2:	23c0      	movs	r3, #192	; 0xc0
 8001fd4:	029b      	lsls	r3, r3, #10
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	d100      	bne.n	8001fdc <HAL_GPIO_Init+0x174>
 8001fda:	e092      	b.n	8002102 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001fdc:	4a50      	ldr	r2, [pc, #320]	; (8002120 <HAL_GPIO_Init+0x2b8>)
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	089b      	lsrs	r3, r3, #2
 8001fe2:	3318      	adds	r3, #24
 8001fe4:	009b      	lsls	r3, r3, #2
 8001fe6:	589b      	ldr	r3, [r3, r2]
 8001fe8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	2203      	movs	r2, #3
 8001fee:	4013      	ands	r3, r2
 8001ff0:	00db      	lsls	r3, r3, #3
 8001ff2:	220f      	movs	r2, #15
 8001ff4:	409a      	lsls	r2, r3
 8001ff6:	0013      	movs	r3, r2
 8001ff8:	43da      	mvns	r2, r3
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8002000:	687a      	ldr	r2, [r7, #4]
 8002002:	23a0      	movs	r3, #160	; 0xa0
 8002004:	05db      	lsls	r3, r3, #23
 8002006:	429a      	cmp	r2, r3
 8002008:	d013      	beq.n	8002032 <HAL_GPIO_Init+0x1ca>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	4a45      	ldr	r2, [pc, #276]	; (8002124 <HAL_GPIO_Init+0x2bc>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d00d      	beq.n	800202e <HAL_GPIO_Init+0x1c6>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	4a44      	ldr	r2, [pc, #272]	; (8002128 <HAL_GPIO_Init+0x2c0>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d007      	beq.n	800202a <HAL_GPIO_Init+0x1c2>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	4a43      	ldr	r2, [pc, #268]	; (800212c <HAL_GPIO_Init+0x2c4>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d101      	bne.n	8002026 <HAL_GPIO_Init+0x1be>
 8002022:	2303      	movs	r3, #3
 8002024:	e006      	b.n	8002034 <HAL_GPIO_Init+0x1cc>
 8002026:	2305      	movs	r3, #5
 8002028:	e004      	b.n	8002034 <HAL_GPIO_Init+0x1cc>
 800202a:	2302      	movs	r3, #2
 800202c:	e002      	b.n	8002034 <HAL_GPIO_Init+0x1cc>
 800202e:	2301      	movs	r3, #1
 8002030:	e000      	b.n	8002034 <HAL_GPIO_Init+0x1cc>
 8002032:	2300      	movs	r3, #0
 8002034:	697a      	ldr	r2, [r7, #20]
 8002036:	2103      	movs	r1, #3
 8002038:	400a      	ands	r2, r1
 800203a:	00d2      	lsls	r2, r2, #3
 800203c:	4093      	lsls	r3, r2
 800203e:	693a      	ldr	r2, [r7, #16]
 8002040:	4313      	orrs	r3, r2
 8002042:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8002044:	4936      	ldr	r1, [pc, #216]	; (8002120 <HAL_GPIO_Init+0x2b8>)
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	089b      	lsrs	r3, r3, #2
 800204a:	3318      	adds	r3, #24
 800204c:	009b      	lsls	r3, r3, #2
 800204e:	693a      	ldr	r2, [r7, #16]
 8002050:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002052:	4b33      	ldr	r3, [pc, #204]	; (8002120 <HAL_GPIO_Init+0x2b8>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	43da      	mvns	r2, r3
 800205c:	693b      	ldr	r3, [r7, #16]
 800205e:	4013      	ands	r3, r2
 8002060:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	685a      	ldr	r2, [r3, #4]
 8002066:	2380      	movs	r3, #128	; 0x80
 8002068:	035b      	lsls	r3, r3, #13
 800206a:	4013      	ands	r3, r2
 800206c:	d003      	beq.n	8002076 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 800206e:	693a      	ldr	r2, [r7, #16]
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	4313      	orrs	r3, r2
 8002074:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002076:	4b2a      	ldr	r3, [pc, #168]	; (8002120 <HAL_GPIO_Init+0x2b8>)
 8002078:	693a      	ldr	r2, [r7, #16]
 800207a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 800207c:	4b28      	ldr	r3, [pc, #160]	; (8002120 <HAL_GPIO_Init+0x2b8>)
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	43da      	mvns	r2, r3
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	4013      	ands	r3, r2
 800208a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	685a      	ldr	r2, [r3, #4]
 8002090:	2380      	movs	r3, #128	; 0x80
 8002092:	039b      	lsls	r3, r3, #14
 8002094:	4013      	ands	r3, r2
 8002096:	d003      	beq.n	80020a0 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8002098:	693a      	ldr	r2, [r7, #16]
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	4313      	orrs	r3, r2
 800209e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80020a0:	4b1f      	ldr	r3, [pc, #124]	; (8002120 <HAL_GPIO_Init+0x2b8>)
 80020a2:	693a      	ldr	r2, [r7, #16]
 80020a4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80020a6:	4a1e      	ldr	r2, [pc, #120]	; (8002120 <HAL_GPIO_Init+0x2b8>)
 80020a8:	2384      	movs	r3, #132	; 0x84
 80020aa:	58d3      	ldr	r3, [r2, r3]
 80020ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	43da      	mvns	r2, r3
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	4013      	ands	r3, r2
 80020b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	685a      	ldr	r2, [r3, #4]
 80020bc:	2380      	movs	r3, #128	; 0x80
 80020be:	029b      	lsls	r3, r3, #10
 80020c0:	4013      	ands	r3, r2
 80020c2:	d003      	beq.n	80020cc <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80020c4:	693a      	ldr	r2, [r7, #16]
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	4313      	orrs	r3, r2
 80020ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80020cc:	4914      	ldr	r1, [pc, #80]	; (8002120 <HAL_GPIO_Init+0x2b8>)
 80020ce:	2284      	movs	r2, #132	; 0x84
 80020d0:	693b      	ldr	r3, [r7, #16]
 80020d2:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80020d4:	4a12      	ldr	r2, [pc, #72]	; (8002120 <HAL_GPIO_Init+0x2b8>)
 80020d6:	2380      	movs	r3, #128	; 0x80
 80020d8:	58d3      	ldr	r3, [r2, r3]
 80020da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	43da      	mvns	r2, r3
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	4013      	ands	r3, r2
 80020e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	685a      	ldr	r2, [r3, #4]
 80020ea:	2380      	movs	r3, #128	; 0x80
 80020ec:	025b      	lsls	r3, r3, #9
 80020ee:	4013      	ands	r3, r2
 80020f0:	d003      	beq.n	80020fa <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80020f2:	693a      	ldr	r2, [r7, #16]
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	4313      	orrs	r3, r2
 80020f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80020fa:	4909      	ldr	r1, [pc, #36]	; (8002120 <HAL_GPIO_Init+0x2b8>)
 80020fc:	2280      	movs	r2, #128	; 0x80
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	3301      	adds	r3, #1
 8002106:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	40da      	lsrs	r2, r3
 8002110:	1e13      	subs	r3, r2, #0
 8002112:	d000      	beq.n	8002116 <HAL_GPIO_Init+0x2ae>
 8002114:	e6b0      	b.n	8001e78 <HAL_GPIO_Init+0x10>
  }
}
 8002116:	46c0      	nop			; (mov r8, r8)
 8002118:	46c0      	nop			; (mov r8, r8)
 800211a:	46bd      	mov	sp, r7
 800211c:	b006      	add	sp, #24
 800211e:	bd80      	pop	{r7, pc}
 8002120:	40021800 	.word	0x40021800
 8002124:	50000400 	.word	0x50000400
 8002128:	50000800 	.word	0x50000800
 800212c:	50000c00 	.word	0x50000c00

08002130 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b082      	sub	sp, #8
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
 8002138:	0008      	movs	r0, r1
 800213a:	0011      	movs	r1, r2
 800213c:	1cbb      	adds	r3, r7, #2
 800213e:	1c02      	adds	r2, r0, #0
 8002140:	801a      	strh	r2, [r3, #0]
 8002142:	1c7b      	adds	r3, r7, #1
 8002144:	1c0a      	adds	r2, r1, #0
 8002146:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002148:	1c7b      	adds	r3, r7, #1
 800214a:	781b      	ldrb	r3, [r3, #0]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d004      	beq.n	800215a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002150:	1cbb      	adds	r3, r7, #2
 8002152:	881a      	ldrh	r2, [r3, #0]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002158:	e003      	b.n	8002162 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800215a:	1cbb      	adds	r3, r7, #2
 800215c:	881a      	ldrh	r2, [r3, #0]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002162:	46c0      	nop			; (mov r8, r8)
 8002164:	46bd      	mov	sp, r7
 8002166:	b002      	add	sp, #8
 8002168:	bd80      	pop	{r7, pc}
	...

0800216c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b082      	sub	sp, #8
 8002170:	af00      	add	r7, sp, #0
 8002172:	0002      	movs	r2, r0
 8002174:	1dbb      	adds	r3, r7, #6
 8002176:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8002178:	4b10      	ldr	r3, [pc, #64]	; (80021bc <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800217a:	68db      	ldr	r3, [r3, #12]
 800217c:	1dba      	adds	r2, r7, #6
 800217e:	8812      	ldrh	r2, [r2, #0]
 8002180:	4013      	ands	r3, r2
 8002182:	d008      	beq.n	8002196 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8002184:	4b0d      	ldr	r3, [pc, #52]	; (80021bc <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002186:	1dba      	adds	r2, r7, #6
 8002188:	8812      	ldrh	r2, [r2, #0]
 800218a:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 800218c:	1dbb      	adds	r3, r7, #6
 800218e:	881b      	ldrh	r3, [r3, #0]
 8002190:	0018      	movs	r0, r3
 8002192:	f7ff f8e3 	bl	800135c <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8002196:	4b09      	ldr	r3, [pc, #36]	; (80021bc <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002198:	691b      	ldr	r3, [r3, #16]
 800219a:	1dba      	adds	r2, r7, #6
 800219c:	8812      	ldrh	r2, [r2, #0]
 800219e:	4013      	ands	r3, r2
 80021a0:	d008      	beq.n	80021b4 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 80021a2:	4b06      	ldr	r3, [pc, #24]	; (80021bc <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80021a4:	1dba      	adds	r2, r7, #6
 80021a6:	8812      	ldrh	r2, [r2, #0]
 80021a8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 80021aa:	1dbb      	adds	r3, r7, #6
 80021ac:	881b      	ldrh	r3, [r3, #0]
 80021ae:	0018      	movs	r0, r3
 80021b0:	f000 f806 	bl	80021c0 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 80021b4:	46c0      	nop			; (mov r8, r8)
 80021b6:	46bd      	mov	sp, r7
 80021b8:	b002      	add	sp, #8
 80021ba:	bd80      	pop	{r7, pc}
 80021bc:	40021800 	.word	0x40021800

080021c0 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b082      	sub	sp, #8
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	0002      	movs	r2, r0
 80021c8:	1dbb      	adds	r3, r7, #6
 80021ca:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 80021cc:	46c0      	nop			; (mov r8, r8)
 80021ce:	46bd      	mov	sp, r7
 80021d0:	b002      	add	sp, #8
 80021d2:	bd80      	pop	{r7, pc}

080021d4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b084      	sub	sp, #16
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80021dc:	4b19      	ldr	r3, [pc, #100]	; (8002244 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a19      	ldr	r2, [pc, #100]	; (8002248 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80021e2:	4013      	ands	r3, r2
 80021e4:	0019      	movs	r1, r3
 80021e6:	4b17      	ldr	r3, [pc, #92]	; (8002244 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80021e8:	687a      	ldr	r2, [r7, #4]
 80021ea:	430a      	orrs	r2, r1
 80021ec:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80021ee:	687a      	ldr	r2, [r7, #4]
 80021f0:	2380      	movs	r3, #128	; 0x80
 80021f2:	009b      	lsls	r3, r3, #2
 80021f4:	429a      	cmp	r2, r3
 80021f6:	d11f      	bne.n	8002238 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80021f8:	4b14      	ldr	r3, [pc, #80]	; (800224c <HAL_PWREx_ControlVoltageScaling+0x78>)
 80021fa:	681a      	ldr	r2, [r3, #0]
 80021fc:	0013      	movs	r3, r2
 80021fe:	005b      	lsls	r3, r3, #1
 8002200:	189b      	adds	r3, r3, r2
 8002202:	005b      	lsls	r3, r3, #1
 8002204:	4912      	ldr	r1, [pc, #72]	; (8002250 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8002206:	0018      	movs	r0, r3
 8002208:	f7fd ff96 	bl	8000138 <__udivsi3>
 800220c:	0003      	movs	r3, r0
 800220e:	3301      	adds	r3, #1
 8002210:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002212:	e008      	b.n	8002226 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d003      	beq.n	8002222 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	3b01      	subs	r3, #1
 800221e:	60fb      	str	r3, [r7, #12]
 8002220:	e001      	b.n	8002226 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8002222:	2303      	movs	r3, #3
 8002224:	e009      	b.n	800223a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002226:	4b07      	ldr	r3, [pc, #28]	; (8002244 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002228:	695a      	ldr	r2, [r3, #20]
 800222a:	2380      	movs	r3, #128	; 0x80
 800222c:	00db      	lsls	r3, r3, #3
 800222e:	401a      	ands	r2, r3
 8002230:	2380      	movs	r3, #128	; 0x80
 8002232:	00db      	lsls	r3, r3, #3
 8002234:	429a      	cmp	r2, r3
 8002236:	d0ed      	beq.n	8002214 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8002238:	2300      	movs	r3, #0
}
 800223a:	0018      	movs	r0, r3
 800223c:	46bd      	mov	sp, r7
 800223e:	b004      	add	sp, #16
 8002240:	bd80      	pop	{r7, pc}
 8002242:	46c0      	nop			; (mov r8, r8)
 8002244:	40007000 	.word	0x40007000
 8002248:	fffff9ff 	.word	0xfffff9ff
 800224c:	20000034 	.word	0x20000034
 8002250:	000f4240 	.word	0x000f4240

08002254 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8002258:	4b03      	ldr	r3, [pc, #12]	; (8002268 <LL_RCC_GetAPB1Prescaler+0x14>)
 800225a:	689a      	ldr	r2, [r3, #8]
 800225c:	23e0      	movs	r3, #224	; 0xe0
 800225e:	01db      	lsls	r3, r3, #7
 8002260:	4013      	ands	r3, r2
}
 8002262:	0018      	movs	r0, r3
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}
 8002268:	40021000 	.word	0x40021000

0800226c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b088      	sub	sp, #32
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d101      	bne.n	800227e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	e2f3      	b.n	8002866 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	2201      	movs	r2, #1
 8002284:	4013      	ands	r3, r2
 8002286:	d100      	bne.n	800228a <HAL_RCC_OscConfig+0x1e>
 8002288:	e07c      	b.n	8002384 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800228a:	4bc3      	ldr	r3, [pc, #780]	; (8002598 <HAL_RCC_OscConfig+0x32c>)
 800228c:	689b      	ldr	r3, [r3, #8]
 800228e:	2238      	movs	r2, #56	; 0x38
 8002290:	4013      	ands	r3, r2
 8002292:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002294:	4bc0      	ldr	r3, [pc, #768]	; (8002598 <HAL_RCC_OscConfig+0x32c>)
 8002296:	68db      	ldr	r3, [r3, #12]
 8002298:	2203      	movs	r2, #3
 800229a:	4013      	ands	r3, r2
 800229c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800229e:	69bb      	ldr	r3, [r7, #24]
 80022a0:	2b10      	cmp	r3, #16
 80022a2:	d102      	bne.n	80022aa <HAL_RCC_OscConfig+0x3e>
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	2b03      	cmp	r3, #3
 80022a8:	d002      	beq.n	80022b0 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80022aa:	69bb      	ldr	r3, [r7, #24]
 80022ac:	2b08      	cmp	r3, #8
 80022ae:	d10b      	bne.n	80022c8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022b0:	4bb9      	ldr	r3, [pc, #740]	; (8002598 <HAL_RCC_OscConfig+0x32c>)
 80022b2:	681a      	ldr	r2, [r3, #0]
 80022b4:	2380      	movs	r3, #128	; 0x80
 80022b6:	029b      	lsls	r3, r3, #10
 80022b8:	4013      	ands	r3, r2
 80022ba:	d062      	beq.n	8002382 <HAL_RCC_OscConfig+0x116>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d15e      	bne.n	8002382 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80022c4:	2301      	movs	r3, #1
 80022c6:	e2ce      	b.n	8002866 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	685a      	ldr	r2, [r3, #4]
 80022cc:	2380      	movs	r3, #128	; 0x80
 80022ce:	025b      	lsls	r3, r3, #9
 80022d0:	429a      	cmp	r2, r3
 80022d2:	d107      	bne.n	80022e4 <HAL_RCC_OscConfig+0x78>
 80022d4:	4bb0      	ldr	r3, [pc, #704]	; (8002598 <HAL_RCC_OscConfig+0x32c>)
 80022d6:	681a      	ldr	r2, [r3, #0]
 80022d8:	4baf      	ldr	r3, [pc, #700]	; (8002598 <HAL_RCC_OscConfig+0x32c>)
 80022da:	2180      	movs	r1, #128	; 0x80
 80022dc:	0249      	lsls	r1, r1, #9
 80022de:	430a      	orrs	r2, r1
 80022e0:	601a      	str	r2, [r3, #0]
 80022e2:	e020      	b.n	8002326 <HAL_RCC_OscConfig+0xba>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	685a      	ldr	r2, [r3, #4]
 80022e8:	23a0      	movs	r3, #160	; 0xa0
 80022ea:	02db      	lsls	r3, r3, #11
 80022ec:	429a      	cmp	r2, r3
 80022ee:	d10e      	bne.n	800230e <HAL_RCC_OscConfig+0xa2>
 80022f0:	4ba9      	ldr	r3, [pc, #676]	; (8002598 <HAL_RCC_OscConfig+0x32c>)
 80022f2:	681a      	ldr	r2, [r3, #0]
 80022f4:	4ba8      	ldr	r3, [pc, #672]	; (8002598 <HAL_RCC_OscConfig+0x32c>)
 80022f6:	2180      	movs	r1, #128	; 0x80
 80022f8:	02c9      	lsls	r1, r1, #11
 80022fa:	430a      	orrs	r2, r1
 80022fc:	601a      	str	r2, [r3, #0]
 80022fe:	4ba6      	ldr	r3, [pc, #664]	; (8002598 <HAL_RCC_OscConfig+0x32c>)
 8002300:	681a      	ldr	r2, [r3, #0]
 8002302:	4ba5      	ldr	r3, [pc, #660]	; (8002598 <HAL_RCC_OscConfig+0x32c>)
 8002304:	2180      	movs	r1, #128	; 0x80
 8002306:	0249      	lsls	r1, r1, #9
 8002308:	430a      	orrs	r2, r1
 800230a:	601a      	str	r2, [r3, #0]
 800230c:	e00b      	b.n	8002326 <HAL_RCC_OscConfig+0xba>
 800230e:	4ba2      	ldr	r3, [pc, #648]	; (8002598 <HAL_RCC_OscConfig+0x32c>)
 8002310:	681a      	ldr	r2, [r3, #0]
 8002312:	4ba1      	ldr	r3, [pc, #644]	; (8002598 <HAL_RCC_OscConfig+0x32c>)
 8002314:	49a1      	ldr	r1, [pc, #644]	; (800259c <HAL_RCC_OscConfig+0x330>)
 8002316:	400a      	ands	r2, r1
 8002318:	601a      	str	r2, [r3, #0]
 800231a:	4b9f      	ldr	r3, [pc, #636]	; (8002598 <HAL_RCC_OscConfig+0x32c>)
 800231c:	681a      	ldr	r2, [r3, #0]
 800231e:	4b9e      	ldr	r3, [pc, #632]	; (8002598 <HAL_RCC_OscConfig+0x32c>)
 8002320:	499f      	ldr	r1, [pc, #636]	; (80025a0 <HAL_RCC_OscConfig+0x334>)
 8002322:	400a      	ands	r2, r1
 8002324:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d014      	beq.n	8002358 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800232e:	f7ff fa4b 	bl	80017c8 <HAL_GetTick>
 8002332:	0003      	movs	r3, r0
 8002334:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002336:	e008      	b.n	800234a <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002338:	f7ff fa46 	bl	80017c8 <HAL_GetTick>
 800233c:	0002      	movs	r2, r0
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	1ad3      	subs	r3, r2, r3
 8002342:	2b64      	cmp	r3, #100	; 0x64
 8002344:	d901      	bls.n	800234a <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8002346:	2303      	movs	r3, #3
 8002348:	e28d      	b.n	8002866 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800234a:	4b93      	ldr	r3, [pc, #588]	; (8002598 <HAL_RCC_OscConfig+0x32c>)
 800234c:	681a      	ldr	r2, [r3, #0]
 800234e:	2380      	movs	r3, #128	; 0x80
 8002350:	029b      	lsls	r3, r3, #10
 8002352:	4013      	ands	r3, r2
 8002354:	d0f0      	beq.n	8002338 <HAL_RCC_OscConfig+0xcc>
 8002356:	e015      	b.n	8002384 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002358:	f7ff fa36 	bl	80017c8 <HAL_GetTick>
 800235c:	0003      	movs	r3, r0
 800235e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002360:	e008      	b.n	8002374 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002362:	f7ff fa31 	bl	80017c8 <HAL_GetTick>
 8002366:	0002      	movs	r2, r0
 8002368:	693b      	ldr	r3, [r7, #16]
 800236a:	1ad3      	subs	r3, r2, r3
 800236c:	2b64      	cmp	r3, #100	; 0x64
 800236e:	d901      	bls.n	8002374 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002370:	2303      	movs	r3, #3
 8002372:	e278      	b.n	8002866 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002374:	4b88      	ldr	r3, [pc, #544]	; (8002598 <HAL_RCC_OscConfig+0x32c>)
 8002376:	681a      	ldr	r2, [r3, #0]
 8002378:	2380      	movs	r3, #128	; 0x80
 800237a:	029b      	lsls	r3, r3, #10
 800237c:	4013      	ands	r3, r2
 800237e:	d1f0      	bne.n	8002362 <HAL_RCC_OscConfig+0xf6>
 8002380:	e000      	b.n	8002384 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002382:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	2202      	movs	r2, #2
 800238a:	4013      	ands	r3, r2
 800238c:	d100      	bne.n	8002390 <HAL_RCC_OscConfig+0x124>
 800238e:	e099      	b.n	80024c4 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002390:	4b81      	ldr	r3, [pc, #516]	; (8002598 <HAL_RCC_OscConfig+0x32c>)
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	2238      	movs	r2, #56	; 0x38
 8002396:	4013      	ands	r3, r2
 8002398:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800239a:	4b7f      	ldr	r3, [pc, #508]	; (8002598 <HAL_RCC_OscConfig+0x32c>)
 800239c:	68db      	ldr	r3, [r3, #12]
 800239e:	2203      	movs	r2, #3
 80023a0:	4013      	ands	r3, r2
 80023a2:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80023a4:	69bb      	ldr	r3, [r7, #24]
 80023a6:	2b10      	cmp	r3, #16
 80023a8:	d102      	bne.n	80023b0 <HAL_RCC_OscConfig+0x144>
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	2b02      	cmp	r3, #2
 80023ae:	d002      	beq.n	80023b6 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80023b0:	69bb      	ldr	r3, [r7, #24]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d135      	bne.n	8002422 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80023b6:	4b78      	ldr	r3, [pc, #480]	; (8002598 <HAL_RCC_OscConfig+0x32c>)
 80023b8:	681a      	ldr	r2, [r3, #0]
 80023ba:	2380      	movs	r3, #128	; 0x80
 80023bc:	00db      	lsls	r3, r3, #3
 80023be:	4013      	ands	r3, r2
 80023c0:	d005      	beq.n	80023ce <HAL_RCC_OscConfig+0x162>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	68db      	ldr	r3, [r3, #12]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d101      	bne.n	80023ce <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
 80023cc:	e24b      	b.n	8002866 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023ce:	4b72      	ldr	r3, [pc, #456]	; (8002598 <HAL_RCC_OscConfig+0x32c>)
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	4a74      	ldr	r2, [pc, #464]	; (80025a4 <HAL_RCC_OscConfig+0x338>)
 80023d4:	4013      	ands	r3, r2
 80023d6:	0019      	movs	r1, r3
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	695b      	ldr	r3, [r3, #20]
 80023dc:	021a      	lsls	r2, r3, #8
 80023de:	4b6e      	ldr	r3, [pc, #440]	; (8002598 <HAL_RCC_OscConfig+0x32c>)
 80023e0:	430a      	orrs	r2, r1
 80023e2:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80023e4:	69bb      	ldr	r3, [r7, #24]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d112      	bne.n	8002410 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80023ea:	4b6b      	ldr	r3, [pc, #428]	; (8002598 <HAL_RCC_OscConfig+0x32c>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a6e      	ldr	r2, [pc, #440]	; (80025a8 <HAL_RCC_OscConfig+0x33c>)
 80023f0:	4013      	ands	r3, r2
 80023f2:	0019      	movs	r1, r3
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	691a      	ldr	r2, [r3, #16]
 80023f8:	4b67      	ldr	r3, [pc, #412]	; (8002598 <HAL_RCC_OscConfig+0x32c>)
 80023fa:	430a      	orrs	r2, r1
 80023fc:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80023fe:	4b66      	ldr	r3, [pc, #408]	; (8002598 <HAL_RCC_OscConfig+0x32c>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	0adb      	lsrs	r3, r3, #11
 8002404:	2207      	movs	r2, #7
 8002406:	4013      	ands	r3, r2
 8002408:	4a68      	ldr	r2, [pc, #416]	; (80025ac <HAL_RCC_OscConfig+0x340>)
 800240a:	40da      	lsrs	r2, r3
 800240c:	4b68      	ldr	r3, [pc, #416]	; (80025b0 <HAL_RCC_OscConfig+0x344>)
 800240e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002410:	4b68      	ldr	r3, [pc, #416]	; (80025b4 <HAL_RCC_OscConfig+0x348>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	0018      	movs	r0, r3
 8002416:	f7ff f97b 	bl	8001710 <HAL_InitTick>
 800241a:	1e03      	subs	r3, r0, #0
 800241c:	d051      	beq.n	80024c2 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	e221      	b.n	8002866 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	68db      	ldr	r3, [r3, #12]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d030      	beq.n	800248c <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800242a:	4b5b      	ldr	r3, [pc, #364]	; (8002598 <HAL_RCC_OscConfig+0x32c>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a5e      	ldr	r2, [pc, #376]	; (80025a8 <HAL_RCC_OscConfig+0x33c>)
 8002430:	4013      	ands	r3, r2
 8002432:	0019      	movs	r1, r3
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	691a      	ldr	r2, [r3, #16]
 8002438:	4b57      	ldr	r3, [pc, #348]	; (8002598 <HAL_RCC_OscConfig+0x32c>)
 800243a:	430a      	orrs	r2, r1
 800243c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800243e:	4b56      	ldr	r3, [pc, #344]	; (8002598 <HAL_RCC_OscConfig+0x32c>)
 8002440:	681a      	ldr	r2, [r3, #0]
 8002442:	4b55      	ldr	r3, [pc, #340]	; (8002598 <HAL_RCC_OscConfig+0x32c>)
 8002444:	2180      	movs	r1, #128	; 0x80
 8002446:	0049      	lsls	r1, r1, #1
 8002448:	430a      	orrs	r2, r1
 800244a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800244c:	f7ff f9bc 	bl	80017c8 <HAL_GetTick>
 8002450:	0003      	movs	r3, r0
 8002452:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002454:	e008      	b.n	8002468 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002456:	f7ff f9b7 	bl	80017c8 <HAL_GetTick>
 800245a:	0002      	movs	r2, r0
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	1ad3      	subs	r3, r2, r3
 8002460:	2b02      	cmp	r3, #2
 8002462:	d901      	bls.n	8002468 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002464:	2303      	movs	r3, #3
 8002466:	e1fe      	b.n	8002866 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002468:	4b4b      	ldr	r3, [pc, #300]	; (8002598 <HAL_RCC_OscConfig+0x32c>)
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	2380      	movs	r3, #128	; 0x80
 800246e:	00db      	lsls	r3, r3, #3
 8002470:	4013      	ands	r3, r2
 8002472:	d0f0      	beq.n	8002456 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002474:	4b48      	ldr	r3, [pc, #288]	; (8002598 <HAL_RCC_OscConfig+0x32c>)
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	4a4a      	ldr	r2, [pc, #296]	; (80025a4 <HAL_RCC_OscConfig+0x338>)
 800247a:	4013      	ands	r3, r2
 800247c:	0019      	movs	r1, r3
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	695b      	ldr	r3, [r3, #20]
 8002482:	021a      	lsls	r2, r3, #8
 8002484:	4b44      	ldr	r3, [pc, #272]	; (8002598 <HAL_RCC_OscConfig+0x32c>)
 8002486:	430a      	orrs	r2, r1
 8002488:	605a      	str	r2, [r3, #4]
 800248a:	e01b      	b.n	80024c4 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 800248c:	4b42      	ldr	r3, [pc, #264]	; (8002598 <HAL_RCC_OscConfig+0x32c>)
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	4b41      	ldr	r3, [pc, #260]	; (8002598 <HAL_RCC_OscConfig+0x32c>)
 8002492:	4949      	ldr	r1, [pc, #292]	; (80025b8 <HAL_RCC_OscConfig+0x34c>)
 8002494:	400a      	ands	r2, r1
 8002496:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002498:	f7ff f996 	bl	80017c8 <HAL_GetTick>
 800249c:	0003      	movs	r3, r0
 800249e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80024a0:	e008      	b.n	80024b4 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024a2:	f7ff f991 	bl	80017c8 <HAL_GetTick>
 80024a6:	0002      	movs	r2, r0
 80024a8:	693b      	ldr	r3, [r7, #16]
 80024aa:	1ad3      	subs	r3, r2, r3
 80024ac:	2b02      	cmp	r3, #2
 80024ae:	d901      	bls.n	80024b4 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80024b0:	2303      	movs	r3, #3
 80024b2:	e1d8      	b.n	8002866 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80024b4:	4b38      	ldr	r3, [pc, #224]	; (8002598 <HAL_RCC_OscConfig+0x32c>)
 80024b6:	681a      	ldr	r2, [r3, #0]
 80024b8:	2380      	movs	r3, #128	; 0x80
 80024ba:	00db      	lsls	r3, r3, #3
 80024bc:	4013      	ands	r3, r2
 80024be:	d1f0      	bne.n	80024a2 <HAL_RCC_OscConfig+0x236>
 80024c0:	e000      	b.n	80024c4 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80024c2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	2208      	movs	r2, #8
 80024ca:	4013      	ands	r3, r2
 80024cc:	d047      	beq.n	800255e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80024ce:	4b32      	ldr	r3, [pc, #200]	; (8002598 <HAL_RCC_OscConfig+0x32c>)
 80024d0:	689b      	ldr	r3, [r3, #8]
 80024d2:	2238      	movs	r2, #56	; 0x38
 80024d4:	4013      	ands	r3, r2
 80024d6:	2b18      	cmp	r3, #24
 80024d8:	d10a      	bne.n	80024f0 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80024da:	4b2f      	ldr	r3, [pc, #188]	; (8002598 <HAL_RCC_OscConfig+0x32c>)
 80024dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024de:	2202      	movs	r2, #2
 80024e0:	4013      	ands	r3, r2
 80024e2:	d03c      	beq.n	800255e <HAL_RCC_OscConfig+0x2f2>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	699b      	ldr	r3, [r3, #24]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d138      	bne.n	800255e <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80024ec:	2301      	movs	r3, #1
 80024ee:	e1ba      	b.n	8002866 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	699b      	ldr	r3, [r3, #24]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d019      	beq.n	800252c <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80024f8:	4b27      	ldr	r3, [pc, #156]	; (8002598 <HAL_RCC_OscConfig+0x32c>)
 80024fa:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80024fc:	4b26      	ldr	r3, [pc, #152]	; (8002598 <HAL_RCC_OscConfig+0x32c>)
 80024fe:	2101      	movs	r1, #1
 8002500:	430a      	orrs	r2, r1
 8002502:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002504:	f7ff f960 	bl	80017c8 <HAL_GetTick>
 8002508:	0003      	movs	r3, r0
 800250a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800250c:	e008      	b.n	8002520 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800250e:	f7ff f95b 	bl	80017c8 <HAL_GetTick>
 8002512:	0002      	movs	r2, r0
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	1ad3      	subs	r3, r2, r3
 8002518:	2b02      	cmp	r3, #2
 800251a:	d901      	bls.n	8002520 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 800251c:	2303      	movs	r3, #3
 800251e:	e1a2      	b.n	8002866 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002520:	4b1d      	ldr	r3, [pc, #116]	; (8002598 <HAL_RCC_OscConfig+0x32c>)
 8002522:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002524:	2202      	movs	r2, #2
 8002526:	4013      	ands	r3, r2
 8002528:	d0f1      	beq.n	800250e <HAL_RCC_OscConfig+0x2a2>
 800252a:	e018      	b.n	800255e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800252c:	4b1a      	ldr	r3, [pc, #104]	; (8002598 <HAL_RCC_OscConfig+0x32c>)
 800252e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002530:	4b19      	ldr	r3, [pc, #100]	; (8002598 <HAL_RCC_OscConfig+0x32c>)
 8002532:	2101      	movs	r1, #1
 8002534:	438a      	bics	r2, r1
 8002536:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002538:	f7ff f946 	bl	80017c8 <HAL_GetTick>
 800253c:	0003      	movs	r3, r0
 800253e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002540:	e008      	b.n	8002554 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002542:	f7ff f941 	bl	80017c8 <HAL_GetTick>
 8002546:	0002      	movs	r2, r0
 8002548:	693b      	ldr	r3, [r7, #16]
 800254a:	1ad3      	subs	r3, r2, r3
 800254c:	2b02      	cmp	r3, #2
 800254e:	d901      	bls.n	8002554 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8002550:	2303      	movs	r3, #3
 8002552:	e188      	b.n	8002866 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002554:	4b10      	ldr	r3, [pc, #64]	; (8002598 <HAL_RCC_OscConfig+0x32c>)
 8002556:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002558:	2202      	movs	r2, #2
 800255a:	4013      	ands	r3, r2
 800255c:	d1f1      	bne.n	8002542 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	2204      	movs	r2, #4
 8002564:	4013      	ands	r3, r2
 8002566:	d100      	bne.n	800256a <HAL_RCC_OscConfig+0x2fe>
 8002568:	e0c6      	b.n	80026f8 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800256a:	231f      	movs	r3, #31
 800256c:	18fb      	adds	r3, r7, r3
 800256e:	2200      	movs	r2, #0
 8002570:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002572:	4b09      	ldr	r3, [pc, #36]	; (8002598 <HAL_RCC_OscConfig+0x32c>)
 8002574:	689b      	ldr	r3, [r3, #8]
 8002576:	2238      	movs	r2, #56	; 0x38
 8002578:	4013      	ands	r3, r2
 800257a:	2b20      	cmp	r3, #32
 800257c:	d11e      	bne.n	80025bc <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800257e:	4b06      	ldr	r3, [pc, #24]	; (8002598 <HAL_RCC_OscConfig+0x32c>)
 8002580:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002582:	2202      	movs	r2, #2
 8002584:	4013      	ands	r3, r2
 8002586:	d100      	bne.n	800258a <HAL_RCC_OscConfig+0x31e>
 8002588:	e0b6      	b.n	80026f8 <HAL_RCC_OscConfig+0x48c>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d000      	beq.n	8002594 <HAL_RCC_OscConfig+0x328>
 8002592:	e0b1      	b.n	80026f8 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8002594:	2301      	movs	r3, #1
 8002596:	e166      	b.n	8002866 <HAL_RCC_OscConfig+0x5fa>
 8002598:	40021000 	.word	0x40021000
 800259c:	fffeffff 	.word	0xfffeffff
 80025a0:	fffbffff 	.word	0xfffbffff
 80025a4:	ffff80ff 	.word	0xffff80ff
 80025a8:	ffffc7ff 	.word	0xffffc7ff
 80025ac:	00f42400 	.word	0x00f42400
 80025b0:	20000034 	.word	0x20000034
 80025b4:	20000038 	.word	0x20000038
 80025b8:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80025bc:	4bac      	ldr	r3, [pc, #688]	; (8002870 <HAL_RCC_OscConfig+0x604>)
 80025be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80025c0:	2380      	movs	r3, #128	; 0x80
 80025c2:	055b      	lsls	r3, r3, #21
 80025c4:	4013      	ands	r3, r2
 80025c6:	d101      	bne.n	80025cc <HAL_RCC_OscConfig+0x360>
 80025c8:	2301      	movs	r3, #1
 80025ca:	e000      	b.n	80025ce <HAL_RCC_OscConfig+0x362>
 80025cc:	2300      	movs	r3, #0
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d011      	beq.n	80025f6 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80025d2:	4ba7      	ldr	r3, [pc, #668]	; (8002870 <HAL_RCC_OscConfig+0x604>)
 80025d4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80025d6:	4ba6      	ldr	r3, [pc, #664]	; (8002870 <HAL_RCC_OscConfig+0x604>)
 80025d8:	2180      	movs	r1, #128	; 0x80
 80025da:	0549      	lsls	r1, r1, #21
 80025dc:	430a      	orrs	r2, r1
 80025de:	63da      	str	r2, [r3, #60]	; 0x3c
 80025e0:	4ba3      	ldr	r3, [pc, #652]	; (8002870 <HAL_RCC_OscConfig+0x604>)
 80025e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80025e4:	2380      	movs	r3, #128	; 0x80
 80025e6:	055b      	lsls	r3, r3, #21
 80025e8:	4013      	ands	r3, r2
 80025ea:	60fb      	str	r3, [r7, #12]
 80025ec:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80025ee:	231f      	movs	r3, #31
 80025f0:	18fb      	adds	r3, r7, r3
 80025f2:	2201      	movs	r2, #1
 80025f4:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025f6:	4b9f      	ldr	r3, [pc, #636]	; (8002874 <HAL_RCC_OscConfig+0x608>)
 80025f8:	681a      	ldr	r2, [r3, #0]
 80025fa:	2380      	movs	r3, #128	; 0x80
 80025fc:	005b      	lsls	r3, r3, #1
 80025fe:	4013      	ands	r3, r2
 8002600:	d11a      	bne.n	8002638 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002602:	4b9c      	ldr	r3, [pc, #624]	; (8002874 <HAL_RCC_OscConfig+0x608>)
 8002604:	681a      	ldr	r2, [r3, #0]
 8002606:	4b9b      	ldr	r3, [pc, #620]	; (8002874 <HAL_RCC_OscConfig+0x608>)
 8002608:	2180      	movs	r1, #128	; 0x80
 800260a:	0049      	lsls	r1, r1, #1
 800260c:	430a      	orrs	r2, r1
 800260e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8002610:	f7ff f8da 	bl	80017c8 <HAL_GetTick>
 8002614:	0003      	movs	r3, r0
 8002616:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002618:	e008      	b.n	800262c <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800261a:	f7ff f8d5 	bl	80017c8 <HAL_GetTick>
 800261e:	0002      	movs	r2, r0
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	1ad3      	subs	r3, r2, r3
 8002624:	2b02      	cmp	r3, #2
 8002626:	d901      	bls.n	800262c <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8002628:	2303      	movs	r3, #3
 800262a:	e11c      	b.n	8002866 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800262c:	4b91      	ldr	r3, [pc, #580]	; (8002874 <HAL_RCC_OscConfig+0x608>)
 800262e:	681a      	ldr	r2, [r3, #0]
 8002630:	2380      	movs	r3, #128	; 0x80
 8002632:	005b      	lsls	r3, r3, #1
 8002634:	4013      	ands	r3, r2
 8002636:	d0f0      	beq.n	800261a <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	2b01      	cmp	r3, #1
 800263e:	d106      	bne.n	800264e <HAL_RCC_OscConfig+0x3e2>
 8002640:	4b8b      	ldr	r3, [pc, #556]	; (8002870 <HAL_RCC_OscConfig+0x604>)
 8002642:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002644:	4b8a      	ldr	r3, [pc, #552]	; (8002870 <HAL_RCC_OscConfig+0x604>)
 8002646:	2101      	movs	r1, #1
 8002648:	430a      	orrs	r2, r1
 800264a:	65da      	str	r2, [r3, #92]	; 0x5c
 800264c:	e01c      	b.n	8002688 <HAL_RCC_OscConfig+0x41c>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	2b05      	cmp	r3, #5
 8002654:	d10c      	bne.n	8002670 <HAL_RCC_OscConfig+0x404>
 8002656:	4b86      	ldr	r3, [pc, #536]	; (8002870 <HAL_RCC_OscConfig+0x604>)
 8002658:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800265a:	4b85      	ldr	r3, [pc, #532]	; (8002870 <HAL_RCC_OscConfig+0x604>)
 800265c:	2104      	movs	r1, #4
 800265e:	430a      	orrs	r2, r1
 8002660:	65da      	str	r2, [r3, #92]	; 0x5c
 8002662:	4b83      	ldr	r3, [pc, #524]	; (8002870 <HAL_RCC_OscConfig+0x604>)
 8002664:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002666:	4b82      	ldr	r3, [pc, #520]	; (8002870 <HAL_RCC_OscConfig+0x604>)
 8002668:	2101      	movs	r1, #1
 800266a:	430a      	orrs	r2, r1
 800266c:	65da      	str	r2, [r3, #92]	; 0x5c
 800266e:	e00b      	b.n	8002688 <HAL_RCC_OscConfig+0x41c>
 8002670:	4b7f      	ldr	r3, [pc, #508]	; (8002870 <HAL_RCC_OscConfig+0x604>)
 8002672:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002674:	4b7e      	ldr	r3, [pc, #504]	; (8002870 <HAL_RCC_OscConfig+0x604>)
 8002676:	2101      	movs	r1, #1
 8002678:	438a      	bics	r2, r1
 800267a:	65da      	str	r2, [r3, #92]	; 0x5c
 800267c:	4b7c      	ldr	r3, [pc, #496]	; (8002870 <HAL_RCC_OscConfig+0x604>)
 800267e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002680:	4b7b      	ldr	r3, [pc, #492]	; (8002870 <HAL_RCC_OscConfig+0x604>)
 8002682:	2104      	movs	r1, #4
 8002684:	438a      	bics	r2, r1
 8002686:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d014      	beq.n	80026ba <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002690:	f7ff f89a 	bl	80017c8 <HAL_GetTick>
 8002694:	0003      	movs	r3, r0
 8002696:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002698:	e009      	b.n	80026ae <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800269a:	f7ff f895 	bl	80017c8 <HAL_GetTick>
 800269e:	0002      	movs	r2, r0
 80026a0:	693b      	ldr	r3, [r7, #16]
 80026a2:	1ad3      	subs	r3, r2, r3
 80026a4:	4a74      	ldr	r2, [pc, #464]	; (8002878 <HAL_RCC_OscConfig+0x60c>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d901      	bls.n	80026ae <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80026aa:	2303      	movs	r3, #3
 80026ac:	e0db      	b.n	8002866 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026ae:	4b70      	ldr	r3, [pc, #448]	; (8002870 <HAL_RCC_OscConfig+0x604>)
 80026b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026b2:	2202      	movs	r2, #2
 80026b4:	4013      	ands	r3, r2
 80026b6:	d0f0      	beq.n	800269a <HAL_RCC_OscConfig+0x42e>
 80026b8:	e013      	b.n	80026e2 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026ba:	f7ff f885 	bl	80017c8 <HAL_GetTick>
 80026be:	0003      	movs	r3, r0
 80026c0:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80026c2:	e009      	b.n	80026d8 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026c4:	f7ff f880 	bl	80017c8 <HAL_GetTick>
 80026c8:	0002      	movs	r2, r0
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	1ad3      	subs	r3, r2, r3
 80026ce:	4a6a      	ldr	r2, [pc, #424]	; (8002878 <HAL_RCC_OscConfig+0x60c>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d901      	bls.n	80026d8 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80026d4:	2303      	movs	r3, #3
 80026d6:	e0c6      	b.n	8002866 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80026d8:	4b65      	ldr	r3, [pc, #404]	; (8002870 <HAL_RCC_OscConfig+0x604>)
 80026da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026dc:	2202      	movs	r2, #2
 80026de:	4013      	ands	r3, r2
 80026e0:	d1f0      	bne.n	80026c4 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80026e2:	231f      	movs	r3, #31
 80026e4:	18fb      	adds	r3, r7, r3
 80026e6:	781b      	ldrb	r3, [r3, #0]
 80026e8:	2b01      	cmp	r3, #1
 80026ea:	d105      	bne.n	80026f8 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80026ec:	4b60      	ldr	r3, [pc, #384]	; (8002870 <HAL_RCC_OscConfig+0x604>)
 80026ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80026f0:	4b5f      	ldr	r3, [pc, #380]	; (8002870 <HAL_RCC_OscConfig+0x604>)
 80026f2:	4962      	ldr	r1, [pc, #392]	; (800287c <HAL_RCC_OscConfig+0x610>)
 80026f4:	400a      	ands	r2, r1
 80026f6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	69db      	ldr	r3, [r3, #28]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d100      	bne.n	8002702 <HAL_RCC_OscConfig+0x496>
 8002700:	e0b0      	b.n	8002864 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002702:	4b5b      	ldr	r3, [pc, #364]	; (8002870 <HAL_RCC_OscConfig+0x604>)
 8002704:	689b      	ldr	r3, [r3, #8]
 8002706:	2238      	movs	r2, #56	; 0x38
 8002708:	4013      	ands	r3, r2
 800270a:	2b10      	cmp	r3, #16
 800270c:	d100      	bne.n	8002710 <HAL_RCC_OscConfig+0x4a4>
 800270e:	e078      	b.n	8002802 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	69db      	ldr	r3, [r3, #28]
 8002714:	2b02      	cmp	r3, #2
 8002716:	d153      	bne.n	80027c0 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002718:	4b55      	ldr	r3, [pc, #340]	; (8002870 <HAL_RCC_OscConfig+0x604>)
 800271a:	681a      	ldr	r2, [r3, #0]
 800271c:	4b54      	ldr	r3, [pc, #336]	; (8002870 <HAL_RCC_OscConfig+0x604>)
 800271e:	4958      	ldr	r1, [pc, #352]	; (8002880 <HAL_RCC_OscConfig+0x614>)
 8002720:	400a      	ands	r2, r1
 8002722:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002724:	f7ff f850 	bl	80017c8 <HAL_GetTick>
 8002728:	0003      	movs	r3, r0
 800272a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800272c:	e008      	b.n	8002740 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800272e:	f7ff f84b 	bl	80017c8 <HAL_GetTick>
 8002732:	0002      	movs	r2, r0
 8002734:	693b      	ldr	r3, [r7, #16]
 8002736:	1ad3      	subs	r3, r2, r3
 8002738:	2b02      	cmp	r3, #2
 800273a:	d901      	bls.n	8002740 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 800273c:	2303      	movs	r3, #3
 800273e:	e092      	b.n	8002866 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002740:	4b4b      	ldr	r3, [pc, #300]	; (8002870 <HAL_RCC_OscConfig+0x604>)
 8002742:	681a      	ldr	r2, [r3, #0]
 8002744:	2380      	movs	r3, #128	; 0x80
 8002746:	049b      	lsls	r3, r3, #18
 8002748:	4013      	ands	r3, r2
 800274a:	d1f0      	bne.n	800272e <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800274c:	4b48      	ldr	r3, [pc, #288]	; (8002870 <HAL_RCC_OscConfig+0x604>)
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	4a4c      	ldr	r2, [pc, #304]	; (8002884 <HAL_RCC_OscConfig+0x618>)
 8002752:	4013      	ands	r3, r2
 8002754:	0019      	movs	r1, r3
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6a1a      	ldr	r2, [r3, #32]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800275e:	431a      	orrs	r2, r3
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002764:	021b      	lsls	r3, r3, #8
 8002766:	431a      	orrs	r2, r3
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800276c:	431a      	orrs	r2, r3
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002772:	431a      	orrs	r2, r3
 8002774:	4b3e      	ldr	r3, [pc, #248]	; (8002870 <HAL_RCC_OscConfig+0x604>)
 8002776:	430a      	orrs	r2, r1
 8002778:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800277a:	4b3d      	ldr	r3, [pc, #244]	; (8002870 <HAL_RCC_OscConfig+0x604>)
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	4b3c      	ldr	r3, [pc, #240]	; (8002870 <HAL_RCC_OscConfig+0x604>)
 8002780:	2180      	movs	r1, #128	; 0x80
 8002782:	0449      	lsls	r1, r1, #17
 8002784:	430a      	orrs	r2, r1
 8002786:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002788:	4b39      	ldr	r3, [pc, #228]	; (8002870 <HAL_RCC_OscConfig+0x604>)
 800278a:	68da      	ldr	r2, [r3, #12]
 800278c:	4b38      	ldr	r3, [pc, #224]	; (8002870 <HAL_RCC_OscConfig+0x604>)
 800278e:	2180      	movs	r1, #128	; 0x80
 8002790:	0549      	lsls	r1, r1, #21
 8002792:	430a      	orrs	r2, r1
 8002794:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002796:	f7ff f817 	bl	80017c8 <HAL_GetTick>
 800279a:	0003      	movs	r3, r0
 800279c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800279e:	e008      	b.n	80027b2 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027a0:	f7ff f812 	bl	80017c8 <HAL_GetTick>
 80027a4:	0002      	movs	r2, r0
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	1ad3      	subs	r3, r2, r3
 80027aa:	2b02      	cmp	r3, #2
 80027ac:	d901      	bls.n	80027b2 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 80027ae:	2303      	movs	r3, #3
 80027b0:	e059      	b.n	8002866 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027b2:	4b2f      	ldr	r3, [pc, #188]	; (8002870 <HAL_RCC_OscConfig+0x604>)
 80027b4:	681a      	ldr	r2, [r3, #0]
 80027b6:	2380      	movs	r3, #128	; 0x80
 80027b8:	049b      	lsls	r3, r3, #18
 80027ba:	4013      	ands	r3, r2
 80027bc:	d0f0      	beq.n	80027a0 <HAL_RCC_OscConfig+0x534>
 80027be:	e051      	b.n	8002864 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027c0:	4b2b      	ldr	r3, [pc, #172]	; (8002870 <HAL_RCC_OscConfig+0x604>)
 80027c2:	681a      	ldr	r2, [r3, #0]
 80027c4:	4b2a      	ldr	r3, [pc, #168]	; (8002870 <HAL_RCC_OscConfig+0x604>)
 80027c6:	492e      	ldr	r1, [pc, #184]	; (8002880 <HAL_RCC_OscConfig+0x614>)
 80027c8:	400a      	ands	r2, r1
 80027ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027cc:	f7fe fffc 	bl	80017c8 <HAL_GetTick>
 80027d0:	0003      	movs	r3, r0
 80027d2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027d4:	e008      	b.n	80027e8 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027d6:	f7fe fff7 	bl	80017c8 <HAL_GetTick>
 80027da:	0002      	movs	r2, r0
 80027dc:	693b      	ldr	r3, [r7, #16]
 80027de:	1ad3      	subs	r3, r2, r3
 80027e0:	2b02      	cmp	r3, #2
 80027e2:	d901      	bls.n	80027e8 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 80027e4:	2303      	movs	r3, #3
 80027e6:	e03e      	b.n	8002866 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027e8:	4b21      	ldr	r3, [pc, #132]	; (8002870 <HAL_RCC_OscConfig+0x604>)
 80027ea:	681a      	ldr	r2, [r3, #0]
 80027ec:	2380      	movs	r3, #128	; 0x80
 80027ee:	049b      	lsls	r3, r3, #18
 80027f0:	4013      	ands	r3, r2
 80027f2:	d1f0      	bne.n	80027d6 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 80027f4:	4b1e      	ldr	r3, [pc, #120]	; (8002870 <HAL_RCC_OscConfig+0x604>)
 80027f6:	68da      	ldr	r2, [r3, #12]
 80027f8:	4b1d      	ldr	r3, [pc, #116]	; (8002870 <HAL_RCC_OscConfig+0x604>)
 80027fa:	4923      	ldr	r1, [pc, #140]	; (8002888 <HAL_RCC_OscConfig+0x61c>)
 80027fc:	400a      	ands	r2, r1
 80027fe:	60da      	str	r2, [r3, #12]
 8002800:	e030      	b.n	8002864 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	69db      	ldr	r3, [r3, #28]
 8002806:	2b01      	cmp	r3, #1
 8002808:	d101      	bne.n	800280e <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 800280a:	2301      	movs	r3, #1
 800280c:	e02b      	b.n	8002866 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800280e:	4b18      	ldr	r3, [pc, #96]	; (8002870 <HAL_RCC_OscConfig+0x604>)
 8002810:	68db      	ldr	r3, [r3, #12]
 8002812:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	2203      	movs	r2, #3
 8002818:	401a      	ands	r2, r3
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6a1b      	ldr	r3, [r3, #32]
 800281e:	429a      	cmp	r2, r3
 8002820:	d11e      	bne.n	8002860 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	2270      	movs	r2, #112	; 0x70
 8002826:	401a      	ands	r2, r3
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800282c:	429a      	cmp	r2, r3
 800282e:	d117      	bne.n	8002860 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002830:	697a      	ldr	r2, [r7, #20]
 8002832:	23fe      	movs	r3, #254	; 0xfe
 8002834:	01db      	lsls	r3, r3, #7
 8002836:	401a      	ands	r2, r3
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800283c:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800283e:	429a      	cmp	r2, r3
 8002840:	d10e      	bne.n	8002860 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002842:	697a      	ldr	r2, [r7, #20]
 8002844:	23f8      	movs	r3, #248	; 0xf8
 8002846:	039b      	lsls	r3, r3, #14
 8002848:	401a      	ands	r2, r3
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800284e:	429a      	cmp	r2, r3
 8002850:	d106      	bne.n	8002860 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	0f5b      	lsrs	r3, r3, #29
 8002856:	075a      	lsls	r2, r3, #29
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800285c:	429a      	cmp	r2, r3
 800285e:	d001      	beq.n	8002864 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8002860:	2301      	movs	r3, #1
 8002862:	e000      	b.n	8002866 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8002864:	2300      	movs	r3, #0
}
 8002866:	0018      	movs	r0, r3
 8002868:	46bd      	mov	sp, r7
 800286a:	b008      	add	sp, #32
 800286c:	bd80      	pop	{r7, pc}
 800286e:	46c0      	nop			; (mov r8, r8)
 8002870:	40021000 	.word	0x40021000
 8002874:	40007000 	.word	0x40007000
 8002878:	00001388 	.word	0x00001388
 800287c:	efffffff 	.word	0xefffffff
 8002880:	feffffff 	.word	0xfeffffff
 8002884:	1fc1808c 	.word	0x1fc1808c
 8002888:	effefffc 	.word	0xeffefffc

0800288c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b084      	sub	sp, #16
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
 8002894:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d101      	bne.n	80028a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800289c:	2301      	movs	r3, #1
 800289e:	e0e9      	b.n	8002a74 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80028a0:	4b76      	ldr	r3, [pc, #472]	; (8002a7c <HAL_RCC_ClockConfig+0x1f0>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	2207      	movs	r2, #7
 80028a6:	4013      	ands	r3, r2
 80028a8:	683a      	ldr	r2, [r7, #0]
 80028aa:	429a      	cmp	r2, r3
 80028ac:	d91e      	bls.n	80028ec <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028ae:	4b73      	ldr	r3, [pc, #460]	; (8002a7c <HAL_RCC_ClockConfig+0x1f0>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	2207      	movs	r2, #7
 80028b4:	4393      	bics	r3, r2
 80028b6:	0019      	movs	r1, r3
 80028b8:	4b70      	ldr	r3, [pc, #448]	; (8002a7c <HAL_RCC_ClockConfig+0x1f0>)
 80028ba:	683a      	ldr	r2, [r7, #0]
 80028bc:	430a      	orrs	r2, r1
 80028be:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80028c0:	f7fe ff82 	bl	80017c8 <HAL_GetTick>
 80028c4:	0003      	movs	r3, r0
 80028c6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80028c8:	e009      	b.n	80028de <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028ca:	f7fe ff7d 	bl	80017c8 <HAL_GetTick>
 80028ce:	0002      	movs	r2, r0
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	1ad3      	subs	r3, r2, r3
 80028d4:	4a6a      	ldr	r2, [pc, #424]	; (8002a80 <HAL_RCC_ClockConfig+0x1f4>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d901      	bls.n	80028de <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80028da:	2303      	movs	r3, #3
 80028dc:	e0ca      	b.n	8002a74 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80028de:	4b67      	ldr	r3, [pc, #412]	; (8002a7c <HAL_RCC_ClockConfig+0x1f0>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	2207      	movs	r2, #7
 80028e4:	4013      	ands	r3, r2
 80028e6:	683a      	ldr	r2, [r7, #0]
 80028e8:	429a      	cmp	r2, r3
 80028ea:	d1ee      	bne.n	80028ca <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	2202      	movs	r2, #2
 80028f2:	4013      	ands	r3, r2
 80028f4:	d015      	beq.n	8002922 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	2204      	movs	r2, #4
 80028fc:	4013      	ands	r3, r2
 80028fe:	d006      	beq.n	800290e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002900:	4b60      	ldr	r3, [pc, #384]	; (8002a84 <HAL_RCC_ClockConfig+0x1f8>)
 8002902:	689a      	ldr	r2, [r3, #8]
 8002904:	4b5f      	ldr	r3, [pc, #380]	; (8002a84 <HAL_RCC_ClockConfig+0x1f8>)
 8002906:	21e0      	movs	r1, #224	; 0xe0
 8002908:	01c9      	lsls	r1, r1, #7
 800290a:	430a      	orrs	r2, r1
 800290c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800290e:	4b5d      	ldr	r3, [pc, #372]	; (8002a84 <HAL_RCC_ClockConfig+0x1f8>)
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	4a5d      	ldr	r2, [pc, #372]	; (8002a88 <HAL_RCC_ClockConfig+0x1fc>)
 8002914:	4013      	ands	r3, r2
 8002916:	0019      	movs	r1, r3
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	689a      	ldr	r2, [r3, #8]
 800291c:	4b59      	ldr	r3, [pc, #356]	; (8002a84 <HAL_RCC_ClockConfig+0x1f8>)
 800291e:	430a      	orrs	r2, r1
 8002920:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	2201      	movs	r2, #1
 8002928:	4013      	ands	r3, r2
 800292a:	d057      	beq.n	80029dc <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	2b01      	cmp	r3, #1
 8002932:	d107      	bne.n	8002944 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002934:	4b53      	ldr	r3, [pc, #332]	; (8002a84 <HAL_RCC_ClockConfig+0x1f8>)
 8002936:	681a      	ldr	r2, [r3, #0]
 8002938:	2380      	movs	r3, #128	; 0x80
 800293a:	029b      	lsls	r3, r3, #10
 800293c:	4013      	ands	r3, r2
 800293e:	d12b      	bne.n	8002998 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002940:	2301      	movs	r3, #1
 8002942:	e097      	b.n	8002a74 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	2b02      	cmp	r3, #2
 800294a:	d107      	bne.n	800295c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800294c:	4b4d      	ldr	r3, [pc, #308]	; (8002a84 <HAL_RCC_ClockConfig+0x1f8>)
 800294e:	681a      	ldr	r2, [r3, #0]
 8002950:	2380      	movs	r3, #128	; 0x80
 8002952:	049b      	lsls	r3, r3, #18
 8002954:	4013      	ands	r3, r2
 8002956:	d11f      	bne.n	8002998 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002958:	2301      	movs	r3, #1
 800295a:	e08b      	b.n	8002a74 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d107      	bne.n	8002974 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002964:	4b47      	ldr	r3, [pc, #284]	; (8002a84 <HAL_RCC_ClockConfig+0x1f8>)
 8002966:	681a      	ldr	r2, [r3, #0]
 8002968:	2380      	movs	r3, #128	; 0x80
 800296a:	00db      	lsls	r3, r3, #3
 800296c:	4013      	ands	r3, r2
 800296e:	d113      	bne.n	8002998 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002970:	2301      	movs	r3, #1
 8002972:	e07f      	b.n	8002a74 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	2b03      	cmp	r3, #3
 800297a:	d106      	bne.n	800298a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800297c:	4b41      	ldr	r3, [pc, #260]	; (8002a84 <HAL_RCC_ClockConfig+0x1f8>)
 800297e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002980:	2202      	movs	r2, #2
 8002982:	4013      	ands	r3, r2
 8002984:	d108      	bne.n	8002998 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	e074      	b.n	8002a74 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800298a:	4b3e      	ldr	r3, [pc, #248]	; (8002a84 <HAL_RCC_ClockConfig+0x1f8>)
 800298c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800298e:	2202      	movs	r2, #2
 8002990:	4013      	ands	r3, r2
 8002992:	d101      	bne.n	8002998 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002994:	2301      	movs	r3, #1
 8002996:	e06d      	b.n	8002a74 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002998:	4b3a      	ldr	r3, [pc, #232]	; (8002a84 <HAL_RCC_ClockConfig+0x1f8>)
 800299a:	689b      	ldr	r3, [r3, #8]
 800299c:	2207      	movs	r2, #7
 800299e:	4393      	bics	r3, r2
 80029a0:	0019      	movs	r1, r3
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	685a      	ldr	r2, [r3, #4]
 80029a6:	4b37      	ldr	r3, [pc, #220]	; (8002a84 <HAL_RCC_ClockConfig+0x1f8>)
 80029a8:	430a      	orrs	r2, r1
 80029aa:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029ac:	f7fe ff0c 	bl	80017c8 <HAL_GetTick>
 80029b0:	0003      	movs	r3, r0
 80029b2:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029b4:	e009      	b.n	80029ca <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029b6:	f7fe ff07 	bl	80017c8 <HAL_GetTick>
 80029ba:	0002      	movs	r2, r0
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	1ad3      	subs	r3, r2, r3
 80029c0:	4a2f      	ldr	r2, [pc, #188]	; (8002a80 <HAL_RCC_ClockConfig+0x1f4>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d901      	bls.n	80029ca <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80029c6:	2303      	movs	r3, #3
 80029c8:	e054      	b.n	8002a74 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029ca:	4b2e      	ldr	r3, [pc, #184]	; (8002a84 <HAL_RCC_ClockConfig+0x1f8>)
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	2238      	movs	r2, #56	; 0x38
 80029d0:	401a      	ands	r2, r3
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	00db      	lsls	r3, r3, #3
 80029d8:	429a      	cmp	r2, r3
 80029da:	d1ec      	bne.n	80029b6 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80029dc:	4b27      	ldr	r3, [pc, #156]	; (8002a7c <HAL_RCC_ClockConfig+0x1f0>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	2207      	movs	r2, #7
 80029e2:	4013      	ands	r3, r2
 80029e4:	683a      	ldr	r2, [r7, #0]
 80029e6:	429a      	cmp	r2, r3
 80029e8:	d21e      	bcs.n	8002a28 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029ea:	4b24      	ldr	r3, [pc, #144]	; (8002a7c <HAL_RCC_ClockConfig+0x1f0>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	2207      	movs	r2, #7
 80029f0:	4393      	bics	r3, r2
 80029f2:	0019      	movs	r1, r3
 80029f4:	4b21      	ldr	r3, [pc, #132]	; (8002a7c <HAL_RCC_ClockConfig+0x1f0>)
 80029f6:	683a      	ldr	r2, [r7, #0]
 80029f8:	430a      	orrs	r2, r1
 80029fa:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80029fc:	f7fe fee4 	bl	80017c8 <HAL_GetTick>
 8002a00:	0003      	movs	r3, r0
 8002a02:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002a04:	e009      	b.n	8002a1a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a06:	f7fe fedf 	bl	80017c8 <HAL_GetTick>
 8002a0a:	0002      	movs	r2, r0
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	1ad3      	subs	r3, r2, r3
 8002a10:	4a1b      	ldr	r2, [pc, #108]	; (8002a80 <HAL_RCC_ClockConfig+0x1f4>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d901      	bls.n	8002a1a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002a16:	2303      	movs	r3, #3
 8002a18:	e02c      	b.n	8002a74 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002a1a:	4b18      	ldr	r3, [pc, #96]	; (8002a7c <HAL_RCC_ClockConfig+0x1f0>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	2207      	movs	r2, #7
 8002a20:	4013      	ands	r3, r2
 8002a22:	683a      	ldr	r2, [r7, #0]
 8002a24:	429a      	cmp	r2, r3
 8002a26:	d1ee      	bne.n	8002a06 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	2204      	movs	r2, #4
 8002a2e:	4013      	ands	r3, r2
 8002a30:	d009      	beq.n	8002a46 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002a32:	4b14      	ldr	r3, [pc, #80]	; (8002a84 <HAL_RCC_ClockConfig+0x1f8>)
 8002a34:	689b      	ldr	r3, [r3, #8]
 8002a36:	4a15      	ldr	r2, [pc, #84]	; (8002a8c <HAL_RCC_ClockConfig+0x200>)
 8002a38:	4013      	ands	r3, r2
 8002a3a:	0019      	movs	r1, r3
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	68da      	ldr	r2, [r3, #12]
 8002a40:	4b10      	ldr	r3, [pc, #64]	; (8002a84 <HAL_RCC_ClockConfig+0x1f8>)
 8002a42:	430a      	orrs	r2, r1
 8002a44:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002a46:	f000 f829 	bl	8002a9c <HAL_RCC_GetSysClockFreq>
 8002a4a:	0001      	movs	r1, r0
 8002a4c:	4b0d      	ldr	r3, [pc, #52]	; (8002a84 <HAL_RCC_ClockConfig+0x1f8>)
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	0a1b      	lsrs	r3, r3, #8
 8002a52:	220f      	movs	r2, #15
 8002a54:	401a      	ands	r2, r3
 8002a56:	4b0e      	ldr	r3, [pc, #56]	; (8002a90 <HAL_RCC_ClockConfig+0x204>)
 8002a58:	0092      	lsls	r2, r2, #2
 8002a5a:	58d3      	ldr	r3, [r2, r3]
 8002a5c:	221f      	movs	r2, #31
 8002a5e:	4013      	ands	r3, r2
 8002a60:	000a      	movs	r2, r1
 8002a62:	40da      	lsrs	r2, r3
 8002a64:	4b0b      	ldr	r3, [pc, #44]	; (8002a94 <HAL_RCC_ClockConfig+0x208>)
 8002a66:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002a68:	4b0b      	ldr	r3, [pc, #44]	; (8002a98 <HAL_RCC_ClockConfig+0x20c>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	0018      	movs	r0, r3
 8002a6e:	f7fe fe4f 	bl	8001710 <HAL_InitTick>
 8002a72:	0003      	movs	r3, r0
}
 8002a74:	0018      	movs	r0, r3
 8002a76:	46bd      	mov	sp, r7
 8002a78:	b004      	add	sp, #16
 8002a7a:	bd80      	pop	{r7, pc}
 8002a7c:	40022000 	.word	0x40022000
 8002a80:	00001388 	.word	0x00001388
 8002a84:	40021000 	.word	0x40021000
 8002a88:	fffff0ff 	.word	0xfffff0ff
 8002a8c:	ffff8fff 	.word	0xffff8fff
 8002a90:	080051c4 	.word	0x080051c4
 8002a94:	20000034 	.word	0x20000034
 8002a98:	20000038 	.word	0x20000038

08002a9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b086      	sub	sp, #24
 8002aa0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002aa2:	4b3c      	ldr	r3, [pc, #240]	; (8002b94 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	2238      	movs	r2, #56	; 0x38
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	d10f      	bne.n	8002acc <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002aac:	4b39      	ldr	r3, [pc, #228]	; (8002b94 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	0adb      	lsrs	r3, r3, #11
 8002ab2:	2207      	movs	r2, #7
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	409a      	lsls	r2, r3
 8002aba:	0013      	movs	r3, r2
 8002abc:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002abe:	6839      	ldr	r1, [r7, #0]
 8002ac0:	4835      	ldr	r0, [pc, #212]	; (8002b98 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002ac2:	f7fd fb39 	bl	8000138 <__udivsi3>
 8002ac6:	0003      	movs	r3, r0
 8002ac8:	613b      	str	r3, [r7, #16]
 8002aca:	e05d      	b.n	8002b88 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002acc:	4b31      	ldr	r3, [pc, #196]	; (8002b94 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	2238      	movs	r2, #56	; 0x38
 8002ad2:	4013      	ands	r3, r2
 8002ad4:	2b08      	cmp	r3, #8
 8002ad6:	d102      	bne.n	8002ade <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002ad8:	4b30      	ldr	r3, [pc, #192]	; (8002b9c <HAL_RCC_GetSysClockFreq+0x100>)
 8002ada:	613b      	str	r3, [r7, #16]
 8002adc:	e054      	b.n	8002b88 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ade:	4b2d      	ldr	r3, [pc, #180]	; (8002b94 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002ae0:	689b      	ldr	r3, [r3, #8]
 8002ae2:	2238      	movs	r2, #56	; 0x38
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	2b10      	cmp	r3, #16
 8002ae8:	d138      	bne.n	8002b5c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002aea:	4b2a      	ldr	r3, [pc, #168]	; (8002b94 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002aec:	68db      	ldr	r3, [r3, #12]
 8002aee:	2203      	movs	r2, #3
 8002af0:	4013      	ands	r3, r2
 8002af2:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002af4:	4b27      	ldr	r3, [pc, #156]	; (8002b94 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002af6:	68db      	ldr	r3, [r3, #12]
 8002af8:	091b      	lsrs	r3, r3, #4
 8002afa:	2207      	movs	r2, #7
 8002afc:	4013      	ands	r3, r2
 8002afe:	3301      	adds	r3, #1
 8002b00:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	2b03      	cmp	r3, #3
 8002b06:	d10d      	bne.n	8002b24 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002b08:	68b9      	ldr	r1, [r7, #8]
 8002b0a:	4824      	ldr	r0, [pc, #144]	; (8002b9c <HAL_RCC_GetSysClockFreq+0x100>)
 8002b0c:	f7fd fb14 	bl	8000138 <__udivsi3>
 8002b10:	0003      	movs	r3, r0
 8002b12:	0019      	movs	r1, r3
 8002b14:	4b1f      	ldr	r3, [pc, #124]	; (8002b94 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b16:	68db      	ldr	r3, [r3, #12]
 8002b18:	0a1b      	lsrs	r3, r3, #8
 8002b1a:	227f      	movs	r2, #127	; 0x7f
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	434b      	muls	r3, r1
 8002b20:	617b      	str	r3, [r7, #20]
        break;
 8002b22:	e00d      	b.n	8002b40 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002b24:	68b9      	ldr	r1, [r7, #8]
 8002b26:	481c      	ldr	r0, [pc, #112]	; (8002b98 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002b28:	f7fd fb06 	bl	8000138 <__udivsi3>
 8002b2c:	0003      	movs	r3, r0
 8002b2e:	0019      	movs	r1, r3
 8002b30:	4b18      	ldr	r3, [pc, #96]	; (8002b94 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b32:	68db      	ldr	r3, [r3, #12]
 8002b34:	0a1b      	lsrs	r3, r3, #8
 8002b36:	227f      	movs	r2, #127	; 0x7f
 8002b38:	4013      	ands	r3, r2
 8002b3a:	434b      	muls	r3, r1
 8002b3c:	617b      	str	r3, [r7, #20]
        break;
 8002b3e:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002b40:	4b14      	ldr	r3, [pc, #80]	; (8002b94 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b42:	68db      	ldr	r3, [r3, #12]
 8002b44:	0f5b      	lsrs	r3, r3, #29
 8002b46:	2207      	movs	r2, #7
 8002b48:	4013      	ands	r3, r2
 8002b4a:	3301      	adds	r3, #1
 8002b4c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002b4e:	6879      	ldr	r1, [r7, #4]
 8002b50:	6978      	ldr	r0, [r7, #20]
 8002b52:	f7fd faf1 	bl	8000138 <__udivsi3>
 8002b56:	0003      	movs	r3, r0
 8002b58:	613b      	str	r3, [r7, #16]
 8002b5a:	e015      	b.n	8002b88 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002b5c:	4b0d      	ldr	r3, [pc, #52]	; (8002b94 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	2238      	movs	r2, #56	; 0x38
 8002b62:	4013      	ands	r3, r2
 8002b64:	2b20      	cmp	r3, #32
 8002b66:	d103      	bne.n	8002b70 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002b68:	2380      	movs	r3, #128	; 0x80
 8002b6a:	021b      	lsls	r3, r3, #8
 8002b6c:	613b      	str	r3, [r7, #16]
 8002b6e:	e00b      	b.n	8002b88 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002b70:	4b08      	ldr	r3, [pc, #32]	; (8002b94 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	2238      	movs	r2, #56	; 0x38
 8002b76:	4013      	ands	r3, r2
 8002b78:	2b18      	cmp	r3, #24
 8002b7a:	d103      	bne.n	8002b84 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002b7c:	23fa      	movs	r3, #250	; 0xfa
 8002b7e:	01db      	lsls	r3, r3, #7
 8002b80:	613b      	str	r3, [r7, #16]
 8002b82:	e001      	b.n	8002b88 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002b84:	2300      	movs	r3, #0
 8002b86:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002b88:	693b      	ldr	r3, [r7, #16]
}
 8002b8a:	0018      	movs	r0, r3
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	b006      	add	sp, #24
 8002b90:	bd80      	pop	{r7, pc}
 8002b92:	46c0      	nop			; (mov r8, r8)
 8002b94:	40021000 	.word	0x40021000
 8002b98:	00f42400 	.word	0x00f42400
 8002b9c:	007a1200 	.word	0x007a1200

08002ba0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ba4:	4b02      	ldr	r3, [pc, #8]	; (8002bb0 <HAL_RCC_GetHCLKFreq+0x10>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
}
 8002ba8:	0018      	movs	r0, r3
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}
 8002bae:	46c0      	nop			; (mov r8, r8)
 8002bb0:	20000034 	.word	0x20000034

08002bb4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002bb4:	b5b0      	push	{r4, r5, r7, lr}
 8002bb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002bb8:	f7ff fff2 	bl	8002ba0 <HAL_RCC_GetHCLKFreq>
 8002bbc:	0004      	movs	r4, r0
 8002bbe:	f7ff fb49 	bl	8002254 <LL_RCC_GetAPB1Prescaler>
 8002bc2:	0003      	movs	r3, r0
 8002bc4:	0b1a      	lsrs	r2, r3, #12
 8002bc6:	4b05      	ldr	r3, [pc, #20]	; (8002bdc <HAL_RCC_GetPCLK1Freq+0x28>)
 8002bc8:	0092      	lsls	r2, r2, #2
 8002bca:	58d3      	ldr	r3, [r2, r3]
 8002bcc:	221f      	movs	r2, #31
 8002bce:	4013      	ands	r3, r2
 8002bd0:	40dc      	lsrs	r4, r3
 8002bd2:	0023      	movs	r3, r4
}
 8002bd4:	0018      	movs	r0, r3
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bdb0      	pop	{r4, r5, r7, pc}
 8002bda:	46c0      	nop			; (mov r8, r8)
 8002bdc:	08005204 	.word	0x08005204

08002be0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b086      	sub	sp, #24
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002be8:	2313      	movs	r3, #19
 8002bea:	18fb      	adds	r3, r7, r3
 8002bec:	2200      	movs	r2, #0
 8002bee:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002bf0:	2312      	movs	r3, #18
 8002bf2:	18fb      	adds	r3, r7, r3
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681a      	ldr	r2, [r3, #0]
 8002bfc:	2380      	movs	r3, #128	; 0x80
 8002bfe:	029b      	lsls	r3, r3, #10
 8002c00:	4013      	ands	r3, r2
 8002c02:	d100      	bne.n	8002c06 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002c04:	e0a3      	b.n	8002d4e <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c06:	2011      	movs	r0, #17
 8002c08:	183b      	adds	r3, r7, r0
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c0e:	4b86      	ldr	r3, [pc, #536]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002c10:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002c12:	2380      	movs	r3, #128	; 0x80
 8002c14:	055b      	lsls	r3, r3, #21
 8002c16:	4013      	ands	r3, r2
 8002c18:	d110      	bne.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c1a:	4b83      	ldr	r3, [pc, #524]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002c1c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002c1e:	4b82      	ldr	r3, [pc, #520]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002c20:	2180      	movs	r1, #128	; 0x80
 8002c22:	0549      	lsls	r1, r1, #21
 8002c24:	430a      	orrs	r2, r1
 8002c26:	63da      	str	r2, [r3, #60]	; 0x3c
 8002c28:	4b7f      	ldr	r3, [pc, #508]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002c2a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002c2c:	2380      	movs	r3, #128	; 0x80
 8002c2e:	055b      	lsls	r3, r3, #21
 8002c30:	4013      	ands	r3, r2
 8002c32:	60bb      	str	r3, [r7, #8]
 8002c34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c36:	183b      	adds	r3, r7, r0
 8002c38:	2201      	movs	r2, #1
 8002c3a:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c3c:	4b7b      	ldr	r3, [pc, #492]	; (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002c3e:	681a      	ldr	r2, [r3, #0]
 8002c40:	4b7a      	ldr	r3, [pc, #488]	; (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002c42:	2180      	movs	r1, #128	; 0x80
 8002c44:	0049      	lsls	r1, r1, #1
 8002c46:	430a      	orrs	r2, r1
 8002c48:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002c4a:	f7fe fdbd 	bl	80017c8 <HAL_GetTick>
 8002c4e:	0003      	movs	r3, r0
 8002c50:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002c52:	e00b      	b.n	8002c6c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c54:	f7fe fdb8 	bl	80017c8 <HAL_GetTick>
 8002c58:	0002      	movs	r2, r0
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	1ad3      	subs	r3, r2, r3
 8002c5e:	2b02      	cmp	r3, #2
 8002c60:	d904      	bls.n	8002c6c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8002c62:	2313      	movs	r3, #19
 8002c64:	18fb      	adds	r3, r7, r3
 8002c66:	2203      	movs	r2, #3
 8002c68:	701a      	strb	r2, [r3, #0]
        break;
 8002c6a:	e005      	b.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002c6c:	4b6f      	ldr	r3, [pc, #444]	; (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002c6e:	681a      	ldr	r2, [r3, #0]
 8002c70:	2380      	movs	r3, #128	; 0x80
 8002c72:	005b      	lsls	r3, r3, #1
 8002c74:	4013      	ands	r3, r2
 8002c76:	d0ed      	beq.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002c78:	2313      	movs	r3, #19
 8002c7a:	18fb      	adds	r3, r7, r3
 8002c7c:	781b      	ldrb	r3, [r3, #0]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d154      	bne.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002c82:	4b69      	ldr	r3, [pc, #420]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002c84:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002c86:	23c0      	movs	r3, #192	; 0xc0
 8002c88:	009b      	lsls	r3, r3, #2
 8002c8a:	4013      	ands	r3, r2
 8002c8c:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d019      	beq.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	699b      	ldr	r3, [r3, #24]
 8002c98:	697a      	ldr	r2, [r7, #20]
 8002c9a:	429a      	cmp	r2, r3
 8002c9c:	d014      	beq.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002c9e:	4b62      	ldr	r3, [pc, #392]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002ca0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ca2:	4a63      	ldr	r2, [pc, #396]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002ca8:	4b5f      	ldr	r3, [pc, #380]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002caa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002cac:	4b5e      	ldr	r3, [pc, #376]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002cae:	2180      	movs	r1, #128	; 0x80
 8002cb0:	0249      	lsls	r1, r1, #9
 8002cb2:	430a      	orrs	r2, r1
 8002cb4:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002cb6:	4b5c      	ldr	r3, [pc, #368]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002cb8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002cba:	4b5b      	ldr	r3, [pc, #364]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002cbc:	495d      	ldr	r1, [pc, #372]	; (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002cbe:	400a      	ands	r2, r1
 8002cc0:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002cc2:	4b59      	ldr	r3, [pc, #356]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002cc4:	697a      	ldr	r2, [r7, #20]
 8002cc6:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	2201      	movs	r2, #1
 8002ccc:	4013      	ands	r3, r2
 8002cce:	d016      	beq.n	8002cfe <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cd0:	f7fe fd7a 	bl	80017c8 <HAL_GetTick>
 8002cd4:	0003      	movs	r3, r0
 8002cd6:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cd8:	e00c      	b.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cda:	f7fe fd75 	bl	80017c8 <HAL_GetTick>
 8002cde:	0002      	movs	r2, r0
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	1ad3      	subs	r3, r2, r3
 8002ce4:	4a54      	ldr	r2, [pc, #336]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d904      	bls.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8002cea:	2313      	movs	r3, #19
 8002cec:	18fb      	adds	r3, r7, r3
 8002cee:	2203      	movs	r2, #3
 8002cf0:	701a      	strb	r2, [r3, #0]
            break;
 8002cf2:	e004      	b.n	8002cfe <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cf4:	4b4c      	ldr	r3, [pc, #304]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002cf6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cf8:	2202      	movs	r2, #2
 8002cfa:	4013      	ands	r3, r2
 8002cfc:	d0ed      	beq.n	8002cda <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8002cfe:	2313      	movs	r3, #19
 8002d00:	18fb      	adds	r3, r7, r3
 8002d02:	781b      	ldrb	r3, [r3, #0]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d10a      	bne.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d08:	4b47      	ldr	r3, [pc, #284]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002d0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d0c:	4a48      	ldr	r2, [pc, #288]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002d0e:	4013      	ands	r3, r2
 8002d10:	0019      	movs	r1, r3
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	699a      	ldr	r2, [r3, #24]
 8002d16:	4b44      	ldr	r3, [pc, #272]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002d18:	430a      	orrs	r2, r1
 8002d1a:	65da      	str	r2, [r3, #92]	; 0x5c
 8002d1c:	e00c      	b.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002d1e:	2312      	movs	r3, #18
 8002d20:	18fb      	adds	r3, r7, r3
 8002d22:	2213      	movs	r2, #19
 8002d24:	18ba      	adds	r2, r7, r2
 8002d26:	7812      	ldrb	r2, [r2, #0]
 8002d28:	701a      	strb	r2, [r3, #0]
 8002d2a:	e005      	b.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d2c:	2312      	movs	r3, #18
 8002d2e:	18fb      	adds	r3, r7, r3
 8002d30:	2213      	movs	r2, #19
 8002d32:	18ba      	adds	r2, r7, r2
 8002d34:	7812      	ldrb	r2, [r2, #0]
 8002d36:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002d38:	2311      	movs	r3, #17
 8002d3a:	18fb      	adds	r3, r7, r3
 8002d3c:	781b      	ldrb	r3, [r3, #0]
 8002d3e:	2b01      	cmp	r3, #1
 8002d40:	d105      	bne.n	8002d4e <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d42:	4b39      	ldr	r3, [pc, #228]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002d44:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002d46:	4b38      	ldr	r3, [pc, #224]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002d48:	493c      	ldr	r1, [pc, #240]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002d4a:	400a      	ands	r2, r1
 8002d4c:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	2201      	movs	r2, #1
 8002d54:	4013      	ands	r3, r2
 8002d56:	d009      	beq.n	8002d6c <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d58:	4b33      	ldr	r3, [pc, #204]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002d5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d5c:	2203      	movs	r2, #3
 8002d5e:	4393      	bics	r3, r2
 8002d60:	0019      	movs	r1, r3
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	685a      	ldr	r2, [r3, #4]
 8002d66:	4b30      	ldr	r3, [pc, #192]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002d68:	430a      	orrs	r2, r1
 8002d6a:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	2202      	movs	r2, #2
 8002d72:	4013      	ands	r3, r2
 8002d74:	d009      	beq.n	8002d8a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002d76:	4b2c      	ldr	r3, [pc, #176]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002d78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d7a:	220c      	movs	r2, #12
 8002d7c:	4393      	bics	r3, r2
 8002d7e:	0019      	movs	r1, r3
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	689a      	ldr	r2, [r3, #8]
 8002d84:	4b28      	ldr	r3, [pc, #160]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002d86:	430a      	orrs	r2, r1
 8002d88:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	2220      	movs	r2, #32
 8002d90:	4013      	ands	r3, r2
 8002d92:	d009      	beq.n	8002da8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002d94:	4b24      	ldr	r3, [pc, #144]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002d96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d98:	4a29      	ldr	r2, [pc, #164]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d9a:	4013      	ands	r3, r2
 8002d9c:	0019      	movs	r1, r3
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	68da      	ldr	r2, [r3, #12]
 8002da2:	4b21      	ldr	r3, [pc, #132]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002da4:	430a      	orrs	r2, r1
 8002da6:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681a      	ldr	r2, [r3, #0]
 8002dac:	2380      	movs	r3, #128	; 0x80
 8002dae:	01db      	lsls	r3, r3, #7
 8002db0:	4013      	ands	r3, r2
 8002db2:	d015      	beq.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002db4:	4b1c      	ldr	r3, [pc, #112]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002db6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002db8:	009b      	lsls	r3, r3, #2
 8002dba:	0899      	lsrs	r1, r3, #2
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	695a      	ldr	r2, [r3, #20]
 8002dc0:	4b19      	ldr	r3, [pc, #100]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002dc2:	430a      	orrs	r2, r1
 8002dc4:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	695a      	ldr	r2, [r3, #20]
 8002dca:	2380      	movs	r3, #128	; 0x80
 8002dcc:	05db      	lsls	r3, r3, #23
 8002dce:	429a      	cmp	r2, r3
 8002dd0:	d106      	bne.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002dd2:	4b15      	ldr	r3, [pc, #84]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002dd4:	68da      	ldr	r2, [r3, #12]
 8002dd6:	4b14      	ldr	r3, [pc, #80]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002dd8:	2180      	movs	r1, #128	; 0x80
 8002dda:	0249      	lsls	r1, r1, #9
 8002ddc:	430a      	orrs	r2, r1
 8002dde:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681a      	ldr	r2, [r3, #0]
 8002de4:	2380      	movs	r3, #128	; 0x80
 8002de6:	011b      	lsls	r3, r3, #4
 8002de8:	4013      	ands	r3, r2
 8002dea:	d016      	beq.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002dec:	4b0e      	ldr	r3, [pc, #56]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002dee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002df0:	4a14      	ldr	r2, [pc, #80]	; (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002df2:	4013      	ands	r3, r2
 8002df4:	0019      	movs	r1, r3
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	691a      	ldr	r2, [r3, #16]
 8002dfa:	4b0b      	ldr	r3, [pc, #44]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002dfc:	430a      	orrs	r2, r1
 8002dfe:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	691a      	ldr	r2, [r3, #16]
 8002e04:	2380      	movs	r3, #128	; 0x80
 8002e06:	01db      	lsls	r3, r3, #7
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	d106      	bne.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002e0c:	4b06      	ldr	r3, [pc, #24]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002e0e:	68da      	ldr	r2, [r3, #12]
 8002e10:	4b05      	ldr	r3, [pc, #20]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002e12:	2180      	movs	r1, #128	; 0x80
 8002e14:	0249      	lsls	r1, r1, #9
 8002e16:	430a      	orrs	r2, r1
 8002e18:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002e1a:	2312      	movs	r3, #18
 8002e1c:	18fb      	adds	r3, r7, r3
 8002e1e:	781b      	ldrb	r3, [r3, #0]
}
 8002e20:	0018      	movs	r0, r3
 8002e22:	46bd      	mov	sp, r7
 8002e24:	b006      	add	sp, #24
 8002e26:	bd80      	pop	{r7, pc}
 8002e28:	40021000 	.word	0x40021000
 8002e2c:	40007000 	.word	0x40007000
 8002e30:	fffffcff 	.word	0xfffffcff
 8002e34:	fffeffff 	.word	0xfffeffff
 8002e38:	00001388 	.word	0x00001388
 8002e3c:	efffffff 	.word	0xefffffff
 8002e40:	ffffcfff 	.word	0xffffcfff
 8002e44:	ffff3fff 	.word	0xffff3fff

08002e48 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b082      	sub	sp, #8
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d101      	bne.n	8002e5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	e046      	b.n	8002ee8 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2284      	movs	r2, #132	; 0x84
 8002e5e:	589b      	ldr	r3, [r3, r2]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d107      	bne.n	8002e74 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2280      	movs	r2, #128	; 0x80
 8002e68:	2100      	movs	r1, #0
 8002e6a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	0018      	movs	r0, r3
 8002e70:	f7fe fac2 	bl	80013f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2284      	movs	r2, #132	; 0x84
 8002e78:	2124      	movs	r1, #36	; 0x24
 8002e7a:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	681a      	ldr	r2, [r3, #0]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	2101      	movs	r1, #1
 8002e88:	438a      	bics	r2, r1
 8002e8a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	0018      	movs	r0, r3
 8002e90:	f000 f8b6 	bl	8003000 <UART_SetConfig>
 8002e94:	0003      	movs	r3, r0
 8002e96:	2b01      	cmp	r3, #1
 8002e98:	d101      	bne.n	8002e9e <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e024      	b.n	8002ee8 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d003      	beq.n	8002eae <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	0018      	movs	r0, r3
 8002eaa:	f000 fa4d 	bl	8003348 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	685a      	ldr	r2, [r3, #4]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	490d      	ldr	r1, [pc, #52]	; (8002ef0 <HAL_UART_Init+0xa8>)
 8002eba:	400a      	ands	r2, r1
 8002ebc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	689a      	ldr	r2, [r3, #8]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	212a      	movs	r1, #42	; 0x2a
 8002eca:	438a      	bics	r2, r1
 8002ecc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	681a      	ldr	r2, [r3, #0]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	2101      	movs	r1, #1
 8002eda:	430a      	orrs	r2, r1
 8002edc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	0018      	movs	r0, r3
 8002ee2:	f000 fae5 	bl	80034b0 <UART_CheckIdleState>
 8002ee6:	0003      	movs	r3, r0
}
 8002ee8:	0018      	movs	r0, r3
 8002eea:	46bd      	mov	sp, r7
 8002eec:	b002      	add	sp, #8
 8002eee:	bd80      	pop	{r7, pc}
 8002ef0:	ffffb7ff 	.word	0xffffb7ff

08002ef4 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b088      	sub	sp, #32
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	60f8      	str	r0, [r7, #12]
 8002efc:	60b9      	str	r1, [r7, #8]
 8002efe:	1dbb      	adds	r3, r7, #6
 8002f00:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	2288      	movs	r2, #136	; 0x88
 8002f06:	589b      	ldr	r3, [r3, r2]
 8002f08:	2b20      	cmp	r3, #32
 8002f0a:	d150      	bne.n	8002fae <HAL_UART_Receive_DMA+0xba>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d003      	beq.n	8002f1a <HAL_UART_Receive_DMA+0x26>
 8002f12:	1dbb      	adds	r3, r7, #6
 8002f14:	881b      	ldrh	r3, [r3, #0]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d101      	bne.n	8002f1e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e048      	b.n	8002fb0 <HAL_UART_Receive_DMA+0xbc>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	689a      	ldr	r2, [r3, #8]
 8002f22:	2380      	movs	r3, #128	; 0x80
 8002f24:	015b      	lsls	r3, r3, #5
 8002f26:	429a      	cmp	r2, r3
 8002f28:	d109      	bne.n	8002f3e <HAL_UART_Receive_DMA+0x4a>
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	691b      	ldr	r3, [r3, #16]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d105      	bne.n	8002f3e <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	2201      	movs	r2, #1
 8002f36:	4013      	ands	r3, r2
 8002f38:	d001      	beq.n	8002f3e <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e038      	b.n	8002fb0 <HAL_UART_Receive_DMA+0xbc>
      }
    }

    __HAL_LOCK(huart);
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	2280      	movs	r2, #128	; 0x80
 8002f42:	5c9b      	ldrb	r3, [r3, r2]
 8002f44:	2b01      	cmp	r3, #1
 8002f46:	d101      	bne.n	8002f4c <HAL_UART_Receive_DMA+0x58>
 8002f48:	2302      	movs	r3, #2
 8002f4a:	e031      	b.n	8002fb0 <HAL_UART_Receive_DMA+0xbc>
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	2280      	movs	r2, #128	; 0x80
 8002f50:	2101      	movs	r1, #1
 8002f52:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	2200      	movs	r2, #0
 8002f58:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	685a      	ldr	r2, [r3, #4]
 8002f60:	2380      	movs	r3, #128	; 0x80
 8002f62:	041b      	lsls	r3, r3, #16
 8002f64:	4013      	ands	r3, r2
 8002f66:	d019      	beq.n	8002f9c <HAL_UART_Receive_DMA+0xa8>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f68:	f3ef 8310 	mrs	r3, PRIMASK
 8002f6c:	613b      	str	r3, [r7, #16]
  return(result);
 8002f6e:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002f70:	61fb      	str	r3, [r7, #28]
 8002f72:	2301      	movs	r3, #1
 8002f74:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	f383 8810 	msr	PRIMASK, r3
}
 8002f7c:	46c0      	nop			; (mov r8, r8)
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	681a      	ldr	r2, [r3, #0]
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	2180      	movs	r1, #128	; 0x80
 8002f8a:	04c9      	lsls	r1, r1, #19
 8002f8c:	430a      	orrs	r2, r1
 8002f8e:	601a      	str	r2, [r3, #0]
 8002f90:	69fb      	ldr	r3, [r7, #28]
 8002f92:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f94:	69bb      	ldr	r3, [r7, #24]
 8002f96:	f383 8810 	msr	PRIMASK, r3
}
 8002f9a:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8002f9c:	1dbb      	adds	r3, r7, #6
 8002f9e:	881a      	ldrh	r2, [r3, #0]
 8002fa0:	68b9      	ldr	r1, [r7, #8]
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	0018      	movs	r0, r3
 8002fa6:	f000 fb95 	bl	80036d4 <UART_Start_Receive_DMA>
 8002faa:	0003      	movs	r3, r0
 8002fac:	e000      	b.n	8002fb0 <HAL_UART_Receive_DMA+0xbc>
  }
  else
  {
    return HAL_BUSY;
 8002fae:	2302      	movs	r3, #2
  }
}
 8002fb0:	0018      	movs	r0, r3
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	b008      	add	sp, #32
 8002fb6:	bd80      	pop	{r7, pc}

08002fb8 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b082      	sub	sp, #8
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8002fc0:	46c0      	nop			; (mov r8, r8)
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	b002      	add	sp, #8
 8002fc6:	bd80      	pop	{r7, pc}

08002fc8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b082      	sub	sp, #8
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8002fd0:	46c0      	nop			; (mov r8, r8)
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	b002      	add	sp, #8
 8002fd6:	bd80      	pop	{r7, pc}

08002fd8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b082      	sub	sp, #8
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002fe0:	46c0      	nop			; (mov r8, r8)
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	b002      	add	sp, #8
 8002fe6:	bd80      	pop	{r7, pc}

08002fe8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b082      	sub	sp, #8
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
 8002ff0:	000a      	movs	r2, r1
 8002ff2:	1cbb      	adds	r3, r7, #2
 8002ff4:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002ff6:	46c0      	nop			; (mov r8, r8)
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	b002      	add	sp, #8
 8002ffc:	bd80      	pop	{r7, pc}
	...

08003000 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b088      	sub	sp, #32
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003008:	231a      	movs	r3, #26
 800300a:	18fb      	adds	r3, r7, r3
 800300c:	2200      	movs	r2, #0
 800300e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	689a      	ldr	r2, [r3, #8]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	691b      	ldr	r3, [r3, #16]
 8003018:	431a      	orrs	r2, r3
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	695b      	ldr	r3, [r3, #20]
 800301e:	431a      	orrs	r2, r3
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	69db      	ldr	r3, [r3, #28]
 8003024:	4313      	orrs	r3, r2
 8003026:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4abc      	ldr	r2, [pc, #752]	; (8003320 <UART_SetConfig+0x320>)
 8003030:	4013      	ands	r3, r2
 8003032:	0019      	movs	r1, r3
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	69fa      	ldr	r2, [r7, #28]
 800303a:	430a      	orrs	r2, r1
 800303c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	4ab7      	ldr	r2, [pc, #732]	; (8003324 <UART_SetConfig+0x324>)
 8003046:	4013      	ands	r3, r2
 8003048:	0019      	movs	r1, r3
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	68da      	ldr	r2, [r3, #12]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	430a      	orrs	r2, r1
 8003054:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	699b      	ldr	r3, [r3, #24]
 800305a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6a1b      	ldr	r3, [r3, #32]
 8003060:	69fa      	ldr	r2, [r7, #28]
 8003062:	4313      	orrs	r3, r2
 8003064:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	4aae      	ldr	r2, [pc, #696]	; (8003328 <UART_SetConfig+0x328>)
 800306e:	4013      	ands	r3, r2
 8003070:	0019      	movs	r1, r3
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	69fa      	ldr	r2, [r7, #28]
 8003078:	430a      	orrs	r2, r1
 800307a:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003082:	220f      	movs	r2, #15
 8003084:	4393      	bics	r3, r2
 8003086:	0019      	movs	r1, r3
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	430a      	orrs	r2, r1
 8003092:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4aa4      	ldr	r2, [pc, #656]	; (800332c <UART_SetConfig+0x32c>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d127      	bne.n	80030ee <UART_SetConfig+0xee>
 800309e:	4ba4      	ldr	r3, [pc, #656]	; (8003330 <UART_SetConfig+0x330>)
 80030a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030a2:	2203      	movs	r2, #3
 80030a4:	4013      	ands	r3, r2
 80030a6:	2b03      	cmp	r3, #3
 80030a8:	d017      	beq.n	80030da <UART_SetConfig+0xda>
 80030aa:	d81b      	bhi.n	80030e4 <UART_SetConfig+0xe4>
 80030ac:	2b02      	cmp	r3, #2
 80030ae:	d00a      	beq.n	80030c6 <UART_SetConfig+0xc6>
 80030b0:	d818      	bhi.n	80030e4 <UART_SetConfig+0xe4>
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d002      	beq.n	80030bc <UART_SetConfig+0xbc>
 80030b6:	2b01      	cmp	r3, #1
 80030b8:	d00a      	beq.n	80030d0 <UART_SetConfig+0xd0>
 80030ba:	e013      	b.n	80030e4 <UART_SetConfig+0xe4>
 80030bc:	231b      	movs	r3, #27
 80030be:	18fb      	adds	r3, r7, r3
 80030c0:	2200      	movs	r2, #0
 80030c2:	701a      	strb	r2, [r3, #0]
 80030c4:	e058      	b.n	8003178 <UART_SetConfig+0x178>
 80030c6:	231b      	movs	r3, #27
 80030c8:	18fb      	adds	r3, r7, r3
 80030ca:	2202      	movs	r2, #2
 80030cc:	701a      	strb	r2, [r3, #0]
 80030ce:	e053      	b.n	8003178 <UART_SetConfig+0x178>
 80030d0:	231b      	movs	r3, #27
 80030d2:	18fb      	adds	r3, r7, r3
 80030d4:	2204      	movs	r2, #4
 80030d6:	701a      	strb	r2, [r3, #0]
 80030d8:	e04e      	b.n	8003178 <UART_SetConfig+0x178>
 80030da:	231b      	movs	r3, #27
 80030dc:	18fb      	adds	r3, r7, r3
 80030de:	2208      	movs	r2, #8
 80030e0:	701a      	strb	r2, [r3, #0]
 80030e2:	e049      	b.n	8003178 <UART_SetConfig+0x178>
 80030e4:	231b      	movs	r3, #27
 80030e6:	18fb      	adds	r3, r7, r3
 80030e8:	2210      	movs	r2, #16
 80030ea:	701a      	strb	r2, [r3, #0]
 80030ec:	e044      	b.n	8003178 <UART_SetConfig+0x178>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a90      	ldr	r2, [pc, #576]	; (8003334 <UART_SetConfig+0x334>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d127      	bne.n	8003148 <UART_SetConfig+0x148>
 80030f8:	4b8d      	ldr	r3, [pc, #564]	; (8003330 <UART_SetConfig+0x330>)
 80030fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030fc:	220c      	movs	r2, #12
 80030fe:	4013      	ands	r3, r2
 8003100:	2b0c      	cmp	r3, #12
 8003102:	d017      	beq.n	8003134 <UART_SetConfig+0x134>
 8003104:	d81b      	bhi.n	800313e <UART_SetConfig+0x13e>
 8003106:	2b08      	cmp	r3, #8
 8003108:	d00a      	beq.n	8003120 <UART_SetConfig+0x120>
 800310a:	d818      	bhi.n	800313e <UART_SetConfig+0x13e>
 800310c:	2b00      	cmp	r3, #0
 800310e:	d002      	beq.n	8003116 <UART_SetConfig+0x116>
 8003110:	2b04      	cmp	r3, #4
 8003112:	d00a      	beq.n	800312a <UART_SetConfig+0x12a>
 8003114:	e013      	b.n	800313e <UART_SetConfig+0x13e>
 8003116:	231b      	movs	r3, #27
 8003118:	18fb      	adds	r3, r7, r3
 800311a:	2200      	movs	r2, #0
 800311c:	701a      	strb	r2, [r3, #0]
 800311e:	e02b      	b.n	8003178 <UART_SetConfig+0x178>
 8003120:	231b      	movs	r3, #27
 8003122:	18fb      	adds	r3, r7, r3
 8003124:	2202      	movs	r2, #2
 8003126:	701a      	strb	r2, [r3, #0]
 8003128:	e026      	b.n	8003178 <UART_SetConfig+0x178>
 800312a:	231b      	movs	r3, #27
 800312c:	18fb      	adds	r3, r7, r3
 800312e:	2204      	movs	r2, #4
 8003130:	701a      	strb	r2, [r3, #0]
 8003132:	e021      	b.n	8003178 <UART_SetConfig+0x178>
 8003134:	231b      	movs	r3, #27
 8003136:	18fb      	adds	r3, r7, r3
 8003138:	2208      	movs	r2, #8
 800313a:	701a      	strb	r2, [r3, #0]
 800313c:	e01c      	b.n	8003178 <UART_SetConfig+0x178>
 800313e:	231b      	movs	r3, #27
 8003140:	18fb      	adds	r3, r7, r3
 8003142:	2210      	movs	r2, #16
 8003144:	701a      	strb	r2, [r3, #0]
 8003146:	e017      	b.n	8003178 <UART_SetConfig+0x178>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a7a      	ldr	r2, [pc, #488]	; (8003338 <UART_SetConfig+0x338>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d104      	bne.n	800315c <UART_SetConfig+0x15c>
 8003152:	231b      	movs	r3, #27
 8003154:	18fb      	adds	r3, r7, r3
 8003156:	2200      	movs	r2, #0
 8003158:	701a      	strb	r2, [r3, #0]
 800315a:	e00d      	b.n	8003178 <UART_SetConfig+0x178>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a76      	ldr	r2, [pc, #472]	; (800333c <UART_SetConfig+0x33c>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d104      	bne.n	8003170 <UART_SetConfig+0x170>
 8003166:	231b      	movs	r3, #27
 8003168:	18fb      	adds	r3, r7, r3
 800316a:	2200      	movs	r2, #0
 800316c:	701a      	strb	r2, [r3, #0]
 800316e:	e003      	b.n	8003178 <UART_SetConfig+0x178>
 8003170:	231b      	movs	r3, #27
 8003172:	18fb      	adds	r3, r7, r3
 8003174:	2210      	movs	r2, #16
 8003176:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	69da      	ldr	r2, [r3, #28]
 800317c:	2380      	movs	r3, #128	; 0x80
 800317e:	021b      	lsls	r3, r3, #8
 8003180:	429a      	cmp	r2, r3
 8003182:	d000      	beq.n	8003186 <UART_SetConfig+0x186>
 8003184:	e065      	b.n	8003252 <UART_SetConfig+0x252>
  {
    switch (clocksource)
 8003186:	231b      	movs	r3, #27
 8003188:	18fb      	adds	r3, r7, r3
 800318a:	781b      	ldrb	r3, [r3, #0]
 800318c:	2b08      	cmp	r3, #8
 800318e:	d015      	beq.n	80031bc <UART_SetConfig+0x1bc>
 8003190:	dc18      	bgt.n	80031c4 <UART_SetConfig+0x1c4>
 8003192:	2b04      	cmp	r3, #4
 8003194:	d00d      	beq.n	80031b2 <UART_SetConfig+0x1b2>
 8003196:	dc15      	bgt.n	80031c4 <UART_SetConfig+0x1c4>
 8003198:	2b00      	cmp	r3, #0
 800319a:	d002      	beq.n	80031a2 <UART_SetConfig+0x1a2>
 800319c:	2b02      	cmp	r3, #2
 800319e:	d005      	beq.n	80031ac <UART_SetConfig+0x1ac>
 80031a0:	e010      	b.n	80031c4 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80031a2:	f7ff fd07 	bl	8002bb4 <HAL_RCC_GetPCLK1Freq>
 80031a6:	0003      	movs	r3, r0
 80031a8:	617b      	str	r3, [r7, #20]
        break;
 80031aa:	e012      	b.n	80031d2 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80031ac:	4b64      	ldr	r3, [pc, #400]	; (8003340 <UART_SetConfig+0x340>)
 80031ae:	617b      	str	r3, [r7, #20]
        break;
 80031b0:	e00f      	b.n	80031d2 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80031b2:	f7ff fc73 	bl	8002a9c <HAL_RCC_GetSysClockFreq>
 80031b6:	0003      	movs	r3, r0
 80031b8:	617b      	str	r3, [r7, #20]
        break;
 80031ba:	e00a      	b.n	80031d2 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80031bc:	2380      	movs	r3, #128	; 0x80
 80031be:	021b      	lsls	r3, r3, #8
 80031c0:	617b      	str	r3, [r7, #20]
        break;
 80031c2:	e006      	b.n	80031d2 <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 80031c4:	2300      	movs	r3, #0
 80031c6:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80031c8:	231a      	movs	r3, #26
 80031ca:	18fb      	adds	r3, r7, r3
 80031cc:	2201      	movs	r2, #1
 80031ce:	701a      	strb	r2, [r3, #0]
        break;
 80031d0:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d100      	bne.n	80031da <UART_SetConfig+0x1da>
 80031d8:	e08d      	b.n	80032f6 <UART_SetConfig+0x2f6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80031de:	4b59      	ldr	r3, [pc, #356]	; (8003344 <UART_SetConfig+0x344>)
 80031e0:	0052      	lsls	r2, r2, #1
 80031e2:	5ad3      	ldrh	r3, [r2, r3]
 80031e4:	0019      	movs	r1, r3
 80031e6:	6978      	ldr	r0, [r7, #20]
 80031e8:	f7fc ffa6 	bl	8000138 <__udivsi3>
 80031ec:	0003      	movs	r3, r0
 80031ee:	005a      	lsls	r2, r3, #1
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	085b      	lsrs	r3, r3, #1
 80031f6:	18d2      	adds	r2, r2, r3
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	0019      	movs	r1, r3
 80031fe:	0010      	movs	r0, r2
 8003200:	f7fc ff9a 	bl	8000138 <__udivsi3>
 8003204:	0003      	movs	r3, r0
 8003206:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003208:	693b      	ldr	r3, [r7, #16]
 800320a:	2b0f      	cmp	r3, #15
 800320c:	d91c      	bls.n	8003248 <UART_SetConfig+0x248>
 800320e:	693a      	ldr	r2, [r7, #16]
 8003210:	2380      	movs	r3, #128	; 0x80
 8003212:	025b      	lsls	r3, r3, #9
 8003214:	429a      	cmp	r2, r3
 8003216:	d217      	bcs.n	8003248 <UART_SetConfig+0x248>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003218:	693b      	ldr	r3, [r7, #16]
 800321a:	b29a      	uxth	r2, r3
 800321c:	200e      	movs	r0, #14
 800321e:	183b      	adds	r3, r7, r0
 8003220:	210f      	movs	r1, #15
 8003222:	438a      	bics	r2, r1
 8003224:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	085b      	lsrs	r3, r3, #1
 800322a:	b29b      	uxth	r3, r3
 800322c:	2207      	movs	r2, #7
 800322e:	4013      	ands	r3, r2
 8003230:	b299      	uxth	r1, r3
 8003232:	183b      	adds	r3, r7, r0
 8003234:	183a      	adds	r2, r7, r0
 8003236:	8812      	ldrh	r2, [r2, #0]
 8003238:	430a      	orrs	r2, r1
 800323a:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	183a      	adds	r2, r7, r0
 8003242:	8812      	ldrh	r2, [r2, #0]
 8003244:	60da      	str	r2, [r3, #12]
 8003246:	e056      	b.n	80032f6 <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 8003248:	231a      	movs	r3, #26
 800324a:	18fb      	adds	r3, r7, r3
 800324c:	2201      	movs	r2, #1
 800324e:	701a      	strb	r2, [r3, #0]
 8003250:	e051      	b.n	80032f6 <UART_SetConfig+0x2f6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003252:	231b      	movs	r3, #27
 8003254:	18fb      	adds	r3, r7, r3
 8003256:	781b      	ldrb	r3, [r3, #0]
 8003258:	2b08      	cmp	r3, #8
 800325a:	d015      	beq.n	8003288 <UART_SetConfig+0x288>
 800325c:	dc18      	bgt.n	8003290 <UART_SetConfig+0x290>
 800325e:	2b04      	cmp	r3, #4
 8003260:	d00d      	beq.n	800327e <UART_SetConfig+0x27e>
 8003262:	dc15      	bgt.n	8003290 <UART_SetConfig+0x290>
 8003264:	2b00      	cmp	r3, #0
 8003266:	d002      	beq.n	800326e <UART_SetConfig+0x26e>
 8003268:	2b02      	cmp	r3, #2
 800326a:	d005      	beq.n	8003278 <UART_SetConfig+0x278>
 800326c:	e010      	b.n	8003290 <UART_SetConfig+0x290>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800326e:	f7ff fca1 	bl	8002bb4 <HAL_RCC_GetPCLK1Freq>
 8003272:	0003      	movs	r3, r0
 8003274:	617b      	str	r3, [r7, #20]
        break;
 8003276:	e012      	b.n	800329e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003278:	4b31      	ldr	r3, [pc, #196]	; (8003340 <UART_SetConfig+0x340>)
 800327a:	617b      	str	r3, [r7, #20]
        break;
 800327c:	e00f      	b.n	800329e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800327e:	f7ff fc0d 	bl	8002a9c <HAL_RCC_GetSysClockFreq>
 8003282:	0003      	movs	r3, r0
 8003284:	617b      	str	r3, [r7, #20]
        break;
 8003286:	e00a      	b.n	800329e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003288:	2380      	movs	r3, #128	; 0x80
 800328a:	021b      	lsls	r3, r3, #8
 800328c:	617b      	str	r3, [r7, #20]
        break;
 800328e:	e006      	b.n	800329e <UART_SetConfig+0x29e>
      default:
        pclk = 0U;
 8003290:	2300      	movs	r3, #0
 8003292:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003294:	231a      	movs	r3, #26
 8003296:	18fb      	adds	r3, r7, r3
 8003298:	2201      	movs	r2, #1
 800329a:	701a      	strb	r2, [r3, #0]
        break;
 800329c:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d028      	beq.n	80032f6 <UART_SetConfig+0x2f6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80032a8:	4b26      	ldr	r3, [pc, #152]	; (8003344 <UART_SetConfig+0x344>)
 80032aa:	0052      	lsls	r2, r2, #1
 80032ac:	5ad3      	ldrh	r3, [r2, r3]
 80032ae:	0019      	movs	r1, r3
 80032b0:	6978      	ldr	r0, [r7, #20]
 80032b2:	f7fc ff41 	bl	8000138 <__udivsi3>
 80032b6:	0003      	movs	r3, r0
 80032b8:	001a      	movs	r2, r3
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	085b      	lsrs	r3, r3, #1
 80032c0:	18d2      	adds	r2, r2, r3
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	0019      	movs	r1, r3
 80032c8:	0010      	movs	r0, r2
 80032ca:	f7fc ff35 	bl	8000138 <__udivsi3>
 80032ce:	0003      	movs	r3, r0
 80032d0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	2b0f      	cmp	r3, #15
 80032d6:	d90a      	bls.n	80032ee <UART_SetConfig+0x2ee>
 80032d8:	693a      	ldr	r2, [r7, #16]
 80032da:	2380      	movs	r3, #128	; 0x80
 80032dc:	025b      	lsls	r3, r3, #9
 80032de:	429a      	cmp	r2, r3
 80032e0:	d205      	bcs.n	80032ee <UART_SetConfig+0x2ee>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	b29a      	uxth	r2, r3
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	60da      	str	r2, [r3, #12]
 80032ec:	e003      	b.n	80032f6 <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 80032ee:	231a      	movs	r3, #26
 80032f0:	18fb      	adds	r3, r7, r3
 80032f2:	2201      	movs	r2, #1
 80032f4:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	226a      	movs	r2, #106	; 0x6a
 80032fa:	2101      	movs	r1, #1
 80032fc:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2268      	movs	r2, #104	; 0x68
 8003302:	2101      	movs	r1, #1
 8003304:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2200      	movs	r2, #0
 800330a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2200      	movs	r2, #0
 8003310:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8003312:	231a      	movs	r3, #26
 8003314:	18fb      	adds	r3, r7, r3
 8003316:	781b      	ldrb	r3, [r3, #0]
}
 8003318:	0018      	movs	r0, r3
 800331a:	46bd      	mov	sp, r7
 800331c:	b008      	add	sp, #32
 800331e:	bd80      	pop	{r7, pc}
 8003320:	cfff69f3 	.word	0xcfff69f3
 8003324:	ffffcfff 	.word	0xffffcfff
 8003328:	11fff4ff 	.word	0x11fff4ff
 800332c:	40013800 	.word	0x40013800
 8003330:	40021000 	.word	0x40021000
 8003334:	40004400 	.word	0x40004400
 8003338:	40004800 	.word	0x40004800
 800333c:	40004c00 	.word	0x40004c00
 8003340:	00f42400 	.word	0x00f42400
 8003344:	08005224 	.word	0x08005224

08003348 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b082      	sub	sp, #8
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003354:	2201      	movs	r2, #1
 8003356:	4013      	ands	r3, r2
 8003358:	d00b      	beq.n	8003372 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	4a4a      	ldr	r2, [pc, #296]	; (800348c <UART_AdvFeatureConfig+0x144>)
 8003362:	4013      	ands	r3, r2
 8003364:	0019      	movs	r1, r3
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	430a      	orrs	r2, r1
 8003370:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003376:	2202      	movs	r2, #2
 8003378:	4013      	ands	r3, r2
 800337a:	d00b      	beq.n	8003394 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	4a43      	ldr	r2, [pc, #268]	; (8003490 <UART_AdvFeatureConfig+0x148>)
 8003384:	4013      	ands	r3, r2
 8003386:	0019      	movs	r1, r3
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	430a      	orrs	r2, r1
 8003392:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003398:	2204      	movs	r2, #4
 800339a:	4013      	ands	r3, r2
 800339c:	d00b      	beq.n	80033b6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	4a3b      	ldr	r2, [pc, #236]	; (8003494 <UART_AdvFeatureConfig+0x14c>)
 80033a6:	4013      	ands	r3, r2
 80033a8:	0019      	movs	r1, r3
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	430a      	orrs	r2, r1
 80033b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033ba:	2208      	movs	r2, #8
 80033bc:	4013      	ands	r3, r2
 80033be:	d00b      	beq.n	80033d8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	4a34      	ldr	r2, [pc, #208]	; (8003498 <UART_AdvFeatureConfig+0x150>)
 80033c8:	4013      	ands	r3, r2
 80033ca:	0019      	movs	r1, r3
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	430a      	orrs	r2, r1
 80033d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033dc:	2210      	movs	r2, #16
 80033de:	4013      	ands	r3, r2
 80033e0:	d00b      	beq.n	80033fa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	689b      	ldr	r3, [r3, #8]
 80033e8:	4a2c      	ldr	r2, [pc, #176]	; (800349c <UART_AdvFeatureConfig+0x154>)
 80033ea:	4013      	ands	r3, r2
 80033ec:	0019      	movs	r1, r3
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	430a      	orrs	r2, r1
 80033f8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033fe:	2220      	movs	r2, #32
 8003400:	4013      	ands	r3, r2
 8003402:	d00b      	beq.n	800341c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	689b      	ldr	r3, [r3, #8]
 800340a:	4a25      	ldr	r2, [pc, #148]	; (80034a0 <UART_AdvFeatureConfig+0x158>)
 800340c:	4013      	ands	r3, r2
 800340e:	0019      	movs	r1, r3
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	430a      	orrs	r2, r1
 800341a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003420:	2240      	movs	r2, #64	; 0x40
 8003422:	4013      	ands	r3, r2
 8003424:	d01d      	beq.n	8003462 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	4a1d      	ldr	r2, [pc, #116]	; (80034a4 <UART_AdvFeatureConfig+0x15c>)
 800342e:	4013      	ands	r3, r2
 8003430:	0019      	movs	r1, r3
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	430a      	orrs	r2, r1
 800343c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003442:	2380      	movs	r3, #128	; 0x80
 8003444:	035b      	lsls	r3, r3, #13
 8003446:	429a      	cmp	r2, r3
 8003448:	d10b      	bne.n	8003462 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	4a15      	ldr	r2, [pc, #84]	; (80034a8 <UART_AdvFeatureConfig+0x160>)
 8003452:	4013      	ands	r3, r2
 8003454:	0019      	movs	r1, r3
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	430a      	orrs	r2, r1
 8003460:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003466:	2280      	movs	r2, #128	; 0x80
 8003468:	4013      	ands	r3, r2
 800346a:	d00b      	beq.n	8003484 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	4a0e      	ldr	r2, [pc, #56]	; (80034ac <UART_AdvFeatureConfig+0x164>)
 8003474:	4013      	ands	r3, r2
 8003476:	0019      	movs	r1, r3
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	430a      	orrs	r2, r1
 8003482:	605a      	str	r2, [r3, #4]
  }
}
 8003484:	46c0      	nop			; (mov r8, r8)
 8003486:	46bd      	mov	sp, r7
 8003488:	b002      	add	sp, #8
 800348a:	bd80      	pop	{r7, pc}
 800348c:	fffdffff 	.word	0xfffdffff
 8003490:	fffeffff 	.word	0xfffeffff
 8003494:	fffbffff 	.word	0xfffbffff
 8003498:	ffff7fff 	.word	0xffff7fff
 800349c:	ffffefff 	.word	0xffffefff
 80034a0:	ffffdfff 	.word	0xffffdfff
 80034a4:	ffefffff 	.word	0xffefffff
 80034a8:	ff9fffff 	.word	0xff9fffff
 80034ac:	fff7ffff 	.word	0xfff7ffff

080034b0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b086      	sub	sp, #24
 80034b4:	af02      	add	r7, sp, #8
 80034b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	228c      	movs	r2, #140	; 0x8c
 80034bc:	2100      	movs	r1, #0
 80034be:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80034c0:	f7fe f982 	bl	80017c8 <HAL_GetTick>
 80034c4:	0003      	movs	r3, r0
 80034c6:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	2208      	movs	r2, #8
 80034d0:	4013      	ands	r3, r2
 80034d2:	2b08      	cmp	r3, #8
 80034d4:	d10c      	bne.n	80034f0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	2280      	movs	r2, #128	; 0x80
 80034da:	0391      	lsls	r1, r2, #14
 80034dc:	6878      	ldr	r0, [r7, #4]
 80034de:	4a18      	ldr	r2, [pc, #96]	; (8003540 <UART_CheckIdleState+0x90>)
 80034e0:	9200      	str	r2, [sp, #0]
 80034e2:	2200      	movs	r2, #0
 80034e4:	f000 f82e 	bl	8003544 <UART_WaitOnFlagUntilTimeout>
 80034e8:	1e03      	subs	r3, r0, #0
 80034ea:	d001      	beq.n	80034f0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80034ec:	2303      	movs	r3, #3
 80034ee:	e023      	b.n	8003538 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	2204      	movs	r2, #4
 80034f8:	4013      	ands	r3, r2
 80034fa:	2b04      	cmp	r3, #4
 80034fc:	d10c      	bne.n	8003518 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	2280      	movs	r2, #128	; 0x80
 8003502:	03d1      	lsls	r1, r2, #15
 8003504:	6878      	ldr	r0, [r7, #4]
 8003506:	4a0e      	ldr	r2, [pc, #56]	; (8003540 <UART_CheckIdleState+0x90>)
 8003508:	9200      	str	r2, [sp, #0]
 800350a:	2200      	movs	r2, #0
 800350c:	f000 f81a 	bl	8003544 <UART_WaitOnFlagUntilTimeout>
 8003510:	1e03      	subs	r3, r0, #0
 8003512:	d001      	beq.n	8003518 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003514:	2303      	movs	r3, #3
 8003516:	e00f      	b.n	8003538 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2284      	movs	r2, #132	; 0x84
 800351c:	2120      	movs	r1, #32
 800351e:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2288      	movs	r2, #136	; 0x88
 8003524:	2120      	movs	r1, #32
 8003526:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2200      	movs	r2, #0
 800352c:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2280      	movs	r2, #128	; 0x80
 8003532:	2100      	movs	r1, #0
 8003534:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003536:	2300      	movs	r3, #0
}
 8003538:	0018      	movs	r0, r3
 800353a:	46bd      	mov	sp, r7
 800353c:	b004      	add	sp, #16
 800353e:	bd80      	pop	{r7, pc}
 8003540:	01ffffff 	.word	0x01ffffff

08003544 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b094      	sub	sp, #80	; 0x50
 8003548:	af00      	add	r7, sp, #0
 800354a:	60f8      	str	r0, [r7, #12]
 800354c:	60b9      	str	r1, [r7, #8]
 800354e:	603b      	str	r3, [r7, #0]
 8003550:	1dfb      	adds	r3, r7, #7
 8003552:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003554:	e0a7      	b.n	80036a6 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003556:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003558:	3301      	adds	r3, #1
 800355a:	d100      	bne.n	800355e <UART_WaitOnFlagUntilTimeout+0x1a>
 800355c:	e0a3      	b.n	80036a6 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800355e:	f7fe f933 	bl	80017c8 <HAL_GetTick>
 8003562:	0002      	movs	r2, r0
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	1ad3      	subs	r3, r2, r3
 8003568:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800356a:	429a      	cmp	r2, r3
 800356c:	d302      	bcc.n	8003574 <UART_WaitOnFlagUntilTimeout+0x30>
 800356e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003570:	2b00      	cmp	r3, #0
 8003572:	d13f      	bne.n	80035f4 <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003574:	f3ef 8310 	mrs	r3, PRIMASK
 8003578:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800357a:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800357c:	647b      	str	r3, [r7, #68]	; 0x44
 800357e:	2301      	movs	r3, #1
 8003580:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003584:	f383 8810 	msr	PRIMASK, r3
}
 8003588:	46c0      	nop			; (mov r8, r8)
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	681a      	ldr	r2, [r3, #0]
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	494e      	ldr	r1, [pc, #312]	; (80036d0 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8003596:	400a      	ands	r2, r1
 8003598:	601a      	str	r2, [r3, #0]
 800359a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800359c:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800359e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035a0:	f383 8810 	msr	PRIMASK, r3
}
 80035a4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035a6:	f3ef 8310 	mrs	r3, PRIMASK
 80035aa:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80035ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035ae:	643b      	str	r3, [r7, #64]	; 0x40
 80035b0:	2301      	movs	r3, #1
 80035b2:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035b6:	f383 8810 	msr	PRIMASK, r3
}
 80035ba:	46c0      	nop			; (mov r8, r8)
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	689a      	ldr	r2, [r3, #8]
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	2101      	movs	r1, #1
 80035c8:	438a      	bics	r2, r1
 80035ca:	609a      	str	r2, [r3, #8]
 80035cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035d2:	f383 8810 	msr	PRIMASK, r3
}
 80035d6:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	2284      	movs	r2, #132	; 0x84
 80035dc:	2120      	movs	r1, #32
 80035de:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	2288      	movs	r2, #136	; 0x88
 80035e4:	2120      	movs	r1, #32
 80035e6:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	2280      	movs	r2, #128	; 0x80
 80035ec:	2100      	movs	r1, #0
 80035ee:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80035f0:	2303      	movs	r3, #3
 80035f2:	e069      	b.n	80036c8 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	2204      	movs	r2, #4
 80035fc:	4013      	ands	r3, r2
 80035fe:	d052      	beq.n	80036a6 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	69da      	ldr	r2, [r3, #28]
 8003606:	2380      	movs	r3, #128	; 0x80
 8003608:	011b      	lsls	r3, r3, #4
 800360a:	401a      	ands	r2, r3
 800360c:	2380      	movs	r3, #128	; 0x80
 800360e:	011b      	lsls	r3, r3, #4
 8003610:	429a      	cmp	r2, r3
 8003612:	d148      	bne.n	80036a6 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	2280      	movs	r2, #128	; 0x80
 800361a:	0112      	lsls	r2, r2, #4
 800361c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800361e:	f3ef 8310 	mrs	r3, PRIMASK
 8003622:	613b      	str	r3, [r7, #16]
  return(result);
 8003624:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003626:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003628:	2301      	movs	r3, #1
 800362a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800362c:	697b      	ldr	r3, [r7, #20]
 800362e:	f383 8810 	msr	PRIMASK, r3
}
 8003632:	46c0      	nop			; (mov r8, r8)
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	681a      	ldr	r2, [r3, #0]
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4924      	ldr	r1, [pc, #144]	; (80036d0 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8003640:	400a      	ands	r2, r1
 8003642:	601a      	str	r2, [r3, #0]
 8003644:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003646:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003648:	69bb      	ldr	r3, [r7, #24]
 800364a:	f383 8810 	msr	PRIMASK, r3
}
 800364e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003650:	f3ef 8310 	mrs	r3, PRIMASK
 8003654:	61fb      	str	r3, [r7, #28]
  return(result);
 8003656:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003658:	64bb      	str	r3, [r7, #72]	; 0x48
 800365a:	2301      	movs	r3, #1
 800365c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800365e:	6a3b      	ldr	r3, [r7, #32]
 8003660:	f383 8810 	msr	PRIMASK, r3
}
 8003664:	46c0      	nop			; (mov r8, r8)
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	689a      	ldr	r2, [r3, #8]
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	2101      	movs	r1, #1
 8003672:	438a      	bics	r2, r1
 8003674:	609a      	str	r2, [r3, #8]
 8003676:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003678:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800367a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800367c:	f383 8810 	msr	PRIMASK, r3
}
 8003680:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	2284      	movs	r2, #132	; 0x84
 8003686:	2120      	movs	r1, #32
 8003688:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	2288      	movs	r2, #136	; 0x88
 800368e:	2120      	movs	r1, #32
 8003690:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	228c      	movs	r2, #140	; 0x8c
 8003696:	2120      	movs	r1, #32
 8003698:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	2280      	movs	r2, #128	; 0x80
 800369e:	2100      	movs	r1, #0
 80036a0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80036a2:	2303      	movs	r3, #3
 80036a4:	e010      	b.n	80036c8 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	69db      	ldr	r3, [r3, #28]
 80036ac:	68ba      	ldr	r2, [r7, #8]
 80036ae:	4013      	ands	r3, r2
 80036b0:	68ba      	ldr	r2, [r7, #8]
 80036b2:	1ad3      	subs	r3, r2, r3
 80036b4:	425a      	negs	r2, r3
 80036b6:	4153      	adcs	r3, r2
 80036b8:	b2db      	uxtb	r3, r3
 80036ba:	001a      	movs	r2, r3
 80036bc:	1dfb      	adds	r3, r7, #7
 80036be:	781b      	ldrb	r3, [r3, #0]
 80036c0:	429a      	cmp	r2, r3
 80036c2:	d100      	bne.n	80036c6 <UART_WaitOnFlagUntilTimeout+0x182>
 80036c4:	e747      	b.n	8003556 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80036c6:	2300      	movs	r3, #0
}
 80036c8:	0018      	movs	r0, r3
 80036ca:	46bd      	mov	sp, r7
 80036cc:	b014      	add	sp, #80	; 0x50
 80036ce:	bd80      	pop	{r7, pc}
 80036d0:	fffffe5f 	.word	0xfffffe5f

080036d4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b090      	sub	sp, #64	; 0x40
 80036d8:	af00      	add	r7, sp, #0
 80036da:	60f8      	str	r0, [r7, #12]
 80036dc:	60b9      	str	r1, [r7, #8]
 80036de:	1dbb      	adds	r3, r7, #6
 80036e0:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	68ba      	ldr	r2, [r7, #8]
 80036e6:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	1dba      	adds	r2, r7, #6
 80036ec:	215c      	movs	r1, #92	; 0x5c
 80036ee:	8812      	ldrh	r2, [r2, #0]
 80036f0:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	228c      	movs	r2, #140	; 0x8c
 80036f6:	2100      	movs	r1, #0
 80036f8:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	2288      	movs	r2, #136	; 0x88
 80036fe:	2122      	movs	r1, #34	; 0x22
 8003700:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003706:	2b00      	cmp	r3, #0
 8003708:	d02c      	beq.n	8003764 <UART_Start_Receive_DMA+0x90>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800370e:	4a42      	ldr	r2, [pc, #264]	; (8003818 <UART_Start_Receive_DMA+0x144>)
 8003710:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003716:	4a41      	ldr	r2, [pc, #260]	; (800381c <UART_Start_Receive_DMA+0x148>)
 8003718:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800371e:	4a40      	ldr	r2, [pc, #256]	; (8003820 <UART_Start_Receive_DMA+0x14c>)
 8003720:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003726:	2200      	movs	r2, #0
 8003728:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	3324      	adds	r3, #36	; 0x24
 8003734:	0019      	movs	r1, r3
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800373a:	001a      	movs	r2, r3
 800373c:	1dbb      	adds	r3, r7, #6
 800373e:	881b      	ldrh	r3, [r3, #0]
 8003740:	f7fe f9ca 	bl	8001ad8 <HAL_DMA_Start_IT>
 8003744:	1e03      	subs	r3, r0, #0
 8003746:	d00d      	beq.n	8003764 <UART_Start_Receive_DMA+0x90>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	228c      	movs	r2, #140	; 0x8c
 800374c:	2110      	movs	r1, #16
 800374e:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2280      	movs	r2, #128	; 0x80
 8003754:	2100      	movs	r1, #0
 8003756:	5499      	strb	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	2288      	movs	r2, #136	; 0x88
 800375c:	2120      	movs	r1, #32
 800375e:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 8003760:	2301      	movs	r3, #1
 8003762:	e054      	b.n	800380e <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	2280      	movs	r2, #128	; 0x80
 8003768:	2100      	movs	r1, #0
 800376a:	5499      	strb	r1, [r3, r2]

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	691b      	ldr	r3, [r3, #16]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d019      	beq.n	80037a8 <UART_Start_Receive_DMA+0xd4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003774:	f3ef 8310 	mrs	r3, PRIMASK
 8003778:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800377a:	6abb      	ldr	r3, [r7, #40]	; 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800377c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800377e:	2301      	movs	r3, #1
 8003780:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003784:	f383 8810 	msr	PRIMASK, r3
}
 8003788:	46c0      	nop			; (mov r8, r8)
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	681a      	ldr	r2, [r3, #0]
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	2180      	movs	r1, #128	; 0x80
 8003796:	0049      	lsls	r1, r1, #1
 8003798:	430a      	orrs	r2, r1
 800379a:	601a      	str	r2, [r3, #0]
 800379c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800379e:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037a2:	f383 8810 	msr	PRIMASK, r3
}
 80037a6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037a8:	f3ef 8310 	mrs	r3, PRIMASK
 80037ac:	613b      	str	r3, [r7, #16]
  return(result);
 80037ae:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037b0:	63bb      	str	r3, [r7, #56]	; 0x38
 80037b2:	2301      	movs	r3, #1
 80037b4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	f383 8810 	msr	PRIMASK, r3
}
 80037bc:	46c0      	nop			; (mov r8, r8)
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	689a      	ldr	r2, [r3, #8]
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	2101      	movs	r1, #1
 80037ca:	430a      	orrs	r2, r1
 80037cc:	609a      	str	r2, [r3, #8]
 80037ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037d0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037d2:	69bb      	ldr	r3, [r7, #24]
 80037d4:	f383 8810 	msr	PRIMASK, r3
}
 80037d8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037da:	f3ef 8310 	mrs	r3, PRIMASK
 80037de:	61fb      	str	r3, [r7, #28]
  return(result);
 80037e0:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80037e2:	637b      	str	r3, [r7, #52]	; 0x34
 80037e4:	2301      	movs	r3, #1
 80037e6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037e8:	6a3b      	ldr	r3, [r7, #32]
 80037ea:	f383 8810 	msr	PRIMASK, r3
}
 80037ee:	46c0      	nop			; (mov r8, r8)
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	689a      	ldr	r2, [r3, #8]
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	2140      	movs	r1, #64	; 0x40
 80037fc:	430a      	orrs	r2, r1
 80037fe:	609a      	str	r2, [r3, #8]
 8003800:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003802:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003806:	f383 8810 	msr	PRIMASK, r3
}
 800380a:	46c0      	nop			; (mov r8, r8)

  return HAL_OK;
 800380c:	2300      	movs	r3, #0
}
 800380e:	0018      	movs	r0, r3
 8003810:	46bd      	mov	sp, r7
 8003812:	b010      	add	sp, #64	; 0x40
 8003814:	bd80      	pop	{r7, pc}
 8003816:	46c0      	nop			; (mov r8, r8)
 8003818:	08003971 	.word	0x08003971
 800381c:	08003a99 	.word	0x08003a99
 8003820:	08003ad5 	.word	0x08003ad5

08003824 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b08a      	sub	sp, #40	; 0x28
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800382c:	f3ef 8310 	mrs	r3, PRIMASK
 8003830:	60bb      	str	r3, [r7, #8]
  return(result);
 8003832:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8003834:	627b      	str	r3, [r7, #36]	; 0x24
 8003836:	2301      	movs	r3, #1
 8003838:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	f383 8810 	msr	PRIMASK, r3
}
 8003840:	46c0      	nop			; (mov r8, r8)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	681a      	ldr	r2, [r3, #0]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	21c0      	movs	r1, #192	; 0xc0
 800384e:	438a      	bics	r2, r1
 8003850:	601a      	str	r2, [r3, #0]
 8003852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003854:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	f383 8810 	msr	PRIMASK, r3
}
 800385c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800385e:	f3ef 8310 	mrs	r3, PRIMASK
 8003862:	617b      	str	r3, [r7, #20]
  return(result);
 8003864:	697b      	ldr	r3, [r7, #20]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8003866:	623b      	str	r3, [r7, #32]
 8003868:	2301      	movs	r3, #1
 800386a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800386c:	69bb      	ldr	r3, [r7, #24]
 800386e:	f383 8810 	msr	PRIMASK, r3
}
 8003872:	46c0      	nop			; (mov r8, r8)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	689a      	ldr	r2, [r3, #8]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4908      	ldr	r1, [pc, #32]	; (80038a0 <UART_EndTxTransfer+0x7c>)
 8003880:	400a      	ands	r2, r1
 8003882:	609a      	str	r2, [r3, #8]
 8003884:	6a3b      	ldr	r3, [r7, #32]
 8003886:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003888:	69fb      	ldr	r3, [r7, #28]
 800388a:	f383 8810 	msr	PRIMASK, r3
}
 800388e:	46c0      	nop			; (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2284      	movs	r2, #132	; 0x84
 8003894:	2120      	movs	r1, #32
 8003896:	5099      	str	r1, [r3, r2]
}
 8003898:	46c0      	nop			; (mov r8, r8)
 800389a:	46bd      	mov	sp, r7
 800389c:	b00a      	add	sp, #40	; 0x28
 800389e:	bd80      	pop	{r7, pc}
 80038a0:	ff7fffff 	.word	0xff7fffff

080038a4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b08e      	sub	sp, #56	; 0x38
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038ac:	f3ef 8310 	mrs	r3, PRIMASK
 80038b0:	617b      	str	r3, [r7, #20]
  return(result);
 80038b2:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80038b4:	637b      	str	r3, [r7, #52]	; 0x34
 80038b6:	2301      	movs	r3, #1
 80038b8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038ba:	69bb      	ldr	r3, [r7, #24]
 80038bc:	f383 8810 	msr	PRIMASK, r3
}
 80038c0:	46c0      	nop			; (mov r8, r8)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	681a      	ldr	r2, [r3, #0]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4926      	ldr	r1, [pc, #152]	; (8003968 <UART_EndRxTransfer+0xc4>)
 80038ce:	400a      	ands	r2, r1
 80038d0:	601a      	str	r2, [r3, #0]
 80038d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038d4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038d6:	69fb      	ldr	r3, [r7, #28]
 80038d8:	f383 8810 	msr	PRIMASK, r3
}
 80038dc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038de:	f3ef 8310 	mrs	r3, PRIMASK
 80038e2:	623b      	str	r3, [r7, #32]
  return(result);
 80038e4:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80038e6:	633b      	str	r3, [r7, #48]	; 0x30
 80038e8:	2301      	movs	r3, #1
 80038ea:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ee:	f383 8810 	msr	PRIMASK, r3
}
 80038f2:	46c0      	nop			; (mov r8, r8)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	689a      	ldr	r2, [r3, #8]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	491b      	ldr	r1, [pc, #108]	; (800396c <UART_EndRxTransfer+0xc8>)
 8003900:	400a      	ands	r2, r1
 8003902:	609a      	str	r2, [r3, #8]
 8003904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003906:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800390a:	f383 8810 	msr	PRIMASK, r3
}
 800390e:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003914:	2b01      	cmp	r3, #1
 8003916:	d118      	bne.n	800394a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003918:	f3ef 8310 	mrs	r3, PRIMASK
 800391c:	60bb      	str	r3, [r7, #8]
  return(result);
 800391e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003920:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003922:	2301      	movs	r3, #1
 8003924:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	f383 8810 	msr	PRIMASK, r3
}
 800392c:	46c0      	nop			; (mov r8, r8)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	681a      	ldr	r2, [r3, #0]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	2110      	movs	r1, #16
 800393a:	438a      	bics	r2, r1
 800393c:	601a      	str	r2, [r3, #0]
 800393e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003940:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	f383 8810 	msr	PRIMASK, r3
}
 8003948:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2288      	movs	r2, #136	; 0x88
 800394e:	2120      	movs	r1, #32
 8003950:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2200      	movs	r2, #0
 8003956:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2200      	movs	r2, #0
 800395c:	671a      	str	r2, [r3, #112]	; 0x70
}
 800395e:	46c0      	nop			; (mov r8, r8)
 8003960:	46bd      	mov	sp, r7
 8003962:	b00e      	add	sp, #56	; 0x38
 8003964:	bd80      	pop	{r7, pc}
 8003966:	46c0      	nop			; (mov r8, r8)
 8003968:	fffffedf 	.word	0xfffffedf
 800396c:	effffffe 	.word	0xeffffffe

08003970 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b094      	sub	sp, #80	; 0x50
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800397c:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	2220      	movs	r2, #32
 8003986:	4013      	ands	r3, r2
 8003988:	d16f      	bne.n	8003a6a <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 800398a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800398c:	225e      	movs	r2, #94	; 0x5e
 800398e:	2100      	movs	r1, #0
 8003990:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003992:	f3ef 8310 	mrs	r3, PRIMASK
 8003996:	61bb      	str	r3, [r7, #24]
  return(result);
 8003998:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800399a:	64bb      	str	r3, [r7, #72]	; 0x48
 800399c:	2301      	movs	r3, #1
 800399e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039a0:	69fb      	ldr	r3, [r7, #28]
 80039a2:	f383 8810 	msr	PRIMASK, r3
}
 80039a6:	46c0      	nop			; (mov r8, r8)
 80039a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	681a      	ldr	r2, [r3, #0]
 80039ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4938      	ldr	r1, [pc, #224]	; (8003a94 <UART_DMAReceiveCplt+0x124>)
 80039b4:	400a      	ands	r2, r1
 80039b6:	601a      	str	r2, [r3, #0]
 80039b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80039ba:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039bc:	6a3b      	ldr	r3, [r7, #32]
 80039be:	f383 8810 	msr	PRIMASK, r3
}
 80039c2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039c4:	f3ef 8310 	mrs	r3, PRIMASK
 80039c8:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80039ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039cc:	647b      	str	r3, [r7, #68]	; 0x44
 80039ce:	2301      	movs	r3, #1
 80039d0:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039d4:	f383 8810 	msr	PRIMASK, r3
}
 80039d8:	46c0      	nop			; (mov r8, r8)
 80039da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	689a      	ldr	r2, [r3, #8]
 80039e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	2101      	movs	r1, #1
 80039e6:	438a      	bics	r2, r1
 80039e8:	609a      	str	r2, [r3, #8]
 80039ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039f0:	f383 8810 	msr	PRIMASK, r3
}
 80039f4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039f6:	f3ef 8310 	mrs	r3, PRIMASK
 80039fa:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80039fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80039fe:	643b      	str	r3, [r7, #64]	; 0x40
 8003a00:	2301      	movs	r3, #1
 8003a02:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a06:	f383 8810 	msr	PRIMASK, r3
}
 8003a0a:	46c0      	nop			; (mov r8, r8)
 8003a0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	689a      	ldr	r2, [r3, #8]
 8003a12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	2140      	movs	r1, #64	; 0x40
 8003a18:	438a      	bics	r2, r1
 8003a1a:	609a      	str	r2, [r3, #8]
 8003a1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a1e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a22:	f383 8810 	msr	PRIMASK, r3
}
 8003a26:	46c0      	nop			; (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003a28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a2a:	2288      	movs	r2, #136	; 0x88
 8003a2c:	2120      	movs	r1, #32
 8003a2e:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a34:	2b01      	cmp	r3, #1
 8003a36:	d118      	bne.n	8003a6a <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a38:	f3ef 8310 	mrs	r3, PRIMASK
 8003a3c:	60fb      	str	r3, [r7, #12]
  return(result);
 8003a3e:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a40:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a42:	2301      	movs	r3, #1
 8003a44:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	f383 8810 	msr	PRIMASK, r3
}
 8003a4c:	46c0      	nop			; (mov r8, r8)
 8003a4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	681a      	ldr	r2, [r3, #0]
 8003a54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	2110      	movs	r1, #16
 8003a5a:	438a      	bics	r2, r1
 8003a5c:	601a      	str	r2, [r3, #0]
 8003a5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a60:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a62:	697b      	ldr	r3, [r7, #20]
 8003a64:	f383 8810 	msr	PRIMASK, r3
}
 8003a68:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a6e:	2b01      	cmp	r3, #1
 8003a70:	d108      	bne.n	8003a84 <UART_DMAReceiveCplt+0x114>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003a72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a74:	225c      	movs	r2, #92	; 0x5c
 8003a76:	5a9a      	ldrh	r2, [r3, r2]
 8003a78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a7a:	0011      	movs	r1, r2
 8003a7c:	0018      	movs	r0, r3
 8003a7e:	f7ff fab3 	bl	8002fe8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003a82:	e003      	b.n	8003a8c <UART_DMAReceiveCplt+0x11c>
    HAL_UART_RxCpltCallback(huart);
 8003a84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a86:	0018      	movs	r0, r3
 8003a88:	f7ff fa96 	bl	8002fb8 <HAL_UART_RxCpltCallback>
}
 8003a8c:	46c0      	nop			; (mov r8, r8)
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	b014      	add	sp, #80	; 0x50
 8003a92:	bd80      	pop	{r7, pc}
 8003a94:	fffffeff 	.word	0xfffffeff

08003a98 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b084      	sub	sp, #16
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aa4:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003aaa:	2b01      	cmp	r3, #1
 8003aac:	d10a      	bne.n	8003ac4 <UART_DMARxHalfCplt+0x2c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	225c      	movs	r2, #92	; 0x5c
 8003ab2:	5a9b      	ldrh	r3, [r3, r2]
 8003ab4:	085b      	lsrs	r3, r3, #1
 8003ab6:	b29a      	uxth	r2, r3
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	0011      	movs	r1, r2
 8003abc:	0018      	movs	r0, r3
 8003abe:	f7ff fa93 	bl	8002fe8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003ac2:	e003      	b.n	8003acc <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	0018      	movs	r0, r3
 8003ac8:	f7ff fa7e 	bl	8002fc8 <HAL_UART_RxHalfCpltCallback>
}
 8003acc:	46c0      	nop			; (mov r8, r8)
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	b004      	add	sp, #16
 8003ad2:	bd80      	pop	{r7, pc}

08003ad4 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b086      	sub	sp, #24
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ae0:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	2284      	movs	r2, #132	; 0x84
 8003ae6:	589b      	ldr	r3, [r3, r2]
 8003ae8:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	2288      	movs	r2, #136	; 0x88
 8003aee:	589b      	ldr	r3, [r3, r2]
 8003af0:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	689b      	ldr	r3, [r3, #8]
 8003af8:	2280      	movs	r2, #128	; 0x80
 8003afa:	4013      	ands	r3, r2
 8003afc:	2b80      	cmp	r3, #128	; 0x80
 8003afe:	d10a      	bne.n	8003b16 <UART_DMAError+0x42>
 8003b00:	693b      	ldr	r3, [r7, #16]
 8003b02:	2b21      	cmp	r3, #33	; 0x21
 8003b04:	d107      	bne.n	8003b16 <UART_DMAError+0x42>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	2256      	movs	r2, #86	; 0x56
 8003b0a:	2100      	movs	r1, #0
 8003b0c:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	0018      	movs	r0, r3
 8003b12:	f7ff fe87 	bl	8003824 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8003b16:	697b      	ldr	r3, [r7, #20]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	689b      	ldr	r3, [r3, #8]
 8003b1c:	2240      	movs	r2, #64	; 0x40
 8003b1e:	4013      	ands	r3, r2
 8003b20:	2b40      	cmp	r3, #64	; 0x40
 8003b22:	d10a      	bne.n	8003b3a <UART_DMAError+0x66>
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	2b22      	cmp	r3, #34	; 0x22
 8003b28:	d107      	bne.n	8003b3a <UART_DMAError+0x66>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	225e      	movs	r2, #94	; 0x5e
 8003b2e:	2100      	movs	r1, #0
 8003b30:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	0018      	movs	r0, r3
 8003b36:	f7ff feb5 	bl	80038a4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003b3a:	697b      	ldr	r3, [r7, #20]
 8003b3c:	228c      	movs	r2, #140	; 0x8c
 8003b3e:	589b      	ldr	r3, [r3, r2]
 8003b40:	2210      	movs	r2, #16
 8003b42:	431a      	orrs	r2, r3
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	218c      	movs	r1, #140	; 0x8c
 8003b48:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003b4a:	697b      	ldr	r3, [r7, #20]
 8003b4c:	0018      	movs	r0, r3
 8003b4e:	f7ff fa43 	bl	8002fd8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003b52:	46c0      	nop			; (mov r8, r8)
 8003b54:	46bd      	mov	sp, r7
 8003b56:	b006      	add	sp, #24
 8003b58:	bd80      	pop	{r7, pc}
	...

08003b5c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b084      	sub	sp, #16
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2280      	movs	r2, #128	; 0x80
 8003b68:	5c9b      	ldrb	r3, [r3, r2]
 8003b6a:	2b01      	cmp	r3, #1
 8003b6c:	d101      	bne.n	8003b72 <HAL_UARTEx_DisableFifoMode+0x16>
 8003b6e:	2302      	movs	r3, #2
 8003b70:	e027      	b.n	8003bc2 <HAL_UARTEx_DisableFifoMode+0x66>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2280      	movs	r2, #128	; 0x80
 8003b76:	2101      	movs	r1, #1
 8003b78:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2284      	movs	r2, #132	; 0x84
 8003b7e:	2124      	movs	r1, #36	; 0x24
 8003b80:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	681a      	ldr	r2, [r3, #0]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	2101      	movs	r1, #1
 8003b96:	438a      	bics	r2, r1
 8003b98:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	4a0b      	ldr	r2, [pc, #44]	; (8003bcc <HAL_UARTEx_DisableFifoMode+0x70>)
 8003b9e:	4013      	ands	r3, r2
 8003ba0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	68fa      	ldr	r2, [r7, #12]
 8003bae:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2284      	movs	r2, #132	; 0x84
 8003bb4:	2120      	movs	r1, #32
 8003bb6:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2280      	movs	r2, #128	; 0x80
 8003bbc:	2100      	movs	r1, #0
 8003bbe:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003bc0:	2300      	movs	r3, #0
}
 8003bc2:	0018      	movs	r0, r3
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	b004      	add	sp, #16
 8003bc8:	bd80      	pop	{r7, pc}
 8003bca:	46c0      	nop			; (mov r8, r8)
 8003bcc:	dfffffff 	.word	0xdfffffff

08003bd0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b084      	sub	sp, #16
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
 8003bd8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2280      	movs	r2, #128	; 0x80
 8003bde:	5c9b      	ldrb	r3, [r3, r2]
 8003be0:	2b01      	cmp	r3, #1
 8003be2:	d101      	bne.n	8003be8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003be4:	2302      	movs	r3, #2
 8003be6:	e02e      	b.n	8003c46 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2280      	movs	r2, #128	; 0x80
 8003bec:	2101      	movs	r1, #1
 8003bee:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2284      	movs	r2, #132	; 0x84
 8003bf4:	2124      	movs	r1, #36	; 0x24
 8003bf6:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	681a      	ldr	r2, [r3, #0]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	2101      	movs	r1, #1
 8003c0c:	438a      	bics	r2, r1
 8003c0e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	689b      	ldr	r3, [r3, #8]
 8003c16:	00db      	lsls	r3, r3, #3
 8003c18:	08d9      	lsrs	r1, r3, #3
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	683a      	ldr	r2, [r7, #0]
 8003c20:	430a      	orrs	r2, r1
 8003c22:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	0018      	movs	r0, r3
 8003c28:	f000 f854 	bl	8003cd4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	68fa      	ldr	r2, [r7, #12]
 8003c32:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2284      	movs	r2, #132	; 0x84
 8003c38:	2120      	movs	r1, #32
 8003c3a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2280      	movs	r2, #128	; 0x80
 8003c40:	2100      	movs	r1, #0
 8003c42:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003c44:	2300      	movs	r3, #0
}
 8003c46:	0018      	movs	r0, r3
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	b004      	add	sp, #16
 8003c4c:	bd80      	pop	{r7, pc}
	...

08003c50 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b084      	sub	sp, #16
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
 8003c58:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2280      	movs	r2, #128	; 0x80
 8003c5e:	5c9b      	ldrb	r3, [r3, r2]
 8003c60:	2b01      	cmp	r3, #1
 8003c62:	d101      	bne.n	8003c68 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003c64:	2302      	movs	r3, #2
 8003c66:	e02f      	b.n	8003cc8 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2280      	movs	r2, #128	; 0x80
 8003c6c:	2101      	movs	r1, #1
 8003c6e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2284      	movs	r2, #132	; 0x84
 8003c74:	2124      	movs	r1, #36	; 0x24
 8003c76:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	681a      	ldr	r2, [r3, #0]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	2101      	movs	r1, #1
 8003c8c:	438a      	bics	r2, r1
 8003c8e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	689b      	ldr	r3, [r3, #8]
 8003c96:	4a0e      	ldr	r2, [pc, #56]	; (8003cd0 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8003c98:	4013      	ands	r3, r2
 8003c9a:	0019      	movs	r1, r3
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	683a      	ldr	r2, [r7, #0]
 8003ca2:	430a      	orrs	r2, r1
 8003ca4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	0018      	movs	r0, r3
 8003caa:	f000 f813 	bl	8003cd4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	68fa      	ldr	r2, [r7, #12]
 8003cb4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2284      	movs	r2, #132	; 0x84
 8003cba:	2120      	movs	r1, #32
 8003cbc:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2280      	movs	r2, #128	; 0x80
 8003cc2:	2100      	movs	r1, #0
 8003cc4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003cc6:	2300      	movs	r3, #0
}
 8003cc8:	0018      	movs	r0, r3
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	b004      	add	sp, #16
 8003cce:	bd80      	pop	{r7, pc}
 8003cd0:	f1ffffff 	.word	0xf1ffffff

08003cd4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003cd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003cd6:	b085      	sub	sp, #20
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d108      	bne.n	8003cf6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	226a      	movs	r2, #106	; 0x6a
 8003ce8:	2101      	movs	r1, #1
 8003cea:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2268      	movs	r2, #104	; 0x68
 8003cf0:	2101      	movs	r1, #1
 8003cf2:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003cf4:	e043      	b.n	8003d7e <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003cf6:	260f      	movs	r6, #15
 8003cf8:	19bb      	adds	r3, r7, r6
 8003cfa:	2208      	movs	r2, #8
 8003cfc:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003cfe:	200e      	movs	r0, #14
 8003d00:	183b      	adds	r3, r7, r0
 8003d02:	2208      	movs	r2, #8
 8003d04:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	689b      	ldr	r3, [r3, #8]
 8003d0c:	0e5b      	lsrs	r3, r3, #25
 8003d0e:	b2da      	uxtb	r2, r3
 8003d10:	240d      	movs	r4, #13
 8003d12:	193b      	adds	r3, r7, r4
 8003d14:	2107      	movs	r1, #7
 8003d16:	400a      	ands	r2, r1
 8003d18:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	689b      	ldr	r3, [r3, #8]
 8003d20:	0f5b      	lsrs	r3, r3, #29
 8003d22:	b2da      	uxtb	r2, r3
 8003d24:	250c      	movs	r5, #12
 8003d26:	197b      	adds	r3, r7, r5
 8003d28:	2107      	movs	r1, #7
 8003d2a:	400a      	ands	r2, r1
 8003d2c:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003d2e:	183b      	adds	r3, r7, r0
 8003d30:	781b      	ldrb	r3, [r3, #0]
 8003d32:	197a      	adds	r2, r7, r5
 8003d34:	7812      	ldrb	r2, [r2, #0]
 8003d36:	4914      	ldr	r1, [pc, #80]	; (8003d88 <UARTEx_SetNbDataToProcess+0xb4>)
 8003d38:	5c8a      	ldrb	r2, [r1, r2]
 8003d3a:	435a      	muls	r2, r3
 8003d3c:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8003d3e:	197b      	adds	r3, r7, r5
 8003d40:	781b      	ldrb	r3, [r3, #0]
 8003d42:	4a12      	ldr	r2, [pc, #72]	; (8003d8c <UARTEx_SetNbDataToProcess+0xb8>)
 8003d44:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003d46:	0019      	movs	r1, r3
 8003d48:	f7fc fa80 	bl	800024c <__divsi3>
 8003d4c:	0003      	movs	r3, r0
 8003d4e:	b299      	uxth	r1, r3
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	226a      	movs	r2, #106	; 0x6a
 8003d54:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003d56:	19bb      	adds	r3, r7, r6
 8003d58:	781b      	ldrb	r3, [r3, #0]
 8003d5a:	193a      	adds	r2, r7, r4
 8003d5c:	7812      	ldrb	r2, [r2, #0]
 8003d5e:	490a      	ldr	r1, [pc, #40]	; (8003d88 <UARTEx_SetNbDataToProcess+0xb4>)
 8003d60:	5c8a      	ldrb	r2, [r1, r2]
 8003d62:	435a      	muls	r2, r3
 8003d64:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8003d66:	193b      	adds	r3, r7, r4
 8003d68:	781b      	ldrb	r3, [r3, #0]
 8003d6a:	4a08      	ldr	r2, [pc, #32]	; (8003d8c <UARTEx_SetNbDataToProcess+0xb8>)
 8003d6c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003d6e:	0019      	movs	r1, r3
 8003d70:	f7fc fa6c 	bl	800024c <__divsi3>
 8003d74:	0003      	movs	r3, r0
 8003d76:	b299      	uxth	r1, r3
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2268      	movs	r2, #104	; 0x68
 8003d7c:	5299      	strh	r1, [r3, r2]
}
 8003d7e:	46c0      	nop			; (mov r8, r8)
 8003d80:	46bd      	mov	sp, r7
 8003d82:	b005      	add	sp, #20
 8003d84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d86:	46c0      	nop			; (mov r8, r8)
 8003d88:	0800523c 	.word	0x0800523c
 8003d8c:	08005244 	.word	0x08005244

08003d90 <__errno>:
 8003d90:	4b01      	ldr	r3, [pc, #4]	; (8003d98 <__errno+0x8>)
 8003d92:	6818      	ldr	r0, [r3, #0]
 8003d94:	4770      	bx	lr
 8003d96:	46c0      	nop			; (mov r8, r8)
 8003d98:	20000040 	.word	0x20000040

08003d9c <__libc_init_array>:
 8003d9c:	b570      	push	{r4, r5, r6, lr}
 8003d9e:	2600      	movs	r6, #0
 8003da0:	4d0c      	ldr	r5, [pc, #48]	; (8003dd4 <__libc_init_array+0x38>)
 8003da2:	4c0d      	ldr	r4, [pc, #52]	; (8003dd8 <__libc_init_array+0x3c>)
 8003da4:	1b64      	subs	r4, r4, r5
 8003da6:	10a4      	asrs	r4, r4, #2
 8003da8:	42a6      	cmp	r6, r4
 8003daa:	d109      	bne.n	8003dc0 <__libc_init_array+0x24>
 8003dac:	2600      	movs	r6, #0
 8003dae:	f001 f9a1 	bl	80050f4 <_init>
 8003db2:	4d0a      	ldr	r5, [pc, #40]	; (8003ddc <__libc_init_array+0x40>)
 8003db4:	4c0a      	ldr	r4, [pc, #40]	; (8003de0 <__libc_init_array+0x44>)
 8003db6:	1b64      	subs	r4, r4, r5
 8003db8:	10a4      	asrs	r4, r4, #2
 8003dba:	42a6      	cmp	r6, r4
 8003dbc:	d105      	bne.n	8003dca <__libc_init_array+0x2e>
 8003dbe:	bd70      	pop	{r4, r5, r6, pc}
 8003dc0:	00b3      	lsls	r3, r6, #2
 8003dc2:	58eb      	ldr	r3, [r5, r3]
 8003dc4:	4798      	blx	r3
 8003dc6:	3601      	adds	r6, #1
 8003dc8:	e7ee      	b.n	8003da8 <__libc_init_array+0xc>
 8003dca:	00b3      	lsls	r3, r6, #2
 8003dcc:	58eb      	ldr	r3, [r5, r3]
 8003dce:	4798      	blx	r3
 8003dd0:	3601      	adds	r6, #1
 8003dd2:	e7f2      	b.n	8003dba <__libc_init_array+0x1e>
 8003dd4:	080053fc 	.word	0x080053fc
 8003dd8:	080053fc 	.word	0x080053fc
 8003ddc:	080053fc 	.word	0x080053fc
 8003de0:	08005400 	.word	0x08005400

08003de4 <memset>:
 8003de4:	0003      	movs	r3, r0
 8003de6:	1882      	adds	r2, r0, r2
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d100      	bne.n	8003dee <memset+0xa>
 8003dec:	4770      	bx	lr
 8003dee:	7019      	strb	r1, [r3, #0]
 8003df0:	3301      	adds	r3, #1
 8003df2:	e7f9      	b.n	8003de8 <memset+0x4>

08003df4 <siprintf>:
 8003df4:	b40e      	push	{r1, r2, r3}
 8003df6:	b500      	push	{lr}
 8003df8:	490b      	ldr	r1, [pc, #44]	; (8003e28 <siprintf+0x34>)
 8003dfa:	b09c      	sub	sp, #112	; 0x70
 8003dfc:	ab1d      	add	r3, sp, #116	; 0x74
 8003dfe:	9002      	str	r0, [sp, #8]
 8003e00:	9006      	str	r0, [sp, #24]
 8003e02:	9107      	str	r1, [sp, #28]
 8003e04:	9104      	str	r1, [sp, #16]
 8003e06:	4809      	ldr	r0, [pc, #36]	; (8003e2c <siprintf+0x38>)
 8003e08:	4909      	ldr	r1, [pc, #36]	; (8003e30 <siprintf+0x3c>)
 8003e0a:	cb04      	ldmia	r3!, {r2}
 8003e0c:	9105      	str	r1, [sp, #20]
 8003e0e:	6800      	ldr	r0, [r0, #0]
 8003e10:	a902      	add	r1, sp, #8
 8003e12:	9301      	str	r3, [sp, #4]
 8003e14:	f000 f8b0 	bl	8003f78 <_svfiprintf_r>
 8003e18:	2300      	movs	r3, #0
 8003e1a:	9a02      	ldr	r2, [sp, #8]
 8003e1c:	7013      	strb	r3, [r2, #0]
 8003e1e:	b01c      	add	sp, #112	; 0x70
 8003e20:	bc08      	pop	{r3}
 8003e22:	b003      	add	sp, #12
 8003e24:	4718      	bx	r3
 8003e26:	46c0      	nop			; (mov r8, r8)
 8003e28:	7fffffff 	.word	0x7fffffff
 8003e2c:	20000040 	.word	0x20000040
 8003e30:	ffff0208 	.word	0xffff0208

08003e34 <siscanf>:
 8003e34:	b40e      	push	{r1, r2, r3}
 8003e36:	b530      	push	{r4, r5, lr}
 8003e38:	2381      	movs	r3, #129	; 0x81
 8003e3a:	b09c      	sub	sp, #112	; 0x70
 8003e3c:	466a      	mov	r2, sp
 8003e3e:	ac1f      	add	r4, sp, #124	; 0x7c
 8003e40:	009b      	lsls	r3, r3, #2
 8003e42:	cc20      	ldmia	r4!, {r5}
 8003e44:	8293      	strh	r3, [r2, #20]
 8003e46:	9002      	str	r0, [sp, #8]
 8003e48:	9006      	str	r0, [sp, #24]
 8003e4a:	f7fc f963 	bl	8000114 <strlen>
 8003e4e:	4b0b      	ldr	r3, [pc, #44]	; (8003e7c <siscanf+0x48>)
 8003e50:	466a      	mov	r2, sp
 8003e52:	930b      	str	r3, [sp, #44]	; 0x2c
 8003e54:	2300      	movs	r3, #0
 8003e56:	9003      	str	r0, [sp, #12]
 8003e58:	9007      	str	r0, [sp, #28]
 8003e5a:	4809      	ldr	r0, [pc, #36]	; (8003e80 <siscanf+0x4c>)
 8003e5c:	930f      	str	r3, [sp, #60]	; 0x3c
 8003e5e:	9314      	str	r3, [sp, #80]	; 0x50
 8003e60:	3b01      	subs	r3, #1
 8003e62:	82d3      	strh	r3, [r2, #22]
 8003e64:	a902      	add	r1, sp, #8
 8003e66:	0023      	movs	r3, r4
 8003e68:	002a      	movs	r2, r5
 8003e6a:	6800      	ldr	r0, [r0, #0]
 8003e6c:	9401      	str	r4, [sp, #4]
 8003e6e:	f000 f9df 	bl	8004230 <__ssvfiscanf_r>
 8003e72:	b01c      	add	sp, #112	; 0x70
 8003e74:	bc30      	pop	{r4, r5}
 8003e76:	bc08      	pop	{r3}
 8003e78:	b003      	add	sp, #12
 8003e7a:	4718      	bx	r3
 8003e7c:	08003e85 	.word	0x08003e85
 8003e80:	20000040 	.word	0x20000040

08003e84 <__seofread>:
 8003e84:	2000      	movs	r0, #0
 8003e86:	4770      	bx	lr

08003e88 <strstr>:
 8003e88:	780a      	ldrb	r2, [r1, #0]
 8003e8a:	b530      	push	{r4, r5, lr}
 8003e8c:	2a00      	cmp	r2, #0
 8003e8e:	d10c      	bne.n	8003eaa <strstr+0x22>
 8003e90:	bd30      	pop	{r4, r5, pc}
 8003e92:	429a      	cmp	r2, r3
 8003e94:	d108      	bne.n	8003ea8 <strstr+0x20>
 8003e96:	2301      	movs	r3, #1
 8003e98:	5ccc      	ldrb	r4, [r1, r3]
 8003e9a:	2c00      	cmp	r4, #0
 8003e9c:	d0f8      	beq.n	8003e90 <strstr+0x8>
 8003e9e:	5cc5      	ldrb	r5, [r0, r3]
 8003ea0:	42a5      	cmp	r5, r4
 8003ea2:	d101      	bne.n	8003ea8 <strstr+0x20>
 8003ea4:	3301      	adds	r3, #1
 8003ea6:	e7f7      	b.n	8003e98 <strstr+0x10>
 8003ea8:	3001      	adds	r0, #1
 8003eaa:	7803      	ldrb	r3, [r0, #0]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d1f0      	bne.n	8003e92 <strstr+0xa>
 8003eb0:	0018      	movs	r0, r3
 8003eb2:	e7ed      	b.n	8003e90 <strstr+0x8>

08003eb4 <__ssputs_r>:
 8003eb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003eb6:	688e      	ldr	r6, [r1, #8]
 8003eb8:	b085      	sub	sp, #20
 8003eba:	0007      	movs	r7, r0
 8003ebc:	000c      	movs	r4, r1
 8003ebe:	9203      	str	r2, [sp, #12]
 8003ec0:	9301      	str	r3, [sp, #4]
 8003ec2:	429e      	cmp	r6, r3
 8003ec4:	d83c      	bhi.n	8003f40 <__ssputs_r+0x8c>
 8003ec6:	2390      	movs	r3, #144	; 0x90
 8003ec8:	898a      	ldrh	r2, [r1, #12]
 8003eca:	00db      	lsls	r3, r3, #3
 8003ecc:	421a      	tst	r2, r3
 8003ece:	d034      	beq.n	8003f3a <__ssputs_r+0x86>
 8003ed0:	6909      	ldr	r1, [r1, #16]
 8003ed2:	6823      	ldr	r3, [r4, #0]
 8003ed4:	6960      	ldr	r0, [r4, #20]
 8003ed6:	1a5b      	subs	r3, r3, r1
 8003ed8:	9302      	str	r3, [sp, #8]
 8003eda:	2303      	movs	r3, #3
 8003edc:	4343      	muls	r3, r0
 8003ede:	0fdd      	lsrs	r5, r3, #31
 8003ee0:	18ed      	adds	r5, r5, r3
 8003ee2:	9b01      	ldr	r3, [sp, #4]
 8003ee4:	9802      	ldr	r0, [sp, #8]
 8003ee6:	3301      	adds	r3, #1
 8003ee8:	181b      	adds	r3, r3, r0
 8003eea:	106d      	asrs	r5, r5, #1
 8003eec:	42ab      	cmp	r3, r5
 8003eee:	d900      	bls.n	8003ef2 <__ssputs_r+0x3e>
 8003ef0:	001d      	movs	r5, r3
 8003ef2:	0553      	lsls	r3, r2, #21
 8003ef4:	d532      	bpl.n	8003f5c <__ssputs_r+0xa8>
 8003ef6:	0029      	movs	r1, r5
 8003ef8:	0038      	movs	r0, r7
 8003efa:	f001 f82b 	bl	8004f54 <_malloc_r>
 8003efe:	1e06      	subs	r6, r0, #0
 8003f00:	d109      	bne.n	8003f16 <__ssputs_r+0x62>
 8003f02:	230c      	movs	r3, #12
 8003f04:	603b      	str	r3, [r7, #0]
 8003f06:	2340      	movs	r3, #64	; 0x40
 8003f08:	2001      	movs	r0, #1
 8003f0a:	89a2      	ldrh	r2, [r4, #12]
 8003f0c:	4240      	negs	r0, r0
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	81a3      	strh	r3, [r4, #12]
 8003f12:	b005      	add	sp, #20
 8003f14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f16:	9a02      	ldr	r2, [sp, #8]
 8003f18:	6921      	ldr	r1, [r4, #16]
 8003f1a:	f000 ff92 	bl	8004e42 <memcpy>
 8003f1e:	89a3      	ldrh	r3, [r4, #12]
 8003f20:	4a14      	ldr	r2, [pc, #80]	; (8003f74 <__ssputs_r+0xc0>)
 8003f22:	401a      	ands	r2, r3
 8003f24:	2380      	movs	r3, #128	; 0x80
 8003f26:	4313      	orrs	r3, r2
 8003f28:	81a3      	strh	r3, [r4, #12]
 8003f2a:	9b02      	ldr	r3, [sp, #8]
 8003f2c:	6126      	str	r6, [r4, #16]
 8003f2e:	18f6      	adds	r6, r6, r3
 8003f30:	6026      	str	r6, [r4, #0]
 8003f32:	6165      	str	r5, [r4, #20]
 8003f34:	9e01      	ldr	r6, [sp, #4]
 8003f36:	1aed      	subs	r5, r5, r3
 8003f38:	60a5      	str	r5, [r4, #8]
 8003f3a:	9b01      	ldr	r3, [sp, #4]
 8003f3c:	429e      	cmp	r6, r3
 8003f3e:	d900      	bls.n	8003f42 <__ssputs_r+0x8e>
 8003f40:	9e01      	ldr	r6, [sp, #4]
 8003f42:	0032      	movs	r2, r6
 8003f44:	9903      	ldr	r1, [sp, #12]
 8003f46:	6820      	ldr	r0, [r4, #0]
 8003f48:	f000 ff84 	bl	8004e54 <memmove>
 8003f4c:	68a3      	ldr	r3, [r4, #8]
 8003f4e:	2000      	movs	r0, #0
 8003f50:	1b9b      	subs	r3, r3, r6
 8003f52:	60a3      	str	r3, [r4, #8]
 8003f54:	6823      	ldr	r3, [r4, #0]
 8003f56:	199e      	adds	r6, r3, r6
 8003f58:	6026      	str	r6, [r4, #0]
 8003f5a:	e7da      	b.n	8003f12 <__ssputs_r+0x5e>
 8003f5c:	002a      	movs	r2, r5
 8003f5e:	0038      	movs	r0, r7
 8003f60:	f001 f86e 	bl	8005040 <_realloc_r>
 8003f64:	1e06      	subs	r6, r0, #0
 8003f66:	d1e0      	bne.n	8003f2a <__ssputs_r+0x76>
 8003f68:	0038      	movs	r0, r7
 8003f6a:	6921      	ldr	r1, [r4, #16]
 8003f6c:	f000 ff86 	bl	8004e7c <_free_r>
 8003f70:	e7c7      	b.n	8003f02 <__ssputs_r+0x4e>
 8003f72:	46c0      	nop			; (mov r8, r8)
 8003f74:	fffffb7f 	.word	0xfffffb7f

08003f78 <_svfiprintf_r>:
 8003f78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f7a:	b0a1      	sub	sp, #132	; 0x84
 8003f7c:	9003      	str	r0, [sp, #12]
 8003f7e:	001d      	movs	r5, r3
 8003f80:	898b      	ldrh	r3, [r1, #12]
 8003f82:	000f      	movs	r7, r1
 8003f84:	0016      	movs	r6, r2
 8003f86:	061b      	lsls	r3, r3, #24
 8003f88:	d511      	bpl.n	8003fae <_svfiprintf_r+0x36>
 8003f8a:	690b      	ldr	r3, [r1, #16]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d10e      	bne.n	8003fae <_svfiprintf_r+0x36>
 8003f90:	2140      	movs	r1, #64	; 0x40
 8003f92:	f000 ffdf 	bl	8004f54 <_malloc_r>
 8003f96:	6038      	str	r0, [r7, #0]
 8003f98:	6138      	str	r0, [r7, #16]
 8003f9a:	2800      	cmp	r0, #0
 8003f9c:	d105      	bne.n	8003faa <_svfiprintf_r+0x32>
 8003f9e:	230c      	movs	r3, #12
 8003fa0:	9a03      	ldr	r2, [sp, #12]
 8003fa2:	3801      	subs	r0, #1
 8003fa4:	6013      	str	r3, [r2, #0]
 8003fa6:	b021      	add	sp, #132	; 0x84
 8003fa8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003faa:	2340      	movs	r3, #64	; 0x40
 8003fac:	617b      	str	r3, [r7, #20]
 8003fae:	2300      	movs	r3, #0
 8003fb0:	ac08      	add	r4, sp, #32
 8003fb2:	6163      	str	r3, [r4, #20]
 8003fb4:	3320      	adds	r3, #32
 8003fb6:	7663      	strb	r3, [r4, #25]
 8003fb8:	3310      	adds	r3, #16
 8003fba:	76a3      	strb	r3, [r4, #26]
 8003fbc:	9507      	str	r5, [sp, #28]
 8003fbe:	0035      	movs	r5, r6
 8003fc0:	782b      	ldrb	r3, [r5, #0]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d001      	beq.n	8003fca <_svfiprintf_r+0x52>
 8003fc6:	2b25      	cmp	r3, #37	; 0x25
 8003fc8:	d147      	bne.n	800405a <_svfiprintf_r+0xe2>
 8003fca:	1bab      	subs	r3, r5, r6
 8003fcc:	9305      	str	r3, [sp, #20]
 8003fce:	42b5      	cmp	r5, r6
 8003fd0:	d00c      	beq.n	8003fec <_svfiprintf_r+0x74>
 8003fd2:	0032      	movs	r2, r6
 8003fd4:	0039      	movs	r1, r7
 8003fd6:	9803      	ldr	r0, [sp, #12]
 8003fd8:	f7ff ff6c 	bl	8003eb4 <__ssputs_r>
 8003fdc:	1c43      	adds	r3, r0, #1
 8003fde:	d100      	bne.n	8003fe2 <_svfiprintf_r+0x6a>
 8003fe0:	e0ae      	b.n	8004140 <_svfiprintf_r+0x1c8>
 8003fe2:	6962      	ldr	r2, [r4, #20]
 8003fe4:	9b05      	ldr	r3, [sp, #20]
 8003fe6:	4694      	mov	ip, r2
 8003fe8:	4463      	add	r3, ip
 8003fea:	6163      	str	r3, [r4, #20]
 8003fec:	782b      	ldrb	r3, [r5, #0]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d100      	bne.n	8003ff4 <_svfiprintf_r+0x7c>
 8003ff2:	e0a5      	b.n	8004140 <_svfiprintf_r+0x1c8>
 8003ff4:	2201      	movs	r2, #1
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	4252      	negs	r2, r2
 8003ffa:	6062      	str	r2, [r4, #4]
 8003ffc:	a904      	add	r1, sp, #16
 8003ffe:	3254      	adds	r2, #84	; 0x54
 8004000:	1852      	adds	r2, r2, r1
 8004002:	1c6e      	adds	r6, r5, #1
 8004004:	6023      	str	r3, [r4, #0]
 8004006:	60e3      	str	r3, [r4, #12]
 8004008:	60a3      	str	r3, [r4, #8]
 800400a:	7013      	strb	r3, [r2, #0]
 800400c:	65a3      	str	r3, [r4, #88]	; 0x58
 800400e:	2205      	movs	r2, #5
 8004010:	7831      	ldrb	r1, [r6, #0]
 8004012:	4854      	ldr	r0, [pc, #336]	; (8004164 <_svfiprintf_r+0x1ec>)
 8004014:	f000 ff0a 	bl	8004e2c <memchr>
 8004018:	1c75      	adds	r5, r6, #1
 800401a:	2800      	cmp	r0, #0
 800401c:	d11f      	bne.n	800405e <_svfiprintf_r+0xe6>
 800401e:	6822      	ldr	r2, [r4, #0]
 8004020:	06d3      	lsls	r3, r2, #27
 8004022:	d504      	bpl.n	800402e <_svfiprintf_r+0xb6>
 8004024:	2353      	movs	r3, #83	; 0x53
 8004026:	a904      	add	r1, sp, #16
 8004028:	185b      	adds	r3, r3, r1
 800402a:	2120      	movs	r1, #32
 800402c:	7019      	strb	r1, [r3, #0]
 800402e:	0713      	lsls	r3, r2, #28
 8004030:	d504      	bpl.n	800403c <_svfiprintf_r+0xc4>
 8004032:	2353      	movs	r3, #83	; 0x53
 8004034:	a904      	add	r1, sp, #16
 8004036:	185b      	adds	r3, r3, r1
 8004038:	212b      	movs	r1, #43	; 0x2b
 800403a:	7019      	strb	r1, [r3, #0]
 800403c:	7833      	ldrb	r3, [r6, #0]
 800403e:	2b2a      	cmp	r3, #42	; 0x2a
 8004040:	d016      	beq.n	8004070 <_svfiprintf_r+0xf8>
 8004042:	0035      	movs	r5, r6
 8004044:	2100      	movs	r1, #0
 8004046:	200a      	movs	r0, #10
 8004048:	68e3      	ldr	r3, [r4, #12]
 800404a:	782a      	ldrb	r2, [r5, #0]
 800404c:	1c6e      	adds	r6, r5, #1
 800404e:	3a30      	subs	r2, #48	; 0x30
 8004050:	2a09      	cmp	r2, #9
 8004052:	d94e      	bls.n	80040f2 <_svfiprintf_r+0x17a>
 8004054:	2900      	cmp	r1, #0
 8004056:	d111      	bne.n	800407c <_svfiprintf_r+0x104>
 8004058:	e017      	b.n	800408a <_svfiprintf_r+0x112>
 800405a:	3501      	adds	r5, #1
 800405c:	e7b0      	b.n	8003fc0 <_svfiprintf_r+0x48>
 800405e:	4b41      	ldr	r3, [pc, #260]	; (8004164 <_svfiprintf_r+0x1ec>)
 8004060:	6822      	ldr	r2, [r4, #0]
 8004062:	1ac0      	subs	r0, r0, r3
 8004064:	2301      	movs	r3, #1
 8004066:	4083      	lsls	r3, r0
 8004068:	4313      	orrs	r3, r2
 800406a:	002e      	movs	r6, r5
 800406c:	6023      	str	r3, [r4, #0]
 800406e:	e7ce      	b.n	800400e <_svfiprintf_r+0x96>
 8004070:	9b07      	ldr	r3, [sp, #28]
 8004072:	1d19      	adds	r1, r3, #4
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	9107      	str	r1, [sp, #28]
 8004078:	2b00      	cmp	r3, #0
 800407a:	db01      	blt.n	8004080 <_svfiprintf_r+0x108>
 800407c:	930b      	str	r3, [sp, #44]	; 0x2c
 800407e:	e004      	b.n	800408a <_svfiprintf_r+0x112>
 8004080:	425b      	negs	r3, r3
 8004082:	60e3      	str	r3, [r4, #12]
 8004084:	2302      	movs	r3, #2
 8004086:	4313      	orrs	r3, r2
 8004088:	6023      	str	r3, [r4, #0]
 800408a:	782b      	ldrb	r3, [r5, #0]
 800408c:	2b2e      	cmp	r3, #46	; 0x2e
 800408e:	d10a      	bne.n	80040a6 <_svfiprintf_r+0x12e>
 8004090:	786b      	ldrb	r3, [r5, #1]
 8004092:	2b2a      	cmp	r3, #42	; 0x2a
 8004094:	d135      	bne.n	8004102 <_svfiprintf_r+0x18a>
 8004096:	9b07      	ldr	r3, [sp, #28]
 8004098:	3502      	adds	r5, #2
 800409a:	1d1a      	adds	r2, r3, #4
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	9207      	str	r2, [sp, #28]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	db2b      	blt.n	80040fc <_svfiprintf_r+0x184>
 80040a4:	9309      	str	r3, [sp, #36]	; 0x24
 80040a6:	4e30      	ldr	r6, [pc, #192]	; (8004168 <_svfiprintf_r+0x1f0>)
 80040a8:	2203      	movs	r2, #3
 80040aa:	0030      	movs	r0, r6
 80040ac:	7829      	ldrb	r1, [r5, #0]
 80040ae:	f000 febd 	bl	8004e2c <memchr>
 80040b2:	2800      	cmp	r0, #0
 80040b4:	d006      	beq.n	80040c4 <_svfiprintf_r+0x14c>
 80040b6:	2340      	movs	r3, #64	; 0x40
 80040b8:	1b80      	subs	r0, r0, r6
 80040ba:	4083      	lsls	r3, r0
 80040bc:	6822      	ldr	r2, [r4, #0]
 80040be:	3501      	adds	r5, #1
 80040c0:	4313      	orrs	r3, r2
 80040c2:	6023      	str	r3, [r4, #0]
 80040c4:	7829      	ldrb	r1, [r5, #0]
 80040c6:	2206      	movs	r2, #6
 80040c8:	4828      	ldr	r0, [pc, #160]	; (800416c <_svfiprintf_r+0x1f4>)
 80040ca:	1c6e      	adds	r6, r5, #1
 80040cc:	7621      	strb	r1, [r4, #24]
 80040ce:	f000 fead 	bl	8004e2c <memchr>
 80040d2:	2800      	cmp	r0, #0
 80040d4:	d03c      	beq.n	8004150 <_svfiprintf_r+0x1d8>
 80040d6:	4b26      	ldr	r3, [pc, #152]	; (8004170 <_svfiprintf_r+0x1f8>)
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d125      	bne.n	8004128 <_svfiprintf_r+0x1b0>
 80040dc:	2207      	movs	r2, #7
 80040de:	9b07      	ldr	r3, [sp, #28]
 80040e0:	3307      	adds	r3, #7
 80040e2:	4393      	bics	r3, r2
 80040e4:	3308      	adds	r3, #8
 80040e6:	9307      	str	r3, [sp, #28]
 80040e8:	6963      	ldr	r3, [r4, #20]
 80040ea:	9a04      	ldr	r2, [sp, #16]
 80040ec:	189b      	adds	r3, r3, r2
 80040ee:	6163      	str	r3, [r4, #20]
 80040f0:	e765      	b.n	8003fbe <_svfiprintf_r+0x46>
 80040f2:	4343      	muls	r3, r0
 80040f4:	0035      	movs	r5, r6
 80040f6:	2101      	movs	r1, #1
 80040f8:	189b      	adds	r3, r3, r2
 80040fa:	e7a6      	b.n	800404a <_svfiprintf_r+0xd2>
 80040fc:	2301      	movs	r3, #1
 80040fe:	425b      	negs	r3, r3
 8004100:	e7d0      	b.n	80040a4 <_svfiprintf_r+0x12c>
 8004102:	2300      	movs	r3, #0
 8004104:	200a      	movs	r0, #10
 8004106:	001a      	movs	r2, r3
 8004108:	3501      	adds	r5, #1
 800410a:	6063      	str	r3, [r4, #4]
 800410c:	7829      	ldrb	r1, [r5, #0]
 800410e:	1c6e      	adds	r6, r5, #1
 8004110:	3930      	subs	r1, #48	; 0x30
 8004112:	2909      	cmp	r1, #9
 8004114:	d903      	bls.n	800411e <_svfiprintf_r+0x1a6>
 8004116:	2b00      	cmp	r3, #0
 8004118:	d0c5      	beq.n	80040a6 <_svfiprintf_r+0x12e>
 800411a:	9209      	str	r2, [sp, #36]	; 0x24
 800411c:	e7c3      	b.n	80040a6 <_svfiprintf_r+0x12e>
 800411e:	4342      	muls	r2, r0
 8004120:	0035      	movs	r5, r6
 8004122:	2301      	movs	r3, #1
 8004124:	1852      	adds	r2, r2, r1
 8004126:	e7f1      	b.n	800410c <_svfiprintf_r+0x194>
 8004128:	ab07      	add	r3, sp, #28
 800412a:	9300      	str	r3, [sp, #0]
 800412c:	003a      	movs	r2, r7
 800412e:	0021      	movs	r1, r4
 8004130:	4b10      	ldr	r3, [pc, #64]	; (8004174 <_svfiprintf_r+0x1fc>)
 8004132:	9803      	ldr	r0, [sp, #12]
 8004134:	e000      	b.n	8004138 <_svfiprintf_r+0x1c0>
 8004136:	bf00      	nop
 8004138:	9004      	str	r0, [sp, #16]
 800413a:	9b04      	ldr	r3, [sp, #16]
 800413c:	3301      	adds	r3, #1
 800413e:	d1d3      	bne.n	80040e8 <_svfiprintf_r+0x170>
 8004140:	89bb      	ldrh	r3, [r7, #12]
 8004142:	980d      	ldr	r0, [sp, #52]	; 0x34
 8004144:	065b      	lsls	r3, r3, #25
 8004146:	d400      	bmi.n	800414a <_svfiprintf_r+0x1d2>
 8004148:	e72d      	b.n	8003fa6 <_svfiprintf_r+0x2e>
 800414a:	2001      	movs	r0, #1
 800414c:	4240      	negs	r0, r0
 800414e:	e72a      	b.n	8003fa6 <_svfiprintf_r+0x2e>
 8004150:	ab07      	add	r3, sp, #28
 8004152:	9300      	str	r3, [sp, #0]
 8004154:	003a      	movs	r2, r7
 8004156:	0021      	movs	r1, r4
 8004158:	4b06      	ldr	r3, [pc, #24]	; (8004174 <_svfiprintf_r+0x1fc>)
 800415a:	9803      	ldr	r0, [sp, #12]
 800415c:	f000 fa56 	bl	800460c <_printf_i>
 8004160:	e7ea      	b.n	8004138 <_svfiprintf_r+0x1c0>
 8004162:	46c0      	nop			; (mov r8, r8)
 8004164:	0800524c 	.word	0x0800524c
 8004168:	08005252 	.word	0x08005252
 800416c:	08005256 	.word	0x08005256
 8004170:	00000000 	.word	0x00000000
 8004174:	08003eb5 	.word	0x08003eb5

08004178 <_sungetc_r>:
 8004178:	b570      	push	{r4, r5, r6, lr}
 800417a:	0014      	movs	r4, r2
 800417c:	1c4b      	adds	r3, r1, #1
 800417e:	d103      	bne.n	8004188 <_sungetc_r+0x10>
 8004180:	2501      	movs	r5, #1
 8004182:	426d      	negs	r5, r5
 8004184:	0028      	movs	r0, r5
 8004186:	bd70      	pop	{r4, r5, r6, pc}
 8004188:	8993      	ldrh	r3, [r2, #12]
 800418a:	2220      	movs	r2, #32
 800418c:	4393      	bics	r3, r2
 800418e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8004190:	81a3      	strh	r3, [r4, #12]
 8004192:	b2ce      	uxtb	r6, r1
 8004194:	6863      	ldr	r3, [r4, #4]
 8004196:	b2cd      	uxtb	r5, r1
 8004198:	2a00      	cmp	r2, #0
 800419a:	d010      	beq.n	80041be <_sungetc_r+0x46>
 800419c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800419e:	429a      	cmp	r2, r3
 80041a0:	dd07      	ble.n	80041b2 <_sungetc_r+0x3a>
 80041a2:	6823      	ldr	r3, [r4, #0]
 80041a4:	3b01      	subs	r3, #1
 80041a6:	6023      	str	r3, [r4, #0]
 80041a8:	701e      	strb	r6, [r3, #0]
 80041aa:	6863      	ldr	r3, [r4, #4]
 80041ac:	3301      	adds	r3, #1
 80041ae:	6063      	str	r3, [r4, #4]
 80041b0:	e7e8      	b.n	8004184 <_sungetc_r+0xc>
 80041b2:	0021      	movs	r1, r4
 80041b4:	f000 fdfa 	bl	8004dac <__submore>
 80041b8:	2800      	cmp	r0, #0
 80041ba:	d0f2      	beq.n	80041a2 <_sungetc_r+0x2a>
 80041bc:	e7e0      	b.n	8004180 <_sungetc_r+0x8>
 80041be:	6921      	ldr	r1, [r4, #16]
 80041c0:	6822      	ldr	r2, [r4, #0]
 80041c2:	2900      	cmp	r1, #0
 80041c4:	d007      	beq.n	80041d6 <_sungetc_r+0x5e>
 80041c6:	4291      	cmp	r1, r2
 80041c8:	d205      	bcs.n	80041d6 <_sungetc_r+0x5e>
 80041ca:	1e51      	subs	r1, r2, #1
 80041cc:	7808      	ldrb	r0, [r1, #0]
 80041ce:	42a8      	cmp	r0, r5
 80041d0:	d101      	bne.n	80041d6 <_sungetc_r+0x5e>
 80041d2:	6021      	str	r1, [r4, #0]
 80041d4:	e7ea      	b.n	80041ac <_sungetc_r+0x34>
 80041d6:	6423      	str	r3, [r4, #64]	; 0x40
 80041d8:	0023      	movs	r3, r4
 80041da:	3344      	adds	r3, #68	; 0x44
 80041dc:	6363      	str	r3, [r4, #52]	; 0x34
 80041de:	2303      	movs	r3, #3
 80041e0:	63a3      	str	r3, [r4, #56]	; 0x38
 80041e2:	0023      	movs	r3, r4
 80041e4:	3346      	adds	r3, #70	; 0x46
 80041e6:	63e2      	str	r2, [r4, #60]	; 0x3c
 80041e8:	701e      	strb	r6, [r3, #0]
 80041ea:	6023      	str	r3, [r4, #0]
 80041ec:	2301      	movs	r3, #1
 80041ee:	e7de      	b.n	80041ae <_sungetc_r+0x36>

080041f0 <__ssrefill_r>:
 80041f0:	b510      	push	{r4, lr}
 80041f2:	000c      	movs	r4, r1
 80041f4:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80041f6:	2900      	cmp	r1, #0
 80041f8:	d00e      	beq.n	8004218 <__ssrefill_r+0x28>
 80041fa:	0023      	movs	r3, r4
 80041fc:	3344      	adds	r3, #68	; 0x44
 80041fe:	4299      	cmp	r1, r3
 8004200:	d001      	beq.n	8004206 <__ssrefill_r+0x16>
 8004202:	f000 fe3b 	bl	8004e7c <_free_r>
 8004206:	2000      	movs	r0, #0
 8004208:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800420a:	6360      	str	r0, [r4, #52]	; 0x34
 800420c:	6063      	str	r3, [r4, #4]
 800420e:	4283      	cmp	r3, r0
 8004210:	d002      	beq.n	8004218 <__ssrefill_r+0x28>
 8004212:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004214:	6023      	str	r3, [r4, #0]
 8004216:	bd10      	pop	{r4, pc}
 8004218:	6923      	ldr	r3, [r4, #16]
 800421a:	2001      	movs	r0, #1
 800421c:	6023      	str	r3, [r4, #0]
 800421e:	2300      	movs	r3, #0
 8004220:	89a2      	ldrh	r2, [r4, #12]
 8004222:	6063      	str	r3, [r4, #4]
 8004224:	3320      	adds	r3, #32
 8004226:	4313      	orrs	r3, r2
 8004228:	81a3      	strh	r3, [r4, #12]
 800422a:	4240      	negs	r0, r0
 800422c:	e7f3      	b.n	8004216 <__ssrefill_r+0x26>
	...

08004230 <__ssvfiscanf_r>:
 8004230:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004232:	4cb8      	ldr	r4, [pc, #736]	; (8004514 <__ssvfiscanf_r+0x2e4>)
 8004234:	0006      	movs	r6, r0
 8004236:	44a5      	add	sp, r4
 8004238:	000c      	movs	r4, r1
 800423a:	2100      	movs	r1, #0
 800423c:	9146      	str	r1, [sp, #280]	; 0x118
 800423e:	9147      	str	r1, [sp, #284]	; 0x11c
 8004240:	a903      	add	r1, sp, #12
 8004242:	9148      	str	r1, [sp, #288]	; 0x120
 8004244:	21be      	movs	r1, #190	; 0xbe
 8004246:	48b4      	ldr	r0, [pc, #720]	; (8004518 <__ssvfiscanf_r+0x2e8>)
 8004248:	0049      	lsls	r1, r1, #1
 800424a:	ad43      	add	r5, sp, #268	; 0x10c
 800424c:	5068      	str	r0, [r5, r1]
 800424e:	25c0      	movs	r5, #192	; 0xc0
 8004250:	49b2      	ldr	r1, [pc, #712]	; (800451c <__ssvfiscanf_r+0x2ec>)
 8004252:	006d      	lsls	r5, r5, #1
 8004254:	a843      	add	r0, sp, #268	; 0x10c
 8004256:	5141      	str	r1, [r0, r5]
 8004258:	9302      	str	r3, [sp, #8]
 800425a:	7813      	ldrb	r3, [r2, #0]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d100      	bne.n	8004262 <__ssvfiscanf_r+0x32>
 8004260:	e155      	b.n	800450e <__ssvfiscanf_r+0x2de>
 8004262:	49af      	ldr	r1, [pc, #700]	; (8004520 <__ssvfiscanf_r+0x2f0>)
 8004264:	2508      	movs	r5, #8
 8004266:	5cc8      	ldrb	r0, [r1, r3]
 8004268:	2108      	movs	r1, #8
 800426a:	1c57      	adds	r7, r2, #1
 800426c:	4001      	ands	r1, r0
 800426e:	4228      	tst	r0, r5
 8004270:	d020      	beq.n	80042b4 <__ssvfiscanf_r+0x84>
 8004272:	6863      	ldr	r3, [r4, #4]
 8004274:	2b00      	cmp	r3, #0
 8004276:	dd12      	ble.n	800429e <__ssvfiscanf_r+0x6e>
 8004278:	6823      	ldr	r3, [r4, #0]
 800427a:	49a9      	ldr	r1, [pc, #676]	; (8004520 <__ssvfiscanf_r+0x2f0>)
 800427c:	781a      	ldrb	r2, [r3, #0]
 800427e:	5c8a      	ldrb	r2, [r1, r2]
 8004280:	2108      	movs	r1, #8
 8004282:	420a      	tst	r2, r1
 8004284:	d101      	bne.n	800428a <__ssvfiscanf_r+0x5a>
 8004286:	003a      	movs	r2, r7
 8004288:	e7e7      	b.n	800425a <__ssvfiscanf_r+0x2a>
 800428a:	9a47      	ldr	r2, [sp, #284]	; 0x11c
 800428c:	3301      	adds	r3, #1
 800428e:	9200      	str	r2, [sp, #0]
 8004290:	3201      	adds	r2, #1
 8004292:	9247      	str	r2, [sp, #284]	; 0x11c
 8004294:	6862      	ldr	r2, [r4, #4]
 8004296:	6023      	str	r3, [r4, #0]
 8004298:	3a01      	subs	r2, #1
 800429a:	6062      	str	r2, [r4, #4]
 800429c:	e7e9      	b.n	8004272 <__ssvfiscanf_r+0x42>
 800429e:	22c0      	movs	r2, #192	; 0xc0
 80042a0:	ab43      	add	r3, sp, #268	; 0x10c
 80042a2:	0052      	lsls	r2, r2, #1
 80042a4:	589b      	ldr	r3, [r3, r2]
 80042a6:	0021      	movs	r1, r4
 80042a8:	0030      	movs	r0, r6
 80042aa:	9300      	str	r3, [sp, #0]
 80042ac:	4798      	blx	r3
 80042ae:	2800      	cmp	r0, #0
 80042b0:	d0e2      	beq.n	8004278 <__ssvfiscanf_r+0x48>
 80042b2:	e7e8      	b.n	8004286 <__ssvfiscanf_r+0x56>
 80042b4:	001d      	movs	r5, r3
 80042b6:	2b25      	cmp	r3, #37	; 0x25
 80042b8:	d164      	bne.n	8004384 <__ssvfiscanf_r+0x154>
 80042ba:	9145      	str	r1, [sp, #276]	; 0x114
 80042bc:	9143      	str	r1, [sp, #268]	; 0x10c
 80042be:	7853      	ldrb	r3, [r2, #1]
 80042c0:	2b2a      	cmp	r3, #42	; 0x2a
 80042c2:	d102      	bne.n	80042ca <__ssvfiscanf_r+0x9a>
 80042c4:	3b1a      	subs	r3, #26
 80042c6:	9343      	str	r3, [sp, #268]	; 0x10c
 80042c8:	1c97      	adds	r7, r2, #2
 80042ca:	003d      	movs	r5, r7
 80042cc:	220a      	movs	r2, #10
 80042ce:	7829      	ldrb	r1, [r5, #0]
 80042d0:	1c6b      	adds	r3, r5, #1
 80042d2:	9300      	str	r3, [sp, #0]
 80042d4:	000b      	movs	r3, r1
 80042d6:	3b30      	subs	r3, #48	; 0x30
 80042d8:	2b09      	cmp	r3, #9
 80042da:	d91f      	bls.n	800431c <__ssvfiscanf_r+0xec>
 80042dc:	4f91      	ldr	r7, [pc, #580]	; (8004524 <__ssvfiscanf_r+0x2f4>)
 80042de:	2203      	movs	r2, #3
 80042e0:	0038      	movs	r0, r7
 80042e2:	f000 fda3 	bl	8004e2c <memchr>
 80042e6:	2800      	cmp	r0, #0
 80042e8:	d007      	beq.n	80042fa <__ssvfiscanf_r+0xca>
 80042ea:	2301      	movs	r3, #1
 80042ec:	1bc0      	subs	r0, r0, r7
 80042ee:	4083      	lsls	r3, r0
 80042f0:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 80042f2:	9d00      	ldr	r5, [sp, #0]
 80042f4:	4313      	orrs	r3, r2
 80042f6:	9201      	str	r2, [sp, #4]
 80042f8:	9343      	str	r3, [sp, #268]	; 0x10c
 80042fa:	1c6f      	adds	r7, r5, #1
 80042fc:	782d      	ldrb	r5, [r5, #0]
 80042fe:	2d78      	cmp	r5, #120	; 0x78
 8004300:	d807      	bhi.n	8004312 <__ssvfiscanf_r+0xe2>
 8004302:	2d57      	cmp	r5, #87	; 0x57
 8004304:	d812      	bhi.n	800432c <__ssvfiscanf_r+0xfc>
 8004306:	2d25      	cmp	r5, #37	; 0x25
 8004308:	d03c      	beq.n	8004384 <__ssvfiscanf_r+0x154>
 800430a:	d836      	bhi.n	800437a <__ssvfiscanf_r+0x14a>
 800430c:	2d00      	cmp	r5, #0
 800430e:	d100      	bne.n	8004312 <__ssvfiscanf_r+0xe2>
 8004310:	e0fa      	b.n	8004508 <__ssvfiscanf_r+0x2d8>
 8004312:	2303      	movs	r3, #3
 8004314:	9349      	str	r3, [sp, #292]	; 0x124
 8004316:	3307      	adds	r3, #7
 8004318:	9344      	str	r3, [sp, #272]	; 0x110
 800431a:	e06d      	b.n	80043f8 <__ssvfiscanf_r+0x1c8>
 800431c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800431e:	9d00      	ldr	r5, [sp, #0]
 8004320:	9301      	str	r3, [sp, #4]
 8004322:	4353      	muls	r3, r2
 8004324:	3b30      	subs	r3, #48	; 0x30
 8004326:	185b      	adds	r3, r3, r1
 8004328:	9345      	str	r3, [sp, #276]	; 0x114
 800432a:	e7d0      	b.n	80042ce <__ssvfiscanf_r+0x9e>
 800432c:	0028      	movs	r0, r5
 800432e:	3858      	subs	r0, #88	; 0x58
 8004330:	2820      	cmp	r0, #32
 8004332:	d8ee      	bhi.n	8004312 <__ssvfiscanf_r+0xe2>
 8004334:	f7fb fef6 	bl	8000124 <__gnu_thumb1_case_shi>
 8004338:	ffed0051 	.word	0xffed0051
 800433c:	0087ffed 	.word	0x0087ffed
 8004340:	ffedffed 	.word	0xffedffed
 8004344:	ffedffed 	.word	0xffedffed
 8004348:	ffedffed 	.word	0xffedffed
 800434c:	0095ffed 	.word	0x0095ffed
 8004350:	0024007d 	.word	0x0024007d
 8004354:	00240024 	.word	0x00240024
 8004358:	007fffed 	.word	0x007fffed
 800435c:	ffedffed 	.word	0xffedffed
 8004360:	ffedffed 	.word	0xffedffed
 8004364:	0083009f 	.word	0x0083009f
 8004368:	ffed004b 	.word	0xffed004b
 800436c:	009dffed 	.word	0x009dffed
 8004370:	007dffed 	.word	0x007dffed
 8004374:	ffedffed 	.word	0xffedffed
 8004378:	0051      	.short	0x0051
 800437a:	3d45      	subs	r5, #69	; 0x45
 800437c:	2d02      	cmp	r5, #2
 800437e:	d8c8      	bhi.n	8004312 <__ssvfiscanf_r+0xe2>
 8004380:	2305      	movs	r3, #5
 8004382:	e06c      	b.n	800445e <__ssvfiscanf_r+0x22e>
 8004384:	6863      	ldr	r3, [r4, #4]
 8004386:	2b00      	cmp	r3, #0
 8004388:	dd0e      	ble.n	80043a8 <__ssvfiscanf_r+0x178>
 800438a:	6823      	ldr	r3, [r4, #0]
 800438c:	781a      	ldrb	r2, [r3, #0]
 800438e:	42aa      	cmp	r2, r5
 8004390:	d000      	beq.n	8004394 <__ssvfiscanf_r+0x164>
 8004392:	e0bc      	b.n	800450e <__ssvfiscanf_r+0x2de>
 8004394:	3301      	adds	r3, #1
 8004396:	6862      	ldr	r2, [r4, #4]
 8004398:	6023      	str	r3, [r4, #0]
 800439a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800439c:	3a01      	subs	r2, #1
 800439e:	9300      	str	r3, [sp, #0]
 80043a0:	3301      	adds	r3, #1
 80043a2:	6062      	str	r2, [r4, #4]
 80043a4:	9347      	str	r3, [sp, #284]	; 0x11c
 80043a6:	e76e      	b.n	8004286 <__ssvfiscanf_r+0x56>
 80043a8:	22c0      	movs	r2, #192	; 0xc0
 80043aa:	ab43      	add	r3, sp, #268	; 0x10c
 80043ac:	0052      	lsls	r2, r2, #1
 80043ae:	589b      	ldr	r3, [r3, r2]
 80043b0:	0021      	movs	r1, r4
 80043b2:	0030      	movs	r0, r6
 80043b4:	9300      	str	r3, [sp, #0]
 80043b6:	4798      	blx	r3
 80043b8:	2800      	cmp	r0, #0
 80043ba:	d0e6      	beq.n	800438a <__ssvfiscanf_r+0x15a>
 80043bc:	9846      	ldr	r0, [sp, #280]	; 0x118
 80043be:	2800      	cmp	r0, #0
 80043c0:	d000      	beq.n	80043c4 <__ssvfiscanf_r+0x194>
 80043c2:	e09d      	b.n	8004500 <__ssvfiscanf_r+0x2d0>
 80043c4:	3801      	subs	r0, #1
 80043c6:	23a5      	movs	r3, #165	; 0xa5
 80043c8:	009b      	lsls	r3, r3, #2
 80043ca:	449d      	add	sp, r3
 80043cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80043ce:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80043d0:	9300      	str	r3, [sp, #0]
 80043d2:	2320      	movs	r3, #32
 80043d4:	9a00      	ldr	r2, [sp, #0]
 80043d6:	4313      	orrs	r3, r2
 80043d8:	9343      	str	r3, [sp, #268]	; 0x10c
 80043da:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80043dc:	9300      	str	r3, [sp, #0]
 80043de:	2380      	movs	r3, #128	; 0x80
 80043e0:	9a00      	ldr	r2, [sp, #0]
 80043e2:	009b      	lsls	r3, r3, #2
 80043e4:	4313      	orrs	r3, r2
 80043e6:	9343      	str	r3, [sp, #268]	; 0x10c
 80043e8:	2310      	movs	r3, #16
 80043ea:	9344      	str	r3, [sp, #272]	; 0x110
 80043ec:	236e      	movs	r3, #110	; 0x6e
 80043ee:	42ab      	cmp	r3, r5
 80043f0:	41ad      	sbcs	r5, r5
 80043f2:	426d      	negs	r5, r5
 80043f4:	3503      	adds	r5, #3
 80043f6:	9549      	str	r5, [sp, #292]	; 0x124
 80043f8:	6863      	ldr	r3, [r4, #4]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	dd4a      	ble.n	8004494 <__ssvfiscanf_r+0x264>
 80043fe:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8004400:	9300      	str	r3, [sp, #0]
 8004402:	065b      	lsls	r3, r3, #25
 8004404:	d406      	bmi.n	8004414 <__ssvfiscanf_r+0x1e4>
 8004406:	6823      	ldr	r3, [r4, #0]
 8004408:	4945      	ldr	r1, [pc, #276]	; (8004520 <__ssvfiscanf_r+0x2f0>)
 800440a:	781a      	ldrb	r2, [r3, #0]
 800440c:	5c8a      	ldrb	r2, [r1, r2]
 800440e:	2108      	movs	r1, #8
 8004410:	420a      	tst	r2, r1
 8004412:	d14a      	bne.n	80044aa <__ssvfiscanf_r+0x27a>
 8004414:	9b49      	ldr	r3, [sp, #292]	; 0x124
 8004416:	2b02      	cmp	r3, #2
 8004418:	dc5e      	bgt.n	80044d8 <__ssvfiscanf_r+0x2a8>
 800441a:	0022      	movs	r2, r4
 800441c:	0030      	movs	r0, r6
 800441e:	ab02      	add	r3, sp, #8
 8004420:	a943      	add	r1, sp, #268	; 0x10c
 8004422:	f000 fa05 	bl	8004830 <_scanf_chars>
 8004426:	2801      	cmp	r0, #1
 8004428:	d071      	beq.n	800450e <__ssvfiscanf_r+0x2de>
 800442a:	2802      	cmp	r0, #2
 800442c:	d000      	beq.n	8004430 <__ssvfiscanf_r+0x200>
 800442e:	e72a      	b.n	8004286 <__ssvfiscanf_r+0x56>
 8004430:	e7c4      	b.n	80043bc <__ssvfiscanf_r+0x18c>
 8004432:	230a      	movs	r3, #10
 8004434:	e7d9      	b.n	80043ea <__ssvfiscanf_r+0x1ba>
 8004436:	2300      	movs	r3, #0
 8004438:	2503      	movs	r5, #3
 800443a:	9344      	str	r3, [sp, #272]	; 0x110
 800443c:	e7db      	b.n	80043f6 <__ssvfiscanf_r+0x1c6>
 800443e:	2308      	movs	r3, #8
 8004440:	2504      	movs	r5, #4
 8004442:	9344      	str	r3, [sp, #272]	; 0x110
 8004444:	e7d7      	b.n	80043f6 <__ssvfiscanf_r+0x1c6>
 8004446:	0039      	movs	r1, r7
 8004448:	a803      	add	r0, sp, #12
 800444a:	f000 fb53 	bl	8004af4 <__sccl>
 800444e:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8004450:	0007      	movs	r7, r0
 8004452:	9300      	str	r3, [sp, #0]
 8004454:	2340      	movs	r3, #64	; 0x40
 8004456:	9a00      	ldr	r2, [sp, #0]
 8004458:	4313      	orrs	r3, r2
 800445a:	9343      	str	r3, [sp, #268]	; 0x10c
 800445c:	2301      	movs	r3, #1
 800445e:	9349      	str	r3, [sp, #292]	; 0x124
 8004460:	e7ca      	b.n	80043f8 <__ssvfiscanf_r+0x1c8>
 8004462:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8004464:	9300      	str	r3, [sp, #0]
 8004466:	2340      	movs	r3, #64	; 0x40
 8004468:	9a00      	ldr	r2, [sp, #0]
 800446a:	4313      	orrs	r3, r2
 800446c:	9343      	str	r3, [sp, #268]	; 0x10c
 800446e:	2300      	movs	r3, #0
 8004470:	e7f5      	b.n	800445e <__ssvfiscanf_r+0x22e>
 8004472:	2302      	movs	r3, #2
 8004474:	e7f3      	b.n	800445e <__ssvfiscanf_r+0x22e>
 8004476:	9843      	ldr	r0, [sp, #268]	; 0x10c
 8004478:	06c3      	lsls	r3, r0, #27
 800447a:	d500      	bpl.n	800447e <__ssvfiscanf_r+0x24e>
 800447c:	e703      	b.n	8004286 <__ssvfiscanf_r+0x56>
 800447e:	9b02      	ldr	r3, [sp, #8]
 8004480:	9a47      	ldr	r2, [sp, #284]	; 0x11c
 8004482:	1d19      	adds	r1, r3, #4
 8004484:	9102      	str	r1, [sp, #8]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	07c5      	lsls	r5, r0, #31
 800448a:	d501      	bpl.n	8004490 <__ssvfiscanf_r+0x260>
 800448c:	801a      	strh	r2, [r3, #0]
 800448e:	e6fa      	b.n	8004286 <__ssvfiscanf_r+0x56>
 8004490:	601a      	str	r2, [r3, #0]
 8004492:	e6f8      	b.n	8004286 <__ssvfiscanf_r+0x56>
 8004494:	22c0      	movs	r2, #192	; 0xc0
 8004496:	ab43      	add	r3, sp, #268	; 0x10c
 8004498:	0052      	lsls	r2, r2, #1
 800449a:	589b      	ldr	r3, [r3, r2]
 800449c:	0021      	movs	r1, r4
 800449e:	0030      	movs	r0, r6
 80044a0:	9300      	str	r3, [sp, #0]
 80044a2:	4798      	blx	r3
 80044a4:	2800      	cmp	r0, #0
 80044a6:	d0aa      	beq.n	80043fe <__ssvfiscanf_r+0x1ce>
 80044a8:	e788      	b.n	80043bc <__ssvfiscanf_r+0x18c>
 80044aa:	9a47      	ldr	r2, [sp, #284]	; 0x11c
 80044ac:	9200      	str	r2, [sp, #0]
 80044ae:	3201      	adds	r2, #1
 80044b0:	9247      	str	r2, [sp, #284]	; 0x11c
 80044b2:	6862      	ldr	r2, [r4, #4]
 80044b4:	3a01      	subs	r2, #1
 80044b6:	6062      	str	r2, [r4, #4]
 80044b8:	2a00      	cmp	r2, #0
 80044ba:	dd02      	ble.n	80044c2 <__ssvfiscanf_r+0x292>
 80044bc:	3301      	adds	r3, #1
 80044be:	6023      	str	r3, [r4, #0]
 80044c0:	e7a1      	b.n	8004406 <__ssvfiscanf_r+0x1d6>
 80044c2:	22c0      	movs	r2, #192	; 0xc0
 80044c4:	ab43      	add	r3, sp, #268	; 0x10c
 80044c6:	0052      	lsls	r2, r2, #1
 80044c8:	589b      	ldr	r3, [r3, r2]
 80044ca:	0021      	movs	r1, r4
 80044cc:	0030      	movs	r0, r6
 80044ce:	9300      	str	r3, [sp, #0]
 80044d0:	4798      	blx	r3
 80044d2:	2800      	cmp	r0, #0
 80044d4:	d097      	beq.n	8004406 <__ssvfiscanf_r+0x1d6>
 80044d6:	e771      	b.n	80043bc <__ssvfiscanf_r+0x18c>
 80044d8:	2b04      	cmp	r3, #4
 80044da:	dc06      	bgt.n	80044ea <__ssvfiscanf_r+0x2ba>
 80044dc:	0022      	movs	r2, r4
 80044de:	0030      	movs	r0, r6
 80044e0:	ab02      	add	r3, sp, #8
 80044e2:	a943      	add	r1, sp, #268	; 0x10c
 80044e4:	f000 fa02 	bl	80048ec <_scanf_i>
 80044e8:	e79d      	b.n	8004426 <__ssvfiscanf_r+0x1f6>
 80044ea:	4b0f      	ldr	r3, [pc, #60]	; (8004528 <__ssvfiscanf_r+0x2f8>)
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d100      	bne.n	80044f2 <__ssvfiscanf_r+0x2c2>
 80044f0:	e6c9      	b.n	8004286 <__ssvfiscanf_r+0x56>
 80044f2:	0022      	movs	r2, r4
 80044f4:	0030      	movs	r0, r6
 80044f6:	ab02      	add	r3, sp, #8
 80044f8:	a943      	add	r1, sp, #268	; 0x10c
 80044fa:	e000      	b.n	80044fe <__ssvfiscanf_r+0x2ce>
 80044fc:	bf00      	nop
 80044fe:	e792      	b.n	8004426 <__ssvfiscanf_r+0x1f6>
 8004500:	89a3      	ldrh	r3, [r4, #12]
 8004502:	065b      	lsls	r3, r3, #25
 8004504:	d400      	bmi.n	8004508 <__ssvfiscanf_r+0x2d8>
 8004506:	e75e      	b.n	80043c6 <__ssvfiscanf_r+0x196>
 8004508:	2001      	movs	r0, #1
 800450a:	4240      	negs	r0, r0
 800450c:	e75b      	b.n	80043c6 <__ssvfiscanf_r+0x196>
 800450e:	9846      	ldr	r0, [sp, #280]	; 0x118
 8004510:	e759      	b.n	80043c6 <__ssvfiscanf_r+0x196>
 8004512:	46c0      	nop			; (mov r8, r8)
 8004514:	fffffd6c 	.word	0xfffffd6c
 8004518:	08004179 	.word	0x08004179
 800451c:	080041f1 	.word	0x080041f1
 8004520:	0800529b 	.word	0x0800529b
 8004524:	08005252 	.word	0x08005252
 8004528:	00000000 	.word	0x00000000

0800452c <_printf_common>:
 800452c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800452e:	0015      	movs	r5, r2
 8004530:	9301      	str	r3, [sp, #4]
 8004532:	688a      	ldr	r2, [r1, #8]
 8004534:	690b      	ldr	r3, [r1, #16]
 8004536:	000c      	movs	r4, r1
 8004538:	9000      	str	r0, [sp, #0]
 800453a:	4293      	cmp	r3, r2
 800453c:	da00      	bge.n	8004540 <_printf_common+0x14>
 800453e:	0013      	movs	r3, r2
 8004540:	0022      	movs	r2, r4
 8004542:	602b      	str	r3, [r5, #0]
 8004544:	3243      	adds	r2, #67	; 0x43
 8004546:	7812      	ldrb	r2, [r2, #0]
 8004548:	2a00      	cmp	r2, #0
 800454a:	d001      	beq.n	8004550 <_printf_common+0x24>
 800454c:	3301      	adds	r3, #1
 800454e:	602b      	str	r3, [r5, #0]
 8004550:	6823      	ldr	r3, [r4, #0]
 8004552:	069b      	lsls	r3, r3, #26
 8004554:	d502      	bpl.n	800455c <_printf_common+0x30>
 8004556:	682b      	ldr	r3, [r5, #0]
 8004558:	3302      	adds	r3, #2
 800455a:	602b      	str	r3, [r5, #0]
 800455c:	6822      	ldr	r2, [r4, #0]
 800455e:	2306      	movs	r3, #6
 8004560:	0017      	movs	r7, r2
 8004562:	401f      	ands	r7, r3
 8004564:	421a      	tst	r2, r3
 8004566:	d027      	beq.n	80045b8 <_printf_common+0x8c>
 8004568:	0023      	movs	r3, r4
 800456a:	3343      	adds	r3, #67	; 0x43
 800456c:	781b      	ldrb	r3, [r3, #0]
 800456e:	1e5a      	subs	r2, r3, #1
 8004570:	4193      	sbcs	r3, r2
 8004572:	6822      	ldr	r2, [r4, #0]
 8004574:	0692      	lsls	r2, r2, #26
 8004576:	d430      	bmi.n	80045da <_printf_common+0xae>
 8004578:	0022      	movs	r2, r4
 800457a:	9901      	ldr	r1, [sp, #4]
 800457c:	9800      	ldr	r0, [sp, #0]
 800457e:	9e08      	ldr	r6, [sp, #32]
 8004580:	3243      	adds	r2, #67	; 0x43
 8004582:	47b0      	blx	r6
 8004584:	1c43      	adds	r3, r0, #1
 8004586:	d025      	beq.n	80045d4 <_printf_common+0xa8>
 8004588:	2306      	movs	r3, #6
 800458a:	6820      	ldr	r0, [r4, #0]
 800458c:	682a      	ldr	r2, [r5, #0]
 800458e:	68e1      	ldr	r1, [r4, #12]
 8004590:	2500      	movs	r5, #0
 8004592:	4003      	ands	r3, r0
 8004594:	2b04      	cmp	r3, #4
 8004596:	d103      	bne.n	80045a0 <_printf_common+0x74>
 8004598:	1a8d      	subs	r5, r1, r2
 800459a:	43eb      	mvns	r3, r5
 800459c:	17db      	asrs	r3, r3, #31
 800459e:	401d      	ands	r5, r3
 80045a0:	68a3      	ldr	r3, [r4, #8]
 80045a2:	6922      	ldr	r2, [r4, #16]
 80045a4:	4293      	cmp	r3, r2
 80045a6:	dd01      	ble.n	80045ac <_printf_common+0x80>
 80045a8:	1a9b      	subs	r3, r3, r2
 80045aa:	18ed      	adds	r5, r5, r3
 80045ac:	2700      	movs	r7, #0
 80045ae:	42bd      	cmp	r5, r7
 80045b0:	d120      	bne.n	80045f4 <_printf_common+0xc8>
 80045b2:	2000      	movs	r0, #0
 80045b4:	e010      	b.n	80045d8 <_printf_common+0xac>
 80045b6:	3701      	adds	r7, #1
 80045b8:	68e3      	ldr	r3, [r4, #12]
 80045ba:	682a      	ldr	r2, [r5, #0]
 80045bc:	1a9b      	subs	r3, r3, r2
 80045be:	42bb      	cmp	r3, r7
 80045c0:	ddd2      	ble.n	8004568 <_printf_common+0x3c>
 80045c2:	0022      	movs	r2, r4
 80045c4:	2301      	movs	r3, #1
 80045c6:	9901      	ldr	r1, [sp, #4]
 80045c8:	9800      	ldr	r0, [sp, #0]
 80045ca:	9e08      	ldr	r6, [sp, #32]
 80045cc:	3219      	adds	r2, #25
 80045ce:	47b0      	blx	r6
 80045d0:	1c43      	adds	r3, r0, #1
 80045d2:	d1f0      	bne.n	80045b6 <_printf_common+0x8a>
 80045d4:	2001      	movs	r0, #1
 80045d6:	4240      	negs	r0, r0
 80045d8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80045da:	2030      	movs	r0, #48	; 0x30
 80045dc:	18e1      	adds	r1, r4, r3
 80045de:	3143      	adds	r1, #67	; 0x43
 80045e0:	7008      	strb	r0, [r1, #0]
 80045e2:	0021      	movs	r1, r4
 80045e4:	1c5a      	adds	r2, r3, #1
 80045e6:	3145      	adds	r1, #69	; 0x45
 80045e8:	7809      	ldrb	r1, [r1, #0]
 80045ea:	18a2      	adds	r2, r4, r2
 80045ec:	3243      	adds	r2, #67	; 0x43
 80045ee:	3302      	adds	r3, #2
 80045f0:	7011      	strb	r1, [r2, #0]
 80045f2:	e7c1      	b.n	8004578 <_printf_common+0x4c>
 80045f4:	0022      	movs	r2, r4
 80045f6:	2301      	movs	r3, #1
 80045f8:	9901      	ldr	r1, [sp, #4]
 80045fa:	9800      	ldr	r0, [sp, #0]
 80045fc:	9e08      	ldr	r6, [sp, #32]
 80045fe:	321a      	adds	r2, #26
 8004600:	47b0      	blx	r6
 8004602:	1c43      	adds	r3, r0, #1
 8004604:	d0e6      	beq.n	80045d4 <_printf_common+0xa8>
 8004606:	3701      	adds	r7, #1
 8004608:	e7d1      	b.n	80045ae <_printf_common+0x82>
	...

0800460c <_printf_i>:
 800460c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800460e:	b08b      	sub	sp, #44	; 0x2c
 8004610:	9206      	str	r2, [sp, #24]
 8004612:	000a      	movs	r2, r1
 8004614:	3243      	adds	r2, #67	; 0x43
 8004616:	9307      	str	r3, [sp, #28]
 8004618:	9005      	str	r0, [sp, #20]
 800461a:	9204      	str	r2, [sp, #16]
 800461c:	7e0a      	ldrb	r2, [r1, #24]
 800461e:	000c      	movs	r4, r1
 8004620:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004622:	2a78      	cmp	r2, #120	; 0x78
 8004624:	d807      	bhi.n	8004636 <_printf_i+0x2a>
 8004626:	2a62      	cmp	r2, #98	; 0x62
 8004628:	d809      	bhi.n	800463e <_printf_i+0x32>
 800462a:	2a00      	cmp	r2, #0
 800462c:	d100      	bne.n	8004630 <_printf_i+0x24>
 800462e:	e0c1      	b.n	80047b4 <_printf_i+0x1a8>
 8004630:	2a58      	cmp	r2, #88	; 0x58
 8004632:	d100      	bne.n	8004636 <_printf_i+0x2a>
 8004634:	e08c      	b.n	8004750 <_printf_i+0x144>
 8004636:	0026      	movs	r6, r4
 8004638:	3642      	adds	r6, #66	; 0x42
 800463a:	7032      	strb	r2, [r6, #0]
 800463c:	e022      	b.n	8004684 <_printf_i+0x78>
 800463e:	0010      	movs	r0, r2
 8004640:	3863      	subs	r0, #99	; 0x63
 8004642:	2815      	cmp	r0, #21
 8004644:	d8f7      	bhi.n	8004636 <_printf_i+0x2a>
 8004646:	f7fb fd6d 	bl	8000124 <__gnu_thumb1_case_shi>
 800464a:	0016      	.short	0x0016
 800464c:	fff6001f 	.word	0xfff6001f
 8004650:	fff6fff6 	.word	0xfff6fff6
 8004654:	001ffff6 	.word	0x001ffff6
 8004658:	fff6fff6 	.word	0xfff6fff6
 800465c:	fff6fff6 	.word	0xfff6fff6
 8004660:	003600a8 	.word	0x003600a8
 8004664:	fff6009a 	.word	0xfff6009a
 8004668:	00b9fff6 	.word	0x00b9fff6
 800466c:	0036fff6 	.word	0x0036fff6
 8004670:	fff6fff6 	.word	0xfff6fff6
 8004674:	009e      	.short	0x009e
 8004676:	0026      	movs	r6, r4
 8004678:	681a      	ldr	r2, [r3, #0]
 800467a:	3642      	adds	r6, #66	; 0x42
 800467c:	1d11      	adds	r1, r2, #4
 800467e:	6019      	str	r1, [r3, #0]
 8004680:	6813      	ldr	r3, [r2, #0]
 8004682:	7033      	strb	r3, [r6, #0]
 8004684:	2301      	movs	r3, #1
 8004686:	e0a7      	b.n	80047d8 <_printf_i+0x1cc>
 8004688:	6808      	ldr	r0, [r1, #0]
 800468a:	6819      	ldr	r1, [r3, #0]
 800468c:	1d0a      	adds	r2, r1, #4
 800468e:	0605      	lsls	r5, r0, #24
 8004690:	d50b      	bpl.n	80046aa <_printf_i+0x9e>
 8004692:	680d      	ldr	r5, [r1, #0]
 8004694:	601a      	str	r2, [r3, #0]
 8004696:	2d00      	cmp	r5, #0
 8004698:	da03      	bge.n	80046a2 <_printf_i+0x96>
 800469a:	232d      	movs	r3, #45	; 0x2d
 800469c:	9a04      	ldr	r2, [sp, #16]
 800469e:	426d      	negs	r5, r5
 80046a0:	7013      	strb	r3, [r2, #0]
 80046a2:	4b61      	ldr	r3, [pc, #388]	; (8004828 <_printf_i+0x21c>)
 80046a4:	270a      	movs	r7, #10
 80046a6:	9303      	str	r3, [sp, #12]
 80046a8:	e01b      	b.n	80046e2 <_printf_i+0xd6>
 80046aa:	680d      	ldr	r5, [r1, #0]
 80046ac:	601a      	str	r2, [r3, #0]
 80046ae:	0641      	lsls	r1, r0, #25
 80046b0:	d5f1      	bpl.n	8004696 <_printf_i+0x8a>
 80046b2:	b22d      	sxth	r5, r5
 80046b4:	e7ef      	b.n	8004696 <_printf_i+0x8a>
 80046b6:	680d      	ldr	r5, [r1, #0]
 80046b8:	6819      	ldr	r1, [r3, #0]
 80046ba:	1d08      	adds	r0, r1, #4
 80046bc:	6018      	str	r0, [r3, #0]
 80046be:	062e      	lsls	r6, r5, #24
 80046c0:	d501      	bpl.n	80046c6 <_printf_i+0xba>
 80046c2:	680d      	ldr	r5, [r1, #0]
 80046c4:	e003      	b.n	80046ce <_printf_i+0xc2>
 80046c6:	066d      	lsls	r5, r5, #25
 80046c8:	d5fb      	bpl.n	80046c2 <_printf_i+0xb6>
 80046ca:	680d      	ldr	r5, [r1, #0]
 80046cc:	b2ad      	uxth	r5, r5
 80046ce:	4b56      	ldr	r3, [pc, #344]	; (8004828 <_printf_i+0x21c>)
 80046d0:	2708      	movs	r7, #8
 80046d2:	9303      	str	r3, [sp, #12]
 80046d4:	2a6f      	cmp	r2, #111	; 0x6f
 80046d6:	d000      	beq.n	80046da <_printf_i+0xce>
 80046d8:	3702      	adds	r7, #2
 80046da:	0023      	movs	r3, r4
 80046dc:	2200      	movs	r2, #0
 80046de:	3343      	adds	r3, #67	; 0x43
 80046e0:	701a      	strb	r2, [r3, #0]
 80046e2:	6863      	ldr	r3, [r4, #4]
 80046e4:	60a3      	str	r3, [r4, #8]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	db03      	blt.n	80046f2 <_printf_i+0xe6>
 80046ea:	2204      	movs	r2, #4
 80046ec:	6821      	ldr	r1, [r4, #0]
 80046ee:	4391      	bics	r1, r2
 80046f0:	6021      	str	r1, [r4, #0]
 80046f2:	2d00      	cmp	r5, #0
 80046f4:	d102      	bne.n	80046fc <_printf_i+0xf0>
 80046f6:	9e04      	ldr	r6, [sp, #16]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d00c      	beq.n	8004716 <_printf_i+0x10a>
 80046fc:	9e04      	ldr	r6, [sp, #16]
 80046fe:	0028      	movs	r0, r5
 8004700:	0039      	movs	r1, r7
 8004702:	f7fb fd9f 	bl	8000244 <__aeabi_uidivmod>
 8004706:	9b03      	ldr	r3, [sp, #12]
 8004708:	3e01      	subs	r6, #1
 800470a:	5c5b      	ldrb	r3, [r3, r1]
 800470c:	7033      	strb	r3, [r6, #0]
 800470e:	002b      	movs	r3, r5
 8004710:	0005      	movs	r5, r0
 8004712:	429f      	cmp	r7, r3
 8004714:	d9f3      	bls.n	80046fe <_printf_i+0xf2>
 8004716:	2f08      	cmp	r7, #8
 8004718:	d109      	bne.n	800472e <_printf_i+0x122>
 800471a:	6823      	ldr	r3, [r4, #0]
 800471c:	07db      	lsls	r3, r3, #31
 800471e:	d506      	bpl.n	800472e <_printf_i+0x122>
 8004720:	6863      	ldr	r3, [r4, #4]
 8004722:	6922      	ldr	r2, [r4, #16]
 8004724:	4293      	cmp	r3, r2
 8004726:	dc02      	bgt.n	800472e <_printf_i+0x122>
 8004728:	2330      	movs	r3, #48	; 0x30
 800472a:	3e01      	subs	r6, #1
 800472c:	7033      	strb	r3, [r6, #0]
 800472e:	9b04      	ldr	r3, [sp, #16]
 8004730:	1b9b      	subs	r3, r3, r6
 8004732:	6123      	str	r3, [r4, #16]
 8004734:	9b07      	ldr	r3, [sp, #28]
 8004736:	0021      	movs	r1, r4
 8004738:	9300      	str	r3, [sp, #0]
 800473a:	9805      	ldr	r0, [sp, #20]
 800473c:	9b06      	ldr	r3, [sp, #24]
 800473e:	aa09      	add	r2, sp, #36	; 0x24
 8004740:	f7ff fef4 	bl	800452c <_printf_common>
 8004744:	1c43      	adds	r3, r0, #1
 8004746:	d14c      	bne.n	80047e2 <_printf_i+0x1d6>
 8004748:	2001      	movs	r0, #1
 800474a:	4240      	negs	r0, r0
 800474c:	b00b      	add	sp, #44	; 0x2c
 800474e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004750:	3145      	adds	r1, #69	; 0x45
 8004752:	700a      	strb	r2, [r1, #0]
 8004754:	4a34      	ldr	r2, [pc, #208]	; (8004828 <_printf_i+0x21c>)
 8004756:	9203      	str	r2, [sp, #12]
 8004758:	681a      	ldr	r2, [r3, #0]
 800475a:	6821      	ldr	r1, [r4, #0]
 800475c:	ca20      	ldmia	r2!, {r5}
 800475e:	601a      	str	r2, [r3, #0]
 8004760:	0608      	lsls	r0, r1, #24
 8004762:	d516      	bpl.n	8004792 <_printf_i+0x186>
 8004764:	07cb      	lsls	r3, r1, #31
 8004766:	d502      	bpl.n	800476e <_printf_i+0x162>
 8004768:	2320      	movs	r3, #32
 800476a:	4319      	orrs	r1, r3
 800476c:	6021      	str	r1, [r4, #0]
 800476e:	2710      	movs	r7, #16
 8004770:	2d00      	cmp	r5, #0
 8004772:	d1b2      	bne.n	80046da <_printf_i+0xce>
 8004774:	2320      	movs	r3, #32
 8004776:	6822      	ldr	r2, [r4, #0]
 8004778:	439a      	bics	r2, r3
 800477a:	6022      	str	r2, [r4, #0]
 800477c:	e7ad      	b.n	80046da <_printf_i+0xce>
 800477e:	2220      	movs	r2, #32
 8004780:	6809      	ldr	r1, [r1, #0]
 8004782:	430a      	orrs	r2, r1
 8004784:	6022      	str	r2, [r4, #0]
 8004786:	0022      	movs	r2, r4
 8004788:	2178      	movs	r1, #120	; 0x78
 800478a:	3245      	adds	r2, #69	; 0x45
 800478c:	7011      	strb	r1, [r2, #0]
 800478e:	4a27      	ldr	r2, [pc, #156]	; (800482c <_printf_i+0x220>)
 8004790:	e7e1      	b.n	8004756 <_printf_i+0x14a>
 8004792:	0648      	lsls	r0, r1, #25
 8004794:	d5e6      	bpl.n	8004764 <_printf_i+0x158>
 8004796:	b2ad      	uxth	r5, r5
 8004798:	e7e4      	b.n	8004764 <_printf_i+0x158>
 800479a:	681a      	ldr	r2, [r3, #0]
 800479c:	680d      	ldr	r5, [r1, #0]
 800479e:	1d10      	adds	r0, r2, #4
 80047a0:	6949      	ldr	r1, [r1, #20]
 80047a2:	6018      	str	r0, [r3, #0]
 80047a4:	6813      	ldr	r3, [r2, #0]
 80047a6:	062e      	lsls	r6, r5, #24
 80047a8:	d501      	bpl.n	80047ae <_printf_i+0x1a2>
 80047aa:	6019      	str	r1, [r3, #0]
 80047ac:	e002      	b.n	80047b4 <_printf_i+0x1a8>
 80047ae:	066d      	lsls	r5, r5, #25
 80047b0:	d5fb      	bpl.n	80047aa <_printf_i+0x19e>
 80047b2:	8019      	strh	r1, [r3, #0]
 80047b4:	2300      	movs	r3, #0
 80047b6:	9e04      	ldr	r6, [sp, #16]
 80047b8:	6123      	str	r3, [r4, #16]
 80047ba:	e7bb      	b.n	8004734 <_printf_i+0x128>
 80047bc:	681a      	ldr	r2, [r3, #0]
 80047be:	1d11      	adds	r1, r2, #4
 80047c0:	6019      	str	r1, [r3, #0]
 80047c2:	6816      	ldr	r6, [r2, #0]
 80047c4:	2100      	movs	r1, #0
 80047c6:	0030      	movs	r0, r6
 80047c8:	6862      	ldr	r2, [r4, #4]
 80047ca:	f000 fb2f 	bl	8004e2c <memchr>
 80047ce:	2800      	cmp	r0, #0
 80047d0:	d001      	beq.n	80047d6 <_printf_i+0x1ca>
 80047d2:	1b80      	subs	r0, r0, r6
 80047d4:	6060      	str	r0, [r4, #4]
 80047d6:	6863      	ldr	r3, [r4, #4]
 80047d8:	6123      	str	r3, [r4, #16]
 80047da:	2300      	movs	r3, #0
 80047dc:	9a04      	ldr	r2, [sp, #16]
 80047de:	7013      	strb	r3, [r2, #0]
 80047e0:	e7a8      	b.n	8004734 <_printf_i+0x128>
 80047e2:	6923      	ldr	r3, [r4, #16]
 80047e4:	0032      	movs	r2, r6
 80047e6:	9906      	ldr	r1, [sp, #24]
 80047e8:	9805      	ldr	r0, [sp, #20]
 80047ea:	9d07      	ldr	r5, [sp, #28]
 80047ec:	47a8      	blx	r5
 80047ee:	1c43      	adds	r3, r0, #1
 80047f0:	d0aa      	beq.n	8004748 <_printf_i+0x13c>
 80047f2:	6823      	ldr	r3, [r4, #0]
 80047f4:	079b      	lsls	r3, r3, #30
 80047f6:	d415      	bmi.n	8004824 <_printf_i+0x218>
 80047f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80047fa:	68e0      	ldr	r0, [r4, #12]
 80047fc:	4298      	cmp	r0, r3
 80047fe:	daa5      	bge.n	800474c <_printf_i+0x140>
 8004800:	0018      	movs	r0, r3
 8004802:	e7a3      	b.n	800474c <_printf_i+0x140>
 8004804:	0022      	movs	r2, r4
 8004806:	2301      	movs	r3, #1
 8004808:	9906      	ldr	r1, [sp, #24]
 800480a:	9805      	ldr	r0, [sp, #20]
 800480c:	9e07      	ldr	r6, [sp, #28]
 800480e:	3219      	adds	r2, #25
 8004810:	47b0      	blx	r6
 8004812:	1c43      	adds	r3, r0, #1
 8004814:	d098      	beq.n	8004748 <_printf_i+0x13c>
 8004816:	3501      	adds	r5, #1
 8004818:	68e3      	ldr	r3, [r4, #12]
 800481a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800481c:	1a9b      	subs	r3, r3, r2
 800481e:	42ab      	cmp	r3, r5
 8004820:	dcf0      	bgt.n	8004804 <_printf_i+0x1f8>
 8004822:	e7e9      	b.n	80047f8 <_printf_i+0x1ec>
 8004824:	2500      	movs	r5, #0
 8004826:	e7f7      	b.n	8004818 <_printf_i+0x20c>
 8004828:	0800525d 	.word	0x0800525d
 800482c:	0800526e 	.word	0x0800526e

08004830 <_scanf_chars>:
 8004830:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004832:	0015      	movs	r5, r2
 8004834:	688a      	ldr	r2, [r1, #8]
 8004836:	000c      	movs	r4, r1
 8004838:	9001      	str	r0, [sp, #4]
 800483a:	2a00      	cmp	r2, #0
 800483c:	d105      	bne.n	800484a <_scanf_chars+0x1a>
 800483e:	6989      	ldr	r1, [r1, #24]
 8004840:	3201      	adds	r2, #1
 8004842:	2900      	cmp	r1, #0
 8004844:	d000      	beq.n	8004848 <_scanf_chars+0x18>
 8004846:	3a02      	subs	r2, #2
 8004848:	60a2      	str	r2, [r4, #8]
 800484a:	6822      	ldr	r2, [r4, #0]
 800484c:	06d2      	lsls	r2, r2, #27
 800484e:	d403      	bmi.n	8004858 <_scanf_chars+0x28>
 8004850:	681a      	ldr	r2, [r3, #0]
 8004852:	1d11      	adds	r1, r2, #4
 8004854:	6019      	str	r1, [r3, #0]
 8004856:	6817      	ldr	r7, [r2, #0]
 8004858:	2600      	movs	r6, #0
 800485a:	69a0      	ldr	r0, [r4, #24]
 800485c:	2800      	cmp	r0, #0
 800485e:	d013      	beq.n	8004888 <_scanf_chars+0x58>
 8004860:	2801      	cmp	r0, #1
 8004862:	d108      	bne.n	8004876 <_scanf_chars+0x46>
 8004864:	682b      	ldr	r3, [r5, #0]
 8004866:	6962      	ldr	r2, [r4, #20]
 8004868:	781b      	ldrb	r3, [r3, #0]
 800486a:	5cd3      	ldrb	r3, [r2, r3]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d10b      	bne.n	8004888 <_scanf_chars+0x58>
 8004870:	2e00      	cmp	r6, #0
 8004872:	d038      	beq.n	80048e6 <_scanf_chars+0xb6>
 8004874:	e026      	b.n	80048c4 <_scanf_chars+0x94>
 8004876:	2802      	cmp	r0, #2
 8004878:	d124      	bne.n	80048c4 <_scanf_chars+0x94>
 800487a:	682b      	ldr	r3, [r5, #0]
 800487c:	4a1a      	ldr	r2, [pc, #104]	; (80048e8 <_scanf_chars+0xb8>)
 800487e:	781b      	ldrb	r3, [r3, #0]
 8004880:	5cd3      	ldrb	r3, [r2, r3]
 8004882:	2208      	movs	r2, #8
 8004884:	4213      	tst	r3, r2
 8004886:	d11d      	bne.n	80048c4 <_scanf_chars+0x94>
 8004888:	2210      	movs	r2, #16
 800488a:	6823      	ldr	r3, [r4, #0]
 800488c:	3601      	adds	r6, #1
 800488e:	4213      	tst	r3, r2
 8004890:	d103      	bne.n	800489a <_scanf_chars+0x6a>
 8004892:	682b      	ldr	r3, [r5, #0]
 8004894:	781b      	ldrb	r3, [r3, #0]
 8004896:	703b      	strb	r3, [r7, #0]
 8004898:	3701      	adds	r7, #1
 800489a:	682a      	ldr	r2, [r5, #0]
 800489c:	686b      	ldr	r3, [r5, #4]
 800489e:	3201      	adds	r2, #1
 80048a0:	602a      	str	r2, [r5, #0]
 80048a2:	68a2      	ldr	r2, [r4, #8]
 80048a4:	3b01      	subs	r3, #1
 80048a6:	3a01      	subs	r2, #1
 80048a8:	606b      	str	r3, [r5, #4]
 80048aa:	60a2      	str	r2, [r4, #8]
 80048ac:	2a00      	cmp	r2, #0
 80048ae:	d009      	beq.n	80048c4 <_scanf_chars+0x94>
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	dcd2      	bgt.n	800485a <_scanf_chars+0x2a>
 80048b4:	23c0      	movs	r3, #192	; 0xc0
 80048b6:	005b      	lsls	r3, r3, #1
 80048b8:	0029      	movs	r1, r5
 80048ba:	58e3      	ldr	r3, [r4, r3]
 80048bc:	9801      	ldr	r0, [sp, #4]
 80048be:	4798      	blx	r3
 80048c0:	2800      	cmp	r0, #0
 80048c2:	d0ca      	beq.n	800485a <_scanf_chars+0x2a>
 80048c4:	6822      	ldr	r2, [r4, #0]
 80048c6:	2310      	movs	r3, #16
 80048c8:	0011      	movs	r1, r2
 80048ca:	4019      	ands	r1, r3
 80048cc:	421a      	tst	r2, r3
 80048ce:	d106      	bne.n	80048de <_scanf_chars+0xae>
 80048d0:	68e3      	ldr	r3, [r4, #12]
 80048d2:	3301      	adds	r3, #1
 80048d4:	60e3      	str	r3, [r4, #12]
 80048d6:	69a3      	ldr	r3, [r4, #24]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d000      	beq.n	80048de <_scanf_chars+0xae>
 80048dc:	7039      	strb	r1, [r7, #0]
 80048de:	2000      	movs	r0, #0
 80048e0:	6923      	ldr	r3, [r4, #16]
 80048e2:	199e      	adds	r6, r3, r6
 80048e4:	6126      	str	r6, [r4, #16]
 80048e6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80048e8:	0800529b 	.word	0x0800529b

080048ec <_scanf_i>:
 80048ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80048ee:	000c      	movs	r4, r1
 80048f0:	b08d      	sub	sp, #52	; 0x34
 80048f2:	9302      	str	r3, [sp, #8]
 80048f4:	4b79      	ldr	r3, [pc, #484]	; (8004adc <_scanf_i+0x1f0>)
 80048f6:	0016      	movs	r6, r2
 80048f8:	9005      	str	r0, [sp, #20]
 80048fa:	aa09      	add	r2, sp, #36	; 0x24
 80048fc:	cb23      	ldmia	r3!, {r0, r1, r5}
 80048fe:	c223      	stmia	r2!, {r0, r1, r5}
 8004900:	4b77      	ldr	r3, [pc, #476]	; (8004ae0 <_scanf_i+0x1f4>)
 8004902:	9306      	str	r3, [sp, #24]
 8004904:	69a3      	ldr	r3, [r4, #24]
 8004906:	2b03      	cmp	r3, #3
 8004908:	d001      	beq.n	800490e <_scanf_i+0x22>
 800490a:	4b76      	ldr	r3, [pc, #472]	; (8004ae4 <_scanf_i+0x1f8>)
 800490c:	9306      	str	r3, [sp, #24]
 800490e:	22ae      	movs	r2, #174	; 0xae
 8004910:	2000      	movs	r0, #0
 8004912:	68a3      	ldr	r3, [r4, #8]
 8004914:	0052      	lsls	r2, r2, #1
 8004916:	1e59      	subs	r1, r3, #1
 8004918:	9004      	str	r0, [sp, #16]
 800491a:	4291      	cmp	r1, r2
 800491c:	d905      	bls.n	800492a <_scanf_i+0x3e>
 800491e:	3b5e      	subs	r3, #94	; 0x5e
 8004920:	3bff      	subs	r3, #255	; 0xff
 8004922:	9304      	str	r3, [sp, #16]
 8004924:	235e      	movs	r3, #94	; 0x5e
 8004926:	33ff      	adds	r3, #255	; 0xff
 8004928:	60a3      	str	r3, [r4, #8]
 800492a:	0023      	movs	r3, r4
 800492c:	331c      	adds	r3, #28
 800492e:	9301      	str	r3, [sp, #4]
 8004930:	23d0      	movs	r3, #208	; 0xd0
 8004932:	2700      	movs	r7, #0
 8004934:	6822      	ldr	r2, [r4, #0]
 8004936:	011b      	lsls	r3, r3, #4
 8004938:	4313      	orrs	r3, r2
 800493a:	6023      	str	r3, [r4, #0]
 800493c:	9b01      	ldr	r3, [sp, #4]
 800493e:	9303      	str	r3, [sp, #12]
 8004940:	6833      	ldr	r3, [r6, #0]
 8004942:	a809      	add	r0, sp, #36	; 0x24
 8004944:	7819      	ldrb	r1, [r3, #0]
 8004946:	00bb      	lsls	r3, r7, #2
 8004948:	2202      	movs	r2, #2
 800494a:	5818      	ldr	r0, [r3, r0]
 800494c:	f000 fa6e 	bl	8004e2c <memchr>
 8004950:	2800      	cmp	r0, #0
 8004952:	d02b      	beq.n	80049ac <_scanf_i+0xc0>
 8004954:	2f01      	cmp	r7, #1
 8004956:	d162      	bne.n	8004a1e <_scanf_i+0x132>
 8004958:	6863      	ldr	r3, [r4, #4]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d106      	bne.n	800496c <_scanf_i+0x80>
 800495e:	3308      	adds	r3, #8
 8004960:	6822      	ldr	r2, [r4, #0]
 8004962:	6063      	str	r3, [r4, #4]
 8004964:	33f9      	adds	r3, #249	; 0xf9
 8004966:	33ff      	adds	r3, #255	; 0xff
 8004968:	4313      	orrs	r3, r2
 800496a:	6023      	str	r3, [r4, #0]
 800496c:	4b5e      	ldr	r3, [pc, #376]	; (8004ae8 <_scanf_i+0x1fc>)
 800496e:	6822      	ldr	r2, [r4, #0]
 8004970:	4013      	ands	r3, r2
 8004972:	6023      	str	r3, [r4, #0]
 8004974:	68a3      	ldr	r3, [r4, #8]
 8004976:	1e5a      	subs	r2, r3, #1
 8004978:	60a2      	str	r2, [r4, #8]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d016      	beq.n	80049ac <_scanf_i+0xc0>
 800497e:	6833      	ldr	r3, [r6, #0]
 8004980:	1c5a      	adds	r2, r3, #1
 8004982:	6032      	str	r2, [r6, #0]
 8004984:	781b      	ldrb	r3, [r3, #0]
 8004986:	9a03      	ldr	r2, [sp, #12]
 8004988:	7013      	strb	r3, [r2, #0]
 800498a:	6873      	ldr	r3, [r6, #4]
 800498c:	1c55      	adds	r5, r2, #1
 800498e:	3b01      	subs	r3, #1
 8004990:	6073      	str	r3, [r6, #4]
 8004992:	9503      	str	r5, [sp, #12]
 8004994:	2b00      	cmp	r3, #0
 8004996:	dc09      	bgt.n	80049ac <_scanf_i+0xc0>
 8004998:	23c0      	movs	r3, #192	; 0xc0
 800499a:	005b      	lsls	r3, r3, #1
 800499c:	58e3      	ldr	r3, [r4, r3]
 800499e:	0031      	movs	r1, r6
 80049a0:	9805      	ldr	r0, [sp, #20]
 80049a2:	9307      	str	r3, [sp, #28]
 80049a4:	4798      	blx	r3
 80049a6:	2800      	cmp	r0, #0
 80049a8:	d000      	beq.n	80049ac <_scanf_i+0xc0>
 80049aa:	e081      	b.n	8004ab0 <_scanf_i+0x1c4>
 80049ac:	3701      	adds	r7, #1
 80049ae:	2f03      	cmp	r7, #3
 80049b0:	d1c6      	bne.n	8004940 <_scanf_i+0x54>
 80049b2:	6863      	ldr	r3, [r4, #4]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d101      	bne.n	80049bc <_scanf_i+0xd0>
 80049b8:	330a      	adds	r3, #10
 80049ba:	6063      	str	r3, [r4, #4]
 80049bc:	2110      	movs	r1, #16
 80049be:	2700      	movs	r7, #0
 80049c0:	6863      	ldr	r3, [r4, #4]
 80049c2:	6960      	ldr	r0, [r4, #20]
 80049c4:	1ac9      	subs	r1, r1, r3
 80049c6:	4b49      	ldr	r3, [pc, #292]	; (8004aec <_scanf_i+0x200>)
 80049c8:	18c9      	adds	r1, r1, r3
 80049ca:	f000 f893 	bl	8004af4 <__sccl>
 80049ce:	9d03      	ldr	r5, [sp, #12]
 80049d0:	68a3      	ldr	r3, [r4, #8]
 80049d2:	6822      	ldr	r2, [r4, #0]
 80049d4:	9303      	str	r3, [sp, #12]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d041      	beq.n	8004a5e <_scanf_i+0x172>
 80049da:	6831      	ldr	r1, [r6, #0]
 80049dc:	6963      	ldr	r3, [r4, #20]
 80049de:	7808      	ldrb	r0, [r1, #0]
 80049e0:	5c1b      	ldrb	r3, [r3, r0]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d03b      	beq.n	8004a5e <_scanf_i+0x172>
 80049e6:	2830      	cmp	r0, #48	; 0x30
 80049e8:	d129      	bne.n	8004a3e <_scanf_i+0x152>
 80049ea:	2380      	movs	r3, #128	; 0x80
 80049ec:	011b      	lsls	r3, r3, #4
 80049ee:	421a      	tst	r2, r3
 80049f0:	d025      	beq.n	8004a3e <_scanf_i+0x152>
 80049f2:	9b04      	ldr	r3, [sp, #16]
 80049f4:	3701      	adds	r7, #1
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d005      	beq.n	8004a06 <_scanf_i+0x11a>
 80049fa:	001a      	movs	r2, r3
 80049fc:	9b03      	ldr	r3, [sp, #12]
 80049fe:	3a01      	subs	r2, #1
 8004a00:	3301      	adds	r3, #1
 8004a02:	9204      	str	r2, [sp, #16]
 8004a04:	60a3      	str	r3, [r4, #8]
 8004a06:	6873      	ldr	r3, [r6, #4]
 8004a08:	3b01      	subs	r3, #1
 8004a0a:	6073      	str	r3, [r6, #4]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	dd1d      	ble.n	8004a4c <_scanf_i+0x160>
 8004a10:	6833      	ldr	r3, [r6, #0]
 8004a12:	3301      	adds	r3, #1
 8004a14:	6033      	str	r3, [r6, #0]
 8004a16:	68a3      	ldr	r3, [r4, #8]
 8004a18:	3b01      	subs	r3, #1
 8004a1a:	60a3      	str	r3, [r4, #8]
 8004a1c:	e7d8      	b.n	80049d0 <_scanf_i+0xe4>
 8004a1e:	2f02      	cmp	r7, #2
 8004a20:	d1a8      	bne.n	8004974 <_scanf_i+0x88>
 8004a22:	21c0      	movs	r1, #192	; 0xc0
 8004a24:	2380      	movs	r3, #128	; 0x80
 8004a26:	6822      	ldr	r2, [r4, #0]
 8004a28:	00c9      	lsls	r1, r1, #3
 8004a2a:	4011      	ands	r1, r2
 8004a2c:	009b      	lsls	r3, r3, #2
 8004a2e:	4299      	cmp	r1, r3
 8004a30:	d1bf      	bne.n	80049b2 <_scanf_i+0xc6>
 8004a32:	3bf1      	subs	r3, #241	; 0xf1
 8004a34:	3bff      	subs	r3, #255	; 0xff
 8004a36:	6063      	str	r3, [r4, #4]
 8004a38:	33f0      	adds	r3, #240	; 0xf0
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	e799      	b.n	8004972 <_scanf_i+0x86>
 8004a3e:	4b2c      	ldr	r3, [pc, #176]	; (8004af0 <_scanf_i+0x204>)
 8004a40:	4013      	ands	r3, r2
 8004a42:	6023      	str	r3, [r4, #0]
 8004a44:	780b      	ldrb	r3, [r1, #0]
 8004a46:	702b      	strb	r3, [r5, #0]
 8004a48:	3501      	adds	r5, #1
 8004a4a:	e7dc      	b.n	8004a06 <_scanf_i+0x11a>
 8004a4c:	23c0      	movs	r3, #192	; 0xc0
 8004a4e:	005b      	lsls	r3, r3, #1
 8004a50:	58e3      	ldr	r3, [r4, r3]
 8004a52:	0031      	movs	r1, r6
 8004a54:	9805      	ldr	r0, [sp, #20]
 8004a56:	9303      	str	r3, [sp, #12]
 8004a58:	4798      	blx	r3
 8004a5a:	2800      	cmp	r0, #0
 8004a5c:	d0db      	beq.n	8004a16 <_scanf_i+0x12a>
 8004a5e:	6823      	ldr	r3, [r4, #0]
 8004a60:	05db      	lsls	r3, r3, #23
 8004a62:	d50e      	bpl.n	8004a82 <_scanf_i+0x196>
 8004a64:	9b01      	ldr	r3, [sp, #4]
 8004a66:	429d      	cmp	r5, r3
 8004a68:	d907      	bls.n	8004a7a <_scanf_i+0x18e>
 8004a6a:	23be      	movs	r3, #190	; 0xbe
 8004a6c:	3d01      	subs	r5, #1
 8004a6e:	005b      	lsls	r3, r3, #1
 8004a70:	0032      	movs	r2, r6
 8004a72:	7829      	ldrb	r1, [r5, #0]
 8004a74:	58e3      	ldr	r3, [r4, r3]
 8004a76:	9805      	ldr	r0, [sp, #20]
 8004a78:	4798      	blx	r3
 8004a7a:	9b01      	ldr	r3, [sp, #4]
 8004a7c:	2001      	movs	r0, #1
 8004a7e:	429d      	cmp	r5, r3
 8004a80:	d029      	beq.n	8004ad6 <_scanf_i+0x1ea>
 8004a82:	6821      	ldr	r1, [r4, #0]
 8004a84:	2310      	movs	r3, #16
 8004a86:	000a      	movs	r2, r1
 8004a88:	401a      	ands	r2, r3
 8004a8a:	4219      	tst	r1, r3
 8004a8c:	d11c      	bne.n	8004ac8 <_scanf_i+0x1dc>
 8004a8e:	702a      	strb	r2, [r5, #0]
 8004a90:	6863      	ldr	r3, [r4, #4]
 8004a92:	9901      	ldr	r1, [sp, #4]
 8004a94:	9805      	ldr	r0, [sp, #20]
 8004a96:	9e06      	ldr	r6, [sp, #24]
 8004a98:	47b0      	blx	r6
 8004a9a:	9b02      	ldr	r3, [sp, #8]
 8004a9c:	6821      	ldr	r1, [r4, #0]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	068a      	lsls	r2, r1, #26
 8004aa2:	d507      	bpl.n	8004ab4 <_scanf_i+0x1c8>
 8004aa4:	1d1a      	adds	r2, r3, #4
 8004aa6:	9902      	ldr	r1, [sp, #8]
 8004aa8:	600a      	str	r2, [r1, #0]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	6018      	str	r0, [r3, #0]
 8004aae:	e008      	b.n	8004ac2 <_scanf_i+0x1d6>
 8004ab0:	2700      	movs	r7, #0
 8004ab2:	e7d4      	b.n	8004a5e <_scanf_i+0x172>
 8004ab4:	1d1a      	adds	r2, r3, #4
 8004ab6:	07ce      	lsls	r6, r1, #31
 8004ab8:	d5f5      	bpl.n	8004aa6 <_scanf_i+0x1ba>
 8004aba:	9902      	ldr	r1, [sp, #8]
 8004abc:	600a      	str	r2, [r1, #0]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	8018      	strh	r0, [r3, #0]
 8004ac2:	68e3      	ldr	r3, [r4, #12]
 8004ac4:	3301      	adds	r3, #1
 8004ac6:	60e3      	str	r3, [r4, #12]
 8004ac8:	2000      	movs	r0, #0
 8004aca:	9b01      	ldr	r3, [sp, #4]
 8004acc:	1aed      	subs	r5, r5, r3
 8004ace:	6923      	ldr	r3, [r4, #16]
 8004ad0:	19ef      	adds	r7, r5, r7
 8004ad2:	19df      	adds	r7, r3, r7
 8004ad4:	6127      	str	r7, [r4, #16]
 8004ad6:	b00d      	add	sp, #52	; 0x34
 8004ad8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ada:	46c0      	nop			; (mov r8, r8)
 8004adc:	08005138 	.word	0x08005138
 8004ae0:	08004c89 	.word	0x08004c89
 8004ae4:	08004da5 	.word	0x08004da5
 8004ae8:	fffffaff 	.word	0xfffffaff
 8004aec:	08005288 	.word	0x08005288
 8004af0:	fffff6ff 	.word	0xfffff6ff

08004af4 <__sccl>:
 8004af4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004af6:	780b      	ldrb	r3, [r1, #0]
 8004af8:	0004      	movs	r4, r0
 8004afa:	2b5e      	cmp	r3, #94	; 0x5e
 8004afc:	d00c      	beq.n	8004b18 <__sccl+0x24>
 8004afe:	1c48      	adds	r0, r1, #1
 8004b00:	2100      	movs	r1, #0
 8004b02:	0022      	movs	r2, r4
 8004b04:	1c65      	adds	r5, r4, #1
 8004b06:	35ff      	adds	r5, #255	; 0xff
 8004b08:	7011      	strb	r1, [r2, #0]
 8004b0a:	3201      	adds	r2, #1
 8004b0c:	42aa      	cmp	r2, r5
 8004b0e:	d1fb      	bne.n	8004b08 <__sccl+0x14>
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d105      	bne.n	8004b20 <__sccl+0x2c>
 8004b14:	3801      	subs	r0, #1
 8004b16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b18:	784b      	ldrb	r3, [r1, #1]
 8004b1a:	1c88      	adds	r0, r1, #2
 8004b1c:	2101      	movs	r1, #1
 8004b1e:	e7f0      	b.n	8004b02 <__sccl+0xe>
 8004b20:	2201      	movs	r2, #1
 8004b22:	262d      	movs	r6, #45	; 0x2d
 8004b24:	4051      	eors	r1, r2
 8004b26:	0002      	movs	r2, r0
 8004b28:	54e1      	strb	r1, [r4, r3]
 8004b2a:	7815      	ldrb	r5, [r2, #0]
 8004b2c:	1c50      	adds	r0, r2, #1
 8004b2e:	2d2d      	cmp	r5, #45	; 0x2d
 8004b30:	d009      	beq.n	8004b46 <__sccl+0x52>
 8004b32:	2d5d      	cmp	r5, #93	; 0x5d
 8004b34:	d0ef      	beq.n	8004b16 <__sccl+0x22>
 8004b36:	2d00      	cmp	r5, #0
 8004b38:	d101      	bne.n	8004b3e <__sccl+0x4a>
 8004b3a:	0010      	movs	r0, r2
 8004b3c:	e7eb      	b.n	8004b16 <__sccl+0x22>
 8004b3e:	002b      	movs	r3, r5
 8004b40:	e7f1      	b.n	8004b26 <__sccl+0x32>
 8004b42:	0033      	movs	r3, r6
 8004b44:	e7ef      	b.n	8004b26 <__sccl+0x32>
 8004b46:	7855      	ldrb	r5, [r2, #1]
 8004b48:	2d5d      	cmp	r5, #93	; 0x5d
 8004b4a:	d0fa      	beq.n	8004b42 <__sccl+0x4e>
 8004b4c:	42ab      	cmp	r3, r5
 8004b4e:	dcf8      	bgt.n	8004b42 <__sccl+0x4e>
 8004b50:	0018      	movs	r0, r3
 8004b52:	3202      	adds	r2, #2
 8004b54:	3001      	adds	r0, #1
 8004b56:	5421      	strb	r1, [r4, r0]
 8004b58:	4285      	cmp	r5, r0
 8004b5a:	dcfb      	bgt.n	8004b54 <__sccl+0x60>
 8004b5c:	2000      	movs	r0, #0
 8004b5e:	1c5f      	adds	r7, r3, #1
 8004b60:	42ab      	cmp	r3, r5
 8004b62:	da01      	bge.n	8004b68 <__sccl+0x74>
 8004b64:	1ae8      	subs	r0, r5, r3
 8004b66:	3801      	subs	r0, #1
 8004b68:	183b      	adds	r3, r7, r0
 8004b6a:	e7de      	b.n	8004b2a <__sccl+0x36>

08004b6c <_strtol_l.constprop.0>:
 8004b6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b6e:	b087      	sub	sp, #28
 8004b70:	001e      	movs	r6, r3
 8004b72:	9005      	str	r0, [sp, #20]
 8004b74:	9101      	str	r1, [sp, #4]
 8004b76:	9202      	str	r2, [sp, #8]
 8004b78:	2b01      	cmp	r3, #1
 8004b7a:	d045      	beq.n	8004c08 <_strtol_l.constprop.0+0x9c>
 8004b7c:	000b      	movs	r3, r1
 8004b7e:	2e24      	cmp	r6, #36	; 0x24
 8004b80:	d842      	bhi.n	8004c08 <_strtol_l.constprop.0+0x9c>
 8004b82:	4a3f      	ldr	r2, [pc, #252]	; (8004c80 <_strtol_l.constprop.0+0x114>)
 8004b84:	2108      	movs	r1, #8
 8004b86:	4694      	mov	ip, r2
 8004b88:	001a      	movs	r2, r3
 8004b8a:	4660      	mov	r0, ip
 8004b8c:	7814      	ldrb	r4, [r2, #0]
 8004b8e:	3301      	adds	r3, #1
 8004b90:	5d00      	ldrb	r0, [r0, r4]
 8004b92:	001d      	movs	r5, r3
 8004b94:	0007      	movs	r7, r0
 8004b96:	400f      	ands	r7, r1
 8004b98:	4208      	tst	r0, r1
 8004b9a:	d1f5      	bne.n	8004b88 <_strtol_l.constprop.0+0x1c>
 8004b9c:	2c2d      	cmp	r4, #45	; 0x2d
 8004b9e:	d13a      	bne.n	8004c16 <_strtol_l.constprop.0+0xaa>
 8004ba0:	2701      	movs	r7, #1
 8004ba2:	781c      	ldrb	r4, [r3, #0]
 8004ba4:	1c95      	adds	r5, r2, #2
 8004ba6:	2e00      	cmp	r6, #0
 8004ba8:	d065      	beq.n	8004c76 <_strtol_l.constprop.0+0x10a>
 8004baa:	2e10      	cmp	r6, #16
 8004bac:	d109      	bne.n	8004bc2 <_strtol_l.constprop.0+0x56>
 8004bae:	2c30      	cmp	r4, #48	; 0x30
 8004bb0:	d107      	bne.n	8004bc2 <_strtol_l.constprop.0+0x56>
 8004bb2:	2220      	movs	r2, #32
 8004bb4:	782b      	ldrb	r3, [r5, #0]
 8004bb6:	4393      	bics	r3, r2
 8004bb8:	2b58      	cmp	r3, #88	; 0x58
 8004bba:	d157      	bne.n	8004c6c <_strtol_l.constprop.0+0x100>
 8004bbc:	2610      	movs	r6, #16
 8004bbe:	786c      	ldrb	r4, [r5, #1]
 8004bc0:	3502      	adds	r5, #2
 8004bc2:	4b30      	ldr	r3, [pc, #192]	; (8004c84 <_strtol_l.constprop.0+0x118>)
 8004bc4:	0031      	movs	r1, r6
 8004bc6:	18fb      	adds	r3, r7, r3
 8004bc8:	0018      	movs	r0, r3
 8004bca:	9303      	str	r3, [sp, #12]
 8004bcc:	f7fb fb3a 	bl	8000244 <__aeabi_uidivmod>
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	2201      	movs	r2, #1
 8004bd4:	4684      	mov	ip, r0
 8004bd6:	0018      	movs	r0, r3
 8004bd8:	9104      	str	r1, [sp, #16]
 8004bda:	4252      	negs	r2, r2
 8004bdc:	0021      	movs	r1, r4
 8004bde:	3930      	subs	r1, #48	; 0x30
 8004be0:	2909      	cmp	r1, #9
 8004be2:	d81d      	bhi.n	8004c20 <_strtol_l.constprop.0+0xb4>
 8004be4:	000c      	movs	r4, r1
 8004be6:	42a6      	cmp	r6, r4
 8004be8:	dd28      	ble.n	8004c3c <_strtol_l.constprop.0+0xd0>
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	db24      	blt.n	8004c38 <_strtol_l.constprop.0+0xcc>
 8004bee:	0013      	movs	r3, r2
 8004bf0:	4584      	cmp	ip, r0
 8004bf2:	d306      	bcc.n	8004c02 <_strtol_l.constprop.0+0x96>
 8004bf4:	d102      	bne.n	8004bfc <_strtol_l.constprop.0+0x90>
 8004bf6:	9904      	ldr	r1, [sp, #16]
 8004bf8:	42a1      	cmp	r1, r4
 8004bfa:	db02      	blt.n	8004c02 <_strtol_l.constprop.0+0x96>
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	4370      	muls	r0, r6
 8004c00:	1820      	adds	r0, r4, r0
 8004c02:	782c      	ldrb	r4, [r5, #0]
 8004c04:	3501      	adds	r5, #1
 8004c06:	e7e9      	b.n	8004bdc <_strtol_l.constprop.0+0x70>
 8004c08:	f7ff f8c2 	bl	8003d90 <__errno>
 8004c0c:	2316      	movs	r3, #22
 8004c0e:	6003      	str	r3, [r0, #0]
 8004c10:	2000      	movs	r0, #0
 8004c12:	b007      	add	sp, #28
 8004c14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c16:	2c2b      	cmp	r4, #43	; 0x2b
 8004c18:	d1c5      	bne.n	8004ba6 <_strtol_l.constprop.0+0x3a>
 8004c1a:	781c      	ldrb	r4, [r3, #0]
 8004c1c:	1c95      	adds	r5, r2, #2
 8004c1e:	e7c2      	b.n	8004ba6 <_strtol_l.constprop.0+0x3a>
 8004c20:	0021      	movs	r1, r4
 8004c22:	3941      	subs	r1, #65	; 0x41
 8004c24:	2919      	cmp	r1, #25
 8004c26:	d801      	bhi.n	8004c2c <_strtol_l.constprop.0+0xc0>
 8004c28:	3c37      	subs	r4, #55	; 0x37
 8004c2a:	e7dc      	b.n	8004be6 <_strtol_l.constprop.0+0x7a>
 8004c2c:	0021      	movs	r1, r4
 8004c2e:	3961      	subs	r1, #97	; 0x61
 8004c30:	2919      	cmp	r1, #25
 8004c32:	d803      	bhi.n	8004c3c <_strtol_l.constprop.0+0xd0>
 8004c34:	3c57      	subs	r4, #87	; 0x57
 8004c36:	e7d6      	b.n	8004be6 <_strtol_l.constprop.0+0x7a>
 8004c38:	0013      	movs	r3, r2
 8004c3a:	e7e2      	b.n	8004c02 <_strtol_l.constprop.0+0x96>
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	da09      	bge.n	8004c54 <_strtol_l.constprop.0+0xe8>
 8004c40:	2322      	movs	r3, #34	; 0x22
 8004c42:	9a05      	ldr	r2, [sp, #20]
 8004c44:	9803      	ldr	r0, [sp, #12]
 8004c46:	6013      	str	r3, [r2, #0]
 8004c48:	9b02      	ldr	r3, [sp, #8]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d0e1      	beq.n	8004c12 <_strtol_l.constprop.0+0xa6>
 8004c4e:	1e6b      	subs	r3, r5, #1
 8004c50:	9301      	str	r3, [sp, #4]
 8004c52:	e007      	b.n	8004c64 <_strtol_l.constprop.0+0xf8>
 8004c54:	2f00      	cmp	r7, #0
 8004c56:	d000      	beq.n	8004c5a <_strtol_l.constprop.0+0xee>
 8004c58:	4240      	negs	r0, r0
 8004c5a:	9a02      	ldr	r2, [sp, #8]
 8004c5c:	2a00      	cmp	r2, #0
 8004c5e:	d0d8      	beq.n	8004c12 <_strtol_l.constprop.0+0xa6>
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d1f4      	bne.n	8004c4e <_strtol_l.constprop.0+0xe2>
 8004c64:	9b02      	ldr	r3, [sp, #8]
 8004c66:	9a01      	ldr	r2, [sp, #4]
 8004c68:	601a      	str	r2, [r3, #0]
 8004c6a:	e7d2      	b.n	8004c12 <_strtol_l.constprop.0+0xa6>
 8004c6c:	2430      	movs	r4, #48	; 0x30
 8004c6e:	2e00      	cmp	r6, #0
 8004c70:	d1a7      	bne.n	8004bc2 <_strtol_l.constprop.0+0x56>
 8004c72:	3608      	adds	r6, #8
 8004c74:	e7a5      	b.n	8004bc2 <_strtol_l.constprop.0+0x56>
 8004c76:	2c30      	cmp	r4, #48	; 0x30
 8004c78:	d09b      	beq.n	8004bb2 <_strtol_l.constprop.0+0x46>
 8004c7a:	260a      	movs	r6, #10
 8004c7c:	e7a1      	b.n	8004bc2 <_strtol_l.constprop.0+0x56>
 8004c7e:	46c0      	nop			; (mov r8, r8)
 8004c80:	0800529b 	.word	0x0800529b
 8004c84:	7fffffff 	.word	0x7fffffff

08004c88 <_strtol_r>:
 8004c88:	b510      	push	{r4, lr}
 8004c8a:	f7ff ff6f 	bl	8004b6c <_strtol_l.constprop.0>
 8004c8e:	bd10      	pop	{r4, pc}

08004c90 <_strtoul_l.constprop.0>:
 8004c90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c92:	b087      	sub	sp, #28
 8004c94:	9202      	str	r2, [sp, #8]
 8004c96:	4a42      	ldr	r2, [pc, #264]	; (8004da0 <_strtoul_l.constprop.0+0x110>)
 8004c98:	001e      	movs	r6, r3
 8004c9a:	9101      	str	r1, [sp, #4]
 8004c9c:	000b      	movs	r3, r1
 8004c9e:	4694      	mov	ip, r2
 8004ca0:	2108      	movs	r1, #8
 8004ca2:	9005      	str	r0, [sp, #20]
 8004ca4:	001a      	movs	r2, r3
 8004ca6:	4660      	mov	r0, ip
 8004ca8:	7814      	ldrb	r4, [r2, #0]
 8004caa:	3301      	adds	r3, #1
 8004cac:	5d00      	ldrb	r0, [r0, r4]
 8004cae:	001d      	movs	r5, r3
 8004cb0:	0007      	movs	r7, r0
 8004cb2:	400f      	ands	r7, r1
 8004cb4:	4208      	tst	r0, r1
 8004cb6:	d1f5      	bne.n	8004ca4 <_strtoul_l.constprop.0+0x14>
 8004cb8:	2c2d      	cmp	r4, #45	; 0x2d
 8004cba:	d13a      	bne.n	8004d32 <_strtoul_l.constprop.0+0xa2>
 8004cbc:	2701      	movs	r7, #1
 8004cbe:	781c      	ldrb	r4, [r3, #0]
 8004cc0:	1c95      	adds	r5, r2, #2
 8004cc2:	2e00      	cmp	r6, #0
 8004cc4:	d067      	beq.n	8004d96 <_strtoul_l.constprop.0+0x106>
 8004cc6:	2e10      	cmp	r6, #16
 8004cc8:	d109      	bne.n	8004cde <_strtoul_l.constprop.0+0x4e>
 8004cca:	2c30      	cmp	r4, #48	; 0x30
 8004ccc:	d107      	bne.n	8004cde <_strtoul_l.constprop.0+0x4e>
 8004cce:	2220      	movs	r2, #32
 8004cd0:	782b      	ldrb	r3, [r5, #0]
 8004cd2:	4393      	bics	r3, r2
 8004cd4:	2b58      	cmp	r3, #88	; 0x58
 8004cd6:	d159      	bne.n	8004d8c <_strtoul_l.constprop.0+0xfc>
 8004cd8:	2610      	movs	r6, #16
 8004cda:	786c      	ldrb	r4, [r5, #1]
 8004cdc:	3502      	adds	r5, #2
 8004cde:	2001      	movs	r0, #1
 8004ce0:	0031      	movs	r1, r6
 8004ce2:	4240      	negs	r0, r0
 8004ce4:	f7fb fa28 	bl	8000138 <__udivsi3>
 8004ce8:	9003      	str	r0, [sp, #12]
 8004cea:	2001      	movs	r0, #1
 8004cec:	0031      	movs	r1, r6
 8004cee:	4240      	negs	r0, r0
 8004cf0:	f7fb faa8 	bl	8000244 <__aeabi_uidivmod>
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	9104      	str	r1, [sp, #16]
 8004cf8:	2101      	movs	r1, #1
 8004cfa:	2201      	movs	r2, #1
 8004cfc:	0018      	movs	r0, r3
 8004cfe:	468c      	mov	ip, r1
 8004d00:	4252      	negs	r2, r2
 8004d02:	0021      	movs	r1, r4
 8004d04:	3930      	subs	r1, #48	; 0x30
 8004d06:	2909      	cmp	r1, #9
 8004d08:	d818      	bhi.n	8004d3c <_strtoul_l.constprop.0+0xac>
 8004d0a:	000c      	movs	r4, r1
 8004d0c:	42a6      	cmp	r6, r4
 8004d0e:	dd23      	ble.n	8004d58 <_strtoul_l.constprop.0+0xc8>
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	db1f      	blt.n	8004d54 <_strtoul_l.constprop.0+0xc4>
 8004d14:	9903      	ldr	r1, [sp, #12]
 8004d16:	0013      	movs	r3, r2
 8004d18:	4281      	cmp	r1, r0
 8004d1a:	d307      	bcc.n	8004d2c <_strtoul_l.constprop.0+0x9c>
 8004d1c:	d103      	bne.n	8004d26 <_strtoul_l.constprop.0+0x96>
 8004d1e:	9904      	ldr	r1, [sp, #16]
 8004d20:	0013      	movs	r3, r2
 8004d22:	42a1      	cmp	r1, r4
 8004d24:	db02      	blt.n	8004d2c <_strtoul_l.constprop.0+0x9c>
 8004d26:	4663      	mov	r3, ip
 8004d28:	4370      	muls	r0, r6
 8004d2a:	1820      	adds	r0, r4, r0
 8004d2c:	782c      	ldrb	r4, [r5, #0]
 8004d2e:	3501      	adds	r5, #1
 8004d30:	e7e7      	b.n	8004d02 <_strtoul_l.constprop.0+0x72>
 8004d32:	2c2b      	cmp	r4, #43	; 0x2b
 8004d34:	d1c5      	bne.n	8004cc2 <_strtoul_l.constprop.0+0x32>
 8004d36:	781c      	ldrb	r4, [r3, #0]
 8004d38:	1c95      	adds	r5, r2, #2
 8004d3a:	e7c2      	b.n	8004cc2 <_strtoul_l.constprop.0+0x32>
 8004d3c:	0021      	movs	r1, r4
 8004d3e:	3941      	subs	r1, #65	; 0x41
 8004d40:	2919      	cmp	r1, #25
 8004d42:	d801      	bhi.n	8004d48 <_strtoul_l.constprop.0+0xb8>
 8004d44:	3c37      	subs	r4, #55	; 0x37
 8004d46:	e7e1      	b.n	8004d0c <_strtoul_l.constprop.0+0x7c>
 8004d48:	0021      	movs	r1, r4
 8004d4a:	3961      	subs	r1, #97	; 0x61
 8004d4c:	2919      	cmp	r1, #25
 8004d4e:	d803      	bhi.n	8004d58 <_strtoul_l.constprop.0+0xc8>
 8004d50:	3c57      	subs	r4, #87	; 0x57
 8004d52:	e7db      	b.n	8004d0c <_strtoul_l.constprop.0+0x7c>
 8004d54:	0013      	movs	r3, r2
 8004d56:	e7e9      	b.n	8004d2c <_strtoul_l.constprop.0+0x9c>
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	da09      	bge.n	8004d70 <_strtoul_l.constprop.0+0xe0>
 8004d5c:	2322      	movs	r3, #34	; 0x22
 8004d5e:	2001      	movs	r0, #1
 8004d60:	9a05      	ldr	r2, [sp, #20]
 8004d62:	4240      	negs	r0, r0
 8004d64:	6013      	str	r3, [r2, #0]
 8004d66:	9b02      	ldr	r3, [sp, #8]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d109      	bne.n	8004d80 <_strtoul_l.constprop.0+0xf0>
 8004d6c:	b007      	add	sp, #28
 8004d6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d70:	2f00      	cmp	r7, #0
 8004d72:	d000      	beq.n	8004d76 <_strtoul_l.constprop.0+0xe6>
 8004d74:	4240      	negs	r0, r0
 8004d76:	9a02      	ldr	r2, [sp, #8]
 8004d78:	2a00      	cmp	r2, #0
 8004d7a:	d0f7      	beq.n	8004d6c <_strtoul_l.constprop.0+0xdc>
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d001      	beq.n	8004d84 <_strtoul_l.constprop.0+0xf4>
 8004d80:	1e6b      	subs	r3, r5, #1
 8004d82:	9301      	str	r3, [sp, #4]
 8004d84:	9b02      	ldr	r3, [sp, #8]
 8004d86:	9a01      	ldr	r2, [sp, #4]
 8004d88:	601a      	str	r2, [r3, #0]
 8004d8a:	e7ef      	b.n	8004d6c <_strtoul_l.constprop.0+0xdc>
 8004d8c:	2430      	movs	r4, #48	; 0x30
 8004d8e:	2e00      	cmp	r6, #0
 8004d90:	d1a5      	bne.n	8004cde <_strtoul_l.constprop.0+0x4e>
 8004d92:	3608      	adds	r6, #8
 8004d94:	e7a3      	b.n	8004cde <_strtoul_l.constprop.0+0x4e>
 8004d96:	2c30      	cmp	r4, #48	; 0x30
 8004d98:	d099      	beq.n	8004cce <_strtoul_l.constprop.0+0x3e>
 8004d9a:	260a      	movs	r6, #10
 8004d9c:	e79f      	b.n	8004cde <_strtoul_l.constprop.0+0x4e>
 8004d9e:	46c0      	nop			; (mov r8, r8)
 8004da0:	0800529b 	.word	0x0800529b

08004da4 <_strtoul_r>:
 8004da4:	b510      	push	{r4, lr}
 8004da6:	f7ff ff73 	bl	8004c90 <_strtoul_l.constprop.0>
 8004daa:	bd10      	pop	{r4, pc}

08004dac <__submore>:
 8004dac:	000b      	movs	r3, r1
 8004dae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004db0:	6b4d      	ldr	r5, [r1, #52]	; 0x34
 8004db2:	3344      	adds	r3, #68	; 0x44
 8004db4:	000c      	movs	r4, r1
 8004db6:	429d      	cmp	r5, r3
 8004db8:	d11c      	bne.n	8004df4 <__submore+0x48>
 8004dba:	2680      	movs	r6, #128	; 0x80
 8004dbc:	00f6      	lsls	r6, r6, #3
 8004dbe:	0031      	movs	r1, r6
 8004dc0:	f000 f8c8 	bl	8004f54 <_malloc_r>
 8004dc4:	2800      	cmp	r0, #0
 8004dc6:	d102      	bne.n	8004dce <__submore+0x22>
 8004dc8:	2001      	movs	r0, #1
 8004dca:	4240      	negs	r0, r0
 8004dcc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004dce:	0023      	movs	r3, r4
 8004dd0:	6360      	str	r0, [r4, #52]	; 0x34
 8004dd2:	63a6      	str	r6, [r4, #56]	; 0x38
 8004dd4:	3346      	adds	r3, #70	; 0x46
 8004dd6:	781a      	ldrb	r2, [r3, #0]
 8004dd8:	4b10      	ldr	r3, [pc, #64]	; (8004e1c <__submore+0x70>)
 8004dda:	54c2      	strb	r2, [r0, r3]
 8004ddc:	0023      	movs	r3, r4
 8004dde:	3345      	adds	r3, #69	; 0x45
 8004de0:	781a      	ldrb	r2, [r3, #0]
 8004de2:	4b0f      	ldr	r3, [pc, #60]	; (8004e20 <__submore+0x74>)
 8004de4:	54c2      	strb	r2, [r0, r3]
 8004de6:	782a      	ldrb	r2, [r5, #0]
 8004de8:	4b0e      	ldr	r3, [pc, #56]	; (8004e24 <__submore+0x78>)
 8004dea:	54c2      	strb	r2, [r0, r3]
 8004dec:	18c0      	adds	r0, r0, r3
 8004dee:	6020      	str	r0, [r4, #0]
 8004df0:	2000      	movs	r0, #0
 8004df2:	e7eb      	b.n	8004dcc <__submore+0x20>
 8004df4:	6b8e      	ldr	r6, [r1, #56]	; 0x38
 8004df6:	0029      	movs	r1, r5
 8004df8:	0073      	lsls	r3, r6, #1
 8004dfa:	001a      	movs	r2, r3
 8004dfc:	9301      	str	r3, [sp, #4]
 8004dfe:	f000 f91f 	bl	8005040 <_realloc_r>
 8004e02:	1e05      	subs	r5, r0, #0
 8004e04:	d0e0      	beq.n	8004dc8 <__submore+0x1c>
 8004e06:	1987      	adds	r7, r0, r6
 8004e08:	0001      	movs	r1, r0
 8004e0a:	0032      	movs	r2, r6
 8004e0c:	0038      	movs	r0, r7
 8004e0e:	f000 f818 	bl	8004e42 <memcpy>
 8004e12:	9b01      	ldr	r3, [sp, #4]
 8004e14:	6027      	str	r7, [r4, #0]
 8004e16:	6365      	str	r5, [r4, #52]	; 0x34
 8004e18:	63a3      	str	r3, [r4, #56]	; 0x38
 8004e1a:	e7e9      	b.n	8004df0 <__submore+0x44>
 8004e1c:	000003ff 	.word	0x000003ff
 8004e20:	000003fe 	.word	0x000003fe
 8004e24:	000003fd 	.word	0x000003fd

08004e28 <__retarget_lock_acquire_recursive>:
 8004e28:	4770      	bx	lr

08004e2a <__retarget_lock_release_recursive>:
 8004e2a:	4770      	bx	lr

08004e2c <memchr>:
 8004e2c:	b2c9      	uxtb	r1, r1
 8004e2e:	1882      	adds	r2, r0, r2
 8004e30:	4290      	cmp	r0, r2
 8004e32:	d101      	bne.n	8004e38 <memchr+0xc>
 8004e34:	2000      	movs	r0, #0
 8004e36:	4770      	bx	lr
 8004e38:	7803      	ldrb	r3, [r0, #0]
 8004e3a:	428b      	cmp	r3, r1
 8004e3c:	d0fb      	beq.n	8004e36 <memchr+0xa>
 8004e3e:	3001      	adds	r0, #1
 8004e40:	e7f6      	b.n	8004e30 <memchr+0x4>

08004e42 <memcpy>:
 8004e42:	2300      	movs	r3, #0
 8004e44:	b510      	push	{r4, lr}
 8004e46:	429a      	cmp	r2, r3
 8004e48:	d100      	bne.n	8004e4c <memcpy+0xa>
 8004e4a:	bd10      	pop	{r4, pc}
 8004e4c:	5ccc      	ldrb	r4, [r1, r3]
 8004e4e:	54c4      	strb	r4, [r0, r3]
 8004e50:	3301      	adds	r3, #1
 8004e52:	e7f8      	b.n	8004e46 <memcpy+0x4>

08004e54 <memmove>:
 8004e54:	b510      	push	{r4, lr}
 8004e56:	4288      	cmp	r0, r1
 8004e58:	d902      	bls.n	8004e60 <memmove+0xc>
 8004e5a:	188b      	adds	r3, r1, r2
 8004e5c:	4298      	cmp	r0, r3
 8004e5e:	d303      	bcc.n	8004e68 <memmove+0x14>
 8004e60:	2300      	movs	r3, #0
 8004e62:	e007      	b.n	8004e74 <memmove+0x20>
 8004e64:	5c8b      	ldrb	r3, [r1, r2]
 8004e66:	5483      	strb	r3, [r0, r2]
 8004e68:	3a01      	subs	r2, #1
 8004e6a:	d2fb      	bcs.n	8004e64 <memmove+0x10>
 8004e6c:	bd10      	pop	{r4, pc}
 8004e6e:	5ccc      	ldrb	r4, [r1, r3]
 8004e70:	54c4      	strb	r4, [r0, r3]
 8004e72:	3301      	adds	r3, #1
 8004e74:	429a      	cmp	r2, r3
 8004e76:	d1fa      	bne.n	8004e6e <memmove+0x1a>
 8004e78:	e7f8      	b.n	8004e6c <memmove+0x18>
	...

08004e7c <_free_r>:
 8004e7c:	b570      	push	{r4, r5, r6, lr}
 8004e7e:	0005      	movs	r5, r0
 8004e80:	2900      	cmp	r1, #0
 8004e82:	d010      	beq.n	8004ea6 <_free_r+0x2a>
 8004e84:	1f0c      	subs	r4, r1, #4
 8004e86:	6823      	ldr	r3, [r4, #0]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	da00      	bge.n	8004e8e <_free_r+0x12>
 8004e8c:	18e4      	adds	r4, r4, r3
 8004e8e:	0028      	movs	r0, r5
 8004e90:	f000 f918 	bl	80050c4 <__malloc_lock>
 8004e94:	4a1d      	ldr	r2, [pc, #116]	; (8004f0c <_free_r+0x90>)
 8004e96:	6813      	ldr	r3, [r2, #0]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d105      	bne.n	8004ea8 <_free_r+0x2c>
 8004e9c:	6063      	str	r3, [r4, #4]
 8004e9e:	6014      	str	r4, [r2, #0]
 8004ea0:	0028      	movs	r0, r5
 8004ea2:	f000 f917 	bl	80050d4 <__malloc_unlock>
 8004ea6:	bd70      	pop	{r4, r5, r6, pc}
 8004ea8:	42a3      	cmp	r3, r4
 8004eaa:	d908      	bls.n	8004ebe <_free_r+0x42>
 8004eac:	6821      	ldr	r1, [r4, #0]
 8004eae:	1860      	adds	r0, r4, r1
 8004eb0:	4283      	cmp	r3, r0
 8004eb2:	d1f3      	bne.n	8004e9c <_free_r+0x20>
 8004eb4:	6818      	ldr	r0, [r3, #0]
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	1841      	adds	r1, r0, r1
 8004eba:	6021      	str	r1, [r4, #0]
 8004ebc:	e7ee      	b.n	8004e9c <_free_r+0x20>
 8004ebe:	001a      	movs	r2, r3
 8004ec0:	685b      	ldr	r3, [r3, #4]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d001      	beq.n	8004eca <_free_r+0x4e>
 8004ec6:	42a3      	cmp	r3, r4
 8004ec8:	d9f9      	bls.n	8004ebe <_free_r+0x42>
 8004eca:	6811      	ldr	r1, [r2, #0]
 8004ecc:	1850      	adds	r0, r2, r1
 8004ece:	42a0      	cmp	r0, r4
 8004ed0:	d10b      	bne.n	8004eea <_free_r+0x6e>
 8004ed2:	6820      	ldr	r0, [r4, #0]
 8004ed4:	1809      	adds	r1, r1, r0
 8004ed6:	1850      	adds	r0, r2, r1
 8004ed8:	6011      	str	r1, [r2, #0]
 8004eda:	4283      	cmp	r3, r0
 8004edc:	d1e0      	bne.n	8004ea0 <_free_r+0x24>
 8004ede:	6818      	ldr	r0, [r3, #0]
 8004ee0:	685b      	ldr	r3, [r3, #4]
 8004ee2:	1841      	adds	r1, r0, r1
 8004ee4:	6011      	str	r1, [r2, #0]
 8004ee6:	6053      	str	r3, [r2, #4]
 8004ee8:	e7da      	b.n	8004ea0 <_free_r+0x24>
 8004eea:	42a0      	cmp	r0, r4
 8004eec:	d902      	bls.n	8004ef4 <_free_r+0x78>
 8004eee:	230c      	movs	r3, #12
 8004ef0:	602b      	str	r3, [r5, #0]
 8004ef2:	e7d5      	b.n	8004ea0 <_free_r+0x24>
 8004ef4:	6821      	ldr	r1, [r4, #0]
 8004ef6:	1860      	adds	r0, r4, r1
 8004ef8:	4283      	cmp	r3, r0
 8004efa:	d103      	bne.n	8004f04 <_free_r+0x88>
 8004efc:	6818      	ldr	r0, [r3, #0]
 8004efe:	685b      	ldr	r3, [r3, #4]
 8004f00:	1841      	adds	r1, r0, r1
 8004f02:	6021      	str	r1, [r4, #0]
 8004f04:	6063      	str	r3, [r4, #4]
 8004f06:	6054      	str	r4, [r2, #4]
 8004f08:	e7ca      	b.n	8004ea0 <_free_r+0x24>
 8004f0a:	46c0      	nop			; (mov r8, r8)
 8004f0c:	200007c4 	.word	0x200007c4

08004f10 <sbrk_aligned>:
 8004f10:	b570      	push	{r4, r5, r6, lr}
 8004f12:	4e0f      	ldr	r6, [pc, #60]	; (8004f50 <sbrk_aligned+0x40>)
 8004f14:	000d      	movs	r5, r1
 8004f16:	6831      	ldr	r1, [r6, #0]
 8004f18:	0004      	movs	r4, r0
 8004f1a:	2900      	cmp	r1, #0
 8004f1c:	d102      	bne.n	8004f24 <sbrk_aligned+0x14>
 8004f1e:	f000 f8bf 	bl	80050a0 <_sbrk_r>
 8004f22:	6030      	str	r0, [r6, #0]
 8004f24:	0029      	movs	r1, r5
 8004f26:	0020      	movs	r0, r4
 8004f28:	f000 f8ba 	bl	80050a0 <_sbrk_r>
 8004f2c:	1c43      	adds	r3, r0, #1
 8004f2e:	d00a      	beq.n	8004f46 <sbrk_aligned+0x36>
 8004f30:	2303      	movs	r3, #3
 8004f32:	1cc5      	adds	r5, r0, #3
 8004f34:	439d      	bics	r5, r3
 8004f36:	42a8      	cmp	r0, r5
 8004f38:	d007      	beq.n	8004f4a <sbrk_aligned+0x3a>
 8004f3a:	1a29      	subs	r1, r5, r0
 8004f3c:	0020      	movs	r0, r4
 8004f3e:	f000 f8af 	bl	80050a0 <_sbrk_r>
 8004f42:	1c43      	adds	r3, r0, #1
 8004f44:	d101      	bne.n	8004f4a <sbrk_aligned+0x3a>
 8004f46:	2501      	movs	r5, #1
 8004f48:	426d      	negs	r5, r5
 8004f4a:	0028      	movs	r0, r5
 8004f4c:	bd70      	pop	{r4, r5, r6, pc}
 8004f4e:	46c0      	nop			; (mov r8, r8)
 8004f50:	200007c8 	.word	0x200007c8

08004f54 <_malloc_r>:
 8004f54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004f56:	2203      	movs	r2, #3
 8004f58:	1ccb      	adds	r3, r1, #3
 8004f5a:	4393      	bics	r3, r2
 8004f5c:	3308      	adds	r3, #8
 8004f5e:	0006      	movs	r6, r0
 8004f60:	001f      	movs	r7, r3
 8004f62:	2b0c      	cmp	r3, #12
 8004f64:	d232      	bcs.n	8004fcc <_malloc_r+0x78>
 8004f66:	270c      	movs	r7, #12
 8004f68:	42b9      	cmp	r1, r7
 8004f6a:	d831      	bhi.n	8004fd0 <_malloc_r+0x7c>
 8004f6c:	0030      	movs	r0, r6
 8004f6e:	f000 f8a9 	bl	80050c4 <__malloc_lock>
 8004f72:	4d32      	ldr	r5, [pc, #200]	; (800503c <_malloc_r+0xe8>)
 8004f74:	682b      	ldr	r3, [r5, #0]
 8004f76:	001c      	movs	r4, r3
 8004f78:	2c00      	cmp	r4, #0
 8004f7a:	d12e      	bne.n	8004fda <_malloc_r+0x86>
 8004f7c:	0039      	movs	r1, r7
 8004f7e:	0030      	movs	r0, r6
 8004f80:	f7ff ffc6 	bl	8004f10 <sbrk_aligned>
 8004f84:	0004      	movs	r4, r0
 8004f86:	1c43      	adds	r3, r0, #1
 8004f88:	d11e      	bne.n	8004fc8 <_malloc_r+0x74>
 8004f8a:	682c      	ldr	r4, [r5, #0]
 8004f8c:	0025      	movs	r5, r4
 8004f8e:	2d00      	cmp	r5, #0
 8004f90:	d14a      	bne.n	8005028 <_malloc_r+0xd4>
 8004f92:	6823      	ldr	r3, [r4, #0]
 8004f94:	0029      	movs	r1, r5
 8004f96:	18e3      	adds	r3, r4, r3
 8004f98:	0030      	movs	r0, r6
 8004f9a:	9301      	str	r3, [sp, #4]
 8004f9c:	f000 f880 	bl	80050a0 <_sbrk_r>
 8004fa0:	9b01      	ldr	r3, [sp, #4]
 8004fa2:	4283      	cmp	r3, r0
 8004fa4:	d143      	bne.n	800502e <_malloc_r+0xda>
 8004fa6:	6823      	ldr	r3, [r4, #0]
 8004fa8:	3703      	adds	r7, #3
 8004faa:	1aff      	subs	r7, r7, r3
 8004fac:	2303      	movs	r3, #3
 8004fae:	439f      	bics	r7, r3
 8004fb0:	3708      	adds	r7, #8
 8004fb2:	2f0c      	cmp	r7, #12
 8004fb4:	d200      	bcs.n	8004fb8 <_malloc_r+0x64>
 8004fb6:	270c      	movs	r7, #12
 8004fb8:	0039      	movs	r1, r7
 8004fba:	0030      	movs	r0, r6
 8004fbc:	f7ff ffa8 	bl	8004f10 <sbrk_aligned>
 8004fc0:	1c43      	adds	r3, r0, #1
 8004fc2:	d034      	beq.n	800502e <_malloc_r+0xda>
 8004fc4:	6823      	ldr	r3, [r4, #0]
 8004fc6:	19df      	adds	r7, r3, r7
 8004fc8:	6027      	str	r7, [r4, #0]
 8004fca:	e013      	b.n	8004ff4 <_malloc_r+0xa0>
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	dacb      	bge.n	8004f68 <_malloc_r+0x14>
 8004fd0:	230c      	movs	r3, #12
 8004fd2:	2500      	movs	r5, #0
 8004fd4:	6033      	str	r3, [r6, #0]
 8004fd6:	0028      	movs	r0, r5
 8004fd8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004fda:	6822      	ldr	r2, [r4, #0]
 8004fdc:	1bd1      	subs	r1, r2, r7
 8004fde:	d420      	bmi.n	8005022 <_malloc_r+0xce>
 8004fe0:	290b      	cmp	r1, #11
 8004fe2:	d917      	bls.n	8005014 <_malloc_r+0xc0>
 8004fe4:	19e2      	adds	r2, r4, r7
 8004fe6:	6027      	str	r7, [r4, #0]
 8004fe8:	42a3      	cmp	r3, r4
 8004fea:	d111      	bne.n	8005010 <_malloc_r+0xbc>
 8004fec:	602a      	str	r2, [r5, #0]
 8004fee:	6863      	ldr	r3, [r4, #4]
 8004ff0:	6011      	str	r1, [r2, #0]
 8004ff2:	6053      	str	r3, [r2, #4]
 8004ff4:	0030      	movs	r0, r6
 8004ff6:	0025      	movs	r5, r4
 8004ff8:	f000 f86c 	bl	80050d4 <__malloc_unlock>
 8004ffc:	2207      	movs	r2, #7
 8004ffe:	350b      	adds	r5, #11
 8005000:	1d23      	adds	r3, r4, #4
 8005002:	4395      	bics	r5, r2
 8005004:	1aea      	subs	r2, r5, r3
 8005006:	429d      	cmp	r5, r3
 8005008:	d0e5      	beq.n	8004fd6 <_malloc_r+0x82>
 800500a:	1b5b      	subs	r3, r3, r5
 800500c:	50a3      	str	r3, [r4, r2]
 800500e:	e7e2      	b.n	8004fd6 <_malloc_r+0x82>
 8005010:	605a      	str	r2, [r3, #4]
 8005012:	e7ec      	b.n	8004fee <_malloc_r+0x9a>
 8005014:	6862      	ldr	r2, [r4, #4]
 8005016:	42a3      	cmp	r3, r4
 8005018:	d101      	bne.n	800501e <_malloc_r+0xca>
 800501a:	602a      	str	r2, [r5, #0]
 800501c:	e7ea      	b.n	8004ff4 <_malloc_r+0xa0>
 800501e:	605a      	str	r2, [r3, #4]
 8005020:	e7e8      	b.n	8004ff4 <_malloc_r+0xa0>
 8005022:	0023      	movs	r3, r4
 8005024:	6864      	ldr	r4, [r4, #4]
 8005026:	e7a7      	b.n	8004f78 <_malloc_r+0x24>
 8005028:	002c      	movs	r4, r5
 800502a:	686d      	ldr	r5, [r5, #4]
 800502c:	e7af      	b.n	8004f8e <_malloc_r+0x3a>
 800502e:	230c      	movs	r3, #12
 8005030:	0030      	movs	r0, r6
 8005032:	6033      	str	r3, [r6, #0]
 8005034:	f000 f84e 	bl	80050d4 <__malloc_unlock>
 8005038:	e7cd      	b.n	8004fd6 <_malloc_r+0x82>
 800503a:	46c0      	nop			; (mov r8, r8)
 800503c:	200007c4 	.word	0x200007c4

08005040 <_realloc_r>:
 8005040:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005042:	0007      	movs	r7, r0
 8005044:	000e      	movs	r6, r1
 8005046:	0014      	movs	r4, r2
 8005048:	2900      	cmp	r1, #0
 800504a:	d105      	bne.n	8005058 <_realloc_r+0x18>
 800504c:	0011      	movs	r1, r2
 800504e:	f7ff ff81 	bl	8004f54 <_malloc_r>
 8005052:	0005      	movs	r5, r0
 8005054:	0028      	movs	r0, r5
 8005056:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005058:	2a00      	cmp	r2, #0
 800505a:	d103      	bne.n	8005064 <_realloc_r+0x24>
 800505c:	f7ff ff0e 	bl	8004e7c <_free_r>
 8005060:	0025      	movs	r5, r4
 8005062:	e7f7      	b.n	8005054 <_realloc_r+0x14>
 8005064:	f000 f83e 	bl	80050e4 <_malloc_usable_size_r>
 8005068:	9001      	str	r0, [sp, #4]
 800506a:	4284      	cmp	r4, r0
 800506c:	d803      	bhi.n	8005076 <_realloc_r+0x36>
 800506e:	0035      	movs	r5, r6
 8005070:	0843      	lsrs	r3, r0, #1
 8005072:	42a3      	cmp	r3, r4
 8005074:	d3ee      	bcc.n	8005054 <_realloc_r+0x14>
 8005076:	0021      	movs	r1, r4
 8005078:	0038      	movs	r0, r7
 800507a:	f7ff ff6b 	bl	8004f54 <_malloc_r>
 800507e:	1e05      	subs	r5, r0, #0
 8005080:	d0e8      	beq.n	8005054 <_realloc_r+0x14>
 8005082:	9b01      	ldr	r3, [sp, #4]
 8005084:	0022      	movs	r2, r4
 8005086:	429c      	cmp	r4, r3
 8005088:	d900      	bls.n	800508c <_realloc_r+0x4c>
 800508a:	001a      	movs	r2, r3
 800508c:	0031      	movs	r1, r6
 800508e:	0028      	movs	r0, r5
 8005090:	f7ff fed7 	bl	8004e42 <memcpy>
 8005094:	0031      	movs	r1, r6
 8005096:	0038      	movs	r0, r7
 8005098:	f7ff fef0 	bl	8004e7c <_free_r>
 800509c:	e7da      	b.n	8005054 <_realloc_r+0x14>
	...

080050a0 <_sbrk_r>:
 80050a0:	2300      	movs	r3, #0
 80050a2:	b570      	push	{r4, r5, r6, lr}
 80050a4:	4d06      	ldr	r5, [pc, #24]	; (80050c0 <_sbrk_r+0x20>)
 80050a6:	0004      	movs	r4, r0
 80050a8:	0008      	movs	r0, r1
 80050aa:	602b      	str	r3, [r5, #0]
 80050ac:	f7fc faaa 	bl	8001604 <_sbrk>
 80050b0:	1c43      	adds	r3, r0, #1
 80050b2:	d103      	bne.n	80050bc <_sbrk_r+0x1c>
 80050b4:	682b      	ldr	r3, [r5, #0]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d000      	beq.n	80050bc <_sbrk_r+0x1c>
 80050ba:	6023      	str	r3, [r4, #0]
 80050bc:	bd70      	pop	{r4, r5, r6, pc}
 80050be:	46c0      	nop			; (mov r8, r8)
 80050c0:	200007bc 	.word	0x200007bc

080050c4 <__malloc_lock>:
 80050c4:	b510      	push	{r4, lr}
 80050c6:	4802      	ldr	r0, [pc, #8]	; (80050d0 <__malloc_lock+0xc>)
 80050c8:	f7ff feae 	bl	8004e28 <__retarget_lock_acquire_recursive>
 80050cc:	bd10      	pop	{r4, pc}
 80050ce:	46c0      	nop			; (mov r8, r8)
 80050d0:	200007c0 	.word	0x200007c0

080050d4 <__malloc_unlock>:
 80050d4:	b510      	push	{r4, lr}
 80050d6:	4802      	ldr	r0, [pc, #8]	; (80050e0 <__malloc_unlock+0xc>)
 80050d8:	f7ff fea7 	bl	8004e2a <__retarget_lock_release_recursive>
 80050dc:	bd10      	pop	{r4, pc}
 80050de:	46c0      	nop			; (mov r8, r8)
 80050e0:	200007c0 	.word	0x200007c0

080050e4 <_malloc_usable_size_r>:
 80050e4:	1f0b      	subs	r3, r1, #4
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	1f18      	subs	r0, r3, #4
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	da01      	bge.n	80050f2 <_malloc_usable_size_r+0xe>
 80050ee:	580b      	ldr	r3, [r1, r0]
 80050f0:	18c0      	adds	r0, r0, r3
 80050f2:	4770      	bx	lr

080050f4 <_init>:
 80050f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050f6:	46c0      	nop			; (mov r8, r8)
 80050f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050fa:	bc08      	pop	{r3}
 80050fc:	469e      	mov	lr, r3
 80050fe:	4770      	bx	lr

08005100 <_fini>:
 8005100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005102:	46c0      	nop			; (mov r8, r8)
 8005104:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005106:	bc08      	pop	{r3}
 8005108:	469e      	mov	lr, r3
 800510a:	4770      	bx	lr
