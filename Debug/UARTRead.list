
UARTRead.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b164  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000067c  0800b220  0800b220  0001b220  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b89c  0800b89c  00020214  2**0
                  CONTENTS
  4 .ARM          00000000  0800b89c  0800b89c  00020214  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b89c  0800b89c  00020214  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b89c  0800b89c  0001b89c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b8a0  0800b8a0  0001b8a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000214  20000000  0800b8a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000728  20000214  0800bab8  00020214  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000093c  0800bab8  0002093c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c0ef  00000000  00000000  0002023c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f0f  00000000  00000000  0002c32b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000920  00000000  00000000  0002e240  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000858  00000000  00000000  0002eb60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015f32  00000000  00000000  0002f3b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bdb4  00000000  00000000  000452ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000854ab  00000000  00000000  0005109e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d6549  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000037c0  00000000  00000000  000d659c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000214 	.word	0x20000214
 80000d8:	00000000 	.word	0x00000000
 80000dc:	0800b204 	.word	0x0800b204

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000218 	.word	0x20000218
 80000fc:	0800b204 	.word	0x0800b204

08000100 <strcmp>:
 8000100:	7802      	ldrb	r2, [r0, #0]
 8000102:	780b      	ldrb	r3, [r1, #0]
 8000104:	2a00      	cmp	r2, #0
 8000106:	d003      	beq.n	8000110 <strcmp+0x10>
 8000108:	3001      	adds	r0, #1
 800010a:	3101      	adds	r1, #1
 800010c:	429a      	cmp	r2, r3
 800010e:	d0f7      	beq.n	8000100 <strcmp>
 8000110:	1ad0      	subs	r0, r2, r3
 8000112:	4770      	bx	lr

08000114 <strlen>:
 8000114:	2300      	movs	r3, #0
 8000116:	5cc2      	ldrb	r2, [r0, r3]
 8000118:	3301      	adds	r3, #1
 800011a:	2a00      	cmp	r2, #0
 800011c:	d1fb      	bne.n	8000116 <strlen+0x2>
 800011e:	1e58      	subs	r0, r3, #1
 8000120:	4770      	bx	lr
	...

08000124 <__gnu_thumb1_case_uqi>:
 8000124:	b402      	push	{r1}
 8000126:	4671      	mov	r1, lr
 8000128:	0849      	lsrs	r1, r1, #1
 800012a:	0049      	lsls	r1, r1, #1
 800012c:	5c09      	ldrb	r1, [r1, r0]
 800012e:	0049      	lsls	r1, r1, #1
 8000130:	448e      	add	lr, r1
 8000132:	bc02      	pop	{r1}
 8000134:	4770      	bx	lr
 8000136:	46c0      	nop			; (mov r8, r8)

08000138 <__gnu_thumb1_case_shi>:
 8000138:	b403      	push	{r0, r1}
 800013a:	4671      	mov	r1, lr
 800013c:	0849      	lsrs	r1, r1, #1
 800013e:	0040      	lsls	r0, r0, #1
 8000140:	0049      	lsls	r1, r1, #1
 8000142:	5e09      	ldrsh	r1, [r1, r0]
 8000144:	0049      	lsls	r1, r1, #1
 8000146:	448e      	add	lr, r1
 8000148:	bc03      	pop	{r0, r1}
 800014a:	4770      	bx	lr

0800014c <__udivsi3>:
 800014c:	2200      	movs	r2, #0
 800014e:	0843      	lsrs	r3, r0, #1
 8000150:	428b      	cmp	r3, r1
 8000152:	d374      	bcc.n	800023e <__udivsi3+0xf2>
 8000154:	0903      	lsrs	r3, r0, #4
 8000156:	428b      	cmp	r3, r1
 8000158:	d35f      	bcc.n	800021a <__udivsi3+0xce>
 800015a:	0a03      	lsrs	r3, r0, #8
 800015c:	428b      	cmp	r3, r1
 800015e:	d344      	bcc.n	80001ea <__udivsi3+0x9e>
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d328      	bcc.n	80001b8 <__udivsi3+0x6c>
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d30d      	bcc.n	8000188 <__udivsi3+0x3c>
 800016c:	22ff      	movs	r2, #255	; 0xff
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	ba12      	rev	r2, r2
 8000172:	0c03      	lsrs	r3, r0, #16
 8000174:	428b      	cmp	r3, r1
 8000176:	d302      	bcc.n	800017e <__udivsi3+0x32>
 8000178:	1212      	asrs	r2, r2, #8
 800017a:	0209      	lsls	r1, r1, #8
 800017c:	d065      	beq.n	800024a <__udivsi3+0xfe>
 800017e:	0b03      	lsrs	r3, r0, #12
 8000180:	428b      	cmp	r3, r1
 8000182:	d319      	bcc.n	80001b8 <__udivsi3+0x6c>
 8000184:	e000      	b.n	8000188 <__udivsi3+0x3c>
 8000186:	0a09      	lsrs	r1, r1, #8
 8000188:	0bc3      	lsrs	r3, r0, #15
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x46>
 800018e:	03cb      	lsls	r3, r1, #15
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b83      	lsrs	r3, r0, #14
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x52>
 800019a:	038b      	lsls	r3, r1, #14
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b43      	lsrs	r3, r0, #13
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x5e>
 80001a6:	034b      	lsls	r3, r1, #13
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0b03      	lsrs	r3, r0, #12
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x6a>
 80001b2:	030b      	lsls	r3, r1, #12
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0ac3      	lsrs	r3, r0, #11
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x76>
 80001be:	02cb      	lsls	r3, r1, #11
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a83      	lsrs	r3, r0, #10
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x82>
 80001ca:	028b      	lsls	r3, r1, #10
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a43      	lsrs	r3, r0, #9
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x8e>
 80001d6:	024b      	lsls	r3, r1, #9
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	0a03      	lsrs	r3, r0, #8
 80001de:	428b      	cmp	r3, r1
 80001e0:	d301      	bcc.n	80001e6 <__udivsi3+0x9a>
 80001e2:	020b      	lsls	r3, r1, #8
 80001e4:	1ac0      	subs	r0, r0, r3
 80001e6:	4152      	adcs	r2, r2
 80001e8:	d2cd      	bcs.n	8000186 <__udivsi3+0x3a>
 80001ea:	09c3      	lsrs	r3, r0, #7
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xa8>
 80001f0:	01cb      	lsls	r3, r1, #7
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0983      	lsrs	r3, r0, #6
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xb4>
 80001fc:	018b      	lsls	r3, r1, #6
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0943      	lsrs	r3, r0, #5
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xc0>
 8000208:	014b      	lsls	r3, r1, #5
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	0903      	lsrs	r3, r0, #4
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xcc>
 8000214:	010b      	lsls	r3, r1, #4
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	08c3      	lsrs	r3, r0, #3
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xd8>
 8000220:	00cb      	lsls	r3, r1, #3
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0883      	lsrs	r3, r0, #2
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xe4>
 800022c:	008b      	lsls	r3, r1, #2
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	0843      	lsrs	r3, r0, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d301      	bcc.n	800023c <__udivsi3+0xf0>
 8000238:	004b      	lsls	r3, r1, #1
 800023a:	1ac0      	subs	r0, r0, r3
 800023c:	4152      	adcs	r2, r2
 800023e:	1a41      	subs	r1, r0, r1
 8000240:	d200      	bcs.n	8000244 <__udivsi3+0xf8>
 8000242:	4601      	mov	r1, r0
 8000244:	4152      	adcs	r2, r2
 8000246:	4610      	mov	r0, r2
 8000248:	4770      	bx	lr
 800024a:	e7ff      	b.n	800024c <__udivsi3+0x100>
 800024c:	b501      	push	{r0, lr}
 800024e:	2000      	movs	r0, #0
 8000250:	f000 f8f0 	bl	8000434 <__aeabi_idiv0>
 8000254:	bd02      	pop	{r1, pc}
 8000256:	46c0      	nop			; (mov r8, r8)

08000258 <__aeabi_uidivmod>:
 8000258:	2900      	cmp	r1, #0
 800025a:	d0f7      	beq.n	800024c <__udivsi3+0x100>
 800025c:	e776      	b.n	800014c <__udivsi3>
 800025e:	4770      	bx	lr

08000260 <__divsi3>:
 8000260:	4603      	mov	r3, r0
 8000262:	430b      	orrs	r3, r1
 8000264:	d47f      	bmi.n	8000366 <__divsi3+0x106>
 8000266:	2200      	movs	r2, #0
 8000268:	0843      	lsrs	r3, r0, #1
 800026a:	428b      	cmp	r3, r1
 800026c:	d374      	bcc.n	8000358 <__divsi3+0xf8>
 800026e:	0903      	lsrs	r3, r0, #4
 8000270:	428b      	cmp	r3, r1
 8000272:	d35f      	bcc.n	8000334 <__divsi3+0xd4>
 8000274:	0a03      	lsrs	r3, r0, #8
 8000276:	428b      	cmp	r3, r1
 8000278:	d344      	bcc.n	8000304 <__divsi3+0xa4>
 800027a:	0b03      	lsrs	r3, r0, #12
 800027c:	428b      	cmp	r3, r1
 800027e:	d328      	bcc.n	80002d2 <__divsi3+0x72>
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d30d      	bcc.n	80002a2 <__divsi3+0x42>
 8000286:	22ff      	movs	r2, #255	; 0xff
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	ba12      	rev	r2, r2
 800028c:	0c03      	lsrs	r3, r0, #16
 800028e:	428b      	cmp	r3, r1
 8000290:	d302      	bcc.n	8000298 <__divsi3+0x38>
 8000292:	1212      	asrs	r2, r2, #8
 8000294:	0209      	lsls	r1, r1, #8
 8000296:	d065      	beq.n	8000364 <__divsi3+0x104>
 8000298:	0b03      	lsrs	r3, r0, #12
 800029a:	428b      	cmp	r3, r1
 800029c:	d319      	bcc.n	80002d2 <__divsi3+0x72>
 800029e:	e000      	b.n	80002a2 <__divsi3+0x42>
 80002a0:	0a09      	lsrs	r1, r1, #8
 80002a2:	0bc3      	lsrs	r3, r0, #15
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x4c>
 80002a8:	03cb      	lsls	r3, r1, #15
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b83      	lsrs	r3, r0, #14
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x58>
 80002b4:	038b      	lsls	r3, r1, #14
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b43      	lsrs	r3, r0, #13
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x64>
 80002c0:	034b      	lsls	r3, r1, #13
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0b03      	lsrs	r3, r0, #12
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x70>
 80002cc:	030b      	lsls	r3, r1, #12
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0ac3      	lsrs	r3, r0, #11
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x7c>
 80002d8:	02cb      	lsls	r3, r1, #11
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a83      	lsrs	r3, r0, #10
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x88>
 80002e4:	028b      	lsls	r3, r1, #10
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a43      	lsrs	r3, r0, #9
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0x94>
 80002f0:	024b      	lsls	r3, r1, #9
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	0a03      	lsrs	r3, r0, #8
 80002f8:	428b      	cmp	r3, r1
 80002fa:	d301      	bcc.n	8000300 <__divsi3+0xa0>
 80002fc:	020b      	lsls	r3, r1, #8
 80002fe:	1ac0      	subs	r0, r0, r3
 8000300:	4152      	adcs	r2, r2
 8000302:	d2cd      	bcs.n	80002a0 <__divsi3+0x40>
 8000304:	09c3      	lsrs	r3, r0, #7
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xae>
 800030a:	01cb      	lsls	r3, r1, #7
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0983      	lsrs	r3, r0, #6
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xba>
 8000316:	018b      	lsls	r3, r1, #6
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0943      	lsrs	r3, r0, #5
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xc6>
 8000322:	014b      	lsls	r3, r1, #5
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	0903      	lsrs	r3, r0, #4
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xd2>
 800032e:	010b      	lsls	r3, r1, #4
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	08c3      	lsrs	r3, r0, #3
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xde>
 800033a:	00cb      	lsls	r3, r1, #3
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0883      	lsrs	r3, r0, #2
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xea>
 8000346:	008b      	lsls	r3, r1, #2
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	0843      	lsrs	r3, r0, #1
 800034e:	428b      	cmp	r3, r1
 8000350:	d301      	bcc.n	8000356 <__divsi3+0xf6>
 8000352:	004b      	lsls	r3, r1, #1
 8000354:	1ac0      	subs	r0, r0, r3
 8000356:	4152      	adcs	r2, r2
 8000358:	1a41      	subs	r1, r0, r1
 800035a:	d200      	bcs.n	800035e <__divsi3+0xfe>
 800035c:	4601      	mov	r1, r0
 800035e:	4152      	adcs	r2, r2
 8000360:	4610      	mov	r0, r2
 8000362:	4770      	bx	lr
 8000364:	e05d      	b.n	8000422 <__divsi3+0x1c2>
 8000366:	0fca      	lsrs	r2, r1, #31
 8000368:	d000      	beq.n	800036c <__divsi3+0x10c>
 800036a:	4249      	negs	r1, r1
 800036c:	1003      	asrs	r3, r0, #32
 800036e:	d300      	bcc.n	8000372 <__divsi3+0x112>
 8000370:	4240      	negs	r0, r0
 8000372:	4053      	eors	r3, r2
 8000374:	2200      	movs	r2, #0
 8000376:	469c      	mov	ip, r3
 8000378:	0903      	lsrs	r3, r0, #4
 800037a:	428b      	cmp	r3, r1
 800037c:	d32d      	bcc.n	80003da <__divsi3+0x17a>
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d312      	bcc.n	80003aa <__divsi3+0x14a>
 8000384:	22fc      	movs	r2, #252	; 0xfc
 8000386:	0189      	lsls	r1, r1, #6
 8000388:	ba12      	rev	r2, r2
 800038a:	0a03      	lsrs	r3, r0, #8
 800038c:	428b      	cmp	r3, r1
 800038e:	d30c      	bcc.n	80003aa <__divsi3+0x14a>
 8000390:	0189      	lsls	r1, r1, #6
 8000392:	1192      	asrs	r2, r2, #6
 8000394:	428b      	cmp	r3, r1
 8000396:	d308      	bcc.n	80003aa <__divsi3+0x14a>
 8000398:	0189      	lsls	r1, r1, #6
 800039a:	1192      	asrs	r2, r2, #6
 800039c:	428b      	cmp	r3, r1
 800039e:	d304      	bcc.n	80003aa <__divsi3+0x14a>
 80003a0:	0189      	lsls	r1, r1, #6
 80003a2:	d03a      	beq.n	800041a <__divsi3+0x1ba>
 80003a4:	1192      	asrs	r2, r2, #6
 80003a6:	e000      	b.n	80003aa <__divsi3+0x14a>
 80003a8:	0989      	lsrs	r1, r1, #6
 80003aa:	09c3      	lsrs	r3, r0, #7
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x154>
 80003b0:	01cb      	lsls	r3, r1, #7
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0983      	lsrs	r3, r0, #6
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x160>
 80003bc:	018b      	lsls	r3, r1, #6
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0943      	lsrs	r3, r0, #5
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x16c>
 80003c8:	014b      	lsls	r3, r1, #5
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	0903      	lsrs	r3, r0, #4
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x178>
 80003d4:	010b      	lsls	r3, r1, #4
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	08c3      	lsrs	r3, r0, #3
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x184>
 80003e0:	00cb      	lsls	r3, r1, #3
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	0883      	lsrs	r3, r0, #2
 80003e8:	428b      	cmp	r3, r1
 80003ea:	d301      	bcc.n	80003f0 <__divsi3+0x190>
 80003ec:	008b      	lsls	r3, r1, #2
 80003ee:	1ac0      	subs	r0, r0, r3
 80003f0:	4152      	adcs	r2, r2
 80003f2:	d2d9      	bcs.n	80003a8 <__divsi3+0x148>
 80003f4:	0843      	lsrs	r3, r0, #1
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d301      	bcc.n	80003fe <__divsi3+0x19e>
 80003fa:	004b      	lsls	r3, r1, #1
 80003fc:	1ac0      	subs	r0, r0, r3
 80003fe:	4152      	adcs	r2, r2
 8000400:	1a41      	subs	r1, r0, r1
 8000402:	d200      	bcs.n	8000406 <__divsi3+0x1a6>
 8000404:	4601      	mov	r1, r0
 8000406:	4663      	mov	r3, ip
 8000408:	4152      	adcs	r2, r2
 800040a:	105b      	asrs	r3, r3, #1
 800040c:	4610      	mov	r0, r2
 800040e:	d301      	bcc.n	8000414 <__divsi3+0x1b4>
 8000410:	4240      	negs	r0, r0
 8000412:	2b00      	cmp	r3, #0
 8000414:	d500      	bpl.n	8000418 <__divsi3+0x1b8>
 8000416:	4249      	negs	r1, r1
 8000418:	4770      	bx	lr
 800041a:	4663      	mov	r3, ip
 800041c:	105b      	asrs	r3, r3, #1
 800041e:	d300      	bcc.n	8000422 <__divsi3+0x1c2>
 8000420:	4240      	negs	r0, r0
 8000422:	b501      	push	{r0, lr}
 8000424:	2000      	movs	r0, #0
 8000426:	f000 f805 	bl	8000434 <__aeabi_idiv0>
 800042a:	bd02      	pop	{r1, pc}

0800042c <__aeabi_idivmod>:
 800042c:	2900      	cmp	r1, #0
 800042e:	d0f8      	beq.n	8000422 <__divsi3+0x1c2>
 8000430:	e716      	b.n	8000260 <__divsi3>
 8000432:	4770      	bx	lr

08000434 <__aeabi_idiv0>:
 8000434:	4770      	bx	lr
 8000436:	46c0      	nop			; (mov r8, r8)

08000438 <__aeabi_cdrcmple>:
 8000438:	4684      	mov	ip, r0
 800043a:	0010      	movs	r0, r2
 800043c:	4662      	mov	r2, ip
 800043e:	468c      	mov	ip, r1
 8000440:	0019      	movs	r1, r3
 8000442:	4663      	mov	r3, ip
 8000444:	e000      	b.n	8000448 <__aeabi_cdcmpeq>
 8000446:	46c0      	nop			; (mov r8, r8)

08000448 <__aeabi_cdcmpeq>:
 8000448:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800044a:	f001 fc4f 	bl	8001cec <__ledf2>
 800044e:	2800      	cmp	r0, #0
 8000450:	d401      	bmi.n	8000456 <__aeabi_cdcmpeq+0xe>
 8000452:	2100      	movs	r1, #0
 8000454:	42c8      	cmn	r0, r1
 8000456:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000458 <__aeabi_dcmpeq>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 fb9f 	bl	8001b9c <__eqdf2>
 800045e:	4240      	negs	r0, r0
 8000460:	3001      	adds	r0, #1
 8000462:	bd10      	pop	{r4, pc}

08000464 <__aeabi_dcmplt>:
 8000464:	b510      	push	{r4, lr}
 8000466:	f001 fc41 	bl	8001cec <__ledf2>
 800046a:	2800      	cmp	r0, #0
 800046c:	db01      	blt.n	8000472 <__aeabi_dcmplt+0xe>
 800046e:	2000      	movs	r0, #0
 8000470:	bd10      	pop	{r4, pc}
 8000472:	2001      	movs	r0, #1
 8000474:	bd10      	pop	{r4, pc}
 8000476:	46c0      	nop			; (mov r8, r8)

08000478 <__aeabi_dcmple>:
 8000478:	b510      	push	{r4, lr}
 800047a:	f001 fc37 	bl	8001cec <__ledf2>
 800047e:	2800      	cmp	r0, #0
 8000480:	dd01      	ble.n	8000486 <__aeabi_dcmple+0xe>
 8000482:	2000      	movs	r0, #0
 8000484:	bd10      	pop	{r4, pc}
 8000486:	2001      	movs	r0, #1
 8000488:	bd10      	pop	{r4, pc}
 800048a:	46c0      	nop			; (mov r8, r8)

0800048c <__aeabi_dcmpgt>:
 800048c:	b510      	push	{r4, lr}
 800048e:	f001 fbc7 	bl	8001c20 <__gedf2>
 8000492:	2800      	cmp	r0, #0
 8000494:	dc01      	bgt.n	800049a <__aeabi_dcmpgt+0xe>
 8000496:	2000      	movs	r0, #0
 8000498:	bd10      	pop	{r4, pc}
 800049a:	2001      	movs	r0, #1
 800049c:	bd10      	pop	{r4, pc}
 800049e:	46c0      	nop			; (mov r8, r8)

080004a0 <__aeabi_dcmpge>:
 80004a0:	b510      	push	{r4, lr}
 80004a2:	f001 fbbd 	bl	8001c20 <__gedf2>
 80004a6:	2800      	cmp	r0, #0
 80004a8:	da01      	bge.n	80004ae <__aeabi_dcmpge+0xe>
 80004aa:	2000      	movs	r0, #0
 80004ac:	bd10      	pop	{r4, pc}
 80004ae:	2001      	movs	r0, #1
 80004b0:	bd10      	pop	{r4, pc}
 80004b2:	46c0      	nop			; (mov r8, r8)

080004b4 <__aeabi_d2uiz>:
 80004b4:	b570      	push	{r4, r5, r6, lr}
 80004b6:	2200      	movs	r2, #0
 80004b8:	4b0c      	ldr	r3, [pc, #48]	; (80004ec <__aeabi_d2uiz+0x38>)
 80004ba:	0004      	movs	r4, r0
 80004bc:	000d      	movs	r5, r1
 80004be:	f7ff ffef 	bl	80004a0 <__aeabi_dcmpge>
 80004c2:	2800      	cmp	r0, #0
 80004c4:	d104      	bne.n	80004d0 <__aeabi_d2uiz+0x1c>
 80004c6:	0020      	movs	r0, r4
 80004c8:	0029      	movs	r1, r5
 80004ca:	f002 fa8f 	bl	80029ec <__aeabi_d2iz>
 80004ce:	bd70      	pop	{r4, r5, r6, pc}
 80004d0:	4b06      	ldr	r3, [pc, #24]	; (80004ec <__aeabi_d2uiz+0x38>)
 80004d2:	2200      	movs	r2, #0
 80004d4:	0020      	movs	r0, r4
 80004d6:	0029      	movs	r1, r5
 80004d8:	f001 fed8 	bl	800228c <__aeabi_dsub>
 80004dc:	f002 fa86 	bl	80029ec <__aeabi_d2iz>
 80004e0:	2380      	movs	r3, #128	; 0x80
 80004e2:	061b      	lsls	r3, r3, #24
 80004e4:	469c      	mov	ip, r3
 80004e6:	4460      	add	r0, ip
 80004e8:	e7f1      	b.n	80004ce <__aeabi_d2uiz+0x1a>
 80004ea:	46c0      	nop			; (mov r8, r8)
 80004ec:	41e00000 	.word	0x41e00000

080004f0 <__aeabi_d2lz>:
 80004f0:	b570      	push	{r4, r5, r6, lr}
 80004f2:	0005      	movs	r5, r0
 80004f4:	000c      	movs	r4, r1
 80004f6:	2200      	movs	r2, #0
 80004f8:	2300      	movs	r3, #0
 80004fa:	0028      	movs	r0, r5
 80004fc:	0021      	movs	r1, r4
 80004fe:	f7ff ffb1 	bl	8000464 <__aeabi_dcmplt>
 8000502:	2800      	cmp	r0, #0
 8000504:	d108      	bne.n	8000518 <__aeabi_d2lz+0x28>
 8000506:	0028      	movs	r0, r5
 8000508:	0021      	movs	r1, r4
 800050a:	f000 f80f 	bl	800052c <__aeabi_d2ulz>
 800050e:	0002      	movs	r2, r0
 8000510:	000b      	movs	r3, r1
 8000512:	0010      	movs	r0, r2
 8000514:	0019      	movs	r1, r3
 8000516:	bd70      	pop	{r4, r5, r6, pc}
 8000518:	2380      	movs	r3, #128	; 0x80
 800051a:	061b      	lsls	r3, r3, #24
 800051c:	18e1      	adds	r1, r4, r3
 800051e:	0028      	movs	r0, r5
 8000520:	f000 f804 	bl	800052c <__aeabi_d2ulz>
 8000524:	2300      	movs	r3, #0
 8000526:	4242      	negs	r2, r0
 8000528:	418b      	sbcs	r3, r1
 800052a:	e7f2      	b.n	8000512 <__aeabi_d2lz+0x22>

0800052c <__aeabi_d2ulz>:
 800052c:	b570      	push	{r4, r5, r6, lr}
 800052e:	2200      	movs	r2, #0
 8000530:	4b0b      	ldr	r3, [pc, #44]	; (8000560 <__aeabi_d2ulz+0x34>)
 8000532:	000d      	movs	r5, r1
 8000534:	0004      	movs	r4, r0
 8000536:	f001 fc3d 	bl	8001db4 <__aeabi_dmul>
 800053a:	f7ff ffbb 	bl	80004b4 <__aeabi_d2uiz>
 800053e:	0006      	movs	r6, r0
 8000540:	f002 faba 	bl	8002ab8 <__aeabi_ui2d>
 8000544:	2200      	movs	r2, #0
 8000546:	4b07      	ldr	r3, [pc, #28]	; (8000564 <__aeabi_d2ulz+0x38>)
 8000548:	f001 fc34 	bl	8001db4 <__aeabi_dmul>
 800054c:	0002      	movs	r2, r0
 800054e:	000b      	movs	r3, r1
 8000550:	0020      	movs	r0, r4
 8000552:	0029      	movs	r1, r5
 8000554:	f001 fe9a 	bl	800228c <__aeabi_dsub>
 8000558:	f7ff ffac 	bl	80004b4 <__aeabi_d2uiz>
 800055c:	0031      	movs	r1, r6
 800055e:	bd70      	pop	{r4, r5, r6, pc}
 8000560:	3df00000 	.word	0x3df00000
 8000564:	41f00000 	.word	0x41f00000

08000568 <__aeabi_l2d>:
 8000568:	b570      	push	{r4, r5, r6, lr}
 800056a:	0006      	movs	r6, r0
 800056c:	0008      	movs	r0, r1
 800056e:	f002 fa73 	bl	8002a58 <__aeabi_i2d>
 8000572:	2200      	movs	r2, #0
 8000574:	4b06      	ldr	r3, [pc, #24]	; (8000590 <__aeabi_l2d+0x28>)
 8000576:	f001 fc1d 	bl	8001db4 <__aeabi_dmul>
 800057a:	000d      	movs	r5, r1
 800057c:	0004      	movs	r4, r0
 800057e:	0030      	movs	r0, r6
 8000580:	f002 fa9a 	bl	8002ab8 <__aeabi_ui2d>
 8000584:	002b      	movs	r3, r5
 8000586:	0022      	movs	r2, r4
 8000588:	f000 fcd6 	bl	8000f38 <__aeabi_dadd>
 800058c:	bd70      	pop	{r4, r5, r6, pc}
 800058e:	46c0      	nop			; (mov r8, r8)
 8000590:	41f00000 	.word	0x41f00000

08000594 <__aeabi_fadd>:
 8000594:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000596:	46c6      	mov	lr, r8
 8000598:	0243      	lsls	r3, r0, #9
 800059a:	0a5b      	lsrs	r3, r3, #9
 800059c:	024e      	lsls	r6, r1, #9
 800059e:	0045      	lsls	r5, r0, #1
 80005a0:	004f      	lsls	r7, r1, #1
 80005a2:	00da      	lsls	r2, r3, #3
 80005a4:	0fc4      	lsrs	r4, r0, #31
 80005a6:	469c      	mov	ip, r3
 80005a8:	0a70      	lsrs	r0, r6, #9
 80005aa:	4690      	mov	r8, r2
 80005ac:	b500      	push	{lr}
 80005ae:	0e2d      	lsrs	r5, r5, #24
 80005b0:	0e3f      	lsrs	r7, r7, #24
 80005b2:	0fc9      	lsrs	r1, r1, #31
 80005b4:	09b6      	lsrs	r6, r6, #6
 80005b6:	428c      	cmp	r4, r1
 80005b8:	d04b      	beq.n	8000652 <__aeabi_fadd+0xbe>
 80005ba:	1bea      	subs	r2, r5, r7
 80005bc:	2a00      	cmp	r2, #0
 80005be:	dd36      	ble.n	800062e <__aeabi_fadd+0x9a>
 80005c0:	2f00      	cmp	r7, #0
 80005c2:	d061      	beq.n	8000688 <__aeabi_fadd+0xf4>
 80005c4:	2dff      	cmp	r5, #255	; 0xff
 80005c6:	d100      	bne.n	80005ca <__aeabi_fadd+0x36>
 80005c8:	e0ad      	b.n	8000726 <__aeabi_fadd+0x192>
 80005ca:	2380      	movs	r3, #128	; 0x80
 80005cc:	04db      	lsls	r3, r3, #19
 80005ce:	431e      	orrs	r6, r3
 80005d0:	2a1b      	cmp	r2, #27
 80005d2:	dc00      	bgt.n	80005d6 <__aeabi_fadd+0x42>
 80005d4:	e0d3      	b.n	800077e <__aeabi_fadd+0x1ea>
 80005d6:	2001      	movs	r0, #1
 80005d8:	4643      	mov	r3, r8
 80005da:	1a18      	subs	r0, r3, r0
 80005dc:	0143      	lsls	r3, r0, #5
 80005de:	d400      	bmi.n	80005e2 <__aeabi_fadd+0x4e>
 80005e0:	e08c      	b.n	80006fc <__aeabi_fadd+0x168>
 80005e2:	0180      	lsls	r0, r0, #6
 80005e4:	0987      	lsrs	r7, r0, #6
 80005e6:	0038      	movs	r0, r7
 80005e8:	f002 fb5c 	bl	8002ca4 <__clzsi2>
 80005ec:	3805      	subs	r0, #5
 80005ee:	4087      	lsls	r7, r0
 80005f0:	4285      	cmp	r5, r0
 80005f2:	dc00      	bgt.n	80005f6 <__aeabi_fadd+0x62>
 80005f4:	e0b6      	b.n	8000764 <__aeabi_fadd+0x1d0>
 80005f6:	1a2d      	subs	r5, r5, r0
 80005f8:	48b3      	ldr	r0, [pc, #716]	; (80008c8 <__aeabi_fadd+0x334>)
 80005fa:	4038      	ands	r0, r7
 80005fc:	0743      	lsls	r3, r0, #29
 80005fe:	d004      	beq.n	800060a <__aeabi_fadd+0x76>
 8000600:	230f      	movs	r3, #15
 8000602:	4003      	ands	r3, r0
 8000604:	2b04      	cmp	r3, #4
 8000606:	d000      	beq.n	800060a <__aeabi_fadd+0x76>
 8000608:	3004      	adds	r0, #4
 800060a:	0143      	lsls	r3, r0, #5
 800060c:	d400      	bmi.n	8000610 <__aeabi_fadd+0x7c>
 800060e:	e078      	b.n	8000702 <__aeabi_fadd+0x16e>
 8000610:	1c6a      	adds	r2, r5, #1
 8000612:	2dfe      	cmp	r5, #254	; 0xfe
 8000614:	d065      	beq.n	80006e2 <__aeabi_fadd+0x14e>
 8000616:	0180      	lsls	r0, r0, #6
 8000618:	0a43      	lsrs	r3, r0, #9
 800061a:	469c      	mov	ip, r3
 800061c:	b2d2      	uxtb	r2, r2
 800061e:	4663      	mov	r3, ip
 8000620:	05d0      	lsls	r0, r2, #23
 8000622:	4318      	orrs	r0, r3
 8000624:	07e4      	lsls	r4, r4, #31
 8000626:	4320      	orrs	r0, r4
 8000628:	bc80      	pop	{r7}
 800062a:	46b8      	mov	r8, r7
 800062c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800062e:	2a00      	cmp	r2, #0
 8000630:	d035      	beq.n	800069e <__aeabi_fadd+0x10a>
 8000632:	1b7a      	subs	r2, r7, r5
 8000634:	2d00      	cmp	r5, #0
 8000636:	d000      	beq.n	800063a <__aeabi_fadd+0xa6>
 8000638:	e0af      	b.n	800079a <__aeabi_fadd+0x206>
 800063a:	4643      	mov	r3, r8
 800063c:	2b00      	cmp	r3, #0
 800063e:	d100      	bne.n	8000642 <__aeabi_fadd+0xae>
 8000640:	e0a7      	b.n	8000792 <__aeabi_fadd+0x1fe>
 8000642:	1e53      	subs	r3, r2, #1
 8000644:	2a01      	cmp	r2, #1
 8000646:	d100      	bne.n	800064a <__aeabi_fadd+0xb6>
 8000648:	e12f      	b.n	80008aa <__aeabi_fadd+0x316>
 800064a:	2aff      	cmp	r2, #255	; 0xff
 800064c:	d069      	beq.n	8000722 <__aeabi_fadd+0x18e>
 800064e:	001a      	movs	r2, r3
 8000650:	e0aa      	b.n	80007a8 <__aeabi_fadd+0x214>
 8000652:	1be9      	subs	r1, r5, r7
 8000654:	2900      	cmp	r1, #0
 8000656:	dd70      	ble.n	800073a <__aeabi_fadd+0x1a6>
 8000658:	2f00      	cmp	r7, #0
 800065a:	d037      	beq.n	80006cc <__aeabi_fadd+0x138>
 800065c:	2dff      	cmp	r5, #255	; 0xff
 800065e:	d062      	beq.n	8000726 <__aeabi_fadd+0x192>
 8000660:	2380      	movs	r3, #128	; 0x80
 8000662:	04db      	lsls	r3, r3, #19
 8000664:	431e      	orrs	r6, r3
 8000666:	291b      	cmp	r1, #27
 8000668:	dc00      	bgt.n	800066c <__aeabi_fadd+0xd8>
 800066a:	e0b0      	b.n	80007ce <__aeabi_fadd+0x23a>
 800066c:	2001      	movs	r0, #1
 800066e:	4440      	add	r0, r8
 8000670:	0143      	lsls	r3, r0, #5
 8000672:	d543      	bpl.n	80006fc <__aeabi_fadd+0x168>
 8000674:	3501      	adds	r5, #1
 8000676:	2dff      	cmp	r5, #255	; 0xff
 8000678:	d033      	beq.n	80006e2 <__aeabi_fadd+0x14e>
 800067a:	2301      	movs	r3, #1
 800067c:	4a93      	ldr	r2, [pc, #588]	; (80008cc <__aeabi_fadd+0x338>)
 800067e:	4003      	ands	r3, r0
 8000680:	0840      	lsrs	r0, r0, #1
 8000682:	4010      	ands	r0, r2
 8000684:	4318      	orrs	r0, r3
 8000686:	e7b9      	b.n	80005fc <__aeabi_fadd+0x68>
 8000688:	2e00      	cmp	r6, #0
 800068a:	d100      	bne.n	800068e <__aeabi_fadd+0xfa>
 800068c:	e083      	b.n	8000796 <__aeabi_fadd+0x202>
 800068e:	1e51      	subs	r1, r2, #1
 8000690:	2a01      	cmp	r2, #1
 8000692:	d100      	bne.n	8000696 <__aeabi_fadd+0x102>
 8000694:	e0d8      	b.n	8000848 <__aeabi_fadd+0x2b4>
 8000696:	2aff      	cmp	r2, #255	; 0xff
 8000698:	d045      	beq.n	8000726 <__aeabi_fadd+0x192>
 800069a:	000a      	movs	r2, r1
 800069c:	e798      	b.n	80005d0 <__aeabi_fadd+0x3c>
 800069e:	27fe      	movs	r7, #254	; 0xfe
 80006a0:	1c6a      	adds	r2, r5, #1
 80006a2:	4217      	tst	r7, r2
 80006a4:	d000      	beq.n	80006a8 <__aeabi_fadd+0x114>
 80006a6:	e086      	b.n	80007b6 <__aeabi_fadd+0x222>
 80006a8:	2d00      	cmp	r5, #0
 80006aa:	d000      	beq.n	80006ae <__aeabi_fadd+0x11a>
 80006ac:	e0b7      	b.n	800081e <__aeabi_fadd+0x28a>
 80006ae:	4643      	mov	r3, r8
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d100      	bne.n	80006b6 <__aeabi_fadd+0x122>
 80006b4:	e0f3      	b.n	800089e <__aeabi_fadd+0x30a>
 80006b6:	2200      	movs	r2, #0
 80006b8:	2e00      	cmp	r6, #0
 80006ba:	d0b0      	beq.n	800061e <__aeabi_fadd+0x8a>
 80006bc:	1b98      	subs	r0, r3, r6
 80006be:	0143      	lsls	r3, r0, #5
 80006c0:	d400      	bmi.n	80006c4 <__aeabi_fadd+0x130>
 80006c2:	e0fa      	b.n	80008ba <__aeabi_fadd+0x326>
 80006c4:	4643      	mov	r3, r8
 80006c6:	000c      	movs	r4, r1
 80006c8:	1af0      	subs	r0, r6, r3
 80006ca:	e797      	b.n	80005fc <__aeabi_fadd+0x68>
 80006cc:	2e00      	cmp	r6, #0
 80006ce:	d100      	bne.n	80006d2 <__aeabi_fadd+0x13e>
 80006d0:	e0c8      	b.n	8000864 <__aeabi_fadd+0x2d0>
 80006d2:	1e4a      	subs	r2, r1, #1
 80006d4:	2901      	cmp	r1, #1
 80006d6:	d100      	bne.n	80006da <__aeabi_fadd+0x146>
 80006d8:	e0ae      	b.n	8000838 <__aeabi_fadd+0x2a4>
 80006da:	29ff      	cmp	r1, #255	; 0xff
 80006dc:	d023      	beq.n	8000726 <__aeabi_fadd+0x192>
 80006de:	0011      	movs	r1, r2
 80006e0:	e7c1      	b.n	8000666 <__aeabi_fadd+0xd2>
 80006e2:	2300      	movs	r3, #0
 80006e4:	22ff      	movs	r2, #255	; 0xff
 80006e6:	469c      	mov	ip, r3
 80006e8:	e799      	b.n	800061e <__aeabi_fadd+0x8a>
 80006ea:	21fe      	movs	r1, #254	; 0xfe
 80006ec:	1c6a      	adds	r2, r5, #1
 80006ee:	4211      	tst	r1, r2
 80006f0:	d077      	beq.n	80007e2 <__aeabi_fadd+0x24e>
 80006f2:	2aff      	cmp	r2, #255	; 0xff
 80006f4:	d0f5      	beq.n	80006e2 <__aeabi_fadd+0x14e>
 80006f6:	0015      	movs	r5, r2
 80006f8:	4446      	add	r6, r8
 80006fa:	0870      	lsrs	r0, r6, #1
 80006fc:	0743      	lsls	r3, r0, #29
 80006fe:	d000      	beq.n	8000702 <__aeabi_fadd+0x16e>
 8000700:	e77e      	b.n	8000600 <__aeabi_fadd+0x6c>
 8000702:	08c3      	lsrs	r3, r0, #3
 8000704:	2dff      	cmp	r5, #255	; 0xff
 8000706:	d00e      	beq.n	8000726 <__aeabi_fadd+0x192>
 8000708:	025b      	lsls	r3, r3, #9
 800070a:	0a5b      	lsrs	r3, r3, #9
 800070c:	469c      	mov	ip, r3
 800070e:	b2ea      	uxtb	r2, r5
 8000710:	e785      	b.n	800061e <__aeabi_fadd+0x8a>
 8000712:	2e00      	cmp	r6, #0
 8000714:	d007      	beq.n	8000726 <__aeabi_fadd+0x192>
 8000716:	2280      	movs	r2, #128	; 0x80
 8000718:	03d2      	lsls	r2, r2, #15
 800071a:	4213      	tst	r3, r2
 800071c:	d003      	beq.n	8000726 <__aeabi_fadd+0x192>
 800071e:	4210      	tst	r0, r2
 8000720:	d101      	bne.n	8000726 <__aeabi_fadd+0x192>
 8000722:	000c      	movs	r4, r1
 8000724:	0003      	movs	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d0db      	beq.n	80006e2 <__aeabi_fadd+0x14e>
 800072a:	2080      	movs	r0, #128	; 0x80
 800072c:	03c0      	lsls	r0, r0, #15
 800072e:	4318      	orrs	r0, r3
 8000730:	0240      	lsls	r0, r0, #9
 8000732:	0a43      	lsrs	r3, r0, #9
 8000734:	469c      	mov	ip, r3
 8000736:	22ff      	movs	r2, #255	; 0xff
 8000738:	e771      	b.n	800061e <__aeabi_fadd+0x8a>
 800073a:	2900      	cmp	r1, #0
 800073c:	d0d5      	beq.n	80006ea <__aeabi_fadd+0x156>
 800073e:	1b7a      	subs	r2, r7, r5
 8000740:	2d00      	cmp	r5, #0
 8000742:	d160      	bne.n	8000806 <__aeabi_fadd+0x272>
 8000744:	4643      	mov	r3, r8
 8000746:	2b00      	cmp	r3, #0
 8000748:	d024      	beq.n	8000794 <__aeabi_fadd+0x200>
 800074a:	1e53      	subs	r3, r2, #1
 800074c:	2a01      	cmp	r2, #1
 800074e:	d073      	beq.n	8000838 <__aeabi_fadd+0x2a4>
 8000750:	2aff      	cmp	r2, #255	; 0xff
 8000752:	d0e7      	beq.n	8000724 <__aeabi_fadd+0x190>
 8000754:	001a      	movs	r2, r3
 8000756:	2a1b      	cmp	r2, #27
 8000758:	dc00      	bgt.n	800075c <__aeabi_fadd+0x1c8>
 800075a:	e085      	b.n	8000868 <__aeabi_fadd+0x2d4>
 800075c:	2001      	movs	r0, #1
 800075e:	003d      	movs	r5, r7
 8000760:	1980      	adds	r0, r0, r6
 8000762:	e785      	b.n	8000670 <__aeabi_fadd+0xdc>
 8000764:	2320      	movs	r3, #32
 8000766:	003a      	movs	r2, r7
 8000768:	1b45      	subs	r5, r0, r5
 800076a:	0038      	movs	r0, r7
 800076c:	3501      	adds	r5, #1
 800076e:	40ea      	lsrs	r2, r5
 8000770:	1b5d      	subs	r5, r3, r5
 8000772:	40a8      	lsls	r0, r5
 8000774:	1e43      	subs	r3, r0, #1
 8000776:	4198      	sbcs	r0, r3
 8000778:	2500      	movs	r5, #0
 800077a:	4310      	orrs	r0, r2
 800077c:	e73e      	b.n	80005fc <__aeabi_fadd+0x68>
 800077e:	2320      	movs	r3, #32
 8000780:	0030      	movs	r0, r6
 8000782:	1a9b      	subs	r3, r3, r2
 8000784:	0031      	movs	r1, r6
 8000786:	4098      	lsls	r0, r3
 8000788:	40d1      	lsrs	r1, r2
 800078a:	1e43      	subs	r3, r0, #1
 800078c:	4198      	sbcs	r0, r3
 800078e:	4308      	orrs	r0, r1
 8000790:	e722      	b.n	80005d8 <__aeabi_fadd+0x44>
 8000792:	000c      	movs	r4, r1
 8000794:	0003      	movs	r3, r0
 8000796:	0015      	movs	r5, r2
 8000798:	e7b4      	b.n	8000704 <__aeabi_fadd+0x170>
 800079a:	2fff      	cmp	r7, #255	; 0xff
 800079c:	d0c1      	beq.n	8000722 <__aeabi_fadd+0x18e>
 800079e:	2380      	movs	r3, #128	; 0x80
 80007a0:	4640      	mov	r0, r8
 80007a2:	04db      	lsls	r3, r3, #19
 80007a4:	4318      	orrs	r0, r3
 80007a6:	4680      	mov	r8, r0
 80007a8:	2a1b      	cmp	r2, #27
 80007aa:	dd51      	ble.n	8000850 <__aeabi_fadd+0x2bc>
 80007ac:	2001      	movs	r0, #1
 80007ae:	000c      	movs	r4, r1
 80007b0:	003d      	movs	r5, r7
 80007b2:	1a30      	subs	r0, r6, r0
 80007b4:	e712      	b.n	80005dc <__aeabi_fadd+0x48>
 80007b6:	4643      	mov	r3, r8
 80007b8:	1b9f      	subs	r7, r3, r6
 80007ba:	017b      	lsls	r3, r7, #5
 80007bc:	d42b      	bmi.n	8000816 <__aeabi_fadd+0x282>
 80007be:	2f00      	cmp	r7, #0
 80007c0:	d000      	beq.n	80007c4 <__aeabi_fadd+0x230>
 80007c2:	e710      	b.n	80005e6 <__aeabi_fadd+0x52>
 80007c4:	2300      	movs	r3, #0
 80007c6:	2400      	movs	r4, #0
 80007c8:	2200      	movs	r2, #0
 80007ca:	469c      	mov	ip, r3
 80007cc:	e727      	b.n	800061e <__aeabi_fadd+0x8a>
 80007ce:	2320      	movs	r3, #32
 80007d0:	0032      	movs	r2, r6
 80007d2:	0030      	movs	r0, r6
 80007d4:	40ca      	lsrs	r2, r1
 80007d6:	1a59      	subs	r1, r3, r1
 80007d8:	4088      	lsls	r0, r1
 80007da:	1e43      	subs	r3, r0, #1
 80007dc:	4198      	sbcs	r0, r3
 80007de:	4310      	orrs	r0, r2
 80007e0:	e745      	b.n	800066e <__aeabi_fadd+0xda>
 80007e2:	2d00      	cmp	r5, #0
 80007e4:	d14a      	bne.n	800087c <__aeabi_fadd+0x2e8>
 80007e6:	4643      	mov	r3, r8
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d063      	beq.n	80008b4 <__aeabi_fadd+0x320>
 80007ec:	2200      	movs	r2, #0
 80007ee:	2e00      	cmp	r6, #0
 80007f0:	d100      	bne.n	80007f4 <__aeabi_fadd+0x260>
 80007f2:	e714      	b.n	800061e <__aeabi_fadd+0x8a>
 80007f4:	0030      	movs	r0, r6
 80007f6:	4440      	add	r0, r8
 80007f8:	0143      	lsls	r3, r0, #5
 80007fa:	d400      	bmi.n	80007fe <__aeabi_fadd+0x26a>
 80007fc:	e77e      	b.n	80006fc <__aeabi_fadd+0x168>
 80007fe:	4b32      	ldr	r3, [pc, #200]	; (80008c8 <__aeabi_fadd+0x334>)
 8000800:	3501      	adds	r5, #1
 8000802:	4018      	ands	r0, r3
 8000804:	e77a      	b.n	80006fc <__aeabi_fadd+0x168>
 8000806:	2fff      	cmp	r7, #255	; 0xff
 8000808:	d08c      	beq.n	8000724 <__aeabi_fadd+0x190>
 800080a:	2380      	movs	r3, #128	; 0x80
 800080c:	4641      	mov	r1, r8
 800080e:	04db      	lsls	r3, r3, #19
 8000810:	4319      	orrs	r1, r3
 8000812:	4688      	mov	r8, r1
 8000814:	e79f      	b.n	8000756 <__aeabi_fadd+0x1c2>
 8000816:	4643      	mov	r3, r8
 8000818:	000c      	movs	r4, r1
 800081a:	1af7      	subs	r7, r6, r3
 800081c:	e6e3      	b.n	80005e6 <__aeabi_fadd+0x52>
 800081e:	4642      	mov	r2, r8
 8000820:	2a00      	cmp	r2, #0
 8000822:	d000      	beq.n	8000826 <__aeabi_fadd+0x292>
 8000824:	e775      	b.n	8000712 <__aeabi_fadd+0x17e>
 8000826:	2e00      	cmp	r6, #0
 8000828:	d000      	beq.n	800082c <__aeabi_fadd+0x298>
 800082a:	e77a      	b.n	8000722 <__aeabi_fadd+0x18e>
 800082c:	2380      	movs	r3, #128	; 0x80
 800082e:	03db      	lsls	r3, r3, #15
 8000830:	2400      	movs	r4, #0
 8000832:	469c      	mov	ip, r3
 8000834:	22ff      	movs	r2, #255	; 0xff
 8000836:	e6f2      	b.n	800061e <__aeabi_fadd+0x8a>
 8000838:	0030      	movs	r0, r6
 800083a:	4440      	add	r0, r8
 800083c:	2501      	movs	r5, #1
 800083e:	0143      	lsls	r3, r0, #5
 8000840:	d400      	bmi.n	8000844 <__aeabi_fadd+0x2b0>
 8000842:	e75b      	b.n	80006fc <__aeabi_fadd+0x168>
 8000844:	2502      	movs	r5, #2
 8000846:	e718      	b.n	800067a <__aeabi_fadd+0xe6>
 8000848:	4643      	mov	r3, r8
 800084a:	2501      	movs	r5, #1
 800084c:	1b98      	subs	r0, r3, r6
 800084e:	e6c5      	b.n	80005dc <__aeabi_fadd+0x48>
 8000850:	2320      	movs	r3, #32
 8000852:	4644      	mov	r4, r8
 8000854:	4640      	mov	r0, r8
 8000856:	40d4      	lsrs	r4, r2
 8000858:	1a9a      	subs	r2, r3, r2
 800085a:	4090      	lsls	r0, r2
 800085c:	1e43      	subs	r3, r0, #1
 800085e:	4198      	sbcs	r0, r3
 8000860:	4320      	orrs	r0, r4
 8000862:	e7a4      	b.n	80007ae <__aeabi_fadd+0x21a>
 8000864:	000d      	movs	r5, r1
 8000866:	e74d      	b.n	8000704 <__aeabi_fadd+0x170>
 8000868:	2320      	movs	r3, #32
 800086a:	4641      	mov	r1, r8
 800086c:	4640      	mov	r0, r8
 800086e:	40d1      	lsrs	r1, r2
 8000870:	1a9a      	subs	r2, r3, r2
 8000872:	4090      	lsls	r0, r2
 8000874:	1e43      	subs	r3, r0, #1
 8000876:	4198      	sbcs	r0, r3
 8000878:	4308      	orrs	r0, r1
 800087a:	e770      	b.n	800075e <__aeabi_fadd+0x1ca>
 800087c:	4642      	mov	r2, r8
 800087e:	2a00      	cmp	r2, #0
 8000880:	d100      	bne.n	8000884 <__aeabi_fadd+0x2f0>
 8000882:	e74f      	b.n	8000724 <__aeabi_fadd+0x190>
 8000884:	2e00      	cmp	r6, #0
 8000886:	d100      	bne.n	800088a <__aeabi_fadd+0x2f6>
 8000888:	e74d      	b.n	8000726 <__aeabi_fadd+0x192>
 800088a:	2280      	movs	r2, #128	; 0x80
 800088c:	03d2      	lsls	r2, r2, #15
 800088e:	4213      	tst	r3, r2
 8000890:	d100      	bne.n	8000894 <__aeabi_fadd+0x300>
 8000892:	e748      	b.n	8000726 <__aeabi_fadd+0x192>
 8000894:	4210      	tst	r0, r2
 8000896:	d000      	beq.n	800089a <__aeabi_fadd+0x306>
 8000898:	e745      	b.n	8000726 <__aeabi_fadd+0x192>
 800089a:	0003      	movs	r3, r0
 800089c:	e743      	b.n	8000726 <__aeabi_fadd+0x192>
 800089e:	2e00      	cmp	r6, #0
 80008a0:	d090      	beq.n	80007c4 <__aeabi_fadd+0x230>
 80008a2:	000c      	movs	r4, r1
 80008a4:	4684      	mov	ip, r0
 80008a6:	2200      	movs	r2, #0
 80008a8:	e6b9      	b.n	800061e <__aeabi_fadd+0x8a>
 80008aa:	4643      	mov	r3, r8
 80008ac:	000c      	movs	r4, r1
 80008ae:	1af0      	subs	r0, r6, r3
 80008b0:	3501      	adds	r5, #1
 80008b2:	e693      	b.n	80005dc <__aeabi_fadd+0x48>
 80008b4:	4684      	mov	ip, r0
 80008b6:	2200      	movs	r2, #0
 80008b8:	e6b1      	b.n	800061e <__aeabi_fadd+0x8a>
 80008ba:	2800      	cmp	r0, #0
 80008bc:	d000      	beq.n	80008c0 <__aeabi_fadd+0x32c>
 80008be:	e71d      	b.n	80006fc <__aeabi_fadd+0x168>
 80008c0:	2300      	movs	r3, #0
 80008c2:	2400      	movs	r4, #0
 80008c4:	469c      	mov	ip, r3
 80008c6:	e6aa      	b.n	800061e <__aeabi_fadd+0x8a>
 80008c8:	fbffffff 	.word	0xfbffffff
 80008cc:	7dffffff 	.word	0x7dffffff

080008d0 <__aeabi_fdiv>:
 80008d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008d2:	464f      	mov	r7, r9
 80008d4:	4646      	mov	r6, r8
 80008d6:	46d6      	mov	lr, sl
 80008d8:	0245      	lsls	r5, r0, #9
 80008da:	b5c0      	push	{r6, r7, lr}
 80008dc:	0047      	lsls	r7, r0, #1
 80008de:	1c0c      	adds	r4, r1, #0
 80008e0:	0a6d      	lsrs	r5, r5, #9
 80008e2:	0e3f      	lsrs	r7, r7, #24
 80008e4:	0fc6      	lsrs	r6, r0, #31
 80008e6:	2f00      	cmp	r7, #0
 80008e8:	d100      	bne.n	80008ec <__aeabi_fdiv+0x1c>
 80008ea:	e070      	b.n	80009ce <__aeabi_fdiv+0xfe>
 80008ec:	2fff      	cmp	r7, #255	; 0xff
 80008ee:	d100      	bne.n	80008f2 <__aeabi_fdiv+0x22>
 80008f0:	e075      	b.n	80009de <__aeabi_fdiv+0x10e>
 80008f2:	00eb      	lsls	r3, r5, #3
 80008f4:	2580      	movs	r5, #128	; 0x80
 80008f6:	04ed      	lsls	r5, r5, #19
 80008f8:	431d      	orrs	r5, r3
 80008fa:	2300      	movs	r3, #0
 80008fc:	4699      	mov	r9, r3
 80008fe:	469a      	mov	sl, r3
 8000900:	3f7f      	subs	r7, #127	; 0x7f
 8000902:	0260      	lsls	r0, r4, #9
 8000904:	0a43      	lsrs	r3, r0, #9
 8000906:	4698      	mov	r8, r3
 8000908:	0063      	lsls	r3, r4, #1
 800090a:	0e1b      	lsrs	r3, r3, #24
 800090c:	0fe4      	lsrs	r4, r4, #31
 800090e:	2b00      	cmp	r3, #0
 8000910:	d04e      	beq.n	80009b0 <__aeabi_fdiv+0xe0>
 8000912:	2bff      	cmp	r3, #255	; 0xff
 8000914:	d046      	beq.n	80009a4 <__aeabi_fdiv+0xd4>
 8000916:	4642      	mov	r2, r8
 8000918:	00d0      	lsls	r0, r2, #3
 800091a:	2280      	movs	r2, #128	; 0x80
 800091c:	04d2      	lsls	r2, r2, #19
 800091e:	4302      	orrs	r2, r0
 8000920:	4690      	mov	r8, r2
 8000922:	2200      	movs	r2, #0
 8000924:	3b7f      	subs	r3, #127	; 0x7f
 8000926:	0031      	movs	r1, r6
 8000928:	1aff      	subs	r7, r7, r3
 800092a:	464b      	mov	r3, r9
 800092c:	4061      	eors	r1, r4
 800092e:	b2c9      	uxtb	r1, r1
 8000930:	4313      	orrs	r3, r2
 8000932:	2b0f      	cmp	r3, #15
 8000934:	d900      	bls.n	8000938 <__aeabi_fdiv+0x68>
 8000936:	e0b5      	b.n	8000aa4 <__aeabi_fdiv+0x1d4>
 8000938:	486e      	ldr	r0, [pc, #440]	; (8000af4 <__aeabi_fdiv+0x224>)
 800093a:	009b      	lsls	r3, r3, #2
 800093c:	58c3      	ldr	r3, [r0, r3]
 800093e:	469f      	mov	pc, r3
 8000940:	2300      	movs	r3, #0
 8000942:	4698      	mov	r8, r3
 8000944:	0026      	movs	r6, r4
 8000946:	4645      	mov	r5, r8
 8000948:	4692      	mov	sl, r2
 800094a:	4653      	mov	r3, sl
 800094c:	2b02      	cmp	r3, #2
 800094e:	d100      	bne.n	8000952 <__aeabi_fdiv+0x82>
 8000950:	e089      	b.n	8000a66 <__aeabi_fdiv+0x196>
 8000952:	2b03      	cmp	r3, #3
 8000954:	d100      	bne.n	8000958 <__aeabi_fdiv+0x88>
 8000956:	e09e      	b.n	8000a96 <__aeabi_fdiv+0x1c6>
 8000958:	2b01      	cmp	r3, #1
 800095a:	d018      	beq.n	800098e <__aeabi_fdiv+0xbe>
 800095c:	003b      	movs	r3, r7
 800095e:	337f      	adds	r3, #127	; 0x7f
 8000960:	2b00      	cmp	r3, #0
 8000962:	dd69      	ble.n	8000a38 <__aeabi_fdiv+0x168>
 8000964:	076a      	lsls	r2, r5, #29
 8000966:	d004      	beq.n	8000972 <__aeabi_fdiv+0xa2>
 8000968:	220f      	movs	r2, #15
 800096a:	402a      	ands	r2, r5
 800096c:	2a04      	cmp	r2, #4
 800096e:	d000      	beq.n	8000972 <__aeabi_fdiv+0xa2>
 8000970:	3504      	adds	r5, #4
 8000972:	012a      	lsls	r2, r5, #4
 8000974:	d503      	bpl.n	800097e <__aeabi_fdiv+0xae>
 8000976:	4b60      	ldr	r3, [pc, #384]	; (8000af8 <__aeabi_fdiv+0x228>)
 8000978:	401d      	ands	r5, r3
 800097a:	003b      	movs	r3, r7
 800097c:	3380      	adds	r3, #128	; 0x80
 800097e:	2bfe      	cmp	r3, #254	; 0xfe
 8000980:	dd00      	ble.n	8000984 <__aeabi_fdiv+0xb4>
 8000982:	e070      	b.n	8000a66 <__aeabi_fdiv+0x196>
 8000984:	01ad      	lsls	r5, r5, #6
 8000986:	0a6d      	lsrs	r5, r5, #9
 8000988:	b2d8      	uxtb	r0, r3
 800098a:	e002      	b.n	8000992 <__aeabi_fdiv+0xc2>
 800098c:	000e      	movs	r6, r1
 800098e:	2000      	movs	r0, #0
 8000990:	2500      	movs	r5, #0
 8000992:	05c0      	lsls	r0, r0, #23
 8000994:	4328      	orrs	r0, r5
 8000996:	07f6      	lsls	r6, r6, #31
 8000998:	4330      	orrs	r0, r6
 800099a:	bce0      	pop	{r5, r6, r7}
 800099c:	46ba      	mov	sl, r7
 800099e:	46b1      	mov	r9, r6
 80009a0:	46a8      	mov	r8, r5
 80009a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80009a4:	4643      	mov	r3, r8
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d13f      	bne.n	8000a2a <__aeabi_fdiv+0x15a>
 80009aa:	2202      	movs	r2, #2
 80009ac:	3fff      	subs	r7, #255	; 0xff
 80009ae:	e003      	b.n	80009b8 <__aeabi_fdiv+0xe8>
 80009b0:	4643      	mov	r3, r8
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d12d      	bne.n	8000a12 <__aeabi_fdiv+0x142>
 80009b6:	2201      	movs	r2, #1
 80009b8:	0031      	movs	r1, r6
 80009ba:	464b      	mov	r3, r9
 80009bc:	4061      	eors	r1, r4
 80009be:	b2c9      	uxtb	r1, r1
 80009c0:	4313      	orrs	r3, r2
 80009c2:	2b0f      	cmp	r3, #15
 80009c4:	d834      	bhi.n	8000a30 <__aeabi_fdiv+0x160>
 80009c6:	484d      	ldr	r0, [pc, #308]	; (8000afc <__aeabi_fdiv+0x22c>)
 80009c8:	009b      	lsls	r3, r3, #2
 80009ca:	58c3      	ldr	r3, [r0, r3]
 80009cc:	469f      	mov	pc, r3
 80009ce:	2d00      	cmp	r5, #0
 80009d0:	d113      	bne.n	80009fa <__aeabi_fdiv+0x12a>
 80009d2:	2304      	movs	r3, #4
 80009d4:	4699      	mov	r9, r3
 80009d6:	3b03      	subs	r3, #3
 80009d8:	2700      	movs	r7, #0
 80009da:	469a      	mov	sl, r3
 80009dc:	e791      	b.n	8000902 <__aeabi_fdiv+0x32>
 80009de:	2d00      	cmp	r5, #0
 80009e0:	d105      	bne.n	80009ee <__aeabi_fdiv+0x11e>
 80009e2:	2308      	movs	r3, #8
 80009e4:	4699      	mov	r9, r3
 80009e6:	3b06      	subs	r3, #6
 80009e8:	27ff      	movs	r7, #255	; 0xff
 80009ea:	469a      	mov	sl, r3
 80009ec:	e789      	b.n	8000902 <__aeabi_fdiv+0x32>
 80009ee:	230c      	movs	r3, #12
 80009f0:	4699      	mov	r9, r3
 80009f2:	3b09      	subs	r3, #9
 80009f4:	27ff      	movs	r7, #255	; 0xff
 80009f6:	469a      	mov	sl, r3
 80009f8:	e783      	b.n	8000902 <__aeabi_fdiv+0x32>
 80009fa:	0028      	movs	r0, r5
 80009fc:	f002 f952 	bl	8002ca4 <__clzsi2>
 8000a00:	2776      	movs	r7, #118	; 0x76
 8000a02:	1f43      	subs	r3, r0, #5
 8000a04:	409d      	lsls	r5, r3
 8000a06:	2300      	movs	r3, #0
 8000a08:	427f      	negs	r7, r7
 8000a0a:	4699      	mov	r9, r3
 8000a0c:	469a      	mov	sl, r3
 8000a0e:	1a3f      	subs	r7, r7, r0
 8000a10:	e777      	b.n	8000902 <__aeabi_fdiv+0x32>
 8000a12:	4640      	mov	r0, r8
 8000a14:	f002 f946 	bl	8002ca4 <__clzsi2>
 8000a18:	4642      	mov	r2, r8
 8000a1a:	1f43      	subs	r3, r0, #5
 8000a1c:	409a      	lsls	r2, r3
 8000a1e:	2376      	movs	r3, #118	; 0x76
 8000a20:	425b      	negs	r3, r3
 8000a22:	4690      	mov	r8, r2
 8000a24:	1a1b      	subs	r3, r3, r0
 8000a26:	2200      	movs	r2, #0
 8000a28:	e77d      	b.n	8000926 <__aeabi_fdiv+0x56>
 8000a2a:	23ff      	movs	r3, #255	; 0xff
 8000a2c:	2203      	movs	r2, #3
 8000a2e:	e77a      	b.n	8000926 <__aeabi_fdiv+0x56>
 8000a30:	000e      	movs	r6, r1
 8000a32:	20ff      	movs	r0, #255	; 0xff
 8000a34:	2500      	movs	r5, #0
 8000a36:	e7ac      	b.n	8000992 <__aeabi_fdiv+0xc2>
 8000a38:	2001      	movs	r0, #1
 8000a3a:	1ac0      	subs	r0, r0, r3
 8000a3c:	281b      	cmp	r0, #27
 8000a3e:	dca6      	bgt.n	800098e <__aeabi_fdiv+0xbe>
 8000a40:	379e      	adds	r7, #158	; 0x9e
 8000a42:	002a      	movs	r2, r5
 8000a44:	40bd      	lsls	r5, r7
 8000a46:	40c2      	lsrs	r2, r0
 8000a48:	1e6b      	subs	r3, r5, #1
 8000a4a:	419d      	sbcs	r5, r3
 8000a4c:	4315      	orrs	r5, r2
 8000a4e:	076b      	lsls	r3, r5, #29
 8000a50:	d004      	beq.n	8000a5c <__aeabi_fdiv+0x18c>
 8000a52:	230f      	movs	r3, #15
 8000a54:	402b      	ands	r3, r5
 8000a56:	2b04      	cmp	r3, #4
 8000a58:	d000      	beq.n	8000a5c <__aeabi_fdiv+0x18c>
 8000a5a:	3504      	adds	r5, #4
 8000a5c:	016b      	lsls	r3, r5, #5
 8000a5e:	d544      	bpl.n	8000aea <__aeabi_fdiv+0x21a>
 8000a60:	2001      	movs	r0, #1
 8000a62:	2500      	movs	r5, #0
 8000a64:	e795      	b.n	8000992 <__aeabi_fdiv+0xc2>
 8000a66:	20ff      	movs	r0, #255	; 0xff
 8000a68:	2500      	movs	r5, #0
 8000a6a:	e792      	b.n	8000992 <__aeabi_fdiv+0xc2>
 8000a6c:	2580      	movs	r5, #128	; 0x80
 8000a6e:	2600      	movs	r6, #0
 8000a70:	20ff      	movs	r0, #255	; 0xff
 8000a72:	03ed      	lsls	r5, r5, #15
 8000a74:	e78d      	b.n	8000992 <__aeabi_fdiv+0xc2>
 8000a76:	2300      	movs	r3, #0
 8000a78:	4698      	mov	r8, r3
 8000a7a:	2080      	movs	r0, #128	; 0x80
 8000a7c:	03c0      	lsls	r0, r0, #15
 8000a7e:	4205      	tst	r5, r0
 8000a80:	d009      	beq.n	8000a96 <__aeabi_fdiv+0x1c6>
 8000a82:	4643      	mov	r3, r8
 8000a84:	4203      	tst	r3, r0
 8000a86:	d106      	bne.n	8000a96 <__aeabi_fdiv+0x1c6>
 8000a88:	4645      	mov	r5, r8
 8000a8a:	4305      	orrs	r5, r0
 8000a8c:	026d      	lsls	r5, r5, #9
 8000a8e:	0026      	movs	r6, r4
 8000a90:	20ff      	movs	r0, #255	; 0xff
 8000a92:	0a6d      	lsrs	r5, r5, #9
 8000a94:	e77d      	b.n	8000992 <__aeabi_fdiv+0xc2>
 8000a96:	2080      	movs	r0, #128	; 0x80
 8000a98:	03c0      	lsls	r0, r0, #15
 8000a9a:	4305      	orrs	r5, r0
 8000a9c:	026d      	lsls	r5, r5, #9
 8000a9e:	20ff      	movs	r0, #255	; 0xff
 8000aa0:	0a6d      	lsrs	r5, r5, #9
 8000aa2:	e776      	b.n	8000992 <__aeabi_fdiv+0xc2>
 8000aa4:	4642      	mov	r2, r8
 8000aa6:	016b      	lsls	r3, r5, #5
 8000aa8:	0150      	lsls	r0, r2, #5
 8000aaa:	4283      	cmp	r3, r0
 8000aac:	d219      	bcs.n	8000ae2 <__aeabi_fdiv+0x212>
 8000aae:	221b      	movs	r2, #27
 8000ab0:	2500      	movs	r5, #0
 8000ab2:	3f01      	subs	r7, #1
 8000ab4:	2601      	movs	r6, #1
 8000ab6:	001c      	movs	r4, r3
 8000ab8:	006d      	lsls	r5, r5, #1
 8000aba:	005b      	lsls	r3, r3, #1
 8000abc:	2c00      	cmp	r4, #0
 8000abe:	db01      	blt.n	8000ac4 <__aeabi_fdiv+0x1f4>
 8000ac0:	4298      	cmp	r0, r3
 8000ac2:	d801      	bhi.n	8000ac8 <__aeabi_fdiv+0x1f8>
 8000ac4:	1a1b      	subs	r3, r3, r0
 8000ac6:	4335      	orrs	r5, r6
 8000ac8:	3a01      	subs	r2, #1
 8000aca:	2a00      	cmp	r2, #0
 8000acc:	d1f3      	bne.n	8000ab6 <__aeabi_fdiv+0x1e6>
 8000ace:	1e5a      	subs	r2, r3, #1
 8000ad0:	4193      	sbcs	r3, r2
 8000ad2:	431d      	orrs	r5, r3
 8000ad4:	003b      	movs	r3, r7
 8000ad6:	337f      	adds	r3, #127	; 0x7f
 8000ad8:	000e      	movs	r6, r1
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	dd00      	ble.n	8000ae0 <__aeabi_fdiv+0x210>
 8000ade:	e741      	b.n	8000964 <__aeabi_fdiv+0x94>
 8000ae0:	e7aa      	b.n	8000a38 <__aeabi_fdiv+0x168>
 8000ae2:	221a      	movs	r2, #26
 8000ae4:	2501      	movs	r5, #1
 8000ae6:	1a1b      	subs	r3, r3, r0
 8000ae8:	e7e4      	b.n	8000ab4 <__aeabi_fdiv+0x1e4>
 8000aea:	01ad      	lsls	r5, r5, #6
 8000aec:	2000      	movs	r0, #0
 8000aee:	0a6d      	lsrs	r5, r5, #9
 8000af0:	e74f      	b.n	8000992 <__aeabi_fdiv+0xc2>
 8000af2:	46c0      	nop			; (mov r8, r8)
 8000af4:	0800b258 	.word	0x0800b258
 8000af8:	f7ffffff 	.word	0xf7ffffff
 8000afc:	0800b298 	.word	0x0800b298

08000b00 <__aeabi_fsub>:
 8000b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b02:	46ce      	mov	lr, r9
 8000b04:	4647      	mov	r7, r8
 8000b06:	0243      	lsls	r3, r0, #9
 8000b08:	0a5b      	lsrs	r3, r3, #9
 8000b0a:	024e      	lsls	r6, r1, #9
 8000b0c:	00da      	lsls	r2, r3, #3
 8000b0e:	4694      	mov	ip, r2
 8000b10:	0a72      	lsrs	r2, r6, #9
 8000b12:	4691      	mov	r9, r2
 8000b14:	0045      	lsls	r5, r0, #1
 8000b16:	004a      	lsls	r2, r1, #1
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	0e2d      	lsrs	r5, r5, #24
 8000b1c:	001f      	movs	r7, r3
 8000b1e:	0fc4      	lsrs	r4, r0, #31
 8000b20:	0e12      	lsrs	r2, r2, #24
 8000b22:	0fc9      	lsrs	r1, r1, #31
 8000b24:	09b6      	lsrs	r6, r6, #6
 8000b26:	2aff      	cmp	r2, #255	; 0xff
 8000b28:	d05b      	beq.n	8000be2 <__aeabi_fsub+0xe2>
 8000b2a:	2001      	movs	r0, #1
 8000b2c:	4041      	eors	r1, r0
 8000b2e:	428c      	cmp	r4, r1
 8000b30:	d039      	beq.n	8000ba6 <__aeabi_fsub+0xa6>
 8000b32:	1aa8      	subs	r0, r5, r2
 8000b34:	2800      	cmp	r0, #0
 8000b36:	dd5a      	ble.n	8000bee <__aeabi_fsub+0xee>
 8000b38:	2a00      	cmp	r2, #0
 8000b3a:	d06a      	beq.n	8000c12 <__aeabi_fsub+0x112>
 8000b3c:	2dff      	cmp	r5, #255	; 0xff
 8000b3e:	d100      	bne.n	8000b42 <__aeabi_fsub+0x42>
 8000b40:	e0d9      	b.n	8000cf6 <__aeabi_fsub+0x1f6>
 8000b42:	2280      	movs	r2, #128	; 0x80
 8000b44:	04d2      	lsls	r2, r2, #19
 8000b46:	4316      	orrs	r6, r2
 8000b48:	281b      	cmp	r0, #27
 8000b4a:	dc00      	bgt.n	8000b4e <__aeabi_fsub+0x4e>
 8000b4c:	e0e9      	b.n	8000d22 <__aeabi_fsub+0x222>
 8000b4e:	2001      	movs	r0, #1
 8000b50:	4663      	mov	r3, ip
 8000b52:	1a18      	subs	r0, r3, r0
 8000b54:	0143      	lsls	r3, r0, #5
 8000b56:	d400      	bmi.n	8000b5a <__aeabi_fsub+0x5a>
 8000b58:	e0b4      	b.n	8000cc4 <__aeabi_fsub+0x1c4>
 8000b5a:	0180      	lsls	r0, r0, #6
 8000b5c:	0987      	lsrs	r7, r0, #6
 8000b5e:	0038      	movs	r0, r7
 8000b60:	f002 f8a0 	bl	8002ca4 <__clzsi2>
 8000b64:	3805      	subs	r0, #5
 8000b66:	4087      	lsls	r7, r0
 8000b68:	4285      	cmp	r5, r0
 8000b6a:	dc00      	bgt.n	8000b6e <__aeabi_fsub+0x6e>
 8000b6c:	e0cc      	b.n	8000d08 <__aeabi_fsub+0x208>
 8000b6e:	1a2d      	subs	r5, r5, r0
 8000b70:	48b5      	ldr	r0, [pc, #724]	; (8000e48 <__aeabi_fsub+0x348>)
 8000b72:	4038      	ands	r0, r7
 8000b74:	0743      	lsls	r3, r0, #29
 8000b76:	d004      	beq.n	8000b82 <__aeabi_fsub+0x82>
 8000b78:	230f      	movs	r3, #15
 8000b7a:	4003      	ands	r3, r0
 8000b7c:	2b04      	cmp	r3, #4
 8000b7e:	d000      	beq.n	8000b82 <__aeabi_fsub+0x82>
 8000b80:	3004      	adds	r0, #4
 8000b82:	0143      	lsls	r3, r0, #5
 8000b84:	d400      	bmi.n	8000b88 <__aeabi_fsub+0x88>
 8000b86:	e0a0      	b.n	8000cca <__aeabi_fsub+0x1ca>
 8000b88:	1c6a      	adds	r2, r5, #1
 8000b8a:	2dfe      	cmp	r5, #254	; 0xfe
 8000b8c:	d100      	bne.n	8000b90 <__aeabi_fsub+0x90>
 8000b8e:	e08d      	b.n	8000cac <__aeabi_fsub+0x1ac>
 8000b90:	0180      	lsls	r0, r0, #6
 8000b92:	0a47      	lsrs	r7, r0, #9
 8000b94:	b2d2      	uxtb	r2, r2
 8000b96:	05d0      	lsls	r0, r2, #23
 8000b98:	4338      	orrs	r0, r7
 8000b9a:	07e4      	lsls	r4, r4, #31
 8000b9c:	4320      	orrs	r0, r4
 8000b9e:	bcc0      	pop	{r6, r7}
 8000ba0:	46b9      	mov	r9, r7
 8000ba2:	46b0      	mov	r8, r6
 8000ba4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000ba6:	1aa8      	subs	r0, r5, r2
 8000ba8:	4680      	mov	r8, r0
 8000baa:	2800      	cmp	r0, #0
 8000bac:	dd45      	ble.n	8000c3a <__aeabi_fsub+0x13a>
 8000bae:	2a00      	cmp	r2, #0
 8000bb0:	d070      	beq.n	8000c94 <__aeabi_fsub+0x194>
 8000bb2:	2dff      	cmp	r5, #255	; 0xff
 8000bb4:	d100      	bne.n	8000bb8 <__aeabi_fsub+0xb8>
 8000bb6:	e09e      	b.n	8000cf6 <__aeabi_fsub+0x1f6>
 8000bb8:	2380      	movs	r3, #128	; 0x80
 8000bba:	04db      	lsls	r3, r3, #19
 8000bbc:	431e      	orrs	r6, r3
 8000bbe:	4643      	mov	r3, r8
 8000bc0:	2b1b      	cmp	r3, #27
 8000bc2:	dc00      	bgt.n	8000bc6 <__aeabi_fsub+0xc6>
 8000bc4:	e0d2      	b.n	8000d6c <__aeabi_fsub+0x26c>
 8000bc6:	2001      	movs	r0, #1
 8000bc8:	4460      	add	r0, ip
 8000bca:	0143      	lsls	r3, r0, #5
 8000bcc:	d57a      	bpl.n	8000cc4 <__aeabi_fsub+0x1c4>
 8000bce:	3501      	adds	r5, #1
 8000bd0:	2dff      	cmp	r5, #255	; 0xff
 8000bd2:	d06b      	beq.n	8000cac <__aeabi_fsub+0x1ac>
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	4a9d      	ldr	r2, [pc, #628]	; (8000e4c <__aeabi_fsub+0x34c>)
 8000bd8:	4003      	ands	r3, r0
 8000bda:	0840      	lsrs	r0, r0, #1
 8000bdc:	4010      	ands	r0, r2
 8000bde:	4318      	orrs	r0, r3
 8000be0:	e7c8      	b.n	8000b74 <__aeabi_fsub+0x74>
 8000be2:	2e00      	cmp	r6, #0
 8000be4:	d020      	beq.n	8000c28 <__aeabi_fsub+0x128>
 8000be6:	428c      	cmp	r4, r1
 8000be8:	d023      	beq.n	8000c32 <__aeabi_fsub+0x132>
 8000bea:	0028      	movs	r0, r5
 8000bec:	38ff      	subs	r0, #255	; 0xff
 8000bee:	2800      	cmp	r0, #0
 8000bf0:	d039      	beq.n	8000c66 <__aeabi_fsub+0x166>
 8000bf2:	1b57      	subs	r7, r2, r5
 8000bf4:	2d00      	cmp	r5, #0
 8000bf6:	d000      	beq.n	8000bfa <__aeabi_fsub+0xfa>
 8000bf8:	e09d      	b.n	8000d36 <__aeabi_fsub+0x236>
 8000bfa:	4663      	mov	r3, ip
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d100      	bne.n	8000c02 <__aeabi_fsub+0x102>
 8000c00:	e0db      	b.n	8000dba <__aeabi_fsub+0x2ba>
 8000c02:	1e7b      	subs	r3, r7, #1
 8000c04:	2f01      	cmp	r7, #1
 8000c06:	d100      	bne.n	8000c0a <__aeabi_fsub+0x10a>
 8000c08:	e10d      	b.n	8000e26 <__aeabi_fsub+0x326>
 8000c0a:	2fff      	cmp	r7, #255	; 0xff
 8000c0c:	d071      	beq.n	8000cf2 <__aeabi_fsub+0x1f2>
 8000c0e:	001f      	movs	r7, r3
 8000c10:	e098      	b.n	8000d44 <__aeabi_fsub+0x244>
 8000c12:	2e00      	cmp	r6, #0
 8000c14:	d100      	bne.n	8000c18 <__aeabi_fsub+0x118>
 8000c16:	e0a7      	b.n	8000d68 <__aeabi_fsub+0x268>
 8000c18:	1e42      	subs	r2, r0, #1
 8000c1a:	2801      	cmp	r0, #1
 8000c1c:	d100      	bne.n	8000c20 <__aeabi_fsub+0x120>
 8000c1e:	e0e6      	b.n	8000dee <__aeabi_fsub+0x2ee>
 8000c20:	28ff      	cmp	r0, #255	; 0xff
 8000c22:	d068      	beq.n	8000cf6 <__aeabi_fsub+0x1f6>
 8000c24:	0010      	movs	r0, r2
 8000c26:	e78f      	b.n	8000b48 <__aeabi_fsub+0x48>
 8000c28:	2001      	movs	r0, #1
 8000c2a:	4041      	eors	r1, r0
 8000c2c:	42a1      	cmp	r1, r4
 8000c2e:	d000      	beq.n	8000c32 <__aeabi_fsub+0x132>
 8000c30:	e77f      	b.n	8000b32 <__aeabi_fsub+0x32>
 8000c32:	20ff      	movs	r0, #255	; 0xff
 8000c34:	4240      	negs	r0, r0
 8000c36:	4680      	mov	r8, r0
 8000c38:	44a8      	add	r8, r5
 8000c3a:	4640      	mov	r0, r8
 8000c3c:	2800      	cmp	r0, #0
 8000c3e:	d038      	beq.n	8000cb2 <__aeabi_fsub+0x1b2>
 8000c40:	1b51      	subs	r1, r2, r5
 8000c42:	2d00      	cmp	r5, #0
 8000c44:	d100      	bne.n	8000c48 <__aeabi_fsub+0x148>
 8000c46:	e0ae      	b.n	8000da6 <__aeabi_fsub+0x2a6>
 8000c48:	2aff      	cmp	r2, #255	; 0xff
 8000c4a:	d100      	bne.n	8000c4e <__aeabi_fsub+0x14e>
 8000c4c:	e0df      	b.n	8000e0e <__aeabi_fsub+0x30e>
 8000c4e:	2380      	movs	r3, #128	; 0x80
 8000c50:	4660      	mov	r0, ip
 8000c52:	04db      	lsls	r3, r3, #19
 8000c54:	4318      	orrs	r0, r3
 8000c56:	4684      	mov	ip, r0
 8000c58:	291b      	cmp	r1, #27
 8000c5a:	dc00      	bgt.n	8000c5e <__aeabi_fsub+0x15e>
 8000c5c:	e0d9      	b.n	8000e12 <__aeabi_fsub+0x312>
 8000c5e:	2001      	movs	r0, #1
 8000c60:	0015      	movs	r5, r2
 8000c62:	1980      	adds	r0, r0, r6
 8000c64:	e7b1      	b.n	8000bca <__aeabi_fsub+0xca>
 8000c66:	20fe      	movs	r0, #254	; 0xfe
 8000c68:	1c6a      	adds	r2, r5, #1
 8000c6a:	4210      	tst	r0, r2
 8000c6c:	d171      	bne.n	8000d52 <__aeabi_fsub+0x252>
 8000c6e:	2d00      	cmp	r5, #0
 8000c70:	d000      	beq.n	8000c74 <__aeabi_fsub+0x174>
 8000c72:	e0a6      	b.n	8000dc2 <__aeabi_fsub+0x2c2>
 8000c74:	4663      	mov	r3, ip
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d100      	bne.n	8000c7c <__aeabi_fsub+0x17c>
 8000c7a:	e0d9      	b.n	8000e30 <__aeabi_fsub+0x330>
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	2e00      	cmp	r6, #0
 8000c80:	d100      	bne.n	8000c84 <__aeabi_fsub+0x184>
 8000c82:	e788      	b.n	8000b96 <__aeabi_fsub+0x96>
 8000c84:	1b98      	subs	r0, r3, r6
 8000c86:	0143      	lsls	r3, r0, #5
 8000c88:	d400      	bmi.n	8000c8c <__aeabi_fsub+0x18c>
 8000c8a:	e0e1      	b.n	8000e50 <__aeabi_fsub+0x350>
 8000c8c:	4663      	mov	r3, ip
 8000c8e:	000c      	movs	r4, r1
 8000c90:	1af0      	subs	r0, r6, r3
 8000c92:	e76f      	b.n	8000b74 <__aeabi_fsub+0x74>
 8000c94:	2e00      	cmp	r6, #0
 8000c96:	d100      	bne.n	8000c9a <__aeabi_fsub+0x19a>
 8000c98:	e0b7      	b.n	8000e0a <__aeabi_fsub+0x30a>
 8000c9a:	0002      	movs	r2, r0
 8000c9c:	3a01      	subs	r2, #1
 8000c9e:	2801      	cmp	r0, #1
 8000ca0:	d100      	bne.n	8000ca4 <__aeabi_fsub+0x1a4>
 8000ca2:	e09c      	b.n	8000dde <__aeabi_fsub+0x2de>
 8000ca4:	28ff      	cmp	r0, #255	; 0xff
 8000ca6:	d026      	beq.n	8000cf6 <__aeabi_fsub+0x1f6>
 8000ca8:	4690      	mov	r8, r2
 8000caa:	e788      	b.n	8000bbe <__aeabi_fsub+0xbe>
 8000cac:	22ff      	movs	r2, #255	; 0xff
 8000cae:	2700      	movs	r7, #0
 8000cb0:	e771      	b.n	8000b96 <__aeabi_fsub+0x96>
 8000cb2:	20fe      	movs	r0, #254	; 0xfe
 8000cb4:	1c6a      	adds	r2, r5, #1
 8000cb6:	4210      	tst	r0, r2
 8000cb8:	d064      	beq.n	8000d84 <__aeabi_fsub+0x284>
 8000cba:	2aff      	cmp	r2, #255	; 0xff
 8000cbc:	d0f6      	beq.n	8000cac <__aeabi_fsub+0x1ac>
 8000cbe:	0015      	movs	r5, r2
 8000cc0:	4466      	add	r6, ip
 8000cc2:	0870      	lsrs	r0, r6, #1
 8000cc4:	0743      	lsls	r3, r0, #29
 8000cc6:	d000      	beq.n	8000cca <__aeabi_fsub+0x1ca>
 8000cc8:	e756      	b.n	8000b78 <__aeabi_fsub+0x78>
 8000cca:	08c3      	lsrs	r3, r0, #3
 8000ccc:	2dff      	cmp	r5, #255	; 0xff
 8000cce:	d012      	beq.n	8000cf6 <__aeabi_fsub+0x1f6>
 8000cd0:	025b      	lsls	r3, r3, #9
 8000cd2:	0a5f      	lsrs	r7, r3, #9
 8000cd4:	b2ea      	uxtb	r2, r5
 8000cd6:	e75e      	b.n	8000b96 <__aeabi_fsub+0x96>
 8000cd8:	4662      	mov	r2, ip
 8000cda:	2a00      	cmp	r2, #0
 8000cdc:	d100      	bne.n	8000ce0 <__aeabi_fsub+0x1e0>
 8000cde:	e096      	b.n	8000e0e <__aeabi_fsub+0x30e>
 8000ce0:	2e00      	cmp	r6, #0
 8000ce2:	d008      	beq.n	8000cf6 <__aeabi_fsub+0x1f6>
 8000ce4:	2280      	movs	r2, #128	; 0x80
 8000ce6:	03d2      	lsls	r2, r2, #15
 8000ce8:	4213      	tst	r3, r2
 8000cea:	d004      	beq.n	8000cf6 <__aeabi_fsub+0x1f6>
 8000cec:	4648      	mov	r0, r9
 8000cee:	4210      	tst	r0, r2
 8000cf0:	d101      	bne.n	8000cf6 <__aeabi_fsub+0x1f6>
 8000cf2:	000c      	movs	r4, r1
 8000cf4:	464b      	mov	r3, r9
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d0d8      	beq.n	8000cac <__aeabi_fsub+0x1ac>
 8000cfa:	2780      	movs	r7, #128	; 0x80
 8000cfc:	03ff      	lsls	r7, r7, #15
 8000cfe:	431f      	orrs	r7, r3
 8000d00:	027f      	lsls	r7, r7, #9
 8000d02:	22ff      	movs	r2, #255	; 0xff
 8000d04:	0a7f      	lsrs	r7, r7, #9
 8000d06:	e746      	b.n	8000b96 <__aeabi_fsub+0x96>
 8000d08:	2320      	movs	r3, #32
 8000d0a:	003a      	movs	r2, r7
 8000d0c:	1b45      	subs	r5, r0, r5
 8000d0e:	0038      	movs	r0, r7
 8000d10:	3501      	adds	r5, #1
 8000d12:	40ea      	lsrs	r2, r5
 8000d14:	1b5d      	subs	r5, r3, r5
 8000d16:	40a8      	lsls	r0, r5
 8000d18:	1e43      	subs	r3, r0, #1
 8000d1a:	4198      	sbcs	r0, r3
 8000d1c:	2500      	movs	r5, #0
 8000d1e:	4310      	orrs	r0, r2
 8000d20:	e728      	b.n	8000b74 <__aeabi_fsub+0x74>
 8000d22:	2320      	movs	r3, #32
 8000d24:	1a1b      	subs	r3, r3, r0
 8000d26:	0032      	movs	r2, r6
 8000d28:	409e      	lsls	r6, r3
 8000d2a:	40c2      	lsrs	r2, r0
 8000d2c:	0030      	movs	r0, r6
 8000d2e:	1e43      	subs	r3, r0, #1
 8000d30:	4198      	sbcs	r0, r3
 8000d32:	4310      	orrs	r0, r2
 8000d34:	e70c      	b.n	8000b50 <__aeabi_fsub+0x50>
 8000d36:	2aff      	cmp	r2, #255	; 0xff
 8000d38:	d0db      	beq.n	8000cf2 <__aeabi_fsub+0x1f2>
 8000d3a:	2380      	movs	r3, #128	; 0x80
 8000d3c:	4660      	mov	r0, ip
 8000d3e:	04db      	lsls	r3, r3, #19
 8000d40:	4318      	orrs	r0, r3
 8000d42:	4684      	mov	ip, r0
 8000d44:	2f1b      	cmp	r7, #27
 8000d46:	dd56      	ble.n	8000df6 <__aeabi_fsub+0x2f6>
 8000d48:	2001      	movs	r0, #1
 8000d4a:	000c      	movs	r4, r1
 8000d4c:	0015      	movs	r5, r2
 8000d4e:	1a30      	subs	r0, r6, r0
 8000d50:	e700      	b.n	8000b54 <__aeabi_fsub+0x54>
 8000d52:	4663      	mov	r3, ip
 8000d54:	1b9f      	subs	r7, r3, r6
 8000d56:	017b      	lsls	r3, r7, #5
 8000d58:	d43d      	bmi.n	8000dd6 <__aeabi_fsub+0x2d6>
 8000d5a:	2f00      	cmp	r7, #0
 8000d5c:	d000      	beq.n	8000d60 <__aeabi_fsub+0x260>
 8000d5e:	e6fe      	b.n	8000b5e <__aeabi_fsub+0x5e>
 8000d60:	2400      	movs	r4, #0
 8000d62:	2200      	movs	r2, #0
 8000d64:	2700      	movs	r7, #0
 8000d66:	e716      	b.n	8000b96 <__aeabi_fsub+0x96>
 8000d68:	0005      	movs	r5, r0
 8000d6a:	e7af      	b.n	8000ccc <__aeabi_fsub+0x1cc>
 8000d6c:	0032      	movs	r2, r6
 8000d6e:	4643      	mov	r3, r8
 8000d70:	4641      	mov	r1, r8
 8000d72:	40da      	lsrs	r2, r3
 8000d74:	2320      	movs	r3, #32
 8000d76:	1a5b      	subs	r3, r3, r1
 8000d78:	409e      	lsls	r6, r3
 8000d7a:	0030      	movs	r0, r6
 8000d7c:	1e43      	subs	r3, r0, #1
 8000d7e:	4198      	sbcs	r0, r3
 8000d80:	4310      	orrs	r0, r2
 8000d82:	e721      	b.n	8000bc8 <__aeabi_fsub+0xc8>
 8000d84:	2d00      	cmp	r5, #0
 8000d86:	d1a7      	bne.n	8000cd8 <__aeabi_fsub+0x1d8>
 8000d88:	4663      	mov	r3, ip
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d059      	beq.n	8000e42 <__aeabi_fsub+0x342>
 8000d8e:	2200      	movs	r2, #0
 8000d90:	2e00      	cmp	r6, #0
 8000d92:	d100      	bne.n	8000d96 <__aeabi_fsub+0x296>
 8000d94:	e6ff      	b.n	8000b96 <__aeabi_fsub+0x96>
 8000d96:	0030      	movs	r0, r6
 8000d98:	4460      	add	r0, ip
 8000d9a:	0143      	lsls	r3, r0, #5
 8000d9c:	d592      	bpl.n	8000cc4 <__aeabi_fsub+0x1c4>
 8000d9e:	4b2a      	ldr	r3, [pc, #168]	; (8000e48 <__aeabi_fsub+0x348>)
 8000da0:	3501      	adds	r5, #1
 8000da2:	4018      	ands	r0, r3
 8000da4:	e78e      	b.n	8000cc4 <__aeabi_fsub+0x1c4>
 8000da6:	4663      	mov	r3, ip
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d047      	beq.n	8000e3c <__aeabi_fsub+0x33c>
 8000dac:	1e4b      	subs	r3, r1, #1
 8000dae:	2901      	cmp	r1, #1
 8000db0:	d015      	beq.n	8000dde <__aeabi_fsub+0x2de>
 8000db2:	29ff      	cmp	r1, #255	; 0xff
 8000db4:	d02b      	beq.n	8000e0e <__aeabi_fsub+0x30e>
 8000db6:	0019      	movs	r1, r3
 8000db8:	e74e      	b.n	8000c58 <__aeabi_fsub+0x158>
 8000dba:	000c      	movs	r4, r1
 8000dbc:	464b      	mov	r3, r9
 8000dbe:	003d      	movs	r5, r7
 8000dc0:	e784      	b.n	8000ccc <__aeabi_fsub+0x1cc>
 8000dc2:	4662      	mov	r2, ip
 8000dc4:	2a00      	cmp	r2, #0
 8000dc6:	d18b      	bne.n	8000ce0 <__aeabi_fsub+0x1e0>
 8000dc8:	2e00      	cmp	r6, #0
 8000dca:	d192      	bne.n	8000cf2 <__aeabi_fsub+0x1f2>
 8000dcc:	2780      	movs	r7, #128	; 0x80
 8000dce:	2400      	movs	r4, #0
 8000dd0:	22ff      	movs	r2, #255	; 0xff
 8000dd2:	03ff      	lsls	r7, r7, #15
 8000dd4:	e6df      	b.n	8000b96 <__aeabi_fsub+0x96>
 8000dd6:	4663      	mov	r3, ip
 8000dd8:	000c      	movs	r4, r1
 8000dda:	1af7      	subs	r7, r6, r3
 8000ddc:	e6bf      	b.n	8000b5e <__aeabi_fsub+0x5e>
 8000dde:	0030      	movs	r0, r6
 8000de0:	4460      	add	r0, ip
 8000de2:	2501      	movs	r5, #1
 8000de4:	0143      	lsls	r3, r0, #5
 8000de6:	d400      	bmi.n	8000dea <__aeabi_fsub+0x2ea>
 8000de8:	e76c      	b.n	8000cc4 <__aeabi_fsub+0x1c4>
 8000dea:	2502      	movs	r5, #2
 8000dec:	e6f2      	b.n	8000bd4 <__aeabi_fsub+0xd4>
 8000dee:	4663      	mov	r3, ip
 8000df0:	2501      	movs	r5, #1
 8000df2:	1b98      	subs	r0, r3, r6
 8000df4:	e6ae      	b.n	8000b54 <__aeabi_fsub+0x54>
 8000df6:	2320      	movs	r3, #32
 8000df8:	4664      	mov	r4, ip
 8000dfa:	4660      	mov	r0, ip
 8000dfc:	40fc      	lsrs	r4, r7
 8000dfe:	1bdf      	subs	r7, r3, r7
 8000e00:	40b8      	lsls	r0, r7
 8000e02:	1e43      	subs	r3, r0, #1
 8000e04:	4198      	sbcs	r0, r3
 8000e06:	4320      	orrs	r0, r4
 8000e08:	e79f      	b.n	8000d4a <__aeabi_fsub+0x24a>
 8000e0a:	0005      	movs	r5, r0
 8000e0c:	e75e      	b.n	8000ccc <__aeabi_fsub+0x1cc>
 8000e0e:	464b      	mov	r3, r9
 8000e10:	e771      	b.n	8000cf6 <__aeabi_fsub+0x1f6>
 8000e12:	2320      	movs	r3, #32
 8000e14:	4665      	mov	r5, ip
 8000e16:	4660      	mov	r0, ip
 8000e18:	40cd      	lsrs	r5, r1
 8000e1a:	1a59      	subs	r1, r3, r1
 8000e1c:	4088      	lsls	r0, r1
 8000e1e:	1e43      	subs	r3, r0, #1
 8000e20:	4198      	sbcs	r0, r3
 8000e22:	4328      	orrs	r0, r5
 8000e24:	e71c      	b.n	8000c60 <__aeabi_fsub+0x160>
 8000e26:	4663      	mov	r3, ip
 8000e28:	000c      	movs	r4, r1
 8000e2a:	2501      	movs	r5, #1
 8000e2c:	1af0      	subs	r0, r6, r3
 8000e2e:	e691      	b.n	8000b54 <__aeabi_fsub+0x54>
 8000e30:	2e00      	cmp	r6, #0
 8000e32:	d095      	beq.n	8000d60 <__aeabi_fsub+0x260>
 8000e34:	000c      	movs	r4, r1
 8000e36:	464f      	mov	r7, r9
 8000e38:	2200      	movs	r2, #0
 8000e3a:	e6ac      	b.n	8000b96 <__aeabi_fsub+0x96>
 8000e3c:	464b      	mov	r3, r9
 8000e3e:	000d      	movs	r5, r1
 8000e40:	e744      	b.n	8000ccc <__aeabi_fsub+0x1cc>
 8000e42:	464f      	mov	r7, r9
 8000e44:	2200      	movs	r2, #0
 8000e46:	e6a6      	b.n	8000b96 <__aeabi_fsub+0x96>
 8000e48:	fbffffff 	.word	0xfbffffff
 8000e4c:	7dffffff 	.word	0x7dffffff
 8000e50:	2800      	cmp	r0, #0
 8000e52:	d000      	beq.n	8000e56 <__aeabi_fsub+0x356>
 8000e54:	e736      	b.n	8000cc4 <__aeabi_fsub+0x1c4>
 8000e56:	2400      	movs	r4, #0
 8000e58:	2700      	movs	r7, #0
 8000e5a:	e69c      	b.n	8000b96 <__aeabi_fsub+0x96>

08000e5c <__aeabi_f2iz>:
 8000e5c:	0241      	lsls	r1, r0, #9
 8000e5e:	0042      	lsls	r2, r0, #1
 8000e60:	0fc3      	lsrs	r3, r0, #31
 8000e62:	0a49      	lsrs	r1, r1, #9
 8000e64:	2000      	movs	r0, #0
 8000e66:	0e12      	lsrs	r2, r2, #24
 8000e68:	2a7e      	cmp	r2, #126	; 0x7e
 8000e6a:	dd03      	ble.n	8000e74 <__aeabi_f2iz+0x18>
 8000e6c:	2a9d      	cmp	r2, #157	; 0x9d
 8000e6e:	dd02      	ble.n	8000e76 <__aeabi_f2iz+0x1a>
 8000e70:	4a09      	ldr	r2, [pc, #36]	; (8000e98 <__aeabi_f2iz+0x3c>)
 8000e72:	1898      	adds	r0, r3, r2
 8000e74:	4770      	bx	lr
 8000e76:	2080      	movs	r0, #128	; 0x80
 8000e78:	0400      	lsls	r0, r0, #16
 8000e7a:	4301      	orrs	r1, r0
 8000e7c:	2a95      	cmp	r2, #149	; 0x95
 8000e7e:	dc07      	bgt.n	8000e90 <__aeabi_f2iz+0x34>
 8000e80:	2096      	movs	r0, #150	; 0x96
 8000e82:	1a82      	subs	r2, r0, r2
 8000e84:	40d1      	lsrs	r1, r2
 8000e86:	4248      	negs	r0, r1
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d1f3      	bne.n	8000e74 <__aeabi_f2iz+0x18>
 8000e8c:	0008      	movs	r0, r1
 8000e8e:	e7f1      	b.n	8000e74 <__aeabi_f2iz+0x18>
 8000e90:	3a96      	subs	r2, #150	; 0x96
 8000e92:	4091      	lsls	r1, r2
 8000e94:	e7f7      	b.n	8000e86 <__aeabi_f2iz+0x2a>
 8000e96:	46c0      	nop			; (mov r8, r8)
 8000e98:	7fffffff 	.word	0x7fffffff

08000e9c <__aeabi_i2f>:
 8000e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e9e:	2800      	cmp	r0, #0
 8000ea0:	d013      	beq.n	8000eca <__aeabi_i2f+0x2e>
 8000ea2:	17c3      	asrs	r3, r0, #31
 8000ea4:	18c6      	adds	r6, r0, r3
 8000ea6:	405e      	eors	r6, r3
 8000ea8:	0fc4      	lsrs	r4, r0, #31
 8000eaa:	0030      	movs	r0, r6
 8000eac:	f001 fefa 	bl	8002ca4 <__clzsi2>
 8000eb0:	239e      	movs	r3, #158	; 0x9e
 8000eb2:	0005      	movs	r5, r0
 8000eb4:	1a1b      	subs	r3, r3, r0
 8000eb6:	2b96      	cmp	r3, #150	; 0x96
 8000eb8:	dc0f      	bgt.n	8000eda <__aeabi_i2f+0x3e>
 8000eba:	2808      	cmp	r0, #8
 8000ebc:	dd01      	ble.n	8000ec2 <__aeabi_i2f+0x26>
 8000ebe:	3d08      	subs	r5, #8
 8000ec0:	40ae      	lsls	r6, r5
 8000ec2:	0276      	lsls	r6, r6, #9
 8000ec4:	0a76      	lsrs	r6, r6, #9
 8000ec6:	b2d8      	uxtb	r0, r3
 8000ec8:	e002      	b.n	8000ed0 <__aeabi_i2f+0x34>
 8000eca:	2400      	movs	r4, #0
 8000ecc:	2000      	movs	r0, #0
 8000ece:	2600      	movs	r6, #0
 8000ed0:	05c0      	lsls	r0, r0, #23
 8000ed2:	4330      	orrs	r0, r6
 8000ed4:	07e4      	lsls	r4, r4, #31
 8000ed6:	4320      	orrs	r0, r4
 8000ed8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000eda:	2b99      	cmp	r3, #153	; 0x99
 8000edc:	dd0c      	ble.n	8000ef8 <__aeabi_i2f+0x5c>
 8000ede:	2205      	movs	r2, #5
 8000ee0:	0031      	movs	r1, r6
 8000ee2:	1a12      	subs	r2, r2, r0
 8000ee4:	40d1      	lsrs	r1, r2
 8000ee6:	000a      	movs	r2, r1
 8000ee8:	0001      	movs	r1, r0
 8000eea:	0030      	movs	r0, r6
 8000eec:	311b      	adds	r1, #27
 8000eee:	4088      	lsls	r0, r1
 8000ef0:	1e41      	subs	r1, r0, #1
 8000ef2:	4188      	sbcs	r0, r1
 8000ef4:	4302      	orrs	r2, r0
 8000ef6:	0016      	movs	r6, r2
 8000ef8:	2d05      	cmp	r5, #5
 8000efa:	dc12      	bgt.n	8000f22 <__aeabi_i2f+0x86>
 8000efc:	0031      	movs	r1, r6
 8000efe:	4f0d      	ldr	r7, [pc, #52]	; (8000f34 <__aeabi_i2f+0x98>)
 8000f00:	4039      	ands	r1, r7
 8000f02:	0772      	lsls	r2, r6, #29
 8000f04:	d009      	beq.n	8000f1a <__aeabi_i2f+0x7e>
 8000f06:	200f      	movs	r0, #15
 8000f08:	4030      	ands	r0, r6
 8000f0a:	2804      	cmp	r0, #4
 8000f0c:	d005      	beq.n	8000f1a <__aeabi_i2f+0x7e>
 8000f0e:	3104      	adds	r1, #4
 8000f10:	014a      	lsls	r2, r1, #5
 8000f12:	d502      	bpl.n	8000f1a <__aeabi_i2f+0x7e>
 8000f14:	239f      	movs	r3, #159	; 0x9f
 8000f16:	4039      	ands	r1, r7
 8000f18:	1b5b      	subs	r3, r3, r5
 8000f1a:	0189      	lsls	r1, r1, #6
 8000f1c:	0a4e      	lsrs	r6, r1, #9
 8000f1e:	b2d8      	uxtb	r0, r3
 8000f20:	e7d6      	b.n	8000ed0 <__aeabi_i2f+0x34>
 8000f22:	1f6a      	subs	r2, r5, #5
 8000f24:	4096      	lsls	r6, r2
 8000f26:	0031      	movs	r1, r6
 8000f28:	4f02      	ldr	r7, [pc, #8]	; (8000f34 <__aeabi_i2f+0x98>)
 8000f2a:	4039      	ands	r1, r7
 8000f2c:	0772      	lsls	r2, r6, #29
 8000f2e:	d0f4      	beq.n	8000f1a <__aeabi_i2f+0x7e>
 8000f30:	e7e9      	b.n	8000f06 <__aeabi_i2f+0x6a>
 8000f32:	46c0      	nop			; (mov r8, r8)
 8000f34:	fbffffff 	.word	0xfbffffff

08000f38 <__aeabi_dadd>:
 8000f38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f3a:	464f      	mov	r7, r9
 8000f3c:	4646      	mov	r6, r8
 8000f3e:	46d6      	mov	lr, sl
 8000f40:	000d      	movs	r5, r1
 8000f42:	0004      	movs	r4, r0
 8000f44:	b5c0      	push	{r6, r7, lr}
 8000f46:	001f      	movs	r7, r3
 8000f48:	0011      	movs	r1, r2
 8000f4a:	0328      	lsls	r0, r5, #12
 8000f4c:	0f62      	lsrs	r2, r4, #29
 8000f4e:	0a40      	lsrs	r0, r0, #9
 8000f50:	4310      	orrs	r0, r2
 8000f52:	007a      	lsls	r2, r7, #1
 8000f54:	0d52      	lsrs	r2, r2, #21
 8000f56:	00e3      	lsls	r3, r4, #3
 8000f58:	033c      	lsls	r4, r7, #12
 8000f5a:	4691      	mov	r9, r2
 8000f5c:	0a64      	lsrs	r4, r4, #9
 8000f5e:	0ffa      	lsrs	r2, r7, #31
 8000f60:	0f4f      	lsrs	r7, r1, #29
 8000f62:	006e      	lsls	r6, r5, #1
 8000f64:	4327      	orrs	r7, r4
 8000f66:	4692      	mov	sl, r2
 8000f68:	46b8      	mov	r8, r7
 8000f6a:	0d76      	lsrs	r6, r6, #21
 8000f6c:	0fed      	lsrs	r5, r5, #31
 8000f6e:	00c9      	lsls	r1, r1, #3
 8000f70:	4295      	cmp	r5, r2
 8000f72:	d100      	bne.n	8000f76 <__aeabi_dadd+0x3e>
 8000f74:	e099      	b.n	80010aa <__aeabi_dadd+0x172>
 8000f76:	464c      	mov	r4, r9
 8000f78:	1b34      	subs	r4, r6, r4
 8000f7a:	46a4      	mov	ip, r4
 8000f7c:	2c00      	cmp	r4, #0
 8000f7e:	dc00      	bgt.n	8000f82 <__aeabi_dadd+0x4a>
 8000f80:	e07c      	b.n	800107c <__aeabi_dadd+0x144>
 8000f82:	464a      	mov	r2, r9
 8000f84:	2a00      	cmp	r2, #0
 8000f86:	d100      	bne.n	8000f8a <__aeabi_dadd+0x52>
 8000f88:	e0b8      	b.n	80010fc <__aeabi_dadd+0x1c4>
 8000f8a:	4ac5      	ldr	r2, [pc, #788]	; (80012a0 <__aeabi_dadd+0x368>)
 8000f8c:	4296      	cmp	r6, r2
 8000f8e:	d100      	bne.n	8000f92 <__aeabi_dadd+0x5a>
 8000f90:	e11c      	b.n	80011cc <__aeabi_dadd+0x294>
 8000f92:	2280      	movs	r2, #128	; 0x80
 8000f94:	003c      	movs	r4, r7
 8000f96:	0412      	lsls	r2, r2, #16
 8000f98:	4314      	orrs	r4, r2
 8000f9a:	46a0      	mov	r8, r4
 8000f9c:	4662      	mov	r2, ip
 8000f9e:	2a38      	cmp	r2, #56	; 0x38
 8000fa0:	dd00      	ble.n	8000fa4 <__aeabi_dadd+0x6c>
 8000fa2:	e161      	b.n	8001268 <__aeabi_dadd+0x330>
 8000fa4:	2a1f      	cmp	r2, #31
 8000fa6:	dd00      	ble.n	8000faa <__aeabi_dadd+0x72>
 8000fa8:	e1cc      	b.n	8001344 <__aeabi_dadd+0x40c>
 8000faa:	4664      	mov	r4, ip
 8000fac:	2220      	movs	r2, #32
 8000fae:	1b12      	subs	r2, r2, r4
 8000fb0:	4644      	mov	r4, r8
 8000fb2:	4094      	lsls	r4, r2
 8000fb4:	000f      	movs	r7, r1
 8000fb6:	46a1      	mov	r9, r4
 8000fb8:	4664      	mov	r4, ip
 8000fba:	4091      	lsls	r1, r2
 8000fbc:	40e7      	lsrs	r7, r4
 8000fbe:	464c      	mov	r4, r9
 8000fc0:	1e4a      	subs	r2, r1, #1
 8000fc2:	4191      	sbcs	r1, r2
 8000fc4:	433c      	orrs	r4, r7
 8000fc6:	4642      	mov	r2, r8
 8000fc8:	4321      	orrs	r1, r4
 8000fca:	4664      	mov	r4, ip
 8000fcc:	40e2      	lsrs	r2, r4
 8000fce:	1a80      	subs	r0, r0, r2
 8000fd0:	1a5c      	subs	r4, r3, r1
 8000fd2:	42a3      	cmp	r3, r4
 8000fd4:	419b      	sbcs	r3, r3
 8000fd6:	425f      	negs	r7, r3
 8000fd8:	1bc7      	subs	r7, r0, r7
 8000fda:	023b      	lsls	r3, r7, #8
 8000fdc:	d400      	bmi.n	8000fe0 <__aeabi_dadd+0xa8>
 8000fde:	e0d0      	b.n	8001182 <__aeabi_dadd+0x24a>
 8000fe0:	027f      	lsls	r7, r7, #9
 8000fe2:	0a7f      	lsrs	r7, r7, #9
 8000fe4:	2f00      	cmp	r7, #0
 8000fe6:	d100      	bne.n	8000fea <__aeabi_dadd+0xb2>
 8000fe8:	e0ff      	b.n	80011ea <__aeabi_dadd+0x2b2>
 8000fea:	0038      	movs	r0, r7
 8000fec:	f001 fe5a 	bl	8002ca4 <__clzsi2>
 8000ff0:	0001      	movs	r1, r0
 8000ff2:	3908      	subs	r1, #8
 8000ff4:	2320      	movs	r3, #32
 8000ff6:	0022      	movs	r2, r4
 8000ff8:	1a5b      	subs	r3, r3, r1
 8000ffa:	408f      	lsls	r7, r1
 8000ffc:	40da      	lsrs	r2, r3
 8000ffe:	408c      	lsls	r4, r1
 8001000:	4317      	orrs	r7, r2
 8001002:	42b1      	cmp	r1, r6
 8001004:	da00      	bge.n	8001008 <__aeabi_dadd+0xd0>
 8001006:	e0ff      	b.n	8001208 <__aeabi_dadd+0x2d0>
 8001008:	1b89      	subs	r1, r1, r6
 800100a:	1c4b      	adds	r3, r1, #1
 800100c:	2b1f      	cmp	r3, #31
 800100e:	dd00      	ble.n	8001012 <__aeabi_dadd+0xda>
 8001010:	e0a8      	b.n	8001164 <__aeabi_dadd+0x22c>
 8001012:	2220      	movs	r2, #32
 8001014:	0039      	movs	r1, r7
 8001016:	1ad2      	subs	r2, r2, r3
 8001018:	0020      	movs	r0, r4
 800101a:	4094      	lsls	r4, r2
 800101c:	4091      	lsls	r1, r2
 800101e:	40d8      	lsrs	r0, r3
 8001020:	1e62      	subs	r2, r4, #1
 8001022:	4194      	sbcs	r4, r2
 8001024:	40df      	lsrs	r7, r3
 8001026:	2600      	movs	r6, #0
 8001028:	4301      	orrs	r1, r0
 800102a:	430c      	orrs	r4, r1
 800102c:	0763      	lsls	r3, r4, #29
 800102e:	d009      	beq.n	8001044 <__aeabi_dadd+0x10c>
 8001030:	230f      	movs	r3, #15
 8001032:	4023      	ands	r3, r4
 8001034:	2b04      	cmp	r3, #4
 8001036:	d005      	beq.n	8001044 <__aeabi_dadd+0x10c>
 8001038:	1d23      	adds	r3, r4, #4
 800103a:	42a3      	cmp	r3, r4
 800103c:	41a4      	sbcs	r4, r4
 800103e:	4264      	negs	r4, r4
 8001040:	193f      	adds	r7, r7, r4
 8001042:	001c      	movs	r4, r3
 8001044:	023b      	lsls	r3, r7, #8
 8001046:	d400      	bmi.n	800104a <__aeabi_dadd+0x112>
 8001048:	e09e      	b.n	8001188 <__aeabi_dadd+0x250>
 800104a:	4b95      	ldr	r3, [pc, #596]	; (80012a0 <__aeabi_dadd+0x368>)
 800104c:	3601      	adds	r6, #1
 800104e:	429e      	cmp	r6, r3
 8001050:	d100      	bne.n	8001054 <__aeabi_dadd+0x11c>
 8001052:	e0b7      	b.n	80011c4 <__aeabi_dadd+0x28c>
 8001054:	4a93      	ldr	r2, [pc, #588]	; (80012a4 <__aeabi_dadd+0x36c>)
 8001056:	08e4      	lsrs	r4, r4, #3
 8001058:	4017      	ands	r7, r2
 800105a:	077b      	lsls	r3, r7, #29
 800105c:	0571      	lsls	r1, r6, #21
 800105e:	027f      	lsls	r7, r7, #9
 8001060:	4323      	orrs	r3, r4
 8001062:	0b3f      	lsrs	r7, r7, #12
 8001064:	0d4a      	lsrs	r2, r1, #21
 8001066:	0512      	lsls	r2, r2, #20
 8001068:	433a      	orrs	r2, r7
 800106a:	07ed      	lsls	r5, r5, #31
 800106c:	432a      	orrs	r2, r5
 800106e:	0018      	movs	r0, r3
 8001070:	0011      	movs	r1, r2
 8001072:	bce0      	pop	{r5, r6, r7}
 8001074:	46ba      	mov	sl, r7
 8001076:	46b1      	mov	r9, r6
 8001078:	46a8      	mov	r8, r5
 800107a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800107c:	2c00      	cmp	r4, #0
 800107e:	d04b      	beq.n	8001118 <__aeabi_dadd+0x1e0>
 8001080:	464c      	mov	r4, r9
 8001082:	1ba4      	subs	r4, r4, r6
 8001084:	46a4      	mov	ip, r4
 8001086:	2e00      	cmp	r6, #0
 8001088:	d000      	beq.n	800108c <__aeabi_dadd+0x154>
 800108a:	e123      	b.n	80012d4 <__aeabi_dadd+0x39c>
 800108c:	0004      	movs	r4, r0
 800108e:	431c      	orrs	r4, r3
 8001090:	d100      	bne.n	8001094 <__aeabi_dadd+0x15c>
 8001092:	e1af      	b.n	80013f4 <__aeabi_dadd+0x4bc>
 8001094:	4662      	mov	r2, ip
 8001096:	1e54      	subs	r4, r2, #1
 8001098:	2a01      	cmp	r2, #1
 800109a:	d100      	bne.n	800109e <__aeabi_dadd+0x166>
 800109c:	e215      	b.n	80014ca <__aeabi_dadd+0x592>
 800109e:	4d80      	ldr	r5, [pc, #512]	; (80012a0 <__aeabi_dadd+0x368>)
 80010a0:	45ac      	cmp	ip, r5
 80010a2:	d100      	bne.n	80010a6 <__aeabi_dadd+0x16e>
 80010a4:	e1c8      	b.n	8001438 <__aeabi_dadd+0x500>
 80010a6:	46a4      	mov	ip, r4
 80010a8:	e11b      	b.n	80012e2 <__aeabi_dadd+0x3aa>
 80010aa:	464a      	mov	r2, r9
 80010ac:	1ab2      	subs	r2, r6, r2
 80010ae:	4694      	mov	ip, r2
 80010b0:	2a00      	cmp	r2, #0
 80010b2:	dc00      	bgt.n	80010b6 <__aeabi_dadd+0x17e>
 80010b4:	e0ac      	b.n	8001210 <__aeabi_dadd+0x2d8>
 80010b6:	464a      	mov	r2, r9
 80010b8:	2a00      	cmp	r2, #0
 80010ba:	d043      	beq.n	8001144 <__aeabi_dadd+0x20c>
 80010bc:	4a78      	ldr	r2, [pc, #480]	; (80012a0 <__aeabi_dadd+0x368>)
 80010be:	4296      	cmp	r6, r2
 80010c0:	d100      	bne.n	80010c4 <__aeabi_dadd+0x18c>
 80010c2:	e1af      	b.n	8001424 <__aeabi_dadd+0x4ec>
 80010c4:	2280      	movs	r2, #128	; 0x80
 80010c6:	003c      	movs	r4, r7
 80010c8:	0412      	lsls	r2, r2, #16
 80010ca:	4314      	orrs	r4, r2
 80010cc:	46a0      	mov	r8, r4
 80010ce:	4662      	mov	r2, ip
 80010d0:	2a38      	cmp	r2, #56	; 0x38
 80010d2:	dc67      	bgt.n	80011a4 <__aeabi_dadd+0x26c>
 80010d4:	2a1f      	cmp	r2, #31
 80010d6:	dc00      	bgt.n	80010da <__aeabi_dadd+0x1a2>
 80010d8:	e15f      	b.n	800139a <__aeabi_dadd+0x462>
 80010da:	4647      	mov	r7, r8
 80010dc:	3a20      	subs	r2, #32
 80010de:	40d7      	lsrs	r7, r2
 80010e0:	4662      	mov	r2, ip
 80010e2:	2a20      	cmp	r2, #32
 80010e4:	d005      	beq.n	80010f2 <__aeabi_dadd+0x1ba>
 80010e6:	4664      	mov	r4, ip
 80010e8:	2240      	movs	r2, #64	; 0x40
 80010ea:	1b12      	subs	r2, r2, r4
 80010ec:	4644      	mov	r4, r8
 80010ee:	4094      	lsls	r4, r2
 80010f0:	4321      	orrs	r1, r4
 80010f2:	1e4a      	subs	r2, r1, #1
 80010f4:	4191      	sbcs	r1, r2
 80010f6:	000c      	movs	r4, r1
 80010f8:	433c      	orrs	r4, r7
 80010fa:	e057      	b.n	80011ac <__aeabi_dadd+0x274>
 80010fc:	003a      	movs	r2, r7
 80010fe:	430a      	orrs	r2, r1
 8001100:	d100      	bne.n	8001104 <__aeabi_dadd+0x1cc>
 8001102:	e105      	b.n	8001310 <__aeabi_dadd+0x3d8>
 8001104:	0022      	movs	r2, r4
 8001106:	3a01      	subs	r2, #1
 8001108:	2c01      	cmp	r4, #1
 800110a:	d100      	bne.n	800110e <__aeabi_dadd+0x1d6>
 800110c:	e182      	b.n	8001414 <__aeabi_dadd+0x4dc>
 800110e:	4c64      	ldr	r4, [pc, #400]	; (80012a0 <__aeabi_dadd+0x368>)
 8001110:	45a4      	cmp	ip, r4
 8001112:	d05b      	beq.n	80011cc <__aeabi_dadd+0x294>
 8001114:	4694      	mov	ip, r2
 8001116:	e741      	b.n	8000f9c <__aeabi_dadd+0x64>
 8001118:	4c63      	ldr	r4, [pc, #396]	; (80012a8 <__aeabi_dadd+0x370>)
 800111a:	1c77      	adds	r7, r6, #1
 800111c:	4227      	tst	r7, r4
 800111e:	d000      	beq.n	8001122 <__aeabi_dadd+0x1ea>
 8001120:	e0c4      	b.n	80012ac <__aeabi_dadd+0x374>
 8001122:	0004      	movs	r4, r0
 8001124:	431c      	orrs	r4, r3
 8001126:	2e00      	cmp	r6, #0
 8001128:	d000      	beq.n	800112c <__aeabi_dadd+0x1f4>
 800112a:	e169      	b.n	8001400 <__aeabi_dadd+0x4c8>
 800112c:	2c00      	cmp	r4, #0
 800112e:	d100      	bne.n	8001132 <__aeabi_dadd+0x1fa>
 8001130:	e1bf      	b.n	80014b2 <__aeabi_dadd+0x57a>
 8001132:	4644      	mov	r4, r8
 8001134:	430c      	orrs	r4, r1
 8001136:	d000      	beq.n	800113a <__aeabi_dadd+0x202>
 8001138:	e1d0      	b.n	80014dc <__aeabi_dadd+0x5a4>
 800113a:	0742      	lsls	r2, r0, #29
 800113c:	08db      	lsrs	r3, r3, #3
 800113e:	4313      	orrs	r3, r2
 8001140:	08c0      	lsrs	r0, r0, #3
 8001142:	e029      	b.n	8001198 <__aeabi_dadd+0x260>
 8001144:	003a      	movs	r2, r7
 8001146:	430a      	orrs	r2, r1
 8001148:	d100      	bne.n	800114c <__aeabi_dadd+0x214>
 800114a:	e170      	b.n	800142e <__aeabi_dadd+0x4f6>
 800114c:	4662      	mov	r2, ip
 800114e:	4664      	mov	r4, ip
 8001150:	3a01      	subs	r2, #1
 8001152:	2c01      	cmp	r4, #1
 8001154:	d100      	bne.n	8001158 <__aeabi_dadd+0x220>
 8001156:	e0e0      	b.n	800131a <__aeabi_dadd+0x3e2>
 8001158:	4c51      	ldr	r4, [pc, #324]	; (80012a0 <__aeabi_dadd+0x368>)
 800115a:	45a4      	cmp	ip, r4
 800115c:	d100      	bne.n	8001160 <__aeabi_dadd+0x228>
 800115e:	e161      	b.n	8001424 <__aeabi_dadd+0x4ec>
 8001160:	4694      	mov	ip, r2
 8001162:	e7b4      	b.n	80010ce <__aeabi_dadd+0x196>
 8001164:	003a      	movs	r2, r7
 8001166:	391f      	subs	r1, #31
 8001168:	40ca      	lsrs	r2, r1
 800116a:	0011      	movs	r1, r2
 800116c:	2b20      	cmp	r3, #32
 800116e:	d003      	beq.n	8001178 <__aeabi_dadd+0x240>
 8001170:	2240      	movs	r2, #64	; 0x40
 8001172:	1ad3      	subs	r3, r2, r3
 8001174:	409f      	lsls	r7, r3
 8001176:	433c      	orrs	r4, r7
 8001178:	1e63      	subs	r3, r4, #1
 800117a:	419c      	sbcs	r4, r3
 800117c:	2700      	movs	r7, #0
 800117e:	2600      	movs	r6, #0
 8001180:	430c      	orrs	r4, r1
 8001182:	0763      	lsls	r3, r4, #29
 8001184:	d000      	beq.n	8001188 <__aeabi_dadd+0x250>
 8001186:	e753      	b.n	8001030 <__aeabi_dadd+0xf8>
 8001188:	46b4      	mov	ip, r6
 800118a:	08e4      	lsrs	r4, r4, #3
 800118c:	077b      	lsls	r3, r7, #29
 800118e:	4323      	orrs	r3, r4
 8001190:	08f8      	lsrs	r0, r7, #3
 8001192:	4a43      	ldr	r2, [pc, #268]	; (80012a0 <__aeabi_dadd+0x368>)
 8001194:	4594      	cmp	ip, r2
 8001196:	d01d      	beq.n	80011d4 <__aeabi_dadd+0x29c>
 8001198:	4662      	mov	r2, ip
 800119a:	0307      	lsls	r7, r0, #12
 800119c:	0552      	lsls	r2, r2, #21
 800119e:	0b3f      	lsrs	r7, r7, #12
 80011a0:	0d52      	lsrs	r2, r2, #21
 80011a2:	e760      	b.n	8001066 <__aeabi_dadd+0x12e>
 80011a4:	4644      	mov	r4, r8
 80011a6:	430c      	orrs	r4, r1
 80011a8:	1e62      	subs	r2, r4, #1
 80011aa:	4194      	sbcs	r4, r2
 80011ac:	18e4      	adds	r4, r4, r3
 80011ae:	429c      	cmp	r4, r3
 80011b0:	419b      	sbcs	r3, r3
 80011b2:	425f      	negs	r7, r3
 80011b4:	183f      	adds	r7, r7, r0
 80011b6:	023b      	lsls	r3, r7, #8
 80011b8:	d5e3      	bpl.n	8001182 <__aeabi_dadd+0x24a>
 80011ba:	4b39      	ldr	r3, [pc, #228]	; (80012a0 <__aeabi_dadd+0x368>)
 80011bc:	3601      	adds	r6, #1
 80011be:	429e      	cmp	r6, r3
 80011c0:	d000      	beq.n	80011c4 <__aeabi_dadd+0x28c>
 80011c2:	e0b5      	b.n	8001330 <__aeabi_dadd+0x3f8>
 80011c4:	0032      	movs	r2, r6
 80011c6:	2700      	movs	r7, #0
 80011c8:	2300      	movs	r3, #0
 80011ca:	e74c      	b.n	8001066 <__aeabi_dadd+0x12e>
 80011cc:	0742      	lsls	r2, r0, #29
 80011ce:	08db      	lsrs	r3, r3, #3
 80011d0:	4313      	orrs	r3, r2
 80011d2:	08c0      	lsrs	r0, r0, #3
 80011d4:	001a      	movs	r2, r3
 80011d6:	4302      	orrs	r2, r0
 80011d8:	d100      	bne.n	80011dc <__aeabi_dadd+0x2a4>
 80011da:	e1e1      	b.n	80015a0 <__aeabi_dadd+0x668>
 80011dc:	2780      	movs	r7, #128	; 0x80
 80011de:	033f      	lsls	r7, r7, #12
 80011e0:	4307      	orrs	r7, r0
 80011e2:	033f      	lsls	r7, r7, #12
 80011e4:	4a2e      	ldr	r2, [pc, #184]	; (80012a0 <__aeabi_dadd+0x368>)
 80011e6:	0b3f      	lsrs	r7, r7, #12
 80011e8:	e73d      	b.n	8001066 <__aeabi_dadd+0x12e>
 80011ea:	0020      	movs	r0, r4
 80011ec:	f001 fd5a 	bl	8002ca4 <__clzsi2>
 80011f0:	0001      	movs	r1, r0
 80011f2:	3118      	adds	r1, #24
 80011f4:	291f      	cmp	r1, #31
 80011f6:	dc00      	bgt.n	80011fa <__aeabi_dadd+0x2c2>
 80011f8:	e6fc      	b.n	8000ff4 <__aeabi_dadd+0xbc>
 80011fa:	3808      	subs	r0, #8
 80011fc:	4084      	lsls	r4, r0
 80011fe:	0027      	movs	r7, r4
 8001200:	2400      	movs	r4, #0
 8001202:	42b1      	cmp	r1, r6
 8001204:	db00      	blt.n	8001208 <__aeabi_dadd+0x2d0>
 8001206:	e6ff      	b.n	8001008 <__aeabi_dadd+0xd0>
 8001208:	4a26      	ldr	r2, [pc, #152]	; (80012a4 <__aeabi_dadd+0x36c>)
 800120a:	1a76      	subs	r6, r6, r1
 800120c:	4017      	ands	r7, r2
 800120e:	e70d      	b.n	800102c <__aeabi_dadd+0xf4>
 8001210:	2a00      	cmp	r2, #0
 8001212:	d02f      	beq.n	8001274 <__aeabi_dadd+0x33c>
 8001214:	464a      	mov	r2, r9
 8001216:	1b92      	subs	r2, r2, r6
 8001218:	4694      	mov	ip, r2
 800121a:	2e00      	cmp	r6, #0
 800121c:	d100      	bne.n	8001220 <__aeabi_dadd+0x2e8>
 800121e:	e0ad      	b.n	800137c <__aeabi_dadd+0x444>
 8001220:	4a1f      	ldr	r2, [pc, #124]	; (80012a0 <__aeabi_dadd+0x368>)
 8001222:	4591      	cmp	r9, r2
 8001224:	d100      	bne.n	8001228 <__aeabi_dadd+0x2f0>
 8001226:	e10f      	b.n	8001448 <__aeabi_dadd+0x510>
 8001228:	2280      	movs	r2, #128	; 0x80
 800122a:	0412      	lsls	r2, r2, #16
 800122c:	4310      	orrs	r0, r2
 800122e:	4662      	mov	r2, ip
 8001230:	2a38      	cmp	r2, #56	; 0x38
 8001232:	dd00      	ble.n	8001236 <__aeabi_dadd+0x2fe>
 8001234:	e10f      	b.n	8001456 <__aeabi_dadd+0x51e>
 8001236:	2a1f      	cmp	r2, #31
 8001238:	dd00      	ble.n	800123c <__aeabi_dadd+0x304>
 800123a:	e180      	b.n	800153e <__aeabi_dadd+0x606>
 800123c:	4664      	mov	r4, ip
 800123e:	2220      	movs	r2, #32
 8001240:	001e      	movs	r6, r3
 8001242:	1b12      	subs	r2, r2, r4
 8001244:	4667      	mov	r7, ip
 8001246:	0004      	movs	r4, r0
 8001248:	4093      	lsls	r3, r2
 800124a:	4094      	lsls	r4, r2
 800124c:	40fe      	lsrs	r6, r7
 800124e:	1e5a      	subs	r2, r3, #1
 8001250:	4193      	sbcs	r3, r2
 8001252:	40f8      	lsrs	r0, r7
 8001254:	4334      	orrs	r4, r6
 8001256:	431c      	orrs	r4, r3
 8001258:	4480      	add	r8, r0
 800125a:	1864      	adds	r4, r4, r1
 800125c:	428c      	cmp	r4, r1
 800125e:	41bf      	sbcs	r7, r7
 8001260:	427f      	negs	r7, r7
 8001262:	464e      	mov	r6, r9
 8001264:	4447      	add	r7, r8
 8001266:	e7a6      	b.n	80011b6 <__aeabi_dadd+0x27e>
 8001268:	4642      	mov	r2, r8
 800126a:	430a      	orrs	r2, r1
 800126c:	0011      	movs	r1, r2
 800126e:	1e4a      	subs	r2, r1, #1
 8001270:	4191      	sbcs	r1, r2
 8001272:	e6ad      	b.n	8000fd0 <__aeabi_dadd+0x98>
 8001274:	4c0c      	ldr	r4, [pc, #48]	; (80012a8 <__aeabi_dadd+0x370>)
 8001276:	1c72      	adds	r2, r6, #1
 8001278:	4222      	tst	r2, r4
 800127a:	d000      	beq.n	800127e <__aeabi_dadd+0x346>
 800127c:	e0a1      	b.n	80013c2 <__aeabi_dadd+0x48a>
 800127e:	0002      	movs	r2, r0
 8001280:	431a      	orrs	r2, r3
 8001282:	2e00      	cmp	r6, #0
 8001284:	d000      	beq.n	8001288 <__aeabi_dadd+0x350>
 8001286:	e0fa      	b.n	800147e <__aeabi_dadd+0x546>
 8001288:	2a00      	cmp	r2, #0
 800128a:	d100      	bne.n	800128e <__aeabi_dadd+0x356>
 800128c:	e145      	b.n	800151a <__aeabi_dadd+0x5e2>
 800128e:	003a      	movs	r2, r7
 8001290:	430a      	orrs	r2, r1
 8001292:	d000      	beq.n	8001296 <__aeabi_dadd+0x35e>
 8001294:	e146      	b.n	8001524 <__aeabi_dadd+0x5ec>
 8001296:	0742      	lsls	r2, r0, #29
 8001298:	08db      	lsrs	r3, r3, #3
 800129a:	4313      	orrs	r3, r2
 800129c:	08c0      	lsrs	r0, r0, #3
 800129e:	e77b      	b.n	8001198 <__aeabi_dadd+0x260>
 80012a0:	000007ff 	.word	0x000007ff
 80012a4:	ff7fffff 	.word	0xff7fffff
 80012a8:	000007fe 	.word	0x000007fe
 80012ac:	4647      	mov	r7, r8
 80012ae:	1a5c      	subs	r4, r3, r1
 80012b0:	1bc2      	subs	r2, r0, r7
 80012b2:	42a3      	cmp	r3, r4
 80012b4:	41bf      	sbcs	r7, r7
 80012b6:	427f      	negs	r7, r7
 80012b8:	46b9      	mov	r9, r7
 80012ba:	0017      	movs	r7, r2
 80012bc:	464a      	mov	r2, r9
 80012be:	1abf      	subs	r7, r7, r2
 80012c0:	023a      	lsls	r2, r7, #8
 80012c2:	d500      	bpl.n	80012c6 <__aeabi_dadd+0x38e>
 80012c4:	e08d      	b.n	80013e2 <__aeabi_dadd+0x4aa>
 80012c6:	0023      	movs	r3, r4
 80012c8:	433b      	orrs	r3, r7
 80012ca:	d000      	beq.n	80012ce <__aeabi_dadd+0x396>
 80012cc:	e68a      	b.n	8000fe4 <__aeabi_dadd+0xac>
 80012ce:	2000      	movs	r0, #0
 80012d0:	2500      	movs	r5, #0
 80012d2:	e761      	b.n	8001198 <__aeabi_dadd+0x260>
 80012d4:	4cb4      	ldr	r4, [pc, #720]	; (80015a8 <__aeabi_dadd+0x670>)
 80012d6:	45a1      	cmp	r9, r4
 80012d8:	d100      	bne.n	80012dc <__aeabi_dadd+0x3a4>
 80012da:	e0ad      	b.n	8001438 <__aeabi_dadd+0x500>
 80012dc:	2480      	movs	r4, #128	; 0x80
 80012de:	0424      	lsls	r4, r4, #16
 80012e0:	4320      	orrs	r0, r4
 80012e2:	4664      	mov	r4, ip
 80012e4:	2c38      	cmp	r4, #56	; 0x38
 80012e6:	dc3d      	bgt.n	8001364 <__aeabi_dadd+0x42c>
 80012e8:	4662      	mov	r2, ip
 80012ea:	2c1f      	cmp	r4, #31
 80012ec:	dd00      	ble.n	80012f0 <__aeabi_dadd+0x3b8>
 80012ee:	e0b7      	b.n	8001460 <__aeabi_dadd+0x528>
 80012f0:	2520      	movs	r5, #32
 80012f2:	001e      	movs	r6, r3
 80012f4:	1b2d      	subs	r5, r5, r4
 80012f6:	0004      	movs	r4, r0
 80012f8:	40ab      	lsls	r3, r5
 80012fa:	40ac      	lsls	r4, r5
 80012fc:	40d6      	lsrs	r6, r2
 80012fe:	40d0      	lsrs	r0, r2
 8001300:	4642      	mov	r2, r8
 8001302:	1e5d      	subs	r5, r3, #1
 8001304:	41ab      	sbcs	r3, r5
 8001306:	4334      	orrs	r4, r6
 8001308:	1a12      	subs	r2, r2, r0
 800130a:	4690      	mov	r8, r2
 800130c:	4323      	orrs	r3, r4
 800130e:	e02c      	b.n	800136a <__aeabi_dadd+0x432>
 8001310:	0742      	lsls	r2, r0, #29
 8001312:	08db      	lsrs	r3, r3, #3
 8001314:	4313      	orrs	r3, r2
 8001316:	08c0      	lsrs	r0, r0, #3
 8001318:	e73b      	b.n	8001192 <__aeabi_dadd+0x25a>
 800131a:	185c      	adds	r4, r3, r1
 800131c:	429c      	cmp	r4, r3
 800131e:	419b      	sbcs	r3, r3
 8001320:	4440      	add	r0, r8
 8001322:	425b      	negs	r3, r3
 8001324:	18c7      	adds	r7, r0, r3
 8001326:	2601      	movs	r6, #1
 8001328:	023b      	lsls	r3, r7, #8
 800132a:	d400      	bmi.n	800132e <__aeabi_dadd+0x3f6>
 800132c:	e729      	b.n	8001182 <__aeabi_dadd+0x24a>
 800132e:	2602      	movs	r6, #2
 8001330:	4a9e      	ldr	r2, [pc, #632]	; (80015ac <__aeabi_dadd+0x674>)
 8001332:	0863      	lsrs	r3, r4, #1
 8001334:	4017      	ands	r7, r2
 8001336:	2201      	movs	r2, #1
 8001338:	4014      	ands	r4, r2
 800133a:	431c      	orrs	r4, r3
 800133c:	07fb      	lsls	r3, r7, #31
 800133e:	431c      	orrs	r4, r3
 8001340:	087f      	lsrs	r7, r7, #1
 8001342:	e673      	b.n	800102c <__aeabi_dadd+0xf4>
 8001344:	4644      	mov	r4, r8
 8001346:	3a20      	subs	r2, #32
 8001348:	40d4      	lsrs	r4, r2
 800134a:	4662      	mov	r2, ip
 800134c:	2a20      	cmp	r2, #32
 800134e:	d005      	beq.n	800135c <__aeabi_dadd+0x424>
 8001350:	4667      	mov	r7, ip
 8001352:	2240      	movs	r2, #64	; 0x40
 8001354:	1bd2      	subs	r2, r2, r7
 8001356:	4647      	mov	r7, r8
 8001358:	4097      	lsls	r7, r2
 800135a:	4339      	orrs	r1, r7
 800135c:	1e4a      	subs	r2, r1, #1
 800135e:	4191      	sbcs	r1, r2
 8001360:	4321      	orrs	r1, r4
 8001362:	e635      	b.n	8000fd0 <__aeabi_dadd+0x98>
 8001364:	4303      	orrs	r3, r0
 8001366:	1e58      	subs	r0, r3, #1
 8001368:	4183      	sbcs	r3, r0
 800136a:	1acc      	subs	r4, r1, r3
 800136c:	42a1      	cmp	r1, r4
 800136e:	41bf      	sbcs	r7, r7
 8001370:	4643      	mov	r3, r8
 8001372:	427f      	negs	r7, r7
 8001374:	4655      	mov	r5, sl
 8001376:	464e      	mov	r6, r9
 8001378:	1bdf      	subs	r7, r3, r7
 800137a:	e62e      	b.n	8000fda <__aeabi_dadd+0xa2>
 800137c:	0002      	movs	r2, r0
 800137e:	431a      	orrs	r2, r3
 8001380:	d100      	bne.n	8001384 <__aeabi_dadd+0x44c>
 8001382:	e0bd      	b.n	8001500 <__aeabi_dadd+0x5c8>
 8001384:	4662      	mov	r2, ip
 8001386:	4664      	mov	r4, ip
 8001388:	3a01      	subs	r2, #1
 800138a:	2c01      	cmp	r4, #1
 800138c:	d100      	bne.n	8001390 <__aeabi_dadd+0x458>
 800138e:	e0e5      	b.n	800155c <__aeabi_dadd+0x624>
 8001390:	4c85      	ldr	r4, [pc, #532]	; (80015a8 <__aeabi_dadd+0x670>)
 8001392:	45a4      	cmp	ip, r4
 8001394:	d058      	beq.n	8001448 <__aeabi_dadd+0x510>
 8001396:	4694      	mov	ip, r2
 8001398:	e749      	b.n	800122e <__aeabi_dadd+0x2f6>
 800139a:	4664      	mov	r4, ip
 800139c:	2220      	movs	r2, #32
 800139e:	1b12      	subs	r2, r2, r4
 80013a0:	4644      	mov	r4, r8
 80013a2:	4094      	lsls	r4, r2
 80013a4:	000f      	movs	r7, r1
 80013a6:	46a1      	mov	r9, r4
 80013a8:	4664      	mov	r4, ip
 80013aa:	4091      	lsls	r1, r2
 80013ac:	40e7      	lsrs	r7, r4
 80013ae:	464c      	mov	r4, r9
 80013b0:	1e4a      	subs	r2, r1, #1
 80013b2:	4191      	sbcs	r1, r2
 80013b4:	433c      	orrs	r4, r7
 80013b6:	4642      	mov	r2, r8
 80013b8:	430c      	orrs	r4, r1
 80013ba:	4661      	mov	r1, ip
 80013bc:	40ca      	lsrs	r2, r1
 80013be:	1880      	adds	r0, r0, r2
 80013c0:	e6f4      	b.n	80011ac <__aeabi_dadd+0x274>
 80013c2:	4c79      	ldr	r4, [pc, #484]	; (80015a8 <__aeabi_dadd+0x670>)
 80013c4:	42a2      	cmp	r2, r4
 80013c6:	d100      	bne.n	80013ca <__aeabi_dadd+0x492>
 80013c8:	e6fd      	b.n	80011c6 <__aeabi_dadd+0x28e>
 80013ca:	1859      	adds	r1, r3, r1
 80013cc:	4299      	cmp	r1, r3
 80013ce:	419b      	sbcs	r3, r3
 80013d0:	4440      	add	r0, r8
 80013d2:	425f      	negs	r7, r3
 80013d4:	19c7      	adds	r7, r0, r7
 80013d6:	07fc      	lsls	r4, r7, #31
 80013d8:	0849      	lsrs	r1, r1, #1
 80013da:	0016      	movs	r6, r2
 80013dc:	430c      	orrs	r4, r1
 80013de:	087f      	lsrs	r7, r7, #1
 80013e0:	e6cf      	b.n	8001182 <__aeabi_dadd+0x24a>
 80013e2:	1acc      	subs	r4, r1, r3
 80013e4:	42a1      	cmp	r1, r4
 80013e6:	41bf      	sbcs	r7, r7
 80013e8:	4643      	mov	r3, r8
 80013ea:	427f      	negs	r7, r7
 80013ec:	1a18      	subs	r0, r3, r0
 80013ee:	4655      	mov	r5, sl
 80013f0:	1bc7      	subs	r7, r0, r7
 80013f2:	e5f7      	b.n	8000fe4 <__aeabi_dadd+0xac>
 80013f4:	08c9      	lsrs	r1, r1, #3
 80013f6:	077b      	lsls	r3, r7, #29
 80013f8:	4655      	mov	r5, sl
 80013fa:	430b      	orrs	r3, r1
 80013fc:	08f8      	lsrs	r0, r7, #3
 80013fe:	e6c8      	b.n	8001192 <__aeabi_dadd+0x25a>
 8001400:	2c00      	cmp	r4, #0
 8001402:	d000      	beq.n	8001406 <__aeabi_dadd+0x4ce>
 8001404:	e081      	b.n	800150a <__aeabi_dadd+0x5d2>
 8001406:	4643      	mov	r3, r8
 8001408:	430b      	orrs	r3, r1
 800140a:	d115      	bne.n	8001438 <__aeabi_dadd+0x500>
 800140c:	2080      	movs	r0, #128	; 0x80
 800140e:	2500      	movs	r5, #0
 8001410:	0300      	lsls	r0, r0, #12
 8001412:	e6e3      	b.n	80011dc <__aeabi_dadd+0x2a4>
 8001414:	1a5c      	subs	r4, r3, r1
 8001416:	42a3      	cmp	r3, r4
 8001418:	419b      	sbcs	r3, r3
 800141a:	1bc7      	subs	r7, r0, r7
 800141c:	425b      	negs	r3, r3
 800141e:	2601      	movs	r6, #1
 8001420:	1aff      	subs	r7, r7, r3
 8001422:	e5da      	b.n	8000fda <__aeabi_dadd+0xa2>
 8001424:	0742      	lsls	r2, r0, #29
 8001426:	08db      	lsrs	r3, r3, #3
 8001428:	4313      	orrs	r3, r2
 800142a:	08c0      	lsrs	r0, r0, #3
 800142c:	e6d2      	b.n	80011d4 <__aeabi_dadd+0x29c>
 800142e:	0742      	lsls	r2, r0, #29
 8001430:	08db      	lsrs	r3, r3, #3
 8001432:	4313      	orrs	r3, r2
 8001434:	08c0      	lsrs	r0, r0, #3
 8001436:	e6ac      	b.n	8001192 <__aeabi_dadd+0x25a>
 8001438:	4643      	mov	r3, r8
 800143a:	4642      	mov	r2, r8
 800143c:	08c9      	lsrs	r1, r1, #3
 800143e:	075b      	lsls	r3, r3, #29
 8001440:	4655      	mov	r5, sl
 8001442:	430b      	orrs	r3, r1
 8001444:	08d0      	lsrs	r0, r2, #3
 8001446:	e6c5      	b.n	80011d4 <__aeabi_dadd+0x29c>
 8001448:	4643      	mov	r3, r8
 800144a:	4642      	mov	r2, r8
 800144c:	075b      	lsls	r3, r3, #29
 800144e:	08c9      	lsrs	r1, r1, #3
 8001450:	430b      	orrs	r3, r1
 8001452:	08d0      	lsrs	r0, r2, #3
 8001454:	e6be      	b.n	80011d4 <__aeabi_dadd+0x29c>
 8001456:	4303      	orrs	r3, r0
 8001458:	001c      	movs	r4, r3
 800145a:	1e63      	subs	r3, r4, #1
 800145c:	419c      	sbcs	r4, r3
 800145e:	e6fc      	b.n	800125a <__aeabi_dadd+0x322>
 8001460:	0002      	movs	r2, r0
 8001462:	3c20      	subs	r4, #32
 8001464:	40e2      	lsrs	r2, r4
 8001466:	0014      	movs	r4, r2
 8001468:	4662      	mov	r2, ip
 800146a:	2a20      	cmp	r2, #32
 800146c:	d003      	beq.n	8001476 <__aeabi_dadd+0x53e>
 800146e:	2540      	movs	r5, #64	; 0x40
 8001470:	1aad      	subs	r5, r5, r2
 8001472:	40a8      	lsls	r0, r5
 8001474:	4303      	orrs	r3, r0
 8001476:	1e58      	subs	r0, r3, #1
 8001478:	4183      	sbcs	r3, r0
 800147a:	4323      	orrs	r3, r4
 800147c:	e775      	b.n	800136a <__aeabi_dadd+0x432>
 800147e:	2a00      	cmp	r2, #0
 8001480:	d0e2      	beq.n	8001448 <__aeabi_dadd+0x510>
 8001482:	003a      	movs	r2, r7
 8001484:	430a      	orrs	r2, r1
 8001486:	d0cd      	beq.n	8001424 <__aeabi_dadd+0x4ec>
 8001488:	0742      	lsls	r2, r0, #29
 800148a:	08db      	lsrs	r3, r3, #3
 800148c:	4313      	orrs	r3, r2
 800148e:	2280      	movs	r2, #128	; 0x80
 8001490:	08c0      	lsrs	r0, r0, #3
 8001492:	0312      	lsls	r2, r2, #12
 8001494:	4210      	tst	r0, r2
 8001496:	d006      	beq.n	80014a6 <__aeabi_dadd+0x56e>
 8001498:	08fc      	lsrs	r4, r7, #3
 800149a:	4214      	tst	r4, r2
 800149c:	d103      	bne.n	80014a6 <__aeabi_dadd+0x56e>
 800149e:	0020      	movs	r0, r4
 80014a0:	08cb      	lsrs	r3, r1, #3
 80014a2:	077a      	lsls	r2, r7, #29
 80014a4:	4313      	orrs	r3, r2
 80014a6:	0f5a      	lsrs	r2, r3, #29
 80014a8:	00db      	lsls	r3, r3, #3
 80014aa:	0752      	lsls	r2, r2, #29
 80014ac:	08db      	lsrs	r3, r3, #3
 80014ae:	4313      	orrs	r3, r2
 80014b0:	e690      	b.n	80011d4 <__aeabi_dadd+0x29c>
 80014b2:	4643      	mov	r3, r8
 80014b4:	430b      	orrs	r3, r1
 80014b6:	d100      	bne.n	80014ba <__aeabi_dadd+0x582>
 80014b8:	e709      	b.n	80012ce <__aeabi_dadd+0x396>
 80014ba:	4643      	mov	r3, r8
 80014bc:	4642      	mov	r2, r8
 80014be:	08c9      	lsrs	r1, r1, #3
 80014c0:	075b      	lsls	r3, r3, #29
 80014c2:	4655      	mov	r5, sl
 80014c4:	430b      	orrs	r3, r1
 80014c6:	08d0      	lsrs	r0, r2, #3
 80014c8:	e666      	b.n	8001198 <__aeabi_dadd+0x260>
 80014ca:	1acc      	subs	r4, r1, r3
 80014cc:	42a1      	cmp	r1, r4
 80014ce:	4189      	sbcs	r1, r1
 80014d0:	1a3f      	subs	r7, r7, r0
 80014d2:	4249      	negs	r1, r1
 80014d4:	4655      	mov	r5, sl
 80014d6:	2601      	movs	r6, #1
 80014d8:	1a7f      	subs	r7, r7, r1
 80014da:	e57e      	b.n	8000fda <__aeabi_dadd+0xa2>
 80014dc:	4642      	mov	r2, r8
 80014de:	1a5c      	subs	r4, r3, r1
 80014e0:	1a87      	subs	r7, r0, r2
 80014e2:	42a3      	cmp	r3, r4
 80014e4:	4192      	sbcs	r2, r2
 80014e6:	4252      	negs	r2, r2
 80014e8:	1abf      	subs	r7, r7, r2
 80014ea:	023a      	lsls	r2, r7, #8
 80014ec:	d53d      	bpl.n	800156a <__aeabi_dadd+0x632>
 80014ee:	1acc      	subs	r4, r1, r3
 80014f0:	42a1      	cmp	r1, r4
 80014f2:	4189      	sbcs	r1, r1
 80014f4:	4643      	mov	r3, r8
 80014f6:	4249      	negs	r1, r1
 80014f8:	1a1f      	subs	r7, r3, r0
 80014fa:	4655      	mov	r5, sl
 80014fc:	1a7f      	subs	r7, r7, r1
 80014fe:	e595      	b.n	800102c <__aeabi_dadd+0xf4>
 8001500:	077b      	lsls	r3, r7, #29
 8001502:	08c9      	lsrs	r1, r1, #3
 8001504:	430b      	orrs	r3, r1
 8001506:	08f8      	lsrs	r0, r7, #3
 8001508:	e643      	b.n	8001192 <__aeabi_dadd+0x25a>
 800150a:	4644      	mov	r4, r8
 800150c:	08db      	lsrs	r3, r3, #3
 800150e:	430c      	orrs	r4, r1
 8001510:	d130      	bne.n	8001574 <__aeabi_dadd+0x63c>
 8001512:	0742      	lsls	r2, r0, #29
 8001514:	4313      	orrs	r3, r2
 8001516:	08c0      	lsrs	r0, r0, #3
 8001518:	e65c      	b.n	80011d4 <__aeabi_dadd+0x29c>
 800151a:	077b      	lsls	r3, r7, #29
 800151c:	08c9      	lsrs	r1, r1, #3
 800151e:	430b      	orrs	r3, r1
 8001520:	08f8      	lsrs	r0, r7, #3
 8001522:	e639      	b.n	8001198 <__aeabi_dadd+0x260>
 8001524:	185c      	adds	r4, r3, r1
 8001526:	429c      	cmp	r4, r3
 8001528:	419b      	sbcs	r3, r3
 800152a:	4440      	add	r0, r8
 800152c:	425b      	negs	r3, r3
 800152e:	18c7      	adds	r7, r0, r3
 8001530:	023b      	lsls	r3, r7, #8
 8001532:	d400      	bmi.n	8001536 <__aeabi_dadd+0x5fe>
 8001534:	e625      	b.n	8001182 <__aeabi_dadd+0x24a>
 8001536:	4b1d      	ldr	r3, [pc, #116]	; (80015ac <__aeabi_dadd+0x674>)
 8001538:	2601      	movs	r6, #1
 800153a:	401f      	ands	r7, r3
 800153c:	e621      	b.n	8001182 <__aeabi_dadd+0x24a>
 800153e:	0004      	movs	r4, r0
 8001540:	3a20      	subs	r2, #32
 8001542:	40d4      	lsrs	r4, r2
 8001544:	4662      	mov	r2, ip
 8001546:	2a20      	cmp	r2, #32
 8001548:	d004      	beq.n	8001554 <__aeabi_dadd+0x61c>
 800154a:	2240      	movs	r2, #64	; 0x40
 800154c:	4666      	mov	r6, ip
 800154e:	1b92      	subs	r2, r2, r6
 8001550:	4090      	lsls	r0, r2
 8001552:	4303      	orrs	r3, r0
 8001554:	1e5a      	subs	r2, r3, #1
 8001556:	4193      	sbcs	r3, r2
 8001558:	431c      	orrs	r4, r3
 800155a:	e67e      	b.n	800125a <__aeabi_dadd+0x322>
 800155c:	185c      	adds	r4, r3, r1
 800155e:	428c      	cmp	r4, r1
 8001560:	4189      	sbcs	r1, r1
 8001562:	4440      	add	r0, r8
 8001564:	4249      	negs	r1, r1
 8001566:	1847      	adds	r7, r0, r1
 8001568:	e6dd      	b.n	8001326 <__aeabi_dadd+0x3ee>
 800156a:	0023      	movs	r3, r4
 800156c:	433b      	orrs	r3, r7
 800156e:	d100      	bne.n	8001572 <__aeabi_dadd+0x63a>
 8001570:	e6ad      	b.n	80012ce <__aeabi_dadd+0x396>
 8001572:	e606      	b.n	8001182 <__aeabi_dadd+0x24a>
 8001574:	0744      	lsls	r4, r0, #29
 8001576:	4323      	orrs	r3, r4
 8001578:	2480      	movs	r4, #128	; 0x80
 800157a:	08c0      	lsrs	r0, r0, #3
 800157c:	0324      	lsls	r4, r4, #12
 800157e:	4220      	tst	r0, r4
 8001580:	d008      	beq.n	8001594 <__aeabi_dadd+0x65c>
 8001582:	4642      	mov	r2, r8
 8001584:	08d6      	lsrs	r6, r2, #3
 8001586:	4226      	tst	r6, r4
 8001588:	d104      	bne.n	8001594 <__aeabi_dadd+0x65c>
 800158a:	4655      	mov	r5, sl
 800158c:	0030      	movs	r0, r6
 800158e:	08cb      	lsrs	r3, r1, #3
 8001590:	0751      	lsls	r1, r2, #29
 8001592:	430b      	orrs	r3, r1
 8001594:	0f5a      	lsrs	r2, r3, #29
 8001596:	00db      	lsls	r3, r3, #3
 8001598:	08db      	lsrs	r3, r3, #3
 800159a:	0752      	lsls	r2, r2, #29
 800159c:	4313      	orrs	r3, r2
 800159e:	e619      	b.n	80011d4 <__aeabi_dadd+0x29c>
 80015a0:	2300      	movs	r3, #0
 80015a2:	4a01      	ldr	r2, [pc, #4]	; (80015a8 <__aeabi_dadd+0x670>)
 80015a4:	001f      	movs	r7, r3
 80015a6:	e55e      	b.n	8001066 <__aeabi_dadd+0x12e>
 80015a8:	000007ff 	.word	0x000007ff
 80015ac:	ff7fffff 	.word	0xff7fffff

080015b0 <__aeabi_ddiv>:
 80015b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015b2:	4657      	mov	r7, sl
 80015b4:	464e      	mov	r6, r9
 80015b6:	4645      	mov	r5, r8
 80015b8:	46de      	mov	lr, fp
 80015ba:	b5e0      	push	{r5, r6, r7, lr}
 80015bc:	4681      	mov	r9, r0
 80015be:	0005      	movs	r5, r0
 80015c0:	030c      	lsls	r4, r1, #12
 80015c2:	0048      	lsls	r0, r1, #1
 80015c4:	4692      	mov	sl, r2
 80015c6:	001f      	movs	r7, r3
 80015c8:	b085      	sub	sp, #20
 80015ca:	0b24      	lsrs	r4, r4, #12
 80015cc:	0d40      	lsrs	r0, r0, #21
 80015ce:	0fce      	lsrs	r6, r1, #31
 80015d0:	2800      	cmp	r0, #0
 80015d2:	d100      	bne.n	80015d6 <__aeabi_ddiv+0x26>
 80015d4:	e156      	b.n	8001884 <__aeabi_ddiv+0x2d4>
 80015d6:	4bd4      	ldr	r3, [pc, #848]	; (8001928 <__aeabi_ddiv+0x378>)
 80015d8:	4298      	cmp	r0, r3
 80015da:	d100      	bne.n	80015de <__aeabi_ddiv+0x2e>
 80015dc:	e172      	b.n	80018c4 <__aeabi_ddiv+0x314>
 80015de:	0f6b      	lsrs	r3, r5, #29
 80015e0:	00e4      	lsls	r4, r4, #3
 80015e2:	431c      	orrs	r4, r3
 80015e4:	2380      	movs	r3, #128	; 0x80
 80015e6:	041b      	lsls	r3, r3, #16
 80015e8:	4323      	orrs	r3, r4
 80015ea:	4698      	mov	r8, r3
 80015ec:	4bcf      	ldr	r3, [pc, #828]	; (800192c <__aeabi_ddiv+0x37c>)
 80015ee:	00ed      	lsls	r5, r5, #3
 80015f0:	469b      	mov	fp, r3
 80015f2:	2300      	movs	r3, #0
 80015f4:	4699      	mov	r9, r3
 80015f6:	4483      	add	fp, r0
 80015f8:	9300      	str	r3, [sp, #0]
 80015fa:	033c      	lsls	r4, r7, #12
 80015fc:	007b      	lsls	r3, r7, #1
 80015fe:	4650      	mov	r0, sl
 8001600:	0b24      	lsrs	r4, r4, #12
 8001602:	0d5b      	lsrs	r3, r3, #21
 8001604:	0fff      	lsrs	r7, r7, #31
 8001606:	2b00      	cmp	r3, #0
 8001608:	d100      	bne.n	800160c <__aeabi_ddiv+0x5c>
 800160a:	e11f      	b.n	800184c <__aeabi_ddiv+0x29c>
 800160c:	4ac6      	ldr	r2, [pc, #792]	; (8001928 <__aeabi_ddiv+0x378>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d100      	bne.n	8001614 <__aeabi_ddiv+0x64>
 8001612:	e162      	b.n	80018da <__aeabi_ddiv+0x32a>
 8001614:	49c5      	ldr	r1, [pc, #788]	; (800192c <__aeabi_ddiv+0x37c>)
 8001616:	0f42      	lsrs	r2, r0, #29
 8001618:	468c      	mov	ip, r1
 800161a:	00e4      	lsls	r4, r4, #3
 800161c:	4659      	mov	r1, fp
 800161e:	4314      	orrs	r4, r2
 8001620:	2280      	movs	r2, #128	; 0x80
 8001622:	4463      	add	r3, ip
 8001624:	0412      	lsls	r2, r2, #16
 8001626:	1acb      	subs	r3, r1, r3
 8001628:	4314      	orrs	r4, r2
 800162a:	469b      	mov	fp, r3
 800162c:	00c2      	lsls	r2, r0, #3
 800162e:	2000      	movs	r0, #0
 8001630:	0033      	movs	r3, r6
 8001632:	407b      	eors	r3, r7
 8001634:	469a      	mov	sl, r3
 8001636:	464b      	mov	r3, r9
 8001638:	2b0f      	cmp	r3, #15
 800163a:	d827      	bhi.n	800168c <__aeabi_ddiv+0xdc>
 800163c:	49bc      	ldr	r1, [pc, #752]	; (8001930 <__aeabi_ddiv+0x380>)
 800163e:	009b      	lsls	r3, r3, #2
 8001640:	58cb      	ldr	r3, [r1, r3]
 8001642:	469f      	mov	pc, r3
 8001644:	46b2      	mov	sl, r6
 8001646:	9b00      	ldr	r3, [sp, #0]
 8001648:	2b02      	cmp	r3, #2
 800164a:	d016      	beq.n	800167a <__aeabi_ddiv+0xca>
 800164c:	2b03      	cmp	r3, #3
 800164e:	d100      	bne.n	8001652 <__aeabi_ddiv+0xa2>
 8001650:	e28e      	b.n	8001b70 <__aeabi_ddiv+0x5c0>
 8001652:	2b01      	cmp	r3, #1
 8001654:	d000      	beq.n	8001658 <__aeabi_ddiv+0xa8>
 8001656:	e0d9      	b.n	800180c <__aeabi_ddiv+0x25c>
 8001658:	2300      	movs	r3, #0
 800165a:	2400      	movs	r4, #0
 800165c:	2500      	movs	r5, #0
 800165e:	4652      	mov	r2, sl
 8001660:	051b      	lsls	r3, r3, #20
 8001662:	4323      	orrs	r3, r4
 8001664:	07d2      	lsls	r2, r2, #31
 8001666:	4313      	orrs	r3, r2
 8001668:	0028      	movs	r0, r5
 800166a:	0019      	movs	r1, r3
 800166c:	b005      	add	sp, #20
 800166e:	bcf0      	pop	{r4, r5, r6, r7}
 8001670:	46bb      	mov	fp, r7
 8001672:	46b2      	mov	sl, r6
 8001674:	46a9      	mov	r9, r5
 8001676:	46a0      	mov	r8, r4
 8001678:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800167a:	2400      	movs	r4, #0
 800167c:	2500      	movs	r5, #0
 800167e:	4baa      	ldr	r3, [pc, #680]	; (8001928 <__aeabi_ddiv+0x378>)
 8001680:	e7ed      	b.n	800165e <__aeabi_ddiv+0xae>
 8001682:	46ba      	mov	sl, r7
 8001684:	46a0      	mov	r8, r4
 8001686:	0015      	movs	r5, r2
 8001688:	9000      	str	r0, [sp, #0]
 800168a:	e7dc      	b.n	8001646 <__aeabi_ddiv+0x96>
 800168c:	4544      	cmp	r4, r8
 800168e:	d200      	bcs.n	8001692 <__aeabi_ddiv+0xe2>
 8001690:	e1c7      	b.n	8001a22 <__aeabi_ddiv+0x472>
 8001692:	d100      	bne.n	8001696 <__aeabi_ddiv+0xe6>
 8001694:	e1c2      	b.n	8001a1c <__aeabi_ddiv+0x46c>
 8001696:	2301      	movs	r3, #1
 8001698:	425b      	negs	r3, r3
 800169a:	469c      	mov	ip, r3
 800169c:	002e      	movs	r6, r5
 800169e:	4640      	mov	r0, r8
 80016a0:	2500      	movs	r5, #0
 80016a2:	44e3      	add	fp, ip
 80016a4:	0223      	lsls	r3, r4, #8
 80016a6:	0e14      	lsrs	r4, r2, #24
 80016a8:	431c      	orrs	r4, r3
 80016aa:	0c1b      	lsrs	r3, r3, #16
 80016ac:	4699      	mov	r9, r3
 80016ae:	0423      	lsls	r3, r4, #16
 80016b0:	0c1f      	lsrs	r7, r3, #16
 80016b2:	0212      	lsls	r2, r2, #8
 80016b4:	4649      	mov	r1, r9
 80016b6:	9200      	str	r2, [sp, #0]
 80016b8:	9701      	str	r7, [sp, #4]
 80016ba:	f7fe fdcd 	bl	8000258 <__aeabi_uidivmod>
 80016be:	0002      	movs	r2, r0
 80016c0:	437a      	muls	r2, r7
 80016c2:	040b      	lsls	r3, r1, #16
 80016c4:	0c31      	lsrs	r1, r6, #16
 80016c6:	4680      	mov	r8, r0
 80016c8:	4319      	orrs	r1, r3
 80016ca:	428a      	cmp	r2, r1
 80016cc:	d907      	bls.n	80016de <__aeabi_ddiv+0x12e>
 80016ce:	2301      	movs	r3, #1
 80016d0:	425b      	negs	r3, r3
 80016d2:	469c      	mov	ip, r3
 80016d4:	1909      	adds	r1, r1, r4
 80016d6:	44e0      	add	r8, ip
 80016d8:	428c      	cmp	r4, r1
 80016da:	d800      	bhi.n	80016de <__aeabi_ddiv+0x12e>
 80016dc:	e207      	b.n	8001aee <__aeabi_ddiv+0x53e>
 80016de:	1a88      	subs	r0, r1, r2
 80016e0:	4649      	mov	r1, r9
 80016e2:	f7fe fdb9 	bl	8000258 <__aeabi_uidivmod>
 80016e6:	0409      	lsls	r1, r1, #16
 80016e8:	468c      	mov	ip, r1
 80016ea:	0431      	lsls	r1, r6, #16
 80016ec:	4666      	mov	r6, ip
 80016ee:	9a01      	ldr	r2, [sp, #4]
 80016f0:	0c09      	lsrs	r1, r1, #16
 80016f2:	4342      	muls	r2, r0
 80016f4:	0003      	movs	r3, r0
 80016f6:	4331      	orrs	r1, r6
 80016f8:	428a      	cmp	r2, r1
 80016fa:	d904      	bls.n	8001706 <__aeabi_ddiv+0x156>
 80016fc:	1909      	adds	r1, r1, r4
 80016fe:	3b01      	subs	r3, #1
 8001700:	428c      	cmp	r4, r1
 8001702:	d800      	bhi.n	8001706 <__aeabi_ddiv+0x156>
 8001704:	e1ed      	b.n	8001ae2 <__aeabi_ddiv+0x532>
 8001706:	1a88      	subs	r0, r1, r2
 8001708:	4642      	mov	r2, r8
 800170a:	0412      	lsls	r2, r2, #16
 800170c:	431a      	orrs	r2, r3
 800170e:	4690      	mov	r8, r2
 8001710:	4641      	mov	r1, r8
 8001712:	9b00      	ldr	r3, [sp, #0]
 8001714:	040e      	lsls	r6, r1, #16
 8001716:	0c1b      	lsrs	r3, r3, #16
 8001718:	001f      	movs	r7, r3
 800171a:	9302      	str	r3, [sp, #8]
 800171c:	9b00      	ldr	r3, [sp, #0]
 800171e:	0c36      	lsrs	r6, r6, #16
 8001720:	041b      	lsls	r3, r3, #16
 8001722:	0c19      	lsrs	r1, r3, #16
 8001724:	000b      	movs	r3, r1
 8001726:	4373      	muls	r3, r6
 8001728:	0c12      	lsrs	r2, r2, #16
 800172a:	437e      	muls	r6, r7
 800172c:	9103      	str	r1, [sp, #12]
 800172e:	4351      	muls	r1, r2
 8001730:	437a      	muls	r2, r7
 8001732:	0c1f      	lsrs	r7, r3, #16
 8001734:	46bc      	mov	ip, r7
 8001736:	1876      	adds	r6, r6, r1
 8001738:	4466      	add	r6, ip
 800173a:	42b1      	cmp	r1, r6
 800173c:	d903      	bls.n	8001746 <__aeabi_ddiv+0x196>
 800173e:	2180      	movs	r1, #128	; 0x80
 8001740:	0249      	lsls	r1, r1, #9
 8001742:	468c      	mov	ip, r1
 8001744:	4462      	add	r2, ip
 8001746:	0c31      	lsrs	r1, r6, #16
 8001748:	188a      	adds	r2, r1, r2
 800174a:	0431      	lsls	r1, r6, #16
 800174c:	041e      	lsls	r6, r3, #16
 800174e:	0c36      	lsrs	r6, r6, #16
 8001750:	198e      	adds	r6, r1, r6
 8001752:	4290      	cmp	r0, r2
 8001754:	d302      	bcc.n	800175c <__aeabi_ddiv+0x1ac>
 8001756:	d112      	bne.n	800177e <__aeabi_ddiv+0x1ce>
 8001758:	42b5      	cmp	r5, r6
 800175a:	d210      	bcs.n	800177e <__aeabi_ddiv+0x1ce>
 800175c:	4643      	mov	r3, r8
 800175e:	1e59      	subs	r1, r3, #1
 8001760:	9b00      	ldr	r3, [sp, #0]
 8001762:	469c      	mov	ip, r3
 8001764:	4465      	add	r5, ip
 8001766:	001f      	movs	r7, r3
 8001768:	429d      	cmp	r5, r3
 800176a:	419b      	sbcs	r3, r3
 800176c:	425b      	negs	r3, r3
 800176e:	191b      	adds	r3, r3, r4
 8001770:	18c0      	adds	r0, r0, r3
 8001772:	4284      	cmp	r4, r0
 8001774:	d200      	bcs.n	8001778 <__aeabi_ddiv+0x1c8>
 8001776:	e1a0      	b.n	8001aba <__aeabi_ddiv+0x50a>
 8001778:	d100      	bne.n	800177c <__aeabi_ddiv+0x1cc>
 800177a:	e19b      	b.n	8001ab4 <__aeabi_ddiv+0x504>
 800177c:	4688      	mov	r8, r1
 800177e:	1bae      	subs	r6, r5, r6
 8001780:	42b5      	cmp	r5, r6
 8001782:	41ad      	sbcs	r5, r5
 8001784:	1a80      	subs	r0, r0, r2
 8001786:	426d      	negs	r5, r5
 8001788:	1b40      	subs	r0, r0, r5
 800178a:	4284      	cmp	r4, r0
 800178c:	d100      	bne.n	8001790 <__aeabi_ddiv+0x1e0>
 800178e:	e1d5      	b.n	8001b3c <__aeabi_ddiv+0x58c>
 8001790:	4649      	mov	r1, r9
 8001792:	f7fe fd61 	bl	8000258 <__aeabi_uidivmod>
 8001796:	9a01      	ldr	r2, [sp, #4]
 8001798:	040b      	lsls	r3, r1, #16
 800179a:	4342      	muls	r2, r0
 800179c:	0c31      	lsrs	r1, r6, #16
 800179e:	0005      	movs	r5, r0
 80017a0:	4319      	orrs	r1, r3
 80017a2:	428a      	cmp	r2, r1
 80017a4:	d900      	bls.n	80017a8 <__aeabi_ddiv+0x1f8>
 80017a6:	e16c      	b.n	8001a82 <__aeabi_ddiv+0x4d2>
 80017a8:	1a88      	subs	r0, r1, r2
 80017aa:	4649      	mov	r1, r9
 80017ac:	f7fe fd54 	bl	8000258 <__aeabi_uidivmod>
 80017b0:	9a01      	ldr	r2, [sp, #4]
 80017b2:	0436      	lsls	r6, r6, #16
 80017b4:	4342      	muls	r2, r0
 80017b6:	0409      	lsls	r1, r1, #16
 80017b8:	0c36      	lsrs	r6, r6, #16
 80017ba:	0003      	movs	r3, r0
 80017bc:	430e      	orrs	r6, r1
 80017be:	42b2      	cmp	r2, r6
 80017c0:	d900      	bls.n	80017c4 <__aeabi_ddiv+0x214>
 80017c2:	e153      	b.n	8001a6c <__aeabi_ddiv+0x4bc>
 80017c4:	9803      	ldr	r0, [sp, #12]
 80017c6:	1ab6      	subs	r6, r6, r2
 80017c8:	0002      	movs	r2, r0
 80017ca:	042d      	lsls	r5, r5, #16
 80017cc:	431d      	orrs	r5, r3
 80017ce:	9f02      	ldr	r7, [sp, #8]
 80017d0:	042b      	lsls	r3, r5, #16
 80017d2:	0c1b      	lsrs	r3, r3, #16
 80017d4:	435a      	muls	r2, r3
 80017d6:	437b      	muls	r3, r7
 80017d8:	469c      	mov	ip, r3
 80017da:	0c29      	lsrs	r1, r5, #16
 80017dc:	4348      	muls	r0, r1
 80017de:	0c13      	lsrs	r3, r2, #16
 80017e0:	4484      	add	ip, r0
 80017e2:	4463      	add	r3, ip
 80017e4:	4379      	muls	r1, r7
 80017e6:	4298      	cmp	r0, r3
 80017e8:	d903      	bls.n	80017f2 <__aeabi_ddiv+0x242>
 80017ea:	2080      	movs	r0, #128	; 0x80
 80017ec:	0240      	lsls	r0, r0, #9
 80017ee:	4684      	mov	ip, r0
 80017f0:	4461      	add	r1, ip
 80017f2:	0c18      	lsrs	r0, r3, #16
 80017f4:	0412      	lsls	r2, r2, #16
 80017f6:	041b      	lsls	r3, r3, #16
 80017f8:	0c12      	lsrs	r2, r2, #16
 80017fa:	1841      	adds	r1, r0, r1
 80017fc:	189b      	adds	r3, r3, r2
 80017fe:	428e      	cmp	r6, r1
 8001800:	d200      	bcs.n	8001804 <__aeabi_ddiv+0x254>
 8001802:	e0ff      	b.n	8001a04 <__aeabi_ddiv+0x454>
 8001804:	d100      	bne.n	8001808 <__aeabi_ddiv+0x258>
 8001806:	e0fa      	b.n	80019fe <__aeabi_ddiv+0x44e>
 8001808:	2301      	movs	r3, #1
 800180a:	431d      	orrs	r5, r3
 800180c:	4a49      	ldr	r2, [pc, #292]	; (8001934 <__aeabi_ddiv+0x384>)
 800180e:	445a      	add	r2, fp
 8001810:	2a00      	cmp	r2, #0
 8001812:	dc00      	bgt.n	8001816 <__aeabi_ddiv+0x266>
 8001814:	e0aa      	b.n	800196c <__aeabi_ddiv+0x3bc>
 8001816:	076b      	lsls	r3, r5, #29
 8001818:	d000      	beq.n	800181c <__aeabi_ddiv+0x26c>
 800181a:	e13d      	b.n	8001a98 <__aeabi_ddiv+0x4e8>
 800181c:	08ed      	lsrs	r5, r5, #3
 800181e:	4643      	mov	r3, r8
 8001820:	01db      	lsls	r3, r3, #7
 8001822:	d506      	bpl.n	8001832 <__aeabi_ddiv+0x282>
 8001824:	4642      	mov	r2, r8
 8001826:	4b44      	ldr	r3, [pc, #272]	; (8001938 <__aeabi_ddiv+0x388>)
 8001828:	401a      	ands	r2, r3
 800182a:	4690      	mov	r8, r2
 800182c:	2280      	movs	r2, #128	; 0x80
 800182e:	00d2      	lsls	r2, r2, #3
 8001830:	445a      	add	r2, fp
 8001832:	4b42      	ldr	r3, [pc, #264]	; (800193c <__aeabi_ddiv+0x38c>)
 8001834:	429a      	cmp	r2, r3
 8001836:	dd00      	ble.n	800183a <__aeabi_ddiv+0x28a>
 8001838:	e71f      	b.n	800167a <__aeabi_ddiv+0xca>
 800183a:	4643      	mov	r3, r8
 800183c:	075b      	lsls	r3, r3, #29
 800183e:	431d      	orrs	r5, r3
 8001840:	4643      	mov	r3, r8
 8001842:	0552      	lsls	r2, r2, #21
 8001844:	025c      	lsls	r4, r3, #9
 8001846:	0b24      	lsrs	r4, r4, #12
 8001848:	0d53      	lsrs	r3, r2, #21
 800184a:	e708      	b.n	800165e <__aeabi_ddiv+0xae>
 800184c:	4652      	mov	r2, sl
 800184e:	4322      	orrs	r2, r4
 8001850:	d100      	bne.n	8001854 <__aeabi_ddiv+0x2a4>
 8001852:	e07b      	b.n	800194c <__aeabi_ddiv+0x39c>
 8001854:	2c00      	cmp	r4, #0
 8001856:	d100      	bne.n	800185a <__aeabi_ddiv+0x2aa>
 8001858:	e0fa      	b.n	8001a50 <__aeabi_ddiv+0x4a0>
 800185a:	0020      	movs	r0, r4
 800185c:	f001 fa22 	bl	8002ca4 <__clzsi2>
 8001860:	0002      	movs	r2, r0
 8001862:	3a0b      	subs	r2, #11
 8001864:	231d      	movs	r3, #29
 8001866:	0001      	movs	r1, r0
 8001868:	1a9b      	subs	r3, r3, r2
 800186a:	4652      	mov	r2, sl
 800186c:	3908      	subs	r1, #8
 800186e:	40da      	lsrs	r2, r3
 8001870:	408c      	lsls	r4, r1
 8001872:	4314      	orrs	r4, r2
 8001874:	4652      	mov	r2, sl
 8001876:	408a      	lsls	r2, r1
 8001878:	4b31      	ldr	r3, [pc, #196]	; (8001940 <__aeabi_ddiv+0x390>)
 800187a:	4458      	add	r0, fp
 800187c:	469b      	mov	fp, r3
 800187e:	4483      	add	fp, r0
 8001880:	2000      	movs	r0, #0
 8001882:	e6d5      	b.n	8001630 <__aeabi_ddiv+0x80>
 8001884:	464b      	mov	r3, r9
 8001886:	4323      	orrs	r3, r4
 8001888:	4698      	mov	r8, r3
 800188a:	d044      	beq.n	8001916 <__aeabi_ddiv+0x366>
 800188c:	2c00      	cmp	r4, #0
 800188e:	d100      	bne.n	8001892 <__aeabi_ddiv+0x2e2>
 8001890:	e0ce      	b.n	8001a30 <__aeabi_ddiv+0x480>
 8001892:	0020      	movs	r0, r4
 8001894:	f001 fa06 	bl	8002ca4 <__clzsi2>
 8001898:	0001      	movs	r1, r0
 800189a:	0002      	movs	r2, r0
 800189c:	390b      	subs	r1, #11
 800189e:	231d      	movs	r3, #29
 80018a0:	1a5b      	subs	r3, r3, r1
 80018a2:	4649      	mov	r1, r9
 80018a4:	0010      	movs	r0, r2
 80018a6:	40d9      	lsrs	r1, r3
 80018a8:	3808      	subs	r0, #8
 80018aa:	4084      	lsls	r4, r0
 80018ac:	000b      	movs	r3, r1
 80018ae:	464d      	mov	r5, r9
 80018b0:	4323      	orrs	r3, r4
 80018b2:	4698      	mov	r8, r3
 80018b4:	4085      	lsls	r5, r0
 80018b6:	4823      	ldr	r0, [pc, #140]	; (8001944 <__aeabi_ddiv+0x394>)
 80018b8:	1a83      	subs	r3, r0, r2
 80018ba:	469b      	mov	fp, r3
 80018bc:	2300      	movs	r3, #0
 80018be:	4699      	mov	r9, r3
 80018c0:	9300      	str	r3, [sp, #0]
 80018c2:	e69a      	b.n	80015fa <__aeabi_ddiv+0x4a>
 80018c4:	464b      	mov	r3, r9
 80018c6:	4323      	orrs	r3, r4
 80018c8:	4698      	mov	r8, r3
 80018ca:	d11d      	bne.n	8001908 <__aeabi_ddiv+0x358>
 80018cc:	2308      	movs	r3, #8
 80018ce:	4699      	mov	r9, r3
 80018d0:	3b06      	subs	r3, #6
 80018d2:	2500      	movs	r5, #0
 80018d4:	4683      	mov	fp, r0
 80018d6:	9300      	str	r3, [sp, #0]
 80018d8:	e68f      	b.n	80015fa <__aeabi_ddiv+0x4a>
 80018da:	4652      	mov	r2, sl
 80018dc:	4322      	orrs	r2, r4
 80018de:	d109      	bne.n	80018f4 <__aeabi_ddiv+0x344>
 80018e0:	2302      	movs	r3, #2
 80018e2:	4649      	mov	r1, r9
 80018e4:	4319      	orrs	r1, r3
 80018e6:	4b18      	ldr	r3, [pc, #96]	; (8001948 <__aeabi_ddiv+0x398>)
 80018e8:	4689      	mov	r9, r1
 80018ea:	469c      	mov	ip, r3
 80018ec:	2400      	movs	r4, #0
 80018ee:	2002      	movs	r0, #2
 80018f0:	44e3      	add	fp, ip
 80018f2:	e69d      	b.n	8001630 <__aeabi_ddiv+0x80>
 80018f4:	2303      	movs	r3, #3
 80018f6:	464a      	mov	r2, r9
 80018f8:	431a      	orrs	r2, r3
 80018fa:	4b13      	ldr	r3, [pc, #76]	; (8001948 <__aeabi_ddiv+0x398>)
 80018fc:	4691      	mov	r9, r2
 80018fe:	469c      	mov	ip, r3
 8001900:	4652      	mov	r2, sl
 8001902:	2003      	movs	r0, #3
 8001904:	44e3      	add	fp, ip
 8001906:	e693      	b.n	8001630 <__aeabi_ddiv+0x80>
 8001908:	230c      	movs	r3, #12
 800190a:	4699      	mov	r9, r3
 800190c:	3b09      	subs	r3, #9
 800190e:	46a0      	mov	r8, r4
 8001910:	4683      	mov	fp, r0
 8001912:	9300      	str	r3, [sp, #0]
 8001914:	e671      	b.n	80015fa <__aeabi_ddiv+0x4a>
 8001916:	2304      	movs	r3, #4
 8001918:	4699      	mov	r9, r3
 800191a:	2300      	movs	r3, #0
 800191c:	469b      	mov	fp, r3
 800191e:	3301      	adds	r3, #1
 8001920:	2500      	movs	r5, #0
 8001922:	9300      	str	r3, [sp, #0]
 8001924:	e669      	b.n	80015fa <__aeabi_ddiv+0x4a>
 8001926:	46c0      	nop			; (mov r8, r8)
 8001928:	000007ff 	.word	0x000007ff
 800192c:	fffffc01 	.word	0xfffffc01
 8001930:	0800b2d8 	.word	0x0800b2d8
 8001934:	000003ff 	.word	0x000003ff
 8001938:	feffffff 	.word	0xfeffffff
 800193c:	000007fe 	.word	0x000007fe
 8001940:	000003f3 	.word	0x000003f3
 8001944:	fffffc0d 	.word	0xfffffc0d
 8001948:	fffff801 	.word	0xfffff801
 800194c:	4649      	mov	r1, r9
 800194e:	2301      	movs	r3, #1
 8001950:	4319      	orrs	r1, r3
 8001952:	4689      	mov	r9, r1
 8001954:	2400      	movs	r4, #0
 8001956:	2001      	movs	r0, #1
 8001958:	e66a      	b.n	8001630 <__aeabi_ddiv+0x80>
 800195a:	2300      	movs	r3, #0
 800195c:	2480      	movs	r4, #128	; 0x80
 800195e:	469a      	mov	sl, r3
 8001960:	2500      	movs	r5, #0
 8001962:	4b8a      	ldr	r3, [pc, #552]	; (8001b8c <__aeabi_ddiv+0x5dc>)
 8001964:	0324      	lsls	r4, r4, #12
 8001966:	e67a      	b.n	800165e <__aeabi_ddiv+0xae>
 8001968:	2501      	movs	r5, #1
 800196a:	426d      	negs	r5, r5
 800196c:	2301      	movs	r3, #1
 800196e:	1a9b      	subs	r3, r3, r2
 8001970:	2b38      	cmp	r3, #56	; 0x38
 8001972:	dd00      	ble.n	8001976 <__aeabi_ddiv+0x3c6>
 8001974:	e670      	b.n	8001658 <__aeabi_ddiv+0xa8>
 8001976:	2b1f      	cmp	r3, #31
 8001978:	dc00      	bgt.n	800197c <__aeabi_ddiv+0x3cc>
 800197a:	e0bf      	b.n	8001afc <__aeabi_ddiv+0x54c>
 800197c:	211f      	movs	r1, #31
 800197e:	4249      	negs	r1, r1
 8001980:	1a8a      	subs	r2, r1, r2
 8001982:	4641      	mov	r1, r8
 8001984:	40d1      	lsrs	r1, r2
 8001986:	000a      	movs	r2, r1
 8001988:	2b20      	cmp	r3, #32
 800198a:	d004      	beq.n	8001996 <__aeabi_ddiv+0x3e6>
 800198c:	4641      	mov	r1, r8
 800198e:	4b80      	ldr	r3, [pc, #512]	; (8001b90 <__aeabi_ddiv+0x5e0>)
 8001990:	445b      	add	r3, fp
 8001992:	4099      	lsls	r1, r3
 8001994:	430d      	orrs	r5, r1
 8001996:	1e6b      	subs	r3, r5, #1
 8001998:	419d      	sbcs	r5, r3
 800199a:	2307      	movs	r3, #7
 800199c:	432a      	orrs	r2, r5
 800199e:	001d      	movs	r5, r3
 80019a0:	2400      	movs	r4, #0
 80019a2:	4015      	ands	r5, r2
 80019a4:	4213      	tst	r3, r2
 80019a6:	d100      	bne.n	80019aa <__aeabi_ddiv+0x3fa>
 80019a8:	e0d4      	b.n	8001b54 <__aeabi_ddiv+0x5a4>
 80019aa:	210f      	movs	r1, #15
 80019ac:	2300      	movs	r3, #0
 80019ae:	4011      	ands	r1, r2
 80019b0:	2904      	cmp	r1, #4
 80019b2:	d100      	bne.n	80019b6 <__aeabi_ddiv+0x406>
 80019b4:	e0cb      	b.n	8001b4e <__aeabi_ddiv+0x59e>
 80019b6:	1d11      	adds	r1, r2, #4
 80019b8:	4291      	cmp	r1, r2
 80019ba:	4192      	sbcs	r2, r2
 80019bc:	4252      	negs	r2, r2
 80019be:	189b      	adds	r3, r3, r2
 80019c0:	000a      	movs	r2, r1
 80019c2:	0219      	lsls	r1, r3, #8
 80019c4:	d400      	bmi.n	80019c8 <__aeabi_ddiv+0x418>
 80019c6:	e0c2      	b.n	8001b4e <__aeabi_ddiv+0x59e>
 80019c8:	2301      	movs	r3, #1
 80019ca:	2400      	movs	r4, #0
 80019cc:	2500      	movs	r5, #0
 80019ce:	e646      	b.n	800165e <__aeabi_ddiv+0xae>
 80019d0:	2380      	movs	r3, #128	; 0x80
 80019d2:	4641      	mov	r1, r8
 80019d4:	031b      	lsls	r3, r3, #12
 80019d6:	4219      	tst	r1, r3
 80019d8:	d008      	beq.n	80019ec <__aeabi_ddiv+0x43c>
 80019da:	421c      	tst	r4, r3
 80019dc:	d106      	bne.n	80019ec <__aeabi_ddiv+0x43c>
 80019de:	431c      	orrs	r4, r3
 80019e0:	0324      	lsls	r4, r4, #12
 80019e2:	46ba      	mov	sl, r7
 80019e4:	0015      	movs	r5, r2
 80019e6:	4b69      	ldr	r3, [pc, #420]	; (8001b8c <__aeabi_ddiv+0x5dc>)
 80019e8:	0b24      	lsrs	r4, r4, #12
 80019ea:	e638      	b.n	800165e <__aeabi_ddiv+0xae>
 80019ec:	2480      	movs	r4, #128	; 0x80
 80019ee:	4643      	mov	r3, r8
 80019f0:	0324      	lsls	r4, r4, #12
 80019f2:	431c      	orrs	r4, r3
 80019f4:	0324      	lsls	r4, r4, #12
 80019f6:	46b2      	mov	sl, r6
 80019f8:	4b64      	ldr	r3, [pc, #400]	; (8001b8c <__aeabi_ddiv+0x5dc>)
 80019fa:	0b24      	lsrs	r4, r4, #12
 80019fc:	e62f      	b.n	800165e <__aeabi_ddiv+0xae>
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d100      	bne.n	8001a04 <__aeabi_ddiv+0x454>
 8001a02:	e703      	b.n	800180c <__aeabi_ddiv+0x25c>
 8001a04:	19a6      	adds	r6, r4, r6
 8001a06:	1e68      	subs	r0, r5, #1
 8001a08:	42a6      	cmp	r6, r4
 8001a0a:	d200      	bcs.n	8001a0e <__aeabi_ddiv+0x45e>
 8001a0c:	e08d      	b.n	8001b2a <__aeabi_ddiv+0x57a>
 8001a0e:	428e      	cmp	r6, r1
 8001a10:	d200      	bcs.n	8001a14 <__aeabi_ddiv+0x464>
 8001a12:	e0a3      	b.n	8001b5c <__aeabi_ddiv+0x5ac>
 8001a14:	d100      	bne.n	8001a18 <__aeabi_ddiv+0x468>
 8001a16:	e0b3      	b.n	8001b80 <__aeabi_ddiv+0x5d0>
 8001a18:	0005      	movs	r5, r0
 8001a1a:	e6f5      	b.n	8001808 <__aeabi_ddiv+0x258>
 8001a1c:	42aa      	cmp	r2, r5
 8001a1e:	d900      	bls.n	8001a22 <__aeabi_ddiv+0x472>
 8001a20:	e639      	b.n	8001696 <__aeabi_ddiv+0xe6>
 8001a22:	4643      	mov	r3, r8
 8001a24:	07de      	lsls	r6, r3, #31
 8001a26:	0858      	lsrs	r0, r3, #1
 8001a28:	086b      	lsrs	r3, r5, #1
 8001a2a:	431e      	orrs	r6, r3
 8001a2c:	07ed      	lsls	r5, r5, #31
 8001a2e:	e639      	b.n	80016a4 <__aeabi_ddiv+0xf4>
 8001a30:	4648      	mov	r0, r9
 8001a32:	f001 f937 	bl	8002ca4 <__clzsi2>
 8001a36:	0001      	movs	r1, r0
 8001a38:	0002      	movs	r2, r0
 8001a3a:	3115      	adds	r1, #21
 8001a3c:	3220      	adds	r2, #32
 8001a3e:	291c      	cmp	r1, #28
 8001a40:	dc00      	bgt.n	8001a44 <__aeabi_ddiv+0x494>
 8001a42:	e72c      	b.n	800189e <__aeabi_ddiv+0x2ee>
 8001a44:	464b      	mov	r3, r9
 8001a46:	3808      	subs	r0, #8
 8001a48:	4083      	lsls	r3, r0
 8001a4a:	2500      	movs	r5, #0
 8001a4c:	4698      	mov	r8, r3
 8001a4e:	e732      	b.n	80018b6 <__aeabi_ddiv+0x306>
 8001a50:	f001 f928 	bl	8002ca4 <__clzsi2>
 8001a54:	0003      	movs	r3, r0
 8001a56:	001a      	movs	r2, r3
 8001a58:	3215      	adds	r2, #21
 8001a5a:	3020      	adds	r0, #32
 8001a5c:	2a1c      	cmp	r2, #28
 8001a5e:	dc00      	bgt.n	8001a62 <__aeabi_ddiv+0x4b2>
 8001a60:	e700      	b.n	8001864 <__aeabi_ddiv+0x2b4>
 8001a62:	4654      	mov	r4, sl
 8001a64:	3b08      	subs	r3, #8
 8001a66:	2200      	movs	r2, #0
 8001a68:	409c      	lsls	r4, r3
 8001a6a:	e705      	b.n	8001878 <__aeabi_ddiv+0x2c8>
 8001a6c:	1936      	adds	r6, r6, r4
 8001a6e:	3b01      	subs	r3, #1
 8001a70:	42b4      	cmp	r4, r6
 8001a72:	d900      	bls.n	8001a76 <__aeabi_ddiv+0x4c6>
 8001a74:	e6a6      	b.n	80017c4 <__aeabi_ddiv+0x214>
 8001a76:	42b2      	cmp	r2, r6
 8001a78:	d800      	bhi.n	8001a7c <__aeabi_ddiv+0x4cc>
 8001a7a:	e6a3      	b.n	80017c4 <__aeabi_ddiv+0x214>
 8001a7c:	1e83      	subs	r3, r0, #2
 8001a7e:	1936      	adds	r6, r6, r4
 8001a80:	e6a0      	b.n	80017c4 <__aeabi_ddiv+0x214>
 8001a82:	1909      	adds	r1, r1, r4
 8001a84:	3d01      	subs	r5, #1
 8001a86:	428c      	cmp	r4, r1
 8001a88:	d900      	bls.n	8001a8c <__aeabi_ddiv+0x4dc>
 8001a8a:	e68d      	b.n	80017a8 <__aeabi_ddiv+0x1f8>
 8001a8c:	428a      	cmp	r2, r1
 8001a8e:	d800      	bhi.n	8001a92 <__aeabi_ddiv+0x4e2>
 8001a90:	e68a      	b.n	80017a8 <__aeabi_ddiv+0x1f8>
 8001a92:	1e85      	subs	r5, r0, #2
 8001a94:	1909      	adds	r1, r1, r4
 8001a96:	e687      	b.n	80017a8 <__aeabi_ddiv+0x1f8>
 8001a98:	230f      	movs	r3, #15
 8001a9a:	402b      	ands	r3, r5
 8001a9c:	2b04      	cmp	r3, #4
 8001a9e:	d100      	bne.n	8001aa2 <__aeabi_ddiv+0x4f2>
 8001aa0:	e6bc      	b.n	800181c <__aeabi_ddiv+0x26c>
 8001aa2:	2305      	movs	r3, #5
 8001aa4:	425b      	negs	r3, r3
 8001aa6:	42ab      	cmp	r3, r5
 8001aa8:	419b      	sbcs	r3, r3
 8001aaa:	3504      	adds	r5, #4
 8001aac:	425b      	negs	r3, r3
 8001aae:	08ed      	lsrs	r5, r5, #3
 8001ab0:	4498      	add	r8, r3
 8001ab2:	e6b4      	b.n	800181e <__aeabi_ddiv+0x26e>
 8001ab4:	42af      	cmp	r7, r5
 8001ab6:	d900      	bls.n	8001aba <__aeabi_ddiv+0x50a>
 8001ab8:	e660      	b.n	800177c <__aeabi_ddiv+0x1cc>
 8001aba:	4282      	cmp	r2, r0
 8001abc:	d804      	bhi.n	8001ac8 <__aeabi_ddiv+0x518>
 8001abe:	d000      	beq.n	8001ac2 <__aeabi_ddiv+0x512>
 8001ac0:	e65c      	b.n	800177c <__aeabi_ddiv+0x1cc>
 8001ac2:	42ae      	cmp	r6, r5
 8001ac4:	d800      	bhi.n	8001ac8 <__aeabi_ddiv+0x518>
 8001ac6:	e659      	b.n	800177c <__aeabi_ddiv+0x1cc>
 8001ac8:	2302      	movs	r3, #2
 8001aca:	425b      	negs	r3, r3
 8001acc:	469c      	mov	ip, r3
 8001ace:	9b00      	ldr	r3, [sp, #0]
 8001ad0:	44e0      	add	r8, ip
 8001ad2:	469c      	mov	ip, r3
 8001ad4:	4465      	add	r5, ip
 8001ad6:	429d      	cmp	r5, r3
 8001ad8:	419b      	sbcs	r3, r3
 8001ada:	425b      	negs	r3, r3
 8001adc:	191b      	adds	r3, r3, r4
 8001ade:	18c0      	adds	r0, r0, r3
 8001ae0:	e64d      	b.n	800177e <__aeabi_ddiv+0x1ce>
 8001ae2:	428a      	cmp	r2, r1
 8001ae4:	d800      	bhi.n	8001ae8 <__aeabi_ddiv+0x538>
 8001ae6:	e60e      	b.n	8001706 <__aeabi_ddiv+0x156>
 8001ae8:	1e83      	subs	r3, r0, #2
 8001aea:	1909      	adds	r1, r1, r4
 8001aec:	e60b      	b.n	8001706 <__aeabi_ddiv+0x156>
 8001aee:	428a      	cmp	r2, r1
 8001af0:	d800      	bhi.n	8001af4 <__aeabi_ddiv+0x544>
 8001af2:	e5f4      	b.n	80016de <__aeabi_ddiv+0x12e>
 8001af4:	1e83      	subs	r3, r0, #2
 8001af6:	4698      	mov	r8, r3
 8001af8:	1909      	adds	r1, r1, r4
 8001afa:	e5f0      	b.n	80016de <__aeabi_ddiv+0x12e>
 8001afc:	4925      	ldr	r1, [pc, #148]	; (8001b94 <__aeabi_ddiv+0x5e4>)
 8001afe:	0028      	movs	r0, r5
 8001b00:	4459      	add	r1, fp
 8001b02:	408d      	lsls	r5, r1
 8001b04:	4642      	mov	r2, r8
 8001b06:	408a      	lsls	r2, r1
 8001b08:	1e69      	subs	r1, r5, #1
 8001b0a:	418d      	sbcs	r5, r1
 8001b0c:	4641      	mov	r1, r8
 8001b0e:	40d8      	lsrs	r0, r3
 8001b10:	40d9      	lsrs	r1, r3
 8001b12:	4302      	orrs	r2, r0
 8001b14:	432a      	orrs	r2, r5
 8001b16:	000b      	movs	r3, r1
 8001b18:	0751      	lsls	r1, r2, #29
 8001b1a:	d100      	bne.n	8001b1e <__aeabi_ddiv+0x56e>
 8001b1c:	e751      	b.n	80019c2 <__aeabi_ddiv+0x412>
 8001b1e:	210f      	movs	r1, #15
 8001b20:	4011      	ands	r1, r2
 8001b22:	2904      	cmp	r1, #4
 8001b24:	d000      	beq.n	8001b28 <__aeabi_ddiv+0x578>
 8001b26:	e746      	b.n	80019b6 <__aeabi_ddiv+0x406>
 8001b28:	e74b      	b.n	80019c2 <__aeabi_ddiv+0x412>
 8001b2a:	0005      	movs	r5, r0
 8001b2c:	428e      	cmp	r6, r1
 8001b2e:	d000      	beq.n	8001b32 <__aeabi_ddiv+0x582>
 8001b30:	e66a      	b.n	8001808 <__aeabi_ddiv+0x258>
 8001b32:	9a00      	ldr	r2, [sp, #0]
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d000      	beq.n	8001b3a <__aeabi_ddiv+0x58a>
 8001b38:	e666      	b.n	8001808 <__aeabi_ddiv+0x258>
 8001b3a:	e667      	b.n	800180c <__aeabi_ddiv+0x25c>
 8001b3c:	4a16      	ldr	r2, [pc, #88]	; (8001b98 <__aeabi_ddiv+0x5e8>)
 8001b3e:	445a      	add	r2, fp
 8001b40:	2a00      	cmp	r2, #0
 8001b42:	dc00      	bgt.n	8001b46 <__aeabi_ddiv+0x596>
 8001b44:	e710      	b.n	8001968 <__aeabi_ddiv+0x3b8>
 8001b46:	2301      	movs	r3, #1
 8001b48:	2500      	movs	r5, #0
 8001b4a:	4498      	add	r8, r3
 8001b4c:	e667      	b.n	800181e <__aeabi_ddiv+0x26e>
 8001b4e:	075d      	lsls	r5, r3, #29
 8001b50:	025b      	lsls	r3, r3, #9
 8001b52:	0b1c      	lsrs	r4, r3, #12
 8001b54:	08d2      	lsrs	r2, r2, #3
 8001b56:	2300      	movs	r3, #0
 8001b58:	4315      	orrs	r5, r2
 8001b5a:	e580      	b.n	800165e <__aeabi_ddiv+0xae>
 8001b5c:	9800      	ldr	r0, [sp, #0]
 8001b5e:	3d02      	subs	r5, #2
 8001b60:	0042      	lsls	r2, r0, #1
 8001b62:	4282      	cmp	r2, r0
 8001b64:	41bf      	sbcs	r7, r7
 8001b66:	427f      	negs	r7, r7
 8001b68:	193c      	adds	r4, r7, r4
 8001b6a:	1936      	adds	r6, r6, r4
 8001b6c:	9200      	str	r2, [sp, #0]
 8001b6e:	e7dd      	b.n	8001b2c <__aeabi_ddiv+0x57c>
 8001b70:	2480      	movs	r4, #128	; 0x80
 8001b72:	4643      	mov	r3, r8
 8001b74:	0324      	lsls	r4, r4, #12
 8001b76:	431c      	orrs	r4, r3
 8001b78:	0324      	lsls	r4, r4, #12
 8001b7a:	4b04      	ldr	r3, [pc, #16]	; (8001b8c <__aeabi_ddiv+0x5dc>)
 8001b7c:	0b24      	lsrs	r4, r4, #12
 8001b7e:	e56e      	b.n	800165e <__aeabi_ddiv+0xae>
 8001b80:	9a00      	ldr	r2, [sp, #0]
 8001b82:	429a      	cmp	r2, r3
 8001b84:	d3ea      	bcc.n	8001b5c <__aeabi_ddiv+0x5ac>
 8001b86:	0005      	movs	r5, r0
 8001b88:	e7d3      	b.n	8001b32 <__aeabi_ddiv+0x582>
 8001b8a:	46c0      	nop			; (mov r8, r8)
 8001b8c:	000007ff 	.word	0x000007ff
 8001b90:	0000043e 	.word	0x0000043e
 8001b94:	0000041e 	.word	0x0000041e
 8001b98:	000003ff 	.word	0x000003ff

08001b9c <__eqdf2>:
 8001b9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b9e:	464e      	mov	r6, r9
 8001ba0:	4645      	mov	r5, r8
 8001ba2:	46de      	mov	lr, fp
 8001ba4:	4657      	mov	r7, sl
 8001ba6:	4690      	mov	r8, r2
 8001ba8:	b5e0      	push	{r5, r6, r7, lr}
 8001baa:	0017      	movs	r7, r2
 8001bac:	031a      	lsls	r2, r3, #12
 8001bae:	0b12      	lsrs	r2, r2, #12
 8001bb0:	0005      	movs	r5, r0
 8001bb2:	4684      	mov	ip, r0
 8001bb4:	4819      	ldr	r0, [pc, #100]	; (8001c1c <__eqdf2+0x80>)
 8001bb6:	030e      	lsls	r6, r1, #12
 8001bb8:	004c      	lsls	r4, r1, #1
 8001bba:	4691      	mov	r9, r2
 8001bbc:	005a      	lsls	r2, r3, #1
 8001bbe:	0fdb      	lsrs	r3, r3, #31
 8001bc0:	469b      	mov	fp, r3
 8001bc2:	0b36      	lsrs	r6, r6, #12
 8001bc4:	0d64      	lsrs	r4, r4, #21
 8001bc6:	0fc9      	lsrs	r1, r1, #31
 8001bc8:	0d52      	lsrs	r2, r2, #21
 8001bca:	4284      	cmp	r4, r0
 8001bcc:	d019      	beq.n	8001c02 <__eqdf2+0x66>
 8001bce:	4282      	cmp	r2, r0
 8001bd0:	d010      	beq.n	8001bf4 <__eqdf2+0x58>
 8001bd2:	2001      	movs	r0, #1
 8001bd4:	4294      	cmp	r4, r2
 8001bd6:	d10e      	bne.n	8001bf6 <__eqdf2+0x5a>
 8001bd8:	454e      	cmp	r6, r9
 8001bda:	d10c      	bne.n	8001bf6 <__eqdf2+0x5a>
 8001bdc:	2001      	movs	r0, #1
 8001bde:	45c4      	cmp	ip, r8
 8001be0:	d109      	bne.n	8001bf6 <__eqdf2+0x5a>
 8001be2:	4559      	cmp	r1, fp
 8001be4:	d017      	beq.n	8001c16 <__eqdf2+0x7a>
 8001be6:	2c00      	cmp	r4, #0
 8001be8:	d105      	bne.n	8001bf6 <__eqdf2+0x5a>
 8001bea:	0030      	movs	r0, r6
 8001bec:	4328      	orrs	r0, r5
 8001bee:	1e43      	subs	r3, r0, #1
 8001bf0:	4198      	sbcs	r0, r3
 8001bf2:	e000      	b.n	8001bf6 <__eqdf2+0x5a>
 8001bf4:	2001      	movs	r0, #1
 8001bf6:	bcf0      	pop	{r4, r5, r6, r7}
 8001bf8:	46bb      	mov	fp, r7
 8001bfa:	46b2      	mov	sl, r6
 8001bfc:	46a9      	mov	r9, r5
 8001bfe:	46a0      	mov	r8, r4
 8001c00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c02:	0033      	movs	r3, r6
 8001c04:	2001      	movs	r0, #1
 8001c06:	432b      	orrs	r3, r5
 8001c08:	d1f5      	bne.n	8001bf6 <__eqdf2+0x5a>
 8001c0a:	42a2      	cmp	r2, r4
 8001c0c:	d1f3      	bne.n	8001bf6 <__eqdf2+0x5a>
 8001c0e:	464b      	mov	r3, r9
 8001c10:	433b      	orrs	r3, r7
 8001c12:	d1f0      	bne.n	8001bf6 <__eqdf2+0x5a>
 8001c14:	e7e2      	b.n	8001bdc <__eqdf2+0x40>
 8001c16:	2000      	movs	r0, #0
 8001c18:	e7ed      	b.n	8001bf6 <__eqdf2+0x5a>
 8001c1a:	46c0      	nop			; (mov r8, r8)
 8001c1c:	000007ff 	.word	0x000007ff

08001c20 <__gedf2>:
 8001c20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c22:	4647      	mov	r7, r8
 8001c24:	46ce      	mov	lr, r9
 8001c26:	0004      	movs	r4, r0
 8001c28:	0018      	movs	r0, r3
 8001c2a:	0016      	movs	r6, r2
 8001c2c:	031b      	lsls	r3, r3, #12
 8001c2e:	0b1b      	lsrs	r3, r3, #12
 8001c30:	4d2d      	ldr	r5, [pc, #180]	; (8001ce8 <__gedf2+0xc8>)
 8001c32:	004a      	lsls	r2, r1, #1
 8001c34:	4699      	mov	r9, r3
 8001c36:	b580      	push	{r7, lr}
 8001c38:	0043      	lsls	r3, r0, #1
 8001c3a:	030f      	lsls	r7, r1, #12
 8001c3c:	46a4      	mov	ip, r4
 8001c3e:	46b0      	mov	r8, r6
 8001c40:	0b3f      	lsrs	r7, r7, #12
 8001c42:	0d52      	lsrs	r2, r2, #21
 8001c44:	0fc9      	lsrs	r1, r1, #31
 8001c46:	0d5b      	lsrs	r3, r3, #21
 8001c48:	0fc0      	lsrs	r0, r0, #31
 8001c4a:	42aa      	cmp	r2, r5
 8001c4c:	d021      	beq.n	8001c92 <__gedf2+0x72>
 8001c4e:	42ab      	cmp	r3, r5
 8001c50:	d013      	beq.n	8001c7a <__gedf2+0x5a>
 8001c52:	2a00      	cmp	r2, #0
 8001c54:	d122      	bne.n	8001c9c <__gedf2+0x7c>
 8001c56:	433c      	orrs	r4, r7
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d102      	bne.n	8001c62 <__gedf2+0x42>
 8001c5c:	464d      	mov	r5, r9
 8001c5e:	432e      	orrs	r6, r5
 8001c60:	d022      	beq.n	8001ca8 <__gedf2+0x88>
 8001c62:	2c00      	cmp	r4, #0
 8001c64:	d010      	beq.n	8001c88 <__gedf2+0x68>
 8001c66:	4281      	cmp	r1, r0
 8001c68:	d022      	beq.n	8001cb0 <__gedf2+0x90>
 8001c6a:	2002      	movs	r0, #2
 8001c6c:	3901      	subs	r1, #1
 8001c6e:	4008      	ands	r0, r1
 8001c70:	3801      	subs	r0, #1
 8001c72:	bcc0      	pop	{r6, r7}
 8001c74:	46b9      	mov	r9, r7
 8001c76:	46b0      	mov	r8, r6
 8001c78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c7a:	464d      	mov	r5, r9
 8001c7c:	432e      	orrs	r6, r5
 8001c7e:	d129      	bne.n	8001cd4 <__gedf2+0xb4>
 8001c80:	2a00      	cmp	r2, #0
 8001c82:	d1f0      	bne.n	8001c66 <__gedf2+0x46>
 8001c84:	433c      	orrs	r4, r7
 8001c86:	d1ee      	bne.n	8001c66 <__gedf2+0x46>
 8001c88:	2800      	cmp	r0, #0
 8001c8a:	d1f2      	bne.n	8001c72 <__gedf2+0x52>
 8001c8c:	2001      	movs	r0, #1
 8001c8e:	4240      	negs	r0, r0
 8001c90:	e7ef      	b.n	8001c72 <__gedf2+0x52>
 8001c92:	003d      	movs	r5, r7
 8001c94:	4325      	orrs	r5, r4
 8001c96:	d11d      	bne.n	8001cd4 <__gedf2+0xb4>
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d0ee      	beq.n	8001c7a <__gedf2+0x5a>
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d1e2      	bne.n	8001c66 <__gedf2+0x46>
 8001ca0:	464c      	mov	r4, r9
 8001ca2:	4326      	orrs	r6, r4
 8001ca4:	d1df      	bne.n	8001c66 <__gedf2+0x46>
 8001ca6:	e7e0      	b.n	8001c6a <__gedf2+0x4a>
 8001ca8:	2000      	movs	r0, #0
 8001caa:	2c00      	cmp	r4, #0
 8001cac:	d0e1      	beq.n	8001c72 <__gedf2+0x52>
 8001cae:	e7dc      	b.n	8001c6a <__gedf2+0x4a>
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	dc0a      	bgt.n	8001cca <__gedf2+0xaa>
 8001cb4:	dbe8      	blt.n	8001c88 <__gedf2+0x68>
 8001cb6:	454f      	cmp	r7, r9
 8001cb8:	d8d7      	bhi.n	8001c6a <__gedf2+0x4a>
 8001cba:	d00e      	beq.n	8001cda <__gedf2+0xba>
 8001cbc:	2000      	movs	r0, #0
 8001cbe:	454f      	cmp	r7, r9
 8001cc0:	d2d7      	bcs.n	8001c72 <__gedf2+0x52>
 8001cc2:	2900      	cmp	r1, #0
 8001cc4:	d0e2      	beq.n	8001c8c <__gedf2+0x6c>
 8001cc6:	0008      	movs	r0, r1
 8001cc8:	e7d3      	b.n	8001c72 <__gedf2+0x52>
 8001cca:	4243      	negs	r3, r0
 8001ccc:	4158      	adcs	r0, r3
 8001cce:	0040      	lsls	r0, r0, #1
 8001cd0:	3801      	subs	r0, #1
 8001cd2:	e7ce      	b.n	8001c72 <__gedf2+0x52>
 8001cd4:	2002      	movs	r0, #2
 8001cd6:	4240      	negs	r0, r0
 8001cd8:	e7cb      	b.n	8001c72 <__gedf2+0x52>
 8001cda:	45c4      	cmp	ip, r8
 8001cdc:	d8c5      	bhi.n	8001c6a <__gedf2+0x4a>
 8001cde:	2000      	movs	r0, #0
 8001ce0:	45c4      	cmp	ip, r8
 8001ce2:	d2c6      	bcs.n	8001c72 <__gedf2+0x52>
 8001ce4:	e7ed      	b.n	8001cc2 <__gedf2+0xa2>
 8001ce6:	46c0      	nop			; (mov r8, r8)
 8001ce8:	000007ff 	.word	0x000007ff

08001cec <__ledf2>:
 8001cec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cee:	4647      	mov	r7, r8
 8001cf0:	46ce      	mov	lr, r9
 8001cf2:	0004      	movs	r4, r0
 8001cf4:	0018      	movs	r0, r3
 8001cf6:	0016      	movs	r6, r2
 8001cf8:	031b      	lsls	r3, r3, #12
 8001cfa:	0b1b      	lsrs	r3, r3, #12
 8001cfc:	4d2c      	ldr	r5, [pc, #176]	; (8001db0 <__ledf2+0xc4>)
 8001cfe:	004a      	lsls	r2, r1, #1
 8001d00:	4699      	mov	r9, r3
 8001d02:	b580      	push	{r7, lr}
 8001d04:	0043      	lsls	r3, r0, #1
 8001d06:	030f      	lsls	r7, r1, #12
 8001d08:	46a4      	mov	ip, r4
 8001d0a:	46b0      	mov	r8, r6
 8001d0c:	0b3f      	lsrs	r7, r7, #12
 8001d0e:	0d52      	lsrs	r2, r2, #21
 8001d10:	0fc9      	lsrs	r1, r1, #31
 8001d12:	0d5b      	lsrs	r3, r3, #21
 8001d14:	0fc0      	lsrs	r0, r0, #31
 8001d16:	42aa      	cmp	r2, r5
 8001d18:	d00d      	beq.n	8001d36 <__ledf2+0x4a>
 8001d1a:	42ab      	cmp	r3, r5
 8001d1c:	d010      	beq.n	8001d40 <__ledf2+0x54>
 8001d1e:	2a00      	cmp	r2, #0
 8001d20:	d127      	bne.n	8001d72 <__ledf2+0x86>
 8001d22:	433c      	orrs	r4, r7
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d111      	bne.n	8001d4c <__ledf2+0x60>
 8001d28:	464d      	mov	r5, r9
 8001d2a:	432e      	orrs	r6, r5
 8001d2c:	d10e      	bne.n	8001d4c <__ledf2+0x60>
 8001d2e:	2000      	movs	r0, #0
 8001d30:	2c00      	cmp	r4, #0
 8001d32:	d015      	beq.n	8001d60 <__ledf2+0x74>
 8001d34:	e00e      	b.n	8001d54 <__ledf2+0x68>
 8001d36:	003d      	movs	r5, r7
 8001d38:	4325      	orrs	r5, r4
 8001d3a:	d110      	bne.n	8001d5e <__ledf2+0x72>
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d118      	bne.n	8001d72 <__ledf2+0x86>
 8001d40:	464d      	mov	r5, r9
 8001d42:	432e      	orrs	r6, r5
 8001d44:	d10b      	bne.n	8001d5e <__ledf2+0x72>
 8001d46:	2a00      	cmp	r2, #0
 8001d48:	d102      	bne.n	8001d50 <__ledf2+0x64>
 8001d4a:	433c      	orrs	r4, r7
 8001d4c:	2c00      	cmp	r4, #0
 8001d4e:	d00b      	beq.n	8001d68 <__ledf2+0x7c>
 8001d50:	4281      	cmp	r1, r0
 8001d52:	d014      	beq.n	8001d7e <__ledf2+0x92>
 8001d54:	2002      	movs	r0, #2
 8001d56:	3901      	subs	r1, #1
 8001d58:	4008      	ands	r0, r1
 8001d5a:	3801      	subs	r0, #1
 8001d5c:	e000      	b.n	8001d60 <__ledf2+0x74>
 8001d5e:	2002      	movs	r0, #2
 8001d60:	bcc0      	pop	{r6, r7}
 8001d62:	46b9      	mov	r9, r7
 8001d64:	46b0      	mov	r8, r6
 8001d66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d68:	2800      	cmp	r0, #0
 8001d6a:	d1f9      	bne.n	8001d60 <__ledf2+0x74>
 8001d6c:	2001      	movs	r0, #1
 8001d6e:	4240      	negs	r0, r0
 8001d70:	e7f6      	b.n	8001d60 <__ledf2+0x74>
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d1ec      	bne.n	8001d50 <__ledf2+0x64>
 8001d76:	464c      	mov	r4, r9
 8001d78:	4326      	orrs	r6, r4
 8001d7a:	d1e9      	bne.n	8001d50 <__ledf2+0x64>
 8001d7c:	e7ea      	b.n	8001d54 <__ledf2+0x68>
 8001d7e:	429a      	cmp	r2, r3
 8001d80:	dd04      	ble.n	8001d8c <__ledf2+0xa0>
 8001d82:	4243      	negs	r3, r0
 8001d84:	4158      	adcs	r0, r3
 8001d86:	0040      	lsls	r0, r0, #1
 8001d88:	3801      	subs	r0, #1
 8001d8a:	e7e9      	b.n	8001d60 <__ledf2+0x74>
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	dbeb      	blt.n	8001d68 <__ledf2+0x7c>
 8001d90:	454f      	cmp	r7, r9
 8001d92:	d8df      	bhi.n	8001d54 <__ledf2+0x68>
 8001d94:	d006      	beq.n	8001da4 <__ledf2+0xb8>
 8001d96:	2000      	movs	r0, #0
 8001d98:	454f      	cmp	r7, r9
 8001d9a:	d2e1      	bcs.n	8001d60 <__ledf2+0x74>
 8001d9c:	2900      	cmp	r1, #0
 8001d9e:	d0e5      	beq.n	8001d6c <__ledf2+0x80>
 8001da0:	0008      	movs	r0, r1
 8001da2:	e7dd      	b.n	8001d60 <__ledf2+0x74>
 8001da4:	45c4      	cmp	ip, r8
 8001da6:	d8d5      	bhi.n	8001d54 <__ledf2+0x68>
 8001da8:	2000      	movs	r0, #0
 8001daa:	45c4      	cmp	ip, r8
 8001dac:	d2d8      	bcs.n	8001d60 <__ledf2+0x74>
 8001dae:	e7f5      	b.n	8001d9c <__ledf2+0xb0>
 8001db0:	000007ff 	.word	0x000007ff

08001db4 <__aeabi_dmul>:
 8001db4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001db6:	4657      	mov	r7, sl
 8001db8:	464e      	mov	r6, r9
 8001dba:	4645      	mov	r5, r8
 8001dbc:	46de      	mov	lr, fp
 8001dbe:	b5e0      	push	{r5, r6, r7, lr}
 8001dc0:	4698      	mov	r8, r3
 8001dc2:	030c      	lsls	r4, r1, #12
 8001dc4:	004b      	lsls	r3, r1, #1
 8001dc6:	0006      	movs	r6, r0
 8001dc8:	4692      	mov	sl, r2
 8001dca:	b087      	sub	sp, #28
 8001dcc:	0b24      	lsrs	r4, r4, #12
 8001dce:	0d5b      	lsrs	r3, r3, #21
 8001dd0:	0fcf      	lsrs	r7, r1, #31
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d100      	bne.n	8001dd8 <__aeabi_dmul+0x24>
 8001dd6:	e15c      	b.n	8002092 <__aeabi_dmul+0x2de>
 8001dd8:	4ad9      	ldr	r2, [pc, #868]	; (8002140 <__aeabi_dmul+0x38c>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d100      	bne.n	8001de0 <__aeabi_dmul+0x2c>
 8001dde:	e175      	b.n	80020cc <__aeabi_dmul+0x318>
 8001de0:	0f42      	lsrs	r2, r0, #29
 8001de2:	00e4      	lsls	r4, r4, #3
 8001de4:	4314      	orrs	r4, r2
 8001de6:	2280      	movs	r2, #128	; 0x80
 8001de8:	0412      	lsls	r2, r2, #16
 8001dea:	4314      	orrs	r4, r2
 8001dec:	4ad5      	ldr	r2, [pc, #852]	; (8002144 <__aeabi_dmul+0x390>)
 8001dee:	00c5      	lsls	r5, r0, #3
 8001df0:	4694      	mov	ip, r2
 8001df2:	4463      	add	r3, ip
 8001df4:	9300      	str	r3, [sp, #0]
 8001df6:	2300      	movs	r3, #0
 8001df8:	4699      	mov	r9, r3
 8001dfa:	469b      	mov	fp, r3
 8001dfc:	4643      	mov	r3, r8
 8001dfe:	4642      	mov	r2, r8
 8001e00:	031e      	lsls	r6, r3, #12
 8001e02:	0fd2      	lsrs	r2, r2, #31
 8001e04:	005b      	lsls	r3, r3, #1
 8001e06:	4650      	mov	r0, sl
 8001e08:	4690      	mov	r8, r2
 8001e0a:	0b36      	lsrs	r6, r6, #12
 8001e0c:	0d5b      	lsrs	r3, r3, #21
 8001e0e:	d100      	bne.n	8001e12 <__aeabi_dmul+0x5e>
 8001e10:	e120      	b.n	8002054 <__aeabi_dmul+0x2a0>
 8001e12:	4acb      	ldr	r2, [pc, #812]	; (8002140 <__aeabi_dmul+0x38c>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d100      	bne.n	8001e1a <__aeabi_dmul+0x66>
 8001e18:	e162      	b.n	80020e0 <__aeabi_dmul+0x32c>
 8001e1a:	49ca      	ldr	r1, [pc, #808]	; (8002144 <__aeabi_dmul+0x390>)
 8001e1c:	0f42      	lsrs	r2, r0, #29
 8001e1e:	468c      	mov	ip, r1
 8001e20:	9900      	ldr	r1, [sp, #0]
 8001e22:	4463      	add	r3, ip
 8001e24:	00f6      	lsls	r6, r6, #3
 8001e26:	468c      	mov	ip, r1
 8001e28:	4316      	orrs	r6, r2
 8001e2a:	2280      	movs	r2, #128	; 0x80
 8001e2c:	449c      	add	ip, r3
 8001e2e:	0412      	lsls	r2, r2, #16
 8001e30:	4663      	mov	r3, ip
 8001e32:	4316      	orrs	r6, r2
 8001e34:	00c2      	lsls	r2, r0, #3
 8001e36:	2000      	movs	r0, #0
 8001e38:	9300      	str	r3, [sp, #0]
 8001e3a:	9900      	ldr	r1, [sp, #0]
 8001e3c:	4643      	mov	r3, r8
 8001e3e:	3101      	adds	r1, #1
 8001e40:	468c      	mov	ip, r1
 8001e42:	4649      	mov	r1, r9
 8001e44:	407b      	eors	r3, r7
 8001e46:	9301      	str	r3, [sp, #4]
 8001e48:	290f      	cmp	r1, #15
 8001e4a:	d826      	bhi.n	8001e9a <__aeabi_dmul+0xe6>
 8001e4c:	4bbe      	ldr	r3, [pc, #760]	; (8002148 <__aeabi_dmul+0x394>)
 8001e4e:	0089      	lsls	r1, r1, #2
 8001e50:	5859      	ldr	r1, [r3, r1]
 8001e52:	468f      	mov	pc, r1
 8001e54:	4643      	mov	r3, r8
 8001e56:	9301      	str	r3, [sp, #4]
 8001e58:	0034      	movs	r4, r6
 8001e5a:	0015      	movs	r5, r2
 8001e5c:	4683      	mov	fp, r0
 8001e5e:	465b      	mov	r3, fp
 8001e60:	2b02      	cmp	r3, #2
 8001e62:	d016      	beq.n	8001e92 <__aeabi_dmul+0xde>
 8001e64:	2b03      	cmp	r3, #3
 8001e66:	d100      	bne.n	8001e6a <__aeabi_dmul+0xb6>
 8001e68:	e203      	b.n	8002272 <__aeabi_dmul+0x4be>
 8001e6a:	2b01      	cmp	r3, #1
 8001e6c:	d000      	beq.n	8001e70 <__aeabi_dmul+0xbc>
 8001e6e:	e0cd      	b.n	800200c <__aeabi_dmul+0x258>
 8001e70:	2200      	movs	r2, #0
 8001e72:	2400      	movs	r4, #0
 8001e74:	2500      	movs	r5, #0
 8001e76:	9b01      	ldr	r3, [sp, #4]
 8001e78:	0512      	lsls	r2, r2, #20
 8001e7a:	4322      	orrs	r2, r4
 8001e7c:	07db      	lsls	r3, r3, #31
 8001e7e:	431a      	orrs	r2, r3
 8001e80:	0028      	movs	r0, r5
 8001e82:	0011      	movs	r1, r2
 8001e84:	b007      	add	sp, #28
 8001e86:	bcf0      	pop	{r4, r5, r6, r7}
 8001e88:	46bb      	mov	fp, r7
 8001e8a:	46b2      	mov	sl, r6
 8001e8c:	46a9      	mov	r9, r5
 8001e8e:	46a0      	mov	r8, r4
 8001e90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e92:	2400      	movs	r4, #0
 8001e94:	2500      	movs	r5, #0
 8001e96:	4aaa      	ldr	r2, [pc, #680]	; (8002140 <__aeabi_dmul+0x38c>)
 8001e98:	e7ed      	b.n	8001e76 <__aeabi_dmul+0xc2>
 8001e9a:	0c28      	lsrs	r0, r5, #16
 8001e9c:	042d      	lsls	r5, r5, #16
 8001e9e:	0c2d      	lsrs	r5, r5, #16
 8001ea0:	002b      	movs	r3, r5
 8001ea2:	0c11      	lsrs	r1, r2, #16
 8001ea4:	0412      	lsls	r2, r2, #16
 8001ea6:	0c12      	lsrs	r2, r2, #16
 8001ea8:	4353      	muls	r3, r2
 8001eaa:	4698      	mov	r8, r3
 8001eac:	0013      	movs	r3, r2
 8001eae:	002f      	movs	r7, r5
 8001eb0:	4343      	muls	r3, r0
 8001eb2:	4699      	mov	r9, r3
 8001eb4:	434f      	muls	r7, r1
 8001eb6:	444f      	add	r7, r9
 8001eb8:	46bb      	mov	fp, r7
 8001eba:	4647      	mov	r7, r8
 8001ebc:	000b      	movs	r3, r1
 8001ebe:	0c3f      	lsrs	r7, r7, #16
 8001ec0:	46ba      	mov	sl, r7
 8001ec2:	4343      	muls	r3, r0
 8001ec4:	44da      	add	sl, fp
 8001ec6:	9302      	str	r3, [sp, #8]
 8001ec8:	45d1      	cmp	r9, sl
 8001eca:	d904      	bls.n	8001ed6 <__aeabi_dmul+0x122>
 8001ecc:	2780      	movs	r7, #128	; 0x80
 8001ece:	027f      	lsls	r7, r7, #9
 8001ed0:	46b9      	mov	r9, r7
 8001ed2:	444b      	add	r3, r9
 8001ed4:	9302      	str	r3, [sp, #8]
 8001ed6:	4653      	mov	r3, sl
 8001ed8:	0c1b      	lsrs	r3, r3, #16
 8001eda:	469b      	mov	fp, r3
 8001edc:	4653      	mov	r3, sl
 8001ede:	041f      	lsls	r7, r3, #16
 8001ee0:	4643      	mov	r3, r8
 8001ee2:	041b      	lsls	r3, r3, #16
 8001ee4:	0c1b      	lsrs	r3, r3, #16
 8001ee6:	4698      	mov	r8, r3
 8001ee8:	003b      	movs	r3, r7
 8001eea:	4443      	add	r3, r8
 8001eec:	9304      	str	r3, [sp, #16]
 8001eee:	0c33      	lsrs	r3, r6, #16
 8001ef0:	0436      	lsls	r6, r6, #16
 8001ef2:	0c36      	lsrs	r6, r6, #16
 8001ef4:	4698      	mov	r8, r3
 8001ef6:	0033      	movs	r3, r6
 8001ef8:	4343      	muls	r3, r0
 8001efa:	4699      	mov	r9, r3
 8001efc:	4643      	mov	r3, r8
 8001efe:	4343      	muls	r3, r0
 8001f00:	002f      	movs	r7, r5
 8001f02:	469a      	mov	sl, r3
 8001f04:	4643      	mov	r3, r8
 8001f06:	4377      	muls	r7, r6
 8001f08:	435d      	muls	r5, r3
 8001f0a:	0c38      	lsrs	r0, r7, #16
 8001f0c:	444d      	add	r5, r9
 8001f0e:	1945      	adds	r5, r0, r5
 8001f10:	45a9      	cmp	r9, r5
 8001f12:	d903      	bls.n	8001f1c <__aeabi_dmul+0x168>
 8001f14:	2380      	movs	r3, #128	; 0x80
 8001f16:	025b      	lsls	r3, r3, #9
 8001f18:	4699      	mov	r9, r3
 8001f1a:	44ca      	add	sl, r9
 8001f1c:	043f      	lsls	r7, r7, #16
 8001f1e:	0c28      	lsrs	r0, r5, #16
 8001f20:	0c3f      	lsrs	r7, r7, #16
 8001f22:	042d      	lsls	r5, r5, #16
 8001f24:	19ed      	adds	r5, r5, r7
 8001f26:	0c27      	lsrs	r7, r4, #16
 8001f28:	0424      	lsls	r4, r4, #16
 8001f2a:	0c24      	lsrs	r4, r4, #16
 8001f2c:	0003      	movs	r3, r0
 8001f2e:	0020      	movs	r0, r4
 8001f30:	4350      	muls	r0, r2
 8001f32:	437a      	muls	r2, r7
 8001f34:	4691      	mov	r9, r2
 8001f36:	003a      	movs	r2, r7
 8001f38:	4453      	add	r3, sl
 8001f3a:	9305      	str	r3, [sp, #20]
 8001f3c:	0c03      	lsrs	r3, r0, #16
 8001f3e:	469a      	mov	sl, r3
 8001f40:	434a      	muls	r2, r1
 8001f42:	4361      	muls	r1, r4
 8001f44:	4449      	add	r1, r9
 8001f46:	4451      	add	r1, sl
 8001f48:	44ab      	add	fp, r5
 8001f4a:	4589      	cmp	r9, r1
 8001f4c:	d903      	bls.n	8001f56 <__aeabi_dmul+0x1a2>
 8001f4e:	2380      	movs	r3, #128	; 0x80
 8001f50:	025b      	lsls	r3, r3, #9
 8001f52:	4699      	mov	r9, r3
 8001f54:	444a      	add	r2, r9
 8001f56:	0400      	lsls	r0, r0, #16
 8001f58:	0c0b      	lsrs	r3, r1, #16
 8001f5a:	0c00      	lsrs	r0, r0, #16
 8001f5c:	0409      	lsls	r1, r1, #16
 8001f5e:	1809      	adds	r1, r1, r0
 8001f60:	0020      	movs	r0, r4
 8001f62:	4699      	mov	r9, r3
 8001f64:	4643      	mov	r3, r8
 8001f66:	4370      	muls	r0, r6
 8001f68:	435c      	muls	r4, r3
 8001f6a:	437e      	muls	r6, r7
 8001f6c:	435f      	muls	r7, r3
 8001f6e:	0c03      	lsrs	r3, r0, #16
 8001f70:	4698      	mov	r8, r3
 8001f72:	19a4      	adds	r4, r4, r6
 8001f74:	4444      	add	r4, r8
 8001f76:	444a      	add	r2, r9
 8001f78:	9703      	str	r7, [sp, #12]
 8001f7a:	42a6      	cmp	r6, r4
 8001f7c:	d904      	bls.n	8001f88 <__aeabi_dmul+0x1d4>
 8001f7e:	2380      	movs	r3, #128	; 0x80
 8001f80:	025b      	lsls	r3, r3, #9
 8001f82:	4698      	mov	r8, r3
 8001f84:	4447      	add	r7, r8
 8001f86:	9703      	str	r7, [sp, #12]
 8001f88:	0423      	lsls	r3, r4, #16
 8001f8a:	9e02      	ldr	r6, [sp, #8]
 8001f8c:	469a      	mov	sl, r3
 8001f8e:	9b05      	ldr	r3, [sp, #20]
 8001f90:	445e      	add	r6, fp
 8001f92:	4698      	mov	r8, r3
 8001f94:	42ae      	cmp	r6, r5
 8001f96:	41ad      	sbcs	r5, r5
 8001f98:	1876      	adds	r6, r6, r1
 8001f9a:	428e      	cmp	r6, r1
 8001f9c:	4189      	sbcs	r1, r1
 8001f9e:	0400      	lsls	r0, r0, #16
 8001fa0:	0c00      	lsrs	r0, r0, #16
 8001fa2:	4450      	add	r0, sl
 8001fa4:	4440      	add	r0, r8
 8001fa6:	426d      	negs	r5, r5
 8001fa8:	1947      	adds	r7, r0, r5
 8001faa:	46b8      	mov	r8, r7
 8001fac:	4693      	mov	fp, r2
 8001fae:	4249      	negs	r1, r1
 8001fb0:	4689      	mov	r9, r1
 8001fb2:	44c3      	add	fp, r8
 8001fb4:	44d9      	add	r9, fp
 8001fb6:	4298      	cmp	r0, r3
 8001fb8:	4180      	sbcs	r0, r0
 8001fba:	45a8      	cmp	r8, r5
 8001fbc:	41ad      	sbcs	r5, r5
 8001fbe:	4593      	cmp	fp, r2
 8001fc0:	4192      	sbcs	r2, r2
 8001fc2:	4589      	cmp	r9, r1
 8001fc4:	4189      	sbcs	r1, r1
 8001fc6:	426d      	negs	r5, r5
 8001fc8:	4240      	negs	r0, r0
 8001fca:	4328      	orrs	r0, r5
 8001fcc:	0c24      	lsrs	r4, r4, #16
 8001fce:	4252      	negs	r2, r2
 8001fd0:	4249      	negs	r1, r1
 8001fd2:	430a      	orrs	r2, r1
 8001fd4:	9b03      	ldr	r3, [sp, #12]
 8001fd6:	1900      	adds	r0, r0, r4
 8001fd8:	1880      	adds	r0, r0, r2
 8001fda:	18c7      	adds	r7, r0, r3
 8001fdc:	464b      	mov	r3, r9
 8001fde:	0ddc      	lsrs	r4, r3, #23
 8001fe0:	9b04      	ldr	r3, [sp, #16]
 8001fe2:	0275      	lsls	r5, r6, #9
 8001fe4:	431d      	orrs	r5, r3
 8001fe6:	1e6a      	subs	r2, r5, #1
 8001fe8:	4195      	sbcs	r5, r2
 8001fea:	464b      	mov	r3, r9
 8001fec:	0df6      	lsrs	r6, r6, #23
 8001fee:	027f      	lsls	r7, r7, #9
 8001ff0:	4335      	orrs	r5, r6
 8001ff2:	025a      	lsls	r2, r3, #9
 8001ff4:	433c      	orrs	r4, r7
 8001ff6:	4315      	orrs	r5, r2
 8001ff8:	01fb      	lsls	r3, r7, #7
 8001ffa:	d400      	bmi.n	8001ffe <__aeabi_dmul+0x24a>
 8001ffc:	e11c      	b.n	8002238 <__aeabi_dmul+0x484>
 8001ffe:	2101      	movs	r1, #1
 8002000:	086a      	lsrs	r2, r5, #1
 8002002:	400d      	ands	r5, r1
 8002004:	4315      	orrs	r5, r2
 8002006:	07e2      	lsls	r2, r4, #31
 8002008:	4315      	orrs	r5, r2
 800200a:	0864      	lsrs	r4, r4, #1
 800200c:	494f      	ldr	r1, [pc, #316]	; (800214c <__aeabi_dmul+0x398>)
 800200e:	4461      	add	r1, ip
 8002010:	2900      	cmp	r1, #0
 8002012:	dc00      	bgt.n	8002016 <__aeabi_dmul+0x262>
 8002014:	e0b0      	b.n	8002178 <__aeabi_dmul+0x3c4>
 8002016:	076b      	lsls	r3, r5, #29
 8002018:	d009      	beq.n	800202e <__aeabi_dmul+0x27a>
 800201a:	220f      	movs	r2, #15
 800201c:	402a      	ands	r2, r5
 800201e:	2a04      	cmp	r2, #4
 8002020:	d005      	beq.n	800202e <__aeabi_dmul+0x27a>
 8002022:	1d2a      	adds	r2, r5, #4
 8002024:	42aa      	cmp	r2, r5
 8002026:	41ad      	sbcs	r5, r5
 8002028:	426d      	negs	r5, r5
 800202a:	1964      	adds	r4, r4, r5
 800202c:	0015      	movs	r5, r2
 800202e:	01e3      	lsls	r3, r4, #7
 8002030:	d504      	bpl.n	800203c <__aeabi_dmul+0x288>
 8002032:	2180      	movs	r1, #128	; 0x80
 8002034:	4a46      	ldr	r2, [pc, #280]	; (8002150 <__aeabi_dmul+0x39c>)
 8002036:	00c9      	lsls	r1, r1, #3
 8002038:	4014      	ands	r4, r2
 800203a:	4461      	add	r1, ip
 800203c:	4a45      	ldr	r2, [pc, #276]	; (8002154 <__aeabi_dmul+0x3a0>)
 800203e:	4291      	cmp	r1, r2
 8002040:	dd00      	ble.n	8002044 <__aeabi_dmul+0x290>
 8002042:	e726      	b.n	8001e92 <__aeabi_dmul+0xde>
 8002044:	0762      	lsls	r2, r4, #29
 8002046:	08ed      	lsrs	r5, r5, #3
 8002048:	0264      	lsls	r4, r4, #9
 800204a:	0549      	lsls	r1, r1, #21
 800204c:	4315      	orrs	r5, r2
 800204e:	0b24      	lsrs	r4, r4, #12
 8002050:	0d4a      	lsrs	r2, r1, #21
 8002052:	e710      	b.n	8001e76 <__aeabi_dmul+0xc2>
 8002054:	4652      	mov	r2, sl
 8002056:	4332      	orrs	r2, r6
 8002058:	d100      	bne.n	800205c <__aeabi_dmul+0x2a8>
 800205a:	e07f      	b.n	800215c <__aeabi_dmul+0x3a8>
 800205c:	2e00      	cmp	r6, #0
 800205e:	d100      	bne.n	8002062 <__aeabi_dmul+0x2ae>
 8002060:	e0dc      	b.n	800221c <__aeabi_dmul+0x468>
 8002062:	0030      	movs	r0, r6
 8002064:	f000 fe1e 	bl	8002ca4 <__clzsi2>
 8002068:	0002      	movs	r2, r0
 800206a:	3a0b      	subs	r2, #11
 800206c:	231d      	movs	r3, #29
 800206e:	0001      	movs	r1, r0
 8002070:	1a9b      	subs	r3, r3, r2
 8002072:	4652      	mov	r2, sl
 8002074:	3908      	subs	r1, #8
 8002076:	40da      	lsrs	r2, r3
 8002078:	408e      	lsls	r6, r1
 800207a:	4316      	orrs	r6, r2
 800207c:	4652      	mov	r2, sl
 800207e:	408a      	lsls	r2, r1
 8002080:	9b00      	ldr	r3, [sp, #0]
 8002082:	4935      	ldr	r1, [pc, #212]	; (8002158 <__aeabi_dmul+0x3a4>)
 8002084:	1a18      	subs	r0, r3, r0
 8002086:	0003      	movs	r3, r0
 8002088:	468c      	mov	ip, r1
 800208a:	4463      	add	r3, ip
 800208c:	2000      	movs	r0, #0
 800208e:	9300      	str	r3, [sp, #0]
 8002090:	e6d3      	b.n	8001e3a <__aeabi_dmul+0x86>
 8002092:	0025      	movs	r5, r4
 8002094:	4305      	orrs	r5, r0
 8002096:	d04a      	beq.n	800212e <__aeabi_dmul+0x37a>
 8002098:	2c00      	cmp	r4, #0
 800209a:	d100      	bne.n	800209e <__aeabi_dmul+0x2ea>
 800209c:	e0b0      	b.n	8002200 <__aeabi_dmul+0x44c>
 800209e:	0020      	movs	r0, r4
 80020a0:	f000 fe00 	bl	8002ca4 <__clzsi2>
 80020a4:	0001      	movs	r1, r0
 80020a6:	0002      	movs	r2, r0
 80020a8:	390b      	subs	r1, #11
 80020aa:	231d      	movs	r3, #29
 80020ac:	0010      	movs	r0, r2
 80020ae:	1a5b      	subs	r3, r3, r1
 80020b0:	0031      	movs	r1, r6
 80020b2:	0035      	movs	r5, r6
 80020b4:	3808      	subs	r0, #8
 80020b6:	4084      	lsls	r4, r0
 80020b8:	40d9      	lsrs	r1, r3
 80020ba:	4085      	lsls	r5, r0
 80020bc:	430c      	orrs	r4, r1
 80020be:	4826      	ldr	r0, [pc, #152]	; (8002158 <__aeabi_dmul+0x3a4>)
 80020c0:	1a83      	subs	r3, r0, r2
 80020c2:	9300      	str	r3, [sp, #0]
 80020c4:	2300      	movs	r3, #0
 80020c6:	4699      	mov	r9, r3
 80020c8:	469b      	mov	fp, r3
 80020ca:	e697      	b.n	8001dfc <__aeabi_dmul+0x48>
 80020cc:	0005      	movs	r5, r0
 80020ce:	4325      	orrs	r5, r4
 80020d0:	d126      	bne.n	8002120 <__aeabi_dmul+0x36c>
 80020d2:	2208      	movs	r2, #8
 80020d4:	9300      	str	r3, [sp, #0]
 80020d6:	2302      	movs	r3, #2
 80020d8:	2400      	movs	r4, #0
 80020da:	4691      	mov	r9, r2
 80020dc:	469b      	mov	fp, r3
 80020de:	e68d      	b.n	8001dfc <__aeabi_dmul+0x48>
 80020e0:	4652      	mov	r2, sl
 80020e2:	9b00      	ldr	r3, [sp, #0]
 80020e4:	4332      	orrs	r2, r6
 80020e6:	d110      	bne.n	800210a <__aeabi_dmul+0x356>
 80020e8:	4915      	ldr	r1, [pc, #84]	; (8002140 <__aeabi_dmul+0x38c>)
 80020ea:	2600      	movs	r6, #0
 80020ec:	468c      	mov	ip, r1
 80020ee:	4463      	add	r3, ip
 80020f0:	4649      	mov	r1, r9
 80020f2:	9300      	str	r3, [sp, #0]
 80020f4:	2302      	movs	r3, #2
 80020f6:	4319      	orrs	r1, r3
 80020f8:	4689      	mov	r9, r1
 80020fa:	2002      	movs	r0, #2
 80020fc:	e69d      	b.n	8001e3a <__aeabi_dmul+0x86>
 80020fe:	465b      	mov	r3, fp
 8002100:	9701      	str	r7, [sp, #4]
 8002102:	2b02      	cmp	r3, #2
 8002104:	d000      	beq.n	8002108 <__aeabi_dmul+0x354>
 8002106:	e6ad      	b.n	8001e64 <__aeabi_dmul+0xb0>
 8002108:	e6c3      	b.n	8001e92 <__aeabi_dmul+0xde>
 800210a:	4a0d      	ldr	r2, [pc, #52]	; (8002140 <__aeabi_dmul+0x38c>)
 800210c:	2003      	movs	r0, #3
 800210e:	4694      	mov	ip, r2
 8002110:	4463      	add	r3, ip
 8002112:	464a      	mov	r2, r9
 8002114:	9300      	str	r3, [sp, #0]
 8002116:	2303      	movs	r3, #3
 8002118:	431a      	orrs	r2, r3
 800211a:	4691      	mov	r9, r2
 800211c:	4652      	mov	r2, sl
 800211e:	e68c      	b.n	8001e3a <__aeabi_dmul+0x86>
 8002120:	220c      	movs	r2, #12
 8002122:	9300      	str	r3, [sp, #0]
 8002124:	2303      	movs	r3, #3
 8002126:	0005      	movs	r5, r0
 8002128:	4691      	mov	r9, r2
 800212a:	469b      	mov	fp, r3
 800212c:	e666      	b.n	8001dfc <__aeabi_dmul+0x48>
 800212e:	2304      	movs	r3, #4
 8002130:	4699      	mov	r9, r3
 8002132:	2300      	movs	r3, #0
 8002134:	9300      	str	r3, [sp, #0]
 8002136:	3301      	adds	r3, #1
 8002138:	2400      	movs	r4, #0
 800213a:	469b      	mov	fp, r3
 800213c:	e65e      	b.n	8001dfc <__aeabi_dmul+0x48>
 800213e:	46c0      	nop			; (mov r8, r8)
 8002140:	000007ff 	.word	0x000007ff
 8002144:	fffffc01 	.word	0xfffffc01
 8002148:	0800b318 	.word	0x0800b318
 800214c:	000003ff 	.word	0x000003ff
 8002150:	feffffff 	.word	0xfeffffff
 8002154:	000007fe 	.word	0x000007fe
 8002158:	fffffc0d 	.word	0xfffffc0d
 800215c:	4649      	mov	r1, r9
 800215e:	2301      	movs	r3, #1
 8002160:	4319      	orrs	r1, r3
 8002162:	4689      	mov	r9, r1
 8002164:	2600      	movs	r6, #0
 8002166:	2001      	movs	r0, #1
 8002168:	e667      	b.n	8001e3a <__aeabi_dmul+0x86>
 800216a:	2300      	movs	r3, #0
 800216c:	2480      	movs	r4, #128	; 0x80
 800216e:	2500      	movs	r5, #0
 8002170:	4a43      	ldr	r2, [pc, #268]	; (8002280 <__aeabi_dmul+0x4cc>)
 8002172:	9301      	str	r3, [sp, #4]
 8002174:	0324      	lsls	r4, r4, #12
 8002176:	e67e      	b.n	8001e76 <__aeabi_dmul+0xc2>
 8002178:	2001      	movs	r0, #1
 800217a:	1a40      	subs	r0, r0, r1
 800217c:	2838      	cmp	r0, #56	; 0x38
 800217e:	dd00      	ble.n	8002182 <__aeabi_dmul+0x3ce>
 8002180:	e676      	b.n	8001e70 <__aeabi_dmul+0xbc>
 8002182:	281f      	cmp	r0, #31
 8002184:	dd5b      	ble.n	800223e <__aeabi_dmul+0x48a>
 8002186:	221f      	movs	r2, #31
 8002188:	0023      	movs	r3, r4
 800218a:	4252      	negs	r2, r2
 800218c:	1a51      	subs	r1, r2, r1
 800218e:	40cb      	lsrs	r3, r1
 8002190:	0019      	movs	r1, r3
 8002192:	2820      	cmp	r0, #32
 8002194:	d003      	beq.n	800219e <__aeabi_dmul+0x3ea>
 8002196:	4a3b      	ldr	r2, [pc, #236]	; (8002284 <__aeabi_dmul+0x4d0>)
 8002198:	4462      	add	r2, ip
 800219a:	4094      	lsls	r4, r2
 800219c:	4325      	orrs	r5, r4
 800219e:	1e6a      	subs	r2, r5, #1
 80021a0:	4195      	sbcs	r5, r2
 80021a2:	002a      	movs	r2, r5
 80021a4:	430a      	orrs	r2, r1
 80021a6:	2107      	movs	r1, #7
 80021a8:	000d      	movs	r5, r1
 80021aa:	2400      	movs	r4, #0
 80021ac:	4015      	ands	r5, r2
 80021ae:	4211      	tst	r1, r2
 80021b0:	d05b      	beq.n	800226a <__aeabi_dmul+0x4b6>
 80021b2:	210f      	movs	r1, #15
 80021b4:	2400      	movs	r4, #0
 80021b6:	4011      	ands	r1, r2
 80021b8:	2904      	cmp	r1, #4
 80021ba:	d053      	beq.n	8002264 <__aeabi_dmul+0x4b0>
 80021bc:	1d11      	adds	r1, r2, #4
 80021be:	4291      	cmp	r1, r2
 80021c0:	4192      	sbcs	r2, r2
 80021c2:	4252      	negs	r2, r2
 80021c4:	18a4      	adds	r4, r4, r2
 80021c6:	000a      	movs	r2, r1
 80021c8:	0223      	lsls	r3, r4, #8
 80021ca:	d54b      	bpl.n	8002264 <__aeabi_dmul+0x4b0>
 80021cc:	2201      	movs	r2, #1
 80021ce:	2400      	movs	r4, #0
 80021d0:	2500      	movs	r5, #0
 80021d2:	e650      	b.n	8001e76 <__aeabi_dmul+0xc2>
 80021d4:	2380      	movs	r3, #128	; 0x80
 80021d6:	031b      	lsls	r3, r3, #12
 80021d8:	421c      	tst	r4, r3
 80021da:	d009      	beq.n	80021f0 <__aeabi_dmul+0x43c>
 80021dc:	421e      	tst	r6, r3
 80021de:	d107      	bne.n	80021f0 <__aeabi_dmul+0x43c>
 80021e0:	4333      	orrs	r3, r6
 80021e2:	031c      	lsls	r4, r3, #12
 80021e4:	4643      	mov	r3, r8
 80021e6:	0015      	movs	r5, r2
 80021e8:	0b24      	lsrs	r4, r4, #12
 80021ea:	4a25      	ldr	r2, [pc, #148]	; (8002280 <__aeabi_dmul+0x4cc>)
 80021ec:	9301      	str	r3, [sp, #4]
 80021ee:	e642      	b.n	8001e76 <__aeabi_dmul+0xc2>
 80021f0:	2280      	movs	r2, #128	; 0x80
 80021f2:	0312      	lsls	r2, r2, #12
 80021f4:	4314      	orrs	r4, r2
 80021f6:	0324      	lsls	r4, r4, #12
 80021f8:	4a21      	ldr	r2, [pc, #132]	; (8002280 <__aeabi_dmul+0x4cc>)
 80021fa:	0b24      	lsrs	r4, r4, #12
 80021fc:	9701      	str	r7, [sp, #4]
 80021fe:	e63a      	b.n	8001e76 <__aeabi_dmul+0xc2>
 8002200:	f000 fd50 	bl	8002ca4 <__clzsi2>
 8002204:	0001      	movs	r1, r0
 8002206:	0002      	movs	r2, r0
 8002208:	3115      	adds	r1, #21
 800220a:	3220      	adds	r2, #32
 800220c:	291c      	cmp	r1, #28
 800220e:	dc00      	bgt.n	8002212 <__aeabi_dmul+0x45e>
 8002210:	e74b      	b.n	80020aa <__aeabi_dmul+0x2f6>
 8002212:	0034      	movs	r4, r6
 8002214:	3808      	subs	r0, #8
 8002216:	2500      	movs	r5, #0
 8002218:	4084      	lsls	r4, r0
 800221a:	e750      	b.n	80020be <__aeabi_dmul+0x30a>
 800221c:	f000 fd42 	bl	8002ca4 <__clzsi2>
 8002220:	0003      	movs	r3, r0
 8002222:	001a      	movs	r2, r3
 8002224:	3215      	adds	r2, #21
 8002226:	3020      	adds	r0, #32
 8002228:	2a1c      	cmp	r2, #28
 800222a:	dc00      	bgt.n	800222e <__aeabi_dmul+0x47a>
 800222c:	e71e      	b.n	800206c <__aeabi_dmul+0x2b8>
 800222e:	4656      	mov	r6, sl
 8002230:	3b08      	subs	r3, #8
 8002232:	2200      	movs	r2, #0
 8002234:	409e      	lsls	r6, r3
 8002236:	e723      	b.n	8002080 <__aeabi_dmul+0x2cc>
 8002238:	9b00      	ldr	r3, [sp, #0]
 800223a:	469c      	mov	ip, r3
 800223c:	e6e6      	b.n	800200c <__aeabi_dmul+0x258>
 800223e:	4912      	ldr	r1, [pc, #72]	; (8002288 <__aeabi_dmul+0x4d4>)
 8002240:	0022      	movs	r2, r4
 8002242:	4461      	add	r1, ip
 8002244:	002e      	movs	r6, r5
 8002246:	408d      	lsls	r5, r1
 8002248:	408a      	lsls	r2, r1
 800224a:	40c6      	lsrs	r6, r0
 800224c:	1e69      	subs	r1, r5, #1
 800224e:	418d      	sbcs	r5, r1
 8002250:	4332      	orrs	r2, r6
 8002252:	432a      	orrs	r2, r5
 8002254:	40c4      	lsrs	r4, r0
 8002256:	0753      	lsls	r3, r2, #29
 8002258:	d0b6      	beq.n	80021c8 <__aeabi_dmul+0x414>
 800225a:	210f      	movs	r1, #15
 800225c:	4011      	ands	r1, r2
 800225e:	2904      	cmp	r1, #4
 8002260:	d1ac      	bne.n	80021bc <__aeabi_dmul+0x408>
 8002262:	e7b1      	b.n	80021c8 <__aeabi_dmul+0x414>
 8002264:	0765      	lsls	r5, r4, #29
 8002266:	0264      	lsls	r4, r4, #9
 8002268:	0b24      	lsrs	r4, r4, #12
 800226a:	08d2      	lsrs	r2, r2, #3
 800226c:	4315      	orrs	r5, r2
 800226e:	2200      	movs	r2, #0
 8002270:	e601      	b.n	8001e76 <__aeabi_dmul+0xc2>
 8002272:	2280      	movs	r2, #128	; 0x80
 8002274:	0312      	lsls	r2, r2, #12
 8002276:	4314      	orrs	r4, r2
 8002278:	0324      	lsls	r4, r4, #12
 800227a:	4a01      	ldr	r2, [pc, #4]	; (8002280 <__aeabi_dmul+0x4cc>)
 800227c:	0b24      	lsrs	r4, r4, #12
 800227e:	e5fa      	b.n	8001e76 <__aeabi_dmul+0xc2>
 8002280:	000007ff 	.word	0x000007ff
 8002284:	0000043e 	.word	0x0000043e
 8002288:	0000041e 	.word	0x0000041e

0800228c <__aeabi_dsub>:
 800228c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800228e:	4657      	mov	r7, sl
 8002290:	464e      	mov	r6, r9
 8002292:	4645      	mov	r5, r8
 8002294:	46de      	mov	lr, fp
 8002296:	b5e0      	push	{r5, r6, r7, lr}
 8002298:	001e      	movs	r6, r3
 800229a:	0017      	movs	r7, r2
 800229c:	004a      	lsls	r2, r1, #1
 800229e:	030b      	lsls	r3, r1, #12
 80022a0:	0d52      	lsrs	r2, r2, #21
 80022a2:	0a5b      	lsrs	r3, r3, #9
 80022a4:	4690      	mov	r8, r2
 80022a6:	0f42      	lsrs	r2, r0, #29
 80022a8:	431a      	orrs	r2, r3
 80022aa:	0fcd      	lsrs	r5, r1, #31
 80022ac:	4ccd      	ldr	r4, [pc, #820]	; (80025e4 <__aeabi_dsub+0x358>)
 80022ae:	0331      	lsls	r1, r6, #12
 80022b0:	00c3      	lsls	r3, r0, #3
 80022b2:	4694      	mov	ip, r2
 80022b4:	0070      	lsls	r0, r6, #1
 80022b6:	0f7a      	lsrs	r2, r7, #29
 80022b8:	0a49      	lsrs	r1, r1, #9
 80022ba:	00ff      	lsls	r7, r7, #3
 80022bc:	469a      	mov	sl, r3
 80022be:	46b9      	mov	r9, r7
 80022c0:	0d40      	lsrs	r0, r0, #21
 80022c2:	0ff6      	lsrs	r6, r6, #31
 80022c4:	4311      	orrs	r1, r2
 80022c6:	42a0      	cmp	r0, r4
 80022c8:	d100      	bne.n	80022cc <__aeabi_dsub+0x40>
 80022ca:	e0b1      	b.n	8002430 <__aeabi_dsub+0x1a4>
 80022cc:	2201      	movs	r2, #1
 80022ce:	4056      	eors	r6, r2
 80022d0:	46b3      	mov	fp, r6
 80022d2:	42b5      	cmp	r5, r6
 80022d4:	d100      	bne.n	80022d8 <__aeabi_dsub+0x4c>
 80022d6:	e088      	b.n	80023ea <__aeabi_dsub+0x15e>
 80022d8:	4642      	mov	r2, r8
 80022da:	1a12      	subs	r2, r2, r0
 80022dc:	2a00      	cmp	r2, #0
 80022de:	dc00      	bgt.n	80022e2 <__aeabi_dsub+0x56>
 80022e0:	e0ae      	b.n	8002440 <__aeabi_dsub+0x1b4>
 80022e2:	2800      	cmp	r0, #0
 80022e4:	d100      	bne.n	80022e8 <__aeabi_dsub+0x5c>
 80022e6:	e0c1      	b.n	800246c <__aeabi_dsub+0x1e0>
 80022e8:	48be      	ldr	r0, [pc, #760]	; (80025e4 <__aeabi_dsub+0x358>)
 80022ea:	4580      	cmp	r8, r0
 80022ec:	d100      	bne.n	80022f0 <__aeabi_dsub+0x64>
 80022ee:	e151      	b.n	8002594 <__aeabi_dsub+0x308>
 80022f0:	2080      	movs	r0, #128	; 0x80
 80022f2:	0400      	lsls	r0, r0, #16
 80022f4:	4301      	orrs	r1, r0
 80022f6:	2a38      	cmp	r2, #56	; 0x38
 80022f8:	dd00      	ble.n	80022fc <__aeabi_dsub+0x70>
 80022fa:	e17b      	b.n	80025f4 <__aeabi_dsub+0x368>
 80022fc:	2a1f      	cmp	r2, #31
 80022fe:	dd00      	ble.n	8002302 <__aeabi_dsub+0x76>
 8002300:	e1ee      	b.n	80026e0 <__aeabi_dsub+0x454>
 8002302:	2020      	movs	r0, #32
 8002304:	003e      	movs	r6, r7
 8002306:	1a80      	subs	r0, r0, r2
 8002308:	000c      	movs	r4, r1
 800230a:	40d6      	lsrs	r6, r2
 800230c:	40d1      	lsrs	r1, r2
 800230e:	4087      	lsls	r7, r0
 8002310:	4662      	mov	r2, ip
 8002312:	4084      	lsls	r4, r0
 8002314:	1a52      	subs	r2, r2, r1
 8002316:	1e78      	subs	r0, r7, #1
 8002318:	4187      	sbcs	r7, r0
 800231a:	4694      	mov	ip, r2
 800231c:	4334      	orrs	r4, r6
 800231e:	4327      	orrs	r7, r4
 8002320:	1bdc      	subs	r4, r3, r7
 8002322:	42a3      	cmp	r3, r4
 8002324:	419b      	sbcs	r3, r3
 8002326:	4662      	mov	r2, ip
 8002328:	425b      	negs	r3, r3
 800232a:	1ad3      	subs	r3, r2, r3
 800232c:	4699      	mov	r9, r3
 800232e:	464b      	mov	r3, r9
 8002330:	021b      	lsls	r3, r3, #8
 8002332:	d400      	bmi.n	8002336 <__aeabi_dsub+0xaa>
 8002334:	e118      	b.n	8002568 <__aeabi_dsub+0x2dc>
 8002336:	464b      	mov	r3, r9
 8002338:	0258      	lsls	r0, r3, #9
 800233a:	0a43      	lsrs	r3, r0, #9
 800233c:	4699      	mov	r9, r3
 800233e:	464b      	mov	r3, r9
 8002340:	2b00      	cmp	r3, #0
 8002342:	d100      	bne.n	8002346 <__aeabi_dsub+0xba>
 8002344:	e137      	b.n	80025b6 <__aeabi_dsub+0x32a>
 8002346:	4648      	mov	r0, r9
 8002348:	f000 fcac 	bl	8002ca4 <__clzsi2>
 800234c:	0001      	movs	r1, r0
 800234e:	3908      	subs	r1, #8
 8002350:	2320      	movs	r3, #32
 8002352:	0022      	movs	r2, r4
 8002354:	4648      	mov	r0, r9
 8002356:	1a5b      	subs	r3, r3, r1
 8002358:	40da      	lsrs	r2, r3
 800235a:	4088      	lsls	r0, r1
 800235c:	408c      	lsls	r4, r1
 800235e:	4643      	mov	r3, r8
 8002360:	4310      	orrs	r0, r2
 8002362:	4588      	cmp	r8, r1
 8002364:	dd00      	ble.n	8002368 <__aeabi_dsub+0xdc>
 8002366:	e136      	b.n	80025d6 <__aeabi_dsub+0x34a>
 8002368:	1ac9      	subs	r1, r1, r3
 800236a:	1c4b      	adds	r3, r1, #1
 800236c:	2b1f      	cmp	r3, #31
 800236e:	dd00      	ble.n	8002372 <__aeabi_dsub+0xe6>
 8002370:	e0ea      	b.n	8002548 <__aeabi_dsub+0x2bc>
 8002372:	2220      	movs	r2, #32
 8002374:	0026      	movs	r6, r4
 8002376:	1ad2      	subs	r2, r2, r3
 8002378:	0001      	movs	r1, r0
 800237a:	4094      	lsls	r4, r2
 800237c:	40de      	lsrs	r6, r3
 800237e:	40d8      	lsrs	r0, r3
 8002380:	2300      	movs	r3, #0
 8002382:	4091      	lsls	r1, r2
 8002384:	1e62      	subs	r2, r4, #1
 8002386:	4194      	sbcs	r4, r2
 8002388:	4681      	mov	r9, r0
 800238a:	4698      	mov	r8, r3
 800238c:	4331      	orrs	r1, r6
 800238e:	430c      	orrs	r4, r1
 8002390:	0763      	lsls	r3, r4, #29
 8002392:	d009      	beq.n	80023a8 <__aeabi_dsub+0x11c>
 8002394:	230f      	movs	r3, #15
 8002396:	4023      	ands	r3, r4
 8002398:	2b04      	cmp	r3, #4
 800239a:	d005      	beq.n	80023a8 <__aeabi_dsub+0x11c>
 800239c:	1d23      	adds	r3, r4, #4
 800239e:	42a3      	cmp	r3, r4
 80023a0:	41a4      	sbcs	r4, r4
 80023a2:	4264      	negs	r4, r4
 80023a4:	44a1      	add	r9, r4
 80023a6:	001c      	movs	r4, r3
 80023a8:	464b      	mov	r3, r9
 80023aa:	021b      	lsls	r3, r3, #8
 80023ac:	d400      	bmi.n	80023b0 <__aeabi_dsub+0x124>
 80023ae:	e0de      	b.n	800256e <__aeabi_dsub+0x2e2>
 80023b0:	4641      	mov	r1, r8
 80023b2:	4b8c      	ldr	r3, [pc, #560]	; (80025e4 <__aeabi_dsub+0x358>)
 80023b4:	3101      	adds	r1, #1
 80023b6:	4299      	cmp	r1, r3
 80023b8:	d100      	bne.n	80023bc <__aeabi_dsub+0x130>
 80023ba:	e0e7      	b.n	800258c <__aeabi_dsub+0x300>
 80023bc:	464b      	mov	r3, r9
 80023be:	488a      	ldr	r0, [pc, #552]	; (80025e8 <__aeabi_dsub+0x35c>)
 80023c0:	08e4      	lsrs	r4, r4, #3
 80023c2:	4003      	ands	r3, r0
 80023c4:	0018      	movs	r0, r3
 80023c6:	0549      	lsls	r1, r1, #21
 80023c8:	075b      	lsls	r3, r3, #29
 80023ca:	0240      	lsls	r0, r0, #9
 80023cc:	4323      	orrs	r3, r4
 80023ce:	0d4a      	lsrs	r2, r1, #21
 80023d0:	0b04      	lsrs	r4, r0, #12
 80023d2:	0512      	lsls	r2, r2, #20
 80023d4:	07ed      	lsls	r5, r5, #31
 80023d6:	4322      	orrs	r2, r4
 80023d8:	432a      	orrs	r2, r5
 80023da:	0018      	movs	r0, r3
 80023dc:	0011      	movs	r1, r2
 80023de:	bcf0      	pop	{r4, r5, r6, r7}
 80023e0:	46bb      	mov	fp, r7
 80023e2:	46b2      	mov	sl, r6
 80023e4:	46a9      	mov	r9, r5
 80023e6:	46a0      	mov	r8, r4
 80023e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80023ea:	4642      	mov	r2, r8
 80023ec:	1a12      	subs	r2, r2, r0
 80023ee:	2a00      	cmp	r2, #0
 80023f0:	dd52      	ble.n	8002498 <__aeabi_dsub+0x20c>
 80023f2:	2800      	cmp	r0, #0
 80023f4:	d100      	bne.n	80023f8 <__aeabi_dsub+0x16c>
 80023f6:	e09c      	b.n	8002532 <__aeabi_dsub+0x2a6>
 80023f8:	45a0      	cmp	r8, r4
 80023fa:	d100      	bne.n	80023fe <__aeabi_dsub+0x172>
 80023fc:	e0ca      	b.n	8002594 <__aeabi_dsub+0x308>
 80023fe:	2080      	movs	r0, #128	; 0x80
 8002400:	0400      	lsls	r0, r0, #16
 8002402:	4301      	orrs	r1, r0
 8002404:	2a38      	cmp	r2, #56	; 0x38
 8002406:	dd00      	ble.n	800240a <__aeabi_dsub+0x17e>
 8002408:	e149      	b.n	800269e <__aeabi_dsub+0x412>
 800240a:	2a1f      	cmp	r2, #31
 800240c:	dc00      	bgt.n	8002410 <__aeabi_dsub+0x184>
 800240e:	e197      	b.n	8002740 <__aeabi_dsub+0x4b4>
 8002410:	0010      	movs	r0, r2
 8002412:	000e      	movs	r6, r1
 8002414:	3820      	subs	r0, #32
 8002416:	40c6      	lsrs	r6, r0
 8002418:	2a20      	cmp	r2, #32
 800241a:	d004      	beq.n	8002426 <__aeabi_dsub+0x19a>
 800241c:	2040      	movs	r0, #64	; 0x40
 800241e:	1a82      	subs	r2, r0, r2
 8002420:	4091      	lsls	r1, r2
 8002422:	430f      	orrs	r7, r1
 8002424:	46b9      	mov	r9, r7
 8002426:	464c      	mov	r4, r9
 8002428:	1e62      	subs	r2, r4, #1
 800242a:	4194      	sbcs	r4, r2
 800242c:	4334      	orrs	r4, r6
 800242e:	e13a      	b.n	80026a6 <__aeabi_dsub+0x41a>
 8002430:	000a      	movs	r2, r1
 8002432:	433a      	orrs	r2, r7
 8002434:	d028      	beq.n	8002488 <__aeabi_dsub+0x1fc>
 8002436:	46b3      	mov	fp, r6
 8002438:	42b5      	cmp	r5, r6
 800243a:	d02b      	beq.n	8002494 <__aeabi_dsub+0x208>
 800243c:	4a6b      	ldr	r2, [pc, #428]	; (80025ec <__aeabi_dsub+0x360>)
 800243e:	4442      	add	r2, r8
 8002440:	2a00      	cmp	r2, #0
 8002442:	d05d      	beq.n	8002500 <__aeabi_dsub+0x274>
 8002444:	4642      	mov	r2, r8
 8002446:	4644      	mov	r4, r8
 8002448:	1a82      	subs	r2, r0, r2
 800244a:	2c00      	cmp	r4, #0
 800244c:	d000      	beq.n	8002450 <__aeabi_dsub+0x1c4>
 800244e:	e0f5      	b.n	800263c <__aeabi_dsub+0x3b0>
 8002450:	4665      	mov	r5, ip
 8002452:	431d      	orrs	r5, r3
 8002454:	d100      	bne.n	8002458 <__aeabi_dsub+0x1cc>
 8002456:	e19c      	b.n	8002792 <__aeabi_dsub+0x506>
 8002458:	1e55      	subs	r5, r2, #1
 800245a:	2a01      	cmp	r2, #1
 800245c:	d100      	bne.n	8002460 <__aeabi_dsub+0x1d4>
 800245e:	e1fb      	b.n	8002858 <__aeabi_dsub+0x5cc>
 8002460:	4c60      	ldr	r4, [pc, #384]	; (80025e4 <__aeabi_dsub+0x358>)
 8002462:	42a2      	cmp	r2, r4
 8002464:	d100      	bne.n	8002468 <__aeabi_dsub+0x1dc>
 8002466:	e1bd      	b.n	80027e4 <__aeabi_dsub+0x558>
 8002468:	002a      	movs	r2, r5
 800246a:	e0f0      	b.n	800264e <__aeabi_dsub+0x3c2>
 800246c:	0008      	movs	r0, r1
 800246e:	4338      	orrs	r0, r7
 8002470:	d100      	bne.n	8002474 <__aeabi_dsub+0x1e8>
 8002472:	e0c3      	b.n	80025fc <__aeabi_dsub+0x370>
 8002474:	1e50      	subs	r0, r2, #1
 8002476:	2a01      	cmp	r2, #1
 8002478:	d100      	bne.n	800247c <__aeabi_dsub+0x1f0>
 800247a:	e1a8      	b.n	80027ce <__aeabi_dsub+0x542>
 800247c:	4c59      	ldr	r4, [pc, #356]	; (80025e4 <__aeabi_dsub+0x358>)
 800247e:	42a2      	cmp	r2, r4
 8002480:	d100      	bne.n	8002484 <__aeabi_dsub+0x1f8>
 8002482:	e087      	b.n	8002594 <__aeabi_dsub+0x308>
 8002484:	0002      	movs	r2, r0
 8002486:	e736      	b.n	80022f6 <__aeabi_dsub+0x6a>
 8002488:	2201      	movs	r2, #1
 800248a:	4056      	eors	r6, r2
 800248c:	46b3      	mov	fp, r6
 800248e:	42b5      	cmp	r5, r6
 8002490:	d000      	beq.n	8002494 <__aeabi_dsub+0x208>
 8002492:	e721      	b.n	80022d8 <__aeabi_dsub+0x4c>
 8002494:	4a55      	ldr	r2, [pc, #340]	; (80025ec <__aeabi_dsub+0x360>)
 8002496:	4442      	add	r2, r8
 8002498:	2a00      	cmp	r2, #0
 800249a:	d100      	bne.n	800249e <__aeabi_dsub+0x212>
 800249c:	e0b5      	b.n	800260a <__aeabi_dsub+0x37e>
 800249e:	4642      	mov	r2, r8
 80024a0:	4644      	mov	r4, r8
 80024a2:	1a82      	subs	r2, r0, r2
 80024a4:	2c00      	cmp	r4, #0
 80024a6:	d100      	bne.n	80024aa <__aeabi_dsub+0x21e>
 80024a8:	e138      	b.n	800271c <__aeabi_dsub+0x490>
 80024aa:	4e4e      	ldr	r6, [pc, #312]	; (80025e4 <__aeabi_dsub+0x358>)
 80024ac:	42b0      	cmp	r0, r6
 80024ae:	d100      	bne.n	80024b2 <__aeabi_dsub+0x226>
 80024b0:	e1de      	b.n	8002870 <__aeabi_dsub+0x5e4>
 80024b2:	2680      	movs	r6, #128	; 0x80
 80024b4:	4664      	mov	r4, ip
 80024b6:	0436      	lsls	r6, r6, #16
 80024b8:	4334      	orrs	r4, r6
 80024ba:	46a4      	mov	ip, r4
 80024bc:	2a38      	cmp	r2, #56	; 0x38
 80024be:	dd00      	ble.n	80024c2 <__aeabi_dsub+0x236>
 80024c0:	e196      	b.n	80027f0 <__aeabi_dsub+0x564>
 80024c2:	2a1f      	cmp	r2, #31
 80024c4:	dd00      	ble.n	80024c8 <__aeabi_dsub+0x23c>
 80024c6:	e224      	b.n	8002912 <__aeabi_dsub+0x686>
 80024c8:	2620      	movs	r6, #32
 80024ca:	1ab4      	subs	r4, r6, r2
 80024cc:	46a2      	mov	sl, r4
 80024ce:	4664      	mov	r4, ip
 80024d0:	4656      	mov	r6, sl
 80024d2:	40b4      	lsls	r4, r6
 80024d4:	46a1      	mov	r9, r4
 80024d6:	001c      	movs	r4, r3
 80024d8:	464e      	mov	r6, r9
 80024da:	40d4      	lsrs	r4, r2
 80024dc:	4326      	orrs	r6, r4
 80024de:	0034      	movs	r4, r6
 80024e0:	4656      	mov	r6, sl
 80024e2:	40b3      	lsls	r3, r6
 80024e4:	1e5e      	subs	r6, r3, #1
 80024e6:	41b3      	sbcs	r3, r6
 80024e8:	431c      	orrs	r4, r3
 80024ea:	4663      	mov	r3, ip
 80024ec:	40d3      	lsrs	r3, r2
 80024ee:	18c9      	adds	r1, r1, r3
 80024f0:	19e4      	adds	r4, r4, r7
 80024f2:	42bc      	cmp	r4, r7
 80024f4:	41bf      	sbcs	r7, r7
 80024f6:	427f      	negs	r7, r7
 80024f8:	46b9      	mov	r9, r7
 80024fa:	4680      	mov	r8, r0
 80024fc:	4489      	add	r9, r1
 80024fe:	e0d8      	b.n	80026b2 <__aeabi_dsub+0x426>
 8002500:	4640      	mov	r0, r8
 8002502:	4c3b      	ldr	r4, [pc, #236]	; (80025f0 <__aeabi_dsub+0x364>)
 8002504:	3001      	adds	r0, #1
 8002506:	4220      	tst	r0, r4
 8002508:	d000      	beq.n	800250c <__aeabi_dsub+0x280>
 800250a:	e0b4      	b.n	8002676 <__aeabi_dsub+0x3ea>
 800250c:	4640      	mov	r0, r8
 800250e:	2800      	cmp	r0, #0
 8002510:	d000      	beq.n	8002514 <__aeabi_dsub+0x288>
 8002512:	e144      	b.n	800279e <__aeabi_dsub+0x512>
 8002514:	4660      	mov	r0, ip
 8002516:	4318      	orrs	r0, r3
 8002518:	d100      	bne.n	800251c <__aeabi_dsub+0x290>
 800251a:	e190      	b.n	800283e <__aeabi_dsub+0x5b2>
 800251c:	0008      	movs	r0, r1
 800251e:	4338      	orrs	r0, r7
 8002520:	d000      	beq.n	8002524 <__aeabi_dsub+0x298>
 8002522:	e1aa      	b.n	800287a <__aeabi_dsub+0x5ee>
 8002524:	4661      	mov	r1, ip
 8002526:	08db      	lsrs	r3, r3, #3
 8002528:	0749      	lsls	r1, r1, #29
 800252a:	430b      	orrs	r3, r1
 800252c:	4661      	mov	r1, ip
 800252e:	08cc      	lsrs	r4, r1, #3
 8002530:	e027      	b.n	8002582 <__aeabi_dsub+0x2f6>
 8002532:	0008      	movs	r0, r1
 8002534:	4338      	orrs	r0, r7
 8002536:	d061      	beq.n	80025fc <__aeabi_dsub+0x370>
 8002538:	1e50      	subs	r0, r2, #1
 800253a:	2a01      	cmp	r2, #1
 800253c:	d100      	bne.n	8002540 <__aeabi_dsub+0x2b4>
 800253e:	e139      	b.n	80027b4 <__aeabi_dsub+0x528>
 8002540:	42a2      	cmp	r2, r4
 8002542:	d027      	beq.n	8002594 <__aeabi_dsub+0x308>
 8002544:	0002      	movs	r2, r0
 8002546:	e75d      	b.n	8002404 <__aeabi_dsub+0x178>
 8002548:	0002      	movs	r2, r0
 800254a:	391f      	subs	r1, #31
 800254c:	40ca      	lsrs	r2, r1
 800254e:	0011      	movs	r1, r2
 8002550:	2b20      	cmp	r3, #32
 8002552:	d003      	beq.n	800255c <__aeabi_dsub+0x2d0>
 8002554:	2240      	movs	r2, #64	; 0x40
 8002556:	1ad3      	subs	r3, r2, r3
 8002558:	4098      	lsls	r0, r3
 800255a:	4304      	orrs	r4, r0
 800255c:	1e63      	subs	r3, r4, #1
 800255e:	419c      	sbcs	r4, r3
 8002560:	2300      	movs	r3, #0
 8002562:	4699      	mov	r9, r3
 8002564:	4698      	mov	r8, r3
 8002566:	430c      	orrs	r4, r1
 8002568:	0763      	lsls	r3, r4, #29
 800256a:	d000      	beq.n	800256e <__aeabi_dsub+0x2e2>
 800256c:	e712      	b.n	8002394 <__aeabi_dsub+0x108>
 800256e:	464b      	mov	r3, r9
 8002570:	464a      	mov	r2, r9
 8002572:	08e4      	lsrs	r4, r4, #3
 8002574:	075b      	lsls	r3, r3, #29
 8002576:	4323      	orrs	r3, r4
 8002578:	08d4      	lsrs	r4, r2, #3
 800257a:	4642      	mov	r2, r8
 800257c:	4919      	ldr	r1, [pc, #100]	; (80025e4 <__aeabi_dsub+0x358>)
 800257e:	428a      	cmp	r2, r1
 8002580:	d00e      	beq.n	80025a0 <__aeabi_dsub+0x314>
 8002582:	0324      	lsls	r4, r4, #12
 8002584:	0552      	lsls	r2, r2, #21
 8002586:	0b24      	lsrs	r4, r4, #12
 8002588:	0d52      	lsrs	r2, r2, #21
 800258a:	e722      	b.n	80023d2 <__aeabi_dsub+0x146>
 800258c:	000a      	movs	r2, r1
 800258e:	2400      	movs	r4, #0
 8002590:	2300      	movs	r3, #0
 8002592:	e71e      	b.n	80023d2 <__aeabi_dsub+0x146>
 8002594:	08db      	lsrs	r3, r3, #3
 8002596:	4662      	mov	r2, ip
 8002598:	0752      	lsls	r2, r2, #29
 800259a:	4313      	orrs	r3, r2
 800259c:	4662      	mov	r2, ip
 800259e:	08d4      	lsrs	r4, r2, #3
 80025a0:	001a      	movs	r2, r3
 80025a2:	4322      	orrs	r2, r4
 80025a4:	d100      	bne.n	80025a8 <__aeabi_dsub+0x31c>
 80025a6:	e1fc      	b.n	80029a2 <__aeabi_dsub+0x716>
 80025a8:	2280      	movs	r2, #128	; 0x80
 80025aa:	0312      	lsls	r2, r2, #12
 80025ac:	4314      	orrs	r4, r2
 80025ae:	0324      	lsls	r4, r4, #12
 80025b0:	4a0c      	ldr	r2, [pc, #48]	; (80025e4 <__aeabi_dsub+0x358>)
 80025b2:	0b24      	lsrs	r4, r4, #12
 80025b4:	e70d      	b.n	80023d2 <__aeabi_dsub+0x146>
 80025b6:	0020      	movs	r0, r4
 80025b8:	f000 fb74 	bl	8002ca4 <__clzsi2>
 80025bc:	0001      	movs	r1, r0
 80025be:	3118      	adds	r1, #24
 80025c0:	291f      	cmp	r1, #31
 80025c2:	dc00      	bgt.n	80025c6 <__aeabi_dsub+0x33a>
 80025c4:	e6c4      	b.n	8002350 <__aeabi_dsub+0xc4>
 80025c6:	3808      	subs	r0, #8
 80025c8:	4084      	lsls	r4, r0
 80025ca:	4643      	mov	r3, r8
 80025cc:	0020      	movs	r0, r4
 80025ce:	2400      	movs	r4, #0
 80025d0:	4588      	cmp	r8, r1
 80025d2:	dc00      	bgt.n	80025d6 <__aeabi_dsub+0x34a>
 80025d4:	e6c8      	b.n	8002368 <__aeabi_dsub+0xdc>
 80025d6:	4a04      	ldr	r2, [pc, #16]	; (80025e8 <__aeabi_dsub+0x35c>)
 80025d8:	1a5b      	subs	r3, r3, r1
 80025da:	4010      	ands	r0, r2
 80025dc:	4698      	mov	r8, r3
 80025de:	4681      	mov	r9, r0
 80025e0:	e6d6      	b.n	8002390 <__aeabi_dsub+0x104>
 80025e2:	46c0      	nop			; (mov r8, r8)
 80025e4:	000007ff 	.word	0x000007ff
 80025e8:	ff7fffff 	.word	0xff7fffff
 80025ec:	fffff801 	.word	0xfffff801
 80025f0:	000007fe 	.word	0x000007fe
 80025f4:	430f      	orrs	r7, r1
 80025f6:	1e7a      	subs	r2, r7, #1
 80025f8:	4197      	sbcs	r7, r2
 80025fa:	e691      	b.n	8002320 <__aeabi_dsub+0x94>
 80025fc:	4661      	mov	r1, ip
 80025fe:	08db      	lsrs	r3, r3, #3
 8002600:	0749      	lsls	r1, r1, #29
 8002602:	430b      	orrs	r3, r1
 8002604:	4661      	mov	r1, ip
 8002606:	08cc      	lsrs	r4, r1, #3
 8002608:	e7b8      	b.n	800257c <__aeabi_dsub+0x2f0>
 800260a:	4640      	mov	r0, r8
 800260c:	4cd3      	ldr	r4, [pc, #844]	; (800295c <__aeabi_dsub+0x6d0>)
 800260e:	3001      	adds	r0, #1
 8002610:	4220      	tst	r0, r4
 8002612:	d000      	beq.n	8002616 <__aeabi_dsub+0x38a>
 8002614:	e0a2      	b.n	800275c <__aeabi_dsub+0x4d0>
 8002616:	4640      	mov	r0, r8
 8002618:	2800      	cmp	r0, #0
 800261a:	d000      	beq.n	800261e <__aeabi_dsub+0x392>
 800261c:	e101      	b.n	8002822 <__aeabi_dsub+0x596>
 800261e:	4660      	mov	r0, ip
 8002620:	4318      	orrs	r0, r3
 8002622:	d100      	bne.n	8002626 <__aeabi_dsub+0x39a>
 8002624:	e15e      	b.n	80028e4 <__aeabi_dsub+0x658>
 8002626:	0008      	movs	r0, r1
 8002628:	4338      	orrs	r0, r7
 800262a:	d000      	beq.n	800262e <__aeabi_dsub+0x3a2>
 800262c:	e15f      	b.n	80028ee <__aeabi_dsub+0x662>
 800262e:	4661      	mov	r1, ip
 8002630:	08db      	lsrs	r3, r3, #3
 8002632:	0749      	lsls	r1, r1, #29
 8002634:	430b      	orrs	r3, r1
 8002636:	4661      	mov	r1, ip
 8002638:	08cc      	lsrs	r4, r1, #3
 800263a:	e7a2      	b.n	8002582 <__aeabi_dsub+0x2f6>
 800263c:	4dc8      	ldr	r5, [pc, #800]	; (8002960 <__aeabi_dsub+0x6d4>)
 800263e:	42a8      	cmp	r0, r5
 8002640:	d100      	bne.n	8002644 <__aeabi_dsub+0x3b8>
 8002642:	e0cf      	b.n	80027e4 <__aeabi_dsub+0x558>
 8002644:	2580      	movs	r5, #128	; 0x80
 8002646:	4664      	mov	r4, ip
 8002648:	042d      	lsls	r5, r5, #16
 800264a:	432c      	orrs	r4, r5
 800264c:	46a4      	mov	ip, r4
 800264e:	2a38      	cmp	r2, #56	; 0x38
 8002650:	dc56      	bgt.n	8002700 <__aeabi_dsub+0x474>
 8002652:	2a1f      	cmp	r2, #31
 8002654:	dd00      	ble.n	8002658 <__aeabi_dsub+0x3cc>
 8002656:	e0d1      	b.n	80027fc <__aeabi_dsub+0x570>
 8002658:	2520      	movs	r5, #32
 800265a:	001e      	movs	r6, r3
 800265c:	1aad      	subs	r5, r5, r2
 800265e:	4664      	mov	r4, ip
 8002660:	40ab      	lsls	r3, r5
 8002662:	40ac      	lsls	r4, r5
 8002664:	40d6      	lsrs	r6, r2
 8002666:	1e5d      	subs	r5, r3, #1
 8002668:	41ab      	sbcs	r3, r5
 800266a:	4334      	orrs	r4, r6
 800266c:	4323      	orrs	r3, r4
 800266e:	4664      	mov	r4, ip
 8002670:	40d4      	lsrs	r4, r2
 8002672:	1b09      	subs	r1, r1, r4
 8002674:	e049      	b.n	800270a <__aeabi_dsub+0x47e>
 8002676:	4660      	mov	r0, ip
 8002678:	1bdc      	subs	r4, r3, r7
 800267a:	1a46      	subs	r6, r0, r1
 800267c:	42a3      	cmp	r3, r4
 800267e:	4180      	sbcs	r0, r0
 8002680:	4240      	negs	r0, r0
 8002682:	4681      	mov	r9, r0
 8002684:	0030      	movs	r0, r6
 8002686:	464e      	mov	r6, r9
 8002688:	1b80      	subs	r0, r0, r6
 800268a:	4681      	mov	r9, r0
 800268c:	0200      	lsls	r0, r0, #8
 800268e:	d476      	bmi.n	800277e <__aeabi_dsub+0x4f2>
 8002690:	464b      	mov	r3, r9
 8002692:	4323      	orrs	r3, r4
 8002694:	d000      	beq.n	8002698 <__aeabi_dsub+0x40c>
 8002696:	e652      	b.n	800233e <__aeabi_dsub+0xb2>
 8002698:	2400      	movs	r4, #0
 800269a:	2500      	movs	r5, #0
 800269c:	e771      	b.n	8002582 <__aeabi_dsub+0x2f6>
 800269e:	4339      	orrs	r1, r7
 80026a0:	000c      	movs	r4, r1
 80026a2:	1e62      	subs	r2, r4, #1
 80026a4:	4194      	sbcs	r4, r2
 80026a6:	18e4      	adds	r4, r4, r3
 80026a8:	429c      	cmp	r4, r3
 80026aa:	419b      	sbcs	r3, r3
 80026ac:	425b      	negs	r3, r3
 80026ae:	4463      	add	r3, ip
 80026b0:	4699      	mov	r9, r3
 80026b2:	464b      	mov	r3, r9
 80026b4:	021b      	lsls	r3, r3, #8
 80026b6:	d400      	bmi.n	80026ba <__aeabi_dsub+0x42e>
 80026b8:	e756      	b.n	8002568 <__aeabi_dsub+0x2dc>
 80026ba:	2301      	movs	r3, #1
 80026bc:	469c      	mov	ip, r3
 80026be:	4ba8      	ldr	r3, [pc, #672]	; (8002960 <__aeabi_dsub+0x6d4>)
 80026c0:	44e0      	add	r8, ip
 80026c2:	4598      	cmp	r8, r3
 80026c4:	d038      	beq.n	8002738 <__aeabi_dsub+0x4ac>
 80026c6:	464b      	mov	r3, r9
 80026c8:	48a6      	ldr	r0, [pc, #664]	; (8002964 <__aeabi_dsub+0x6d8>)
 80026ca:	2201      	movs	r2, #1
 80026cc:	4003      	ands	r3, r0
 80026ce:	0018      	movs	r0, r3
 80026d0:	0863      	lsrs	r3, r4, #1
 80026d2:	4014      	ands	r4, r2
 80026d4:	431c      	orrs	r4, r3
 80026d6:	07c3      	lsls	r3, r0, #31
 80026d8:	431c      	orrs	r4, r3
 80026da:	0843      	lsrs	r3, r0, #1
 80026dc:	4699      	mov	r9, r3
 80026de:	e657      	b.n	8002390 <__aeabi_dsub+0x104>
 80026e0:	0010      	movs	r0, r2
 80026e2:	000e      	movs	r6, r1
 80026e4:	3820      	subs	r0, #32
 80026e6:	40c6      	lsrs	r6, r0
 80026e8:	2a20      	cmp	r2, #32
 80026ea:	d004      	beq.n	80026f6 <__aeabi_dsub+0x46a>
 80026ec:	2040      	movs	r0, #64	; 0x40
 80026ee:	1a82      	subs	r2, r0, r2
 80026f0:	4091      	lsls	r1, r2
 80026f2:	430f      	orrs	r7, r1
 80026f4:	46b9      	mov	r9, r7
 80026f6:	464f      	mov	r7, r9
 80026f8:	1e7a      	subs	r2, r7, #1
 80026fa:	4197      	sbcs	r7, r2
 80026fc:	4337      	orrs	r7, r6
 80026fe:	e60f      	b.n	8002320 <__aeabi_dsub+0x94>
 8002700:	4662      	mov	r2, ip
 8002702:	431a      	orrs	r2, r3
 8002704:	0013      	movs	r3, r2
 8002706:	1e5a      	subs	r2, r3, #1
 8002708:	4193      	sbcs	r3, r2
 800270a:	1afc      	subs	r4, r7, r3
 800270c:	42a7      	cmp	r7, r4
 800270e:	41bf      	sbcs	r7, r7
 8002710:	427f      	negs	r7, r7
 8002712:	1bcb      	subs	r3, r1, r7
 8002714:	4699      	mov	r9, r3
 8002716:	465d      	mov	r5, fp
 8002718:	4680      	mov	r8, r0
 800271a:	e608      	b.n	800232e <__aeabi_dsub+0xa2>
 800271c:	4666      	mov	r6, ip
 800271e:	431e      	orrs	r6, r3
 8002720:	d100      	bne.n	8002724 <__aeabi_dsub+0x498>
 8002722:	e0be      	b.n	80028a2 <__aeabi_dsub+0x616>
 8002724:	1e56      	subs	r6, r2, #1
 8002726:	2a01      	cmp	r2, #1
 8002728:	d100      	bne.n	800272c <__aeabi_dsub+0x4a0>
 800272a:	e109      	b.n	8002940 <__aeabi_dsub+0x6b4>
 800272c:	4c8c      	ldr	r4, [pc, #560]	; (8002960 <__aeabi_dsub+0x6d4>)
 800272e:	42a2      	cmp	r2, r4
 8002730:	d100      	bne.n	8002734 <__aeabi_dsub+0x4a8>
 8002732:	e119      	b.n	8002968 <__aeabi_dsub+0x6dc>
 8002734:	0032      	movs	r2, r6
 8002736:	e6c1      	b.n	80024bc <__aeabi_dsub+0x230>
 8002738:	4642      	mov	r2, r8
 800273a:	2400      	movs	r4, #0
 800273c:	2300      	movs	r3, #0
 800273e:	e648      	b.n	80023d2 <__aeabi_dsub+0x146>
 8002740:	2020      	movs	r0, #32
 8002742:	000c      	movs	r4, r1
 8002744:	1a80      	subs	r0, r0, r2
 8002746:	003e      	movs	r6, r7
 8002748:	4087      	lsls	r7, r0
 800274a:	4084      	lsls	r4, r0
 800274c:	40d6      	lsrs	r6, r2
 800274e:	1e78      	subs	r0, r7, #1
 8002750:	4187      	sbcs	r7, r0
 8002752:	40d1      	lsrs	r1, r2
 8002754:	4334      	orrs	r4, r6
 8002756:	433c      	orrs	r4, r7
 8002758:	448c      	add	ip, r1
 800275a:	e7a4      	b.n	80026a6 <__aeabi_dsub+0x41a>
 800275c:	4a80      	ldr	r2, [pc, #512]	; (8002960 <__aeabi_dsub+0x6d4>)
 800275e:	4290      	cmp	r0, r2
 8002760:	d100      	bne.n	8002764 <__aeabi_dsub+0x4d8>
 8002762:	e0e9      	b.n	8002938 <__aeabi_dsub+0x6ac>
 8002764:	19df      	adds	r7, r3, r7
 8002766:	429f      	cmp	r7, r3
 8002768:	419b      	sbcs	r3, r3
 800276a:	4461      	add	r1, ip
 800276c:	425b      	negs	r3, r3
 800276e:	18c9      	adds	r1, r1, r3
 8002770:	07cc      	lsls	r4, r1, #31
 8002772:	087f      	lsrs	r7, r7, #1
 8002774:	084b      	lsrs	r3, r1, #1
 8002776:	4699      	mov	r9, r3
 8002778:	4680      	mov	r8, r0
 800277a:	433c      	orrs	r4, r7
 800277c:	e6f4      	b.n	8002568 <__aeabi_dsub+0x2dc>
 800277e:	1afc      	subs	r4, r7, r3
 8002780:	42a7      	cmp	r7, r4
 8002782:	41bf      	sbcs	r7, r7
 8002784:	4663      	mov	r3, ip
 8002786:	427f      	negs	r7, r7
 8002788:	1ac9      	subs	r1, r1, r3
 800278a:	1bcb      	subs	r3, r1, r7
 800278c:	4699      	mov	r9, r3
 800278e:	465d      	mov	r5, fp
 8002790:	e5d5      	b.n	800233e <__aeabi_dsub+0xb2>
 8002792:	08ff      	lsrs	r7, r7, #3
 8002794:	074b      	lsls	r3, r1, #29
 8002796:	465d      	mov	r5, fp
 8002798:	433b      	orrs	r3, r7
 800279a:	08cc      	lsrs	r4, r1, #3
 800279c:	e6ee      	b.n	800257c <__aeabi_dsub+0x2f0>
 800279e:	4662      	mov	r2, ip
 80027a0:	431a      	orrs	r2, r3
 80027a2:	d000      	beq.n	80027a6 <__aeabi_dsub+0x51a>
 80027a4:	e082      	b.n	80028ac <__aeabi_dsub+0x620>
 80027a6:	000b      	movs	r3, r1
 80027a8:	433b      	orrs	r3, r7
 80027aa:	d11b      	bne.n	80027e4 <__aeabi_dsub+0x558>
 80027ac:	2480      	movs	r4, #128	; 0x80
 80027ae:	2500      	movs	r5, #0
 80027b0:	0324      	lsls	r4, r4, #12
 80027b2:	e6f9      	b.n	80025a8 <__aeabi_dsub+0x31c>
 80027b4:	19dc      	adds	r4, r3, r7
 80027b6:	429c      	cmp	r4, r3
 80027b8:	419b      	sbcs	r3, r3
 80027ba:	4461      	add	r1, ip
 80027bc:	4689      	mov	r9, r1
 80027be:	425b      	negs	r3, r3
 80027c0:	4499      	add	r9, r3
 80027c2:	464b      	mov	r3, r9
 80027c4:	021b      	lsls	r3, r3, #8
 80027c6:	d444      	bmi.n	8002852 <__aeabi_dsub+0x5c6>
 80027c8:	2301      	movs	r3, #1
 80027ca:	4698      	mov	r8, r3
 80027cc:	e6cc      	b.n	8002568 <__aeabi_dsub+0x2dc>
 80027ce:	1bdc      	subs	r4, r3, r7
 80027d0:	4662      	mov	r2, ip
 80027d2:	42a3      	cmp	r3, r4
 80027d4:	419b      	sbcs	r3, r3
 80027d6:	1a51      	subs	r1, r2, r1
 80027d8:	425b      	negs	r3, r3
 80027da:	1acb      	subs	r3, r1, r3
 80027dc:	4699      	mov	r9, r3
 80027de:	2301      	movs	r3, #1
 80027e0:	4698      	mov	r8, r3
 80027e2:	e5a4      	b.n	800232e <__aeabi_dsub+0xa2>
 80027e4:	08ff      	lsrs	r7, r7, #3
 80027e6:	074b      	lsls	r3, r1, #29
 80027e8:	465d      	mov	r5, fp
 80027ea:	433b      	orrs	r3, r7
 80027ec:	08cc      	lsrs	r4, r1, #3
 80027ee:	e6d7      	b.n	80025a0 <__aeabi_dsub+0x314>
 80027f0:	4662      	mov	r2, ip
 80027f2:	431a      	orrs	r2, r3
 80027f4:	0014      	movs	r4, r2
 80027f6:	1e63      	subs	r3, r4, #1
 80027f8:	419c      	sbcs	r4, r3
 80027fa:	e679      	b.n	80024f0 <__aeabi_dsub+0x264>
 80027fc:	0015      	movs	r5, r2
 80027fe:	4664      	mov	r4, ip
 8002800:	3d20      	subs	r5, #32
 8002802:	40ec      	lsrs	r4, r5
 8002804:	46a0      	mov	r8, r4
 8002806:	2a20      	cmp	r2, #32
 8002808:	d005      	beq.n	8002816 <__aeabi_dsub+0x58a>
 800280a:	2540      	movs	r5, #64	; 0x40
 800280c:	4664      	mov	r4, ip
 800280e:	1aaa      	subs	r2, r5, r2
 8002810:	4094      	lsls	r4, r2
 8002812:	4323      	orrs	r3, r4
 8002814:	469a      	mov	sl, r3
 8002816:	4654      	mov	r4, sl
 8002818:	1e63      	subs	r3, r4, #1
 800281a:	419c      	sbcs	r4, r3
 800281c:	4643      	mov	r3, r8
 800281e:	4323      	orrs	r3, r4
 8002820:	e773      	b.n	800270a <__aeabi_dsub+0x47e>
 8002822:	4662      	mov	r2, ip
 8002824:	431a      	orrs	r2, r3
 8002826:	d023      	beq.n	8002870 <__aeabi_dsub+0x5e4>
 8002828:	000a      	movs	r2, r1
 800282a:	433a      	orrs	r2, r7
 800282c:	d000      	beq.n	8002830 <__aeabi_dsub+0x5a4>
 800282e:	e0a0      	b.n	8002972 <__aeabi_dsub+0x6e6>
 8002830:	4662      	mov	r2, ip
 8002832:	08db      	lsrs	r3, r3, #3
 8002834:	0752      	lsls	r2, r2, #29
 8002836:	4313      	orrs	r3, r2
 8002838:	4662      	mov	r2, ip
 800283a:	08d4      	lsrs	r4, r2, #3
 800283c:	e6b0      	b.n	80025a0 <__aeabi_dsub+0x314>
 800283e:	000b      	movs	r3, r1
 8002840:	433b      	orrs	r3, r7
 8002842:	d100      	bne.n	8002846 <__aeabi_dsub+0x5ba>
 8002844:	e728      	b.n	8002698 <__aeabi_dsub+0x40c>
 8002846:	08ff      	lsrs	r7, r7, #3
 8002848:	074b      	lsls	r3, r1, #29
 800284a:	465d      	mov	r5, fp
 800284c:	433b      	orrs	r3, r7
 800284e:	08cc      	lsrs	r4, r1, #3
 8002850:	e697      	b.n	8002582 <__aeabi_dsub+0x2f6>
 8002852:	2302      	movs	r3, #2
 8002854:	4698      	mov	r8, r3
 8002856:	e736      	b.n	80026c6 <__aeabi_dsub+0x43a>
 8002858:	1afc      	subs	r4, r7, r3
 800285a:	42a7      	cmp	r7, r4
 800285c:	41bf      	sbcs	r7, r7
 800285e:	4663      	mov	r3, ip
 8002860:	427f      	negs	r7, r7
 8002862:	1ac9      	subs	r1, r1, r3
 8002864:	1bcb      	subs	r3, r1, r7
 8002866:	4699      	mov	r9, r3
 8002868:	2301      	movs	r3, #1
 800286a:	465d      	mov	r5, fp
 800286c:	4698      	mov	r8, r3
 800286e:	e55e      	b.n	800232e <__aeabi_dsub+0xa2>
 8002870:	074b      	lsls	r3, r1, #29
 8002872:	08ff      	lsrs	r7, r7, #3
 8002874:	433b      	orrs	r3, r7
 8002876:	08cc      	lsrs	r4, r1, #3
 8002878:	e692      	b.n	80025a0 <__aeabi_dsub+0x314>
 800287a:	1bdc      	subs	r4, r3, r7
 800287c:	4660      	mov	r0, ip
 800287e:	42a3      	cmp	r3, r4
 8002880:	41b6      	sbcs	r6, r6
 8002882:	1a40      	subs	r0, r0, r1
 8002884:	4276      	negs	r6, r6
 8002886:	1b80      	subs	r0, r0, r6
 8002888:	4681      	mov	r9, r0
 800288a:	0200      	lsls	r0, r0, #8
 800288c:	d560      	bpl.n	8002950 <__aeabi_dsub+0x6c4>
 800288e:	1afc      	subs	r4, r7, r3
 8002890:	42a7      	cmp	r7, r4
 8002892:	41bf      	sbcs	r7, r7
 8002894:	4663      	mov	r3, ip
 8002896:	427f      	negs	r7, r7
 8002898:	1ac9      	subs	r1, r1, r3
 800289a:	1bcb      	subs	r3, r1, r7
 800289c:	4699      	mov	r9, r3
 800289e:	465d      	mov	r5, fp
 80028a0:	e576      	b.n	8002390 <__aeabi_dsub+0x104>
 80028a2:	08ff      	lsrs	r7, r7, #3
 80028a4:	074b      	lsls	r3, r1, #29
 80028a6:	433b      	orrs	r3, r7
 80028a8:	08cc      	lsrs	r4, r1, #3
 80028aa:	e667      	b.n	800257c <__aeabi_dsub+0x2f0>
 80028ac:	000a      	movs	r2, r1
 80028ae:	08db      	lsrs	r3, r3, #3
 80028b0:	433a      	orrs	r2, r7
 80028b2:	d100      	bne.n	80028b6 <__aeabi_dsub+0x62a>
 80028b4:	e66f      	b.n	8002596 <__aeabi_dsub+0x30a>
 80028b6:	4662      	mov	r2, ip
 80028b8:	0752      	lsls	r2, r2, #29
 80028ba:	4313      	orrs	r3, r2
 80028bc:	4662      	mov	r2, ip
 80028be:	08d4      	lsrs	r4, r2, #3
 80028c0:	2280      	movs	r2, #128	; 0x80
 80028c2:	0312      	lsls	r2, r2, #12
 80028c4:	4214      	tst	r4, r2
 80028c6:	d007      	beq.n	80028d8 <__aeabi_dsub+0x64c>
 80028c8:	08c8      	lsrs	r0, r1, #3
 80028ca:	4210      	tst	r0, r2
 80028cc:	d104      	bne.n	80028d8 <__aeabi_dsub+0x64c>
 80028ce:	465d      	mov	r5, fp
 80028d0:	0004      	movs	r4, r0
 80028d2:	08fb      	lsrs	r3, r7, #3
 80028d4:	0749      	lsls	r1, r1, #29
 80028d6:	430b      	orrs	r3, r1
 80028d8:	0f5a      	lsrs	r2, r3, #29
 80028da:	00db      	lsls	r3, r3, #3
 80028dc:	08db      	lsrs	r3, r3, #3
 80028de:	0752      	lsls	r2, r2, #29
 80028e0:	4313      	orrs	r3, r2
 80028e2:	e65d      	b.n	80025a0 <__aeabi_dsub+0x314>
 80028e4:	074b      	lsls	r3, r1, #29
 80028e6:	08ff      	lsrs	r7, r7, #3
 80028e8:	433b      	orrs	r3, r7
 80028ea:	08cc      	lsrs	r4, r1, #3
 80028ec:	e649      	b.n	8002582 <__aeabi_dsub+0x2f6>
 80028ee:	19dc      	adds	r4, r3, r7
 80028f0:	429c      	cmp	r4, r3
 80028f2:	419b      	sbcs	r3, r3
 80028f4:	4461      	add	r1, ip
 80028f6:	4689      	mov	r9, r1
 80028f8:	425b      	negs	r3, r3
 80028fa:	4499      	add	r9, r3
 80028fc:	464b      	mov	r3, r9
 80028fe:	021b      	lsls	r3, r3, #8
 8002900:	d400      	bmi.n	8002904 <__aeabi_dsub+0x678>
 8002902:	e631      	b.n	8002568 <__aeabi_dsub+0x2dc>
 8002904:	464a      	mov	r2, r9
 8002906:	4b17      	ldr	r3, [pc, #92]	; (8002964 <__aeabi_dsub+0x6d8>)
 8002908:	401a      	ands	r2, r3
 800290a:	2301      	movs	r3, #1
 800290c:	4691      	mov	r9, r2
 800290e:	4698      	mov	r8, r3
 8002910:	e62a      	b.n	8002568 <__aeabi_dsub+0x2dc>
 8002912:	0016      	movs	r6, r2
 8002914:	4664      	mov	r4, ip
 8002916:	3e20      	subs	r6, #32
 8002918:	40f4      	lsrs	r4, r6
 800291a:	46a0      	mov	r8, r4
 800291c:	2a20      	cmp	r2, #32
 800291e:	d005      	beq.n	800292c <__aeabi_dsub+0x6a0>
 8002920:	2640      	movs	r6, #64	; 0x40
 8002922:	4664      	mov	r4, ip
 8002924:	1ab2      	subs	r2, r6, r2
 8002926:	4094      	lsls	r4, r2
 8002928:	4323      	orrs	r3, r4
 800292a:	469a      	mov	sl, r3
 800292c:	4654      	mov	r4, sl
 800292e:	1e63      	subs	r3, r4, #1
 8002930:	419c      	sbcs	r4, r3
 8002932:	4643      	mov	r3, r8
 8002934:	431c      	orrs	r4, r3
 8002936:	e5db      	b.n	80024f0 <__aeabi_dsub+0x264>
 8002938:	0002      	movs	r2, r0
 800293a:	2400      	movs	r4, #0
 800293c:	2300      	movs	r3, #0
 800293e:	e548      	b.n	80023d2 <__aeabi_dsub+0x146>
 8002940:	19dc      	adds	r4, r3, r7
 8002942:	42bc      	cmp	r4, r7
 8002944:	41bf      	sbcs	r7, r7
 8002946:	4461      	add	r1, ip
 8002948:	4689      	mov	r9, r1
 800294a:	427f      	negs	r7, r7
 800294c:	44b9      	add	r9, r7
 800294e:	e738      	b.n	80027c2 <__aeabi_dsub+0x536>
 8002950:	464b      	mov	r3, r9
 8002952:	4323      	orrs	r3, r4
 8002954:	d100      	bne.n	8002958 <__aeabi_dsub+0x6cc>
 8002956:	e69f      	b.n	8002698 <__aeabi_dsub+0x40c>
 8002958:	e606      	b.n	8002568 <__aeabi_dsub+0x2dc>
 800295a:	46c0      	nop			; (mov r8, r8)
 800295c:	000007fe 	.word	0x000007fe
 8002960:	000007ff 	.word	0x000007ff
 8002964:	ff7fffff 	.word	0xff7fffff
 8002968:	08ff      	lsrs	r7, r7, #3
 800296a:	074b      	lsls	r3, r1, #29
 800296c:	433b      	orrs	r3, r7
 800296e:	08cc      	lsrs	r4, r1, #3
 8002970:	e616      	b.n	80025a0 <__aeabi_dsub+0x314>
 8002972:	4662      	mov	r2, ip
 8002974:	08db      	lsrs	r3, r3, #3
 8002976:	0752      	lsls	r2, r2, #29
 8002978:	4313      	orrs	r3, r2
 800297a:	4662      	mov	r2, ip
 800297c:	08d4      	lsrs	r4, r2, #3
 800297e:	2280      	movs	r2, #128	; 0x80
 8002980:	0312      	lsls	r2, r2, #12
 8002982:	4214      	tst	r4, r2
 8002984:	d007      	beq.n	8002996 <__aeabi_dsub+0x70a>
 8002986:	08c8      	lsrs	r0, r1, #3
 8002988:	4210      	tst	r0, r2
 800298a:	d104      	bne.n	8002996 <__aeabi_dsub+0x70a>
 800298c:	465d      	mov	r5, fp
 800298e:	0004      	movs	r4, r0
 8002990:	08fb      	lsrs	r3, r7, #3
 8002992:	0749      	lsls	r1, r1, #29
 8002994:	430b      	orrs	r3, r1
 8002996:	0f5a      	lsrs	r2, r3, #29
 8002998:	00db      	lsls	r3, r3, #3
 800299a:	0752      	lsls	r2, r2, #29
 800299c:	08db      	lsrs	r3, r3, #3
 800299e:	4313      	orrs	r3, r2
 80029a0:	e5fe      	b.n	80025a0 <__aeabi_dsub+0x314>
 80029a2:	2300      	movs	r3, #0
 80029a4:	4a01      	ldr	r2, [pc, #4]	; (80029ac <__aeabi_dsub+0x720>)
 80029a6:	001c      	movs	r4, r3
 80029a8:	e513      	b.n	80023d2 <__aeabi_dsub+0x146>
 80029aa:	46c0      	nop			; (mov r8, r8)
 80029ac:	000007ff 	.word	0x000007ff

080029b0 <__aeabi_dcmpun>:
 80029b0:	b570      	push	{r4, r5, r6, lr}
 80029b2:	0005      	movs	r5, r0
 80029b4:	480c      	ldr	r0, [pc, #48]	; (80029e8 <__aeabi_dcmpun+0x38>)
 80029b6:	031c      	lsls	r4, r3, #12
 80029b8:	0016      	movs	r6, r2
 80029ba:	005b      	lsls	r3, r3, #1
 80029bc:	030a      	lsls	r2, r1, #12
 80029be:	0049      	lsls	r1, r1, #1
 80029c0:	0b12      	lsrs	r2, r2, #12
 80029c2:	0d49      	lsrs	r1, r1, #21
 80029c4:	0b24      	lsrs	r4, r4, #12
 80029c6:	0d5b      	lsrs	r3, r3, #21
 80029c8:	4281      	cmp	r1, r0
 80029ca:	d008      	beq.n	80029de <__aeabi_dcmpun+0x2e>
 80029cc:	4a06      	ldr	r2, [pc, #24]	; (80029e8 <__aeabi_dcmpun+0x38>)
 80029ce:	2000      	movs	r0, #0
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d103      	bne.n	80029dc <__aeabi_dcmpun+0x2c>
 80029d4:	0020      	movs	r0, r4
 80029d6:	4330      	orrs	r0, r6
 80029d8:	1e43      	subs	r3, r0, #1
 80029da:	4198      	sbcs	r0, r3
 80029dc:	bd70      	pop	{r4, r5, r6, pc}
 80029de:	2001      	movs	r0, #1
 80029e0:	432a      	orrs	r2, r5
 80029e2:	d1fb      	bne.n	80029dc <__aeabi_dcmpun+0x2c>
 80029e4:	e7f2      	b.n	80029cc <__aeabi_dcmpun+0x1c>
 80029e6:	46c0      	nop			; (mov r8, r8)
 80029e8:	000007ff 	.word	0x000007ff

080029ec <__aeabi_d2iz>:
 80029ec:	000a      	movs	r2, r1
 80029ee:	b530      	push	{r4, r5, lr}
 80029f0:	4c13      	ldr	r4, [pc, #76]	; (8002a40 <__aeabi_d2iz+0x54>)
 80029f2:	0053      	lsls	r3, r2, #1
 80029f4:	0309      	lsls	r1, r1, #12
 80029f6:	0005      	movs	r5, r0
 80029f8:	0b09      	lsrs	r1, r1, #12
 80029fa:	2000      	movs	r0, #0
 80029fc:	0d5b      	lsrs	r3, r3, #21
 80029fe:	0fd2      	lsrs	r2, r2, #31
 8002a00:	42a3      	cmp	r3, r4
 8002a02:	dd04      	ble.n	8002a0e <__aeabi_d2iz+0x22>
 8002a04:	480f      	ldr	r0, [pc, #60]	; (8002a44 <__aeabi_d2iz+0x58>)
 8002a06:	4283      	cmp	r3, r0
 8002a08:	dd02      	ble.n	8002a10 <__aeabi_d2iz+0x24>
 8002a0a:	4b0f      	ldr	r3, [pc, #60]	; (8002a48 <__aeabi_d2iz+0x5c>)
 8002a0c:	18d0      	adds	r0, r2, r3
 8002a0e:	bd30      	pop	{r4, r5, pc}
 8002a10:	2080      	movs	r0, #128	; 0x80
 8002a12:	0340      	lsls	r0, r0, #13
 8002a14:	4301      	orrs	r1, r0
 8002a16:	480d      	ldr	r0, [pc, #52]	; (8002a4c <__aeabi_d2iz+0x60>)
 8002a18:	1ac0      	subs	r0, r0, r3
 8002a1a:	281f      	cmp	r0, #31
 8002a1c:	dd08      	ble.n	8002a30 <__aeabi_d2iz+0x44>
 8002a1e:	480c      	ldr	r0, [pc, #48]	; (8002a50 <__aeabi_d2iz+0x64>)
 8002a20:	1ac3      	subs	r3, r0, r3
 8002a22:	40d9      	lsrs	r1, r3
 8002a24:	000b      	movs	r3, r1
 8002a26:	4258      	negs	r0, r3
 8002a28:	2a00      	cmp	r2, #0
 8002a2a:	d1f0      	bne.n	8002a0e <__aeabi_d2iz+0x22>
 8002a2c:	0018      	movs	r0, r3
 8002a2e:	e7ee      	b.n	8002a0e <__aeabi_d2iz+0x22>
 8002a30:	4c08      	ldr	r4, [pc, #32]	; (8002a54 <__aeabi_d2iz+0x68>)
 8002a32:	40c5      	lsrs	r5, r0
 8002a34:	46a4      	mov	ip, r4
 8002a36:	4463      	add	r3, ip
 8002a38:	4099      	lsls	r1, r3
 8002a3a:	000b      	movs	r3, r1
 8002a3c:	432b      	orrs	r3, r5
 8002a3e:	e7f2      	b.n	8002a26 <__aeabi_d2iz+0x3a>
 8002a40:	000003fe 	.word	0x000003fe
 8002a44:	0000041d 	.word	0x0000041d
 8002a48:	7fffffff 	.word	0x7fffffff
 8002a4c:	00000433 	.word	0x00000433
 8002a50:	00000413 	.word	0x00000413
 8002a54:	fffffbed 	.word	0xfffffbed

08002a58 <__aeabi_i2d>:
 8002a58:	b570      	push	{r4, r5, r6, lr}
 8002a5a:	2800      	cmp	r0, #0
 8002a5c:	d016      	beq.n	8002a8c <__aeabi_i2d+0x34>
 8002a5e:	17c3      	asrs	r3, r0, #31
 8002a60:	18c5      	adds	r5, r0, r3
 8002a62:	405d      	eors	r5, r3
 8002a64:	0fc4      	lsrs	r4, r0, #31
 8002a66:	0028      	movs	r0, r5
 8002a68:	f000 f91c 	bl	8002ca4 <__clzsi2>
 8002a6c:	4a11      	ldr	r2, [pc, #68]	; (8002ab4 <__aeabi_i2d+0x5c>)
 8002a6e:	1a12      	subs	r2, r2, r0
 8002a70:	280a      	cmp	r0, #10
 8002a72:	dc16      	bgt.n	8002aa2 <__aeabi_i2d+0x4a>
 8002a74:	0003      	movs	r3, r0
 8002a76:	002e      	movs	r6, r5
 8002a78:	3315      	adds	r3, #21
 8002a7a:	409e      	lsls	r6, r3
 8002a7c:	230b      	movs	r3, #11
 8002a7e:	1a18      	subs	r0, r3, r0
 8002a80:	40c5      	lsrs	r5, r0
 8002a82:	0552      	lsls	r2, r2, #21
 8002a84:	032d      	lsls	r5, r5, #12
 8002a86:	0b2d      	lsrs	r5, r5, #12
 8002a88:	0d53      	lsrs	r3, r2, #21
 8002a8a:	e003      	b.n	8002a94 <__aeabi_i2d+0x3c>
 8002a8c:	2400      	movs	r4, #0
 8002a8e:	2300      	movs	r3, #0
 8002a90:	2500      	movs	r5, #0
 8002a92:	2600      	movs	r6, #0
 8002a94:	051b      	lsls	r3, r3, #20
 8002a96:	432b      	orrs	r3, r5
 8002a98:	07e4      	lsls	r4, r4, #31
 8002a9a:	4323      	orrs	r3, r4
 8002a9c:	0030      	movs	r0, r6
 8002a9e:	0019      	movs	r1, r3
 8002aa0:	bd70      	pop	{r4, r5, r6, pc}
 8002aa2:	380b      	subs	r0, #11
 8002aa4:	4085      	lsls	r5, r0
 8002aa6:	0552      	lsls	r2, r2, #21
 8002aa8:	032d      	lsls	r5, r5, #12
 8002aaa:	2600      	movs	r6, #0
 8002aac:	0b2d      	lsrs	r5, r5, #12
 8002aae:	0d53      	lsrs	r3, r2, #21
 8002ab0:	e7f0      	b.n	8002a94 <__aeabi_i2d+0x3c>
 8002ab2:	46c0      	nop			; (mov r8, r8)
 8002ab4:	0000041e 	.word	0x0000041e

08002ab8 <__aeabi_ui2d>:
 8002ab8:	b510      	push	{r4, lr}
 8002aba:	1e04      	subs	r4, r0, #0
 8002abc:	d010      	beq.n	8002ae0 <__aeabi_ui2d+0x28>
 8002abe:	f000 f8f1 	bl	8002ca4 <__clzsi2>
 8002ac2:	4b0f      	ldr	r3, [pc, #60]	; (8002b00 <__aeabi_ui2d+0x48>)
 8002ac4:	1a1b      	subs	r3, r3, r0
 8002ac6:	280a      	cmp	r0, #10
 8002ac8:	dc11      	bgt.n	8002aee <__aeabi_ui2d+0x36>
 8002aca:	220b      	movs	r2, #11
 8002acc:	0021      	movs	r1, r4
 8002ace:	1a12      	subs	r2, r2, r0
 8002ad0:	40d1      	lsrs	r1, r2
 8002ad2:	3015      	adds	r0, #21
 8002ad4:	030a      	lsls	r2, r1, #12
 8002ad6:	055b      	lsls	r3, r3, #21
 8002ad8:	4084      	lsls	r4, r0
 8002ada:	0b12      	lsrs	r2, r2, #12
 8002adc:	0d5b      	lsrs	r3, r3, #21
 8002ade:	e001      	b.n	8002ae4 <__aeabi_ui2d+0x2c>
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	051b      	lsls	r3, r3, #20
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	0020      	movs	r0, r4
 8002aea:	0019      	movs	r1, r3
 8002aec:	bd10      	pop	{r4, pc}
 8002aee:	0022      	movs	r2, r4
 8002af0:	380b      	subs	r0, #11
 8002af2:	4082      	lsls	r2, r0
 8002af4:	055b      	lsls	r3, r3, #21
 8002af6:	0312      	lsls	r2, r2, #12
 8002af8:	2400      	movs	r4, #0
 8002afa:	0b12      	lsrs	r2, r2, #12
 8002afc:	0d5b      	lsrs	r3, r3, #21
 8002afe:	e7f1      	b.n	8002ae4 <__aeabi_ui2d+0x2c>
 8002b00:	0000041e 	.word	0x0000041e

08002b04 <__aeabi_f2d>:
 8002b04:	b570      	push	{r4, r5, r6, lr}
 8002b06:	0043      	lsls	r3, r0, #1
 8002b08:	0246      	lsls	r6, r0, #9
 8002b0a:	0fc4      	lsrs	r4, r0, #31
 8002b0c:	20fe      	movs	r0, #254	; 0xfe
 8002b0e:	0e1b      	lsrs	r3, r3, #24
 8002b10:	1c59      	adds	r1, r3, #1
 8002b12:	0a75      	lsrs	r5, r6, #9
 8002b14:	4208      	tst	r0, r1
 8002b16:	d00c      	beq.n	8002b32 <__aeabi_f2d+0x2e>
 8002b18:	22e0      	movs	r2, #224	; 0xe0
 8002b1a:	0092      	lsls	r2, r2, #2
 8002b1c:	4694      	mov	ip, r2
 8002b1e:	076d      	lsls	r5, r5, #29
 8002b20:	0b36      	lsrs	r6, r6, #12
 8002b22:	4463      	add	r3, ip
 8002b24:	051b      	lsls	r3, r3, #20
 8002b26:	4333      	orrs	r3, r6
 8002b28:	07e4      	lsls	r4, r4, #31
 8002b2a:	4323      	orrs	r3, r4
 8002b2c:	0028      	movs	r0, r5
 8002b2e:	0019      	movs	r1, r3
 8002b30:	bd70      	pop	{r4, r5, r6, pc}
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d114      	bne.n	8002b60 <__aeabi_f2d+0x5c>
 8002b36:	2d00      	cmp	r5, #0
 8002b38:	d01b      	beq.n	8002b72 <__aeabi_f2d+0x6e>
 8002b3a:	0028      	movs	r0, r5
 8002b3c:	f000 f8b2 	bl	8002ca4 <__clzsi2>
 8002b40:	280a      	cmp	r0, #10
 8002b42:	dc1c      	bgt.n	8002b7e <__aeabi_f2d+0x7a>
 8002b44:	230b      	movs	r3, #11
 8002b46:	002e      	movs	r6, r5
 8002b48:	1a1b      	subs	r3, r3, r0
 8002b4a:	40de      	lsrs	r6, r3
 8002b4c:	0003      	movs	r3, r0
 8002b4e:	3315      	adds	r3, #21
 8002b50:	409d      	lsls	r5, r3
 8002b52:	4a0e      	ldr	r2, [pc, #56]	; (8002b8c <__aeabi_f2d+0x88>)
 8002b54:	0336      	lsls	r6, r6, #12
 8002b56:	1a12      	subs	r2, r2, r0
 8002b58:	0552      	lsls	r2, r2, #21
 8002b5a:	0b36      	lsrs	r6, r6, #12
 8002b5c:	0d53      	lsrs	r3, r2, #21
 8002b5e:	e7e1      	b.n	8002b24 <__aeabi_f2d+0x20>
 8002b60:	2d00      	cmp	r5, #0
 8002b62:	d009      	beq.n	8002b78 <__aeabi_f2d+0x74>
 8002b64:	2280      	movs	r2, #128	; 0x80
 8002b66:	0b36      	lsrs	r6, r6, #12
 8002b68:	0312      	lsls	r2, r2, #12
 8002b6a:	4b09      	ldr	r3, [pc, #36]	; (8002b90 <__aeabi_f2d+0x8c>)
 8002b6c:	076d      	lsls	r5, r5, #29
 8002b6e:	4316      	orrs	r6, r2
 8002b70:	e7d8      	b.n	8002b24 <__aeabi_f2d+0x20>
 8002b72:	2300      	movs	r3, #0
 8002b74:	2600      	movs	r6, #0
 8002b76:	e7d5      	b.n	8002b24 <__aeabi_f2d+0x20>
 8002b78:	2600      	movs	r6, #0
 8002b7a:	4b05      	ldr	r3, [pc, #20]	; (8002b90 <__aeabi_f2d+0x8c>)
 8002b7c:	e7d2      	b.n	8002b24 <__aeabi_f2d+0x20>
 8002b7e:	0003      	movs	r3, r0
 8002b80:	3b0b      	subs	r3, #11
 8002b82:	409d      	lsls	r5, r3
 8002b84:	002e      	movs	r6, r5
 8002b86:	2500      	movs	r5, #0
 8002b88:	e7e3      	b.n	8002b52 <__aeabi_f2d+0x4e>
 8002b8a:	46c0      	nop			; (mov r8, r8)
 8002b8c:	00000389 	.word	0x00000389
 8002b90:	000007ff 	.word	0x000007ff

08002b94 <__aeabi_d2f>:
 8002b94:	0002      	movs	r2, r0
 8002b96:	004b      	lsls	r3, r1, #1
 8002b98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b9a:	0d5b      	lsrs	r3, r3, #21
 8002b9c:	030c      	lsls	r4, r1, #12
 8002b9e:	4e3d      	ldr	r6, [pc, #244]	; (8002c94 <__aeabi_d2f+0x100>)
 8002ba0:	0a64      	lsrs	r4, r4, #9
 8002ba2:	0f40      	lsrs	r0, r0, #29
 8002ba4:	1c5f      	adds	r7, r3, #1
 8002ba6:	0fc9      	lsrs	r1, r1, #31
 8002ba8:	4304      	orrs	r4, r0
 8002baa:	00d5      	lsls	r5, r2, #3
 8002bac:	4237      	tst	r7, r6
 8002bae:	d00a      	beq.n	8002bc6 <__aeabi_d2f+0x32>
 8002bb0:	4839      	ldr	r0, [pc, #228]	; (8002c98 <__aeabi_d2f+0x104>)
 8002bb2:	181e      	adds	r6, r3, r0
 8002bb4:	2efe      	cmp	r6, #254	; 0xfe
 8002bb6:	dd16      	ble.n	8002be6 <__aeabi_d2f+0x52>
 8002bb8:	20ff      	movs	r0, #255	; 0xff
 8002bba:	2400      	movs	r4, #0
 8002bbc:	05c0      	lsls	r0, r0, #23
 8002bbe:	4320      	orrs	r0, r4
 8002bc0:	07c9      	lsls	r1, r1, #31
 8002bc2:	4308      	orrs	r0, r1
 8002bc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d106      	bne.n	8002bd8 <__aeabi_d2f+0x44>
 8002bca:	432c      	orrs	r4, r5
 8002bcc:	d026      	beq.n	8002c1c <__aeabi_d2f+0x88>
 8002bce:	2205      	movs	r2, #5
 8002bd0:	0192      	lsls	r2, r2, #6
 8002bd2:	0a54      	lsrs	r4, r2, #9
 8002bd4:	b2d8      	uxtb	r0, r3
 8002bd6:	e7f1      	b.n	8002bbc <__aeabi_d2f+0x28>
 8002bd8:	4325      	orrs	r5, r4
 8002bda:	d0ed      	beq.n	8002bb8 <__aeabi_d2f+0x24>
 8002bdc:	2080      	movs	r0, #128	; 0x80
 8002bde:	03c0      	lsls	r0, r0, #15
 8002be0:	4304      	orrs	r4, r0
 8002be2:	20ff      	movs	r0, #255	; 0xff
 8002be4:	e7ea      	b.n	8002bbc <__aeabi_d2f+0x28>
 8002be6:	2e00      	cmp	r6, #0
 8002be8:	dd1b      	ble.n	8002c22 <__aeabi_d2f+0x8e>
 8002bea:	0192      	lsls	r2, r2, #6
 8002bec:	1e53      	subs	r3, r2, #1
 8002bee:	419a      	sbcs	r2, r3
 8002bf0:	00e4      	lsls	r4, r4, #3
 8002bf2:	0f6d      	lsrs	r5, r5, #29
 8002bf4:	4322      	orrs	r2, r4
 8002bf6:	432a      	orrs	r2, r5
 8002bf8:	0753      	lsls	r3, r2, #29
 8002bfa:	d048      	beq.n	8002c8e <__aeabi_d2f+0xfa>
 8002bfc:	230f      	movs	r3, #15
 8002bfe:	4013      	ands	r3, r2
 8002c00:	2b04      	cmp	r3, #4
 8002c02:	d000      	beq.n	8002c06 <__aeabi_d2f+0x72>
 8002c04:	3204      	adds	r2, #4
 8002c06:	2380      	movs	r3, #128	; 0x80
 8002c08:	04db      	lsls	r3, r3, #19
 8002c0a:	4013      	ands	r3, r2
 8002c0c:	d03f      	beq.n	8002c8e <__aeabi_d2f+0xfa>
 8002c0e:	1c70      	adds	r0, r6, #1
 8002c10:	2efe      	cmp	r6, #254	; 0xfe
 8002c12:	d0d1      	beq.n	8002bb8 <__aeabi_d2f+0x24>
 8002c14:	0192      	lsls	r2, r2, #6
 8002c16:	0a54      	lsrs	r4, r2, #9
 8002c18:	b2c0      	uxtb	r0, r0
 8002c1a:	e7cf      	b.n	8002bbc <__aeabi_d2f+0x28>
 8002c1c:	2000      	movs	r0, #0
 8002c1e:	2400      	movs	r4, #0
 8002c20:	e7cc      	b.n	8002bbc <__aeabi_d2f+0x28>
 8002c22:	0032      	movs	r2, r6
 8002c24:	3217      	adds	r2, #23
 8002c26:	db22      	blt.n	8002c6e <__aeabi_d2f+0xda>
 8002c28:	2080      	movs	r0, #128	; 0x80
 8002c2a:	0400      	lsls	r0, r0, #16
 8002c2c:	4320      	orrs	r0, r4
 8002c2e:	241e      	movs	r4, #30
 8002c30:	1ba4      	subs	r4, r4, r6
 8002c32:	2c1f      	cmp	r4, #31
 8002c34:	dd1d      	ble.n	8002c72 <__aeabi_d2f+0xde>
 8002c36:	2202      	movs	r2, #2
 8002c38:	4252      	negs	r2, r2
 8002c3a:	1b96      	subs	r6, r2, r6
 8002c3c:	0002      	movs	r2, r0
 8002c3e:	40f2      	lsrs	r2, r6
 8002c40:	0016      	movs	r6, r2
 8002c42:	2c20      	cmp	r4, #32
 8002c44:	d004      	beq.n	8002c50 <__aeabi_d2f+0xbc>
 8002c46:	4a15      	ldr	r2, [pc, #84]	; (8002c9c <__aeabi_d2f+0x108>)
 8002c48:	4694      	mov	ip, r2
 8002c4a:	4463      	add	r3, ip
 8002c4c:	4098      	lsls	r0, r3
 8002c4e:	4305      	orrs	r5, r0
 8002c50:	002a      	movs	r2, r5
 8002c52:	1e53      	subs	r3, r2, #1
 8002c54:	419a      	sbcs	r2, r3
 8002c56:	4332      	orrs	r2, r6
 8002c58:	2600      	movs	r6, #0
 8002c5a:	0753      	lsls	r3, r2, #29
 8002c5c:	d1ce      	bne.n	8002bfc <__aeabi_d2f+0x68>
 8002c5e:	2480      	movs	r4, #128	; 0x80
 8002c60:	0013      	movs	r3, r2
 8002c62:	04e4      	lsls	r4, r4, #19
 8002c64:	2001      	movs	r0, #1
 8002c66:	4023      	ands	r3, r4
 8002c68:	4222      	tst	r2, r4
 8002c6a:	d1d3      	bne.n	8002c14 <__aeabi_d2f+0x80>
 8002c6c:	e7b0      	b.n	8002bd0 <__aeabi_d2f+0x3c>
 8002c6e:	2300      	movs	r3, #0
 8002c70:	e7ad      	b.n	8002bce <__aeabi_d2f+0x3a>
 8002c72:	4a0b      	ldr	r2, [pc, #44]	; (8002ca0 <__aeabi_d2f+0x10c>)
 8002c74:	4694      	mov	ip, r2
 8002c76:	002a      	movs	r2, r5
 8002c78:	40e2      	lsrs	r2, r4
 8002c7a:	0014      	movs	r4, r2
 8002c7c:	002a      	movs	r2, r5
 8002c7e:	4463      	add	r3, ip
 8002c80:	409a      	lsls	r2, r3
 8002c82:	4098      	lsls	r0, r3
 8002c84:	1e55      	subs	r5, r2, #1
 8002c86:	41aa      	sbcs	r2, r5
 8002c88:	4302      	orrs	r2, r0
 8002c8a:	4322      	orrs	r2, r4
 8002c8c:	e7e4      	b.n	8002c58 <__aeabi_d2f+0xc4>
 8002c8e:	0033      	movs	r3, r6
 8002c90:	e79e      	b.n	8002bd0 <__aeabi_d2f+0x3c>
 8002c92:	46c0      	nop			; (mov r8, r8)
 8002c94:	000007fe 	.word	0x000007fe
 8002c98:	fffffc80 	.word	0xfffffc80
 8002c9c:	fffffca2 	.word	0xfffffca2
 8002ca0:	fffffc82 	.word	0xfffffc82

08002ca4 <__clzsi2>:
 8002ca4:	211c      	movs	r1, #28
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	041b      	lsls	r3, r3, #16
 8002caa:	4298      	cmp	r0, r3
 8002cac:	d301      	bcc.n	8002cb2 <__clzsi2+0xe>
 8002cae:	0c00      	lsrs	r0, r0, #16
 8002cb0:	3910      	subs	r1, #16
 8002cb2:	0a1b      	lsrs	r3, r3, #8
 8002cb4:	4298      	cmp	r0, r3
 8002cb6:	d301      	bcc.n	8002cbc <__clzsi2+0x18>
 8002cb8:	0a00      	lsrs	r0, r0, #8
 8002cba:	3908      	subs	r1, #8
 8002cbc:	091b      	lsrs	r3, r3, #4
 8002cbe:	4298      	cmp	r0, r3
 8002cc0:	d301      	bcc.n	8002cc6 <__clzsi2+0x22>
 8002cc2:	0900      	lsrs	r0, r0, #4
 8002cc4:	3904      	subs	r1, #4
 8002cc6:	a202      	add	r2, pc, #8	; (adr r2, 8002cd0 <__clzsi2+0x2c>)
 8002cc8:	5c10      	ldrb	r0, [r2, r0]
 8002cca:	1840      	adds	r0, r0, r1
 8002ccc:	4770      	bx	lr
 8002cce:	46c0      	nop			; (mov r8, r8)
 8002cd0:	02020304 	.word	0x02020304
 8002cd4:	01010101 	.word	0x01010101
	...

08002ce0 <convert_DDmm_to_DDD>:
static void MX_USART2_UART_Init(void);
static void MX_DMA_Init(void);
static void MX_USART1_UART_Init(void);
/* USER CODE BEGIN PFP */

float convert_DDmm_to_DDD(float DDmm, char *sign){
 8002ce0:	b590      	push	{r4, r7, lr}
 8002ce2:	b087      	sub	sp, #28
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
 8002ce8:	6039      	str	r1, [r7, #0]

    //convert to DDD format
    int DD = ((int)DDmm)/100;
 8002cea:	6878      	ldr	r0, [r7, #4]
 8002cec:	f7fe f8b6 	bl	8000e5c <__aeabi_f2iz>
 8002cf0:	0003      	movs	r3, r0
 8002cf2:	2164      	movs	r1, #100	; 0x64
 8002cf4:	0018      	movs	r0, r3
 8002cf6:	f7fd fab3 	bl	8000260 <__divsi3>
 8002cfa:	0003      	movs	r3, r0
 8002cfc:	613b      	str	r3, [r7, #16]
    float mm = DDmm - DD*100;
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	2264      	movs	r2, #100	; 0x64
 8002d02:	4353      	muls	r3, r2
 8002d04:	0018      	movs	r0, r3
 8002d06:	f7fe f8c9 	bl	8000e9c <__aeabi_i2f>
 8002d0a:	1c03      	adds	r3, r0, #0
 8002d0c:	1c19      	adds	r1, r3, #0
 8002d0e:	6878      	ldr	r0, [r7, #4]
 8002d10:	f7fd fef6 	bl	8000b00 <__aeabi_fsub>
 8002d14:	1c03      	adds	r3, r0, #0
 8002d16:	60fb      	str	r3, [r7, #12]
    float DDD = DD + mm/60;
 8002d18:	6938      	ldr	r0, [r7, #16]
 8002d1a:	f7fe f8bf 	bl	8000e9c <__aeabi_i2f>
 8002d1e:	1c04      	adds	r4, r0, #0
 8002d20:	4912      	ldr	r1, [pc, #72]	; (8002d6c <convert_DDmm_to_DDD+0x8c>)
 8002d22:	68f8      	ldr	r0, [r7, #12]
 8002d24:	f7fd fdd4 	bl	80008d0 <__aeabi_fdiv>
 8002d28:	1c03      	adds	r3, r0, #0
 8002d2a:	1c19      	adds	r1, r3, #0
 8002d2c:	1c20      	adds	r0, r4, #0
 8002d2e:	f7fd fc31 	bl	8000594 <__aeabi_fadd>
 8002d32:	1c03      	adds	r3, r0, #0
 8002d34:	617b      	str	r3, [r7, #20]

    //add negative sign if south or west
    if (strcmp(sign,"S") == 0 || strcmp(sign,"W") == 0){
 8002d36:	4a0e      	ldr	r2, [pc, #56]	; (8002d70 <convert_DDmm_to_DDD+0x90>)
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	0011      	movs	r1, r2
 8002d3c:	0018      	movs	r0, r3
 8002d3e:	f7fd f9df 	bl	8000100 <strcmp>
 8002d42:	1e03      	subs	r3, r0, #0
 8002d44:	d007      	beq.n	8002d56 <convert_DDmm_to_DDD+0x76>
 8002d46:	4a0b      	ldr	r2, [pc, #44]	; (8002d74 <convert_DDmm_to_DDD+0x94>)
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	0011      	movs	r1, r2
 8002d4c:	0018      	movs	r0, r3
 8002d4e:	f7fd f9d7 	bl	8000100 <strcmp>
 8002d52:	1e03      	subs	r3, r0, #0
 8002d54:	d104      	bne.n	8002d60 <convert_DDmm_to_DDD+0x80>
        DDD = -DDD;
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	2280      	movs	r2, #128	; 0x80
 8002d5a:	0612      	lsls	r2, r2, #24
 8002d5c:	4053      	eors	r3, r2
 8002d5e:	617b      	str	r3, [r7, #20]
    }

    return DDD;
 8002d60:	697b      	ldr	r3, [r7, #20]
}
 8002d62:	1c18      	adds	r0, r3, #0
 8002d64:	46bd      	mov	sp, r7
 8002d66:	b007      	add	sp, #28
 8002d68:	bd90      	pop	{r4, r7, pc}
 8002d6a:	46c0      	nop			; (mov r8, r8)
 8002d6c:	42700000 	.word	0x42700000
 8002d70:	0800b220 	.word	0x0800b220
 8002d74:	0800b224 	.word	0x0800b224

08002d78 <extract_location_from_nmea_raw_data>:

void extract_location_from_nmea_raw_data(char nmea_raw_data[], char *loc_str[]){
 8002d78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d7a:	b08b      	sub	sp, #44	; 0x2c
 8002d7c:	af02      	add	r7, sp, #8
 8002d7e:	6078      	str	r0, [r7, #4]
 8002d80:	6039      	str	r1, [r7, #0]

    const __uint8_t GLL_MSG_LEN = 47;
 8002d82:	241f      	movs	r4, #31
 8002d84:	193b      	adds	r3, r7, r4
 8002d86:	222f      	movs	r2, #47	; 0x2f
 8002d88:	701a      	strb	r2, [r3, #0]
    float latitude, longitude;
    char lat_sign, long_sign;
    char *start_GLL_msg;
    int len_GLL_msg;

    start_GLL_msg = strstr(nmea_raw_data, "GLL");
 8002d8a:	4a24      	ldr	r2, [pc, #144]	; (8002e1c <extract_location_from_nmea_raw_data+0xa4>)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	0011      	movs	r1, r2
 8002d90:	0018      	movs	r0, r3
 8002d92:	f003 ff9f 	bl	8006cd4 <strstr>
 8002d96:	0003      	movs	r3, r0
 8002d98:	61bb      	str	r3, [r7, #24]
    len_GLL_msg = strlen(start_GLL_msg);
 8002d9a:	69bb      	ldr	r3, [r7, #24]
 8002d9c:	0018      	movs	r0, r3
 8002d9e:	f7fd f9b9 	bl	8000114 <strlen>
 8002da2:	0003      	movs	r3, r0
 8002da4:	617b      	str	r3, [r7, #20]

    //message is not valid as does not have minimum length
    if (len_GLL_msg < GLL_MSG_LEN){
 8002da6:	193b      	adds	r3, r7, r4
 8002da8:	781b      	ldrb	r3, [r3, #0]
 8002daa:	697a      	ldr	r2, [r7, #20]
 8002dac:	429a      	cmp	r2, r3
 8002dae:	da03      	bge.n	8002db8 <extract_location_from_nmea_raw_data+0x40>
        *loc_str = "";
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	4a1b      	ldr	r2, [pc, #108]	; (8002e20 <extract_location_from_nmea_raw_data+0xa8>)
 8002db4:	601a      	str	r2, [r3, #0]
 8002db6:	e02e      	b.n	8002e16 <extract_location_from_nmea_raw_data+0x9e>
        return;
    }

    sscanf(start_GLL_msg, "GLL,%f,%c,%f,%c,",&latitude, &lat_sign, &longitude, &long_sign);
 8002db8:	250b      	movs	r5, #11
 8002dba:	197c      	adds	r4, r7, r5
 8002dbc:	2310      	movs	r3, #16
 8002dbe:	18fa      	adds	r2, r7, r3
 8002dc0:	4918      	ldr	r1, [pc, #96]	; (8002e24 <extract_location_from_nmea_raw_data+0xac>)
 8002dc2:	69b8      	ldr	r0, [r7, #24]
 8002dc4:	260a      	movs	r6, #10
 8002dc6:	19bb      	adds	r3, r7, r6
 8002dc8:	9301      	str	r3, [sp, #4]
 8002dca:	230c      	movs	r3, #12
 8002dcc:	18fb      	adds	r3, r7, r3
 8002dce:	9300      	str	r3, [sp, #0]
 8002dd0:	0023      	movs	r3, r4
 8002dd2:	f003 ff09 	bl	8006be8 <siscanf>

    sprintf(loc_str, "%f,%f\r\n",convert_DDmm_to_DDD(latitude,&lat_sign),convert_DDmm_to_DDD(longitude,&long_sign));
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	197a      	adds	r2, r7, r5
 8002dda:	0011      	movs	r1, r2
 8002ddc:	1c18      	adds	r0, r3, #0
 8002dde:	f7ff ff7f 	bl	8002ce0 <convert_DDmm_to_DDD>
 8002de2:	1c03      	adds	r3, r0, #0
 8002de4:	1c18      	adds	r0, r3, #0
 8002de6:	f7ff fe8d 	bl	8002b04 <__aeabi_f2d>
 8002dea:	0004      	movs	r4, r0
 8002dec:	000d      	movs	r5, r1
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	19ba      	adds	r2, r7, r6
 8002df2:	0011      	movs	r1, r2
 8002df4:	1c18      	adds	r0, r3, #0
 8002df6:	f7ff ff73 	bl	8002ce0 <convert_DDmm_to_DDD>
 8002dfa:	1c03      	adds	r3, r0, #0
 8002dfc:	1c18      	adds	r0, r3, #0
 8002dfe:	f7ff fe81 	bl	8002b04 <__aeabi_f2d>
 8002e02:	0002      	movs	r2, r0
 8002e04:	000b      	movs	r3, r1
 8002e06:	4908      	ldr	r1, [pc, #32]	; (8002e28 <extract_location_from_nmea_raw_data+0xb0>)
 8002e08:	6838      	ldr	r0, [r7, #0]
 8002e0a:	9200      	str	r2, [sp, #0]
 8002e0c:	9301      	str	r3, [sp, #4]
 8002e0e:	0022      	movs	r2, r4
 8002e10:	002b      	movs	r3, r5
 8002e12:	f003 fec9 	bl	8006ba8 <siprintf>

}
 8002e16:	46bd      	mov	sp, r7
 8002e18:	b009      	add	sp, #36	; 0x24
 8002e1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e1c:	0800b228 	.word	0x0800b228
 8002e20:	0800b22c 	.word	0x0800b22c
 8002e24:	0800b230 	.word	0x0800b230
 8002e28:	0800b244 	.word	0x0800b244

08002e2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b082      	sub	sp, #8
 8002e30:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002e32:	f000 fc03 	bl	800363c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002e36:	f000 f83d 	bl	8002eb4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002e3a:	f000 f93d 	bl	80030b8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002e3e:	f000 f8cf 	bl	8002fe0 <MX_USART2_UART_Init>
  MX_DMA_Init();
 8002e42:	f000 f91b 	bl	800307c <MX_DMA_Init>
  MX_USART1_UART_Init();
 8002e46:	f000 f87d 	bl	8002f44 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_DMA (&huart1, (uint8_t*)UART1_rxBuffer, 700);
 8002e4a:	23af      	movs	r3, #175	; 0xaf
 8002e4c:	009a      	lsls	r2, r3, #2
 8002e4e:	4914      	ldr	r1, [pc, #80]	; (8002ea0 <main+0x74>)
 8002e50:	4b14      	ldr	r3, [pc, #80]	; (8002ea4 <main+0x78>)
 8002e52:	0018      	movs	r0, r3
 8002e54:	f002 f8af 	bl	8004fb6 <HAL_UART_Receive_DMA>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	//copy buffer content into char array
	int i = 0;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	607b      	str	r3, [r7, #4]
    for (i=0;i<BUFF_SIZE;i++){
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	607b      	str	r3, [r7, #4]
 8002e60:	e00b      	b.n	8002e7a <main+0x4e>
        nmea_raw_data[i] = (char) UART1_rxBuffer[i];
 8002e62:	4a0f      	ldr	r2, [pc, #60]	; (8002ea0 <main+0x74>)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	18d3      	adds	r3, r2, r3
 8002e68:	7819      	ldrb	r1, [r3, #0]
 8002e6a:	4a0f      	ldr	r2, [pc, #60]	; (8002ea8 <main+0x7c>)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	18d3      	adds	r3, r2, r3
 8002e70:	1c0a      	adds	r2, r1, #0
 8002e72:	701a      	strb	r2, [r3, #0]
    for (i=0;i<BUFF_SIZE;i++){
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	3301      	adds	r3, #1
 8002e78:	607b      	str	r3, [r7, #4]
 8002e7a:	687a      	ldr	r2, [r7, #4]
 8002e7c:	23af      	movs	r3, #175	; 0xaf
 8002e7e:	009b      	lsls	r3, r3, #2
 8002e80:	429a      	cmp	r2, r3
 8002e82:	dbee      	blt.n	8002e62 <main+0x36>
    }

    //extract location under "DDD,DDD" format
	extract_location_from_nmea_raw_data(nmea_raw_data, &loc_str);
 8002e84:	4a09      	ldr	r2, [pc, #36]	; (8002eac <main+0x80>)
 8002e86:	4b08      	ldr	r3, [pc, #32]	; (8002ea8 <main+0x7c>)
 8002e88:	0011      	movs	r1, r2
 8002e8a:	0018      	movs	r0, r3
 8002e8c:	f7ff ff74 	bl	8002d78 <extract_location_from_nmea_raw_data>

	//transmit formatted location to PC
	HAL_UART_Transmit(&huart2, (uint8_t*) loc_str, 50, 100);
 8002e90:	4906      	ldr	r1, [pc, #24]	; (8002eac <main+0x80>)
 8002e92:	4807      	ldr	r0, [pc, #28]	; (8002eb0 <main+0x84>)
 8002e94:	2364      	movs	r3, #100	; 0x64
 8002e96:	2232      	movs	r2, #50	; 0x32
 8002e98:	f001 ffe2 	bl	8004e60 <HAL_UART_Transmit>
  {
 8002e9c:	e7dc      	b.n	8002e58 <main+0x2c>
 8002e9e:	46c0      	nop			; (mov r8, r8)
 8002ea0:	20000230 	.word	0x20000230
 8002ea4:	200007a8 	.word	0x200007a8
 8002ea8:	200004ec 	.word	0x200004ec
 8002eac:	20000000 	.word	0x20000000
 8002eb0:	20000838 	.word	0x20000838

08002eb4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002eb4:	b590      	push	{r4, r7, lr}
 8002eb6:	b093      	sub	sp, #76	; 0x4c
 8002eb8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002eba:	2414      	movs	r4, #20
 8002ebc:	193b      	adds	r3, r7, r4
 8002ebe:	0018      	movs	r0, r3
 8002ec0:	2334      	movs	r3, #52	; 0x34
 8002ec2:	001a      	movs	r2, r3
 8002ec4:	2100      	movs	r1, #0
 8002ec6:	f002 ffed 	bl	8005ea4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002eca:	1d3b      	adds	r3, r7, #4
 8002ecc:	0018      	movs	r0, r3
 8002ece:	2310      	movs	r3, #16
 8002ed0:	001a      	movs	r2, r3
 8002ed2:	2100      	movs	r1, #0
 8002ed4:	f002 ffe6 	bl	8005ea4 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002ed8:	2380      	movs	r3, #128	; 0x80
 8002eda:	009b      	lsls	r3, r3, #2
 8002edc:	0018      	movs	r0, r3
 8002ede:	f001 f92f 	bl	8004140 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002ee2:	193b      	adds	r3, r7, r4
 8002ee4:	2202      	movs	r2, #2
 8002ee6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002ee8:	193b      	adds	r3, r7, r4
 8002eea:	2280      	movs	r2, #128	; 0x80
 8002eec:	0052      	lsls	r2, r2, #1
 8002eee:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8002ef0:	193b      	adds	r3, r7, r4
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002ef6:	193b      	adds	r3, r7, r4
 8002ef8:	2240      	movs	r2, #64	; 0x40
 8002efa:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002efc:	193b      	adds	r3, r7, r4
 8002efe:	2200      	movs	r2, #0
 8002f00:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002f02:	193b      	adds	r3, r7, r4
 8002f04:	0018      	movs	r0, r3
 8002f06:	f001 f967 	bl	80041d8 <HAL_RCC_OscConfig>
 8002f0a:	1e03      	subs	r3, r0, #0
 8002f0c:	d001      	beq.n	8002f12 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8002f0e:	f000 f974 	bl	80031fa <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002f12:	1d3b      	adds	r3, r7, #4
 8002f14:	2207      	movs	r2, #7
 8002f16:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002f18:	1d3b      	adds	r3, r7, #4
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002f1e:	1d3b      	adds	r3, r7, #4
 8002f20:	2200      	movs	r2, #0
 8002f22:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002f24:	1d3b      	adds	r3, r7, #4
 8002f26:	2200      	movs	r2, #0
 8002f28:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002f2a:	1d3b      	adds	r3, r7, #4
 8002f2c:	2100      	movs	r1, #0
 8002f2e:	0018      	movs	r0, r3
 8002f30:	f001 fc62 	bl	80047f8 <HAL_RCC_ClockConfig>
 8002f34:	1e03      	subs	r3, r0, #0
 8002f36:	d001      	beq.n	8002f3c <SystemClock_Config+0x88>
  {
    Error_Handler();
 8002f38:	f000 f95f 	bl	80031fa <Error_Handler>
  }
}
 8002f3c:	46c0      	nop			; (mov r8, r8)
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	b013      	add	sp, #76	; 0x4c
 8002f42:	bd90      	pop	{r4, r7, pc}

08002f44 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002f48:	4b23      	ldr	r3, [pc, #140]	; (8002fd8 <MX_USART1_UART_Init+0x94>)
 8002f4a:	4a24      	ldr	r2, [pc, #144]	; (8002fdc <MX_USART1_UART_Init+0x98>)
 8002f4c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 8002f4e:	4b22      	ldr	r3, [pc, #136]	; (8002fd8 <MX_USART1_UART_Init+0x94>)
 8002f50:	2296      	movs	r2, #150	; 0x96
 8002f52:	0212      	lsls	r2, r2, #8
 8002f54:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002f56:	4b20      	ldr	r3, [pc, #128]	; (8002fd8 <MX_USART1_UART_Init+0x94>)
 8002f58:	2200      	movs	r2, #0
 8002f5a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002f5c:	4b1e      	ldr	r3, [pc, #120]	; (8002fd8 <MX_USART1_UART_Init+0x94>)
 8002f5e:	2200      	movs	r2, #0
 8002f60:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002f62:	4b1d      	ldr	r3, [pc, #116]	; (8002fd8 <MX_USART1_UART_Init+0x94>)
 8002f64:	2200      	movs	r2, #0
 8002f66:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002f68:	4b1b      	ldr	r3, [pc, #108]	; (8002fd8 <MX_USART1_UART_Init+0x94>)
 8002f6a:	220c      	movs	r2, #12
 8002f6c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f6e:	4b1a      	ldr	r3, [pc, #104]	; (8002fd8 <MX_USART1_UART_Init+0x94>)
 8002f70:	2200      	movs	r2, #0
 8002f72:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f74:	4b18      	ldr	r3, [pc, #96]	; (8002fd8 <MX_USART1_UART_Init+0x94>)
 8002f76:	2200      	movs	r2, #0
 8002f78:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002f7a:	4b17      	ldr	r3, [pc, #92]	; (8002fd8 <MX_USART1_UART_Init+0x94>)
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002f80:	4b15      	ldr	r3, [pc, #84]	; (8002fd8 <MX_USART1_UART_Init+0x94>)
 8002f82:	2200      	movs	r2, #0
 8002f84:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002f86:	4b14      	ldr	r3, [pc, #80]	; (8002fd8 <MX_USART1_UART_Init+0x94>)
 8002f88:	2200      	movs	r2, #0
 8002f8a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002f8c:	4b12      	ldr	r3, [pc, #72]	; (8002fd8 <MX_USART1_UART_Init+0x94>)
 8002f8e:	0018      	movs	r0, r3
 8002f90:	f001 ff10 	bl	8004db4 <HAL_UART_Init>
 8002f94:	1e03      	subs	r3, r0, #0
 8002f96:	d001      	beq.n	8002f9c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002f98:	f000 f92f 	bl	80031fa <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002f9c:	4b0e      	ldr	r3, [pc, #56]	; (8002fd8 <MX_USART1_UART_Init+0x94>)
 8002f9e:	2100      	movs	r1, #0
 8002fa0:	0018      	movs	r0, r3
 8002fa2:	f002 fe75 	bl	8005c90 <HAL_UARTEx_SetTxFifoThreshold>
 8002fa6:	1e03      	subs	r3, r0, #0
 8002fa8:	d001      	beq.n	8002fae <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002faa:	f000 f926 	bl	80031fa <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002fae:	4b0a      	ldr	r3, [pc, #40]	; (8002fd8 <MX_USART1_UART_Init+0x94>)
 8002fb0:	2100      	movs	r1, #0
 8002fb2:	0018      	movs	r0, r3
 8002fb4:	f002 feac 	bl	8005d10 <HAL_UARTEx_SetRxFifoThreshold>
 8002fb8:	1e03      	subs	r3, r0, #0
 8002fba:	d001      	beq.n	8002fc0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002fbc:	f000 f91d 	bl	80031fa <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002fc0:	4b05      	ldr	r3, [pc, #20]	; (8002fd8 <MX_USART1_UART_Init+0x94>)
 8002fc2:	0018      	movs	r0, r3
 8002fc4:	f002 fe2a 	bl	8005c1c <HAL_UARTEx_DisableFifoMode>
 8002fc8:	1e03      	subs	r3, r0, #0
 8002fca:	d001      	beq.n	8002fd0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002fcc:	f000 f915 	bl	80031fa <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002fd0:	46c0      	nop			; (mov r8, r8)
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}
 8002fd6:	46c0      	nop			; (mov r8, r8)
 8002fd8:	200007a8 	.word	0x200007a8
 8002fdc:	40013800 	.word	0x40013800

08002fe0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002fe4:	4b23      	ldr	r3, [pc, #140]	; (8003074 <MX_USART2_UART_Init+0x94>)
 8002fe6:	4a24      	ldr	r2, [pc, #144]	; (8003078 <MX_USART2_UART_Init+0x98>)
 8002fe8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8002fea:	4b22      	ldr	r3, [pc, #136]	; (8003074 <MX_USART2_UART_Init+0x94>)
 8002fec:	2296      	movs	r2, #150	; 0x96
 8002fee:	0212      	lsls	r2, r2, #8
 8002ff0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002ff2:	4b20      	ldr	r3, [pc, #128]	; (8003074 <MX_USART2_UART_Init+0x94>)
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002ff8:	4b1e      	ldr	r3, [pc, #120]	; (8003074 <MX_USART2_UART_Init+0x94>)
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002ffe:	4b1d      	ldr	r3, [pc, #116]	; (8003074 <MX_USART2_UART_Init+0x94>)
 8003000:	2200      	movs	r2, #0
 8003002:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003004:	4b1b      	ldr	r3, [pc, #108]	; (8003074 <MX_USART2_UART_Init+0x94>)
 8003006:	220c      	movs	r2, #12
 8003008:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800300a:	4b1a      	ldr	r3, [pc, #104]	; (8003074 <MX_USART2_UART_Init+0x94>)
 800300c:	2200      	movs	r2, #0
 800300e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003010:	4b18      	ldr	r3, [pc, #96]	; (8003074 <MX_USART2_UART_Init+0x94>)
 8003012:	2200      	movs	r2, #0
 8003014:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003016:	4b17      	ldr	r3, [pc, #92]	; (8003074 <MX_USART2_UART_Init+0x94>)
 8003018:	2200      	movs	r2, #0
 800301a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800301c:	4b15      	ldr	r3, [pc, #84]	; (8003074 <MX_USART2_UART_Init+0x94>)
 800301e:	2200      	movs	r2, #0
 8003020:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003022:	4b14      	ldr	r3, [pc, #80]	; (8003074 <MX_USART2_UART_Init+0x94>)
 8003024:	2200      	movs	r2, #0
 8003026:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003028:	4b12      	ldr	r3, [pc, #72]	; (8003074 <MX_USART2_UART_Init+0x94>)
 800302a:	0018      	movs	r0, r3
 800302c:	f001 fec2 	bl	8004db4 <HAL_UART_Init>
 8003030:	1e03      	subs	r3, r0, #0
 8003032:	d001      	beq.n	8003038 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8003034:	f000 f8e1 	bl	80031fa <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003038:	4b0e      	ldr	r3, [pc, #56]	; (8003074 <MX_USART2_UART_Init+0x94>)
 800303a:	2100      	movs	r1, #0
 800303c:	0018      	movs	r0, r3
 800303e:	f002 fe27 	bl	8005c90 <HAL_UARTEx_SetTxFifoThreshold>
 8003042:	1e03      	subs	r3, r0, #0
 8003044:	d001      	beq.n	800304a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8003046:	f000 f8d8 	bl	80031fa <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800304a:	4b0a      	ldr	r3, [pc, #40]	; (8003074 <MX_USART2_UART_Init+0x94>)
 800304c:	2100      	movs	r1, #0
 800304e:	0018      	movs	r0, r3
 8003050:	f002 fe5e 	bl	8005d10 <HAL_UARTEx_SetRxFifoThreshold>
 8003054:	1e03      	subs	r3, r0, #0
 8003056:	d001      	beq.n	800305c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8003058:	f000 f8cf 	bl	80031fa <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800305c:	4b05      	ldr	r3, [pc, #20]	; (8003074 <MX_USART2_UART_Init+0x94>)
 800305e:	0018      	movs	r0, r3
 8003060:	f002 fddc 	bl	8005c1c <HAL_UARTEx_DisableFifoMode>
 8003064:	1e03      	subs	r3, r0, #0
 8003066:	d001      	beq.n	800306c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8003068:	f000 f8c7 	bl	80031fa <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800306c:	46c0      	nop			; (mov r8, r8)
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}
 8003072:	46c0      	nop			; (mov r8, r8)
 8003074:	20000838 	.word	0x20000838
 8003078:	40004400 	.word	0x40004400

0800307c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b082      	sub	sp, #8
 8003080:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003082:	4b0c      	ldr	r3, [pc, #48]	; (80030b4 <MX_DMA_Init+0x38>)
 8003084:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003086:	4b0b      	ldr	r3, [pc, #44]	; (80030b4 <MX_DMA_Init+0x38>)
 8003088:	2101      	movs	r1, #1
 800308a:	430a      	orrs	r2, r1
 800308c:	639a      	str	r2, [r3, #56]	; 0x38
 800308e:	4b09      	ldr	r3, [pc, #36]	; (80030b4 <MX_DMA_Init+0x38>)
 8003090:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003092:	2201      	movs	r2, #1
 8003094:	4013      	ands	r3, r2
 8003096:	607b      	str	r3, [r7, #4]
 8003098:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800309a:	2200      	movs	r2, #0
 800309c:	2100      	movs	r1, #0
 800309e:	2009      	movs	r0, #9
 80030a0:	f000 fc14 	bl	80038cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80030a4:	2009      	movs	r0, #9
 80030a6:	f000 fc26 	bl	80038f6 <HAL_NVIC_EnableIRQ>

}
 80030aa:	46c0      	nop			; (mov r8, r8)
 80030ac:	46bd      	mov	sp, r7
 80030ae:	b002      	add	sp, #8
 80030b0:	bd80      	pop	{r7, pc}
 80030b2:	46c0      	nop			; (mov r8, r8)
 80030b4:	40021000 	.word	0x40021000

080030b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80030b8:	b590      	push	{r4, r7, lr}
 80030ba:	b089      	sub	sp, #36	; 0x24
 80030bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030be:	240c      	movs	r4, #12
 80030c0:	193b      	adds	r3, r7, r4
 80030c2:	0018      	movs	r0, r3
 80030c4:	2314      	movs	r3, #20
 80030c6:	001a      	movs	r2, r3
 80030c8:	2100      	movs	r1, #0
 80030ca:	f002 feeb 	bl	8005ea4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80030ce:	4b38      	ldr	r3, [pc, #224]	; (80031b0 <MX_GPIO_Init+0xf8>)
 80030d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030d2:	4b37      	ldr	r3, [pc, #220]	; (80031b0 <MX_GPIO_Init+0xf8>)
 80030d4:	2104      	movs	r1, #4
 80030d6:	430a      	orrs	r2, r1
 80030d8:	635a      	str	r2, [r3, #52]	; 0x34
 80030da:	4b35      	ldr	r3, [pc, #212]	; (80031b0 <MX_GPIO_Init+0xf8>)
 80030dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030de:	2204      	movs	r2, #4
 80030e0:	4013      	ands	r3, r2
 80030e2:	60bb      	str	r3, [r7, #8]
 80030e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80030e6:	4b32      	ldr	r3, [pc, #200]	; (80031b0 <MX_GPIO_Init+0xf8>)
 80030e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030ea:	4b31      	ldr	r3, [pc, #196]	; (80031b0 <MX_GPIO_Init+0xf8>)
 80030ec:	2120      	movs	r1, #32
 80030ee:	430a      	orrs	r2, r1
 80030f0:	635a      	str	r2, [r3, #52]	; 0x34
 80030f2:	4b2f      	ldr	r3, [pc, #188]	; (80031b0 <MX_GPIO_Init+0xf8>)
 80030f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030f6:	2220      	movs	r2, #32
 80030f8:	4013      	ands	r3, r2
 80030fa:	607b      	str	r3, [r7, #4]
 80030fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80030fe:	4b2c      	ldr	r3, [pc, #176]	; (80031b0 <MX_GPIO_Init+0xf8>)
 8003100:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003102:	4b2b      	ldr	r3, [pc, #172]	; (80031b0 <MX_GPIO_Init+0xf8>)
 8003104:	2101      	movs	r1, #1
 8003106:	430a      	orrs	r2, r1
 8003108:	635a      	str	r2, [r3, #52]	; 0x34
 800310a:	4b29      	ldr	r3, [pc, #164]	; (80031b0 <MX_GPIO_Init+0xf8>)
 800310c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800310e:	2201      	movs	r2, #1
 8003110:	4013      	ands	r3, r2
 8003112:	603b      	str	r3, [r7, #0]
 8003114:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_GREEN_Pin|GPIO_PIN_10, GPIO_PIN_RESET);
 8003116:	2384      	movs	r3, #132	; 0x84
 8003118:	00d9      	lsls	r1, r3, #3
 800311a:	23a0      	movs	r3, #160	; 0xa0
 800311c:	05db      	lsls	r3, r3, #23
 800311e:	2200      	movs	r2, #0
 8003120:	0018      	movs	r0, r3
 8003122:	f000 ffbb 	bl	800409c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003126:	193b      	adds	r3, r7, r4
 8003128:	2280      	movs	r2, #128	; 0x80
 800312a:	0192      	lsls	r2, r2, #6
 800312c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800312e:	193b      	adds	r3, r7, r4
 8003130:	2288      	movs	r2, #136	; 0x88
 8003132:	0352      	lsls	r2, r2, #13
 8003134:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003136:	193b      	adds	r3, r7, r4
 8003138:	2200      	movs	r2, #0
 800313a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800313c:	193b      	adds	r3, r7, r4
 800313e:	4a1d      	ldr	r2, [pc, #116]	; (80031b4 <MX_GPIO_Init+0xfc>)
 8003140:	0019      	movs	r1, r3
 8003142:	0010      	movs	r0, r2
 8003144:	f000 fe46 	bl	8003dd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8003148:	193b      	adds	r3, r7, r4
 800314a:	2220      	movs	r2, #32
 800314c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800314e:	193b      	adds	r3, r7, r4
 8003150:	2201      	movs	r2, #1
 8003152:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003154:	193b      	adds	r3, r7, r4
 8003156:	2200      	movs	r2, #0
 8003158:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800315a:	193b      	adds	r3, r7, r4
 800315c:	2202      	movs	r2, #2
 800315e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8003160:	193a      	adds	r2, r7, r4
 8003162:	23a0      	movs	r3, #160	; 0xa0
 8003164:	05db      	lsls	r3, r3, #23
 8003166:	0011      	movs	r1, r2
 8003168:	0018      	movs	r0, r3
 800316a:	f000 fe33 	bl	8003dd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800316e:	0021      	movs	r1, r4
 8003170:	187b      	adds	r3, r7, r1
 8003172:	2280      	movs	r2, #128	; 0x80
 8003174:	00d2      	lsls	r2, r2, #3
 8003176:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003178:	187b      	adds	r3, r7, r1
 800317a:	2201      	movs	r2, #1
 800317c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800317e:	187b      	adds	r3, r7, r1
 8003180:	2202      	movs	r2, #2
 8003182:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003184:	187b      	adds	r3, r7, r1
 8003186:	2202      	movs	r2, #2
 8003188:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800318a:	187a      	adds	r2, r7, r1
 800318c:	23a0      	movs	r3, #160	; 0xa0
 800318e:	05db      	lsls	r3, r3, #23
 8003190:	0011      	movs	r1, r2
 8003192:	0018      	movs	r0, r3
 8003194:	f000 fe1e 	bl	8003dd4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8003198:	2200      	movs	r2, #0
 800319a:	2100      	movs	r1, #0
 800319c:	2007      	movs	r0, #7
 800319e:	f000 fb95 	bl	80038cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80031a2:	2007      	movs	r0, #7
 80031a4:	f000 fba7 	bl	80038f6 <HAL_NVIC_EnableIRQ>

}
 80031a8:	46c0      	nop			; (mov r8, r8)
 80031aa:	46bd      	mov	sp, r7
 80031ac:	b009      	add	sp, #36	; 0x24
 80031ae:	bd90      	pop	{r4, r7, pc}
 80031b0:	40021000 	.word	0x40021000
 80031b4:	50000800 	.word	0x50000800

080031b8 <HAL_GPIO_EXTI_Rising_Callback>:
    HAL_UART_Receive_DMA(&huart2, UART2_rxBuffer, 12);
}
*/

void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b082      	sub	sp, #8
 80031bc:	af00      	add	r7, sp, #0
 80031be:	0002      	movs	r2, r0
 80031c0:	1dbb      	adds	r3, r7, #6
 80031c2:	801a      	strh	r2, [r3, #0]
  if(GPIO_Pin == GPIO_PIN_13) {
 80031c4:	1dbb      	adds	r3, r7, #6
 80031c6:	881a      	ldrh	r2, [r3, #0]
 80031c8:	2380      	movs	r3, #128	; 0x80
 80031ca:	019b      	lsls	r3, r3, #6
 80031cc:	429a      	cmp	r2, r3
 80031ce:	d10f      	bne.n	80031f0 <HAL_GPIO_EXTI_Rising_Callback+0x38>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 80031d0:	2380      	movs	r3, #128	; 0x80
 80031d2:	00d9      	lsls	r1, r3, #3
 80031d4:	23a0      	movs	r3, #160	; 0xa0
 80031d6:	05db      	lsls	r3, r3, #23
 80031d8:	2201      	movs	r2, #1
 80031da:	0018      	movs	r0, r3
 80031dc:	f000 ff5e 	bl	800409c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80031e0:	23a0      	movs	r3, #160	; 0xa0
 80031e2:	05db      	lsls	r3, r3, #23
 80031e4:	2201      	movs	r2, #1
 80031e6:	2120      	movs	r1, #32
 80031e8:	0018      	movs	r0, r3
 80031ea:	f000 ff57 	bl	800409c <HAL_GPIO_WritePin>
    //HAL_UART_Transmit(&huart2, (uint8_t*) loc_str, 50, 100);
  } else {
      __NOP();
  }
}
 80031ee:	e000      	b.n	80031f2 <HAL_GPIO_EXTI_Rising_Callback+0x3a>
      __NOP();
 80031f0:	46c0      	nop			; (mov r8, r8)
}
 80031f2:	46c0      	nop			; (mov r8, r8)
 80031f4:	46bd      	mov	sp, r7
 80031f6:	b002      	add	sp, #8
 80031f8:	bd80      	pop	{r7, pc}

080031fa <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80031fa:	b580      	push	{r7, lr}
 80031fc:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80031fe:	b672      	cpsid	i
}
 8003200:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003202:	e7fe      	b.n	8003202 <Error_Handler+0x8>

08003204 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b082      	sub	sp, #8
 8003208:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800320a:	4b11      	ldr	r3, [pc, #68]	; (8003250 <HAL_MspInit+0x4c>)
 800320c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800320e:	4b10      	ldr	r3, [pc, #64]	; (8003250 <HAL_MspInit+0x4c>)
 8003210:	2101      	movs	r1, #1
 8003212:	430a      	orrs	r2, r1
 8003214:	641a      	str	r2, [r3, #64]	; 0x40
 8003216:	4b0e      	ldr	r3, [pc, #56]	; (8003250 <HAL_MspInit+0x4c>)
 8003218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800321a:	2201      	movs	r2, #1
 800321c:	4013      	ands	r3, r2
 800321e:	607b      	str	r3, [r7, #4]
 8003220:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003222:	4b0b      	ldr	r3, [pc, #44]	; (8003250 <HAL_MspInit+0x4c>)
 8003224:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003226:	4b0a      	ldr	r3, [pc, #40]	; (8003250 <HAL_MspInit+0x4c>)
 8003228:	2180      	movs	r1, #128	; 0x80
 800322a:	0549      	lsls	r1, r1, #21
 800322c:	430a      	orrs	r2, r1
 800322e:	63da      	str	r2, [r3, #60]	; 0x3c
 8003230:	4b07      	ldr	r3, [pc, #28]	; (8003250 <HAL_MspInit+0x4c>)
 8003232:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003234:	2380      	movs	r3, #128	; 0x80
 8003236:	055b      	lsls	r3, r3, #21
 8003238:	4013      	ands	r3, r2
 800323a:	603b      	str	r3, [r7, #0]
 800323c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 800323e:	23c0      	movs	r3, #192	; 0xc0
 8003240:	00db      	lsls	r3, r3, #3
 8003242:	0018      	movs	r0, r3
 8003244:	f000 fa80 	bl	8003748 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003248:	46c0      	nop			; (mov r8, r8)
 800324a:	46bd      	mov	sp, r7
 800324c:	b002      	add	sp, #8
 800324e:	bd80      	pop	{r7, pc}
 8003250:	40021000 	.word	0x40021000

08003254 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003254:	b590      	push	{r4, r7, lr}
 8003256:	b093      	sub	sp, #76	; 0x4c
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800325c:	2334      	movs	r3, #52	; 0x34
 800325e:	18fb      	adds	r3, r7, r3
 8003260:	0018      	movs	r0, r3
 8003262:	2314      	movs	r3, #20
 8003264:	001a      	movs	r2, r3
 8003266:	2100      	movs	r1, #0
 8003268:	f002 fe1c 	bl	8005ea4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800326c:	2418      	movs	r4, #24
 800326e:	193b      	adds	r3, r7, r4
 8003270:	0018      	movs	r0, r3
 8003272:	231c      	movs	r3, #28
 8003274:	001a      	movs	r2, r3
 8003276:	2100      	movs	r1, #0
 8003278:	f002 fe14 	bl	8005ea4 <memset>
  if(huart->Instance==USART1)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a5a      	ldr	r2, [pc, #360]	; (80033ec <HAL_UART_MspInit+0x198>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d168      	bne.n	8003358 <HAL_UART_MspInit+0x104>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003286:	193b      	adds	r3, r7, r4
 8003288:	2201      	movs	r2, #1
 800328a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800328c:	193b      	adds	r3, r7, r4
 800328e:	2200      	movs	r2, #0
 8003290:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003292:	193b      	adds	r3, r7, r4
 8003294:	0018      	movs	r0, r3
 8003296:	f001 fc59 	bl	8004b4c <HAL_RCCEx_PeriphCLKConfig>
 800329a:	1e03      	subs	r3, r0, #0
 800329c:	d001      	beq.n	80032a2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800329e:	f7ff ffac 	bl	80031fa <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80032a2:	4b53      	ldr	r3, [pc, #332]	; (80033f0 <HAL_UART_MspInit+0x19c>)
 80032a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80032a6:	4b52      	ldr	r3, [pc, #328]	; (80033f0 <HAL_UART_MspInit+0x19c>)
 80032a8:	2180      	movs	r1, #128	; 0x80
 80032aa:	01c9      	lsls	r1, r1, #7
 80032ac:	430a      	orrs	r2, r1
 80032ae:	641a      	str	r2, [r3, #64]	; 0x40
 80032b0:	4b4f      	ldr	r3, [pc, #316]	; (80033f0 <HAL_UART_MspInit+0x19c>)
 80032b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80032b4:	2380      	movs	r3, #128	; 0x80
 80032b6:	01db      	lsls	r3, r3, #7
 80032b8:	4013      	ands	r3, r2
 80032ba:	617b      	str	r3, [r7, #20]
 80032bc:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80032be:	4b4c      	ldr	r3, [pc, #304]	; (80033f0 <HAL_UART_MspInit+0x19c>)
 80032c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032c2:	4b4b      	ldr	r3, [pc, #300]	; (80033f0 <HAL_UART_MspInit+0x19c>)
 80032c4:	2104      	movs	r1, #4
 80032c6:	430a      	orrs	r2, r1
 80032c8:	635a      	str	r2, [r3, #52]	; 0x34
 80032ca:	4b49      	ldr	r3, [pc, #292]	; (80033f0 <HAL_UART_MspInit+0x19c>)
 80032cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032ce:	2204      	movs	r2, #4
 80032d0:	4013      	ands	r3, r2
 80032d2:	613b      	str	r3, [r7, #16]
 80032d4:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80032d6:	2134      	movs	r1, #52	; 0x34
 80032d8:	187b      	adds	r3, r7, r1
 80032da:	2230      	movs	r2, #48	; 0x30
 80032dc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032de:	187b      	adds	r3, r7, r1
 80032e0:	2202      	movs	r2, #2
 80032e2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032e4:	187b      	adds	r3, r7, r1
 80032e6:	2200      	movs	r2, #0
 80032e8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032ea:	187b      	adds	r3, r7, r1
 80032ec:	2200      	movs	r2, #0
 80032ee:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80032f0:	187b      	adds	r3, r7, r1
 80032f2:	2201      	movs	r2, #1
 80032f4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80032f6:	187b      	adds	r3, r7, r1
 80032f8:	4a3e      	ldr	r2, [pc, #248]	; (80033f4 <HAL_UART_MspInit+0x1a0>)
 80032fa:	0019      	movs	r1, r3
 80032fc:	0010      	movs	r0, r2
 80032fe:	f000 fd69 	bl	8003dd4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 8003302:	4b3d      	ldr	r3, [pc, #244]	; (80033f8 <HAL_UART_MspInit+0x1a4>)
 8003304:	4a3d      	ldr	r2, [pc, #244]	; (80033fc <HAL_UART_MspInit+0x1a8>)
 8003306:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8003308:	4b3b      	ldr	r3, [pc, #236]	; (80033f8 <HAL_UART_MspInit+0x1a4>)
 800330a:	2232      	movs	r2, #50	; 0x32
 800330c:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800330e:	4b3a      	ldr	r3, [pc, #232]	; (80033f8 <HAL_UART_MspInit+0x1a4>)
 8003310:	2200      	movs	r2, #0
 8003312:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003314:	4b38      	ldr	r3, [pc, #224]	; (80033f8 <HAL_UART_MspInit+0x1a4>)
 8003316:	2200      	movs	r2, #0
 8003318:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800331a:	4b37      	ldr	r3, [pc, #220]	; (80033f8 <HAL_UART_MspInit+0x1a4>)
 800331c:	2280      	movs	r2, #128	; 0x80
 800331e:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003320:	4b35      	ldr	r3, [pc, #212]	; (80033f8 <HAL_UART_MspInit+0x1a4>)
 8003322:	2200      	movs	r2, #0
 8003324:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003326:	4b34      	ldr	r3, [pc, #208]	; (80033f8 <HAL_UART_MspInit+0x1a4>)
 8003328:	2200      	movs	r2, #0
 800332a:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 800332c:	4b32      	ldr	r3, [pc, #200]	; (80033f8 <HAL_UART_MspInit+0x1a4>)
 800332e:	2220      	movs	r2, #32
 8003330:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003332:	4b31      	ldr	r3, [pc, #196]	; (80033f8 <HAL_UART_MspInit+0x1a4>)
 8003334:	22c0      	movs	r2, #192	; 0xc0
 8003336:	0192      	lsls	r2, r2, #6
 8003338:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800333a:	4b2f      	ldr	r3, [pc, #188]	; (80033f8 <HAL_UART_MspInit+0x1a4>)
 800333c:	0018      	movs	r0, r3
 800333e:	f000 faf7 	bl	8003930 <HAL_DMA_Init>
 8003342:	1e03      	subs	r3, r0, #0
 8003344:	d001      	beq.n	800334a <HAL_UART_MspInit+0xf6>
    {
      Error_Handler();
 8003346:	f7ff ff58 	bl	80031fa <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	4a2a      	ldr	r2, [pc, #168]	; (80033f8 <HAL_UART_MspInit+0x1a4>)
 800334e:	67da      	str	r2, [r3, #124]	; 0x7c
 8003350:	4b29      	ldr	r3, [pc, #164]	; (80033f8 <HAL_UART_MspInit+0x1a4>)
 8003352:	687a      	ldr	r2, [r7, #4]
 8003354:	629a      	str	r2, [r3, #40]	; 0x28
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003356:	e044      	b.n	80033e2 <HAL_UART_MspInit+0x18e>
  else if(huart->Instance==USART2)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a28      	ldr	r2, [pc, #160]	; (8003400 <HAL_UART_MspInit+0x1ac>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d13f      	bne.n	80033e2 <HAL_UART_MspInit+0x18e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003362:	2118      	movs	r1, #24
 8003364:	187b      	adds	r3, r7, r1
 8003366:	2202      	movs	r2, #2
 8003368:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800336a:	187b      	adds	r3, r7, r1
 800336c:	2200      	movs	r2, #0
 800336e:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003370:	187b      	adds	r3, r7, r1
 8003372:	0018      	movs	r0, r3
 8003374:	f001 fbea 	bl	8004b4c <HAL_RCCEx_PeriphCLKConfig>
 8003378:	1e03      	subs	r3, r0, #0
 800337a:	d001      	beq.n	8003380 <HAL_UART_MspInit+0x12c>
      Error_Handler();
 800337c:	f7ff ff3d 	bl	80031fa <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003380:	4b1b      	ldr	r3, [pc, #108]	; (80033f0 <HAL_UART_MspInit+0x19c>)
 8003382:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003384:	4b1a      	ldr	r3, [pc, #104]	; (80033f0 <HAL_UART_MspInit+0x19c>)
 8003386:	2180      	movs	r1, #128	; 0x80
 8003388:	0289      	lsls	r1, r1, #10
 800338a:	430a      	orrs	r2, r1
 800338c:	63da      	str	r2, [r3, #60]	; 0x3c
 800338e:	4b18      	ldr	r3, [pc, #96]	; (80033f0 <HAL_UART_MspInit+0x19c>)
 8003390:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003392:	2380      	movs	r3, #128	; 0x80
 8003394:	029b      	lsls	r3, r3, #10
 8003396:	4013      	ands	r3, r2
 8003398:	60fb      	str	r3, [r7, #12]
 800339a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800339c:	4b14      	ldr	r3, [pc, #80]	; (80033f0 <HAL_UART_MspInit+0x19c>)
 800339e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033a0:	4b13      	ldr	r3, [pc, #76]	; (80033f0 <HAL_UART_MspInit+0x19c>)
 80033a2:	2101      	movs	r1, #1
 80033a4:	430a      	orrs	r2, r1
 80033a6:	635a      	str	r2, [r3, #52]	; 0x34
 80033a8:	4b11      	ldr	r3, [pc, #68]	; (80033f0 <HAL_UART_MspInit+0x19c>)
 80033aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033ac:	2201      	movs	r2, #1
 80033ae:	4013      	ands	r3, r2
 80033b0:	60bb      	str	r3, [r7, #8]
 80033b2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80033b4:	2134      	movs	r1, #52	; 0x34
 80033b6:	187b      	adds	r3, r7, r1
 80033b8:	220c      	movs	r2, #12
 80033ba:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033bc:	187b      	adds	r3, r7, r1
 80033be:	2202      	movs	r2, #2
 80033c0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80033c2:	187b      	adds	r3, r7, r1
 80033c4:	2201      	movs	r2, #1
 80033c6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033c8:	187b      	adds	r3, r7, r1
 80033ca:	2200      	movs	r2, #0
 80033cc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80033ce:	187b      	adds	r3, r7, r1
 80033d0:	2201      	movs	r2, #1
 80033d2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033d4:	187a      	adds	r2, r7, r1
 80033d6:	23a0      	movs	r3, #160	; 0xa0
 80033d8:	05db      	lsls	r3, r3, #23
 80033da:	0011      	movs	r1, r2
 80033dc:	0018      	movs	r0, r3
 80033de:	f000 fcf9 	bl	8003dd4 <HAL_GPIO_Init>
}
 80033e2:	46c0      	nop			; (mov r8, r8)
 80033e4:	46bd      	mov	sp, r7
 80033e6:	b013      	add	sp, #76	; 0x4c
 80033e8:	bd90      	pop	{r4, r7, pc}
 80033ea:	46c0      	nop			; (mov r8, r8)
 80033ec:	40013800 	.word	0x40013800
 80033f0:	40021000 	.word	0x40021000
 80033f4:	50000800 	.word	0x50000800
 80033f8:	200008c8 	.word	0x200008c8
 80033fc:	40020008 	.word	0x40020008
 8003400:	40004400 	.word	0x40004400

08003404 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003408:	e7fe      	b.n	8003408 <NMI_Handler+0x4>

0800340a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800340a:	b580      	push	{r7, lr}
 800340c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800340e:	e7fe      	b.n	800340e <HardFault_Handler+0x4>

08003410 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003414:	46c0      	nop			; (mov r8, r8)
 8003416:	46bd      	mov	sp, r7
 8003418:	bd80      	pop	{r7, pc}

0800341a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800341a:	b580      	push	{r7, lr}
 800341c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800341e:	46c0      	nop			; (mov r8, r8)
 8003420:	46bd      	mov	sp, r7
 8003422:	bd80      	pop	{r7, pc}

08003424 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003428:	f000 f972 	bl	8003710 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800342c:	46c0      	nop			; (mov r8, r8)
 800342e:	46bd      	mov	sp, r7
 8003430:	bd80      	pop	{r7, pc}

08003432 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8003432:	b580      	push	{r7, lr}
 8003434:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8003436:	2380      	movs	r3, #128	; 0x80
 8003438:	019b      	lsls	r3, r3, #6
 800343a:	0018      	movs	r0, r3
 800343c:	f000 fe4c 	bl	80040d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8003440:	46c0      	nop			; (mov r8, r8)
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}
	...

08003448 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800344c:	4b03      	ldr	r3, [pc, #12]	; (800345c <DMA1_Channel1_IRQHandler+0x14>)
 800344e:	0018      	movs	r0, r3
 8003450:	f000 fb7e 	bl	8003b50 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003454:	46c0      	nop			; (mov r8, r8)
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}
 800345a:	46c0      	nop			; (mov r8, r8)
 800345c:	200008c8 	.word	0x200008c8

08003460 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	af00      	add	r7, sp, #0
	return 1;
 8003464:	2301      	movs	r3, #1
}
 8003466:	0018      	movs	r0, r3
 8003468:	46bd      	mov	sp, r7
 800346a:	bd80      	pop	{r7, pc}

0800346c <_kill>:

int _kill(int pid, int sig)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b082      	sub	sp, #8
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
 8003474:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003476:	f002 fceb 	bl	8005e50 <__errno>
 800347a:	0003      	movs	r3, r0
 800347c:	2216      	movs	r2, #22
 800347e:	601a      	str	r2, [r3, #0]
	return -1;
 8003480:	2301      	movs	r3, #1
 8003482:	425b      	negs	r3, r3
}
 8003484:	0018      	movs	r0, r3
 8003486:	46bd      	mov	sp, r7
 8003488:	b002      	add	sp, #8
 800348a:	bd80      	pop	{r7, pc}

0800348c <_exit>:

void _exit (int status)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b082      	sub	sp, #8
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003494:	2301      	movs	r3, #1
 8003496:	425a      	negs	r2, r3
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	0011      	movs	r1, r2
 800349c:	0018      	movs	r0, r3
 800349e:	f7ff ffe5 	bl	800346c <_kill>
	while (1) {}		/* Make sure we hang here */
 80034a2:	e7fe      	b.n	80034a2 <_exit+0x16>

080034a4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b086      	sub	sp, #24
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	60f8      	str	r0, [r7, #12]
 80034ac:	60b9      	str	r1, [r7, #8]
 80034ae:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034b0:	2300      	movs	r3, #0
 80034b2:	617b      	str	r3, [r7, #20]
 80034b4:	e00a      	b.n	80034cc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80034b6:	e000      	b.n	80034ba <_read+0x16>
 80034b8:	bf00      	nop
 80034ba:	0001      	movs	r1, r0
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	1c5a      	adds	r2, r3, #1
 80034c0:	60ba      	str	r2, [r7, #8]
 80034c2:	b2ca      	uxtb	r2, r1
 80034c4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	3301      	adds	r3, #1
 80034ca:	617b      	str	r3, [r7, #20]
 80034cc:	697a      	ldr	r2, [r7, #20]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	429a      	cmp	r2, r3
 80034d2:	dbf0      	blt.n	80034b6 <_read+0x12>
	}

return len;
 80034d4:	687b      	ldr	r3, [r7, #4]
}
 80034d6:	0018      	movs	r0, r3
 80034d8:	46bd      	mov	sp, r7
 80034da:	b006      	add	sp, #24
 80034dc:	bd80      	pop	{r7, pc}

080034de <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80034de:	b580      	push	{r7, lr}
 80034e0:	b086      	sub	sp, #24
 80034e2:	af00      	add	r7, sp, #0
 80034e4:	60f8      	str	r0, [r7, #12]
 80034e6:	60b9      	str	r1, [r7, #8]
 80034e8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034ea:	2300      	movs	r3, #0
 80034ec:	617b      	str	r3, [r7, #20]
 80034ee:	e009      	b.n	8003504 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	1c5a      	adds	r2, r3, #1
 80034f4:	60ba      	str	r2, [r7, #8]
 80034f6:	781b      	ldrb	r3, [r3, #0]
 80034f8:	0018      	movs	r0, r3
 80034fa:	e000      	b.n	80034fe <_write+0x20>
 80034fc:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034fe:	697b      	ldr	r3, [r7, #20]
 8003500:	3301      	adds	r3, #1
 8003502:	617b      	str	r3, [r7, #20]
 8003504:	697a      	ldr	r2, [r7, #20]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	429a      	cmp	r2, r3
 800350a:	dbf1      	blt.n	80034f0 <_write+0x12>
	}
	return len;
 800350c:	687b      	ldr	r3, [r7, #4]
}
 800350e:	0018      	movs	r0, r3
 8003510:	46bd      	mov	sp, r7
 8003512:	b006      	add	sp, #24
 8003514:	bd80      	pop	{r7, pc}

08003516 <_close>:

int _close(int file)
{
 8003516:	b580      	push	{r7, lr}
 8003518:	b082      	sub	sp, #8
 800351a:	af00      	add	r7, sp, #0
 800351c:	6078      	str	r0, [r7, #4]
	return -1;
 800351e:	2301      	movs	r3, #1
 8003520:	425b      	negs	r3, r3
}
 8003522:	0018      	movs	r0, r3
 8003524:	46bd      	mov	sp, r7
 8003526:	b002      	add	sp, #8
 8003528:	bd80      	pop	{r7, pc}

0800352a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800352a:	b580      	push	{r7, lr}
 800352c:	b082      	sub	sp, #8
 800352e:	af00      	add	r7, sp, #0
 8003530:	6078      	str	r0, [r7, #4]
 8003532:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	2280      	movs	r2, #128	; 0x80
 8003538:	0192      	lsls	r2, r2, #6
 800353a:	605a      	str	r2, [r3, #4]
	return 0;
 800353c:	2300      	movs	r3, #0
}
 800353e:	0018      	movs	r0, r3
 8003540:	46bd      	mov	sp, r7
 8003542:	b002      	add	sp, #8
 8003544:	bd80      	pop	{r7, pc}

08003546 <_isatty>:

int _isatty(int file)
{
 8003546:	b580      	push	{r7, lr}
 8003548:	b082      	sub	sp, #8
 800354a:	af00      	add	r7, sp, #0
 800354c:	6078      	str	r0, [r7, #4]
	return 1;
 800354e:	2301      	movs	r3, #1
}
 8003550:	0018      	movs	r0, r3
 8003552:	46bd      	mov	sp, r7
 8003554:	b002      	add	sp, #8
 8003556:	bd80      	pop	{r7, pc}

08003558 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b084      	sub	sp, #16
 800355c:	af00      	add	r7, sp, #0
 800355e:	60f8      	str	r0, [r7, #12]
 8003560:	60b9      	str	r1, [r7, #8]
 8003562:	607a      	str	r2, [r7, #4]
	return 0;
 8003564:	2300      	movs	r3, #0
}
 8003566:	0018      	movs	r0, r3
 8003568:	46bd      	mov	sp, r7
 800356a:	b004      	add	sp, #16
 800356c:	bd80      	pop	{r7, pc}
	...

08003570 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b086      	sub	sp, #24
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003578:	4a14      	ldr	r2, [pc, #80]	; (80035cc <_sbrk+0x5c>)
 800357a:	4b15      	ldr	r3, [pc, #84]	; (80035d0 <_sbrk+0x60>)
 800357c:	1ad3      	subs	r3, r2, r3
 800357e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003584:	4b13      	ldr	r3, [pc, #76]	; (80035d4 <_sbrk+0x64>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d102      	bne.n	8003592 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800358c:	4b11      	ldr	r3, [pc, #68]	; (80035d4 <_sbrk+0x64>)
 800358e:	4a12      	ldr	r2, [pc, #72]	; (80035d8 <_sbrk+0x68>)
 8003590:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003592:	4b10      	ldr	r3, [pc, #64]	; (80035d4 <_sbrk+0x64>)
 8003594:	681a      	ldr	r2, [r3, #0]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	18d3      	adds	r3, r2, r3
 800359a:	693a      	ldr	r2, [r7, #16]
 800359c:	429a      	cmp	r2, r3
 800359e:	d207      	bcs.n	80035b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80035a0:	f002 fc56 	bl	8005e50 <__errno>
 80035a4:	0003      	movs	r3, r0
 80035a6:	220c      	movs	r2, #12
 80035a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80035aa:	2301      	movs	r3, #1
 80035ac:	425b      	negs	r3, r3
 80035ae:	e009      	b.n	80035c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80035b0:	4b08      	ldr	r3, [pc, #32]	; (80035d4 <_sbrk+0x64>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80035b6:	4b07      	ldr	r3, [pc, #28]	; (80035d4 <_sbrk+0x64>)
 80035b8:	681a      	ldr	r2, [r3, #0]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	18d2      	adds	r2, r2, r3
 80035be:	4b05      	ldr	r3, [pc, #20]	; (80035d4 <_sbrk+0x64>)
 80035c0:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80035c2:	68fb      	ldr	r3, [r7, #12]
}
 80035c4:	0018      	movs	r0, r3
 80035c6:	46bd      	mov	sp, r7
 80035c8:	b006      	add	sp, #24
 80035ca:	bd80      	pop	{r7, pc}
 80035cc:	20009000 	.word	0x20009000
 80035d0:	00000400 	.word	0x00000400
 80035d4:	20000924 	.word	0x20000924
 80035d8:	20000940 	.word	0x20000940

080035dc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80035e0:	46c0      	nop			; (mov r8, r8)
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}
	...

080035e8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80035e8:	480d      	ldr	r0, [pc, #52]	; (8003620 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80035ea:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80035ec:	f7ff fff6 	bl	80035dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80035f0:	480c      	ldr	r0, [pc, #48]	; (8003624 <LoopForever+0x6>)
  ldr r1, =_edata
 80035f2:	490d      	ldr	r1, [pc, #52]	; (8003628 <LoopForever+0xa>)
  ldr r2, =_sidata
 80035f4:	4a0d      	ldr	r2, [pc, #52]	; (800362c <LoopForever+0xe>)
  movs r3, #0
 80035f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80035f8:	e002      	b.n	8003600 <LoopCopyDataInit>

080035fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80035fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80035fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80035fe:	3304      	adds	r3, #4

08003600 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003600:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003602:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003604:	d3f9      	bcc.n	80035fa <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003606:	4a0a      	ldr	r2, [pc, #40]	; (8003630 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003608:	4c0a      	ldr	r4, [pc, #40]	; (8003634 <LoopForever+0x16>)
  movs r3, #0
 800360a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800360c:	e001      	b.n	8003612 <LoopFillZerobss>

0800360e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800360e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003610:	3204      	adds	r2, #4

08003612 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003612:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003614:	d3fb      	bcc.n	800360e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003616:	f002 fc21 	bl	8005e5c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800361a:	f7ff fc07 	bl	8002e2c <main>

0800361e <LoopForever>:

LoopForever:
  b LoopForever
 800361e:	e7fe      	b.n	800361e <LoopForever>
  ldr   r0, =_estack
 8003620:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8003624:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003628:	20000214 	.word	0x20000214
  ldr r2, =_sidata
 800362c:	0800b8a4 	.word	0x0800b8a4
  ldr r2, =_sbss
 8003630:	20000214 	.word	0x20000214
  ldr r4, =_ebss
 8003634:	2000093c 	.word	0x2000093c

08003638 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003638:	e7fe      	b.n	8003638 <ADC1_IRQHandler>
	...

0800363c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b082      	sub	sp, #8
 8003640:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003642:	1dfb      	adds	r3, r7, #7
 8003644:	2200      	movs	r2, #0
 8003646:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003648:	4b0b      	ldr	r3, [pc, #44]	; (8003678 <HAL_Init+0x3c>)
 800364a:	681a      	ldr	r2, [r3, #0]
 800364c:	4b0a      	ldr	r3, [pc, #40]	; (8003678 <HAL_Init+0x3c>)
 800364e:	2180      	movs	r1, #128	; 0x80
 8003650:	0049      	lsls	r1, r1, #1
 8003652:	430a      	orrs	r2, r1
 8003654:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003656:	2000      	movs	r0, #0
 8003658:	f000 f810 	bl	800367c <HAL_InitTick>
 800365c:	1e03      	subs	r3, r0, #0
 800365e:	d003      	beq.n	8003668 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8003660:	1dfb      	adds	r3, r7, #7
 8003662:	2201      	movs	r2, #1
 8003664:	701a      	strb	r2, [r3, #0]
 8003666:	e001      	b.n	800366c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8003668:	f7ff fdcc 	bl	8003204 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800366c:	1dfb      	adds	r3, r7, #7
 800366e:	781b      	ldrb	r3, [r3, #0]
}
 8003670:	0018      	movs	r0, r3
 8003672:	46bd      	mov	sp, r7
 8003674:	b002      	add	sp, #8
 8003676:	bd80      	pop	{r7, pc}
 8003678:	40022000 	.word	0x40022000

0800367c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800367c:	b590      	push	{r4, r7, lr}
 800367e:	b085      	sub	sp, #20
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003684:	230f      	movs	r3, #15
 8003686:	18fb      	adds	r3, r7, r3
 8003688:	2200      	movs	r2, #0
 800368a:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 800368c:	4b1d      	ldr	r3, [pc, #116]	; (8003704 <HAL_InitTick+0x88>)
 800368e:	781b      	ldrb	r3, [r3, #0]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d02b      	beq.n	80036ec <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8003694:	4b1c      	ldr	r3, [pc, #112]	; (8003708 <HAL_InitTick+0x8c>)
 8003696:	681c      	ldr	r4, [r3, #0]
 8003698:	4b1a      	ldr	r3, [pc, #104]	; (8003704 <HAL_InitTick+0x88>)
 800369a:	781b      	ldrb	r3, [r3, #0]
 800369c:	0019      	movs	r1, r3
 800369e:	23fa      	movs	r3, #250	; 0xfa
 80036a0:	0098      	lsls	r0, r3, #2
 80036a2:	f7fc fd53 	bl	800014c <__udivsi3>
 80036a6:	0003      	movs	r3, r0
 80036a8:	0019      	movs	r1, r3
 80036aa:	0020      	movs	r0, r4
 80036ac:	f7fc fd4e 	bl	800014c <__udivsi3>
 80036b0:	0003      	movs	r3, r0
 80036b2:	0018      	movs	r0, r3
 80036b4:	f000 f92f 	bl	8003916 <HAL_SYSTICK_Config>
 80036b8:	1e03      	subs	r3, r0, #0
 80036ba:	d112      	bne.n	80036e2 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2b03      	cmp	r3, #3
 80036c0:	d80a      	bhi.n	80036d8 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80036c2:	6879      	ldr	r1, [r7, #4]
 80036c4:	2301      	movs	r3, #1
 80036c6:	425b      	negs	r3, r3
 80036c8:	2200      	movs	r2, #0
 80036ca:	0018      	movs	r0, r3
 80036cc:	f000 f8fe 	bl	80038cc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80036d0:	4b0e      	ldr	r3, [pc, #56]	; (800370c <HAL_InitTick+0x90>)
 80036d2:	687a      	ldr	r2, [r7, #4]
 80036d4:	601a      	str	r2, [r3, #0]
 80036d6:	e00d      	b.n	80036f4 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80036d8:	230f      	movs	r3, #15
 80036da:	18fb      	adds	r3, r7, r3
 80036dc:	2201      	movs	r2, #1
 80036de:	701a      	strb	r2, [r3, #0]
 80036e0:	e008      	b.n	80036f4 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80036e2:	230f      	movs	r3, #15
 80036e4:	18fb      	adds	r3, r7, r3
 80036e6:	2201      	movs	r2, #1
 80036e8:	701a      	strb	r2, [r3, #0]
 80036ea:	e003      	b.n	80036f4 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80036ec:	230f      	movs	r3, #15
 80036ee:	18fb      	adds	r3, r7, r3
 80036f0:	2201      	movs	r2, #1
 80036f2:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80036f4:	230f      	movs	r3, #15
 80036f6:	18fb      	adds	r3, r7, r3
 80036f8:	781b      	ldrb	r3, [r3, #0]
}
 80036fa:	0018      	movs	r0, r3
 80036fc:	46bd      	mov	sp, r7
 80036fe:	b005      	add	sp, #20
 8003700:	bd90      	pop	{r4, r7, pc}
 8003702:	46c0      	nop			; (mov r8, r8)
 8003704:	2000003c 	.word	0x2000003c
 8003708:	20000034 	.word	0x20000034
 800370c:	20000038 	.word	0x20000038

08003710 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003714:	4b05      	ldr	r3, [pc, #20]	; (800372c <HAL_IncTick+0x1c>)
 8003716:	781b      	ldrb	r3, [r3, #0]
 8003718:	001a      	movs	r2, r3
 800371a:	4b05      	ldr	r3, [pc, #20]	; (8003730 <HAL_IncTick+0x20>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	18d2      	adds	r2, r2, r3
 8003720:	4b03      	ldr	r3, [pc, #12]	; (8003730 <HAL_IncTick+0x20>)
 8003722:	601a      	str	r2, [r3, #0]
}
 8003724:	46c0      	nop			; (mov r8, r8)
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}
 800372a:	46c0      	nop			; (mov r8, r8)
 800372c:	2000003c 	.word	0x2000003c
 8003730:	20000928 	.word	0x20000928

08003734 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	af00      	add	r7, sp, #0
  return uwTick;
 8003738:	4b02      	ldr	r3, [pc, #8]	; (8003744 <HAL_GetTick+0x10>)
 800373a:	681b      	ldr	r3, [r3, #0]
}
 800373c:	0018      	movs	r0, r3
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}
 8003742:	46c0      	nop			; (mov r8, r8)
 8003744:	20000928 	.word	0x20000928

08003748 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b082      	sub	sp, #8
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8003750:	4b06      	ldr	r3, [pc, #24]	; (800376c <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a06      	ldr	r2, [pc, #24]	; (8003770 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8003756:	4013      	ands	r3, r2
 8003758:	0019      	movs	r1, r3
 800375a:	4b04      	ldr	r3, [pc, #16]	; (800376c <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 800375c:	687a      	ldr	r2, [r7, #4]
 800375e:	430a      	orrs	r2, r1
 8003760:	601a      	str	r2, [r3, #0]
}
 8003762:	46c0      	nop			; (mov r8, r8)
 8003764:	46bd      	mov	sp, r7
 8003766:	b002      	add	sp, #8
 8003768:	bd80      	pop	{r7, pc}
 800376a:	46c0      	nop			; (mov r8, r8)
 800376c:	40010000 	.word	0x40010000
 8003770:	fffff9ff 	.word	0xfffff9ff

08003774 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b082      	sub	sp, #8
 8003778:	af00      	add	r7, sp, #0
 800377a:	0002      	movs	r2, r0
 800377c:	1dfb      	adds	r3, r7, #7
 800377e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003780:	1dfb      	adds	r3, r7, #7
 8003782:	781b      	ldrb	r3, [r3, #0]
 8003784:	2b7f      	cmp	r3, #127	; 0x7f
 8003786:	d809      	bhi.n	800379c <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003788:	1dfb      	adds	r3, r7, #7
 800378a:	781b      	ldrb	r3, [r3, #0]
 800378c:	001a      	movs	r2, r3
 800378e:	231f      	movs	r3, #31
 8003790:	401a      	ands	r2, r3
 8003792:	4b04      	ldr	r3, [pc, #16]	; (80037a4 <__NVIC_EnableIRQ+0x30>)
 8003794:	2101      	movs	r1, #1
 8003796:	4091      	lsls	r1, r2
 8003798:	000a      	movs	r2, r1
 800379a:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 800379c:	46c0      	nop			; (mov r8, r8)
 800379e:	46bd      	mov	sp, r7
 80037a0:	b002      	add	sp, #8
 80037a2:	bd80      	pop	{r7, pc}
 80037a4:	e000e100 	.word	0xe000e100

080037a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80037a8:	b590      	push	{r4, r7, lr}
 80037aa:	b083      	sub	sp, #12
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	0002      	movs	r2, r0
 80037b0:	6039      	str	r1, [r7, #0]
 80037b2:	1dfb      	adds	r3, r7, #7
 80037b4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80037b6:	1dfb      	adds	r3, r7, #7
 80037b8:	781b      	ldrb	r3, [r3, #0]
 80037ba:	2b7f      	cmp	r3, #127	; 0x7f
 80037bc:	d828      	bhi.n	8003810 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80037be:	4a2f      	ldr	r2, [pc, #188]	; (800387c <__NVIC_SetPriority+0xd4>)
 80037c0:	1dfb      	adds	r3, r7, #7
 80037c2:	781b      	ldrb	r3, [r3, #0]
 80037c4:	b25b      	sxtb	r3, r3
 80037c6:	089b      	lsrs	r3, r3, #2
 80037c8:	33c0      	adds	r3, #192	; 0xc0
 80037ca:	009b      	lsls	r3, r3, #2
 80037cc:	589b      	ldr	r3, [r3, r2]
 80037ce:	1dfa      	adds	r2, r7, #7
 80037d0:	7812      	ldrb	r2, [r2, #0]
 80037d2:	0011      	movs	r1, r2
 80037d4:	2203      	movs	r2, #3
 80037d6:	400a      	ands	r2, r1
 80037d8:	00d2      	lsls	r2, r2, #3
 80037da:	21ff      	movs	r1, #255	; 0xff
 80037dc:	4091      	lsls	r1, r2
 80037de:	000a      	movs	r2, r1
 80037e0:	43d2      	mvns	r2, r2
 80037e2:	401a      	ands	r2, r3
 80037e4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	019b      	lsls	r3, r3, #6
 80037ea:	22ff      	movs	r2, #255	; 0xff
 80037ec:	401a      	ands	r2, r3
 80037ee:	1dfb      	adds	r3, r7, #7
 80037f0:	781b      	ldrb	r3, [r3, #0]
 80037f2:	0018      	movs	r0, r3
 80037f4:	2303      	movs	r3, #3
 80037f6:	4003      	ands	r3, r0
 80037f8:	00db      	lsls	r3, r3, #3
 80037fa:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80037fc:	481f      	ldr	r0, [pc, #124]	; (800387c <__NVIC_SetPriority+0xd4>)
 80037fe:	1dfb      	adds	r3, r7, #7
 8003800:	781b      	ldrb	r3, [r3, #0]
 8003802:	b25b      	sxtb	r3, r3
 8003804:	089b      	lsrs	r3, r3, #2
 8003806:	430a      	orrs	r2, r1
 8003808:	33c0      	adds	r3, #192	; 0xc0
 800380a:	009b      	lsls	r3, r3, #2
 800380c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800380e:	e031      	b.n	8003874 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003810:	4a1b      	ldr	r2, [pc, #108]	; (8003880 <__NVIC_SetPriority+0xd8>)
 8003812:	1dfb      	adds	r3, r7, #7
 8003814:	781b      	ldrb	r3, [r3, #0]
 8003816:	0019      	movs	r1, r3
 8003818:	230f      	movs	r3, #15
 800381a:	400b      	ands	r3, r1
 800381c:	3b08      	subs	r3, #8
 800381e:	089b      	lsrs	r3, r3, #2
 8003820:	3306      	adds	r3, #6
 8003822:	009b      	lsls	r3, r3, #2
 8003824:	18d3      	adds	r3, r2, r3
 8003826:	3304      	adds	r3, #4
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	1dfa      	adds	r2, r7, #7
 800382c:	7812      	ldrb	r2, [r2, #0]
 800382e:	0011      	movs	r1, r2
 8003830:	2203      	movs	r2, #3
 8003832:	400a      	ands	r2, r1
 8003834:	00d2      	lsls	r2, r2, #3
 8003836:	21ff      	movs	r1, #255	; 0xff
 8003838:	4091      	lsls	r1, r2
 800383a:	000a      	movs	r2, r1
 800383c:	43d2      	mvns	r2, r2
 800383e:	401a      	ands	r2, r3
 8003840:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	019b      	lsls	r3, r3, #6
 8003846:	22ff      	movs	r2, #255	; 0xff
 8003848:	401a      	ands	r2, r3
 800384a:	1dfb      	adds	r3, r7, #7
 800384c:	781b      	ldrb	r3, [r3, #0]
 800384e:	0018      	movs	r0, r3
 8003850:	2303      	movs	r3, #3
 8003852:	4003      	ands	r3, r0
 8003854:	00db      	lsls	r3, r3, #3
 8003856:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003858:	4809      	ldr	r0, [pc, #36]	; (8003880 <__NVIC_SetPriority+0xd8>)
 800385a:	1dfb      	adds	r3, r7, #7
 800385c:	781b      	ldrb	r3, [r3, #0]
 800385e:	001c      	movs	r4, r3
 8003860:	230f      	movs	r3, #15
 8003862:	4023      	ands	r3, r4
 8003864:	3b08      	subs	r3, #8
 8003866:	089b      	lsrs	r3, r3, #2
 8003868:	430a      	orrs	r2, r1
 800386a:	3306      	adds	r3, #6
 800386c:	009b      	lsls	r3, r3, #2
 800386e:	18c3      	adds	r3, r0, r3
 8003870:	3304      	adds	r3, #4
 8003872:	601a      	str	r2, [r3, #0]
}
 8003874:	46c0      	nop			; (mov r8, r8)
 8003876:	46bd      	mov	sp, r7
 8003878:	b003      	add	sp, #12
 800387a:	bd90      	pop	{r4, r7, pc}
 800387c:	e000e100 	.word	0xe000e100
 8003880:	e000ed00 	.word	0xe000ed00

08003884 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b082      	sub	sp, #8
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	1e5a      	subs	r2, r3, #1
 8003890:	2380      	movs	r3, #128	; 0x80
 8003892:	045b      	lsls	r3, r3, #17
 8003894:	429a      	cmp	r2, r3
 8003896:	d301      	bcc.n	800389c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003898:	2301      	movs	r3, #1
 800389a:	e010      	b.n	80038be <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800389c:	4b0a      	ldr	r3, [pc, #40]	; (80038c8 <SysTick_Config+0x44>)
 800389e:	687a      	ldr	r2, [r7, #4]
 80038a0:	3a01      	subs	r2, #1
 80038a2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80038a4:	2301      	movs	r3, #1
 80038a6:	425b      	negs	r3, r3
 80038a8:	2103      	movs	r1, #3
 80038aa:	0018      	movs	r0, r3
 80038ac:	f7ff ff7c 	bl	80037a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80038b0:	4b05      	ldr	r3, [pc, #20]	; (80038c8 <SysTick_Config+0x44>)
 80038b2:	2200      	movs	r2, #0
 80038b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80038b6:	4b04      	ldr	r3, [pc, #16]	; (80038c8 <SysTick_Config+0x44>)
 80038b8:	2207      	movs	r2, #7
 80038ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80038bc:	2300      	movs	r3, #0
}
 80038be:	0018      	movs	r0, r3
 80038c0:	46bd      	mov	sp, r7
 80038c2:	b002      	add	sp, #8
 80038c4:	bd80      	pop	{r7, pc}
 80038c6:	46c0      	nop			; (mov r8, r8)
 80038c8:	e000e010 	.word	0xe000e010

080038cc <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b084      	sub	sp, #16
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	60b9      	str	r1, [r7, #8]
 80038d4:	607a      	str	r2, [r7, #4]
 80038d6:	210f      	movs	r1, #15
 80038d8:	187b      	adds	r3, r7, r1
 80038da:	1c02      	adds	r2, r0, #0
 80038dc:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80038de:	68ba      	ldr	r2, [r7, #8]
 80038e0:	187b      	adds	r3, r7, r1
 80038e2:	781b      	ldrb	r3, [r3, #0]
 80038e4:	b25b      	sxtb	r3, r3
 80038e6:	0011      	movs	r1, r2
 80038e8:	0018      	movs	r0, r3
 80038ea:	f7ff ff5d 	bl	80037a8 <__NVIC_SetPriority>
}
 80038ee:	46c0      	nop			; (mov r8, r8)
 80038f0:	46bd      	mov	sp, r7
 80038f2:	b004      	add	sp, #16
 80038f4:	bd80      	pop	{r7, pc}

080038f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038f6:	b580      	push	{r7, lr}
 80038f8:	b082      	sub	sp, #8
 80038fa:	af00      	add	r7, sp, #0
 80038fc:	0002      	movs	r2, r0
 80038fe:	1dfb      	adds	r3, r7, #7
 8003900:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003902:	1dfb      	adds	r3, r7, #7
 8003904:	781b      	ldrb	r3, [r3, #0]
 8003906:	b25b      	sxtb	r3, r3
 8003908:	0018      	movs	r0, r3
 800390a:	f7ff ff33 	bl	8003774 <__NVIC_EnableIRQ>
}
 800390e:	46c0      	nop			; (mov r8, r8)
 8003910:	46bd      	mov	sp, r7
 8003912:	b002      	add	sp, #8
 8003914:	bd80      	pop	{r7, pc}

08003916 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003916:	b580      	push	{r7, lr}
 8003918:	b082      	sub	sp, #8
 800391a:	af00      	add	r7, sp, #0
 800391c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	0018      	movs	r0, r3
 8003922:	f7ff ffaf 	bl	8003884 <SysTick_Config>
 8003926:	0003      	movs	r3, r0
}
 8003928:	0018      	movs	r0, r3
 800392a:	46bd      	mov	sp, r7
 800392c:	b002      	add	sp, #8
 800392e:	bd80      	pop	{r7, pc}

08003930 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b082      	sub	sp, #8
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d101      	bne.n	8003942 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	e077      	b.n	8003a32 <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a3d      	ldr	r2, [pc, #244]	; (8003a3c <HAL_DMA_Init+0x10c>)
 8003948:	4694      	mov	ip, r2
 800394a:	4463      	add	r3, ip
 800394c:	2114      	movs	r1, #20
 800394e:	0018      	movs	r0, r3
 8003950:	f7fc fbfc 	bl	800014c <__udivsi3>
 8003954:	0003      	movs	r3, r0
 8003956:	009a      	lsls	r2, r3, #2
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2225      	movs	r2, #37	; 0x25
 8003960:	2102      	movs	r1, #2
 8003962:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	681a      	ldr	r2, [r3, #0]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4934      	ldr	r1, [pc, #208]	; (8003a40 <HAL_DMA_Init+0x110>)
 8003970:	400a      	ands	r2, r1
 8003972:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	6819      	ldr	r1, [r3, #0]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	689a      	ldr	r2, [r3, #8]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	68db      	ldr	r3, [r3, #12]
 8003982:	431a      	orrs	r2, r3
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	691b      	ldr	r3, [r3, #16]
 8003988:	431a      	orrs	r2, r3
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	695b      	ldr	r3, [r3, #20]
 800398e:	431a      	orrs	r2, r3
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	699b      	ldr	r3, [r3, #24]
 8003994:	431a      	orrs	r2, r3
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	69db      	ldr	r3, [r3, #28]
 800399a:	431a      	orrs	r2, r3
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6a1b      	ldr	r3, [r3, #32]
 80039a0:	431a      	orrs	r2, r3
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	430a      	orrs	r2, r1
 80039a8:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	0018      	movs	r0, r3
 80039ae:	f000 f9c1 	bl	8003d34 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	689a      	ldr	r2, [r3, #8]
 80039b6:	2380      	movs	r3, #128	; 0x80
 80039b8:	01db      	lsls	r3, r3, #7
 80039ba:	429a      	cmp	r2, r3
 80039bc:	d102      	bne.n	80039c4 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2200      	movs	r2, #0
 80039c2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	685a      	ldr	r2, [r3, #4]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039cc:	213f      	movs	r1, #63	; 0x3f
 80039ce:	400a      	ands	r2, r1
 80039d0:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039d6:	687a      	ldr	r2, [r7, #4]
 80039d8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80039da:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d011      	beq.n	8003a08 <HAL_DMA_Init+0xd8>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	2b04      	cmp	r3, #4
 80039ea:	d80d      	bhi.n	8003a08 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	0018      	movs	r0, r3
 80039f0:	f000 f9cc 	bl	8003d8c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039f8:	2200      	movs	r2, #0
 80039fa:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a00:	687a      	ldr	r2, [r7, #4]
 8003a02:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003a04:	605a      	str	r2, [r3, #4]
 8003a06:	e008      	b.n	8003a1a <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2200      	movs	r2, #0
 8003a12:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2200      	movs	r2, #0
 8003a18:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2225      	movs	r2, #37	; 0x25
 8003a24:	2101      	movs	r1, #1
 8003a26:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2224      	movs	r2, #36	; 0x24
 8003a2c:	2100      	movs	r1, #0
 8003a2e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003a30:	2300      	movs	r3, #0
}
 8003a32:	0018      	movs	r0, r3
 8003a34:	46bd      	mov	sp, r7
 8003a36:	b002      	add	sp, #8
 8003a38:	bd80      	pop	{r7, pc}
 8003a3a:	46c0      	nop			; (mov r8, r8)
 8003a3c:	bffdfff8 	.word	0xbffdfff8
 8003a40:	ffff800f 	.word	0xffff800f

08003a44 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b086      	sub	sp, #24
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	60f8      	str	r0, [r7, #12]
 8003a4c:	60b9      	str	r1, [r7, #8]
 8003a4e:	607a      	str	r2, [r7, #4]
 8003a50:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a52:	2317      	movs	r3, #23
 8003a54:	18fb      	adds	r3, r7, r3
 8003a56:	2200      	movs	r2, #0
 8003a58:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2224      	movs	r2, #36	; 0x24
 8003a5e:	5c9b      	ldrb	r3, [r3, r2]
 8003a60:	2b01      	cmp	r3, #1
 8003a62:	d101      	bne.n	8003a68 <HAL_DMA_Start_IT+0x24>
 8003a64:	2302      	movs	r3, #2
 8003a66:	e06f      	b.n	8003b48 <HAL_DMA_Start_IT+0x104>
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	2224      	movs	r2, #36	; 0x24
 8003a6c:	2101      	movs	r1, #1
 8003a6e:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	2225      	movs	r2, #37	; 0x25
 8003a74:	5c9b      	ldrb	r3, [r3, r2]
 8003a76:	b2db      	uxtb	r3, r3
 8003a78:	2b01      	cmp	r3, #1
 8003a7a:	d157      	bne.n	8003b2c <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	2225      	movs	r2, #37	; 0x25
 8003a80:	2102      	movs	r1, #2
 8003a82:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	2200      	movs	r2, #0
 8003a88:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	681a      	ldr	r2, [r3, #0]
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	2101      	movs	r1, #1
 8003a96:	438a      	bics	r2, r1
 8003a98:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	687a      	ldr	r2, [r7, #4]
 8003a9e:	68b9      	ldr	r1, [r7, #8]
 8003aa0:	68f8      	ldr	r0, [r7, #12]
 8003aa2:	f000 f907 	bl	8003cb4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d008      	beq.n	8003ac0 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	681a      	ldr	r2, [r3, #0]
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	210e      	movs	r1, #14
 8003aba:	430a      	orrs	r2, r1
 8003abc:	601a      	str	r2, [r3, #0]
 8003abe:	e00f      	b.n	8003ae0 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	681a      	ldr	r2, [r3, #0]
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	2104      	movs	r1, #4
 8003acc:	438a      	bics	r2, r1
 8003ace:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	681a      	ldr	r2, [r3, #0]
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	210a      	movs	r1, #10
 8003adc:	430a      	orrs	r2, r1
 8003ade:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ae4:	681a      	ldr	r2, [r3, #0]
 8003ae6:	2380      	movs	r3, #128	; 0x80
 8003ae8:	025b      	lsls	r3, r3, #9
 8003aea:	4013      	ands	r3, r2
 8003aec:	d008      	beq.n	8003b00 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003af2:	681a      	ldr	r2, [r3, #0]
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003af8:	2180      	movs	r1, #128	; 0x80
 8003afa:	0049      	lsls	r1, r1, #1
 8003afc:	430a      	orrs	r2, r1
 8003afe:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d008      	beq.n	8003b1a <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b0c:	681a      	ldr	r2, [r3, #0]
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b12:	2180      	movs	r1, #128	; 0x80
 8003b14:	0049      	lsls	r1, r1, #1
 8003b16:	430a      	orrs	r2, r1
 8003b18:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	681a      	ldr	r2, [r3, #0]
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	2101      	movs	r1, #1
 8003b26:	430a      	orrs	r2, r1
 8003b28:	601a      	str	r2, [r3, #0]
 8003b2a:	e00a      	b.n	8003b42 <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	2280      	movs	r2, #128	; 0x80
 8003b30:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	2224      	movs	r2, #36	; 0x24
 8003b36:	2100      	movs	r1, #0
 8003b38:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 8003b3a:	2317      	movs	r3, #23
 8003b3c:	18fb      	adds	r3, r7, r3
 8003b3e:	2201      	movs	r2, #1
 8003b40:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8003b42:	2317      	movs	r3, #23
 8003b44:	18fb      	adds	r3, r7, r3
 8003b46:	781b      	ldrb	r3, [r3, #0]
}
 8003b48:	0018      	movs	r0, r3
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	b006      	add	sp, #24
 8003b4e:	bd80      	pop	{r7, pc}

08003b50 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b084      	sub	sp, #16
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8003b58:	4b55      	ldr	r3, [pc, #340]	; (8003cb0 <HAL_DMA_IRQHandler+0x160>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b6a:	221c      	movs	r2, #28
 8003b6c:	4013      	ands	r3, r2
 8003b6e:	2204      	movs	r2, #4
 8003b70:	409a      	lsls	r2, r3
 8003b72:	0013      	movs	r3, r2
 8003b74:	68fa      	ldr	r2, [r7, #12]
 8003b76:	4013      	ands	r3, r2
 8003b78:	d027      	beq.n	8003bca <HAL_DMA_IRQHandler+0x7a>
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	2204      	movs	r2, #4
 8003b7e:	4013      	ands	r3, r2
 8003b80:	d023      	beq.n	8003bca <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	2220      	movs	r2, #32
 8003b8a:	4013      	ands	r3, r2
 8003b8c:	d107      	bne.n	8003b9e <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	681a      	ldr	r2, [r3, #0]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	2104      	movs	r1, #4
 8003b9a:	438a      	bics	r2, r1
 8003b9c:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8003b9e:	4b44      	ldr	r3, [pc, #272]	; (8003cb0 <HAL_DMA_IRQHandler+0x160>)
 8003ba0:	6859      	ldr	r1, [r3, #4]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba6:	221c      	movs	r2, #28
 8003ba8:	4013      	ands	r3, r2
 8003baa:	2204      	movs	r2, #4
 8003bac:	409a      	lsls	r2, r3
 8003bae:	4b40      	ldr	r3, [pc, #256]	; (8003cb0 <HAL_DMA_IRQHandler+0x160>)
 8003bb0:	430a      	orrs	r2, r1
 8003bb2:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d100      	bne.n	8003bbe <HAL_DMA_IRQHandler+0x6e>
 8003bbc:	e073      	b.n	8003ca6 <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bc2:	687a      	ldr	r2, [r7, #4]
 8003bc4:	0010      	movs	r0, r2
 8003bc6:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8003bc8:	e06d      	b.n	8003ca6 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bce:	221c      	movs	r2, #28
 8003bd0:	4013      	ands	r3, r2
 8003bd2:	2202      	movs	r2, #2
 8003bd4:	409a      	lsls	r2, r3
 8003bd6:	0013      	movs	r3, r2
 8003bd8:	68fa      	ldr	r2, [r7, #12]
 8003bda:	4013      	ands	r3, r2
 8003bdc:	d02e      	beq.n	8003c3c <HAL_DMA_IRQHandler+0xec>
 8003bde:	68bb      	ldr	r3, [r7, #8]
 8003be0:	2202      	movs	r2, #2
 8003be2:	4013      	ands	r3, r2
 8003be4:	d02a      	beq.n	8003c3c <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	2220      	movs	r2, #32
 8003bee:	4013      	ands	r3, r2
 8003bf0:	d10b      	bne.n	8003c0a <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	681a      	ldr	r2, [r3, #0]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	210a      	movs	r1, #10
 8003bfe:	438a      	bics	r2, r1
 8003c00:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2225      	movs	r2, #37	; 0x25
 8003c06:	2101      	movs	r1, #1
 8003c08:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8003c0a:	4b29      	ldr	r3, [pc, #164]	; (8003cb0 <HAL_DMA_IRQHandler+0x160>)
 8003c0c:	6859      	ldr	r1, [r3, #4]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c12:	221c      	movs	r2, #28
 8003c14:	4013      	ands	r3, r2
 8003c16:	2202      	movs	r2, #2
 8003c18:	409a      	lsls	r2, r3
 8003c1a:	4b25      	ldr	r3, [pc, #148]	; (8003cb0 <HAL_DMA_IRQHandler+0x160>)
 8003c1c:	430a      	orrs	r2, r1
 8003c1e:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2224      	movs	r2, #36	; 0x24
 8003c24:	2100      	movs	r1, #0
 8003c26:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d03a      	beq.n	8003ca6 <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c34:	687a      	ldr	r2, [r7, #4]
 8003c36:	0010      	movs	r0, r2
 8003c38:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8003c3a:	e034      	b.n	8003ca6 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c40:	221c      	movs	r2, #28
 8003c42:	4013      	ands	r3, r2
 8003c44:	2208      	movs	r2, #8
 8003c46:	409a      	lsls	r2, r3
 8003c48:	0013      	movs	r3, r2
 8003c4a:	68fa      	ldr	r2, [r7, #12]
 8003c4c:	4013      	ands	r3, r2
 8003c4e:	d02b      	beq.n	8003ca8 <HAL_DMA_IRQHandler+0x158>
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	2208      	movs	r2, #8
 8003c54:	4013      	ands	r3, r2
 8003c56:	d027      	beq.n	8003ca8 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	681a      	ldr	r2, [r3, #0]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	210e      	movs	r1, #14
 8003c64:	438a      	bics	r2, r1
 8003c66:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8003c68:	4b11      	ldr	r3, [pc, #68]	; (8003cb0 <HAL_DMA_IRQHandler+0x160>)
 8003c6a:	6859      	ldr	r1, [r3, #4]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c70:	221c      	movs	r2, #28
 8003c72:	4013      	ands	r3, r2
 8003c74:	2201      	movs	r2, #1
 8003c76:	409a      	lsls	r2, r3
 8003c78:	4b0d      	ldr	r3, [pc, #52]	; (8003cb0 <HAL_DMA_IRQHandler+0x160>)
 8003c7a:	430a      	orrs	r2, r1
 8003c7c:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2201      	movs	r2, #1
 8003c82:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2225      	movs	r2, #37	; 0x25
 8003c88:	2101      	movs	r1, #1
 8003c8a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2224      	movs	r2, #36	; 0x24
 8003c90:	2100      	movs	r1, #0
 8003c92:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d005      	beq.n	8003ca8 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ca0:	687a      	ldr	r2, [r7, #4]
 8003ca2:	0010      	movs	r0, r2
 8003ca4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003ca6:	46c0      	nop			; (mov r8, r8)
 8003ca8:	46c0      	nop			; (mov r8, r8)
}
 8003caa:	46bd      	mov	sp, r7
 8003cac:	b004      	add	sp, #16
 8003cae:	bd80      	pop	{r7, pc}
 8003cb0:	40020000 	.word	0x40020000

08003cb4 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b084      	sub	sp, #16
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	60f8      	str	r0, [r7, #12]
 8003cbc:	60b9      	str	r1, [r7, #8]
 8003cbe:	607a      	str	r2, [r7, #4]
 8003cc0:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cc6:	68fa      	ldr	r2, [r7, #12]
 8003cc8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003cca:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d004      	beq.n	8003cde <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cd8:	68fa      	ldr	r2, [r7, #12]
 8003cda:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003cdc:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8003cde:	4b14      	ldr	r3, [pc, #80]	; (8003d30 <DMA_SetConfig+0x7c>)
 8003ce0:	6859      	ldr	r1, [r3, #4]
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce6:	221c      	movs	r2, #28
 8003ce8:	4013      	ands	r3, r2
 8003cea:	2201      	movs	r2, #1
 8003cec:	409a      	lsls	r2, r3
 8003cee:	4b10      	ldr	r3, [pc, #64]	; (8003d30 <DMA_SetConfig+0x7c>)
 8003cf0:	430a      	orrs	r2, r1
 8003cf2:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	683a      	ldr	r2, [r7, #0]
 8003cfa:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	689b      	ldr	r3, [r3, #8]
 8003d00:	2b10      	cmp	r3, #16
 8003d02:	d108      	bne.n	8003d16 <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	687a      	ldr	r2, [r7, #4]
 8003d0a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	68ba      	ldr	r2, [r7, #8]
 8003d12:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003d14:	e007      	b.n	8003d26 <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	68ba      	ldr	r2, [r7, #8]
 8003d1c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	687a      	ldr	r2, [r7, #4]
 8003d24:	60da      	str	r2, [r3, #12]
}
 8003d26:	46c0      	nop			; (mov r8, r8)
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	b004      	add	sp, #16
 8003d2c:	bd80      	pop	{r7, pc}
 8003d2e:	46c0      	nop			; (mov r8, r8)
 8003d30:	40020000 	.word	0x40020000

08003d34 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b084      	sub	sp, #16
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d40:	089b      	lsrs	r3, r3, #2
 8003d42:	4a10      	ldr	r2, [pc, #64]	; (8003d84 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8003d44:	4694      	mov	ip, r2
 8003d46:	4463      	add	r3, ip
 8003d48:	009b      	lsls	r3, r3, #2
 8003d4a:	001a      	movs	r2, r3
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	001a      	movs	r2, r3
 8003d56:	23ff      	movs	r3, #255	; 0xff
 8003d58:	4013      	ands	r3, r2
 8003d5a:	3b08      	subs	r3, #8
 8003d5c:	2114      	movs	r1, #20
 8003d5e:	0018      	movs	r0, r3
 8003d60:	f7fc f9f4 	bl	800014c <__udivsi3>
 8003d64:	0003      	movs	r3, r0
 8003d66:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	4a07      	ldr	r2, [pc, #28]	; (8003d88 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8003d6c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	221f      	movs	r2, #31
 8003d72:	4013      	ands	r3, r2
 8003d74:	2201      	movs	r2, #1
 8003d76:	409a      	lsls	r2, r3
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8003d7c:	46c0      	nop			; (mov r8, r8)
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	b004      	add	sp, #16
 8003d82:	bd80      	pop	{r7, pc}
 8003d84:	10008200 	.word	0x10008200
 8003d88:	40020880 	.word	0x40020880

08003d8c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b084      	sub	sp, #16
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	223f      	movs	r2, #63	; 0x3f
 8003d9a:	4013      	ands	r3, r2
 8003d9c:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	4a0a      	ldr	r2, [pc, #40]	; (8003dcc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003da2:	4694      	mov	ip, r2
 8003da4:	4463      	add	r3, ip
 8003da6:	009b      	lsls	r3, r3, #2
 8003da8:	001a      	movs	r2, r3
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	4a07      	ldr	r2, [pc, #28]	; (8003dd0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003db2:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	3b01      	subs	r3, #1
 8003db8:	2203      	movs	r2, #3
 8003dba:	4013      	ands	r3, r2
 8003dbc:	2201      	movs	r2, #1
 8003dbe:	409a      	lsls	r2, r3
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	659a      	str	r2, [r3, #88]	; 0x58
}
 8003dc4:	46c0      	nop			; (mov r8, r8)
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	b004      	add	sp, #16
 8003dca:	bd80      	pop	{r7, pc}
 8003dcc:	1000823f 	.word	0x1000823f
 8003dd0:	40020940 	.word	0x40020940

08003dd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b086      	sub	sp, #24
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
 8003ddc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003dde:	2300      	movs	r3, #0
 8003de0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003de2:	e147      	b.n	8004074 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	2101      	movs	r1, #1
 8003dea:	697a      	ldr	r2, [r7, #20]
 8003dec:	4091      	lsls	r1, r2
 8003dee:	000a      	movs	r2, r1
 8003df0:	4013      	ands	r3, r2
 8003df2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d100      	bne.n	8003dfc <HAL_GPIO_Init+0x28>
 8003dfa:	e138      	b.n	800406e <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	2203      	movs	r2, #3
 8003e02:	4013      	ands	r3, r2
 8003e04:	2b01      	cmp	r3, #1
 8003e06:	d005      	beq.n	8003e14 <HAL_GPIO_Init+0x40>
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	2203      	movs	r2, #3
 8003e0e:	4013      	ands	r3, r2
 8003e10:	2b02      	cmp	r3, #2
 8003e12:	d130      	bne.n	8003e76 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	689b      	ldr	r3, [r3, #8]
 8003e18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	005b      	lsls	r3, r3, #1
 8003e1e:	2203      	movs	r2, #3
 8003e20:	409a      	lsls	r2, r3
 8003e22:	0013      	movs	r3, r2
 8003e24:	43da      	mvns	r2, r3
 8003e26:	693b      	ldr	r3, [r7, #16]
 8003e28:	4013      	ands	r3, r2
 8003e2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	68da      	ldr	r2, [r3, #12]
 8003e30:	697b      	ldr	r3, [r7, #20]
 8003e32:	005b      	lsls	r3, r3, #1
 8003e34:	409a      	lsls	r2, r3
 8003e36:	0013      	movs	r3, r2
 8003e38:	693a      	ldr	r2, [r7, #16]
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	693a      	ldr	r2, [r7, #16]
 8003e42:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	409a      	lsls	r2, r3
 8003e50:	0013      	movs	r3, r2
 8003e52:	43da      	mvns	r2, r3
 8003e54:	693b      	ldr	r3, [r7, #16]
 8003e56:	4013      	ands	r3, r2
 8003e58:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	091b      	lsrs	r3, r3, #4
 8003e60:	2201      	movs	r2, #1
 8003e62:	401a      	ands	r2, r3
 8003e64:	697b      	ldr	r3, [r7, #20]
 8003e66:	409a      	lsls	r2, r3
 8003e68:	0013      	movs	r3, r2
 8003e6a:	693a      	ldr	r2, [r7, #16]
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	693a      	ldr	r2, [r7, #16]
 8003e74:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	2203      	movs	r2, #3
 8003e7c:	4013      	ands	r3, r2
 8003e7e:	2b03      	cmp	r3, #3
 8003e80:	d017      	beq.n	8003eb2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	68db      	ldr	r3, [r3, #12]
 8003e86:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003e88:	697b      	ldr	r3, [r7, #20]
 8003e8a:	005b      	lsls	r3, r3, #1
 8003e8c:	2203      	movs	r2, #3
 8003e8e:	409a      	lsls	r2, r3
 8003e90:	0013      	movs	r3, r2
 8003e92:	43da      	mvns	r2, r3
 8003e94:	693b      	ldr	r3, [r7, #16]
 8003e96:	4013      	ands	r3, r2
 8003e98:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	689a      	ldr	r2, [r3, #8]
 8003e9e:	697b      	ldr	r3, [r7, #20]
 8003ea0:	005b      	lsls	r3, r3, #1
 8003ea2:	409a      	lsls	r2, r3
 8003ea4:	0013      	movs	r3, r2
 8003ea6:	693a      	ldr	r2, [r7, #16]
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	693a      	ldr	r2, [r7, #16]
 8003eb0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	2203      	movs	r2, #3
 8003eb8:	4013      	ands	r3, r2
 8003eba:	2b02      	cmp	r3, #2
 8003ebc:	d123      	bne.n	8003f06 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	08da      	lsrs	r2, r3, #3
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	3208      	adds	r2, #8
 8003ec6:	0092      	lsls	r2, r2, #2
 8003ec8:	58d3      	ldr	r3, [r2, r3]
 8003eca:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003ecc:	697b      	ldr	r3, [r7, #20]
 8003ece:	2207      	movs	r2, #7
 8003ed0:	4013      	ands	r3, r2
 8003ed2:	009b      	lsls	r3, r3, #2
 8003ed4:	220f      	movs	r2, #15
 8003ed6:	409a      	lsls	r2, r3
 8003ed8:	0013      	movs	r3, r2
 8003eda:	43da      	mvns	r2, r3
 8003edc:	693b      	ldr	r3, [r7, #16]
 8003ede:	4013      	ands	r3, r2
 8003ee0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	691a      	ldr	r2, [r3, #16]
 8003ee6:	697b      	ldr	r3, [r7, #20]
 8003ee8:	2107      	movs	r1, #7
 8003eea:	400b      	ands	r3, r1
 8003eec:	009b      	lsls	r3, r3, #2
 8003eee:	409a      	lsls	r2, r3
 8003ef0:	0013      	movs	r3, r2
 8003ef2:	693a      	ldr	r2, [r7, #16]
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003ef8:	697b      	ldr	r3, [r7, #20]
 8003efa:	08da      	lsrs	r2, r3, #3
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	3208      	adds	r2, #8
 8003f00:	0092      	lsls	r2, r2, #2
 8003f02:	6939      	ldr	r1, [r7, #16]
 8003f04:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	005b      	lsls	r3, r3, #1
 8003f10:	2203      	movs	r2, #3
 8003f12:	409a      	lsls	r2, r3
 8003f14:	0013      	movs	r3, r2
 8003f16:	43da      	mvns	r2, r3
 8003f18:	693b      	ldr	r3, [r7, #16]
 8003f1a:	4013      	ands	r3, r2
 8003f1c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	2203      	movs	r2, #3
 8003f24:	401a      	ands	r2, r3
 8003f26:	697b      	ldr	r3, [r7, #20]
 8003f28:	005b      	lsls	r3, r3, #1
 8003f2a:	409a      	lsls	r2, r3
 8003f2c:	0013      	movs	r3, r2
 8003f2e:	693a      	ldr	r2, [r7, #16]
 8003f30:	4313      	orrs	r3, r2
 8003f32:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	693a      	ldr	r2, [r7, #16]
 8003f38:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	685a      	ldr	r2, [r3, #4]
 8003f3e:	23c0      	movs	r3, #192	; 0xc0
 8003f40:	029b      	lsls	r3, r3, #10
 8003f42:	4013      	ands	r3, r2
 8003f44:	d100      	bne.n	8003f48 <HAL_GPIO_Init+0x174>
 8003f46:	e092      	b.n	800406e <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8003f48:	4a50      	ldr	r2, [pc, #320]	; (800408c <HAL_GPIO_Init+0x2b8>)
 8003f4a:	697b      	ldr	r3, [r7, #20]
 8003f4c:	089b      	lsrs	r3, r3, #2
 8003f4e:	3318      	adds	r3, #24
 8003f50:	009b      	lsls	r3, r3, #2
 8003f52:	589b      	ldr	r3, [r3, r2]
 8003f54:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8003f56:	697b      	ldr	r3, [r7, #20]
 8003f58:	2203      	movs	r2, #3
 8003f5a:	4013      	ands	r3, r2
 8003f5c:	00db      	lsls	r3, r3, #3
 8003f5e:	220f      	movs	r2, #15
 8003f60:	409a      	lsls	r2, r3
 8003f62:	0013      	movs	r3, r2
 8003f64:	43da      	mvns	r2, r3
 8003f66:	693b      	ldr	r3, [r7, #16]
 8003f68:	4013      	ands	r3, r2
 8003f6a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8003f6c:	687a      	ldr	r2, [r7, #4]
 8003f6e:	23a0      	movs	r3, #160	; 0xa0
 8003f70:	05db      	lsls	r3, r3, #23
 8003f72:	429a      	cmp	r2, r3
 8003f74:	d013      	beq.n	8003f9e <HAL_GPIO_Init+0x1ca>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	4a45      	ldr	r2, [pc, #276]	; (8004090 <HAL_GPIO_Init+0x2bc>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d00d      	beq.n	8003f9a <HAL_GPIO_Init+0x1c6>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	4a44      	ldr	r2, [pc, #272]	; (8004094 <HAL_GPIO_Init+0x2c0>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d007      	beq.n	8003f96 <HAL_GPIO_Init+0x1c2>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	4a43      	ldr	r2, [pc, #268]	; (8004098 <HAL_GPIO_Init+0x2c4>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d101      	bne.n	8003f92 <HAL_GPIO_Init+0x1be>
 8003f8e:	2303      	movs	r3, #3
 8003f90:	e006      	b.n	8003fa0 <HAL_GPIO_Init+0x1cc>
 8003f92:	2305      	movs	r3, #5
 8003f94:	e004      	b.n	8003fa0 <HAL_GPIO_Init+0x1cc>
 8003f96:	2302      	movs	r3, #2
 8003f98:	e002      	b.n	8003fa0 <HAL_GPIO_Init+0x1cc>
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	e000      	b.n	8003fa0 <HAL_GPIO_Init+0x1cc>
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	697a      	ldr	r2, [r7, #20]
 8003fa2:	2103      	movs	r1, #3
 8003fa4:	400a      	ands	r2, r1
 8003fa6:	00d2      	lsls	r2, r2, #3
 8003fa8:	4093      	lsls	r3, r2
 8003faa:	693a      	ldr	r2, [r7, #16]
 8003fac:	4313      	orrs	r3, r2
 8003fae:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8003fb0:	4936      	ldr	r1, [pc, #216]	; (800408c <HAL_GPIO_Init+0x2b8>)
 8003fb2:	697b      	ldr	r3, [r7, #20]
 8003fb4:	089b      	lsrs	r3, r3, #2
 8003fb6:	3318      	adds	r3, #24
 8003fb8:	009b      	lsls	r3, r3, #2
 8003fba:	693a      	ldr	r2, [r7, #16]
 8003fbc:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003fbe:	4b33      	ldr	r3, [pc, #204]	; (800408c <HAL_GPIO_Init+0x2b8>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	43da      	mvns	r2, r3
 8003fc8:	693b      	ldr	r3, [r7, #16]
 8003fca:	4013      	ands	r3, r2
 8003fcc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	685a      	ldr	r2, [r3, #4]
 8003fd2:	2380      	movs	r3, #128	; 0x80
 8003fd4:	035b      	lsls	r3, r3, #13
 8003fd6:	4013      	ands	r3, r2
 8003fd8:	d003      	beq.n	8003fe2 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8003fda:	693a      	ldr	r2, [r7, #16]
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003fe2:	4b2a      	ldr	r3, [pc, #168]	; (800408c <HAL_GPIO_Init+0x2b8>)
 8003fe4:	693a      	ldr	r2, [r7, #16]
 8003fe6:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8003fe8:	4b28      	ldr	r3, [pc, #160]	; (800408c <HAL_GPIO_Init+0x2b8>)
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	43da      	mvns	r2, r3
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	4013      	ands	r3, r2
 8003ff6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	685a      	ldr	r2, [r3, #4]
 8003ffc:	2380      	movs	r3, #128	; 0x80
 8003ffe:	039b      	lsls	r3, r3, #14
 8004000:	4013      	ands	r3, r2
 8004002:	d003      	beq.n	800400c <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8004004:	693a      	ldr	r2, [r7, #16]
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	4313      	orrs	r3, r2
 800400a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800400c:	4b1f      	ldr	r3, [pc, #124]	; (800408c <HAL_GPIO_Init+0x2b8>)
 800400e:	693a      	ldr	r2, [r7, #16]
 8004010:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004012:	4a1e      	ldr	r2, [pc, #120]	; (800408c <HAL_GPIO_Init+0x2b8>)
 8004014:	2384      	movs	r3, #132	; 0x84
 8004016:	58d3      	ldr	r3, [r2, r3]
 8004018:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	43da      	mvns	r2, r3
 800401e:	693b      	ldr	r3, [r7, #16]
 8004020:	4013      	ands	r3, r2
 8004022:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	685a      	ldr	r2, [r3, #4]
 8004028:	2380      	movs	r3, #128	; 0x80
 800402a:	029b      	lsls	r3, r3, #10
 800402c:	4013      	ands	r3, r2
 800402e:	d003      	beq.n	8004038 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8004030:	693a      	ldr	r2, [r7, #16]
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	4313      	orrs	r3, r2
 8004036:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004038:	4914      	ldr	r1, [pc, #80]	; (800408c <HAL_GPIO_Init+0x2b8>)
 800403a:	2284      	movs	r2, #132	; 0x84
 800403c:	693b      	ldr	r3, [r7, #16]
 800403e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8004040:	4a12      	ldr	r2, [pc, #72]	; (800408c <HAL_GPIO_Init+0x2b8>)
 8004042:	2380      	movs	r3, #128	; 0x80
 8004044:	58d3      	ldr	r3, [r2, r3]
 8004046:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	43da      	mvns	r2, r3
 800404c:	693b      	ldr	r3, [r7, #16]
 800404e:	4013      	ands	r3, r2
 8004050:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	685a      	ldr	r2, [r3, #4]
 8004056:	2380      	movs	r3, #128	; 0x80
 8004058:	025b      	lsls	r3, r3, #9
 800405a:	4013      	ands	r3, r2
 800405c:	d003      	beq.n	8004066 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800405e:	693a      	ldr	r2, [r7, #16]
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	4313      	orrs	r3, r2
 8004064:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004066:	4909      	ldr	r1, [pc, #36]	; (800408c <HAL_GPIO_Init+0x2b8>)
 8004068:	2280      	movs	r2, #128	; 0x80
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800406e:	697b      	ldr	r3, [r7, #20]
 8004070:	3301      	adds	r3, #1
 8004072:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	681a      	ldr	r2, [r3, #0]
 8004078:	697b      	ldr	r3, [r7, #20]
 800407a:	40da      	lsrs	r2, r3
 800407c:	1e13      	subs	r3, r2, #0
 800407e:	d000      	beq.n	8004082 <HAL_GPIO_Init+0x2ae>
 8004080:	e6b0      	b.n	8003de4 <HAL_GPIO_Init+0x10>
  }
}
 8004082:	46c0      	nop			; (mov r8, r8)
 8004084:	46c0      	nop			; (mov r8, r8)
 8004086:	46bd      	mov	sp, r7
 8004088:	b006      	add	sp, #24
 800408a:	bd80      	pop	{r7, pc}
 800408c:	40021800 	.word	0x40021800
 8004090:	50000400 	.word	0x50000400
 8004094:	50000800 	.word	0x50000800
 8004098:	50000c00 	.word	0x50000c00

0800409c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b082      	sub	sp, #8
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
 80040a4:	0008      	movs	r0, r1
 80040a6:	0011      	movs	r1, r2
 80040a8:	1cbb      	adds	r3, r7, #2
 80040aa:	1c02      	adds	r2, r0, #0
 80040ac:	801a      	strh	r2, [r3, #0]
 80040ae:	1c7b      	adds	r3, r7, #1
 80040b0:	1c0a      	adds	r2, r1, #0
 80040b2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80040b4:	1c7b      	adds	r3, r7, #1
 80040b6:	781b      	ldrb	r3, [r3, #0]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d004      	beq.n	80040c6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80040bc:	1cbb      	adds	r3, r7, #2
 80040be:	881a      	ldrh	r2, [r3, #0]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80040c4:	e003      	b.n	80040ce <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80040c6:	1cbb      	adds	r3, r7, #2
 80040c8:	881a      	ldrh	r2, [r3, #0]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	629a      	str	r2, [r3, #40]	; 0x28
}
 80040ce:	46c0      	nop			; (mov r8, r8)
 80040d0:	46bd      	mov	sp, r7
 80040d2:	b002      	add	sp, #8
 80040d4:	bd80      	pop	{r7, pc}
	...

080040d8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b082      	sub	sp, #8
 80040dc:	af00      	add	r7, sp, #0
 80040de:	0002      	movs	r2, r0
 80040e0:	1dbb      	adds	r3, r7, #6
 80040e2:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 80040e4:	4b10      	ldr	r3, [pc, #64]	; (8004128 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80040e6:	68db      	ldr	r3, [r3, #12]
 80040e8:	1dba      	adds	r2, r7, #6
 80040ea:	8812      	ldrh	r2, [r2, #0]
 80040ec:	4013      	ands	r3, r2
 80040ee:	d008      	beq.n	8004102 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 80040f0:	4b0d      	ldr	r3, [pc, #52]	; (8004128 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80040f2:	1dba      	adds	r2, r7, #6
 80040f4:	8812      	ldrh	r2, [r2, #0]
 80040f6:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 80040f8:	1dbb      	adds	r3, r7, #6
 80040fa:	881b      	ldrh	r3, [r3, #0]
 80040fc:	0018      	movs	r0, r3
 80040fe:	f7ff f85b 	bl	80031b8 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8004102:	4b09      	ldr	r3, [pc, #36]	; (8004128 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8004104:	691b      	ldr	r3, [r3, #16]
 8004106:	1dba      	adds	r2, r7, #6
 8004108:	8812      	ldrh	r2, [r2, #0]
 800410a:	4013      	ands	r3, r2
 800410c:	d008      	beq.n	8004120 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 800410e:	4b06      	ldr	r3, [pc, #24]	; (8004128 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8004110:	1dba      	adds	r2, r7, #6
 8004112:	8812      	ldrh	r2, [r2, #0]
 8004114:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8004116:	1dbb      	adds	r3, r7, #6
 8004118:	881b      	ldrh	r3, [r3, #0]
 800411a:	0018      	movs	r0, r3
 800411c:	f000 f806 	bl	800412c <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8004120:	46c0      	nop			; (mov r8, r8)
 8004122:	46bd      	mov	sp, r7
 8004124:	b002      	add	sp, #8
 8004126:	bd80      	pop	{r7, pc}
 8004128:	40021800 	.word	0x40021800

0800412c <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b082      	sub	sp, #8
 8004130:	af00      	add	r7, sp, #0
 8004132:	0002      	movs	r2, r0
 8004134:	1dbb      	adds	r3, r7, #6
 8004136:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8004138:	46c0      	nop			; (mov r8, r8)
 800413a:	46bd      	mov	sp, r7
 800413c:	b002      	add	sp, #8
 800413e:	bd80      	pop	{r7, pc}

08004140 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b084      	sub	sp, #16
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8004148:	4b19      	ldr	r3, [pc, #100]	; (80041b0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a19      	ldr	r2, [pc, #100]	; (80041b4 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800414e:	4013      	ands	r3, r2
 8004150:	0019      	movs	r1, r3
 8004152:	4b17      	ldr	r3, [pc, #92]	; (80041b0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004154:	687a      	ldr	r2, [r7, #4]
 8004156:	430a      	orrs	r2, r1
 8004158:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800415a:	687a      	ldr	r2, [r7, #4]
 800415c:	2380      	movs	r3, #128	; 0x80
 800415e:	009b      	lsls	r3, r3, #2
 8004160:	429a      	cmp	r2, r3
 8004162:	d11f      	bne.n	80041a4 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8004164:	4b14      	ldr	r3, [pc, #80]	; (80041b8 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8004166:	681a      	ldr	r2, [r3, #0]
 8004168:	0013      	movs	r3, r2
 800416a:	005b      	lsls	r3, r3, #1
 800416c:	189b      	adds	r3, r3, r2
 800416e:	005b      	lsls	r3, r3, #1
 8004170:	4912      	ldr	r1, [pc, #72]	; (80041bc <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8004172:	0018      	movs	r0, r3
 8004174:	f7fb ffea 	bl	800014c <__udivsi3>
 8004178:	0003      	movs	r3, r0
 800417a:	3301      	adds	r3, #1
 800417c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800417e:	e008      	b.n	8004192 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d003      	beq.n	800418e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	3b01      	subs	r3, #1
 800418a:	60fb      	str	r3, [r7, #12]
 800418c:	e001      	b.n	8004192 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800418e:	2303      	movs	r3, #3
 8004190:	e009      	b.n	80041a6 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004192:	4b07      	ldr	r3, [pc, #28]	; (80041b0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004194:	695a      	ldr	r2, [r3, #20]
 8004196:	2380      	movs	r3, #128	; 0x80
 8004198:	00db      	lsls	r3, r3, #3
 800419a:	401a      	ands	r2, r3
 800419c:	2380      	movs	r3, #128	; 0x80
 800419e:	00db      	lsls	r3, r3, #3
 80041a0:	429a      	cmp	r2, r3
 80041a2:	d0ed      	beq.n	8004180 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80041a4:	2300      	movs	r3, #0
}
 80041a6:	0018      	movs	r0, r3
 80041a8:	46bd      	mov	sp, r7
 80041aa:	b004      	add	sp, #16
 80041ac:	bd80      	pop	{r7, pc}
 80041ae:	46c0      	nop			; (mov r8, r8)
 80041b0:	40007000 	.word	0x40007000
 80041b4:	fffff9ff 	.word	0xfffff9ff
 80041b8:	20000034 	.word	0x20000034
 80041bc:	000f4240 	.word	0x000f4240

080041c0 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80041c4:	4b03      	ldr	r3, [pc, #12]	; (80041d4 <LL_RCC_GetAPB1Prescaler+0x14>)
 80041c6:	689a      	ldr	r2, [r3, #8]
 80041c8:	23e0      	movs	r3, #224	; 0xe0
 80041ca:	01db      	lsls	r3, r3, #7
 80041cc:	4013      	ands	r3, r2
}
 80041ce:	0018      	movs	r0, r3
 80041d0:	46bd      	mov	sp, r7
 80041d2:	bd80      	pop	{r7, pc}
 80041d4:	40021000 	.word	0x40021000

080041d8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b088      	sub	sp, #32
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d101      	bne.n	80041ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	e2f3      	b.n	80047d2 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	2201      	movs	r2, #1
 80041f0:	4013      	ands	r3, r2
 80041f2:	d100      	bne.n	80041f6 <HAL_RCC_OscConfig+0x1e>
 80041f4:	e07c      	b.n	80042f0 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80041f6:	4bc3      	ldr	r3, [pc, #780]	; (8004504 <HAL_RCC_OscConfig+0x32c>)
 80041f8:	689b      	ldr	r3, [r3, #8]
 80041fa:	2238      	movs	r2, #56	; 0x38
 80041fc:	4013      	ands	r3, r2
 80041fe:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004200:	4bc0      	ldr	r3, [pc, #768]	; (8004504 <HAL_RCC_OscConfig+0x32c>)
 8004202:	68db      	ldr	r3, [r3, #12]
 8004204:	2203      	movs	r2, #3
 8004206:	4013      	ands	r3, r2
 8004208:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800420a:	69bb      	ldr	r3, [r7, #24]
 800420c:	2b10      	cmp	r3, #16
 800420e:	d102      	bne.n	8004216 <HAL_RCC_OscConfig+0x3e>
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	2b03      	cmp	r3, #3
 8004214:	d002      	beq.n	800421c <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8004216:	69bb      	ldr	r3, [r7, #24]
 8004218:	2b08      	cmp	r3, #8
 800421a:	d10b      	bne.n	8004234 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800421c:	4bb9      	ldr	r3, [pc, #740]	; (8004504 <HAL_RCC_OscConfig+0x32c>)
 800421e:	681a      	ldr	r2, [r3, #0]
 8004220:	2380      	movs	r3, #128	; 0x80
 8004222:	029b      	lsls	r3, r3, #10
 8004224:	4013      	ands	r3, r2
 8004226:	d062      	beq.n	80042ee <HAL_RCC_OscConfig+0x116>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d15e      	bne.n	80042ee <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8004230:	2301      	movs	r3, #1
 8004232:	e2ce      	b.n	80047d2 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	685a      	ldr	r2, [r3, #4]
 8004238:	2380      	movs	r3, #128	; 0x80
 800423a:	025b      	lsls	r3, r3, #9
 800423c:	429a      	cmp	r2, r3
 800423e:	d107      	bne.n	8004250 <HAL_RCC_OscConfig+0x78>
 8004240:	4bb0      	ldr	r3, [pc, #704]	; (8004504 <HAL_RCC_OscConfig+0x32c>)
 8004242:	681a      	ldr	r2, [r3, #0]
 8004244:	4baf      	ldr	r3, [pc, #700]	; (8004504 <HAL_RCC_OscConfig+0x32c>)
 8004246:	2180      	movs	r1, #128	; 0x80
 8004248:	0249      	lsls	r1, r1, #9
 800424a:	430a      	orrs	r2, r1
 800424c:	601a      	str	r2, [r3, #0]
 800424e:	e020      	b.n	8004292 <HAL_RCC_OscConfig+0xba>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	685a      	ldr	r2, [r3, #4]
 8004254:	23a0      	movs	r3, #160	; 0xa0
 8004256:	02db      	lsls	r3, r3, #11
 8004258:	429a      	cmp	r2, r3
 800425a:	d10e      	bne.n	800427a <HAL_RCC_OscConfig+0xa2>
 800425c:	4ba9      	ldr	r3, [pc, #676]	; (8004504 <HAL_RCC_OscConfig+0x32c>)
 800425e:	681a      	ldr	r2, [r3, #0]
 8004260:	4ba8      	ldr	r3, [pc, #672]	; (8004504 <HAL_RCC_OscConfig+0x32c>)
 8004262:	2180      	movs	r1, #128	; 0x80
 8004264:	02c9      	lsls	r1, r1, #11
 8004266:	430a      	orrs	r2, r1
 8004268:	601a      	str	r2, [r3, #0]
 800426a:	4ba6      	ldr	r3, [pc, #664]	; (8004504 <HAL_RCC_OscConfig+0x32c>)
 800426c:	681a      	ldr	r2, [r3, #0]
 800426e:	4ba5      	ldr	r3, [pc, #660]	; (8004504 <HAL_RCC_OscConfig+0x32c>)
 8004270:	2180      	movs	r1, #128	; 0x80
 8004272:	0249      	lsls	r1, r1, #9
 8004274:	430a      	orrs	r2, r1
 8004276:	601a      	str	r2, [r3, #0]
 8004278:	e00b      	b.n	8004292 <HAL_RCC_OscConfig+0xba>
 800427a:	4ba2      	ldr	r3, [pc, #648]	; (8004504 <HAL_RCC_OscConfig+0x32c>)
 800427c:	681a      	ldr	r2, [r3, #0]
 800427e:	4ba1      	ldr	r3, [pc, #644]	; (8004504 <HAL_RCC_OscConfig+0x32c>)
 8004280:	49a1      	ldr	r1, [pc, #644]	; (8004508 <HAL_RCC_OscConfig+0x330>)
 8004282:	400a      	ands	r2, r1
 8004284:	601a      	str	r2, [r3, #0]
 8004286:	4b9f      	ldr	r3, [pc, #636]	; (8004504 <HAL_RCC_OscConfig+0x32c>)
 8004288:	681a      	ldr	r2, [r3, #0]
 800428a:	4b9e      	ldr	r3, [pc, #632]	; (8004504 <HAL_RCC_OscConfig+0x32c>)
 800428c:	499f      	ldr	r1, [pc, #636]	; (800450c <HAL_RCC_OscConfig+0x334>)
 800428e:	400a      	ands	r2, r1
 8004290:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d014      	beq.n	80042c4 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800429a:	f7ff fa4b 	bl	8003734 <HAL_GetTick>
 800429e:	0003      	movs	r3, r0
 80042a0:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80042a2:	e008      	b.n	80042b6 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042a4:	f7ff fa46 	bl	8003734 <HAL_GetTick>
 80042a8:	0002      	movs	r2, r0
 80042aa:	693b      	ldr	r3, [r7, #16]
 80042ac:	1ad3      	subs	r3, r2, r3
 80042ae:	2b64      	cmp	r3, #100	; 0x64
 80042b0:	d901      	bls.n	80042b6 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80042b2:	2303      	movs	r3, #3
 80042b4:	e28d      	b.n	80047d2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80042b6:	4b93      	ldr	r3, [pc, #588]	; (8004504 <HAL_RCC_OscConfig+0x32c>)
 80042b8:	681a      	ldr	r2, [r3, #0]
 80042ba:	2380      	movs	r3, #128	; 0x80
 80042bc:	029b      	lsls	r3, r3, #10
 80042be:	4013      	ands	r3, r2
 80042c0:	d0f0      	beq.n	80042a4 <HAL_RCC_OscConfig+0xcc>
 80042c2:	e015      	b.n	80042f0 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042c4:	f7ff fa36 	bl	8003734 <HAL_GetTick>
 80042c8:	0003      	movs	r3, r0
 80042ca:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80042cc:	e008      	b.n	80042e0 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042ce:	f7ff fa31 	bl	8003734 <HAL_GetTick>
 80042d2:	0002      	movs	r2, r0
 80042d4:	693b      	ldr	r3, [r7, #16]
 80042d6:	1ad3      	subs	r3, r2, r3
 80042d8:	2b64      	cmp	r3, #100	; 0x64
 80042da:	d901      	bls.n	80042e0 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80042dc:	2303      	movs	r3, #3
 80042de:	e278      	b.n	80047d2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80042e0:	4b88      	ldr	r3, [pc, #544]	; (8004504 <HAL_RCC_OscConfig+0x32c>)
 80042e2:	681a      	ldr	r2, [r3, #0]
 80042e4:	2380      	movs	r3, #128	; 0x80
 80042e6:	029b      	lsls	r3, r3, #10
 80042e8:	4013      	ands	r3, r2
 80042ea:	d1f0      	bne.n	80042ce <HAL_RCC_OscConfig+0xf6>
 80042ec:	e000      	b.n	80042f0 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042ee:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	2202      	movs	r2, #2
 80042f6:	4013      	ands	r3, r2
 80042f8:	d100      	bne.n	80042fc <HAL_RCC_OscConfig+0x124>
 80042fa:	e099      	b.n	8004430 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80042fc:	4b81      	ldr	r3, [pc, #516]	; (8004504 <HAL_RCC_OscConfig+0x32c>)
 80042fe:	689b      	ldr	r3, [r3, #8]
 8004300:	2238      	movs	r2, #56	; 0x38
 8004302:	4013      	ands	r3, r2
 8004304:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004306:	4b7f      	ldr	r3, [pc, #508]	; (8004504 <HAL_RCC_OscConfig+0x32c>)
 8004308:	68db      	ldr	r3, [r3, #12]
 800430a:	2203      	movs	r2, #3
 800430c:	4013      	ands	r3, r2
 800430e:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8004310:	69bb      	ldr	r3, [r7, #24]
 8004312:	2b10      	cmp	r3, #16
 8004314:	d102      	bne.n	800431c <HAL_RCC_OscConfig+0x144>
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	2b02      	cmp	r3, #2
 800431a:	d002      	beq.n	8004322 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 800431c:	69bb      	ldr	r3, [r7, #24]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d135      	bne.n	800438e <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004322:	4b78      	ldr	r3, [pc, #480]	; (8004504 <HAL_RCC_OscConfig+0x32c>)
 8004324:	681a      	ldr	r2, [r3, #0]
 8004326:	2380      	movs	r3, #128	; 0x80
 8004328:	00db      	lsls	r3, r3, #3
 800432a:	4013      	ands	r3, r2
 800432c:	d005      	beq.n	800433a <HAL_RCC_OscConfig+0x162>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	68db      	ldr	r3, [r3, #12]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d101      	bne.n	800433a <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8004336:	2301      	movs	r3, #1
 8004338:	e24b      	b.n	80047d2 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800433a:	4b72      	ldr	r3, [pc, #456]	; (8004504 <HAL_RCC_OscConfig+0x32c>)
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	4a74      	ldr	r2, [pc, #464]	; (8004510 <HAL_RCC_OscConfig+0x338>)
 8004340:	4013      	ands	r3, r2
 8004342:	0019      	movs	r1, r3
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	695b      	ldr	r3, [r3, #20]
 8004348:	021a      	lsls	r2, r3, #8
 800434a:	4b6e      	ldr	r3, [pc, #440]	; (8004504 <HAL_RCC_OscConfig+0x32c>)
 800434c:	430a      	orrs	r2, r1
 800434e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004350:	69bb      	ldr	r3, [r7, #24]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d112      	bne.n	800437c <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004356:	4b6b      	ldr	r3, [pc, #428]	; (8004504 <HAL_RCC_OscConfig+0x32c>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a6e      	ldr	r2, [pc, #440]	; (8004514 <HAL_RCC_OscConfig+0x33c>)
 800435c:	4013      	ands	r3, r2
 800435e:	0019      	movs	r1, r3
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	691a      	ldr	r2, [r3, #16]
 8004364:	4b67      	ldr	r3, [pc, #412]	; (8004504 <HAL_RCC_OscConfig+0x32c>)
 8004366:	430a      	orrs	r2, r1
 8004368:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800436a:	4b66      	ldr	r3, [pc, #408]	; (8004504 <HAL_RCC_OscConfig+0x32c>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	0adb      	lsrs	r3, r3, #11
 8004370:	2207      	movs	r2, #7
 8004372:	4013      	ands	r3, r2
 8004374:	4a68      	ldr	r2, [pc, #416]	; (8004518 <HAL_RCC_OscConfig+0x340>)
 8004376:	40da      	lsrs	r2, r3
 8004378:	4b68      	ldr	r3, [pc, #416]	; (800451c <HAL_RCC_OscConfig+0x344>)
 800437a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800437c:	4b68      	ldr	r3, [pc, #416]	; (8004520 <HAL_RCC_OscConfig+0x348>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	0018      	movs	r0, r3
 8004382:	f7ff f97b 	bl	800367c <HAL_InitTick>
 8004386:	1e03      	subs	r3, r0, #0
 8004388:	d051      	beq.n	800442e <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	e221      	b.n	80047d2 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	68db      	ldr	r3, [r3, #12]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d030      	beq.n	80043f8 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004396:	4b5b      	ldr	r3, [pc, #364]	; (8004504 <HAL_RCC_OscConfig+0x32c>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a5e      	ldr	r2, [pc, #376]	; (8004514 <HAL_RCC_OscConfig+0x33c>)
 800439c:	4013      	ands	r3, r2
 800439e:	0019      	movs	r1, r3
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	691a      	ldr	r2, [r3, #16]
 80043a4:	4b57      	ldr	r3, [pc, #348]	; (8004504 <HAL_RCC_OscConfig+0x32c>)
 80043a6:	430a      	orrs	r2, r1
 80043a8:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80043aa:	4b56      	ldr	r3, [pc, #344]	; (8004504 <HAL_RCC_OscConfig+0x32c>)
 80043ac:	681a      	ldr	r2, [r3, #0]
 80043ae:	4b55      	ldr	r3, [pc, #340]	; (8004504 <HAL_RCC_OscConfig+0x32c>)
 80043b0:	2180      	movs	r1, #128	; 0x80
 80043b2:	0049      	lsls	r1, r1, #1
 80043b4:	430a      	orrs	r2, r1
 80043b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043b8:	f7ff f9bc 	bl	8003734 <HAL_GetTick>
 80043bc:	0003      	movs	r3, r0
 80043be:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80043c0:	e008      	b.n	80043d4 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043c2:	f7ff f9b7 	bl	8003734 <HAL_GetTick>
 80043c6:	0002      	movs	r2, r0
 80043c8:	693b      	ldr	r3, [r7, #16]
 80043ca:	1ad3      	subs	r3, r2, r3
 80043cc:	2b02      	cmp	r3, #2
 80043ce:	d901      	bls.n	80043d4 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80043d0:	2303      	movs	r3, #3
 80043d2:	e1fe      	b.n	80047d2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80043d4:	4b4b      	ldr	r3, [pc, #300]	; (8004504 <HAL_RCC_OscConfig+0x32c>)
 80043d6:	681a      	ldr	r2, [r3, #0]
 80043d8:	2380      	movs	r3, #128	; 0x80
 80043da:	00db      	lsls	r3, r3, #3
 80043dc:	4013      	ands	r3, r2
 80043de:	d0f0      	beq.n	80043c2 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043e0:	4b48      	ldr	r3, [pc, #288]	; (8004504 <HAL_RCC_OscConfig+0x32c>)
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	4a4a      	ldr	r2, [pc, #296]	; (8004510 <HAL_RCC_OscConfig+0x338>)
 80043e6:	4013      	ands	r3, r2
 80043e8:	0019      	movs	r1, r3
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	695b      	ldr	r3, [r3, #20]
 80043ee:	021a      	lsls	r2, r3, #8
 80043f0:	4b44      	ldr	r3, [pc, #272]	; (8004504 <HAL_RCC_OscConfig+0x32c>)
 80043f2:	430a      	orrs	r2, r1
 80043f4:	605a      	str	r2, [r3, #4]
 80043f6:	e01b      	b.n	8004430 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80043f8:	4b42      	ldr	r3, [pc, #264]	; (8004504 <HAL_RCC_OscConfig+0x32c>)
 80043fa:	681a      	ldr	r2, [r3, #0]
 80043fc:	4b41      	ldr	r3, [pc, #260]	; (8004504 <HAL_RCC_OscConfig+0x32c>)
 80043fe:	4949      	ldr	r1, [pc, #292]	; (8004524 <HAL_RCC_OscConfig+0x34c>)
 8004400:	400a      	ands	r2, r1
 8004402:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004404:	f7ff f996 	bl	8003734 <HAL_GetTick>
 8004408:	0003      	movs	r3, r0
 800440a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800440c:	e008      	b.n	8004420 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800440e:	f7ff f991 	bl	8003734 <HAL_GetTick>
 8004412:	0002      	movs	r2, r0
 8004414:	693b      	ldr	r3, [r7, #16]
 8004416:	1ad3      	subs	r3, r2, r3
 8004418:	2b02      	cmp	r3, #2
 800441a:	d901      	bls.n	8004420 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800441c:	2303      	movs	r3, #3
 800441e:	e1d8      	b.n	80047d2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004420:	4b38      	ldr	r3, [pc, #224]	; (8004504 <HAL_RCC_OscConfig+0x32c>)
 8004422:	681a      	ldr	r2, [r3, #0]
 8004424:	2380      	movs	r3, #128	; 0x80
 8004426:	00db      	lsls	r3, r3, #3
 8004428:	4013      	ands	r3, r2
 800442a:	d1f0      	bne.n	800440e <HAL_RCC_OscConfig+0x236>
 800442c:	e000      	b.n	8004430 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800442e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	2208      	movs	r2, #8
 8004436:	4013      	ands	r3, r2
 8004438:	d047      	beq.n	80044ca <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800443a:	4b32      	ldr	r3, [pc, #200]	; (8004504 <HAL_RCC_OscConfig+0x32c>)
 800443c:	689b      	ldr	r3, [r3, #8]
 800443e:	2238      	movs	r2, #56	; 0x38
 8004440:	4013      	ands	r3, r2
 8004442:	2b18      	cmp	r3, #24
 8004444:	d10a      	bne.n	800445c <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8004446:	4b2f      	ldr	r3, [pc, #188]	; (8004504 <HAL_RCC_OscConfig+0x32c>)
 8004448:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800444a:	2202      	movs	r2, #2
 800444c:	4013      	ands	r3, r2
 800444e:	d03c      	beq.n	80044ca <HAL_RCC_OscConfig+0x2f2>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	699b      	ldr	r3, [r3, #24]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d138      	bne.n	80044ca <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8004458:	2301      	movs	r3, #1
 800445a:	e1ba      	b.n	80047d2 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	699b      	ldr	r3, [r3, #24]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d019      	beq.n	8004498 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8004464:	4b27      	ldr	r3, [pc, #156]	; (8004504 <HAL_RCC_OscConfig+0x32c>)
 8004466:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004468:	4b26      	ldr	r3, [pc, #152]	; (8004504 <HAL_RCC_OscConfig+0x32c>)
 800446a:	2101      	movs	r1, #1
 800446c:	430a      	orrs	r2, r1
 800446e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004470:	f7ff f960 	bl	8003734 <HAL_GetTick>
 8004474:	0003      	movs	r3, r0
 8004476:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004478:	e008      	b.n	800448c <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800447a:	f7ff f95b 	bl	8003734 <HAL_GetTick>
 800447e:	0002      	movs	r2, r0
 8004480:	693b      	ldr	r3, [r7, #16]
 8004482:	1ad3      	subs	r3, r2, r3
 8004484:	2b02      	cmp	r3, #2
 8004486:	d901      	bls.n	800448c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8004488:	2303      	movs	r3, #3
 800448a:	e1a2      	b.n	80047d2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800448c:	4b1d      	ldr	r3, [pc, #116]	; (8004504 <HAL_RCC_OscConfig+0x32c>)
 800448e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004490:	2202      	movs	r2, #2
 8004492:	4013      	ands	r3, r2
 8004494:	d0f1      	beq.n	800447a <HAL_RCC_OscConfig+0x2a2>
 8004496:	e018      	b.n	80044ca <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8004498:	4b1a      	ldr	r3, [pc, #104]	; (8004504 <HAL_RCC_OscConfig+0x32c>)
 800449a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800449c:	4b19      	ldr	r3, [pc, #100]	; (8004504 <HAL_RCC_OscConfig+0x32c>)
 800449e:	2101      	movs	r1, #1
 80044a0:	438a      	bics	r2, r1
 80044a2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044a4:	f7ff f946 	bl	8003734 <HAL_GetTick>
 80044a8:	0003      	movs	r3, r0
 80044aa:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80044ac:	e008      	b.n	80044c0 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044ae:	f7ff f941 	bl	8003734 <HAL_GetTick>
 80044b2:	0002      	movs	r2, r0
 80044b4:	693b      	ldr	r3, [r7, #16]
 80044b6:	1ad3      	subs	r3, r2, r3
 80044b8:	2b02      	cmp	r3, #2
 80044ba:	d901      	bls.n	80044c0 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80044bc:	2303      	movs	r3, #3
 80044be:	e188      	b.n	80047d2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80044c0:	4b10      	ldr	r3, [pc, #64]	; (8004504 <HAL_RCC_OscConfig+0x32c>)
 80044c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044c4:	2202      	movs	r2, #2
 80044c6:	4013      	ands	r3, r2
 80044c8:	d1f1      	bne.n	80044ae <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	2204      	movs	r2, #4
 80044d0:	4013      	ands	r3, r2
 80044d2:	d100      	bne.n	80044d6 <HAL_RCC_OscConfig+0x2fe>
 80044d4:	e0c6      	b.n	8004664 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044d6:	231f      	movs	r3, #31
 80044d8:	18fb      	adds	r3, r7, r3
 80044da:	2200      	movs	r2, #0
 80044dc:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80044de:	4b09      	ldr	r3, [pc, #36]	; (8004504 <HAL_RCC_OscConfig+0x32c>)
 80044e0:	689b      	ldr	r3, [r3, #8]
 80044e2:	2238      	movs	r2, #56	; 0x38
 80044e4:	4013      	ands	r3, r2
 80044e6:	2b20      	cmp	r3, #32
 80044e8:	d11e      	bne.n	8004528 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80044ea:	4b06      	ldr	r3, [pc, #24]	; (8004504 <HAL_RCC_OscConfig+0x32c>)
 80044ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044ee:	2202      	movs	r2, #2
 80044f0:	4013      	ands	r3, r2
 80044f2:	d100      	bne.n	80044f6 <HAL_RCC_OscConfig+0x31e>
 80044f4:	e0b6      	b.n	8004664 <HAL_RCC_OscConfig+0x48c>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	689b      	ldr	r3, [r3, #8]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d000      	beq.n	8004500 <HAL_RCC_OscConfig+0x328>
 80044fe:	e0b1      	b.n	8004664 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8004500:	2301      	movs	r3, #1
 8004502:	e166      	b.n	80047d2 <HAL_RCC_OscConfig+0x5fa>
 8004504:	40021000 	.word	0x40021000
 8004508:	fffeffff 	.word	0xfffeffff
 800450c:	fffbffff 	.word	0xfffbffff
 8004510:	ffff80ff 	.word	0xffff80ff
 8004514:	ffffc7ff 	.word	0xffffc7ff
 8004518:	00f42400 	.word	0x00f42400
 800451c:	20000034 	.word	0x20000034
 8004520:	20000038 	.word	0x20000038
 8004524:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004528:	4bac      	ldr	r3, [pc, #688]	; (80047dc <HAL_RCC_OscConfig+0x604>)
 800452a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800452c:	2380      	movs	r3, #128	; 0x80
 800452e:	055b      	lsls	r3, r3, #21
 8004530:	4013      	ands	r3, r2
 8004532:	d101      	bne.n	8004538 <HAL_RCC_OscConfig+0x360>
 8004534:	2301      	movs	r3, #1
 8004536:	e000      	b.n	800453a <HAL_RCC_OscConfig+0x362>
 8004538:	2300      	movs	r3, #0
 800453a:	2b00      	cmp	r3, #0
 800453c:	d011      	beq.n	8004562 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800453e:	4ba7      	ldr	r3, [pc, #668]	; (80047dc <HAL_RCC_OscConfig+0x604>)
 8004540:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004542:	4ba6      	ldr	r3, [pc, #664]	; (80047dc <HAL_RCC_OscConfig+0x604>)
 8004544:	2180      	movs	r1, #128	; 0x80
 8004546:	0549      	lsls	r1, r1, #21
 8004548:	430a      	orrs	r2, r1
 800454a:	63da      	str	r2, [r3, #60]	; 0x3c
 800454c:	4ba3      	ldr	r3, [pc, #652]	; (80047dc <HAL_RCC_OscConfig+0x604>)
 800454e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004550:	2380      	movs	r3, #128	; 0x80
 8004552:	055b      	lsls	r3, r3, #21
 8004554:	4013      	ands	r3, r2
 8004556:	60fb      	str	r3, [r7, #12]
 8004558:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800455a:	231f      	movs	r3, #31
 800455c:	18fb      	adds	r3, r7, r3
 800455e:	2201      	movs	r2, #1
 8004560:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004562:	4b9f      	ldr	r3, [pc, #636]	; (80047e0 <HAL_RCC_OscConfig+0x608>)
 8004564:	681a      	ldr	r2, [r3, #0]
 8004566:	2380      	movs	r3, #128	; 0x80
 8004568:	005b      	lsls	r3, r3, #1
 800456a:	4013      	ands	r3, r2
 800456c:	d11a      	bne.n	80045a4 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800456e:	4b9c      	ldr	r3, [pc, #624]	; (80047e0 <HAL_RCC_OscConfig+0x608>)
 8004570:	681a      	ldr	r2, [r3, #0]
 8004572:	4b9b      	ldr	r3, [pc, #620]	; (80047e0 <HAL_RCC_OscConfig+0x608>)
 8004574:	2180      	movs	r1, #128	; 0x80
 8004576:	0049      	lsls	r1, r1, #1
 8004578:	430a      	orrs	r2, r1
 800457a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 800457c:	f7ff f8da 	bl	8003734 <HAL_GetTick>
 8004580:	0003      	movs	r3, r0
 8004582:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004584:	e008      	b.n	8004598 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004586:	f7ff f8d5 	bl	8003734 <HAL_GetTick>
 800458a:	0002      	movs	r2, r0
 800458c:	693b      	ldr	r3, [r7, #16]
 800458e:	1ad3      	subs	r3, r2, r3
 8004590:	2b02      	cmp	r3, #2
 8004592:	d901      	bls.n	8004598 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8004594:	2303      	movs	r3, #3
 8004596:	e11c      	b.n	80047d2 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004598:	4b91      	ldr	r3, [pc, #580]	; (80047e0 <HAL_RCC_OscConfig+0x608>)
 800459a:	681a      	ldr	r2, [r3, #0]
 800459c:	2380      	movs	r3, #128	; 0x80
 800459e:	005b      	lsls	r3, r3, #1
 80045a0:	4013      	ands	r3, r2
 80045a2:	d0f0      	beq.n	8004586 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	689b      	ldr	r3, [r3, #8]
 80045a8:	2b01      	cmp	r3, #1
 80045aa:	d106      	bne.n	80045ba <HAL_RCC_OscConfig+0x3e2>
 80045ac:	4b8b      	ldr	r3, [pc, #556]	; (80047dc <HAL_RCC_OscConfig+0x604>)
 80045ae:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80045b0:	4b8a      	ldr	r3, [pc, #552]	; (80047dc <HAL_RCC_OscConfig+0x604>)
 80045b2:	2101      	movs	r1, #1
 80045b4:	430a      	orrs	r2, r1
 80045b6:	65da      	str	r2, [r3, #92]	; 0x5c
 80045b8:	e01c      	b.n	80045f4 <HAL_RCC_OscConfig+0x41c>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	689b      	ldr	r3, [r3, #8]
 80045be:	2b05      	cmp	r3, #5
 80045c0:	d10c      	bne.n	80045dc <HAL_RCC_OscConfig+0x404>
 80045c2:	4b86      	ldr	r3, [pc, #536]	; (80047dc <HAL_RCC_OscConfig+0x604>)
 80045c4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80045c6:	4b85      	ldr	r3, [pc, #532]	; (80047dc <HAL_RCC_OscConfig+0x604>)
 80045c8:	2104      	movs	r1, #4
 80045ca:	430a      	orrs	r2, r1
 80045cc:	65da      	str	r2, [r3, #92]	; 0x5c
 80045ce:	4b83      	ldr	r3, [pc, #524]	; (80047dc <HAL_RCC_OscConfig+0x604>)
 80045d0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80045d2:	4b82      	ldr	r3, [pc, #520]	; (80047dc <HAL_RCC_OscConfig+0x604>)
 80045d4:	2101      	movs	r1, #1
 80045d6:	430a      	orrs	r2, r1
 80045d8:	65da      	str	r2, [r3, #92]	; 0x5c
 80045da:	e00b      	b.n	80045f4 <HAL_RCC_OscConfig+0x41c>
 80045dc:	4b7f      	ldr	r3, [pc, #508]	; (80047dc <HAL_RCC_OscConfig+0x604>)
 80045de:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80045e0:	4b7e      	ldr	r3, [pc, #504]	; (80047dc <HAL_RCC_OscConfig+0x604>)
 80045e2:	2101      	movs	r1, #1
 80045e4:	438a      	bics	r2, r1
 80045e6:	65da      	str	r2, [r3, #92]	; 0x5c
 80045e8:	4b7c      	ldr	r3, [pc, #496]	; (80047dc <HAL_RCC_OscConfig+0x604>)
 80045ea:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80045ec:	4b7b      	ldr	r3, [pc, #492]	; (80047dc <HAL_RCC_OscConfig+0x604>)
 80045ee:	2104      	movs	r1, #4
 80045f0:	438a      	bics	r2, r1
 80045f2:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	689b      	ldr	r3, [r3, #8]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d014      	beq.n	8004626 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045fc:	f7ff f89a 	bl	8003734 <HAL_GetTick>
 8004600:	0003      	movs	r3, r0
 8004602:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004604:	e009      	b.n	800461a <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004606:	f7ff f895 	bl	8003734 <HAL_GetTick>
 800460a:	0002      	movs	r2, r0
 800460c:	693b      	ldr	r3, [r7, #16]
 800460e:	1ad3      	subs	r3, r2, r3
 8004610:	4a74      	ldr	r2, [pc, #464]	; (80047e4 <HAL_RCC_OscConfig+0x60c>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d901      	bls.n	800461a <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8004616:	2303      	movs	r3, #3
 8004618:	e0db      	b.n	80047d2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800461a:	4b70      	ldr	r3, [pc, #448]	; (80047dc <HAL_RCC_OscConfig+0x604>)
 800461c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800461e:	2202      	movs	r2, #2
 8004620:	4013      	ands	r3, r2
 8004622:	d0f0      	beq.n	8004606 <HAL_RCC_OscConfig+0x42e>
 8004624:	e013      	b.n	800464e <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004626:	f7ff f885 	bl	8003734 <HAL_GetTick>
 800462a:	0003      	movs	r3, r0
 800462c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800462e:	e009      	b.n	8004644 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004630:	f7ff f880 	bl	8003734 <HAL_GetTick>
 8004634:	0002      	movs	r2, r0
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	1ad3      	subs	r3, r2, r3
 800463a:	4a6a      	ldr	r2, [pc, #424]	; (80047e4 <HAL_RCC_OscConfig+0x60c>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d901      	bls.n	8004644 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8004640:	2303      	movs	r3, #3
 8004642:	e0c6      	b.n	80047d2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004644:	4b65      	ldr	r3, [pc, #404]	; (80047dc <HAL_RCC_OscConfig+0x604>)
 8004646:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004648:	2202      	movs	r2, #2
 800464a:	4013      	ands	r3, r2
 800464c:	d1f0      	bne.n	8004630 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800464e:	231f      	movs	r3, #31
 8004650:	18fb      	adds	r3, r7, r3
 8004652:	781b      	ldrb	r3, [r3, #0]
 8004654:	2b01      	cmp	r3, #1
 8004656:	d105      	bne.n	8004664 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8004658:	4b60      	ldr	r3, [pc, #384]	; (80047dc <HAL_RCC_OscConfig+0x604>)
 800465a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800465c:	4b5f      	ldr	r3, [pc, #380]	; (80047dc <HAL_RCC_OscConfig+0x604>)
 800465e:	4962      	ldr	r1, [pc, #392]	; (80047e8 <HAL_RCC_OscConfig+0x610>)
 8004660:	400a      	ands	r2, r1
 8004662:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	69db      	ldr	r3, [r3, #28]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d100      	bne.n	800466e <HAL_RCC_OscConfig+0x496>
 800466c:	e0b0      	b.n	80047d0 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800466e:	4b5b      	ldr	r3, [pc, #364]	; (80047dc <HAL_RCC_OscConfig+0x604>)
 8004670:	689b      	ldr	r3, [r3, #8]
 8004672:	2238      	movs	r2, #56	; 0x38
 8004674:	4013      	ands	r3, r2
 8004676:	2b10      	cmp	r3, #16
 8004678:	d100      	bne.n	800467c <HAL_RCC_OscConfig+0x4a4>
 800467a:	e078      	b.n	800476e <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	69db      	ldr	r3, [r3, #28]
 8004680:	2b02      	cmp	r3, #2
 8004682:	d153      	bne.n	800472c <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004684:	4b55      	ldr	r3, [pc, #340]	; (80047dc <HAL_RCC_OscConfig+0x604>)
 8004686:	681a      	ldr	r2, [r3, #0]
 8004688:	4b54      	ldr	r3, [pc, #336]	; (80047dc <HAL_RCC_OscConfig+0x604>)
 800468a:	4958      	ldr	r1, [pc, #352]	; (80047ec <HAL_RCC_OscConfig+0x614>)
 800468c:	400a      	ands	r2, r1
 800468e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004690:	f7ff f850 	bl	8003734 <HAL_GetTick>
 8004694:	0003      	movs	r3, r0
 8004696:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004698:	e008      	b.n	80046ac <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800469a:	f7ff f84b 	bl	8003734 <HAL_GetTick>
 800469e:	0002      	movs	r2, r0
 80046a0:	693b      	ldr	r3, [r7, #16]
 80046a2:	1ad3      	subs	r3, r2, r3
 80046a4:	2b02      	cmp	r3, #2
 80046a6:	d901      	bls.n	80046ac <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80046a8:	2303      	movs	r3, #3
 80046aa:	e092      	b.n	80047d2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046ac:	4b4b      	ldr	r3, [pc, #300]	; (80047dc <HAL_RCC_OscConfig+0x604>)
 80046ae:	681a      	ldr	r2, [r3, #0]
 80046b0:	2380      	movs	r3, #128	; 0x80
 80046b2:	049b      	lsls	r3, r3, #18
 80046b4:	4013      	ands	r3, r2
 80046b6:	d1f0      	bne.n	800469a <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80046b8:	4b48      	ldr	r3, [pc, #288]	; (80047dc <HAL_RCC_OscConfig+0x604>)
 80046ba:	68db      	ldr	r3, [r3, #12]
 80046bc:	4a4c      	ldr	r2, [pc, #304]	; (80047f0 <HAL_RCC_OscConfig+0x618>)
 80046be:	4013      	ands	r3, r2
 80046c0:	0019      	movs	r1, r3
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6a1a      	ldr	r2, [r3, #32]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ca:	431a      	orrs	r2, r3
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046d0:	021b      	lsls	r3, r3, #8
 80046d2:	431a      	orrs	r2, r3
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046d8:	431a      	orrs	r2, r3
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046de:	431a      	orrs	r2, r3
 80046e0:	4b3e      	ldr	r3, [pc, #248]	; (80047dc <HAL_RCC_OscConfig+0x604>)
 80046e2:	430a      	orrs	r2, r1
 80046e4:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80046e6:	4b3d      	ldr	r3, [pc, #244]	; (80047dc <HAL_RCC_OscConfig+0x604>)
 80046e8:	681a      	ldr	r2, [r3, #0]
 80046ea:	4b3c      	ldr	r3, [pc, #240]	; (80047dc <HAL_RCC_OscConfig+0x604>)
 80046ec:	2180      	movs	r1, #128	; 0x80
 80046ee:	0449      	lsls	r1, r1, #17
 80046f0:	430a      	orrs	r2, r1
 80046f2:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80046f4:	4b39      	ldr	r3, [pc, #228]	; (80047dc <HAL_RCC_OscConfig+0x604>)
 80046f6:	68da      	ldr	r2, [r3, #12]
 80046f8:	4b38      	ldr	r3, [pc, #224]	; (80047dc <HAL_RCC_OscConfig+0x604>)
 80046fa:	2180      	movs	r1, #128	; 0x80
 80046fc:	0549      	lsls	r1, r1, #21
 80046fe:	430a      	orrs	r2, r1
 8004700:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004702:	f7ff f817 	bl	8003734 <HAL_GetTick>
 8004706:	0003      	movs	r3, r0
 8004708:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800470a:	e008      	b.n	800471e <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800470c:	f7ff f812 	bl	8003734 <HAL_GetTick>
 8004710:	0002      	movs	r2, r0
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	1ad3      	subs	r3, r2, r3
 8004716:	2b02      	cmp	r3, #2
 8004718:	d901      	bls.n	800471e <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 800471a:	2303      	movs	r3, #3
 800471c:	e059      	b.n	80047d2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800471e:	4b2f      	ldr	r3, [pc, #188]	; (80047dc <HAL_RCC_OscConfig+0x604>)
 8004720:	681a      	ldr	r2, [r3, #0]
 8004722:	2380      	movs	r3, #128	; 0x80
 8004724:	049b      	lsls	r3, r3, #18
 8004726:	4013      	ands	r3, r2
 8004728:	d0f0      	beq.n	800470c <HAL_RCC_OscConfig+0x534>
 800472a:	e051      	b.n	80047d0 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800472c:	4b2b      	ldr	r3, [pc, #172]	; (80047dc <HAL_RCC_OscConfig+0x604>)
 800472e:	681a      	ldr	r2, [r3, #0]
 8004730:	4b2a      	ldr	r3, [pc, #168]	; (80047dc <HAL_RCC_OscConfig+0x604>)
 8004732:	492e      	ldr	r1, [pc, #184]	; (80047ec <HAL_RCC_OscConfig+0x614>)
 8004734:	400a      	ands	r2, r1
 8004736:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004738:	f7fe fffc 	bl	8003734 <HAL_GetTick>
 800473c:	0003      	movs	r3, r0
 800473e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004740:	e008      	b.n	8004754 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004742:	f7fe fff7 	bl	8003734 <HAL_GetTick>
 8004746:	0002      	movs	r2, r0
 8004748:	693b      	ldr	r3, [r7, #16]
 800474a:	1ad3      	subs	r3, r2, r3
 800474c:	2b02      	cmp	r3, #2
 800474e:	d901      	bls.n	8004754 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8004750:	2303      	movs	r3, #3
 8004752:	e03e      	b.n	80047d2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004754:	4b21      	ldr	r3, [pc, #132]	; (80047dc <HAL_RCC_OscConfig+0x604>)
 8004756:	681a      	ldr	r2, [r3, #0]
 8004758:	2380      	movs	r3, #128	; 0x80
 800475a:	049b      	lsls	r3, r3, #18
 800475c:	4013      	ands	r3, r2
 800475e:	d1f0      	bne.n	8004742 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8004760:	4b1e      	ldr	r3, [pc, #120]	; (80047dc <HAL_RCC_OscConfig+0x604>)
 8004762:	68da      	ldr	r2, [r3, #12]
 8004764:	4b1d      	ldr	r3, [pc, #116]	; (80047dc <HAL_RCC_OscConfig+0x604>)
 8004766:	4923      	ldr	r1, [pc, #140]	; (80047f4 <HAL_RCC_OscConfig+0x61c>)
 8004768:	400a      	ands	r2, r1
 800476a:	60da      	str	r2, [r3, #12]
 800476c:	e030      	b.n	80047d0 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	69db      	ldr	r3, [r3, #28]
 8004772:	2b01      	cmp	r3, #1
 8004774:	d101      	bne.n	800477a <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8004776:	2301      	movs	r3, #1
 8004778:	e02b      	b.n	80047d2 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800477a:	4b18      	ldr	r3, [pc, #96]	; (80047dc <HAL_RCC_OscConfig+0x604>)
 800477c:	68db      	ldr	r3, [r3, #12]
 800477e:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	2203      	movs	r2, #3
 8004784:	401a      	ands	r2, r3
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6a1b      	ldr	r3, [r3, #32]
 800478a:	429a      	cmp	r2, r3
 800478c:	d11e      	bne.n	80047cc <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800478e:	697b      	ldr	r3, [r7, #20]
 8004790:	2270      	movs	r2, #112	; 0x70
 8004792:	401a      	ands	r2, r3
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004798:	429a      	cmp	r2, r3
 800479a:	d117      	bne.n	80047cc <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800479c:	697a      	ldr	r2, [r7, #20]
 800479e:	23fe      	movs	r3, #254	; 0xfe
 80047a0:	01db      	lsls	r3, r3, #7
 80047a2:	401a      	ands	r2, r3
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047a8:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80047aa:	429a      	cmp	r2, r3
 80047ac:	d10e      	bne.n	80047cc <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80047ae:	697a      	ldr	r2, [r7, #20]
 80047b0:	23f8      	movs	r3, #248	; 0xf8
 80047b2:	039b      	lsls	r3, r3, #14
 80047b4:	401a      	ands	r2, r3
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80047ba:	429a      	cmp	r2, r3
 80047bc:	d106      	bne.n	80047cc <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80047be:	697b      	ldr	r3, [r7, #20]
 80047c0:	0f5b      	lsrs	r3, r3, #29
 80047c2:	075a      	lsls	r2, r3, #29
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80047c8:	429a      	cmp	r2, r3
 80047ca:	d001      	beq.n	80047d0 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 80047cc:	2301      	movs	r3, #1
 80047ce:	e000      	b.n	80047d2 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 80047d0:	2300      	movs	r3, #0
}
 80047d2:	0018      	movs	r0, r3
 80047d4:	46bd      	mov	sp, r7
 80047d6:	b008      	add	sp, #32
 80047d8:	bd80      	pop	{r7, pc}
 80047da:	46c0      	nop			; (mov r8, r8)
 80047dc:	40021000 	.word	0x40021000
 80047e0:	40007000 	.word	0x40007000
 80047e4:	00001388 	.word	0x00001388
 80047e8:	efffffff 	.word	0xefffffff
 80047ec:	feffffff 	.word	0xfeffffff
 80047f0:	1fc1808c 	.word	0x1fc1808c
 80047f4:	effefffc 	.word	0xeffefffc

080047f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b084      	sub	sp, #16
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
 8004800:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d101      	bne.n	800480c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004808:	2301      	movs	r3, #1
 800480a:	e0e9      	b.n	80049e0 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800480c:	4b76      	ldr	r3, [pc, #472]	; (80049e8 <HAL_RCC_ClockConfig+0x1f0>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	2207      	movs	r2, #7
 8004812:	4013      	ands	r3, r2
 8004814:	683a      	ldr	r2, [r7, #0]
 8004816:	429a      	cmp	r2, r3
 8004818:	d91e      	bls.n	8004858 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800481a:	4b73      	ldr	r3, [pc, #460]	; (80049e8 <HAL_RCC_ClockConfig+0x1f0>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	2207      	movs	r2, #7
 8004820:	4393      	bics	r3, r2
 8004822:	0019      	movs	r1, r3
 8004824:	4b70      	ldr	r3, [pc, #448]	; (80049e8 <HAL_RCC_ClockConfig+0x1f0>)
 8004826:	683a      	ldr	r2, [r7, #0]
 8004828:	430a      	orrs	r2, r1
 800482a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800482c:	f7fe ff82 	bl	8003734 <HAL_GetTick>
 8004830:	0003      	movs	r3, r0
 8004832:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004834:	e009      	b.n	800484a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004836:	f7fe ff7d 	bl	8003734 <HAL_GetTick>
 800483a:	0002      	movs	r2, r0
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	1ad3      	subs	r3, r2, r3
 8004840:	4a6a      	ldr	r2, [pc, #424]	; (80049ec <HAL_RCC_ClockConfig+0x1f4>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d901      	bls.n	800484a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8004846:	2303      	movs	r3, #3
 8004848:	e0ca      	b.n	80049e0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800484a:	4b67      	ldr	r3, [pc, #412]	; (80049e8 <HAL_RCC_ClockConfig+0x1f0>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	2207      	movs	r2, #7
 8004850:	4013      	ands	r3, r2
 8004852:	683a      	ldr	r2, [r7, #0]
 8004854:	429a      	cmp	r2, r3
 8004856:	d1ee      	bne.n	8004836 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	2202      	movs	r2, #2
 800485e:	4013      	ands	r3, r2
 8004860:	d015      	beq.n	800488e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	2204      	movs	r2, #4
 8004868:	4013      	ands	r3, r2
 800486a:	d006      	beq.n	800487a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800486c:	4b60      	ldr	r3, [pc, #384]	; (80049f0 <HAL_RCC_ClockConfig+0x1f8>)
 800486e:	689a      	ldr	r2, [r3, #8]
 8004870:	4b5f      	ldr	r3, [pc, #380]	; (80049f0 <HAL_RCC_ClockConfig+0x1f8>)
 8004872:	21e0      	movs	r1, #224	; 0xe0
 8004874:	01c9      	lsls	r1, r1, #7
 8004876:	430a      	orrs	r2, r1
 8004878:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800487a:	4b5d      	ldr	r3, [pc, #372]	; (80049f0 <HAL_RCC_ClockConfig+0x1f8>)
 800487c:	689b      	ldr	r3, [r3, #8]
 800487e:	4a5d      	ldr	r2, [pc, #372]	; (80049f4 <HAL_RCC_ClockConfig+0x1fc>)
 8004880:	4013      	ands	r3, r2
 8004882:	0019      	movs	r1, r3
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	689a      	ldr	r2, [r3, #8]
 8004888:	4b59      	ldr	r3, [pc, #356]	; (80049f0 <HAL_RCC_ClockConfig+0x1f8>)
 800488a:	430a      	orrs	r2, r1
 800488c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	2201      	movs	r2, #1
 8004894:	4013      	ands	r3, r2
 8004896:	d057      	beq.n	8004948 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	2b01      	cmp	r3, #1
 800489e:	d107      	bne.n	80048b0 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80048a0:	4b53      	ldr	r3, [pc, #332]	; (80049f0 <HAL_RCC_ClockConfig+0x1f8>)
 80048a2:	681a      	ldr	r2, [r3, #0]
 80048a4:	2380      	movs	r3, #128	; 0x80
 80048a6:	029b      	lsls	r3, r3, #10
 80048a8:	4013      	ands	r3, r2
 80048aa:	d12b      	bne.n	8004904 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80048ac:	2301      	movs	r3, #1
 80048ae:	e097      	b.n	80049e0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	2b02      	cmp	r3, #2
 80048b6:	d107      	bne.n	80048c8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80048b8:	4b4d      	ldr	r3, [pc, #308]	; (80049f0 <HAL_RCC_ClockConfig+0x1f8>)
 80048ba:	681a      	ldr	r2, [r3, #0]
 80048bc:	2380      	movs	r3, #128	; 0x80
 80048be:	049b      	lsls	r3, r3, #18
 80048c0:	4013      	ands	r3, r2
 80048c2:	d11f      	bne.n	8004904 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80048c4:	2301      	movs	r3, #1
 80048c6:	e08b      	b.n	80049e0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d107      	bne.n	80048e0 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80048d0:	4b47      	ldr	r3, [pc, #284]	; (80049f0 <HAL_RCC_ClockConfig+0x1f8>)
 80048d2:	681a      	ldr	r2, [r3, #0]
 80048d4:	2380      	movs	r3, #128	; 0x80
 80048d6:	00db      	lsls	r3, r3, #3
 80048d8:	4013      	ands	r3, r2
 80048da:	d113      	bne.n	8004904 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80048dc:	2301      	movs	r3, #1
 80048de:	e07f      	b.n	80049e0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	2b03      	cmp	r3, #3
 80048e6:	d106      	bne.n	80048f6 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80048e8:	4b41      	ldr	r3, [pc, #260]	; (80049f0 <HAL_RCC_ClockConfig+0x1f8>)
 80048ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048ec:	2202      	movs	r2, #2
 80048ee:	4013      	ands	r3, r2
 80048f0:	d108      	bne.n	8004904 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80048f2:	2301      	movs	r3, #1
 80048f4:	e074      	b.n	80049e0 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80048f6:	4b3e      	ldr	r3, [pc, #248]	; (80049f0 <HAL_RCC_ClockConfig+0x1f8>)
 80048f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048fa:	2202      	movs	r2, #2
 80048fc:	4013      	ands	r3, r2
 80048fe:	d101      	bne.n	8004904 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004900:	2301      	movs	r3, #1
 8004902:	e06d      	b.n	80049e0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004904:	4b3a      	ldr	r3, [pc, #232]	; (80049f0 <HAL_RCC_ClockConfig+0x1f8>)
 8004906:	689b      	ldr	r3, [r3, #8]
 8004908:	2207      	movs	r2, #7
 800490a:	4393      	bics	r3, r2
 800490c:	0019      	movs	r1, r3
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	685a      	ldr	r2, [r3, #4]
 8004912:	4b37      	ldr	r3, [pc, #220]	; (80049f0 <HAL_RCC_ClockConfig+0x1f8>)
 8004914:	430a      	orrs	r2, r1
 8004916:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004918:	f7fe ff0c 	bl	8003734 <HAL_GetTick>
 800491c:	0003      	movs	r3, r0
 800491e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004920:	e009      	b.n	8004936 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004922:	f7fe ff07 	bl	8003734 <HAL_GetTick>
 8004926:	0002      	movs	r2, r0
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	1ad3      	subs	r3, r2, r3
 800492c:	4a2f      	ldr	r2, [pc, #188]	; (80049ec <HAL_RCC_ClockConfig+0x1f4>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d901      	bls.n	8004936 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8004932:	2303      	movs	r3, #3
 8004934:	e054      	b.n	80049e0 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004936:	4b2e      	ldr	r3, [pc, #184]	; (80049f0 <HAL_RCC_ClockConfig+0x1f8>)
 8004938:	689b      	ldr	r3, [r3, #8]
 800493a:	2238      	movs	r2, #56	; 0x38
 800493c:	401a      	ands	r2, r3
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	00db      	lsls	r3, r3, #3
 8004944:	429a      	cmp	r2, r3
 8004946:	d1ec      	bne.n	8004922 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004948:	4b27      	ldr	r3, [pc, #156]	; (80049e8 <HAL_RCC_ClockConfig+0x1f0>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	2207      	movs	r2, #7
 800494e:	4013      	ands	r3, r2
 8004950:	683a      	ldr	r2, [r7, #0]
 8004952:	429a      	cmp	r2, r3
 8004954:	d21e      	bcs.n	8004994 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004956:	4b24      	ldr	r3, [pc, #144]	; (80049e8 <HAL_RCC_ClockConfig+0x1f0>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	2207      	movs	r2, #7
 800495c:	4393      	bics	r3, r2
 800495e:	0019      	movs	r1, r3
 8004960:	4b21      	ldr	r3, [pc, #132]	; (80049e8 <HAL_RCC_ClockConfig+0x1f0>)
 8004962:	683a      	ldr	r2, [r7, #0]
 8004964:	430a      	orrs	r2, r1
 8004966:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004968:	f7fe fee4 	bl	8003734 <HAL_GetTick>
 800496c:	0003      	movs	r3, r0
 800496e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004970:	e009      	b.n	8004986 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004972:	f7fe fedf 	bl	8003734 <HAL_GetTick>
 8004976:	0002      	movs	r2, r0
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	1ad3      	subs	r3, r2, r3
 800497c:	4a1b      	ldr	r2, [pc, #108]	; (80049ec <HAL_RCC_ClockConfig+0x1f4>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d901      	bls.n	8004986 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8004982:	2303      	movs	r3, #3
 8004984:	e02c      	b.n	80049e0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004986:	4b18      	ldr	r3, [pc, #96]	; (80049e8 <HAL_RCC_ClockConfig+0x1f0>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	2207      	movs	r2, #7
 800498c:	4013      	ands	r3, r2
 800498e:	683a      	ldr	r2, [r7, #0]
 8004990:	429a      	cmp	r2, r3
 8004992:	d1ee      	bne.n	8004972 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	2204      	movs	r2, #4
 800499a:	4013      	ands	r3, r2
 800499c:	d009      	beq.n	80049b2 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800499e:	4b14      	ldr	r3, [pc, #80]	; (80049f0 <HAL_RCC_ClockConfig+0x1f8>)
 80049a0:	689b      	ldr	r3, [r3, #8]
 80049a2:	4a15      	ldr	r2, [pc, #84]	; (80049f8 <HAL_RCC_ClockConfig+0x200>)
 80049a4:	4013      	ands	r3, r2
 80049a6:	0019      	movs	r1, r3
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	68da      	ldr	r2, [r3, #12]
 80049ac:	4b10      	ldr	r3, [pc, #64]	; (80049f0 <HAL_RCC_ClockConfig+0x1f8>)
 80049ae:	430a      	orrs	r2, r1
 80049b0:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80049b2:	f000 f829 	bl	8004a08 <HAL_RCC_GetSysClockFreq>
 80049b6:	0001      	movs	r1, r0
 80049b8:	4b0d      	ldr	r3, [pc, #52]	; (80049f0 <HAL_RCC_ClockConfig+0x1f8>)
 80049ba:	689b      	ldr	r3, [r3, #8]
 80049bc:	0a1b      	lsrs	r3, r3, #8
 80049be:	220f      	movs	r2, #15
 80049c0:	401a      	ands	r2, r3
 80049c2:	4b0e      	ldr	r3, [pc, #56]	; (80049fc <HAL_RCC_ClockConfig+0x204>)
 80049c4:	0092      	lsls	r2, r2, #2
 80049c6:	58d3      	ldr	r3, [r2, r3]
 80049c8:	221f      	movs	r2, #31
 80049ca:	4013      	ands	r3, r2
 80049cc:	000a      	movs	r2, r1
 80049ce:	40da      	lsrs	r2, r3
 80049d0:	4b0b      	ldr	r3, [pc, #44]	; (8004a00 <HAL_RCC_ClockConfig+0x208>)
 80049d2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80049d4:	4b0b      	ldr	r3, [pc, #44]	; (8004a04 <HAL_RCC_ClockConfig+0x20c>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	0018      	movs	r0, r3
 80049da:	f7fe fe4f 	bl	800367c <HAL_InitTick>
 80049de:	0003      	movs	r3, r0
}
 80049e0:	0018      	movs	r0, r3
 80049e2:	46bd      	mov	sp, r7
 80049e4:	b004      	add	sp, #16
 80049e6:	bd80      	pop	{r7, pc}
 80049e8:	40022000 	.word	0x40022000
 80049ec:	00001388 	.word	0x00001388
 80049f0:	40021000 	.word	0x40021000
 80049f4:	fffff0ff 	.word	0xfffff0ff
 80049f8:	ffff8fff 	.word	0xffff8fff
 80049fc:	0800b358 	.word	0x0800b358
 8004a00:	20000034 	.word	0x20000034
 8004a04:	20000038 	.word	0x20000038

08004a08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b086      	sub	sp, #24
 8004a0c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004a0e:	4b3c      	ldr	r3, [pc, #240]	; (8004b00 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004a10:	689b      	ldr	r3, [r3, #8]
 8004a12:	2238      	movs	r2, #56	; 0x38
 8004a14:	4013      	ands	r3, r2
 8004a16:	d10f      	bne.n	8004a38 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8004a18:	4b39      	ldr	r3, [pc, #228]	; (8004b00 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	0adb      	lsrs	r3, r3, #11
 8004a1e:	2207      	movs	r2, #7
 8004a20:	4013      	ands	r3, r2
 8004a22:	2201      	movs	r2, #1
 8004a24:	409a      	lsls	r2, r3
 8004a26:	0013      	movs	r3, r2
 8004a28:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8004a2a:	6839      	ldr	r1, [r7, #0]
 8004a2c:	4835      	ldr	r0, [pc, #212]	; (8004b04 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004a2e:	f7fb fb8d 	bl	800014c <__udivsi3>
 8004a32:	0003      	movs	r3, r0
 8004a34:	613b      	str	r3, [r7, #16]
 8004a36:	e05d      	b.n	8004af4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004a38:	4b31      	ldr	r3, [pc, #196]	; (8004b00 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004a3a:	689b      	ldr	r3, [r3, #8]
 8004a3c:	2238      	movs	r2, #56	; 0x38
 8004a3e:	4013      	ands	r3, r2
 8004a40:	2b08      	cmp	r3, #8
 8004a42:	d102      	bne.n	8004a4a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004a44:	4b30      	ldr	r3, [pc, #192]	; (8004b08 <HAL_RCC_GetSysClockFreq+0x100>)
 8004a46:	613b      	str	r3, [r7, #16]
 8004a48:	e054      	b.n	8004af4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004a4a:	4b2d      	ldr	r3, [pc, #180]	; (8004b00 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004a4c:	689b      	ldr	r3, [r3, #8]
 8004a4e:	2238      	movs	r2, #56	; 0x38
 8004a50:	4013      	ands	r3, r2
 8004a52:	2b10      	cmp	r3, #16
 8004a54:	d138      	bne.n	8004ac8 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8004a56:	4b2a      	ldr	r3, [pc, #168]	; (8004b00 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004a58:	68db      	ldr	r3, [r3, #12]
 8004a5a:	2203      	movs	r2, #3
 8004a5c:	4013      	ands	r3, r2
 8004a5e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004a60:	4b27      	ldr	r3, [pc, #156]	; (8004b00 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004a62:	68db      	ldr	r3, [r3, #12]
 8004a64:	091b      	lsrs	r3, r3, #4
 8004a66:	2207      	movs	r2, #7
 8004a68:	4013      	ands	r3, r2
 8004a6a:	3301      	adds	r3, #1
 8004a6c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	2b03      	cmp	r3, #3
 8004a72:	d10d      	bne.n	8004a90 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004a74:	68b9      	ldr	r1, [r7, #8]
 8004a76:	4824      	ldr	r0, [pc, #144]	; (8004b08 <HAL_RCC_GetSysClockFreq+0x100>)
 8004a78:	f7fb fb68 	bl	800014c <__udivsi3>
 8004a7c:	0003      	movs	r3, r0
 8004a7e:	0019      	movs	r1, r3
 8004a80:	4b1f      	ldr	r3, [pc, #124]	; (8004b00 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004a82:	68db      	ldr	r3, [r3, #12]
 8004a84:	0a1b      	lsrs	r3, r3, #8
 8004a86:	227f      	movs	r2, #127	; 0x7f
 8004a88:	4013      	ands	r3, r2
 8004a8a:	434b      	muls	r3, r1
 8004a8c:	617b      	str	r3, [r7, #20]
        break;
 8004a8e:	e00d      	b.n	8004aac <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8004a90:	68b9      	ldr	r1, [r7, #8]
 8004a92:	481c      	ldr	r0, [pc, #112]	; (8004b04 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004a94:	f7fb fb5a 	bl	800014c <__udivsi3>
 8004a98:	0003      	movs	r3, r0
 8004a9a:	0019      	movs	r1, r3
 8004a9c:	4b18      	ldr	r3, [pc, #96]	; (8004b00 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004a9e:	68db      	ldr	r3, [r3, #12]
 8004aa0:	0a1b      	lsrs	r3, r3, #8
 8004aa2:	227f      	movs	r2, #127	; 0x7f
 8004aa4:	4013      	ands	r3, r2
 8004aa6:	434b      	muls	r3, r1
 8004aa8:	617b      	str	r3, [r7, #20]
        break;
 8004aaa:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8004aac:	4b14      	ldr	r3, [pc, #80]	; (8004b00 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004aae:	68db      	ldr	r3, [r3, #12]
 8004ab0:	0f5b      	lsrs	r3, r3, #29
 8004ab2:	2207      	movs	r2, #7
 8004ab4:	4013      	ands	r3, r2
 8004ab6:	3301      	adds	r3, #1
 8004ab8:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8004aba:	6879      	ldr	r1, [r7, #4]
 8004abc:	6978      	ldr	r0, [r7, #20]
 8004abe:	f7fb fb45 	bl	800014c <__udivsi3>
 8004ac2:	0003      	movs	r3, r0
 8004ac4:	613b      	str	r3, [r7, #16]
 8004ac6:	e015      	b.n	8004af4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004ac8:	4b0d      	ldr	r3, [pc, #52]	; (8004b00 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004aca:	689b      	ldr	r3, [r3, #8]
 8004acc:	2238      	movs	r2, #56	; 0x38
 8004ace:	4013      	ands	r3, r2
 8004ad0:	2b20      	cmp	r3, #32
 8004ad2:	d103      	bne.n	8004adc <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8004ad4:	2380      	movs	r3, #128	; 0x80
 8004ad6:	021b      	lsls	r3, r3, #8
 8004ad8:	613b      	str	r3, [r7, #16]
 8004ada:	e00b      	b.n	8004af4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004adc:	4b08      	ldr	r3, [pc, #32]	; (8004b00 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004ade:	689b      	ldr	r3, [r3, #8]
 8004ae0:	2238      	movs	r2, #56	; 0x38
 8004ae2:	4013      	ands	r3, r2
 8004ae4:	2b18      	cmp	r3, #24
 8004ae6:	d103      	bne.n	8004af0 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8004ae8:	23fa      	movs	r3, #250	; 0xfa
 8004aea:	01db      	lsls	r3, r3, #7
 8004aec:	613b      	str	r3, [r7, #16]
 8004aee:	e001      	b.n	8004af4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8004af0:	2300      	movs	r3, #0
 8004af2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004af4:	693b      	ldr	r3, [r7, #16]
}
 8004af6:	0018      	movs	r0, r3
 8004af8:	46bd      	mov	sp, r7
 8004afa:	b006      	add	sp, #24
 8004afc:	bd80      	pop	{r7, pc}
 8004afe:	46c0      	nop			; (mov r8, r8)
 8004b00:	40021000 	.word	0x40021000
 8004b04:	00f42400 	.word	0x00f42400
 8004b08:	007a1200 	.word	0x007a1200

08004b0c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b10:	4b02      	ldr	r3, [pc, #8]	; (8004b1c <HAL_RCC_GetHCLKFreq+0x10>)
 8004b12:	681b      	ldr	r3, [r3, #0]
}
 8004b14:	0018      	movs	r0, r3
 8004b16:	46bd      	mov	sp, r7
 8004b18:	bd80      	pop	{r7, pc}
 8004b1a:	46c0      	nop			; (mov r8, r8)
 8004b1c:	20000034 	.word	0x20000034

08004b20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b20:	b5b0      	push	{r4, r5, r7, lr}
 8004b22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8004b24:	f7ff fff2 	bl	8004b0c <HAL_RCC_GetHCLKFreq>
 8004b28:	0004      	movs	r4, r0
 8004b2a:	f7ff fb49 	bl	80041c0 <LL_RCC_GetAPB1Prescaler>
 8004b2e:	0003      	movs	r3, r0
 8004b30:	0b1a      	lsrs	r2, r3, #12
 8004b32:	4b05      	ldr	r3, [pc, #20]	; (8004b48 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004b34:	0092      	lsls	r2, r2, #2
 8004b36:	58d3      	ldr	r3, [r2, r3]
 8004b38:	221f      	movs	r2, #31
 8004b3a:	4013      	ands	r3, r2
 8004b3c:	40dc      	lsrs	r4, r3
 8004b3e:	0023      	movs	r3, r4
}
 8004b40:	0018      	movs	r0, r3
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bdb0      	pop	{r4, r5, r7, pc}
 8004b46:	46c0      	nop			; (mov r8, r8)
 8004b48:	0800b398 	.word	0x0800b398

08004b4c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b086      	sub	sp, #24
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8004b54:	2313      	movs	r3, #19
 8004b56:	18fb      	adds	r3, r7, r3
 8004b58:	2200      	movs	r2, #0
 8004b5a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004b5c:	2312      	movs	r3, #18
 8004b5e:	18fb      	adds	r3, r7, r3
 8004b60:	2200      	movs	r2, #0
 8004b62:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681a      	ldr	r2, [r3, #0]
 8004b68:	2380      	movs	r3, #128	; 0x80
 8004b6a:	029b      	lsls	r3, r3, #10
 8004b6c:	4013      	ands	r3, r2
 8004b6e:	d100      	bne.n	8004b72 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8004b70:	e0a3      	b.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b72:	2011      	movs	r0, #17
 8004b74:	183b      	adds	r3, r7, r0
 8004b76:	2200      	movs	r2, #0
 8004b78:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b7a:	4b86      	ldr	r3, [pc, #536]	; (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004b7c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b7e:	2380      	movs	r3, #128	; 0x80
 8004b80:	055b      	lsls	r3, r3, #21
 8004b82:	4013      	ands	r3, r2
 8004b84:	d110      	bne.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b86:	4b83      	ldr	r3, [pc, #524]	; (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004b88:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b8a:	4b82      	ldr	r3, [pc, #520]	; (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004b8c:	2180      	movs	r1, #128	; 0x80
 8004b8e:	0549      	lsls	r1, r1, #21
 8004b90:	430a      	orrs	r2, r1
 8004b92:	63da      	str	r2, [r3, #60]	; 0x3c
 8004b94:	4b7f      	ldr	r3, [pc, #508]	; (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004b96:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b98:	2380      	movs	r3, #128	; 0x80
 8004b9a:	055b      	lsls	r3, r3, #21
 8004b9c:	4013      	ands	r3, r2
 8004b9e:	60bb      	str	r3, [r7, #8]
 8004ba0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ba2:	183b      	adds	r3, r7, r0
 8004ba4:	2201      	movs	r2, #1
 8004ba6:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004ba8:	4b7b      	ldr	r3, [pc, #492]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8004baa:	681a      	ldr	r2, [r3, #0]
 8004bac:	4b7a      	ldr	r3, [pc, #488]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8004bae:	2180      	movs	r1, #128	; 0x80
 8004bb0:	0049      	lsls	r1, r1, #1
 8004bb2:	430a      	orrs	r2, r1
 8004bb4:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004bb6:	f7fe fdbd 	bl	8003734 <HAL_GetTick>
 8004bba:	0003      	movs	r3, r0
 8004bbc:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004bbe:	e00b      	b.n	8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bc0:	f7fe fdb8 	bl	8003734 <HAL_GetTick>
 8004bc4:	0002      	movs	r2, r0
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	1ad3      	subs	r3, r2, r3
 8004bca:	2b02      	cmp	r3, #2
 8004bcc:	d904      	bls.n	8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8004bce:	2313      	movs	r3, #19
 8004bd0:	18fb      	adds	r3, r7, r3
 8004bd2:	2203      	movs	r2, #3
 8004bd4:	701a      	strb	r2, [r3, #0]
        break;
 8004bd6:	e005      	b.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004bd8:	4b6f      	ldr	r3, [pc, #444]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8004bda:	681a      	ldr	r2, [r3, #0]
 8004bdc:	2380      	movs	r3, #128	; 0x80
 8004bde:	005b      	lsls	r3, r3, #1
 8004be0:	4013      	ands	r3, r2
 8004be2:	d0ed      	beq.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8004be4:	2313      	movs	r3, #19
 8004be6:	18fb      	adds	r3, r7, r3
 8004be8:	781b      	ldrb	r3, [r3, #0]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d154      	bne.n	8004c98 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004bee:	4b69      	ldr	r3, [pc, #420]	; (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004bf0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004bf2:	23c0      	movs	r3, #192	; 0xc0
 8004bf4:	009b      	lsls	r3, r3, #2
 8004bf6:	4013      	ands	r3, r2
 8004bf8:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004bfa:	697b      	ldr	r3, [r7, #20]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d019      	beq.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	699b      	ldr	r3, [r3, #24]
 8004c04:	697a      	ldr	r2, [r7, #20]
 8004c06:	429a      	cmp	r2, r3
 8004c08:	d014      	beq.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004c0a:	4b62      	ldr	r3, [pc, #392]	; (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004c0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c0e:	4a63      	ldr	r2, [pc, #396]	; (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8004c10:	4013      	ands	r3, r2
 8004c12:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004c14:	4b5f      	ldr	r3, [pc, #380]	; (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004c16:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004c18:	4b5e      	ldr	r3, [pc, #376]	; (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004c1a:	2180      	movs	r1, #128	; 0x80
 8004c1c:	0249      	lsls	r1, r1, #9
 8004c1e:	430a      	orrs	r2, r1
 8004c20:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004c22:	4b5c      	ldr	r3, [pc, #368]	; (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004c24:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004c26:	4b5b      	ldr	r3, [pc, #364]	; (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004c28:	495d      	ldr	r1, [pc, #372]	; (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004c2a:	400a      	ands	r2, r1
 8004c2c:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004c2e:	4b59      	ldr	r3, [pc, #356]	; (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004c30:	697a      	ldr	r2, [r7, #20]
 8004c32:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004c34:	697b      	ldr	r3, [r7, #20]
 8004c36:	2201      	movs	r2, #1
 8004c38:	4013      	ands	r3, r2
 8004c3a:	d016      	beq.n	8004c6a <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c3c:	f7fe fd7a 	bl	8003734 <HAL_GetTick>
 8004c40:	0003      	movs	r3, r0
 8004c42:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c44:	e00c      	b.n	8004c60 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c46:	f7fe fd75 	bl	8003734 <HAL_GetTick>
 8004c4a:	0002      	movs	r2, r0
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	1ad3      	subs	r3, r2, r3
 8004c50:	4a54      	ldr	r2, [pc, #336]	; (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d904      	bls.n	8004c60 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8004c56:	2313      	movs	r3, #19
 8004c58:	18fb      	adds	r3, r7, r3
 8004c5a:	2203      	movs	r2, #3
 8004c5c:	701a      	strb	r2, [r3, #0]
            break;
 8004c5e:	e004      	b.n	8004c6a <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c60:	4b4c      	ldr	r3, [pc, #304]	; (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004c62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c64:	2202      	movs	r2, #2
 8004c66:	4013      	ands	r3, r2
 8004c68:	d0ed      	beq.n	8004c46 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8004c6a:	2313      	movs	r3, #19
 8004c6c:	18fb      	adds	r3, r7, r3
 8004c6e:	781b      	ldrb	r3, [r3, #0]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d10a      	bne.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004c74:	4b47      	ldr	r3, [pc, #284]	; (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004c76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c78:	4a48      	ldr	r2, [pc, #288]	; (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8004c7a:	4013      	ands	r3, r2
 8004c7c:	0019      	movs	r1, r3
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	699a      	ldr	r2, [r3, #24]
 8004c82:	4b44      	ldr	r3, [pc, #272]	; (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004c84:	430a      	orrs	r2, r1
 8004c86:	65da      	str	r2, [r3, #92]	; 0x5c
 8004c88:	e00c      	b.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004c8a:	2312      	movs	r3, #18
 8004c8c:	18fb      	adds	r3, r7, r3
 8004c8e:	2213      	movs	r2, #19
 8004c90:	18ba      	adds	r2, r7, r2
 8004c92:	7812      	ldrb	r2, [r2, #0]
 8004c94:	701a      	strb	r2, [r3, #0]
 8004c96:	e005      	b.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c98:	2312      	movs	r3, #18
 8004c9a:	18fb      	adds	r3, r7, r3
 8004c9c:	2213      	movs	r2, #19
 8004c9e:	18ba      	adds	r2, r7, r2
 8004ca0:	7812      	ldrb	r2, [r2, #0]
 8004ca2:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004ca4:	2311      	movs	r3, #17
 8004ca6:	18fb      	adds	r3, r7, r3
 8004ca8:	781b      	ldrb	r3, [r3, #0]
 8004caa:	2b01      	cmp	r3, #1
 8004cac:	d105      	bne.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004cae:	4b39      	ldr	r3, [pc, #228]	; (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004cb0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004cb2:	4b38      	ldr	r3, [pc, #224]	; (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004cb4:	493c      	ldr	r1, [pc, #240]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8004cb6:	400a      	ands	r2, r1
 8004cb8:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	2201      	movs	r2, #1
 8004cc0:	4013      	ands	r3, r2
 8004cc2:	d009      	beq.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004cc4:	4b33      	ldr	r3, [pc, #204]	; (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004cc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cc8:	2203      	movs	r2, #3
 8004cca:	4393      	bics	r3, r2
 8004ccc:	0019      	movs	r1, r3
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	685a      	ldr	r2, [r3, #4]
 8004cd2:	4b30      	ldr	r3, [pc, #192]	; (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004cd4:	430a      	orrs	r2, r1
 8004cd6:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	2202      	movs	r2, #2
 8004cde:	4013      	ands	r3, r2
 8004ce0:	d009      	beq.n	8004cf6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004ce2:	4b2c      	ldr	r3, [pc, #176]	; (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004ce4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ce6:	220c      	movs	r2, #12
 8004ce8:	4393      	bics	r3, r2
 8004cea:	0019      	movs	r1, r3
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	689a      	ldr	r2, [r3, #8]
 8004cf0:	4b28      	ldr	r3, [pc, #160]	; (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004cf2:	430a      	orrs	r2, r1
 8004cf4:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	2220      	movs	r2, #32
 8004cfc:	4013      	ands	r3, r2
 8004cfe:	d009      	beq.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004d00:	4b24      	ldr	r3, [pc, #144]	; (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004d02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d04:	4a29      	ldr	r2, [pc, #164]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d06:	4013      	ands	r3, r2
 8004d08:	0019      	movs	r1, r3
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	68da      	ldr	r2, [r3, #12]
 8004d0e:	4b21      	ldr	r3, [pc, #132]	; (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004d10:	430a      	orrs	r2, r1
 8004d12:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681a      	ldr	r2, [r3, #0]
 8004d18:	2380      	movs	r3, #128	; 0x80
 8004d1a:	01db      	lsls	r3, r3, #7
 8004d1c:	4013      	ands	r3, r2
 8004d1e:	d015      	beq.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004d20:	4b1c      	ldr	r3, [pc, #112]	; (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004d22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d24:	009b      	lsls	r3, r3, #2
 8004d26:	0899      	lsrs	r1, r3, #2
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	695a      	ldr	r2, [r3, #20]
 8004d2c:	4b19      	ldr	r3, [pc, #100]	; (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004d2e:	430a      	orrs	r2, r1
 8004d30:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	695a      	ldr	r2, [r3, #20]
 8004d36:	2380      	movs	r3, #128	; 0x80
 8004d38:	05db      	lsls	r3, r3, #23
 8004d3a:	429a      	cmp	r2, r3
 8004d3c:	d106      	bne.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004d3e:	4b15      	ldr	r3, [pc, #84]	; (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004d40:	68da      	ldr	r2, [r3, #12]
 8004d42:	4b14      	ldr	r3, [pc, #80]	; (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004d44:	2180      	movs	r1, #128	; 0x80
 8004d46:	0249      	lsls	r1, r1, #9
 8004d48:	430a      	orrs	r2, r1
 8004d4a:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681a      	ldr	r2, [r3, #0]
 8004d50:	2380      	movs	r3, #128	; 0x80
 8004d52:	011b      	lsls	r3, r3, #4
 8004d54:	4013      	ands	r3, r2
 8004d56:	d016      	beq.n	8004d86 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8004d58:	4b0e      	ldr	r3, [pc, #56]	; (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004d5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d5c:	4a14      	ldr	r2, [pc, #80]	; (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004d5e:	4013      	ands	r3, r2
 8004d60:	0019      	movs	r1, r3
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	691a      	ldr	r2, [r3, #16]
 8004d66:	4b0b      	ldr	r3, [pc, #44]	; (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004d68:	430a      	orrs	r2, r1
 8004d6a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	691a      	ldr	r2, [r3, #16]
 8004d70:	2380      	movs	r3, #128	; 0x80
 8004d72:	01db      	lsls	r3, r3, #7
 8004d74:	429a      	cmp	r2, r3
 8004d76:	d106      	bne.n	8004d86 <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004d78:	4b06      	ldr	r3, [pc, #24]	; (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004d7a:	68da      	ldr	r2, [r3, #12]
 8004d7c:	4b05      	ldr	r3, [pc, #20]	; (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004d7e:	2180      	movs	r1, #128	; 0x80
 8004d80:	0249      	lsls	r1, r1, #9
 8004d82:	430a      	orrs	r2, r1
 8004d84:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8004d86:	2312      	movs	r3, #18
 8004d88:	18fb      	adds	r3, r7, r3
 8004d8a:	781b      	ldrb	r3, [r3, #0]
}
 8004d8c:	0018      	movs	r0, r3
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	b006      	add	sp, #24
 8004d92:	bd80      	pop	{r7, pc}
 8004d94:	40021000 	.word	0x40021000
 8004d98:	40007000 	.word	0x40007000
 8004d9c:	fffffcff 	.word	0xfffffcff
 8004da0:	fffeffff 	.word	0xfffeffff
 8004da4:	00001388 	.word	0x00001388
 8004da8:	efffffff 	.word	0xefffffff
 8004dac:	ffffcfff 	.word	0xffffcfff
 8004db0:	ffff3fff 	.word	0xffff3fff

08004db4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b082      	sub	sp, #8
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d101      	bne.n	8004dc6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	e046      	b.n	8004e54 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2284      	movs	r2, #132	; 0x84
 8004dca:	589b      	ldr	r3, [r3, r2]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d107      	bne.n	8004de0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2280      	movs	r2, #128	; 0x80
 8004dd4:	2100      	movs	r1, #0
 8004dd6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	0018      	movs	r0, r3
 8004ddc:	f7fe fa3a 	bl	8003254 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2284      	movs	r2, #132	; 0x84
 8004de4:	2124      	movs	r1, #36	; 0x24
 8004de6:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	681a      	ldr	r2, [r3, #0]
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	2101      	movs	r1, #1
 8004df4:	438a      	bics	r2, r1
 8004df6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	0018      	movs	r0, r3
 8004dfc:	f000 f960 	bl	80050c0 <UART_SetConfig>
 8004e00:	0003      	movs	r3, r0
 8004e02:	2b01      	cmp	r3, #1
 8004e04:	d101      	bne.n	8004e0a <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8004e06:	2301      	movs	r3, #1
 8004e08:	e024      	b.n	8004e54 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d003      	beq.n	8004e1a <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	0018      	movs	r0, r3
 8004e16:	f000 faf7 	bl	8005408 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	685a      	ldr	r2, [r3, #4]
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	490d      	ldr	r1, [pc, #52]	; (8004e5c <HAL_UART_Init+0xa8>)
 8004e26:	400a      	ands	r2, r1
 8004e28:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	689a      	ldr	r2, [r3, #8]
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	212a      	movs	r1, #42	; 0x2a
 8004e36:	438a      	bics	r2, r1
 8004e38:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	681a      	ldr	r2, [r3, #0]
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	2101      	movs	r1, #1
 8004e46:	430a      	orrs	r2, r1
 8004e48:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	0018      	movs	r0, r3
 8004e4e:	f000 fb8f 	bl	8005570 <UART_CheckIdleState>
 8004e52:	0003      	movs	r3, r0
}
 8004e54:	0018      	movs	r0, r3
 8004e56:	46bd      	mov	sp, r7
 8004e58:	b002      	add	sp, #8
 8004e5a:	bd80      	pop	{r7, pc}
 8004e5c:	ffffb7ff 	.word	0xffffb7ff

08004e60 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b08a      	sub	sp, #40	; 0x28
 8004e64:	af02      	add	r7, sp, #8
 8004e66:	60f8      	str	r0, [r7, #12]
 8004e68:	60b9      	str	r1, [r7, #8]
 8004e6a:	603b      	str	r3, [r7, #0]
 8004e6c:	1dbb      	adds	r3, r7, #6
 8004e6e:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	2284      	movs	r2, #132	; 0x84
 8004e74:	589b      	ldr	r3, [r3, r2]
 8004e76:	2b20      	cmp	r3, #32
 8004e78:	d000      	beq.n	8004e7c <HAL_UART_Transmit+0x1c>
 8004e7a:	e097      	b.n	8004fac <HAL_UART_Transmit+0x14c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e7c:	68bb      	ldr	r3, [r7, #8]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d003      	beq.n	8004e8a <HAL_UART_Transmit+0x2a>
 8004e82:	1dbb      	adds	r3, r7, #6
 8004e84:	881b      	ldrh	r3, [r3, #0]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d101      	bne.n	8004e8e <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	e08f      	b.n	8004fae <HAL_UART_Transmit+0x14e>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	689a      	ldr	r2, [r3, #8]
 8004e92:	2380      	movs	r3, #128	; 0x80
 8004e94:	015b      	lsls	r3, r3, #5
 8004e96:	429a      	cmp	r2, r3
 8004e98:	d109      	bne.n	8004eae <HAL_UART_Transmit+0x4e>
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	691b      	ldr	r3, [r3, #16]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d105      	bne.n	8004eae <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004ea2:	68bb      	ldr	r3, [r7, #8]
 8004ea4:	2201      	movs	r2, #1
 8004ea6:	4013      	ands	r3, r2
 8004ea8:	d001      	beq.n	8004eae <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8004eaa:	2301      	movs	r3, #1
 8004eac:	e07f      	b.n	8004fae <HAL_UART_Transmit+0x14e>
      }
    }

    __HAL_LOCK(huart);
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	2280      	movs	r2, #128	; 0x80
 8004eb2:	5c9b      	ldrb	r3, [r3, r2]
 8004eb4:	2b01      	cmp	r3, #1
 8004eb6:	d101      	bne.n	8004ebc <HAL_UART_Transmit+0x5c>
 8004eb8:	2302      	movs	r3, #2
 8004eba:	e078      	b.n	8004fae <HAL_UART_Transmit+0x14e>
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	2280      	movs	r2, #128	; 0x80
 8004ec0:	2101      	movs	r1, #1
 8004ec2:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	228c      	movs	r2, #140	; 0x8c
 8004ec8:	2100      	movs	r1, #0
 8004eca:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	2284      	movs	r2, #132	; 0x84
 8004ed0:	2121      	movs	r1, #33	; 0x21
 8004ed2:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004ed4:	f7fe fc2e 	bl	8003734 <HAL_GetTick>
 8004ed8:	0003      	movs	r3, r0
 8004eda:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	1dba      	adds	r2, r7, #6
 8004ee0:	2154      	movs	r1, #84	; 0x54
 8004ee2:	8812      	ldrh	r2, [r2, #0]
 8004ee4:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	1dba      	adds	r2, r7, #6
 8004eea:	2156      	movs	r1, #86	; 0x56
 8004eec:	8812      	ldrh	r2, [r2, #0]
 8004eee:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	689a      	ldr	r2, [r3, #8]
 8004ef4:	2380      	movs	r3, #128	; 0x80
 8004ef6:	015b      	lsls	r3, r3, #5
 8004ef8:	429a      	cmp	r2, r3
 8004efa:	d108      	bne.n	8004f0e <HAL_UART_Transmit+0xae>
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	691b      	ldr	r3, [r3, #16]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d104      	bne.n	8004f0e <HAL_UART_Transmit+0xae>
    {
      pdata8bits  = NULL;
 8004f04:	2300      	movs	r3, #0
 8004f06:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	61bb      	str	r3, [r7, #24]
 8004f0c:	e003      	b.n	8004f16 <HAL_UART_Transmit+0xb6>
    }
    else
    {
      pdata8bits  = pData;
 8004f0e:	68bb      	ldr	r3, [r7, #8]
 8004f10:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004f12:	2300      	movs	r3, #0
 8004f14:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	2280      	movs	r2, #128	; 0x80
 8004f1a:	2100      	movs	r1, #0
 8004f1c:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8004f1e:	e02c      	b.n	8004f7a <HAL_UART_Transmit+0x11a>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004f20:	697a      	ldr	r2, [r7, #20]
 8004f22:	68f8      	ldr	r0, [r7, #12]
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	9300      	str	r3, [sp, #0]
 8004f28:	0013      	movs	r3, r2
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	2180      	movs	r1, #128	; 0x80
 8004f2e:	f000 fb69 	bl	8005604 <UART_WaitOnFlagUntilTimeout>
 8004f32:	1e03      	subs	r3, r0, #0
 8004f34:	d001      	beq.n	8004f3a <HAL_UART_Transmit+0xda>
      {
        return HAL_TIMEOUT;
 8004f36:	2303      	movs	r3, #3
 8004f38:	e039      	b.n	8004fae <HAL_UART_Transmit+0x14e>
      }
      if (pdata8bits == NULL)
 8004f3a:	69fb      	ldr	r3, [r7, #28]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d10b      	bne.n	8004f58 <HAL_UART_Transmit+0xf8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004f40:	69bb      	ldr	r3, [r7, #24]
 8004f42:	881b      	ldrh	r3, [r3, #0]
 8004f44:	001a      	movs	r2, r3
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	05d2      	lsls	r2, r2, #23
 8004f4c:	0dd2      	lsrs	r2, r2, #23
 8004f4e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004f50:	69bb      	ldr	r3, [r7, #24]
 8004f52:	3302      	adds	r3, #2
 8004f54:	61bb      	str	r3, [r7, #24]
 8004f56:	e007      	b.n	8004f68 <HAL_UART_Transmit+0x108>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004f58:	69fb      	ldr	r3, [r7, #28]
 8004f5a:	781a      	ldrb	r2, [r3, #0]
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004f62:	69fb      	ldr	r3, [r7, #28]
 8004f64:	3301      	adds	r3, #1
 8004f66:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	2256      	movs	r2, #86	; 0x56
 8004f6c:	5a9b      	ldrh	r3, [r3, r2]
 8004f6e:	b29b      	uxth	r3, r3
 8004f70:	3b01      	subs	r3, #1
 8004f72:	b299      	uxth	r1, r3
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	2256      	movs	r2, #86	; 0x56
 8004f78:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	2256      	movs	r2, #86	; 0x56
 8004f7e:	5a9b      	ldrh	r3, [r3, r2]
 8004f80:	b29b      	uxth	r3, r3
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d1cc      	bne.n	8004f20 <HAL_UART_Transmit+0xc0>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004f86:	697a      	ldr	r2, [r7, #20]
 8004f88:	68f8      	ldr	r0, [r7, #12]
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	9300      	str	r3, [sp, #0]
 8004f8e:	0013      	movs	r3, r2
 8004f90:	2200      	movs	r2, #0
 8004f92:	2140      	movs	r1, #64	; 0x40
 8004f94:	f000 fb36 	bl	8005604 <UART_WaitOnFlagUntilTimeout>
 8004f98:	1e03      	subs	r3, r0, #0
 8004f9a:	d001      	beq.n	8004fa0 <HAL_UART_Transmit+0x140>
    {
      return HAL_TIMEOUT;
 8004f9c:	2303      	movs	r3, #3
 8004f9e:	e006      	b.n	8004fae <HAL_UART_Transmit+0x14e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	2284      	movs	r2, #132	; 0x84
 8004fa4:	2120      	movs	r1, #32
 8004fa6:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8004fa8:	2300      	movs	r3, #0
 8004faa:	e000      	b.n	8004fae <HAL_UART_Transmit+0x14e>
  }
  else
  {
    return HAL_BUSY;
 8004fac:	2302      	movs	r3, #2
  }
}
 8004fae:	0018      	movs	r0, r3
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	b008      	add	sp, #32
 8004fb4:	bd80      	pop	{r7, pc}

08004fb6 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004fb6:	b580      	push	{r7, lr}
 8004fb8:	b088      	sub	sp, #32
 8004fba:	af00      	add	r7, sp, #0
 8004fbc:	60f8      	str	r0, [r7, #12]
 8004fbe:	60b9      	str	r1, [r7, #8]
 8004fc0:	1dbb      	adds	r3, r7, #6
 8004fc2:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	2288      	movs	r2, #136	; 0x88
 8004fc8:	589b      	ldr	r3, [r3, r2]
 8004fca:	2b20      	cmp	r3, #32
 8004fcc:	d150      	bne.n	8005070 <HAL_UART_Receive_DMA+0xba>
  {
    if ((pData == NULL) || (Size == 0U))
 8004fce:	68bb      	ldr	r3, [r7, #8]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d003      	beq.n	8004fdc <HAL_UART_Receive_DMA+0x26>
 8004fd4:	1dbb      	adds	r3, r7, #6
 8004fd6:	881b      	ldrh	r3, [r3, #0]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d101      	bne.n	8004fe0 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8004fdc:	2301      	movs	r3, #1
 8004fde:	e048      	b.n	8005072 <HAL_UART_Receive_DMA+0xbc>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	689a      	ldr	r2, [r3, #8]
 8004fe4:	2380      	movs	r3, #128	; 0x80
 8004fe6:	015b      	lsls	r3, r3, #5
 8004fe8:	429a      	cmp	r2, r3
 8004fea:	d109      	bne.n	8005000 <HAL_UART_Receive_DMA+0x4a>
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	691b      	ldr	r3, [r3, #16]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d105      	bne.n	8005000 <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004ff4:	68bb      	ldr	r3, [r7, #8]
 8004ff6:	2201      	movs	r2, #1
 8004ff8:	4013      	ands	r3, r2
 8004ffa:	d001      	beq.n	8005000 <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	e038      	b.n	8005072 <HAL_UART_Receive_DMA+0xbc>
      }
    }

    __HAL_LOCK(huart);
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	2280      	movs	r2, #128	; 0x80
 8005004:	5c9b      	ldrb	r3, [r3, r2]
 8005006:	2b01      	cmp	r3, #1
 8005008:	d101      	bne.n	800500e <HAL_UART_Receive_DMA+0x58>
 800500a:	2302      	movs	r3, #2
 800500c:	e031      	b.n	8005072 <HAL_UART_Receive_DMA+0xbc>
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	2280      	movs	r2, #128	; 0x80
 8005012:	2101      	movs	r1, #1
 8005014:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	2200      	movs	r2, #0
 800501a:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	685a      	ldr	r2, [r3, #4]
 8005022:	2380      	movs	r3, #128	; 0x80
 8005024:	041b      	lsls	r3, r3, #16
 8005026:	4013      	ands	r3, r2
 8005028:	d019      	beq.n	800505e <HAL_UART_Receive_DMA+0xa8>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800502a:	f3ef 8310 	mrs	r3, PRIMASK
 800502e:	613b      	str	r3, [r7, #16]
  return(result);
 8005030:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005032:	61fb      	str	r3, [r7, #28]
 8005034:	2301      	movs	r3, #1
 8005036:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005038:	697b      	ldr	r3, [r7, #20]
 800503a:	f383 8810 	msr	PRIMASK, r3
}
 800503e:	46c0      	nop			; (mov r8, r8)
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	681a      	ldr	r2, [r3, #0]
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	2180      	movs	r1, #128	; 0x80
 800504c:	04c9      	lsls	r1, r1, #19
 800504e:	430a      	orrs	r2, r1
 8005050:	601a      	str	r2, [r3, #0]
 8005052:	69fb      	ldr	r3, [r7, #28]
 8005054:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005056:	69bb      	ldr	r3, [r7, #24]
 8005058:	f383 8810 	msr	PRIMASK, r3
}
 800505c:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800505e:	1dbb      	adds	r3, r7, #6
 8005060:	881a      	ldrh	r2, [r3, #0]
 8005062:	68b9      	ldr	r1, [r7, #8]
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	0018      	movs	r0, r3
 8005068:	f000 fb94 	bl	8005794 <UART_Start_Receive_DMA>
 800506c:	0003      	movs	r3, r0
 800506e:	e000      	b.n	8005072 <HAL_UART_Receive_DMA+0xbc>
  }
  else
  {
    return HAL_BUSY;
 8005070:	2302      	movs	r3, #2
  }
}
 8005072:	0018      	movs	r0, r3
 8005074:	46bd      	mov	sp, r7
 8005076:	b008      	add	sp, #32
 8005078:	bd80      	pop	{r7, pc}

0800507a <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800507a:	b580      	push	{r7, lr}
 800507c:	b082      	sub	sp, #8
 800507e:	af00      	add	r7, sp, #0
 8005080:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8005082:	46c0      	nop			; (mov r8, r8)
 8005084:	46bd      	mov	sp, r7
 8005086:	b002      	add	sp, #8
 8005088:	bd80      	pop	{r7, pc}

0800508a <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800508a:	b580      	push	{r7, lr}
 800508c:	b082      	sub	sp, #8
 800508e:	af00      	add	r7, sp, #0
 8005090:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8005092:	46c0      	nop			; (mov r8, r8)
 8005094:	46bd      	mov	sp, r7
 8005096:	b002      	add	sp, #8
 8005098:	bd80      	pop	{r7, pc}

0800509a <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800509a:	b580      	push	{r7, lr}
 800509c:	b082      	sub	sp, #8
 800509e:	af00      	add	r7, sp, #0
 80050a0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80050a2:	46c0      	nop			; (mov r8, r8)
 80050a4:	46bd      	mov	sp, r7
 80050a6:	b002      	add	sp, #8
 80050a8:	bd80      	pop	{r7, pc}

080050aa <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80050aa:	b580      	push	{r7, lr}
 80050ac:	b082      	sub	sp, #8
 80050ae:	af00      	add	r7, sp, #0
 80050b0:	6078      	str	r0, [r7, #4]
 80050b2:	000a      	movs	r2, r1
 80050b4:	1cbb      	adds	r3, r7, #2
 80050b6:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80050b8:	46c0      	nop			; (mov r8, r8)
 80050ba:	46bd      	mov	sp, r7
 80050bc:	b002      	add	sp, #8
 80050be:	bd80      	pop	{r7, pc}

080050c0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b088      	sub	sp, #32
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80050c8:	231a      	movs	r3, #26
 80050ca:	18fb      	adds	r3, r7, r3
 80050cc:	2200      	movs	r2, #0
 80050ce:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	689a      	ldr	r2, [r3, #8]
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	691b      	ldr	r3, [r3, #16]
 80050d8:	431a      	orrs	r2, r3
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	695b      	ldr	r3, [r3, #20]
 80050de:	431a      	orrs	r2, r3
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	69db      	ldr	r3, [r3, #28]
 80050e4:	4313      	orrs	r3, r2
 80050e6:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4abc      	ldr	r2, [pc, #752]	; (80053e0 <UART_SetConfig+0x320>)
 80050f0:	4013      	ands	r3, r2
 80050f2:	0019      	movs	r1, r3
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	69fa      	ldr	r2, [r7, #28]
 80050fa:	430a      	orrs	r2, r1
 80050fc:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	685b      	ldr	r3, [r3, #4]
 8005104:	4ab7      	ldr	r2, [pc, #732]	; (80053e4 <UART_SetConfig+0x324>)
 8005106:	4013      	ands	r3, r2
 8005108:	0019      	movs	r1, r3
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	68da      	ldr	r2, [r3, #12]
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	430a      	orrs	r2, r1
 8005114:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	699b      	ldr	r3, [r3, #24]
 800511a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6a1b      	ldr	r3, [r3, #32]
 8005120:	69fa      	ldr	r2, [r7, #28]
 8005122:	4313      	orrs	r3, r2
 8005124:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	689b      	ldr	r3, [r3, #8]
 800512c:	4aae      	ldr	r2, [pc, #696]	; (80053e8 <UART_SetConfig+0x328>)
 800512e:	4013      	ands	r3, r2
 8005130:	0019      	movs	r1, r3
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	69fa      	ldr	r2, [r7, #28]
 8005138:	430a      	orrs	r2, r1
 800513a:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005142:	220f      	movs	r2, #15
 8005144:	4393      	bics	r3, r2
 8005146:	0019      	movs	r1, r3
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	430a      	orrs	r2, r1
 8005152:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4aa4      	ldr	r2, [pc, #656]	; (80053ec <UART_SetConfig+0x32c>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d127      	bne.n	80051ae <UART_SetConfig+0xee>
 800515e:	4ba4      	ldr	r3, [pc, #656]	; (80053f0 <UART_SetConfig+0x330>)
 8005160:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005162:	2203      	movs	r2, #3
 8005164:	4013      	ands	r3, r2
 8005166:	2b03      	cmp	r3, #3
 8005168:	d017      	beq.n	800519a <UART_SetConfig+0xda>
 800516a:	d81b      	bhi.n	80051a4 <UART_SetConfig+0xe4>
 800516c:	2b02      	cmp	r3, #2
 800516e:	d00a      	beq.n	8005186 <UART_SetConfig+0xc6>
 8005170:	d818      	bhi.n	80051a4 <UART_SetConfig+0xe4>
 8005172:	2b00      	cmp	r3, #0
 8005174:	d002      	beq.n	800517c <UART_SetConfig+0xbc>
 8005176:	2b01      	cmp	r3, #1
 8005178:	d00a      	beq.n	8005190 <UART_SetConfig+0xd0>
 800517a:	e013      	b.n	80051a4 <UART_SetConfig+0xe4>
 800517c:	231b      	movs	r3, #27
 800517e:	18fb      	adds	r3, r7, r3
 8005180:	2200      	movs	r2, #0
 8005182:	701a      	strb	r2, [r3, #0]
 8005184:	e058      	b.n	8005238 <UART_SetConfig+0x178>
 8005186:	231b      	movs	r3, #27
 8005188:	18fb      	adds	r3, r7, r3
 800518a:	2202      	movs	r2, #2
 800518c:	701a      	strb	r2, [r3, #0]
 800518e:	e053      	b.n	8005238 <UART_SetConfig+0x178>
 8005190:	231b      	movs	r3, #27
 8005192:	18fb      	adds	r3, r7, r3
 8005194:	2204      	movs	r2, #4
 8005196:	701a      	strb	r2, [r3, #0]
 8005198:	e04e      	b.n	8005238 <UART_SetConfig+0x178>
 800519a:	231b      	movs	r3, #27
 800519c:	18fb      	adds	r3, r7, r3
 800519e:	2208      	movs	r2, #8
 80051a0:	701a      	strb	r2, [r3, #0]
 80051a2:	e049      	b.n	8005238 <UART_SetConfig+0x178>
 80051a4:	231b      	movs	r3, #27
 80051a6:	18fb      	adds	r3, r7, r3
 80051a8:	2210      	movs	r2, #16
 80051aa:	701a      	strb	r2, [r3, #0]
 80051ac:	e044      	b.n	8005238 <UART_SetConfig+0x178>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	4a90      	ldr	r2, [pc, #576]	; (80053f4 <UART_SetConfig+0x334>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d127      	bne.n	8005208 <UART_SetConfig+0x148>
 80051b8:	4b8d      	ldr	r3, [pc, #564]	; (80053f0 <UART_SetConfig+0x330>)
 80051ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051bc:	220c      	movs	r2, #12
 80051be:	4013      	ands	r3, r2
 80051c0:	2b0c      	cmp	r3, #12
 80051c2:	d017      	beq.n	80051f4 <UART_SetConfig+0x134>
 80051c4:	d81b      	bhi.n	80051fe <UART_SetConfig+0x13e>
 80051c6:	2b08      	cmp	r3, #8
 80051c8:	d00a      	beq.n	80051e0 <UART_SetConfig+0x120>
 80051ca:	d818      	bhi.n	80051fe <UART_SetConfig+0x13e>
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d002      	beq.n	80051d6 <UART_SetConfig+0x116>
 80051d0:	2b04      	cmp	r3, #4
 80051d2:	d00a      	beq.n	80051ea <UART_SetConfig+0x12a>
 80051d4:	e013      	b.n	80051fe <UART_SetConfig+0x13e>
 80051d6:	231b      	movs	r3, #27
 80051d8:	18fb      	adds	r3, r7, r3
 80051da:	2200      	movs	r2, #0
 80051dc:	701a      	strb	r2, [r3, #0]
 80051de:	e02b      	b.n	8005238 <UART_SetConfig+0x178>
 80051e0:	231b      	movs	r3, #27
 80051e2:	18fb      	adds	r3, r7, r3
 80051e4:	2202      	movs	r2, #2
 80051e6:	701a      	strb	r2, [r3, #0]
 80051e8:	e026      	b.n	8005238 <UART_SetConfig+0x178>
 80051ea:	231b      	movs	r3, #27
 80051ec:	18fb      	adds	r3, r7, r3
 80051ee:	2204      	movs	r2, #4
 80051f0:	701a      	strb	r2, [r3, #0]
 80051f2:	e021      	b.n	8005238 <UART_SetConfig+0x178>
 80051f4:	231b      	movs	r3, #27
 80051f6:	18fb      	adds	r3, r7, r3
 80051f8:	2208      	movs	r2, #8
 80051fa:	701a      	strb	r2, [r3, #0]
 80051fc:	e01c      	b.n	8005238 <UART_SetConfig+0x178>
 80051fe:	231b      	movs	r3, #27
 8005200:	18fb      	adds	r3, r7, r3
 8005202:	2210      	movs	r2, #16
 8005204:	701a      	strb	r2, [r3, #0]
 8005206:	e017      	b.n	8005238 <UART_SetConfig+0x178>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4a7a      	ldr	r2, [pc, #488]	; (80053f8 <UART_SetConfig+0x338>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d104      	bne.n	800521c <UART_SetConfig+0x15c>
 8005212:	231b      	movs	r3, #27
 8005214:	18fb      	adds	r3, r7, r3
 8005216:	2200      	movs	r2, #0
 8005218:	701a      	strb	r2, [r3, #0]
 800521a:	e00d      	b.n	8005238 <UART_SetConfig+0x178>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4a76      	ldr	r2, [pc, #472]	; (80053fc <UART_SetConfig+0x33c>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d104      	bne.n	8005230 <UART_SetConfig+0x170>
 8005226:	231b      	movs	r3, #27
 8005228:	18fb      	adds	r3, r7, r3
 800522a:	2200      	movs	r2, #0
 800522c:	701a      	strb	r2, [r3, #0]
 800522e:	e003      	b.n	8005238 <UART_SetConfig+0x178>
 8005230:	231b      	movs	r3, #27
 8005232:	18fb      	adds	r3, r7, r3
 8005234:	2210      	movs	r2, #16
 8005236:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	69da      	ldr	r2, [r3, #28]
 800523c:	2380      	movs	r3, #128	; 0x80
 800523e:	021b      	lsls	r3, r3, #8
 8005240:	429a      	cmp	r2, r3
 8005242:	d000      	beq.n	8005246 <UART_SetConfig+0x186>
 8005244:	e065      	b.n	8005312 <UART_SetConfig+0x252>
  {
    switch (clocksource)
 8005246:	231b      	movs	r3, #27
 8005248:	18fb      	adds	r3, r7, r3
 800524a:	781b      	ldrb	r3, [r3, #0]
 800524c:	2b08      	cmp	r3, #8
 800524e:	d015      	beq.n	800527c <UART_SetConfig+0x1bc>
 8005250:	dc18      	bgt.n	8005284 <UART_SetConfig+0x1c4>
 8005252:	2b04      	cmp	r3, #4
 8005254:	d00d      	beq.n	8005272 <UART_SetConfig+0x1b2>
 8005256:	dc15      	bgt.n	8005284 <UART_SetConfig+0x1c4>
 8005258:	2b00      	cmp	r3, #0
 800525a:	d002      	beq.n	8005262 <UART_SetConfig+0x1a2>
 800525c:	2b02      	cmp	r3, #2
 800525e:	d005      	beq.n	800526c <UART_SetConfig+0x1ac>
 8005260:	e010      	b.n	8005284 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005262:	f7ff fc5d 	bl	8004b20 <HAL_RCC_GetPCLK1Freq>
 8005266:	0003      	movs	r3, r0
 8005268:	617b      	str	r3, [r7, #20]
        break;
 800526a:	e012      	b.n	8005292 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800526c:	4b64      	ldr	r3, [pc, #400]	; (8005400 <UART_SetConfig+0x340>)
 800526e:	617b      	str	r3, [r7, #20]
        break;
 8005270:	e00f      	b.n	8005292 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005272:	f7ff fbc9 	bl	8004a08 <HAL_RCC_GetSysClockFreq>
 8005276:	0003      	movs	r3, r0
 8005278:	617b      	str	r3, [r7, #20]
        break;
 800527a:	e00a      	b.n	8005292 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800527c:	2380      	movs	r3, #128	; 0x80
 800527e:	021b      	lsls	r3, r3, #8
 8005280:	617b      	str	r3, [r7, #20]
        break;
 8005282:	e006      	b.n	8005292 <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8005284:	2300      	movs	r3, #0
 8005286:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005288:	231a      	movs	r3, #26
 800528a:	18fb      	adds	r3, r7, r3
 800528c:	2201      	movs	r2, #1
 800528e:	701a      	strb	r2, [r3, #0]
        break;
 8005290:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005292:	697b      	ldr	r3, [r7, #20]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d100      	bne.n	800529a <UART_SetConfig+0x1da>
 8005298:	e08d      	b.n	80053b6 <UART_SetConfig+0x2f6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800529e:	4b59      	ldr	r3, [pc, #356]	; (8005404 <UART_SetConfig+0x344>)
 80052a0:	0052      	lsls	r2, r2, #1
 80052a2:	5ad3      	ldrh	r3, [r2, r3]
 80052a4:	0019      	movs	r1, r3
 80052a6:	6978      	ldr	r0, [r7, #20]
 80052a8:	f7fa ff50 	bl	800014c <__udivsi3>
 80052ac:	0003      	movs	r3, r0
 80052ae:	005a      	lsls	r2, r3, #1
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	685b      	ldr	r3, [r3, #4]
 80052b4:	085b      	lsrs	r3, r3, #1
 80052b6:	18d2      	adds	r2, r2, r3
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	685b      	ldr	r3, [r3, #4]
 80052bc:	0019      	movs	r1, r3
 80052be:	0010      	movs	r0, r2
 80052c0:	f7fa ff44 	bl	800014c <__udivsi3>
 80052c4:	0003      	movs	r3, r0
 80052c6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80052c8:	693b      	ldr	r3, [r7, #16]
 80052ca:	2b0f      	cmp	r3, #15
 80052cc:	d91c      	bls.n	8005308 <UART_SetConfig+0x248>
 80052ce:	693a      	ldr	r2, [r7, #16]
 80052d0:	2380      	movs	r3, #128	; 0x80
 80052d2:	025b      	lsls	r3, r3, #9
 80052d4:	429a      	cmp	r2, r3
 80052d6:	d217      	bcs.n	8005308 <UART_SetConfig+0x248>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80052d8:	693b      	ldr	r3, [r7, #16]
 80052da:	b29a      	uxth	r2, r3
 80052dc:	200e      	movs	r0, #14
 80052de:	183b      	adds	r3, r7, r0
 80052e0:	210f      	movs	r1, #15
 80052e2:	438a      	bics	r2, r1
 80052e4:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80052e6:	693b      	ldr	r3, [r7, #16]
 80052e8:	085b      	lsrs	r3, r3, #1
 80052ea:	b29b      	uxth	r3, r3
 80052ec:	2207      	movs	r2, #7
 80052ee:	4013      	ands	r3, r2
 80052f0:	b299      	uxth	r1, r3
 80052f2:	183b      	adds	r3, r7, r0
 80052f4:	183a      	adds	r2, r7, r0
 80052f6:	8812      	ldrh	r2, [r2, #0]
 80052f8:	430a      	orrs	r2, r1
 80052fa:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	183a      	adds	r2, r7, r0
 8005302:	8812      	ldrh	r2, [r2, #0]
 8005304:	60da      	str	r2, [r3, #12]
 8005306:	e056      	b.n	80053b6 <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 8005308:	231a      	movs	r3, #26
 800530a:	18fb      	adds	r3, r7, r3
 800530c:	2201      	movs	r2, #1
 800530e:	701a      	strb	r2, [r3, #0]
 8005310:	e051      	b.n	80053b6 <UART_SetConfig+0x2f6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005312:	231b      	movs	r3, #27
 8005314:	18fb      	adds	r3, r7, r3
 8005316:	781b      	ldrb	r3, [r3, #0]
 8005318:	2b08      	cmp	r3, #8
 800531a:	d015      	beq.n	8005348 <UART_SetConfig+0x288>
 800531c:	dc18      	bgt.n	8005350 <UART_SetConfig+0x290>
 800531e:	2b04      	cmp	r3, #4
 8005320:	d00d      	beq.n	800533e <UART_SetConfig+0x27e>
 8005322:	dc15      	bgt.n	8005350 <UART_SetConfig+0x290>
 8005324:	2b00      	cmp	r3, #0
 8005326:	d002      	beq.n	800532e <UART_SetConfig+0x26e>
 8005328:	2b02      	cmp	r3, #2
 800532a:	d005      	beq.n	8005338 <UART_SetConfig+0x278>
 800532c:	e010      	b.n	8005350 <UART_SetConfig+0x290>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800532e:	f7ff fbf7 	bl	8004b20 <HAL_RCC_GetPCLK1Freq>
 8005332:	0003      	movs	r3, r0
 8005334:	617b      	str	r3, [r7, #20]
        break;
 8005336:	e012      	b.n	800535e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005338:	4b31      	ldr	r3, [pc, #196]	; (8005400 <UART_SetConfig+0x340>)
 800533a:	617b      	str	r3, [r7, #20]
        break;
 800533c:	e00f      	b.n	800535e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800533e:	f7ff fb63 	bl	8004a08 <HAL_RCC_GetSysClockFreq>
 8005342:	0003      	movs	r3, r0
 8005344:	617b      	str	r3, [r7, #20]
        break;
 8005346:	e00a      	b.n	800535e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005348:	2380      	movs	r3, #128	; 0x80
 800534a:	021b      	lsls	r3, r3, #8
 800534c:	617b      	str	r3, [r7, #20]
        break;
 800534e:	e006      	b.n	800535e <UART_SetConfig+0x29e>
      default:
        pclk = 0U;
 8005350:	2300      	movs	r3, #0
 8005352:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005354:	231a      	movs	r3, #26
 8005356:	18fb      	adds	r3, r7, r3
 8005358:	2201      	movs	r2, #1
 800535a:	701a      	strb	r2, [r3, #0]
        break;
 800535c:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800535e:	697b      	ldr	r3, [r7, #20]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d028      	beq.n	80053b6 <UART_SetConfig+0x2f6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005368:	4b26      	ldr	r3, [pc, #152]	; (8005404 <UART_SetConfig+0x344>)
 800536a:	0052      	lsls	r2, r2, #1
 800536c:	5ad3      	ldrh	r3, [r2, r3]
 800536e:	0019      	movs	r1, r3
 8005370:	6978      	ldr	r0, [r7, #20]
 8005372:	f7fa feeb 	bl	800014c <__udivsi3>
 8005376:	0003      	movs	r3, r0
 8005378:	001a      	movs	r2, r3
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	685b      	ldr	r3, [r3, #4]
 800537e:	085b      	lsrs	r3, r3, #1
 8005380:	18d2      	adds	r2, r2, r3
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	685b      	ldr	r3, [r3, #4]
 8005386:	0019      	movs	r1, r3
 8005388:	0010      	movs	r0, r2
 800538a:	f7fa fedf 	bl	800014c <__udivsi3>
 800538e:	0003      	movs	r3, r0
 8005390:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005392:	693b      	ldr	r3, [r7, #16]
 8005394:	2b0f      	cmp	r3, #15
 8005396:	d90a      	bls.n	80053ae <UART_SetConfig+0x2ee>
 8005398:	693a      	ldr	r2, [r7, #16]
 800539a:	2380      	movs	r3, #128	; 0x80
 800539c:	025b      	lsls	r3, r3, #9
 800539e:	429a      	cmp	r2, r3
 80053a0:	d205      	bcs.n	80053ae <UART_SetConfig+0x2ee>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80053a2:	693b      	ldr	r3, [r7, #16]
 80053a4:	b29a      	uxth	r2, r3
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	60da      	str	r2, [r3, #12]
 80053ac:	e003      	b.n	80053b6 <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 80053ae:	231a      	movs	r3, #26
 80053b0:	18fb      	adds	r3, r7, r3
 80053b2:	2201      	movs	r2, #1
 80053b4:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	226a      	movs	r2, #106	; 0x6a
 80053ba:	2101      	movs	r1, #1
 80053bc:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2268      	movs	r2, #104	; 0x68
 80053c2:	2101      	movs	r1, #1
 80053c4:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2200      	movs	r2, #0
 80053ca:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2200      	movs	r2, #0
 80053d0:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80053d2:	231a      	movs	r3, #26
 80053d4:	18fb      	adds	r3, r7, r3
 80053d6:	781b      	ldrb	r3, [r3, #0]
}
 80053d8:	0018      	movs	r0, r3
 80053da:	46bd      	mov	sp, r7
 80053dc:	b008      	add	sp, #32
 80053de:	bd80      	pop	{r7, pc}
 80053e0:	cfff69f3 	.word	0xcfff69f3
 80053e4:	ffffcfff 	.word	0xffffcfff
 80053e8:	11fff4ff 	.word	0x11fff4ff
 80053ec:	40013800 	.word	0x40013800
 80053f0:	40021000 	.word	0x40021000
 80053f4:	40004400 	.word	0x40004400
 80053f8:	40004800 	.word	0x40004800
 80053fc:	40004c00 	.word	0x40004c00
 8005400:	00f42400 	.word	0x00f42400
 8005404:	0800b3b8 	.word	0x0800b3b8

08005408 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b082      	sub	sp, #8
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005414:	2201      	movs	r2, #1
 8005416:	4013      	ands	r3, r2
 8005418:	d00b      	beq.n	8005432 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	685b      	ldr	r3, [r3, #4]
 8005420:	4a4a      	ldr	r2, [pc, #296]	; (800554c <UART_AdvFeatureConfig+0x144>)
 8005422:	4013      	ands	r3, r2
 8005424:	0019      	movs	r1, r3
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	430a      	orrs	r2, r1
 8005430:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005436:	2202      	movs	r2, #2
 8005438:	4013      	ands	r3, r2
 800543a:	d00b      	beq.n	8005454 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	685b      	ldr	r3, [r3, #4]
 8005442:	4a43      	ldr	r2, [pc, #268]	; (8005550 <UART_AdvFeatureConfig+0x148>)
 8005444:	4013      	ands	r3, r2
 8005446:	0019      	movs	r1, r3
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	430a      	orrs	r2, r1
 8005452:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005458:	2204      	movs	r2, #4
 800545a:	4013      	ands	r3, r2
 800545c:	d00b      	beq.n	8005476 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	685b      	ldr	r3, [r3, #4]
 8005464:	4a3b      	ldr	r2, [pc, #236]	; (8005554 <UART_AdvFeatureConfig+0x14c>)
 8005466:	4013      	ands	r3, r2
 8005468:	0019      	movs	r1, r3
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	430a      	orrs	r2, r1
 8005474:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800547a:	2208      	movs	r2, #8
 800547c:	4013      	ands	r3, r2
 800547e:	d00b      	beq.n	8005498 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	685b      	ldr	r3, [r3, #4]
 8005486:	4a34      	ldr	r2, [pc, #208]	; (8005558 <UART_AdvFeatureConfig+0x150>)
 8005488:	4013      	ands	r3, r2
 800548a:	0019      	movs	r1, r3
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	430a      	orrs	r2, r1
 8005496:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800549c:	2210      	movs	r2, #16
 800549e:	4013      	ands	r3, r2
 80054a0:	d00b      	beq.n	80054ba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	689b      	ldr	r3, [r3, #8]
 80054a8:	4a2c      	ldr	r2, [pc, #176]	; (800555c <UART_AdvFeatureConfig+0x154>)
 80054aa:	4013      	ands	r3, r2
 80054ac:	0019      	movs	r1, r3
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	430a      	orrs	r2, r1
 80054b8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054be:	2220      	movs	r2, #32
 80054c0:	4013      	ands	r3, r2
 80054c2:	d00b      	beq.n	80054dc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	689b      	ldr	r3, [r3, #8]
 80054ca:	4a25      	ldr	r2, [pc, #148]	; (8005560 <UART_AdvFeatureConfig+0x158>)
 80054cc:	4013      	ands	r3, r2
 80054ce:	0019      	movs	r1, r3
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	430a      	orrs	r2, r1
 80054da:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054e0:	2240      	movs	r2, #64	; 0x40
 80054e2:	4013      	ands	r3, r2
 80054e4:	d01d      	beq.n	8005522 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	685b      	ldr	r3, [r3, #4]
 80054ec:	4a1d      	ldr	r2, [pc, #116]	; (8005564 <UART_AdvFeatureConfig+0x15c>)
 80054ee:	4013      	ands	r3, r2
 80054f0:	0019      	movs	r1, r3
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	430a      	orrs	r2, r1
 80054fc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005502:	2380      	movs	r3, #128	; 0x80
 8005504:	035b      	lsls	r3, r3, #13
 8005506:	429a      	cmp	r2, r3
 8005508:	d10b      	bne.n	8005522 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	685b      	ldr	r3, [r3, #4]
 8005510:	4a15      	ldr	r2, [pc, #84]	; (8005568 <UART_AdvFeatureConfig+0x160>)
 8005512:	4013      	ands	r3, r2
 8005514:	0019      	movs	r1, r3
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	430a      	orrs	r2, r1
 8005520:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005526:	2280      	movs	r2, #128	; 0x80
 8005528:	4013      	ands	r3, r2
 800552a:	d00b      	beq.n	8005544 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	685b      	ldr	r3, [r3, #4]
 8005532:	4a0e      	ldr	r2, [pc, #56]	; (800556c <UART_AdvFeatureConfig+0x164>)
 8005534:	4013      	ands	r3, r2
 8005536:	0019      	movs	r1, r3
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	430a      	orrs	r2, r1
 8005542:	605a      	str	r2, [r3, #4]
  }
}
 8005544:	46c0      	nop			; (mov r8, r8)
 8005546:	46bd      	mov	sp, r7
 8005548:	b002      	add	sp, #8
 800554a:	bd80      	pop	{r7, pc}
 800554c:	fffdffff 	.word	0xfffdffff
 8005550:	fffeffff 	.word	0xfffeffff
 8005554:	fffbffff 	.word	0xfffbffff
 8005558:	ffff7fff 	.word	0xffff7fff
 800555c:	ffffefff 	.word	0xffffefff
 8005560:	ffffdfff 	.word	0xffffdfff
 8005564:	ffefffff 	.word	0xffefffff
 8005568:	ff9fffff 	.word	0xff9fffff
 800556c:	fff7ffff 	.word	0xfff7ffff

08005570 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b086      	sub	sp, #24
 8005574:	af02      	add	r7, sp, #8
 8005576:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	228c      	movs	r2, #140	; 0x8c
 800557c:	2100      	movs	r1, #0
 800557e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005580:	f7fe f8d8 	bl	8003734 <HAL_GetTick>
 8005584:	0003      	movs	r3, r0
 8005586:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	2208      	movs	r2, #8
 8005590:	4013      	ands	r3, r2
 8005592:	2b08      	cmp	r3, #8
 8005594:	d10c      	bne.n	80055b0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	2280      	movs	r2, #128	; 0x80
 800559a:	0391      	lsls	r1, r2, #14
 800559c:	6878      	ldr	r0, [r7, #4]
 800559e:	4a18      	ldr	r2, [pc, #96]	; (8005600 <UART_CheckIdleState+0x90>)
 80055a0:	9200      	str	r2, [sp, #0]
 80055a2:	2200      	movs	r2, #0
 80055a4:	f000 f82e 	bl	8005604 <UART_WaitOnFlagUntilTimeout>
 80055a8:	1e03      	subs	r3, r0, #0
 80055aa:	d001      	beq.n	80055b0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80055ac:	2303      	movs	r3, #3
 80055ae:	e023      	b.n	80055f8 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	2204      	movs	r2, #4
 80055b8:	4013      	ands	r3, r2
 80055ba:	2b04      	cmp	r3, #4
 80055bc:	d10c      	bne.n	80055d8 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	2280      	movs	r2, #128	; 0x80
 80055c2:	03d1      	lsls	r1, r2, #15
 80055c4:	6878      	ldr	r0, [r7, #4]
 80055c6:	4a0e      	ldr	r2, [pc, #56]	; (8005600 <UART_CheckIdleState+0x90>)
 80055c8:	9200      	str	r2, [sp, #0]
 80055ca:	2200      	movs	r2, #0
 80055cc:	f000 f81a 	bl	8005604 <UART_WaitOnFlagUntilTimeout>
 80055d0:	1e03      	subs	r3, r0, #0
 80055d2:	d001      	beq.n	80055d8 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80055d4:	2303      	movs	r3, #3
 80055d6:	e00f      	b.n	80055f8 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2284      	movs	r2, #132	; 0x84
 80055dc:	2120      	movs	r1, #32
 80055de:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2288      	movs	r2, #136	; 0x88
 80055e4:	2120      	movs	r1, #32
 80055e6:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2200      	movs	r2, #0
 80055ec:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2280      	movs	r2, #128	; 0x80
 80055f2:	2100      	movs	r1, #0
 80055f4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80055f6:	2300      	movs	r3, #0
}
 80055f8:	0018      	movs	r0, r3
 80055fa:	46bd      	mov	sp, r7
 80055fc:	b004      	add	sp, #16
 80055fe:	bd80      	pop	{r7, pc}
 8005600:	01ffffff 	.word	0x01ffffff

08005604 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005604:	b580      	push	{r7, lr}
 8005606:	b094      	sub	sp, #80	; 0x50
 8005608:	af00      	add	r7, sp, #0
 800560a:	60f8      	str	r0, [r7, #12]
 800560c:	60b9      	str	r1, [r7, #8]
 800560e:	603b      	str	r3, [r7, #0]
 8005610:	1dfb      	adds	r3, r7, #7
 8005612:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005614:	e0a7      	b.n	8005766 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005616:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005618:	3301      	adds	r3, #1
 800561a:	d100      	bne.n	800561e <UART_WaitOnFlagUntilTimeout+0x1a>
 800561c:	e0a3      	b.n	8005766 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800561e:	f7fe f889 	bl	8003734 <HAL_GetTick>
 8005622:	0002      	movs	r2, r0
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	1ad3      	subs	r3, r2, r3
 8005628:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800562a:	429a      	cmp	r2, r3
 800562c:	d302      	bcc.n	8005634 <UART_WaitOnFlagUntilTimeout+0x30>
 800562e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005630:	2b00      	cmp	r3, #0
 8005632:	d13f      	bne.n	80056b4 <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005634:	f3ef 8310 	mrs	r3, PRIMASK
 8005638:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800563a:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800563c:	647b      	str	r3, [r7, #68]	; 0x44
 800563e:	2301      	movs	r3, #1
 8005640:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005644:	f383 8810 	msr	PRIMASK, r3
}
 8005648:	46c0      	nop			; (mov r8, r8)
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	681a      	ldr	r2, [r3, #0]
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	494e      	ldr	r1, [pc, #312]	; (8005790 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8005656:	400a      	ands	r2, r1
 8005658:	601a      	str	r2, [r3, #0]
 800565a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800565c:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800565e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005660:	f383 8810 	msr	PRIMASK, r3
}
 8005664:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005666:	f3ef 8310 	mrs	r3, PRIMASK
 800566a:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 800566c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800566e:	643b      	str	r3, [r7, #64]	; 0x40
 8005670:	2301      	movs	r3, #1
 8005672:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005674:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005676:	f383 8810 	msr	PRIMASK, r3
}
 800567a:	46c0      	nop			; (mov r8, r8)
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	689a      	ldr	r2, [r3, #8]
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	2101      	movs	r1, #1
 8005688:	438a      	bics	r2, r1
 800568a:	609a      	str	r2, [r3, #8]
 800568c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800568e:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005690:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005692:	f383 8810 	msr	PRIMASK, r3
}
 8005696:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	2284      	movs	r2, #132	; 0x84
 800569c:	2120      	movs	r1, #32
 800569e:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	2288      	movs	r2, #136	; 0x88
 80056a4:	2120      	movs	r1, #32
 80056a6:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	2280      	movs	r2, #128	; 0x80
 80056ac:	2100      	movs	r1, #0
 80056ae:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80056b0:	2303      	movs	r3, #3
 80056b2:	e069      	b.n	8005788 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	2204      	movs	r2, #4
 80056bc:	4013      	ands	r3, r2
 80056be:	d052      	beq.n	8005766 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	69da      	ldr	r2, [r3, #28]
 80056c6:	2380      	movs	r3, #128	; 0x80
 80056c8:	011b      	lsls	r3, r3, #4
 80056ca:	401a      	ands	r2, r3
 80056cc:	2380      	movs	r3, #128	; 0x80
 80056ce:	011b      	lsls	r3, r3, #4
 80056d0:	429a      	cmp	r2, r3
 80056d2:	d148      	bne.n	8005766 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	2280      	movs	r2, #128	; 0x80
 80056da:	0112      	lsls	r2, r2, #4
 80056dc:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80056de:	f3ef 8310 	mrs	r3, PRIMASK
 80056e2:	613b      	str	r3, [r7, #16]
  return(result);
 80056e4:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80056e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80056e8:	2301      	movs	r3, #1
 80056ea:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056ec:	697b      	ldr	r3, [r7, #20]
 80056ee:	f383 8810 	msr	PRIMASK, r3
}
 80056f2:	46c0      	nop			; (mov r8, r8)
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	681a      	ldr	r2, [r3, #0]
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	4924      	ldr	r1, [pc, #144]	; (8005790 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8005700:	400a      	ands	r2, r1
 8005702:	601a      	str	r2, [r3, #0]
 8005704:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005706:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005708:	69bb      	ldr	r3, [r7, #24]
 800570a:	f383 8810 	msr	PRIMASK, r3
}
 800570e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005710:	f3ef 8310 	mrs	r3, PRIMASK
 8005714:	61fb      	str	r3, [r7, #28]
  return(result);
 8005716:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005718:	64bb      	str	r3, [r7, #72]	; 0x48
 800571a:	2301      	movs	r3, #1
 800571c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800571e:	6a3b      	ldr	r3, [r7, #32]
 8005720:	f383 8810 	msr	PRIMASK, r3
}
 8005724:	46c0      	nop			; (mov r8, r8)
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	689a      	ldr	r2, [r3, #8]
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	2101      	movs	r1, #1
 8005732:	438a      	bics	r2, r1
 8005734:	609a      	str	r2, [r3, #8]
 8005736:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005738:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800573a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800573c:	f383 8810 	msr	PRIMASK, r3
}
 8005740:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	2284      	movs	r2, #132	; 0x84
 8005746:	2120      	movs	r1, #32
 8005748:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	2288      	movs	r2, #136	; 0x88
 800574e:	2120      	movs	r1, #32
 8005750:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	228c      	movs	r2, #140	; 0x8c
 8005756:	2120      	movs	r1, #32
 8005758:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	2280      	movs	r2, #128	; 0x80
 800575e:	2100      	movs	r1, #0
 8005760:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005762:	2303      	movs	r3, #3
 8005764:	e010      	b.n	8005788 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	69db      	ldr	r3, [r3, #28]
 800576c:	68ba      	ldr	r2, [r7, #8]
 800576e:	4013      	ands	r3, r2
 8005770:	68ba      	ldr	r2, [r7, #8]
 8005772:	1ad3      	subs	r3, r2, r3
 8005774:	425a      	negs	r2, r3
 8005776:	4153      	adcs	r3, r2
 8005778:	b2db      	uxtb	r3, r3
 800577a:	001a      	movs	r2, r3
 800577c:	1dfb      	adds	r3, r7, #7
 800577e:	781b      	ldrb	r3, [r3, #0]
 8005780:	429a      	cmp	r2, r3
 8005782:	d100      	bne.n	8005786 <UART_WaitOnFlagUntilTimeout+0x182>
 8005784:	e747      	b.n	8005616 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005786:	2300      	movs	r3, #0
}
 8005788:	0018      	movs	r0, r3
 800578a:	46bd      	mov	sp, r7
 800578c:	b014      	add	sp, #80	; 0x50
 800578e:	bd80      	pop	{r7, pc}
 8005790:	fffffe5f 	.word	0xfffffe5f

08005794 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005794:	b580      	push	{r7, lr}
 8005796:	b090      	sub	sp, #64	; 0x40
 8005798:	af00      	add	r7, sp, #0
 800579a:	60f8      	str	r0, [r7, #12]
 800579c:	60b9      	str	r1, [r7, #8]
 800579e:	1dbb      	adds	r3, r7, #6
 80057a0:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	68ba      	ldr	r2, [r7, #8]
 80057a6:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	1dba      	adds	r2, r7, #6
 80057ac:	215c      	movs	r1, #92	; 0x5c
 80057ae:	8812      	ldrh	r2, [r2, #0]
 80057b0:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	228c      	movs	r2, #140	; 0x8c
 80057b6:	2100      	movs	r1, #0
 80057b8:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	2288      	movs	r2, #136	; 0x88
 80057be:	2122      	movs	r1, #34	; 0x22
 80057c0:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d02c      	beq.n	8005824 <UART_Start_Receive_DMA+0x90>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80057ce:	4a42      	ldr	r2, [pc, #264]	; (80058d8 <UART_Start_Receive_DMA+0x144>)
 80057d0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80057d6:	4a41      	ldr	r2, [pc, #260]	; (80058dc <UART_Start_Receive_DMA+0x148>)
 80057d8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80057de:	4a40      	ldr	r2, [pc, #256]	; (80058e0 <UART_Start_Receive_DMA+0x14c>)
 80057e0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80057e6:	2200      	movs	r2, #0
 80057e8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	3324      	adds	r3, #36	; 0x24
 80057f4:	0019      	movs	r1, r3
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057fa:	001a      	movs	r2, r3
 80057fc:	1dbb      	adds	r3, r7, #6
 80057fe:	881b      	ldrh	r3, [r3, #0]
 8005800:	f7fe f920 	bl	8003a44 <HAL_DMA_Start_IT>
 8005804:	1e03      	subs	r3, r0, #0
 8005806:	d00d      	beq.n	8005824 <UART_Start_Receive_DMA+0x90>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	228c      	movs	r2, #140	; 0x8c
 800580c:	2110      	movs	r1, #16
 800580e:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	2280      	movs	r2, #128	; 0x80
 8005814:	2100      	movs	r1, #0
 8005816:	5499      	strb	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	2288      	movs	r2, #136	; 0x88
 800581c:	2120      	movs	r1, #32
 800581e:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 8005820:	2301      	movs	r3, #1
 8005822:	e054      	b.n	80058ce <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	2280      	movs	r2, #128	; 0x80
 8005828:	2100      	movs	r1, #0
 800582a:	5499      	strb	r1, [r3, r2]

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	691b      	ldr	r3, [r3, #16]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d019      	beq.n	8005868 <UART_Start_Receive_DMA+0xd4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005834:	f3ef 8310 	mrs	r3, PRIMASK
 8005838:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800583a:	6abb      	ldr	r3, [r7, #40]	; 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800583c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800583e:	2301      	movs	r3, #1
 8005840:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005844:	f383 8810 	msr	PRIMASK, r3
}
 8005848:	46c0      	nop			; (mov r8, r8)
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	681a      	ldr	r2, [r3, #0]
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	2180      	movs	r1, #128	; 0x80
 8005856:	0049      	lsls	r1, r1, #1
 8005858:	430a      	orrs	r2, r1
 800585a:	601a      	str	r2, [r3, #0]
 800585c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800585e:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005862:	f383 8810 	msr	PRIMASK, r3
}
 8005866:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005868:	f3ef 8310 	mrs	r3, PRIMASK
 800586c:	613b      	str	r3, [r7, #16]
  return(result);
 800586e:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005870:	63bb      	str	r3, [r7, #56]	; 0x38
 8005872:	2301      	movs	r3, #1
 8005874:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005876:	697b      	ldr	r3, [r7, #20]
 8005878:	f383 8810 	msr	PRIMASK, r3
}
 800587c:	46c0      	nop			; (mov r8, r8)
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	689a      	ldr	r2, [r3, #8]
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	2101      	movs	r1, #1
 800588a:	430a      	orrs	r2, r1
 800588c:	609a      	str	r2, [r3, #8]
 800588e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005890:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005892:	69bb      	ldr	r3, [r7, #24]
 8005894:	f383 8810 	msr	PRIMASK, r3
}
 8005898:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800589a:	f3ef 8310 	mrs	r3, PRIMASK
 800589e:	61fb      	str	r3, [r7, #28]
  return(result);
 80058a0:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80058a2:	637b      	str	r3, [r7, #52]	; 0x34
 80058a4:	2301      	movs	r3, #1
 80058a6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058a8:	6a3b      	ldr	r3, [r7, #32]
 80058aa:	f383 8810 	msr	PRIMASK, r3
}
 80058ae:	46c0      	nop			; (mov r8, r8)
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	689a      	ldr	r2, [r3, #8]
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	2140      	movs	r1, #64	; 0x40
 80058bc:	430a      	orrs	r2, r1
 80058be:	609a      	str	r2, [r3, #8]
 80058c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058c2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058c6:	f383 8810 	msr	PRIMASK, r3
}
 80058ca:	46c0      	nop			; (mov r8, r8)

  return HAL_OK;
 80058cc:	2300      	movs	r3, #0
}
 80058ce:	0018      	movs	r0, r3
 80058d0:	46bd      	mov	sp, r7
 80058d2:	b010      	add	sp, #64	; 0x40
 80058d4:	bd80      	pop	{r7, pc}
 80058d6:	46c0      	nop			; (mov r8, r8)
 80058d8:	08005a31 	.word	0x08005a31
 80058dc:	08005b59 	.word	0x08005b59
 80058e0:	08005b95 	.word	0x08005b95

080058e4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b08a      	sub	sp, #40	; 0x28
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80058ec:	f3ef 8310 	mrs	r3, PRIMASK
 80058f0:	60bb      	str	r3, [r7, #8]
  return(result);
 80058f2:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80058f4:	627b      	str	r3, [r7, #36]	; 0x24
 80058f6:	2301      	movs	r3, #1
 80058f8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	f383 8810 	msr	PRIMASK, r3
}
 8005900:	46c0      	nop			; (mov r8, r8)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	681a      	ldr	r2, [r3, #0]
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	21c0      	movs	r1, #192	; 0xc0
 800590e:	438a      	bics	r2, r1
 8005910:	601a      	str	r2, [r3, #0]
 8005912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005914:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005916:	693b      	ldr	r3, [r7, #16]
 8005918:	f383 8810 	msr	PRIMASK, r3
}
 800591c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800591e:	f3ef 8310 	mrs	r3, PRIMASK
 8005922:	617b      	str	r3, [r7, #20]
  return(result);
 8005924:	697b      	ldr	r3, [r7, #20]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8005926:	623b      	str	r3, [r7, #32]
 8005928:	2301      	movs	r3, #1
 800592a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800592c:	69bb      	ldr	r3, [r7, #24]
 800592e:	f383 8810 	msr	PRIMASK, r3
}
 8005932:	46c0      	nop			; (mov r8, r8)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	689a      	ldr	r2, [r3, #8]
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	4908      	ldr	r1, [pc, #32]	; (8005960 <UART_EndTxTransfer+0x7c>)
 8005940:	400a      	ands	r2, r1
 8005942:	609a      	str	r2, [r3, #8]
 8005944:	6a3b      	ldr	r3, [r7, #32]
 8005946:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005948:	69fb      	ldr	r3, [r7, #28]
 800594a:	f383 8810 	msr	PRIMASK, r3
}
 800594e:	46c0      	nop			; (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2284      	movs	r2, #132	; 0x84
 8005954:	2120      	movs	r1, #32
 8005956:	5099      	str	r1, [r3, r2]
}
 8005958:	46c0      	nop			; (mov r8, r8)
 800595a:	46bd      	mov	sp, r7
 800595c:	b00a      	add	sp, #40	; 0x28
 800595e:	bd80      	pop	{r7, pc}
 8005960:	ff7fffff 	.word	0xff7fffff

08005964 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005964:	b580      	push	{r7, lr}
 8005966:	b08e      	sub	sp, #56	; 0x38
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800596c:	f3ef 8310 	mrs	r3, PRIMASK
 8005970:	617b      	str	r3, [r7, #20]
  return(result);
 8005972:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005974:	637b      	str	r3, [r7, #52]	; 0x34
 8005976:	2301      	movs	r3, #1
 8005978:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800597a:	69bb      	ldr	r3, [r7, #24]
 800597c:	f383 8810 	msr	PRIMASK, r3
}
 8005980:	46c0      	nop			; (mov r8, r8)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	681a      	ldr	r2, [r3, #0]
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	4926      	ldr	r1, [pc, #152]	; (8005a28 <UART_EndRxTransfer+0xc4>)
 800598e:	400a      	ands	r2, r1
 8005990:	601a      	str	r2, [r3, #0]
 8005992:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005994:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005996:	69fb      	ldr	r3, [r7, #28]
 8005998:	f383 8810 	msr	PRIMASK, r3
}
 800599c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800599e:	f3ef 8310 	mrs	r3, PRIMASK
 80059a2:	623b      	str	r3, [r7, #32]
  return(result);
 80059a4:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80059a6:	633b      	str	r3, [r7, #48]	; 0x30
 80059a8:	2301      	movs	r3, #1
 80059aa:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ae:	f383 8810 	msr	PRIMASK, r3
}
 80059b2:	46c0      	nop			; (mov r8, r8)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	689a      	ldr	r2, [r3, #8]
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	491b      	ldr	r1, [pc, #108]	; (8005a2c <UART_EndRxTransfer+0xc8>)
 80059c0:	400a      	ands	r2, r1
 80059c2:	609a      	str	r2, [r3, #8]
 80059c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059c6:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059ca:	f383 8810 	msr	PRIMASK, r3
}
 80059ce:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80059d4:	2b01      	cmp	r3, #1
 80059d6:	d118      	bne.n	8005a0a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80059d8:	f3ef 8310 	mrs	r3, PRIMASK
 80059dc:	60bb      	str	r3, [r7, #8]
  return(result);
 80059de:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80059e2:	2301      	movs	r3, #1
 80059e4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	f383 8810 	msr	PRIMASK, r3
}
 80059ec:	46c0      	nop			; (mov r8, r8)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	681a      	ldr	r2, [r3, #0]
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	2110      	movs	r1, #16
 80059fa:	438a      	bics	r2, r1
 80059fc:	601a      	str	r2, [r3, #0]
 80059fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a00:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a02:	693b      	ldr	r3, [r7, #16]
 8005a04:	f383 8810 	msr	PRIMASK, r3
}
 8005a08:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2288      	movs	r2, #136	; 0x88
 8005a0e:	2120      	movs	r1, #32
 8005a10:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2200      	movs	r2, #0
 8005a16:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	671a      	str	r2, [r3, #112]	; 0x70
}
 8005a1e:	46c0      	nop			; (mov r8, r8)
 8005a20:	46bd      	mov	sp, r7
 8005a22:	b00e      	add	sp, #56	; 0x38
 8005a24:	bd80      	pop	{r7, pc}
 8005a26:	46c0      	nop			; (mov r8, r8)
 8005a28:	fffffedf 	.word	0xfffffedf
 8005a2c:	effffffe 	.word	0xeffffffe

08005a30 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b094      	sub	sp, #80	; 0x50
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a3c:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	2220      	movs	r2, #32
 8005a46:	4013      	ands	r3, r2
 8005a48:	d16f      	bne.n	8005b2a <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 8005a4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a4c:	225e      	movs	r2, #94	; 0x5e
 8005a4e:	2100      	movs	r1, #0
 8005a50:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a52:	f3ef 8310 	mrs	r3, PRIMASK
 8005a56:	61bb      	str	r3, [r7, #24]
  return(result);
 8005a58:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005a5a:	64bb      	str	r3, [r7, #72]	; 0x48
 8005a5c:	2301      	movs	r3, #1
 8005a5e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a60:	69fb      	ldr	r3, [r7, #28]
 8005a62:	f383 8810 	msr	PRIMASK, r3
}
 8005a66:	46c0      	nop			; (mov r8, r8)
 8005a68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	681a      	ldr	r2, [r3, #0]
 8005a6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4938      	ldr	r1, [pc, #224]	; (8005b54 <UART_DMAReceiveCplt+0x124>)
 8005a74:	400a      	ands	r2, r1
 8005a76:	601a      	str	r2, [r3, #0]
 8005a78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a7a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a7c:	6a3b      	ldr	r3, [r7, #32]
 8005a7e:	f383 8810 	msr	PRIMASK, r3
}
 8005a82:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a84:	f3ef 8310 	mrs	r3, PRIMASK
 8005a88:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8005a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a8c:	647b      	str	r3, [r7, #68]	; 0x44
 8005a8e:	2301      	movs	r3, #1
 8005a90:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a94:	f383 8810 	msr	PRIMASK, r3
}
 8005a98:	46c0      	nop			; (mov r8, r8)
 8005a9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	689a      	ldr	r2, [r3, #8]
 8005aa0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	2101      	movs	r1, #1
 8005aa6:	438a      	bics	r2, r1
 8005aa8:	609a      	str	r2, [r3, #8]
 8005aaa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005aac:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005aae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ab0:	f383 8810 	msr	PRIMASK, r3
}
 8005ab4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ab6:	f3ef 8310 	mrs	r3, PRIMASK
 8005aba:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8005abc:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005abe:	643b      	str	r3, [r7, #64]	; 0x40
 8005ac0:	2301      	movs	r3, #1
 8005ac2:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ac4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ac6:	f383 8810 	msr	PRIMASK, r3
}
 8005aca:	46c0      	nop			; (mov r8, r8)
 8005acc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	689a      	ldr	r2, [r3, #8]
 8005ad2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	2140      	movs	r1, #64	; 0x40
 8005ad8:	438a      	bics	r2, r1
 8005ada:	609a      	str	r2, [r3, #8]
 8005adc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ade:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ae0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ae2:	f383 8810 	msr	PRIMASK, r3
}
 8005ae6:	46c0      	nop			; (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005ae8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005aea:	2288      	movs	r2, #136	; 0x88
 8005aec:	2120      	movs	r1, #32
 8005aee:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005af0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005af2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005af4:	2b01      	cmp	r3, #1
 8005af6:	d118      	bne.n	8005b2a <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005af8:	f3ef 8310 	mrs	r3, PRIMASK
 8005afc:	60fb      	str	r3, [r7, #12]
  return(result);
 8005afe:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b00:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b02:	2301      	movs	r3, #1
 8005b04:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b06:	693b      	ldr	r3, [r7, #16]
 8005b08:	f383 8810 	msr	PRIMASK, r3
}
 8005b0c:	46c0      	nop			; (mov r8, r8)
 8005b0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	681a      	ldr	r2, [r3, #0]
 8005b14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	2110      	movs	r1, #16
 8005b1a:	438a      	bics	r2, r1
 8005b1c:	601a      	str	r2, [r3, #0]
 8005b1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b20:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b22:	697b      	ldr	r3, [r7, #20]
 8005b24:	f383 8810 	msr	PRIMASK, r3
}
 8005b28:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b2e:	2b01      	cmp	r3, #1
 8005b30:	d108      	bne.n	8005b44 <UART_DMAReceiveCplt+0x114>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005b32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b34:	225c      	movs	r2, #92	; 0x5c
 8005b36:	5a9a      	ldrh	r2, [r3, r2]
 8005b38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b3a:	0011      	movs	r1, r2
 8005b3c:	0018      	movs	r0, r3
 8005b3e:	f7ff fab4 	bl	80050aa <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005b42:	e003      	b.n	8005b4c <UART_DMAReceiveCplt+0x11c>
    HAL_UART_RxCpltCallback(huart);
 8005b44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b46:	0018      	movs	r0, r3
 8005b48:	f7ff fa97 	bl	800507a <HAL_UART_RxCpltCallback>
}
 8005b4c:	46c0      	nop			; (mov r8, r8)
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	b014      	add	sp, #80	; 0x50
 8005b52:	bd80      	pop	{r7, pc}
 8005b54:	fffffeff 	.word	0xfffffeff

08005b58 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b084      	sub	sp, #16
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b64:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b6a:	2b01      	cmp	r3, #1
 8005b6c:	d10a      	bne.n	8005b84 <UART_DMARxHalfCplt+0x2c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	225c      	movs	r2, #92	; 0x5c
 8005b72:	5a9b      	ldrh	r3, [r3, r2]
 8005b74:	085b      	lsrs	r3, r3, #1
 8005b76:	b29a      	uxth	r2, r3
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	0011      	movs	r1, r2
 8005b7c:	0018      	movs	r0, r3
 8005b7e:	f7ff fa94 	bl	80050aa <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005b82:	e003      	b.n	8005b8c <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	0018      	movs	r0, r3
 8005b88:	f7ff fa7f 	bl	800508a <HAL_UART_RxHalfCpltCallback>
}
 8005b8c:	46c0      	nop			; (mov r8, r8)
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	b004      	add	sp, #16
 8005b92:	bd80      	pop	{r7, pc}

08005b94 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b086      	sub	sp, #24
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ba0:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005ba2:	697b      	ldr	r3, [r7, #20]
 8005ba4:	2284      	movs	r2, #132	; 0x84
 8005ba6:	589b      	ldr	r3, [r3, r2]
 8005ba8:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005baa:	697b      	ldr	r3, [r7, #20]
 8005bac:	2288      	movs	r2, #136	; 0x88
 8005bae:	589b      	ldr	r3, [r3, r2]
 8005bb0:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005bb2:	697b      	ldr	r3, [r7, #20]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	689b      	ldr	r3, [r3, #8]
 8005bb8:	2280      	movs	r2, #128	; 0x80
 8005bba:	4013      	ands	r3, r2
 8005bbc:	2b80      	cmp	r3, #128	; 0x80
 8005bbe:	d10a      	bne.n	8005bd6 <UART_DMAError+0x42>
 8005bc0:	693b      	ldr	r3, [r7, #16]
 8005bc2:	2b21      	cmp	r3, #33	; 0x21
 8005bc4:	d107      	bne.n	8005bd6 <UART_DMAError+0x42>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8005bc6:	697b      	ldr	r3, [r7, #20]
 8005bc8:	2256      	movs	r2, #86	; 0x56
 8005bca:	2100      	movs	r1, #0
 8005bcc:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8005bce:	697b      	ldr	r3, [r7, #20]
 8005bd0:	0018      	movs	r0, r3
 8005bd2:	f7ff fe87 	bl	80058e4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005bd6:	697b      	ldr	r3, [r7, #20]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	689b      	ldr	r3, [r3, #8]
 8005bdc:	2240      	movs	r2, #64	; 0x40
 8005bde:	4013      	ands	r3, r2
 8005be0:	2b40      	cmp	r3, #64	; 0x40
 8005be2:	d10a      	bne.n	8005bfa <UART_DMAError+0x66>
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	2b22      	cmp	r3, #34	; 0x22
 8005be8:	d107      	bne.n	8005bfa <UART_DMAError+0x66>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8005bea:	697b      	ldr	r3, [r7, #20]
 8005bec:	225e      	movs	r2, #94	; 0x5e
 8005bee:	2100      	movs	r1, #0
 8005bf0:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8005bf2:	697b      	ldr	r3, [r7, #20]
 8005bf4:	0018      	movs	r0, r3
 8005bf6:	f7ff feb5 	bl	8005964 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005bfa:	697b      	ldr	r3, [r7, #20]
 8005bfc:	228c      	movs	r2, #140	; 0x8c
 8005bfe:	589b      	ldr	r3, [r3, r2]
 8005c00:	2210      	movs	r2, #16
 8005c02:	431a      	orrs	r2, r3
 8005c04:	697b      	ldr	r3, [r7, #20]
 8005c06:	218c      	movs	r1, #140	; 0x8c
 8005c08:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005c0a:	697b      	ldr	r3, [r7, #20]
 8005c0c:	0018      	movs	r0, r3
 8005c0e:	f7ff fa44 	bl	800509a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005c12:	46c0      	nop			; (mov r8, r8)
 8005c14:	46bd      	mov	sp, r7
 8005c16:	b006      	add	sp, #24
 8005c18:	bd80      	pop	{r7, pc}
	...

08005c1c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b084      	sub	sp, #16
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2280      	movs	r2, #128	; 0x80
 8005c28:	5c9b      	ldrb	r3, [r3, r2]
 8005c2a:	2b01      	cmp	r3, #1
 8005c2c:	d101      	bne.n	8005c32 <HAL_UARTEx_DisableFifoMode+0x16>
 8005c2e:	2302      	movs	r3, #2
 8005c30:	e027      	b.n	8005c82 <HAL_UARTEx_DisableFifoMode+0x66>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2280      	movs	r2, #128	; 0x80
 8005c36:	2101      	movs	r1, #1
 8005c38:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2284      	movs	r2, #132	; 0x84
 8005c3e:	2124      	movs	r1, #36	; 0x24
 8005c40:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	681a      	ldr	r2, [r3, #0]
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	2101      	movs	r1, #1
 8005c56:	438a      	bics	r2, r1
 8005c58:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	4a0b      	ldr	r2, [pc, #44]	; (8005c8c <HAL_UARTEx_DisableFifoMode+0x70>)
 8005c5e:	4013      	ands	r3, r2
 8005c60:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2200      	movs	r2, #0
 8005c66:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	68fa      	ldr	r2, [r7, #12]
 8005c6e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2284      	movs	r2, #132	; 0x84
 8005c74:	2120      	movs	r1, #32
 8005c76:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2280      	movs	r2, #128	; 0x80
 8005c7c:	2100      	movs	r1, #0
 8005c7e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005c80:	2300      	movs	r3, #0
}
 8005c82:	0018      	movs	r0, r3
 8005c84:	46bd      	mov	sp, r7
 8005c86:	b004      	add	sp, #16
 8005c88:	bd80      	pop	{r7, pc}
 8005c8a:	46c0      	nop			; (mov r8, r8)
 8005c8c:	dfffffff 	.word	0xdfffffff

08005c90 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b084      	sub	sp, #16
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
 8005c98:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2280      	movs	r2, #128	; 0x80
 8005c9e:	5c9b      	ldrb	r3, [r3, r2]
 8005ca0:	2b01      	cmp	r3, #1
 8005ca2:	d101      	bne.n	8005ca8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005ca4:	2302      	movs	r3, #2
 8005ca6:	e02e      	b.n	8005d06 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2280      	movs	r2, #128	; 0x80
 8005cac:	2101      	movs	r1, #1
 8005cae:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2284      	movs	r2, #132	; 0x84
 8005cb4:	2124      	movs	r1, #36	; 0x24
 8005cb6:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	681a      	ldr	r2, [r3, #0]
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	2101      	movs	r1, #1
 8005ccc:	438a      	bics	r2, r1
 8005cce:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	689b      	ldr	r3, [r3, #8]
 8005cd6:	00db      	lsls	r3, r3, #3
 8005cd8:	08d9      	lsrs	r1, r3, #3
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	683a      	ldr	r2, [r7, #0]
 8005ce0:	430a      	orrs	r2, r1
 8005ce2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	0018      	movs	r0, r3
 8005ce8:	f000 f854 	bl	8005d94 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	68fa      	ldr	r2, [r7, #12]
 8005cf2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2284      	movs	r2, #132	; 0x84
 8005cf8:	2120      	movs	r1, #32
 8005cfa:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2280      	movs	r2, #128	; 0x80
 8005d00:	2100      	movs	r1, #0
 8005d02:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005d04:	2300      	movs	r3, #0
}
 8005d06:	0018      	movs	r0, r3
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	b004      	add	sp, #16
 8005d0c:	bd80      	pop	{r7, pc}
	...

08005d10 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b084      	sub	sp, #16
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
 8005d18:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2280      	movs	r2, #128	; 0x80
 8005d1e:	5c9b      	ldrb	r3, [r3, r2]
 8005d20:	2b01      	cmp	r3, #1
 8005d22:	d101      	bne.n	8005d28 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005d24:	2302      	movs	r3, #2
 8005d26:	e02f      	b.n	8005d88 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2280      	movs	r2, #128	; 0x80
 8005d2c:	2101      	movs	r1, #1
 8005d2e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2284      	movs	r2, #132	; 0x84
 8005d34:	2124      	movs	r1, #36	; 0x24
 8005d36:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	681a      	ldr	r2, [r3, #0]
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	2101      	movs	r1, #1
 8005d4c:	438a      	bics	r2, r1
 8005d4e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	689b      	ldr	r3, [r3, #8]
 8005d56:	4a0e      	ldr	r2, [pc, #56]	; (8005d90 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8005d58:	4013      	ands	r3, r2
 8005d5a:	0019      	movs	r1, r3
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	683a      	ldr	r2, [r7, #0]
 8005d62:	430a      	orrs	r2, r1
 8005d64:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	0018      	movs	r0, r3
 8005d6a:	f000 f813 	bl	8005d94 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	68fa      	ldr	r2, [r7, #12]
 8005d74:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2284      	movs	r2, #132	; 0x84
 8005d7a:	2120      	movs	r1, #32
 8005d7c:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2280      	movs	r2, #128	; 0x80
 8005d82:	2100      	movs	r1, #0
 8005d84:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005d86:	2300      	movs	r3, #0
}
 8005d88:	0018      	movs	r0, r3
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	b004      	add	sp, #16
 8005d8e:	bd80      	pop	{r7, pc}
 8005d90:	f1ffffff 	.word	0xf1ffffff

08005d94 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005d94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d96:	b085      	sub	sp, #20
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d108      	bne.n	8005db6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	226a      	movs	r2, #106	; 0x6a
 8005da8:	2101      	movs	r1, #1
 8005daa:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2268      	movs	r2, #104	; 0x68
 8005db0:	2101      	movs	r1, #1
 8005db2:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005db4:	e043      	b.n	8005e3e <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005db6:	260f      	movs	r6, #15
 8005db8:	19bb      	adds	r3, r7, r6
 8005dba:	2208      	movs	r2, #8
 8005dbc:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005dbe:	200e      	movs	r0, #14
 8005dc0:	183b      	adds	r3, r7, r0
 8005dc2:	2208      	movs	r2, #8
 8005dc4:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	689b      	ldr	r3, [r3, #8]
 8005dcc:	0e5b      	lsrs	r3, r3, #25
 8005dce:	b2da      	uxtb	r2, r3
 8005dd0:	240d      	movs	r4, #13
 8005dd2:	193b      	adds	r3, r7, r4
 8005dd4:	2107      	movs	r1, #7
 8005dd6:	400a      	ands	r2, r1
 8005dd8:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	689b      	ldr	r3, [r3, #8]
 8005de0:	0f5b      	lsrs	r3, r3, #29
 8005de2:	b2da      	uxtb	r2, r3
 8005de4:	250c      	movs	r5, #12
 8005de6:	197b      	adds	r3, r7, r5
 8005de8:	2107      	movs	r1, #7
 8005dea:	400a      	ands	r2, r1
 8005dec:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005dee:	183b      	adds	r3, r7, r0
 8005df0:	781b      	ldrb	r3, [r3, #0]
 8005df2:	197a      	adds	r2, r7, r5
 8005df4:	7812      	ldrb	r2, [r2, #0]
 8005df6:	4914      	ldr	r1, [pc, #80]	; (8005e48 <UARTEx_SetNbDataToProcess+0xb4>)
 8005df8:	5c8a      	ldrb	r2, [r1, r2]
 8005dfa:	435a      	muls	r2, r3
 8005dfc:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8005dfe:	197b      	adds	r3, r7, r5
 8005e00:	781b      	ldrb	r3, [r3, #0]
 8005e02:	4a12      	ldr	r2, [pc, #72]	; (8005e4c <UARTEx_SetNbDataToProcess+0xb8>)
 8005e04:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005e06:	0019      	movs	r1, r3
 8005e08:	f7fa fa2a 	bl	8000260 <__divsi3>
 8005e0c:	0003      	movs	r3, r0
 8005e0e:	b299      	uxth	r1, r3
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	226a      	movs	r2, #106	; 0x6a
 8005e14:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005e16:	19bb      	adds	r3, r7, r6
 8005e18:	781b      	ldrb	r3, [r3, #0]
 8005e1a:	193a      	adds	r2, r7, r4
 8005e1c:	7812      	ldrb	r2, [r2, #0]
 8005e1e:	490a      	ldr	r1, [pc, #40]	; (8005e48 <UARTEx_SetNbDataToProcess+0xb4>)
 8005e20:	5c8a      	ldrb	r2, [r1, r2]
 8005e22:	435a      	muls	r2, r3
 8005e24:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8005e26:	193b      	adds	r3, r7, r4
 8005e28:	781b      	ldrb	r3, [r3, #0]
 8005e2a:	4a08      	ldr	r2, [pc, #32]	; (8005e4c <UARTEx_SetNbDataToProcess+0xb8>)
 8005e2c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005e2e:	0019      	movs	r1, r3
 8005e30:	f7fa fa16 	bl	8000260 <__divsi3>
 8005e34:	0003      	movs	r3, r0
 8005e36:	b299      	uxth	r1, r3
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2268      	movs	r2, #104	; 0x68
 8005e3c:	5299      	strh	r1, [r3, r2]
}
 8005e3e:	46c0      	nop			; (mov r8, r8)
 8005e40:	46bd      	mov	sp, r7
 8005e42:	b005      	add	sp, #20
 8005e44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e46:	46c0      	nop			; (mov r8, r8)
 8005e48:	0800b3d0 	.word	0x0800b3d0
 8005e4c:	0800b3d8 	.word	0x0800b3d8

08005e50 <__errno>:
 8005e50:	4b01      	ldr	r3, [pc, #4]	; (8005e58 <__errno+0x8>)
 8005e52:	6818      	ldr	r0, [r3, #0]
 8005e54:	4770      	bx	lr
 8005e56:	46c0      	nop			; (mov r8, r8)
 8005e58:	20000040 	.word	0x20000040

08005e5c <__libc_init_array>:
 8005e5c:	b570      	push	{r4, r5, r6, lr}
 8005e5e:	2600      	movs	r6, #0
 8005e60:	4d0c      	ldr	r5, [pc, #48]	; (8005e94 <__libc_init_array+0x38>)
 8005e62:	4c0d      	ldr	r4, [pc, #52]	; (8005e98 <__libc_init_array+0x3c>)
 8005e64:	1b64      	subs	r4, r4, r5
 8005e66:	10a4      	asrs	r4, r4, #2
 8005e68:	42a6      	cmp	r6, r4
 8005e6a:	d109      	bne.n	8005e80 <__libc_init_array+0x24>
 8005e6c:	2600      	movs	r6, #0
 8005e6e:	f005 f9c9 	bl	800b204 <_init>
 8005e72:	4d0a      	ldr	r5, [pc, #40]	; (8005e9c <__libc_init_array+0x40>)
 8005e74:	4c0a      	ldr	r4, [pc, #40]	; (8005ea0 <__libc_init_array+0x44>)
 8005e76:	1b64      	subs	r4, r4, r5
 8005e78:	10a4      	asrs	r4, r4, #2
 8005e7a:	42a6      	cmp	r6, r4
 8005e7c:	d105      	bne.n	8005e8a <__libc_init_array+0x2e>
 8005e7e:	bd70      	pop	{r4, r5, r6, pc}
 8005e80:	00b3      	lsls	r3, r6, #2
 8005e82:	58eb      	ldr	r3, [r5, r3]
 8005e84:	4798      	blx	r3
 8005e86:	3601      	adds	r6, #1
 8005e88:	e7ee      	b.n	8005e68 <__libc_init_array+0xc>
 8005e8a:	00b3      	lsls	r3, r6, #2
 8005e8c:	58eb      	ldr	r3, [r5, r3]
 8005e8e:	4798      	blx	r3
 8005e90:	3601      	adds	r6, #1
 8005e92:	e7f2      	b.n	8005e7a <__libc_init_array+0x1e>
 8005e94:	0800b89c 	.word	0x0800b89c
 8005e98:	0800b89c 	.word	0x0800b89c
 8005e9c:	0800b89c 	.word	0x0800b89c
 8005ea0:	0800b8a0 	.word	0x0800b8a0

08005ea4 <memset>:
 8005ea4:	0003      	movs	r3, r0
 8005ea6:	1882      	adds	r2, r0, r2
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	d100      	bne.n	8005eae <memset+0xa>
 8005eac:	4770      	bx	lr
 8005eae:	7019      	strb	r1, [r3, #0]
 8005eb0:	3301      	adds	r3, #1
 8005eb2:	e7f9      	b.n	8005ea8 <memset+0x4>

08005eb4 <__cvt>:
 8005eb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005eb6:	001e      	movs	r6, r3
 8005eb8:	2300      	movs	r3, #0
 8005eba:	0014      	movs	r4, r2
 8005ebc:	b08b      	sub	sp, #44	; 0x2c
 8005ebe:	429e      	cmp	r6, r3
 8005ec0:	da04      	bge.n	8005ecc <__cvt+0x18>
 8005ec2:	2180      	movs	r1, #128	; 0x80
 8005ec4:	0609      	lsls	r1, r1, #24
 8005ec6:	1873      	adds	r3, r6, r1
 8005ec8:	001e      	movs	r6, r3
 8005eca:	232d      	movs	r3, #45	; 0x2d
 8005ecc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005ece:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8005ed0:	7013      	strb	r3, [r2, #0]
 8005ed2:	2320      	movs	r3, #32
 8005ed4:	2203      	movs	r2, #3
 8005ed6:	439f      	bics	r7, r3
 8005ed8:	2f46      	cmp	r7, #70	; 0x46
 8005eda:	d007      	beq.n	8005eec <__cvt+0x38>
 8005edc:	003b      	movs	r3, r7
 8005ede:	3b45      	subs	r3, #69	; 0x45
 8005ee0:	4259      	negs	r1, r3
 8005ee2:	414b      	adcs	r3, r1
 8005ee4:	9910      	ldr	r1, [sp, #64]	; 0x40
 8005ee6:	3a01      	subs	r2, #1
 8005ee8:	18cb      	adds	r3, r1, r3
 8005eea:	9310      	str	r3, [sp, #64]	; 0x40
 8005eec:	ab09      	add	r3, sp, #36	; 0x24
 8005eee:	9304      	str	r3, [sp, #16]
 8005ef0:	ab08      	add	r3, sp, #32
 8005ef2:	9303      	str	r3, [sp, #12]
 8005ef4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005ef6:	9200      	str	r2, [sp, #0]
 8005ef8:	9302      	str	r3, [sp, #8]
 8005efa:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005efc:	0022      	movs	r2, r4
 8005efe:	9301      	str	r3, [sp, #4]
 8005f00:	0033      	movs	r3, r6
 8005f02:	f001 fe75 	bl	8007bf0 <_dtoa_r>
 8005f06:	0005      	movs	r5, r0
 8005f08:	2f47      	cmp	r7, #71	; 0x47
 8005f0a:	d102      	bne.n	8005f12 <__cvt+0x5e>
 8005f0c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005f0e:	07db      	lsls	r3, r3, #31
 8005f10:	d528      	bpl.n	8005f64 <__cvt+0xb0>
 8005f12:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005f14:	18eb      	adds	r3, r5, r3
 8005f16:	9307      	str	r3, [sp, #28]
 8005f18:	2f46      	cmp	r7, #70	; 0x46
 8005f1a:	d114      	bne.n	8005f46 <__cvt+0x92>
 8005f1c:	782b      	ldrb	r3, [r5, #0]
 8005f1e:	2b30      	cmp	r3, #48	; 0x30
 8005f20:	d10c      	bne.n	8005f3c <__cvt+0x88>
 8005f22:	2200      	movs	r2, #0
 8005f24:	2300      	movs	r3, #0
 8005f26:	0020      	movs	r0, r4
 8005f28:	0031      	movs	r1, r6
 8005f2a:	f7fa fa95 	bl	8000458 <__aeabi_dcmpeq>
 8005f2e:	2800      	cmp	r0, #0
 8005f30:	d104      	bne.n	8005f3c <__cvt+0x88>
 8005f32:	2301      	movs	r3, #1
 8005f34:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005f36:	1a9b      	subs	r3, r3, r2
 8005f38:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005f3a:	6013      	str	r3, [r2, #0]
 8005f3c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005f3e:	9a07      	ldr	r2, [sp, #28]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	18d3      	adds	r3, r2, r3
 8005f44:	9307      	str	r3, [sp, #28]
 8005f46:	2200      	movs	r2, #0
 8005f48:	2300      	movs	r3, #0
 8005f4a:	0020      	movs	r0, r4
 8005f4c:	0031      	movs	r1, r6
 8005f4e:	f7fa fa83 	bl	8000458 <__aeabi_dcmpeq>
 8005f52:	2800      	cmp	r0, #0
 8005f54:	d001      	beq.n	8005f5a <__cvt+0xa6>
 8005f56:	9b07      	ldr	r3, [sp, #28]
 8005f58:	9309      	str	r3, [sp, #36]	; 0x24
 8005f5a:	2230      	movs	r2, #48	; 0x30
 8005f5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f5e:	9907      	ldr	r1, [sp, #28]
 8005f60:	428b      	cmp	r3, r1
 8005f62:	d306      	bcc.n	8005f72 <__cvt+0xbe>
 8005f64:	0028      	movs	r0, r5
 8005f66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f68:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005f6a:	1b5b      	subs	r3, r3, r5
 8005f6c:	6013      	str	r3, [r2, #0]
 8005f6e:	b00b      	add	sp, #44	; 0x2c
 8005f70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f72:	1c59      	adds	r1, r3, #1
 8005f74:	9109      	str	r1, [sp, #36]	; 0x24
 8005f76:	701a      	strb	r2, [r3, #0]
 8005f78:	e7f0      	b.n	8005f5c <__cvt+0xa8>

08005f7a <__exponent>:
 8005f7a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f7c:	1c83      	adds	r3, r0, #2
 8005f7e:	b087      	sub	sp, #28
 8005f80:	9303      	str	r3, [sp, #12]
 8005f82:	0005      	movs	r5, r0
 8005f84:	000c      	movs	r4, r1
 8005f86:	232b      	movs	r3, #43	; 0x2b
 8005f88:	7002      	strb	r2, [r0, #0]
 8005f8a:	2900      	cmp	r1, #0
 8005f8c:	da01      	bge.n	8005f92 <__exponent+0x18>
 8005f8e:	424c      	negs	r4, r1
 8005f90:	3302      	adds	r3, #2
 8005f92:	706b      	strb	r3, [r5, #1]
 8005f94:	2c09      	cmp	r4, #9
 8005f96:	dd31      	ble.n	8005ffc <__exponent+0x82>
 8005f98:	270a      	movs	r7, #10
 8005f9a:	ab04      	add	r3, sp, #16
 8005f9c:	1dde      	adds	r6, r3, #7
 8005f9e:	0020      	movs	r0, r4
 8005fa0:	0039      	movs	r1, r7
 8005fa2:	9601      	str	r6, [sp, #4]
 8005fa4:	f7fa fa42 	bl	800042c <__aeabi_idivmod>
 8005fa8:	3e01      	subs	r6, #1
 8005faa:	3130      	adds	r1, #48	; 0x30
 8005fac:	0020      	movs	r0, r4
 8005fae:	7031      	strb	r1, [r6, #0]
 8005fb0:	0039      	movs	r1, r7
 8005fb2:	9402      	str	r4, [sp, #8]
 8005fb4:	f7fa f954 	bl	8000260 <__divsi3>
 8005fb8:	9b02      	ldr	r3, [sp, #8]
 8005fba:	0004      	movs	r4, r0
 8005fbc:	2b63      	cmp	r3, #99	; 0x63
 8005fbe:	dcee      	bgt.n	8005f9e <__exponent+0x24>
 8005fc0:	9b01      	ldr	r3, [sp, #4]
 8005fc2:	3430      	adds	r4, #48	; 0x30
 8005fc4:	1e9a      	subs	r2, r3, #2
 8005fc6:	0013      	movs	r3, r2
 8005fc8:	9903      	ldr	r1, [sp, #12]
 8005fca:	7014      	strb	r4, [r2, #0]
 8005fcc:	a804      	add	r0, sp, #16
 8005fce:	3007      	adds	r0, #7
 8005fd0:	4298      	cmp	r0, r3
 8005fd2:	d80e      	bhi.n	8005ff2 <__exponent+0x78>
 8005fd4:	ab04      	add	r3, sp, #16
 8005fd6:	3307      	adds	r3, #7
 8005fd8:	2000      	movs	r0, #0
 8005fda:	429a      	cmp	r2, r3
 8005fdc:	d804      	bhi.n	8005fe8 <__exponent+0x6e>
 8005fde:	ab04      	add	r3, sp, #16
 8005fe0:	3009      	adds	r0, #9
 8005fe2:	18c0      	adds	r0, r0, r3
 8005fe4:	9b01      	ldr	r3, [sp, #4]
 8005fe6:	1ac0      	subs	r0, r0, r3
 8005fe8:	9b03      	ldr	r3, [sp, #12]
 8005fea:	1818      	adds	r0, r3, r0
 8005fec:	1b40      	subs	r0, r0, r5
 8005fee:	b007      	add	sp, #28
 8005ff0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ff2:	7818      	ldrb	r0, [r3, #0]
 8005ff4:	3301      	adds	r3, #1
 8005ff6:	7008      	strb	r0, [r1, #0]
 8005ff8:	3101      	adds	r1, #1
 8005ffa:	e7e7      	b.n	8005fcc <__exponent+0x52>
 8005ffc:	2330      	movs	r3, #48	; 0x30
 8005ffe:	18e4      	adds	r4, r4, r3
 8006000:	70ab      	strb	r3, [r5, #2]
 8006002:	1d28      	adds	r0, r5, #4
 8006004:	70ec      	strb	r4, [r5, #3]
 8006006:	e7f1      	b.n	8005fec <__exponent+0x72>

08006008 <_printf_float>:
 8006008:	b5f0      	push	{r4, r5, r6, r7, lr}
 800600a:	b095      	sub	sp, #84	; 0x54
 800600c:	000c      	movs	r4, r1
 800600e:	9209      	str	r2, [sp, #36]	; 0x24
 8006010:	001e      	movs	r6, r3
 8006012:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8006014:	0007      	movs	r7, r0
 8006016:	f002 ff79 	bl	8008f0c <_localeconv_r>
 800601a:	6803      	ldr	r3, [r0, #0]
 800601c:	0018      	movs	r0, r3
 800601e:	930c      	str	r3, [sp, #48]	; 0x30
 8006020:	f7fa f878 	bl	8000114 <strlen>
 8006024:	2300      	movs	r3, #0
 8006026:	9312      	str	r3, [sp, #72]	; 0x48
 8006028:	7e23      	ldrb	r3, [r4, #24]
 800602a:	2207      	movs	r2, #7
 800602c:	930a      	str	r3, [sp, #40]	; 0x28
 800602e:	6823      	ldr	r3, [r4, #0]
 8006030:	900e      	str	r0, [sp, #56]	; 0x38
 8006032:	930d      	str	r3, [sp, #52]	; 0x34
 8006034:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006036:	682b      	ldr	r3, [r5, #0]
 8006038:	05c9      	lsls	r1, r1, #23
 800603a:	d547      	bpl.n	80060cc <_printf_float+0xc4>
 800603c:	189b      	adds	r3, r3, r2
 800603e:	4393      	bics	r3, r2
 8006040:	001a      	movs	r2, r3
 8006042:	3208      	adds	r2, #8
 8006044:	602a      	str	r2, [r5, #0]
 8006046:	681a      	ldr	r2, [r3, #0]
 8006048:	685b      	ldr	r3, [r3, #4]
 800604a:	64a2      	str	r2, [r4, #72]	; 0x48
 800604c:	64e3      	str	r3, [r4, #76]	; 0x4c
 800604e:	2201      	movs	r2, #1
 8006050:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8006052:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8006054:	930b      	str	r3, [sp, #44]	; 0x2c
 8006056:	006b      	lsls	r3, r5, #1
 8006058:	085b      	lsrs	r3, r3, #1
 800605a:	930f      	str	r3, [sp, #60]	; 0x3c
 800605c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800605e:	4ba7      	ldr	r3, [pc, #668]	; (80062fc <_printf_float+0x2f4>)
 8006060:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006062:	4252      	negs	r2, r2
 8006064:	f7fc fca4 	bl	80029b0 <__aeabi_dcmpun>
 8006068:	2800      	cmp	r0, #0
 800606a:	d131      	bne.n	80060d0 <_printf_float+0xc8>
 800606c:	2201      	movs	r2, #1
 800606e:	4ba3      	ldr	r3, [pc, #652]	; (80062fc <_printf_float+0x2f4>)
 8006070:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8006072:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006074:	4252      	negs	r2, r2
 8006076:	f7fa f9ff 	bl	8000478 <__aeabi_dcmple>
 800607a:	2800      	cmp	r0, #0
 800607c:	d128      	bne.n	80060d0 <_printf_float+0xc8>
 800607e:	2200      	movs	r2, #0
 8006080:	2300      	movs	r3, #0
 8006082:	0029      	movs	r1, r5
 8006084:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8006086:	f7fa f9ed 	bl	8000464 <__aeabi_dcmplt>
 800608a:	2800      	cmp	r0, #0
 800608c:	d003      	beq.n	8006096 <_printf_float+0x8e>
 800608e:	0023      	movs	r3, r4
 8006090:	222d      	movs	r2, #45	; 0x2d
 8006092:	3343      	adds	r3, #67	; 0x43
 8006094:	701a      	strb	r2, [r3, #0]
 8006096:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006098:	4d99      	ldr	r5, [pc, #612]	; (8006300 <_printf_float+0x2f8>)
 800609a:	2b47      	cmp	r3, #71	; 0x47
 800609c:	d900      	bls.n	80060a0 <_printf_float+0x98>
 800609e:	4d99      	ldr	r5, [pc, #612]	; (8006304 <_printf_float+0x2fc>)
 80060a0:	2303      	movs	r3, #3
 80060a2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80060a4:	6123      	str	r3, [r4, #16]
 80060a6:	3301      	adds	r3, #1
 80060a8:	439a      	bics	r2, r3
 80060aa:	2300      	movs	r3, #0
 80060ac:	6022      	str	r2, [r4, #0]
 80060ae:	930b      	str	r3, [sp, #44]	; 0x2c
 80060b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060b2:	0021      	movs	r1, r4
 80060b4:	0038      	movs	r0, r7
 80060b6:	9600      	str	r6, [sp, #0]
 80060b8:	aa13      	add	r2, sp, #76	; 0x4c
 80060ba:	f000 f9e7 	bl	800648c <_printf_common>
 80060be:	1c43      	adds	r3, r0, #1
 80060c0:	d000      	beq.n	80060c4 <_printf_float+0xbc>
 80060c2:	e0a2      	b.n	800620a <_printf_float+0x202>
 80060c4:	2001      	movs	r0, #1
 80060c6:	4240      	negs	r0, r0
 80060c8:	b015      	add	sp, #84	; 0x54
 80060ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80060cc:	3307      	adds	r3, #7
 80060ce:	e7b6      	b.n	800603e <_printf_float+0x36>
 80060d0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80060d2:	002b      	movs	r3, r5
 80060d4:	0010      	movs	r0, r2
 80060d6:	0029      	movs	r1, r5
 80060d8:	f7fc fc6a 	bl	80029b0 <__aeabi_dcmpun>
 80060dc:	2800      	cmp	r0, #0
 80060de:	d00b      	beq.n	80060f8 <_printf_float+0xf0>
 80060e0:	2d00      	cmp	r5, #0
 80060e2:	da03      	bge.n	80060ec <_printf_float+0xe4>
 80060e4:	0023      	movs	r3, r4
 80060e6:	222d      	movs	r2, #45	; 0x2d
 80060e8:	3343      	adds	r3, #67	; 0x43
 80060ea:	701a      	strb	r2, [r3, #0]
 80060ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80060ee:	4d86      	ldr	r5, [pc, #536]	; (8006308 <_printf_float+0x300>)
 80060f0:	2b47      	cmp	r3, #71	; 0x47
 80060f2:	d9d5      	bls.n	80060a0 <_printf_float+0x98>
 80060f4:	4d85      	ldr	r5, [pc, #532]	; (800630c <_printf_float+0x304>)
 80060f6:	e7d3      	b.n	80060a0 <_printf_float+0x98>
 80060f8:	2220      	movs	r2, #32
 80060fa:	990a      	ldr	r1, [sp, #40]	; 0x28
 80060fc:	6863      	ldr	r3, [r4, #4]
 80060fe:	4391      	bics	r1, r2
 8006100:	910f      	str	r1, [sp, #60]	; 0x3c
 8006102:	1c5a      	adds	r2, r3, #1
 8006104:	d149      	bne.n	800619a <_printf_float+0x192>
 8006106:	3307      	adds	r3, #7
 8006108:	6063      	str	r3, [r4, #4]
 800610a:	2380      	movs	r3, #128	; 0x80
 800610c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800610e:	00db      	lsls	r3, r3, #3
 8006110:	4313      	orrs	r3, r2
 8006112:	2200      	movs	r2, #0
 8006114:	9206      	str	r2, [sp, #24]
 8006116:	aa12      	add	r2, sp, #72	; 0x48
 8006118:	9205      	str	r2, [sp, #20]
 800611a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800611c:	a908      	add	r1, sp, #32
 800611e:	9204      	str	r2, [sp, #16]
 8006120:	aa11      	add	r2, sp, #68	; 0x44
 8006122:	9203      	str	r2, [sp, #12]
 8006124:	2223      	movs	r2, #35	; 0x23
 8006126:	6023      	str	r3, [r4, #0]
 8006128:	9301      	str	r3, [sp, #4]
 800612a:	6863      	ldr	r3, [r4, #4]
 800612c:	1852      	adds	r2, r2, r1
 800612e:	9202      	str	r2, [sp, #8]
 8006130:	9300      	str	r3, [sp, #0]
 8006132:	0038      	movs	r0, r7
 8006134:	002b      	movs	r3, r5
 8006136:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006138:	f7ff febc 	bl	8005eb4 <__cvt>
 800613c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800613e:	0005      	movs	r5, r0
 8006140:	9911      	ldr	r1, [sp, #68]	; 0x44
 8006142:	2b47      	cmp	r3, #71	; 0x47
 8006144:	d108      	bne.n	8006158 <_printf_float+0x150>
 8006146:	1ccb      	adds	r3, r1, #3
 8006148:	db02      	blt.n	8006150 <_printf_float+0x148>
 800614a:	6863      	ldr	r3, [r4, #4]
 800614c:	4299      	cmp	r1, r3
 800614e:	dd48      	ble.n	80061e2 <_printf_float+0x1da>
 8006150:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006152:	3b02      	subs	r3, #2
 8006154:	b2db      	uxtb	r3, r3
 8006156:	930a      	str	r3, [sp, #40]	; 0x28
 8006158:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800615a:	2b65      	cmp	r3, #101	; 0x65
 800615c:	d824      	bhi.n	80061a8 <_printf_float+0x1a0>
 800615e:	0020      	movs	r0, r4
 8006160:	001a      	movs	r2, r3
 8006162:	3901      	subs	r1, #1
 8006164:	3050      	adds	r0, #80	; 0x50
 8006166:	9111      	str	r1, [sp, #68]	; 0x44
 8006168:	f7ff ff07 	bl	8005f7a <__exponent>
 800616c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800616e:	900b      	str	r0, [sp, #44]	; 0x2c
 8006170:	1813      	adds	r3, r2, r0
 8006172:	6123      	str	r3, [r4, #16]
 8006174:	2a01      	cmp	r2, #1
 8006176:	dc02      	bgt.n	800617e <_printf_float+0x176>
 8006178:	6822      	ldr	r2, [r4, #0]
 800617a:	07d2      	lsls	r2, r2, #31
 800617c:	d501      	bpl.n	8006182 <_printf_float+0x17a>
 800617e:	3301      	adds	r3, #1
 8006180:	6123      	str	r3, [r4, #16]
 8006182:	2323      	movs	r3, #35	; 0x23
 8006184:	aa08      	add	r2, sp, #32
 8006186:	189b      	adds	r3, r3, r2
 8006188:	781b      	ldrb	r3, [r3, #0]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d100      	bne.n	8006190 <_printf_float+0x188>
 800618e:	e78f      	b.n	80060b0 <_printf_float+0xa8>
 8006190:	0023      	movs	r3, r4
 8006192:	222d      	movs	r2, #45	; 0x2d
 8006194:	3343      	adds	r3, #67	; 0x43
 8006196:	701a      	strb	r2, [r3, #0]
 8006198:	e78a      	b.n	80060b0 <_printf_float+0xa8>
 800619a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800619c:	2a47      	cmp	r2, #71	; 0x47
 800619e:	d1b4      	bne.n	800610a <_printf_float+0x102>
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d1b2      	bne.n	800610a <_printf_float+0x102>
 80061a4:	3301      	adds	r3, #1
 80061a6:	e7af      	b.n	8006108 <_printf_float+0x100>
 80061a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80061aa:	2b66      	cmp	r3, #102	; 0x66
 80061ac:	d11b      	bne.n	80061e6 <_printf_float+0x1de>
 80061ae:	6863      	ldr	r3, [r4, #4]
 80061b0:	2900      	cmp	r1, #0
 80061b2:	dd0d      	ble.n	80061d0 <_printf_float+0x1c8>
 80061b4:	6121      	str	r1, [r4, #16]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d102      	bne.n	80061c0 <_printf_float+0x1b8>
 80061ba:	6822      	ldr	r2, [r4, #0]
 80061bc:	07d2      	lsls	r2, r2, #31
 80061be:	d502      	bpl.n	80061c6 <_printf_float+0x1be>
 80061c0:	3301      	adds	r3, #1
 80061c2:	1859      	adds	r1, r3, r1
 80061c4:	6121      	str	r1, [r4, #16]
 80061c6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80061c8:	65a3      	str	r3, [r4, #88]	; 0x58
 80061ca:	2300      	movs	r3, #0
 80061cc:	930b      	str	r3, [sp, #44]	; 0x2c
 80061ce:	e7d8      	b.n	8006182 <_printf_float+0x17a>
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d103      	bne.n	80061dc <_printf_float+0x1d4>
 80061d4:	2201      	movs	r2, #1
 80061d6:	6821      	ldr	r1, [r4, #0]
 80061d8:	4211      	tst	r1, r2
 80061da:	d000      	beq.n	80061de <_printf_float+0x1d6>
 80061dc:	1c9a      	adds	r2, r3, #2
 80061de:	6122      	str	r2, [r4, #16]
 80061e0:	e7f1      	b.n	80061c6 <_printf_float+0x1be>
 80061e2:	2367      	movs	r3, #103	; 0x67
 80061e4:	930a      	str	r3, [sp, #40]	; 0x28
 80061e6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80061e8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80061ea:	4293      	cmp	r3, r2
 80061ec:	db06      	blt.n	80061fc <_printf_float+0x1f4>
 80061ee:	6822      	ldr	r2, [r4, #0]
 80061f0:	6123      	str	r3, [r4, #16]
 80061f2:	07d2      	lsls	r2, r2, #31
 80061f4:	d5e7      	bpl.n	80061c6 <_printf_float+0x1be>
 80061f6:	3301      	adds	r3, #1
 80061f8:	6123      	str	r3, [r4, #16]
 80061fa:	e7e4      	b.n	80061c6 <_printf_float+0x1be>
 80061fc:	2101      	movs	r1, #1
 80061fe:	2b00      	cmp	r3, #0
 8006200:	dc01      	bgt.n	8006206 <_printf_float+0x1fe>
 8006202:	1849      	adds	r1, r1, r1
 8006204:	1ac9      	subs	r1, r1, r3
 8006206:	1852      	adds	r2, r2, r1
 8006208:	e7e9      	b.n	80061de <_printf_float+0x1d6>
 800620a:	6822      	ldr	r2, [r4, #0]
 800620c:	0553      	lsls	r3, r2, #21
 800620e:	d407      	bmi.n	8006220 <_printf_float+0x218>
 8006210:	6923      	ldr	r3, [r4, #16]
 8006212:	002a      	movs	r2, r5
 8006214:	0038      	movs	r0, r7
 8006216:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006218:	47b0      	blx	r6
 800621a:	1c43      	adds	r3, r0, #1
 800621c:	d128      	bne.n	8006270 <_printf_float+0x268>
 800621e:	e751      	b.n	80060c4 <_printf_float+0xbc>
 8006220:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006222:	2b65      	cmp	r3, #101	; 0x65
 8006224:	d800      	bhi.n	8006228 <_printf_float+0x220>
 8006226:	e0e1      	b.n	80063ec <_printf_float+0x3e4>
 8006228:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800622a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800622c:	2200      	movs	r2, #0
 800622e:	2300      	movs	r3, #0
 8006230:	f7fa f912 	bl	8000458 <__aeabi_dcmpeq>
 8006234:	2800      	cmp	r0, #0
 8006236:	d031      	beq.n	800629c <_printf_float+0x294>
 8006238:	2301      	movs	r3, #1
 800623a:	0038      	movs	r0, r7
 800623c:	4a34      	ldr	r2, [pc, #208]	; (8006310 <_printf_float+0x308>)
 800623e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006240:	47b0      	blx	r6
 8006242:	1c43      	adds	r3, r0, #1
 8006244:	d100      	bne.n	8006248 <_printf_float+0x240>
 8006246:	e73d      	b.n	80060c4 <_printf_float+0xbc>
 8006248:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800624a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800624c:	4293      	cmp	r3, r2
 800624e:	db02      	blt.n	8006256 <_printf_float+0x24e>
 8006250:	6823      	ldr	r3, [r4, #0]
 8006252:	07db      	lsls	r3, r3, #31
 8006254:	d50c      	bpl.n	8006270 <_printf_float+0x268>
 8006256:	0038      	movs	r0, r7
 8006258:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800625a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800625c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800625e:	47b0      	blx	r6
 8006260:	2500      	movs	r5, #0
 8006262:	1c43      	adds	r3, r0, #1
 8006264:	d100      	bne.n	8006268 <_printf_float+0x260>
 8006266:	e72d      	b.n	80060c4 <_printf_float+0xbc>
 8006268:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800626a:	3b01      	subs	r3, #1
 800626c:	42ab      	cmp	r3, r5
 800626e:	dc0a      	bgt.n	8006286 <_printf_float+0x27e>
 8006270:	6823      	ldr	r3, [r4, #0]
 8006272:	079b      	lsls	r3, r3, #30
 8006274:	d500      	bpl.n	8006278 <_printf_float+0x270>
 8006276:	e106      	b.n	8006486 <_printf_float+0x47e>
 8006278:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800627a:	68e0      	ldr	r0, [r4, #12]
 800627c:	4298      	cmp	r0, r3
 800627e:	db00      	blt.n	8006282 <_printf_float+0x27a>
 8006280:	e722      	b.n	80060c8 <_printf_float+0xc0>
 8006282:	0018      	movs	r0, r3
 8006284:	e720      	b.n	80060c8 <_printf_float+0xc0>
 8006286:	0022      	movs	r2, r4
 8006288:	2301      	movs	r3, #1
 800628a:	0038      	movs	r0, r7
 800628c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800628e:	321a      	adds	r2, #26
 8006290:	47b0      	blx	r6
 8006292:	1c43      	adds	r3, r0, #1
 8006294:	d100      	bne.n	8006298 <_printf_float+0x290>
 8006296:	e715      	b.n	80060c4 <_printf_float+0xbc>
 8006298:	3501      	adds	r5, #1
 800629a:	e7e5      	b.n	8006268 <_printf_float+0x260>
 800629c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800629e:	2b00      	cmp	r3, #0
 80062a0:	dc38      	bgt.n	8006314 <_printf_float+0x30c>
 80062a2:	2301      	movs	r3, #1
 80062a4:	0038      	movs	r0, r7
 80062a6:	4a1a      	ldr	r2, [pc, #104]	; (8006310 <_printf_float+0x308>)
 80062a8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80062aa:	47b0      	blx	r6
 80062ac:	1c43      	adds	r3, r0, #1
 80062ae:	d100      	bne.n	80062b2 <_printf_float+0x2aa>
 80062b0:	e708      	b.n	80060c4 <_printf_float+0xbc>
 80062b2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80062b4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80062b6:	4313      	orrs	r3, r2
 80062b8:	d102      	bne.n	80062c0 <_printf_float+0x2b8>
 80062ba:	6823      	ldr	r3, [r4, #0]
 80062bc:	07db      	lsls	r3, r3, #31
 80062be:	d5d7      	bpl.n	8006270 <_printf_float+0x268>
 80062c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80062c2:	0038      	movs	r0, r7
 80062c4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80062c6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80062c8:	47b0      	blx	r6
 80062ca:	1c43      	adds	r3, r0, #1
 80062cc:	d100      	bne.n	80062d0 <_printf_float+0x2c8>
 80062ce:	e6f9      	b.n	80060c4 <_printf_float+0xbc>
 80062d0:	2300      	movs	r3, #0
 80062d2:	930a      	str	r3, [sp, #40]	; 0x28
 80062d4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80062d6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80062d8:	425b      	negs	r3, r3
 80062da:	4293      	cmp	r3, r2
 80062dc:	dc01      	bgt.n	80062e2 <_printf_float+0x2da>
 80062de:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80062e0:	e797      	b.n	8006212 <_printf_float+0x20a>
 80062e2:	0022      	movs	r2, r4
 80062e4:	2301      	movs	r3, #1
 80062e6:	0038      	movs	r0, r7
 80062e8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80062ea:	321a      	adds	r2, #26
 80062ec:	47b0      	blx	r6
 80062ee:	1c43      	adds	r3, r0, #1
 80062f0:	d100      	bne.n	80062f4 <_printf_float+0x2ec>
 80062f2:	e6e7      	b.n	80060c4 <_printf_float+0xbc>
 80062f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80062f6:	3301      	adds	r3, #1
 80062f8:	e7eb      	b.n	80062d2 <_printf_float+0x2ca>
 80062fa:	46c0      	nop			; (mov r8, r8)
 80062fc:	7fefffff 	.word	0x7fefffff
 8006300:	0800b3e4 	.word	0x0800b3e4
 8006304:	0800b3e8 	.word	0x0800b3e8
 8006308:	0800b3ec 	.word	0x0800b3ec
 800630c:	0800b3f0 	.word	0x0800b3f0
 8006310:	0800b7e9 	.word	0x0800b7e9
 8006314:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006316:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006318:	920a      	str	r2, [sp, #40]	; 0x28
 800631a:	429a      	cmp	r2, r3
 800631c:	dd00      	ble.n	8006320 <_printf_float+0x318>
 800631e:	930a      	str	r3, [sp, #40]	; 0x28
 8006320:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006322:	2b00      	cmp	r3, #0
 8006324:	dc3c      	bgt.n	80063a0 <_printf_float+0x398>
 8006326:	2300      	movs	r3, #0
 8006328:	930d      	str	r3, [sp, #52]	; 0x34
 800632a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800632c:	43db      	mvns	r3, r3
 800632e:	17db      	asrs	r3, r3, #31
 8006330:	930f      	str	r3, [sp, #60]	; 0x3c
 8006332:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006334:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006336:	930b      	str	r3, [sp, #44]	; 0x2c
 8006338:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800633a:	4013      	ands	r3, r2
 800633c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800633e:	1ad3      	subs	r3, r2, r3
 8006340:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006342:	4293      	cmp	r3, r2
 8006344:	dc34      	bgt.n	80063b0 <_printf_float+0x3a8>
 8006346:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006348:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800634a:	4293      	cmp	r3, r2
 800634c:	db3d      	blt.n	80063ca <_printf_float+0x3c2>
 800634e:	6823      	ldr	r3, [r4, #0]
 8006350:	07db      	lsls	r3, r3, #31
 8006352:	d43a      	bmi.n	80063ca <_printf_float+0x3c2>
 8006354:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006356:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006358:	9911      	ldr	r1, [sp, #68]	; 0x44
 800635a:	1ad3      	subs	r3, r2, r3
 800635c:	1a52      	subs	r2, r2, r1
 800635e:	920a      	str	r2, [sp, #40]	; 0x28
 8006360:	429a      	cmp	r2, r3
 8006362:	dd00      	ble.n	8006366 <_printf_float+0x35e>
 8006364:	930a      	str	r3, [sp, #40]	; 0x28
 8006366:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006368:	2b00      	cmp	r3, #0
 800636a:	dc36      	bgt.n	80063da <_printf_float+0x3d2>
 800636c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800636e:	2500      	movs	r5, #0
 8006370:	43db      	mvns	r3, r3
 8006372:	17db      	asrs	r3, r3, #31
 8006374:	930b      	str	r3, [sp, #44]	; 0x2c
 8006376:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006378:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800637a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800637c:	1a9b      	subs	r3, r3, r2
 800637e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006380:	400a      	ands	r2, r1
 8006382:	1a9b      	subs	r3, r3, r2
 8006384:	42ab      	cmp	r3, r5
 8006386:	dc00      	bgt.n	800638a <_printf_float+0x382>
 8006388:	e772      	b.n	8006270 <_printf_float+0x268>
 800638a:	0022      	movs	r2, r4
 800638c:	2301      	movs	r3, #1
 800638e:	0038      	movs	r0, r7
 8006390:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006392:	321a      	adds	r2, #26
 8006394:	47b0      	blx	r6
 8006396:	1c43      	adds	r3, r0, #1
 8006398:	d100      	bne.n	800639c <_printf_float+0x394>
 800639a:	e693      	b.n	80060c4 <_printf_float+0xbc>
 800639c:	3501      	adds	r5, #1
 800639e:	e7ea      	b.n	8006376 <_printf_float+0x36e>
 80063a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80063a2:	002a      	movs	r2, r5
 80063a4:	0038      	movs	r0, r7
 80063a6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80063a8:	47b0      	blx	r6
 80063aa:	1c43      	adds	r3, r0, #1
 80063ac:	d1bb      	bne.n	8006326 <_printf_float+0x31e>
 80063ae:	e689      	b.n	80060c4 <_printf_float+0xbc>
 80063b0:	0022      	movs	r2, r4
 80063b2:	2301      	movs	r3, #1
 80063b4:	0038      	movs	r0, r7
 80063b6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80063b8:	321a      	adds	r2, #26
 80063ba:	47b0      	blx	r6
 80063bc:	1c43      	adds	r3, r0, #1
 80063be:	d100      	bne.n	80063c2 <_printf_float+0x3ba>
 80063c0:	e680      	b.n	80060c4 <_printf_float+0xbc>
 80063c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80063c4:	3301      	adds	r3, #1
 80063c6:	930d      	str	r3, [sp, #52]	; 0x34
 80063c8:	e7b3      	b.n	8006332 <_printf_float+0x32a>
 80063ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80063cc:	0038      	movs	r0, r7
 80063ce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80063d0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80063d2:	47b0      	blx	r6
 80063d4:	1c43      	adds	r3, r0, #1
 80063d6:	d1bd      	bne.n	8006354 <_printf_float+0x34c>
 80063d8:	e674      	b.n	80060c4 <_printf_float+0xbc>
 80063da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80063dc:	0038      	movs	r0, r7
 80063de:	18ea      	adds	r2, r5, r3
 80063e0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80063e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80063e4:	47b0      	blx	r6
 80063e6:	1c43      	adds	r3, r0, #1
 80063e8:	d1c0      	bne.n	800636c <_printf_float+0x364>
 80063ea:	e66b      	b.n	80060c4 <_printf_float+0xbc>
 80063ec:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80063ee:	2b01      	cmp	r3, #1
 80063f0:	dc02      	bgt.n	80063f8 <_printf_float+0x3f0>
 80063f2:	2301      	movs	r3, #1
 80063f4:	421a      	tst	r2, r3
 80063f6:	d034      	beq.n	8006462 <_printf_float+0x45a>
 80063f8:	2301      	movs	r3, #1
 80063fa:	002a      	movs	r2, r5
 80063fc:	0038      	movs	r0, r7
 80063fe:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006400:	47b0      	blx	r6
 8006402:	1c43      	adds	r3, r0, #1
 8006404:	d100      	bne.n	8006408 <_printf_float+0x400>
 8006406:	e65d      	b.n	80060c4 <_printf_float+0xbc>
 8006408:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800640a:	0038      	movs	r0, r7
 800640c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800640e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006410:	47b0      	blx	r6
 8006412:	1c43      	adds	r3, r0, #1
 8006414:	d100      	bne.n	8006418 <_printf_float+0x410>
 8006416:	e655      	b.n	80060c4 <_printf_float+0xbc>
 8006418:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800641a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800641c:	2200      	movs	r2, #0
 800641e:	2300      	movs	r3, #0
 8006420:	f7fa f81a 	bl	8000458 <__aeabi_dcmpeq>
 8006424:	2800      	cmp	r0, #0
 8006426:	d11a      	bne.n	800645e <_printf_float+0x456>
 8006428:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800642a:	1c6a      	adds	r2, r5, #1
 800642c:	3b01      	subs	r3, #1
 800642e:	0038      	movs	r0, r7
 8006430:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006432:	47b0      	blx	r6
 8006434:	1c43      	adds	r3, r0, #1
 8006436:	d10e      	bne.n	8006456 <_printf_float+0x44e>
 8006438:	e644      	b.n	80060c4 <_printf_float+0xbc>
 800643a:	0022      	movs	r2, r4
 800643c:	2301      	movs	r3, #1
 800643e:	0038      	movs	r0, r7
 8006440:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006442:	321a      	adds	r2, #26
 8006444:	47b0      	blx	r6
 8006446:	1c43      	adds	r3, r0, #1
 8006448:	d100      	bne.n	800644c <_printf_float+0x444>
 800644a:	e63b      	b.n	80060c4 <_printf_float+0xbc>
 800644c:	3501      	adds	r5, #1
 800644e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006450:	3b01      	subs	r3, #1
 8006452:	42ab      	cmp	r3, r5
 8006454:	dcf1      	bgt.n	800643a <_printf_float+0x432>
 8006456:	0022      	movs	r2, r4
 8006458:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800645a:	3250      	adds	r2, #80	; 0x50
 800645c:	e6da      	b.n	8006214 <_printf_float+0x20c>
 800645e:	2500      	movs	r5, #0
 8006460:	e7f5      	b.n	800644e <_printf_float+0x446>
 8006462:	002a      	movs	r2, r5
 8006464:	e7e3      	b.n	800642e <_printf_float+0x426>
 8006466:	0022      	movs	r2, r4
 8006468:	2301      	movs	r3, #1
 800646a:	0038      	movs	r0, r7
 800646c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800646e:	3219      	adds	r2, #25
 8006470:	47b0      	blx	r6
 8006472:	1c43      	adds	r3, r0, #1
 8006474:	d100      	bne.n	8006478 <_printf_float+0x470>
 8006476:	e625      	b.n	80060c4 <_printf_float+0xbc>
 8006478:	3501      	adds	r5, #1
 800647a:	68e3      	ldr	r3, [r4, #12]
 800647c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800647e:	1a9b      	subs	r3, r3, r2
 8006480:	42ab      	cmp	r3, r5
 8006482:	dcf0      	bgt.n	8006466 <_printf_float+0x45e>
 8006484:	e6f8      	b.n	8006278 <_printf_float+0x270>
 8006486:	2500      	movs	r5, #0
 8006488:	e7f7      	b.n	800647a <_printf_float+0x472>
 800648a:	46c0      	nop			; (mov r8, r8)

0800648c <_printf_common>:
 800648c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800648e:	0015      	movs	r5, r2
 8006490:	9301      	str	r3, [sp, #4]
 8006492:	688a      	ldr	r2, [r1, #8]
 8006494:	690b      	ldr	r3, [r1, #16]
 8006496:	000c      	movs	r4, r1
 8006498:	9000      	str	r0, [sp, #0]
 800649a:	4293      	cmp	r3, r2
 800649c:	da00      	bge.n	80064a0 <_printf_common+0x14>
 800649e:	0013      	movs	r3, r2
 80064a0:	0022      	movs	r2, r4
 80064a2:	602b      	str	r3, [r5, #0]
 80064a4:	3243      	adds	r2, #67	; 0x43
 80064a6:	7812      	ldrb	r2, [r2, #0]
 80064a8:	2a00      	cmp	r2, #0
 80064aa:	d001      	beq.n	80064b0 <_printf_common+0x24>
 80064ac:	3301      	adds	r3, #1
 80064ae:	602b      	str	r3, [r5, #0]
 80064b0:	6823      	ldr	r3, [r4, #0]
 80064b2:	069b      	lsls	r3, r3, #26
 80064b4:	d502      	bpl.n	80064bc <_printf_common+0x30>
 80064b6:	682b      	ldr	r3, [r5, #0]
 80064b8:	3302      	adds	r3, #2
 80064ba:	602b      	str	r3, [r5, #0]
 80064bc:	6822      	ldr	r2, [r4, #0]
 80064be:	2306      	movs	r3, #6
 80064c0:	0017      	movs	r7, r2
 80064c2:	401f      	ands	r7, r3
 80064c4:	421a      	tst	r2, r3
 80064c6:	d027      	beq.n	8006518 <_printf_common+0x8c>
 80064c8:	0023      	movs	r3, r4
 80064ca:	3343      	adds	r3, #67	; 0x43
 80064cc:	781b      	ldrb	r3, [r3, #0]
 80064ce:	1e5a      	subs	r2, r3, #1
 80064d0:	4193      	sbcs	r3, r2
 80064d2:	6822      	ldr	r2, [r4, #0]
 80064d4:	0692      	lsls	r2, r2, #26
 80064d6:	d430      	bmi.n	800653a <_printf_common+0xae>
 80064d8:	0022      	movs	r2, r4
 80064da:	9901      	ldr	r1, [sp, #4]
 80064dc:	9800      	ldr	r0, [sp, #0]
 80064de:	9e08      	ldr	r6, [sp, #32]
 80064e0:	3243      	adds	r2, #67	; 0x43
 80064e2:	47b0      	blx	r6
 80064e4:	1c43      	adds	r3, r0, #1
 80064e6:	d025      	beq.n	8006534 <_printf_common+0xa8>
 80064e8:	2306      	movs	r3, #6
 80064ea:	6820      	ldr	r0, [r4, #0]
 80064ec:	682a      	ldr	r2, [r5, #0]
 80064ee:	68e1      	ldr	r1, [r4, #12]
 80064f0:	2500      	movs	r5, #0
 80064f2:	4003      	ands	r3, r0
 80064f4:	2b04      	cmp	r3, #4
 80064f6:	d103      	bne.n	8006500 <_printf_common+0x74>
 80064f8:	1a8d      	subs	r5, r1, r2
 80064fa:	43eb      	mvns	r3, r5
 80064fc:	17db      	asrs	r3, r3, #31
 80064fe:	401d      	ands	r5, r3
 8006500:	68a3      	ldr	r3, [r4, #8]
 8006502:	6922      	ldr	r2, [r4, #16]
 8006504:	4293      	cmp	r3, r2
 8006506:	dd01      	ble.n	800650c <_printf_common+0x80>
 8006508:	1a9b      	subs	r3, r3, r2
 800650a:	18ed      	adds	r5, r5, r3
 800650c:	2700      	movs	r7, #0
 800650e:	42bd      	cmp	r5, r7
 8006510:	d120      	bne.n	8006554 <_printf_common+0xc8>
 8006512:	2000      	movs	r0, #0
 8006514:	e010      	b.n	8006538 <_printf_common+0xac>
 8006516:	3701      	adds	r7, #1
 8006518:	68e3      	ldr	r3, [r4, #12]
 800651a:	682a      	ldr	r2, [r5, #0]
 800651c:	1a9b      	subs	r3, r3, r2
 800651e:	42bb      	cmp	r3, r7
 8006520:	ddd2      	ble.n	80064c8 <_printf_common+0x3c>
 8006522:	0022      	movs	r2, r4
 8006524:	2301      	movs	r3, #1
 8006526:	9901      	ldr	r1, [sp, #4]
 8006528:	9800      	ldr	r0, [sp, #0]
 800652a:	9e08      	ldr	r6, [sp, #32]
 800652c:	3219      	adds	r2, #25
 800652e:	47b0      	blx	r6
 8006530:	1c43      	adds	r3, r0, #1
 8006532:	d1f0      	bne.n	8006516 <_printf_common+0x8a>
 8006534:	2001      	movs	r0, #1
 8006536:	4240      	negs	r0, r0
 8006538:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800653a:	2030      	movs	r0, #48	; 0x30
 800653c:	18e1      	adds	r1, r4, r3
 800653e:	3143      	adds	r1, #67	; 0x43
 8006540:	7008      	strb	r0, [r1, #0]
 8006542:	0021      	movs	r1, r4
 8006544:	1c5a      	adds	r2, r3, #1
 8006546:	3145      	adds	r1, #69	; 0x45
 8006548:	7809      	ldrb	r1, [r1, #0]
 800654a:	18a2      	adds	r2, r4, r2
 800654c:	3243      	adds	r2, #67	; 0x43
 800654e:	3302      	adds	r3, #2
 8006550:	7011      	strb	r1, [r2, #0]
 8006552:	e7c1      	b.n	80064d8 <_printf_common+0x4c>
 8006554:	0022      	movs	r2, r4
 8006556:	2301      	movs	r3, #1
 8006558:	9901      	ldr	r1, [sp, #4]
 800655a:	9800      	ldr	r0, [sp, #0]
 800655c:	9e08      	ldr	r6, [sp, #32]
 800655e:	321a      	adds	r2, #26
 8006560:	47b0      	blx	r6
 8006562:	1c43      	adds	r3, r0, #1
 8006564:	d0e6      	beq.n	8006534 <_printf_common+0xa8>
 8006566:	3701      	adds	r7, #1
 8006568:	e7d1      	b.n	800650e <_printf_common+0x82>
	...

0800656c <_printf_i>:
 800656c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800656e:	b08b      	sub	sp, #44	; 0x2c
 8006570:	9206      	str	r2, [sp, #24]
 8006572:	000a      	movs	r2, r1
 8006574:	3243      	adds	r2, #67	; 0x43
 8006576:	9307      	str	r3, [sp, #28]
 8006578:	9005      	str	r0, [sp, #20]
 800657a:	9204      	str	r2, [sp, #16]
 800657c:	7e0a      	ldrb	r2, [r1, #24]
 800657e:	000c      	movs	r4, r1
 8006580:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006582:	2a78      	cmp	r2, #120	; 0x78
 8006584:	d807      	bhi.n	8006596 <_printf_i+0x2a>
 8006586:	2a62      	cmp	r2, #98	; 0x62
 8006588:	d809      	bhi.n	800659e <_printf_i+0x32>
 800658a:	2a00      	cmp	r2, #0
 800658c:	d100      	bne.n	8006590 <_printf_i+0x24>
 800658e:	e0c1      	b.n	8006714 <_printf_i+0x1a8>
 8006590:	2a58      	cmp	r2, #88	; 0x58
 8006592:	d100      	bne.n	8006596 <_printf_i+0x2a>
 8006594:	e08c      	b.n	80066b0 <_printf_i+0x144>
 8006596:	0026      	movs	r6, r4
 8006598:	3642      	adds	r6, #66	; 0x42
 800659a:	7032      	strb	r2, [r6, #0]
 800659c:	e022      	b.n	80065e4 <_printf_i+0x78>
 800659e:	0010      	movs	r0, r2
 80065a0:	3863      	subs	r0, #99	; 0x63
 80065a2:	2815      	cmp	r0, #21
 80065a4:	d8f7      	bhi.n	8006596 <_printf_i+0x2a>
 80065a6:	f7f9 fdc7 	bl	8000138 <__gnu_thumb1_case_shi>
 80065aa:	0016      	.short	0x0016
 80065ac:	fff6001f 	.word	0xfff6001f
 80065b0:	fff6fff6 	.word	0xfff6fff6
 80065b4:	001ffff6 	.word	0x001ffff6
 80065b8:	fff6fff6 	.word	0xfff6fff6
 80065bc:	fff6fff6 	.word	0xfff6fff6
 80065c0:	003600a8 	.word	0x003600a8
 80065c4:	fff6009a 	.word	0xfff6009a
 80065c8:	00b9fff6 	.word	0x00b9fff6
 80065cc:	0036fff6 	.word	0x0036fff6
 80065d0:	fff6fff6 	.word	0xfff6fff6
 80065d4:	009e      	.short	0x009e
 80065d6:	0026      	movs	r6, r4
 80065d8:	681a      	ldr	r2, [r3, #0]
 80065da:	3642      	adds	r6, #66	; 0x42
 80065dc:	1d11      	adds	r1, r2, #4
 80065de:	6019      	str	r1, [r3, #0]
 80065e0:	6813      	ldr	r3, [r2, #0]
 80065e2:	7033      	strb	r3, [r6, #0]
 80065e4:	2301      	movs	r3, #1
 80065e6:	e0a7      	b.n	8006738 <_printf_i+0x1cc>
 80065e8:	6808      	ldr	r0, [r1, #0]
 80065ea:	6819      	ldr	r1, [r3, #0]
 80065ec:	1d0a      	adds	r2, r1, #4
 80065ee:	0605      	lsls	r5, r0, #24
 80065f0:	d50b      	bpl.n	800660a <_printf_i+0x9e>
 80065f2:	680d      	ldr	r5, [r1, #0]
 80065f4:	601a      	str	r2, [r3, #0]
 80065f6:	2d00      	cmp	r5, #0
 80065f8:	da03      	bge.n	8006602 <_printf_i+0x96>
 80065fa:	232d      	movs	r3, #45	; 0x2d
 80065fc:	9a04      	ldr	r2, [sp, #16]
 80065fe:	426d      	negs	r5, r5
 8006600:	7013      	strb	r3, [r2, #0]
 8006602:	4b61      	ldr	r3, [pc, #388]	; (8006788 <_printf_i+0x21c>)
 8006604:	270a      	movs	r7, #10
 8006606:	9303      	str	r3, [sp, #12]
 8006608:	e01b      	b.n	8006642 <_printf_i+0xd6>
 800660a:	680d      	ldr	r5, [r1, #0]
 800660c:	601a      	str	r2, [r3, #0]
 800660e:	0641      	lsls	r1, r0, #25
 8006610:	d5f1      	bpl.n	80065f6 <_printf_i+0x8a>
 8006612:	b22d      	sxth	r5, r5
 8006614:	e7ef      	b.n	80065f6 <_printf_i+0x8a>
 8006616:	680d      	ldr	r5, [r1, #0]
 8006618:	6819      	ldr	r1, [r3, #0]
 800661a:	1d08      	adds	r0, r1, #4
 800661c:	6018      	str	r0, [r3, #0]
 800661e:	062e      	lsls	r6, r5, #24
 8006620:	d501      	bpl.n	8006626 <_printf_i+0xba>
 8006622:	680d      	ldr	r5, [r1, #0]
 8006624:	e003      	b.n	800662e <_printf_i+0xc2>
 8006626:	066d      	lsls	r5, r5, #25
 8006628:	d5fb      	bpl.n	8006622 <_printf_i+0xb6>
 800662a:	680d      	ldr	r5, [r1, #0]
 800662c:	b2ad      	uxth	r5, r5
 800662e:	4b56      	ldr	r3, [pc, #344]	; (8006788 <_printf_i+0x21c>)
 8006630:	2708      	movs	r7, #8
 8006632:	9303      	str	r3, [sp, #12]
 8006634:	2a6f      	cmp	r2, #111	; 0x6f
 8006636:	d000      	beq.n	800663a <_printf_i+0xce>
 8006638:	3702      	adds	r7, #2
 800663a:	0023      	movs	r3, r4
 800663c:	2200      	movs	r2, #0
 800663e:	3343      	adds	r3, #67	; 0x43
 8006640:	701a      	strb	r2, [r3, #0]
 8006642:	6863      	ldr	r3, [r4, #4]
 8006644:	60a3      	str	r3, [r4, #8]
 8006646:	2b00      	cmp	r3, #0
 8006648:	db03      	blt.n	8006652 <_printf_i+0xe6>
 800664a:	2204      	movs	r2, #4
 800664c:	6821      	ldr	r1, [r4, #0]
 800664e:	4391      	bics	r1, r2
 8006650:	6021      	str	r1, [r4, #0]
 8006652:	2d00      	cmp	r5, #0
 8006654:	d102      	bne.n	800665c <_printf_i+0xf0>
 8006656:	9e04      	ldr	r6, [sp, #16]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d00c      	beq.n	8006676 <_printf_i+0x10a>
 800665c:	9e04      	ldr	r6, [sp, #16]
 800665e:	0028      	movs	r0, r5
 8006660:	0039      	movs	r1, r7
 8006662:	f7f9 fdf9 	bl	8000258 <__aeabi_uidivmod>
 8006666:	9b03      	ldr	r3, [sp, #12]
 8006668:	3e01      	subs	r6, #1
 800666a:	5c5b      	ldrb	r3, [r3, r1]
 800666c:	7033      	strb	r3, [r6, #0]
 800666e:	002b      	movs	r3, r5
 8006670:	0005      	movs	r5, r0
 8006672:	429f      	cmp	r7, r3
 8006674:	d9f3      	bls.n	800665e <_printf_i+0xf2>
 8006676:	2f08      	cmp	r7, #8
 8006678:	d109      	bne.n	800668e <_printf_i+0x122>
 800667a:	6823      	ldr	r3, [r4, #0]
 800667c:	07db      	lsls	r3, r3, #31
 800667e:	d506      	bpl.n	800668e <_printf_i+0x122>
 8006680:	6863      	ldr	r3, [r4, #4]
 8006682:	6922      	ldr	r2, [r4, #16]
 8006684:	4293      	cmp	r3, r2
 8006686:	dc02      	bgt.n	800668e <_printf_i+0x122>
 8006688:	2330      	movs	r3, #48	; 0x30
 800668a:	3e01      	subs	r6, #1
 800668c:	7033      	strb	r3, [r6, #0]
 800668e:	9b04      	ldr	r3, [sp, #16]
 8006690:	1b9b      	subs	r3, r3, r6
 8006692:	6123      	str	r3, [r4, #16]
 8006694:	9b07      	ldr	r3, [sp, #28]
 8006696:	0021      	movs	r1, r4
 8006698:	9300      	str	r3, [sp, #0]
 800669a:	9805      	ldr	r0, [sp, #20]
 800669c:	9b06      	ldr	r3, [sp, #24]
 800669e:	aa09      	add	r2, sp, #36	; 0x24
 80066a0:	f7ff fef4 	bl	800648c <_printf_common>
 80066a4:	1c43      	adds	r3, r0, #1
 80066a6:	d14c      	bne.n	8006742 <_printf_i+0x1d6>
 80066a8:	2001      	movs	r0, #1
 80066aa:	4240      	negs	r0, r0
 80066ac:	b00b      	add	sp, #44	; 0x2c
 80066ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80066b0:	3145      	adds	r1, #69	; 0x45
 80066b2:	700a      	strb	r2, [r1, #0]
 80066b4:	4a34      	ldr	r2, [pc, #208]	; (8006788 <_printf_i+0x21c>)
 80066b6:	9203      	str	r2, [sp, #12]
 80066b8:	681a      	ldr	r2, [r3, #0]
 80066ba:	6821      	ldr	r1, [r4, #0]
 80066bc:	ca20      	ldmia	r2!, {r5}
 80066be:	601a      	str	r2, [r3, #0]
 80066c0:	0608      	lsls	r0, r1, #24
 80066c2:	d516      	bpl.n	80066f2 <_printf_i+0x186>
 80066c4:	07cb      	lsls	r3, r1, #31
 80066c6:	d502      	bpl.n	80066ce <_printf_i+0x162>
 80066c8:	2320      	movs	r3, #32
 80066ca:	4319      	orrs	r1, r3
 80066cc:	6021      	str	r1, [r4, #0]
 80066ce:	2710      	movs	r7, #16
 80066d0:	2d00      	cmp	r5, #0
 80066d2:	d1b2      	bne.n	800663a <_printf_i+0xce>
 80066d4:	2320      	movs	r3, #32
 80066d6:	6822      	ldr	r2, [r4, #0]
 80066d8:	439a      	bics	r2, r3
 80066da:	6022      	str	r2, [r4, #0]
 80066dc:	e7ad      	b.n	800663a <_printf_i+0xce>
 80066de:	2220      	movs	r2, #32
 80066e0:	6809      	ldr	r1, [r1, #0]
 80066e2:	430a      	orrs	r2, r1
 80066e4:	6022      	str	r2, [r4, #0]
 80066e6:	0022      	movs	r2, r4
 80066e8:	2178      	movs	r1, #120	; 0x78
 80066ea:	3245      	adds	r2, #69	; 0x45
 80066ec:	7011      	strb	r1, [r2, #0]
 80066ee:	4a27      	ldr	r2, [pc, #156]	; (800678c <_printf_i+0x220>)
 80066f0:	e7e1      	b.n	80066b6 <_printf_i+0x14a>
 80066f2:	0648      	lsls	r0, r1, #25
 80066f4:	d5e6      	bpl.n	80066c4 <_printf_i+0x158>
 80066f6:	b2ad      	uxth	r5, r5
 80066f8:	e7e4      	b.n	80066c4 <_printf_i+0x158>
 80066fa:	681a      	ldr	r2, [r3, #0]
 80066fc:	680d      	ldr	r5, [r1, #0]
 80066fe:	1d10      	adds	r0, r2, #4
 8006700:	6949      	ldr	r1, [r1, #20]
 8006702:	6018      	str	r0, [r3, #0]
 8006704:	6813      	ldr	r3, [r2, #0]
 8006706:	062e      	lsls	r6, r5, #24
 8006708:	d501      	bpl.n	800670e <_printf_i+0x1a2>
 800670a:	6019      	str	r1, [r3, #0]
 800670c:	e002      	b.n	8006714 <_printf_i+0x1a8>
 800670e:	066d      	lsls	r5, r5, #25
 8006710:	d5fb      	bpl.n	800670a <_printf_i+0x19e>
 8006712:	8019      	strh	r1, [r3, #0]
 8006714:	2300      	movs	r3, #0
 8006716:	9e04      	ldr	r6, [sp, #16]
 8006718:	6123      	str	r3, [r4, #16]
 800671a:	e7bb      	b.n	8006694 <_printf_i+0x128>
 800671c:	681a      	ldr	r2, [r3, #0]
 800671e:	1d11      	adds	r1, r2, #4
 8006720:	6019      	str	r1, [r3, #0]
 8006722:	6816      	ldr	r6, [r2, #0]
 8006724:	2100      	movs	r1, #0
 8006726:	0030      	movs	r0, r6
 8006728:	6862      	ldr	r2, [r4, #4]
 800672a:	f002 fc23 	bl	8008f74 <memchr>
 800672e:	2800      	cmp	r0, #0
 8006730:	d001      	beq.n	8006736 <_printf_i+0x1ca>
 8006732:	1b80      	subs	r0, r0, r6
 8006734:	6060      	str	r0, [r4, #4]
 8006736:	6863      	ldr	r3, [r4, #4]
 8006738:	6123      	str	r3, [r4, #16]
 800673a:	2300      	movs	r3, #0
 800673c:	9a04      	ldr	r2, [sp, #16]
 800673e:	7013      	strb	r3, [r2, #0]
 8006740:	e7a8      	b.n	8006694 <_printf_i+0x128>
 8006742:	6923      	ldr	r3, [r4, #16]
 8006744:	0032      	movs	r2, r6
 8006746:	9906      	ldr	r1, [sp, #24]
 8006748:	9805      	ldr	r0, [sp, #20]
 800674a:	9d07      	ldr	r5, [sp, #28]
 800674c:	47a8      	blx	r5
 800674e:	1c43      	adds	r3, r0, #1
 8006750:	d0aa      	beq.n	80066a8 <_printf_i+0x13c>
 8006752:	6823      	ldr	r3, [r4, #0]
 8006754:	079b      	lsls	r3, r3, #30
 8006756:	d415      	bmi.n	8006784 <_printf_i+0x218>
 8006758:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800675a:	68e0      	ldr	r0, [r4, #12]
 800675c:	4298      	cmp	r0, r3
 800675e:	daa5      	bge.n	80066ac <_printf_i+0x140>
 8006760:	0018      	movs	r0, r3
 8006762:	e7a3      	b.n	80066ac <_printf_i+0x140>
 8006764:	0022      	movs	r2, r4
 8006766:	2301      	movs	r3, #1
 8006768:	9906      	ldr	r1, [sp, #24]
 800676a:	9805      	ldr	r0, [sp, #20]
 800676c:	9e07      	ldr	r6, [sp, #28]
 800676e:	3219      	adds	r2, #25
 8006770:	47b0      	blx	r6
 8006772:	1c43      	adds	r3, r0, #1
 8006774:	d098      	beq.n	80066a8 <_printf_i+0x13c>
 8006776:	3501      	adds	r5, #1
 8006778:	68e3      	ldr	r3, [r4, #12]
 800677a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800677c:	1a9b      	subs	r3, r3, r2
 800677e:	42ab      	cmp	r3, r5
 8006780:	dcf0      	bgt.n	8006764 <_printf_i+0x1f8>
 8006782:	e7e9      	b.n	8006758 <_printf_i+0x1ec>
 8006784:	2500      	movs	r5, #0
 8006786:	e7f7      	b.n	8006778 <_printf_i+0x20c>
 8006788:	0800b3f4 	.word	0x0800b3f4
 800678c:	0800b405 	.word	0x0800b405

08006790 <_scanf_float>:
 8006790:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006792:	b08b      	sub	sp, #44	; 0x2c
 8006794:	0015      	movs	r5, r2
 8006796:	9001      	str	r0, [sp, #4]
 8006798:	22ae      	movs	r2, #174	; 0xae
 800679a:	2000      	movs	r0, #0
 800679c:	9306      	str	r3, [sp, #24]
 800679e:	688b      	ldr	r3, [r1, #8]
 80067a0:	000e      	movs	r6, r1
 80067a2:	1e59      	subs	r1, r3, #1
 80067a4:	0052      	lsls	r2, r2, #1
 80067a6:	9005      	str	r0, [sp, #20]
 80067a8:	4291      	cmp	r1, r2
 80067aa:	d905      	bls.n	80067b8 <_scanf_float+0x28>
 80067ac:	3b5e      	subs	r3, #94	; 0x5e
 80067ae:	3bff      	subs	r3, #255	; 0xff
 80067b0:	9305      	str	r3, [sp, #20]
 80067b2:	235e      	movs	r3, #94	; 0x5e
 80067b4:	33ff      	adds	r3, #255	; 0xff
 80067b6:	60b3      	str	r3, [r6, #8]
 80067b8:	23f0      	movs	r3, #240	; 0xf0
 80067ba:	6832      	ldr	r2, [r6, #0]
 80067bc:	00db      	lsls	r3, r3, #3
 80067be:	4313      	orrs	r3, r2
 80067c0:	6033      	str	r3, [r6, #0]
 80067c2:	0033      	movs	r3, r6
 80067c4:	2400      	movs	r4, #0
 80067c6:	331c      	adds	r3, #28
 80067c8:	001f      	movs	r7, r3
 80067ca:	9303      	str	r3, [sp, #12]
 80067cc:	9402      	str	r4, [sp, #8]
 80067ce:	9408      	str	r4, [sp, #32]
 80067d0:	9407      	str	r4, [sp, #28]
 80067d2:	9400      	str	r4, [sp, #0]
 80067d4:	9404      	str	r4, [sp, #16]
 80067d6:	68b2      	ldr	r2, [r6, #8]
 80067d8:	2a00      	cmp	r2, #0
 80067da:	d00a      	beq.n	80067f2 <_scanf_float+0x62>
 80067dc:	682b      	ldr	r3, [r5, #0]
 80067de:	781b      	ldrb	r3, [r3, #0]
 80067e0:	2b4e      	cmp	r3, #78	; 0x4e
 80067e2:	d844      	bhi.n	800686e <_scanf_float+0xde>
 80067e4:	0018      	movs	r0, r3
 80067e6:	2b40      	cmp	r3, #64	; 0x40
 80067e8:	d82c      	bhi.n	8006844 <_scanf_float+0xb4>
 80067ea:	382b      	subs	r0, #43	; 0x2b
 80067ec:	b2c1      	uxtb	r1, r0
 80067ee:	290e      	cmp	r1, #14
 80067f0:	d92a      	bls.n	8006848 <_scanf_float+0xb8>
 80067f2:	9b00      	ldr	r3, [sp, #0]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d003      	beq.n	8006800 <_scanf_float+0x70>
 80067f8:	6832      	ldr	r2, [r6, #0]
 80067fa:	4ba4      	ldr	r3, [pc, #656]	; (8006a8c <_scanf_float+0x2fc>)
 80067fc:	4013      	ands	r3, r2
 80067fe:	6033      	str	r3, [r6, #0]
 8006800:	9b02      	ldr	r3, [sp, #8]
 8006802:	3b01      	subs	r3, #1
 8006804:	2b01      	cmp	r3, #1
 8006806:	d900      	bls.n	800680a <_scanf_float+0x7a>
 8006808:	e0f9      	b.n	80069fe <_scanf_float+0x26e>
 800680a:	24be      	movs	r4, #190	; 0xbe
 800680c:	0064      	lsls	r4, r4, #1
 800680e:	9b03      	ldr	r3, [sp, #12]
 8006810:	429f      	cmp	r7, r3
 8006812:	d900      	bls.n	8006816 <_scanf_float+0x86>
 8006814:	e0e9      	b.n	80069ea <_scanf_float+0x25a>
 8006816:	2301      	movs	r3, #1
 8006818:	9302      	str	r3, [sp, #8]
 800681a:	e185      	b.n	8006b28 <_scanf_float+0x398>
 800681c:	0018      	movs	r0, r3
 800681e:	3861      	subs	r0, #97	; 0x61
 8006820:	280d      	cmp	r0, #13
 8006822:	d8e6      	bhi.n	80067f2 <_scanf_float+0x62>
 8006824:	f7f9 fc88 	bl	8000138 <__gnu_thumb1_case_shi>
 8006828:	ffe50083 	.word	0xffe50083
 800682c:	ffe5ffe5 	.word	0xffe5ffe5
 8006830:	00a200b6 	.word	0x00a200b6
 8006834:	ffe5ffe5 	.word	0xffe5ffe5
 8006838:	ffe50089 	.word	0xffe50089
 800683c:	ffe5ffe5 	.word	0xffe5ffe5
 8006840:	0065ffe5 	.word	0x0065ffe5
 8006844:	3841      	subs	r0, #65	; 0x41
 8006846:	e7eb      	b.n	8006820 <_scanf_float+0x90>
 8006848:	280e      	cmp	r0, #14
 800684a:	d8d2      	bhi.n	80067f2 <_scanf_float+0x62>
 800684c:	f7f9 fc74 	bl	8000138 <__gnu_thumb1_case_shi>
 8006850:	ffd1004b 	.word	0xffd1004b
 8006854:	0098004b 	.word	0x0098004b
 8006858:	0020ffd1 	.word	0x0020ffd1
 800685c:	00400040 	.word	0x00400040
 8006860:	00400040 	.word	0x00400040
 8006864:	00400040 	.word	0x00400040
 8006868:	00400040 	.word	0x00400040
 800686c:	0040      	.short	0x0040
 800686e:	2b6e      	cmp	r3, #110	; 0x6e
 8006870:	d809      	bhi.n	8006886 <_scanf_float+0xf6>
 8006872:	2b60      	cmp	r3, #96	; 0x60
 8006874:	d8d2      	bhi.n	800681c <_scanf_float+0x8c>
 8006876:	2b54      	cmp	r3, #84	; 0x54
 8006878:	d07d      	beq.n	8006976 <_scanf_float+0x1e6>
 800687a:	2b59      	cmp	r3, #89	; 0x59
 800687c:	d1b9      	bne.n	80067f2 <_scanf_float+0x62>
 800687e:	2c07      	cmp	r4, #7
 8006880:	d1b7      	bne.n	80067f2 <_scanf_float+0x62>
 8006882:	2408      	movs	r4, #8
 8006884:	e02c      	b.n	80068e0 <_scanf_float+0x150>
 8006886:	2b74      	cmp	r3, #116	; 0x74
 8006888:	d075      	beq.n	8006976 <_scanf_float+0x1e6>
 800688a:	2b79      	cmp	r3, #121	; 0x79
 800688c:	d0f7      	beq.n	800687e <_scanf_float+0xee>
 800688e:	e7b0      	b.n	80067f2 <_scanf_float+0x62>
 8006890:	6831      	ldr	r1, [r6, #0]
 8006892:	05c8      	lsls	r0, r1, #23
 8006894:	d51c      	bpl.n	80068d0 <_scanf_float+0x140>
 8006896:	2380      	movs	r3, #128	; 0x80
 8006898:	4399      	bics	r1, r3
 800689a:	9b00      	ldr	r3, [sp, #0]
 800689c:	6031      	str	r1, [r6, #0]
 800689e:	3301      	adds	r3, #1
 80068a0:	9300      	str	r3, [sp, #0]
 80068a2:	9b05      	ldr	r3, [sp, #20]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d003      	beq.n	80068b0 <_scanf_float+0x120>
 80068a8:	3b01      	subs	r3, #1
 80068aa:	3201      	adds	r2, #1
 80068ac:	9305      	str	r3, [sp, #20]
 80068ae:	60b2      	str	r2, [r6, #8]
 80068b0:	68b3      	ldr	r3, [r6, #8]
 80068b2:	3b01      	subs	r3, #1
 80068b4:	60b3      	str	r3, [r6, #8]
 80068b6:	6933      	ldr	r3, [r6, #16]
 80068b8:	3301      	adds	r3, #1
 80068ba:	6133      	str	r3, [r6, #16]
 80068bc:	686b      	ldr	r3, [r5, #4]
 80068be:	3b01      	subs	r3, #1
 80068c0:	606b      	str	r3, [r5, #4]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	dc00      	bgt.n	80068c8 <_scanf_float+0x138>
 80068c6:	e086      	b.n	80069d6 <_scanf_float+0x246>
 80068c8:	682b      	ldr	r3, [r5, #0]
 80068ca:	3301      	adds	r3, #1
 80068cc:	602b      	str	r3, [r5, #0]
 80068ce:	e782      	b.n	80067d6 <_scanf_float+0x46>
 80068d0:	9a02      	ldr	r2, [sp, #8]
 80068d2:	1912      	adds	r2, r2, r4
 80068d4:	2a00      	cmp	r2, #0
 80068d6:	d18c      	bne.n	80067f2 <_scanf_float+0x62>
 80068d8:	4a6d      	ldr	r2, [pc, #436]	; (8006a90 <_scanf_float+0x300>)
 80068da:	6831      	ldr	r1, [r6, #0]
 80068dc:	400a      	ands	r2, r1
 80068de:	6032      	str	r2, [r6, #0]
 80068e0:	703b      	strb	r3, [r7, #0]
 80068e2:	3701      	adds	r7, #1
 80068e4:	e7e4      	b.n	80068b0 <_scanf_float+0x120>
 80068e6:	2180      	movs	r1, #128	; 0x80
 80068e8:	6832      	ldr	r2, [r6, #0]
 80068ea:	420a      	tst	r2, r1
 80068ec:	d081      	beq.n	80067f2 <_scanf_float+0x62>
 80068ee:	438a      	bics	r2, r1
 80068f0:	e7f5      	b.n	80068de <_scanf_float+0x14e>
 80068f2:	9a02      	ldr	r2, [sp, #8]
 80068f4:	2a00      	cmp	r2, #0
 80068f6:	d10f      	bne.n	8006918 <_scanf_float+0x188>
 80068f8:	9a00      	ldr	r2, [sp, #0]
 80068fa:	2a00      	cmp	r2, #0
 80068fc:	d10f      	bne.n	800691e <_scanf_float+0x18e>
 80068fe:	6832      	ldr	r2, [r6, #0]
 8006900:	21e0      	movs	r1, #224	; 0xe0
 8006902:	0010      	movs	r0, r2
 8006904:	00c9      	lsls	r1, r1, #3
 8006906:	4008      	ands	r0, r1
 8006908:	4288      	cmp	r0, r1
 800690a:	d108      	bne.n	800691e <_scanf_float+0x18e>
 800690c:	4961      	ldr	r1, [pc, #388]	; (8006a94 <_scanf_float+0x304>)
 800690e:	400a      	ands	r2, r1
 8006910:	6032      	str	r2, [r6, #0]
 8006912:	2201      	movs	r2, #1
 8006914:	9202      	str	r2, [sp, #8]
 8006916:	e7e3      	b.n	80068e0 <_scanf_float+0x150>
 8006918:	9a02      	ldr	r2, [sp, #8]
 800691a:	2a02      	cmp	r2, #2
 800691c:	d059      	beq.n	80069d2 <_scanf_float+0x242>
 800691e:	2c01      	cmp	r4, #1
 8006920:	d002      	beq.n	8006928 <_scanf_float+0x198>
 8006922:	2c04      	cmp	r4, #4
 8006924:	d000      	beq.n	8006928 <_scanf_float+0x198>
 8006926:	e764      	b.n	80067f2 <_scanf_float+0x62>
 8006928:	3401      	adds	r4, #1
 800692a:	b2e4      	uxtb	r4, r4
 800692c:	e7d8      	b.n	80068e0 <_scanf_float+0x150>
 800692e:	9a02      	ldr	r2, [sp, #8]
 8006930:	2a01      	cmp	r2, #1
 8006932:	d000      	beq.n	8006936 <_scanf_float+0x1a6>
 8006934:	e75d      	b.n	80067f2 <_scanf_float+0x62>
 8006936:	2202      	movs	r2, #2
 8006938:	e7ec      	b.n	8006914 <_scanf_float+0x184>
 800693a:	2c00      	cmp	r4, #0
 800693c:	d110      	bne.n	8006960 <_scanf_float+0x1d0>
 800693e:	9a00      	ldr	r2, [sp, #0]
 8006940:	2a00      	cmp	r2, #0
 8006942:	d000      	beq.n	8006946 <_scanf_float+0x1b6>
 8006944:	e758      	b.n	80067f8 <_scanf_float+0x68>
 8006946:	6832      	ldr	r2, [r6, #0]
 8006948:	21e0      	movs	r1, #224	; 0xe0
 800694a:	0010      	movs	r0, r2
 800694c:	00c9      	lsls	r1, r1, #3
 800694e:	4008      	ands	r0, r1
 8006950:	4288      	cmp	r0, r1
 8006952:	d000      	beq.n	8006956 <_scanf_float+0x1c6>
 8006954:	e754      	b.n	8006800 <_scanf_float+0x70>
 8006956:	494f      	ldr	r1, [pc, #316]	; (8006a94 <_scanf_float+0x304>)
 8006958:	3401      	adds	r4, #1
 800695a:	400a      	ands	r2, r1
 800695c:	6032      	str	r2, [r6, #0]
 800695e:	e7bf      	b.n	80068e0 <_scanf_float+0x150>
 8006960:	21fd      	movs	r1, #253	; 0xfd
 8006962:	1ee2      	subs	r2, r4, #3
 8006964:	420a      	tst	r2, r1
 8006966:	d000      	beq.n	800696a <_scanf_float+0x1da>
 8006968:	e743      	b.n	80067f2 <_scanf_float+0x62>
 800696a:	e7dd      	b.n	8006928 <_scanf_float+0x198>
 800696c:	2c02      	cmp	r4, #2
 800696e:	d000      	beq.n	8006972 <_scanf_float+0x1e2>
 8006970:	e73f      	b.n	80067f2 <_scanf_float+0x62>
 8006972:	2403      	movs	r4, #3
 8006974:	e7b4      	b.n	80068e0 <_scanf_float+0x150>
 8006976:	2c06      	cmp	r4, #6
 8006978:	d000      	beq.n	800697c <_scanf_float+0x1ec>
 800697a:	e73a      	b.n	80067f2 <_scanf_float+0x62>
 800697c:	2407      	movs	r4, #7
 800697e:	e7af      	b.n	80068e0 <_scanf_float+0x150>
 8006980:	6832      	ldr	r2, [r6, #0]
 8006982:	0591      	lsls	r1, r2, #22
 8006984:	d400      	bmi.n	8006988 <_scanf_float+0x1f8>
 8006986:	e734      	b.n	80067f2 <_scanf_float+0x62>
 8006988:	4943      	ldr	r1, [pc, #268]	; (8006a98 <_scanf_float+0x308>)
 800698a:	400a      	ands	r2, r1
 800698c:	6032      	str	r2, [r6, #0]
 800698e:	9a00      	ldr	r2, [sp, #0]
 8006990:	9204      	str	r2, [sp, #16]
 8006992:	e7a5      	b.n	80068e0 <_scanf_float+0x150>
 8006994:	21a0      	movs	r1, #160	; 0xa0
 8006996:	2080      	movs	r0, #128	; 0x80
 8006998:	6832      	ldr	r2, [r6, #0]
 800699a:	00c9      	lsls	r1, r1, #3
 800699c:	4011      	ands	r1, r2
 800699e:	00c0      	lsls	r0, r0, #3
 80069a0:	4281      	cmp	r1, r0
 80069a2:	d006      	beq.n	80069b2 <_scanf_float+0x222>
 80069a4:	4202      	tst	r2, r0
 80069a6:	d100      	bne.n	80069aa <_scanf_float+0x21a>
 80069a8:	e723      	b.n	80067f2 <_scanf_float+0x62>
 80069aa:	9900      	ldr	r1, [sp, #0]
 80069ac:	2900      	cmp	r1, #0
 80069ae:	d100      	bne.n	80069b2 <_scanf_float+0x222>
 80069b0:	e726      	b.n	8006800 <_scanf_float+0x70>
 80069b2:	0591      	lsls	r1, r2, #22
 80069b4:	d404      	bmi.n	80069c0 <_scanf_float+0x230>
 80069b6:	9900      	ldr	r1, [sp, #0]
 80069b8:	9804      	ldr	r0, [sp, #16]
 80069ba:	9708      	str	r7, [sp, #32]
 80069bc:	1a09      	subs	r1, r1, r0
 80069be:	9107      	str	r1, [sp, #28]
 80069c0:	4934      	ldr	r1, [pc, #208]	; (8006a94 <_scanf_float+0x304>)
 80069c2:	400a      	ands	r2, r1
 80069c4:	21c0      	movs	r1, #192	; 0xc0
 80069c6:	0049      	lsls	r1, r1, #1
 80069c8:	430a      	orrs	r2, r1
 80069ca:	6032      	str	r2, [r6, #0]
 80069cc:	2200      	movs	r2, #0
 80069ce:	9200      	str	r2, [sp, #0]
 80069d0:	e786      	b.n	80068e0 <_scanf_float+0x150>
 80069d2:	2203      	movs	r2, #3
 80069d4:	e79e      	b.n	8006914 <_scanf_float+0x184>
 80069d6:	23c0      	movs	r3, #192	; 0xc0
 80069d8:	005b      	lsls	r3, r3, #1
 80069da:	0029      	movs	r1, r5
 80069dc:	58f3      	ldr	r3, [r6, r3]
 80069de:	9801      	ldr	r0, [sp, #4]
 80069e0:	4798      	blx	r3
 80069e2:	2800      	cmp	r0, #0
 80069e4:	d100      	bne.n	80069e8 <_scanf_float+0x258>
 80069e6:	e6f6      	b.n	80067d6 <_scanf_float+0x46>
 80069e8:	e703      	b.n	80067f2 <_scanf_float+0x62>
 80069ea:	3f01      	subs	r7, #1
 80069ec:	5933      	ldr	r3, [r6, r4]
 80069ee:	002a      	movs	r2, r5
 80069f0:	7839      	ldrb	r1, [r7, #0]
 80069f2:	9801      	ldr	r0, [sp, #4]
 80069f4:	4798      	blx	r3
 80069f6:	6933      	ldr	r3, [r6, #16]
 80069f8:	3b01      	subs	r3, #1
 80069fa:	6133      	str	r3, [r6, #16]
 80069fc:	e707      	b.n	800680e <_scanf_float+0x7e>
 80069fe:	1e63      	subs	r3, r4, #1
 8006a00:	2b06      	cmp	r3, #6
 8006a02:	d80e      	bhi.n	8006a22 <_scanf_float+0x292>
 8006a04:	9702      	str	r7, [sp, #8]
 8006a06:	2c02      	cmp	r4, #2
 8006a08:	d920      	bls.n	8006a4c <_scanf_float+0x2bc>
 8006a0a:	1be3      	subs	r3, r4, r7
 8006a0c:	b2db      	uxtb	r3, r3
 8006a0e:	9305      	str	r3, [sp, #20]
 8006a10:	9b02      	ldr	r3, [sp, #8]
 8006a12:	9a05      	ldr	r2, [sp, #20]
 8006a14:	189b      	adds	r3, r3, r2
 8006a16:	b2db      	uxtb	r3, r3
 8006a18:	2b03      	cmp	r3, #3
 8006a1a:	d827      	bhi.n	8006a6c <_scanf_float+0x2dc>
 8006a1c:	3c03      	subs	r4, #3
 8006a1e:	b2e4      	uxtb	r4, r4
 8006a20:	1b3f      	subs	r7, r7, r4
 8006a22:	6833      	ldr	r3, [r6, #0]
 8006a24:	05da      	lsls	r2, r3, #23
 8006a26:	d554      	bpl.n	8006ad2 <_scanf_float+0x342>
 8006a28:	055b      	lsls	r3, r3, #21
 8006a2a:	d537      	bpl.n	8006a9c <_scanf_float+0x30c>
 8006a2c:	24be      	movs	r4, #190	; 0xbe
 8006a2e:	0064      	lsls	r4, r4, #1
 8006a30:	9b03      	ldr	r3, [sp, #12]
 8006a32:	429f      	cmp	r7, r3
 8006a34:	d800      	bhi.n	8006a38 <_scanf_float+0x2a8>
 8006a36:	e6ee      	b.n	8006816 <_scanf_float+0x86>
 8006a38:	3f01      	subs	r7, #1
 8006a3a:	5933      	ldr	r3, [r6, r4]
 8006a3c:	002a      	movs	r2, r5
 8006a3e:	7839      	ldrb	r1, [r7, #0]
 8006a40:	9801      	ldr	r0, [sp, #4]
 8006a42:	4798      	blx	r3
 8006a44:	6933      	ldr	r3, [r6, #16]
 8006a46:	3b01      	subs	r3, #1
 8006a48:	6133      	str	r3, [r6, #16]
 8006a4a:	e7f1      	b.n	8006a30 <_scanf_float+0x2a0>
 8006a4c:	24be      	movs	r4, #190	; 0xbe
 8006a4e:	0064      	lsls	r4, r4, #1
 8006a50:	9b03      	ldr	r3, [sp, #12]
 8006a52:	429f      	cmp	r7, r3
 8006a54:	d800      	bhi.n	8006a58 <_scanf_float+0x2c8>
 8006a56:	e6de      	b.n	8006816 <_scanf_float+0x86>
 8006a58:	3f01      	subs	r7, #1
 8006a5a:	5933      	ldr	r3, [r6, r4]
 8006a5c:	002a      	movs	r2, r5
 8006a5e:	7839      	ldrb	r1, [r7, #0]
 8006a60:	9801      	ldr	r0, [sp, #4]
 8006a62:	4798      	blx	r3
 8006a64:	6933      	ldr	r3, [r6, #16]
 8006a66:	3b01      	subs	r3, #1
 8006a68:	6133      	str	r3, [r6, #16]
 8006a6a:	e7f1      	b.n	8006a50 <_scanf_float+0x2c0>
 8006a6c:	9b02      	ldr	r3, [sp, #8]
 8006a6e:	002a      	movs	r2, r5
 8006a70:	3b01      	subs	r3, #1
 8006a72:	7819      	ldrb	r1, [r3, #0]
 8006a74:	9302      	str	r3, [sp, #8]
 8006a76:	23be      	movs	r3, #190	; 0xbe
 8006a78:	005b      	lsls	r3, r3, #1
 8006a7a:	58f3      	ldr	r3, [r6, r3]
 8006a7c:	9801      	ldr	r0, [sp, #4]
 8006a7e:	9309      	str	r3, [sp, #36]	; 0x24
 8006a80:	4798      	blx	r3
 8006a82:	6933      	ldr	r3, [r6, #16]
 8006a84:	3b01      	subs	r3, #1
 8006a86:	6133      	str	r3, [r6, #16]
 8006a88:	e7c2      	b.n	8006a10 <_scanf_float+0x280>
 8006a8a:	46c0      	nop			; (mov r8, r8)
 8006a8c:	fffffeff 	.word	0xfffffeff
 8006a90:	fffffe7f 	.word	0xfffffe7f
 8006a94:	fffff87f 	.word	0xfffff87f
 8006a98:	fffffd7f 	.word	0xfffffd7f
 8006a9c:	6933      	ldr	r3, [r6, #16]
 8006a9e:	1e7c      	subs	r4, r7, #1
 8006aa0:	7821      	ldrb	r1, [r4, #0]
 8006aa2:	3b01      	subs	r3, #1
 8006aa4:	6133      	str	r3, [r6, #16]
 8006aa6:	2965      	cmp	r1, #101	; 0x65
 8006aa8:	d00c      	beq.n	8006ac4 <_scanf_float+0x334>
 8006aaa:	2945      	cmp	r1, #69	; 0x45
 8006aac:	d00a      	beq.n	8006ac4 <_scanf_float+0x334>
 8006aae:	23be      	movs	r3, #190	; 0xbe
 8006ab0:	005b      	lsls	r3, r3, #1
 8006ab2:	58f3      	ldr	r3, [r6, r3]
 8006ab4:	002a      	movs	r2, r5
 8006ab6:	9801      	ldr	r0, [sp, #4]
 8006ab8:	4798      	blx	r3
 8006aba:	6933      	ldr	r3, [r6, #16]
 8006abc:	1ebc      	subs	r4, r7, #2
 8006abe:	3b01      	subs	r3, #1
 8006ac0:	7821      	ldrb	r1, [r4, #0]
 8006ac2:	6133      	str	r3, [r6, #16]
 8006ac4:	23be      	movs	r3, #190	; 0xbe
 8006ac6:	005b      	lsls	r3, r3, #1
 8006ac8:	002a      	movs	r2, r5
 8006aca:	58f3      	ldr	r3, [r6, r3]
 8006acc:	9801      	ldr	r0, [sp, #4]
 8006ace:	4798      	blx	r3
 8006ad0:	0027      	movs	r7, r4
 8006ad2:	6832      	ldr	r2, [r6, #0]
 8006ad4:	2310      	movs	r3, #16
 8006ad6:	0011      	movs	r1, r2
 8006ad8:	4019      	ands	r1, r3
 8006ada:	9102      	str	r1, [sp, #8]
 8006adc:	421a      	tst	r2, r3
 8006ade:	d158      	bne.n	8006b92 <_scanf_float+0x402>
 8006ae0:	23c0      	movs	r3, #192	; 0xc0
 8006ae2:	7039      	strb	r1, [r7, #0]
 8006ae4:	6832      	ldr	r2, [r6, #0]
 8006ae6:	00db      	lsls	r3, r3, #3
 8006ae8:	4013      	ands	r3, r2
 8006aea:	2280      	movs	r2, #128	; 0x80
 8006aec:	00d2      	lsls	r2, r2, #3
 8006aee:	4293      	cmp	r3, r2
 8006af0:	d11d      	bne.n	8006b2e <_scanf_float+0x39e>
 8006af2:	9b04      	ldr	r3, [sp, #16]
 8006af4:	9a00      	ldr	r2, [sp, #0]
 8006af6:	9900      	ldr	r1, [sp, #0]
 8006af8:	1a9a      	subs	r2, r3, r2
 8006afa:	428b      	cmp	r3, r1
 8006afc:	d124      	bne.n	8006b48 <_scanf_float+0x3b8>
 8006afe:	2200      	movs	r2, #0
 8006b00:	9903      	ldr	r1, [sp, #12]
 8006b02:	9801      	ldr	r0, [sp, #4]
 8006b04:	f000 ff28 	bl	8007958 <_strtod_r>
 8006b08:	9b06      	ldr	r3, [sp, #24]
 8006b0a:	000d      	movs	r5, r1
 8006b0c:	6831      	ldr	r1, [r6, #0]
 8006b0e:	0004      	movs	r4, r0
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	078a      	lsls	r2, r1, #30
 8006b14:	d525      	bpl.n	8006b62 <_scanf_float+0x3d2>
 8006b16:	1d1a      	adds	r2, r3, #4
 8006b18:	9906      	ldr	r1, [sp, #24]
 8006b1a:	600a      	str	r2, [r1, #0]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	601c      	str	r4, [r3, #0]
 8006b20:	605d      	str	r5, [r3, #4]
 8006b22:	68f3      	ldr	r3, [r6, #12]
 8006b24:	3301      	adds	r3, #1
 8006b26:	60f3      	str	r3, [r6, #12]
 8006b28:	9802      	ldr	r0, [sp, #8]
 8006b2a:	b00b      	add	sp, #44	; 0x2c
 8006b2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b2e:	9b07      	ldr	r3, [sp, #28]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d0e4      	beq.n	8006afe <_scanf_float+0x36e>
 8006b34:	9b08      	ldr	r3, [sp, #32]
 8006b36:	9a02      	ldr	r2, [sp, #8]
 8006b38:	1c59      	adds	r1, r3, #1
 8006b3a:	9801      	ldr	r0, [sp, #4]
 8006b3c:	230a      	movs	r3, #10
 8006b3e:	f000 ffa1 	bl	8007a84 <_strtol_r>
 8006b42:	9b07      	ldr	r3, [sp, #28]
 8006b44:	9f08      	ldr	r7, [sp, #32]
 8006b46:	1ac2      	subs	r2, r0, r3
 8006b48:	0033      	movs	r3, r6
 8006b4a:	3370      	adds	r3, #112	; 0x70
 8006b4c:	33ff      	adds	r3, #255	; 0xff
 8006b4e:	429f      	cmp	r7, r3
 8006b50:	d302      	bcc.n	8006b58 <_scanf_float+0x3c8>
 8006b52:	0037      	movs	r7, r6
 8006b54:	376f      	adds	r7, #111	; 0x6f
 8006b56:	37ff      	adds	r7, #255	; 0xff
 8006b58:	0038      	movs	r0, r7
 8006b5a:	490f      	ldr	r1, [pc, #60]	; (8006b98 <_scanf_float+0x408>)
 8006b5c:	f000 f824 	bl	8006ba8 <siprintf>
 8006b60:	e7cd      	b.n	8006afe <_scanf_float+0x36e>
 8006b62:	1d1a      	adds	r2, r3, #4
 8006b64:	0749      	lsls	r1, r1, #29
 8006b66:	d4d7      	bmi.n	8006b18 <_scanf_float+0x388>
 8006b68:	9906      	ldr	r1, [sp, #24]
 8006b6a:	0020      	movs	r0, r4
 8006b6c:	600a      	str	r2, [r1, #0]
 8006b6e:	681f      	ldr	r7, [r3, #0]
 8006b70:	0022      	movs	r2, r4
 8006b72:	002b      	movs	r3, r5
 8006b74:	0029      	movs	r1, r5
 8006b76:	f7fb ff1b 	bl	80029b0 <__aeabi_dcmpun>
 8006b7a:	2800      	cmp	r0, #0
 8006b7c:	d004      	beq.n	8006b88 <_scanf_float+0x3f8>
 8006b7e:	4807      	ldr	r0, [pc, #28]	; (8006b9c <_scanf_float+0x40c>)
 8006b80:	f000 f80e 	bl	8006ba0 <nanf>
 8006b84:	6038      	str	r0, [r7, #0]
 8006b86:	e7cc      	b.n	8006b22 <_scanf_float+0x392>
 8006b88:	0020      	movs	r0, r4
 8006b8a:	0029      	movs	r1, r5
 8006b8c:	f7fc f802 	bl	8002b94 <__aeabi_d2f>
 8006b90:	e7f8      	b.n	8006b84 <_scanf_float+0x3f4>
 8006b92:	2300      	movs	r3, #0
 8006b94:	e640      	b.n	8006818 <_scanf_float+0x88>
 8006b96:	46c0      	nop			; (mov r8, r8)
 8006b98:	0800b416 	.word	0x0800b416
 8006b9c:	0800b83b 	.word	0x0800b83b

08006ba0 <nanf>:
 8006ba0:	4800      	ldr	r0, [pc, #0]	; (8006ba4 <nanf+0x4>)
 8006ba2:	4770      	bx	lr
 8006ba4:	7fc00000 	.word	0x7fc00000

08006ba8 <siprintf>:
 8006ba8:	b40e      	push	{r1, r2, r3}
 8006baa:	b500      	push	{lr}
 8006bac:	490b      	ldr	r1, [pc, #44]	; (8006bdc <siprintf+0x34>)
 8006bae:	b09c      	sub	sp, #112	; 0x70
 8006bb0:	ab1d      	add	r3, sp, #116	; 0x74
 8006bb2:	9002      	str	r0, [sp, #8]
 8006bb4:	9006      	str	r0, [sp, #24]
 8006bb6:	9107      	str	r1, [sp, #28]
 8006bb8:	9104      	str	r1, [sp, #16]
 8006bba:	4809      	ldr	r0, [pc, #36]	; (8006be0 <siprintf+0x38>)
 8006bbc:	4909      	ldr	r1, [pc, #36]	; (8006be4 <siprintf+0x3c>)
 8006bbe:	cb04      	ldmia	r3!, {r2}
 8006bc0:	9105      	str	r1, [sp, #20]
 8006bc2:	6800      	ldr	r0, [r0, #0]
 8006bc4:	a902      	add	r1, sp, #8
 8006bc6:	9301      	str	r3, [sp, #4]
 8006bc8:	f003 f822 	bl	8009c10 <_svfiprintf_r>
 8006bcc:	2300      	movs	r3, #0
 8006bce:	9a02      	ldr	r2, [sp, #8]
 8006bd0:	7013      	strb	r3, [r2, #0]
 8006bd2:	b01c      	add	sp, #112	; 0x70
 8006bd4:	bc08      	pop	{r3}
 8006bd6:	b003      	add	sp, #12
 8006bd8:	4718      	bx	r3
 8006bda:	46c0      	nop			; (mov r8, r8)
 8006bdc:	7fffffff 	.word	0x7fffffff
 8006be0:	20000040 	.word	0x20000040
 8006be4:	ffff0208 	.word	0xffff0208

08006be8 <siscanf>:
 8006be8:	b40e      	push	{r1, r2, r3}
 8006bea:	b530      	push	{r4, r5, lr}
 8006bec:	2381      	movs	r3, #129	; 0x81
 8006bee:	b09c      	sub	sp, #112	; 0x70
 8006bf0:	466a      	mov	r2, sp
 8006bf2:	ac1f      	add	r4, sp, #124	; 0x7c
 8006bf4:	009b      	lsls	r3, r3, #2
 8006bf6:	cc20      	ldmia	r4!, {r5}
 8006bf8:	8293      	strh	r3, [r2, #20]
 8006bfa:	9002      	str	r0, [sp, #8]
 8006bfc:	9006      	str	r0, [sp, #24]
 8006bfe:	f7f9 fa89 	bl	8000114 <strlen>
 8006c02:	4b0b      	ldr	r3, [pc, #44]	; (8006c30 <siscanf+0x48>)
 8006c04:	466a      	mov	r2, sp
 8006c06:	930b      	str	r3, [sp, #44]	; 0x2c
 8006c08:	2300      	movs	r3, #0
 8006c0a:	9003      	str	r0, [sp, #12]
 8006c0c:	9007      	str	r0, [sp, #28]
 8006c0e:	4809      	ldr	r0, [pc, #36]	; (8006c34 <siscanf+0x4c>)
 8006c10:	930f      	str	r3, [sp, #60]	; 0x3c
 8006c12:	9314      	str	r3, [sp, #80]	; 0x50
 8006c14:	3b01      	subs	r3, #1
 8006c16:	82d3      	strh	r3, [r2, #22]
 8006c18:	a902      	add	r1, sp, #8
 8006c1a:	0023      	movs	r3, r4
 8006c1c:	002a      	movs	r2, r5
 8006c1e:	6800      	ldr	r0, [r0, #0]
 8006c20:	9401      	str	r4, [sp, #4]
 8006c22:	f003 f951 	bl	8009ec8 <__ssvfiscanf_r>
 8006c26:	b01c      	add	sp, #112	; 0x70
 8006c28:	bc30      	pop	{r4, r5}
 8006c2a:	bc08      	pop	{r3}
 8006c2c:	b003      	add	sp, #12
 8006c2e:	4718      	bx	r3
 8006c30:	08006c61 	.word	0x08006c61
 8006c34:	20000040 	.word	0x20000040

08006c38 <__sread>:
 8006c38:	b570      	push	{r4, r5, r6, lr}
 8006c3a:	000c      	movs	r4, r1
 8006c3c:	250e      	movs	r5, #14
 8006c3e:	5f49      	ldrsh	r1, [r1, r5]
 8006c40:	f003 fc22 	bl	800a488 <_read_r>
 8006c44:	2800      	cmp	r0, #0
 8006c46:	db03      	blt.n	8006c50 <__sread+0x18>
 8006c48:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006c4a:	181b      	adds	r3, r3, r0
 8006c4c:	6563      	str	r3, [r4, #84]	; 0x54
 8006c4e:	bd70      	pop	{r4, r5, r6, pc}
 8006c50:	89a3      	ldrh	r3, [r4, #12]
 8006c52:	4a02      	ldr	r2, [pc, #8]	; (8006c5c <__sread+0x24>)
 8006c54:	4013      	ands	r3, r2
 8006c56:	81a3      	strh	r3, [r4, #12]
 8006c58:	e7f9      	b.n	8006c4e <__sread+0x16>
 8006c5a:	46c0      	nop			; (mov r8, r8)
 8006c5c:	ffffefff 	.word	0xffffefff

08006c60 <__seofread>:
 8006c60:	2000      	movs	r0, #0
 8006c62:	4770      	bx	lr

08006c64 <__swrite>:
 8006c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c66:	001f      	movs	r7, r3
 8006c68:	898b      	ldrh	r3, [r1, #12]
 8006c6a:	0005      	movs	r5, r0
 8006c6c:	000c      	movs	r4, r1
 8006c6e:	0016      	movs	r6, r2
 8006c70:	05db      	lsls	r3, r3, #23
 8006c72:	d505      	bpl.n	8006c80 <__swrite+0x1c>
 8006c74:	230e      	movs	r3, #14
 8006c76:	5ec9      	ldrsh	r1, [r1, r3]
 8006c78:	2200      	movs	r2, #0
 8006c7a:	2302      	movs	r3, #2
 8006c7c:	f002 f94a 	bl	8008f14 <_lseek_r>
 8006c80:	89a3      	ldrh	r3, [r4, #12]
 8006c82:	4a05      	ldr	r2, [pc, #20]	; (8006c98 <__swrite+0x34>)
 8006c84:	0028      	movs	r0, r5
 8006c86:	4013      	ands	r3, r2
 8006c88:	81a3      	strh	r3, [r4, #12]
 8006c8a:	0032      	movs	r2, r6
 8006c8c:	230e      	movs	r3, #14
 8006c8e:	5ee1      	ldrsh	r1, [r4, r3]
 8006c90:	003b      	movs	r3, r7
 8006c92:	f000 fefb 	bl	8007a8c <_write_r>
 8006c96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c98:	ffffefff 	.word	0xffffefff

08006c9c <__sseek>:
 8006c9c:	b570      	push	{r4, r5, r6, lr}
 8006c9e:	000c      	movs	r4, r1
 8006ca0:	250e      	movs	r5, #14
 8006ca2:	5f49      	ldrsh	r1, [r1, r5]
 8006ca4:	f002 f936 	bl	8008f14 <_lseek_r>
 8006ca8:	89a3      	ldrh	r3, [r4, #12]
 8006caa:	1c42      	adds	r2, r0, #1
 8006cac:	d103      	bne.n	8006cb6 <__sseek+0x1a>
 8006cae:	4a05      	ldr	r2, [pc, #20]	; (8006cc4 <__sseek+0x28>)
 8006cb0:	4013      	ands	r3, r2
 8006cb2:	81a3      	strh	r3, [r4, #12]
 8006cb4:	bd70      	pop	{r4, r5, r6, pc}
 8006cb6:	2280      	movs	r2, #128	; 0x80
 8006cb8:	0152      	lsls	r2, r2, #5
 8006cba:	4313      	orrs	r3, r2
 8006cbc:	81a3      	strh	r3, [r4, #12]
 8006cbe:	6560      	str	r0, [r4, #84]	; 0x54
 8006cc0:	e7f8      	b.n	8006cb4 <__sseek+0x18>
 8006cc2:	46c0      	nop			; (mov r8, r8)
 8006cc4:	ffffefff 	.word	0xffffefff

08006cc8 <__sclose>:
 8006cc8:	b510      	push	{r4, lr}
 8006cca:	230e      	movs	r3, #14
 8006ccc:	5ec9      	ldrsh	r1, [r1, r3]
 8006cce:	f000 fef1 	bl	8007ab4 <_close_r>
 8006cd2:	bd10      	pop	{r4, pc}

08006cd4 <strstr>:
 8006cd4:	780a      	ldrb	r2, [r1, #0]
 8006cd6:	b530      	push	{r4, r5, lr}
 8006cd8:	2a00      	cmp	r2, #0
 8006cda:	d10c      	bne.n	8006cf6 <strstr+0x22>
 8006cdc:	bd30      	pop	{r4, r5, pc}
 8006cde:	429a      	cmp	r2, r3
 8006ce0:	d108      	bne.n	8006cf4 <strstr+0x20>
 8006ce2:	2301      	movs	r3, #1
 8006ce4:	5ccc      	ldrb	r4, [r1, r3]
 8006ce6:	2c00      	cmp	r4, #0
 8006ce8:	d0f8      	beq.n	8006cdc <strstr+0x8>
 8006cea:	5cc5      	ldrb	r5, [r0, r3]
 8006cec:	42a5      	cmp	r5, r4
 8006cee:	d101      	bne.n	8006cf4 <strstr+0x20>
 8006cf0:	3301      	adds	r3, #1
 8006cf2:	e7f7      	b.n	8006ce4 <strstr+0x10>
 8006cf4:	3001      	adds	r0, #1
 8006cf6:	7803      	ldrb	r3, [r0, #0]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d1f0      	bne.n	8006cde <strstr+0xa>
 8006cfc:	0018      	movs	r0, r3
 8006cfe:	e7ed      	b.n	8006cdc <strstr+0x8>

08006d00 <sulp>:
 8006d00:	b570      	push	{r4, r5, r6, lr}
 8006d02:	0016      	movs	r6, r2
 8006d04:	000d      	movs	r5, r1
 8006d06:	f002 fccd 	bl	80096a4 <__ulp>
 8006d0a:	2e00      	cmp	r6, #0
 8006d0c:	d00d      	beq.n	8006d2a <sulp+0x2a>
 8006d0e:	236b      	movs	r3, #107	; 0x6b
 8006d10:	006a      	lsls	r2, r5, #1
 8006d12:	0d52      	lsrs	r2, r2, #21
 8006d14:	1a9b      	subs	r3, r3, r2
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	dd07      	ble.n	8006d2a <sulp+0x2a>
 8006d1a:	2400      	movs	r4, #0
 8006d1c:	4a03      	ldr	r2, [pc, #12]	; (8006d2c <sulp+0x2c>)
 8006d1e:	051b      	lsls	r3, r3, #20
 8006d20:	189d      	adds	r5, r3, r2
 8006d22:	002b      	movs	r3, r5
 8006d24:	0022      	movs	r2, r4
 8006d26:	f7fb f845 	bl	8001db4 <__aeabi_dmul>
 8006d2a:	bd70      	pop	{r4, r5, r6, pc}
 8006d2c:	3ff00000 	.word	0x3ff00000

08006d30 <_strtod_l>:
 8006d30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006d32:	001d      	movs	r5, r3
 8006d34:	2300      	movs	r3, #0
 8006d36:	b0a5      	sub	sp, #148	; 0x94
 8006d38:	9320      	str	r3, [sp, #128]	; 0x80
 8006d3a:	4bac      	ldr	r3, [pc, #688]	; (8006fec <_strtod_l+0x2bc>)
 8006d3c:	9005      	str	r0, [sp, #20]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	9108      	str	r1, [sp, #32]
 8006d42:	0018      	movs	r0, r3
 8006d44:	9307      	str	r3, [sp, #28]
 8006d46:	921b      	str	r2, [sp, #108]	; 0x6c
 8006d48:	f7f9 f9e4 	bl	8000114 <strlen>
 8006d4c:	2600      	movs	r6, #0
 8006d4e:	0004      	movs	r4, r0
 8006d50:	2700      	movs	r7, #0
 8006d52:	9b08      	ldr	r3, [sp, #32]
 8006d54:	931f      	str	r3, [sp, #124]	; 0x7c
 8006d56:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8006d58:	7813      	ldrb	r3, [r2, #0]
 8006d5a:	2b2b      	cmp	r3, #43	; 0x2b
 8006d5c:	d058      	beq.n	8006e10 <_strtod_l+0xe0>
 8006d5e:	d844      	bhi.n	8006dea <_strtod_l+0xba>
 8006d60:	2b0d      	cmp	r3, #13
 8006d62:	d83d      	bhi.n	8006de0 <_strtod_l+0xb0>
 8006d64:	2b08      	cmp	r3, #8
 8006d66:	d83d      	bhi.n	8006de4 <_strtod_l+0xb4>
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d047      	beq.n	8006dfc <_strtod_l+0xcc>
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	930e      	str	r3, [sp, #56]	; 0x38
 8006d70:	2200      	movs	r2, #0
 8006d72:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006d74:	920a      	str	r2, [sp, #40]	; 0x28
 8006d76:	9306      	str	r3, [sp, #24]
 8006d78:	781b      	ldrb	r3, [r3, #0]
 8006d7a:	2b30      	cmp	r3, #48	; 0x30
 8006d7c:	d000      	beq.n	8006d80 <_strtod_l+0x50>
 8006d7e:	e07f      	b.n	8006e80 <_strtod_l+0x150>
 8006d80:	9b06      	ldr	r3, [sp, #24]
 8006d82:	3220      	adds	r2, #32
 8006d84:	785b      	ldrb	r3, [r3, #1]
 8006d86:	4393      	bics	r3, r2
 8006d88:	2b58      	cmp	r3, #88	; 0x58
 8006d8a:	d000      	beq.n	8006d8e <_strtod_l+0x5e>
 8006d8c:	e06e      	b.n	8006e6c <_strtod_l+0x13c>
 8006d8e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006d90:	9502      	str	r5, [sp, #8]
 8006d92:	9301      	str	r3, [sp, #4]
 8006d94:	ab20      	add	r3, sp, #128	; 0x80
 8006d96:	9300      	str	r3, [sp, #0]
 8006d98:	4a95      	ldr	r2, [pc, #596]	; (8006ff0 <_strtod_l+0x2c0>)
 8006d9a:	ab21      	add	r3, sp, #132	; 0x84
 8006d9c:	9805      	ldr	r0, [sp, #20]
 8006d9e:	a91f      	add	r1, sp, #124	; 0x7c
 8006da0:	f001 fdaa 	bl	80088f8 <__gethex>
 8006da4:	2307      	movs	r3, #7
 8006da6:	0005      	movs	r5, r0
 8006da8:	0004      	movs	r4, r0
 8006daa:	401d      	ands	r5, r3
 8006dac:	4218      	tst	r0, r3
 8006dae:	d006      	beq.n	8006dbe <_strtod_l+0x8e>
 8006db0:	2d06      	cmp	r5, #6
 8006db2:	d12f      	bne.n	8006e14 <_strtod_l+0xe4>
 8006db4:	9b06      	ldr	r3, [sp, #24]
 8006db6:	3301      	adds	r3, #1
 8006db8:	931f      	str	r3, [sp, #124]	; 0x7c
 8006dba:	2300      	movs	r3, #0
 8006dbc:	930e      	str	r3, [sp, #56]	; 0x38
 8006dbe:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d002      	beq.n	8006dca <_strtod_l+0x9a>
 8006dc4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006dc6:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8006dc8:	601a      	str	r2, [r3, #0]
 8006dca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d01c      	beq.n	8006e0a <_strtod_l+0xda>
 8006dd0:	2380      	movs	r3, #128	; 0x80
 8006dd2:	0032      	movs	r2, r6
 8006dd4:	061b      	lsls	r3, r3, #24
 8006dd6:	18fb      	adds	r3, r7, r3
 8006dd8:	0010      	movs	r0, r2
 8006dda:	0019      	movs	r1, r3
 8006ddc:	b025      	add	sp, #148	; 0x94
 8006dde:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006de0:	2b20      	cmp	r3, #32
 8006de2:	d1c3      	bne.n	8006d6c <_strtod_l+0x3c>
 8006de4:	3201      	adds	r2, #1
 8006de6:	921f      	str	r2, [sp, #124]	; 0x7c
 8006de8:	e7b5      	b.n	8006d56 <_strtod_l+0x26>
 8006dea:	2b2d      	cmp	r3, #45	; 0x2d
 8006dec:	d1be      	bne.n	8006d6c <_strtod_l+0x3c>
 8006dee:	3b2c      	subs	r3, #44	; 0x2c
 8006df0:	930e      	str	r3, [sp, #56]	; 0x38
 8006df2:	1c53      	adds	r3, r2, #1
 8006df4:	931f      	str	r3, [sp, #124]	; 0x7c
 8006df6:	7853      	ldrb	r3, [r2, #1]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d1b9      	bne.n	8006d70 <_strtod_l+0x40>
 8006dfc:	9b08      	ldr	r3, [sp, #32]
 8006dfe:	931f      	str	r3, [sp, #124]	; 0x7c
 8006e00:	2300      	movs	r3, #0
 8006e02:	930e      	str	r3, [sp, #56]	; 0x38
 8006e04:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d1dc      	bne.n	8006dc4 <_strtod_l+0x94>
 8006e0a:	0032      	movs	r2, r6
 8006e0c:	003b      	movs	r3, r7
 8006e0e:	e7e3      	b.n	8006dd8 <_strtod_l+0xa8>
 8006e10:	2300      	movs	r3, #0
 8006e12:	e7ed      	b.n	8006df0 <_strtod_l+0xc0>
 8006e14:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006e16:	2a00      	cmp	r2, #0
 8006e18:	d007      	beq.n	8006e2a <_strtod_l+0xfa>
 8006e1a:	2135      	movs	r1, #53	; 0x35
 8006e1c:	a822      	add	r0, sp, #136	; 0x88
 8006e1e:	f002 fd42 	bl	80098a6 <__copybits>
 8006e22:	9920      	ldr	r1, [sp, #128]	; 0x80
 8006e24:	9805      	ldr	r0, [sp, #20]
 8006e26:	f002 f8fd 	bl	8009024 <_Bfree>
 8006e2a:	1e68      	subs	r0, r5, #1
 8006e2c:	2804      	cmp	r0, #4
 8006e2e:	d806      	bhi.n	8006e3e <_strtod_l+0x10e>
 8006e30:	f7f9 f978 	bl	8000124 <__gnu_thumb1_case_uqi>
 8006e34:	1816030b 	.word	0x1816030b
 8006e38:	0b          	.byte	0x0b
 8006e39:	00          	.byte	0x00
 8006e3a:	9e22      	ldr	r6, [sp, #136]	; 0x88
 8006e3c:	9f23      	ldr	r7, [sp, #140]	; 0x8c
 8006e3e:	0723      	lsls	r3, r4, #28
 8006e40:	d5bd      	bpl.n	8006dbe <_strtod_l+0x8e>
 8006e42:	2380      	movs	r3, #128	; 0x80
 8006e44:	061b      	lsls	r3, r3, #24
 8006e46:	431f      	orrs	r7, r3
 8006e48:	e7b9      	b.n	8006dbe <_strtod_l+0x8e>
 8006e4a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006e4c:	4a69      	ldr	r2, [pc, #420]	; (8006ff4 <_strtod_l+0x2c4>)
 8006e4e:	496a      	ldr	r1, [pc, #424]	; (8006ff8 <_strtod_l+0x2c8>)
 8006e50:	401a      	ands	r2, r3
 8006e52:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006e54:	9e22      	ldr	r6, [sp, #136]	; 0x88
 8006e56:	185b      	adds	r3, r3, r1
 8006e58:	051b      	lsls	r3, r3, #20
 8006e5a:	431a      	orrs	r2, r3
 8006e5c:	0017      	movs	r7, r2
 8006e5e:	e7ee      	b.n	8006e3e <_strtod_l+0x10e>
 8006e60:	4f66      	ldr	r7, [pc, #408]	; (8006ffc <_strtod_l+0x2cc>)
 8006e62:	e7ec      	b.n	8006e3e <_strtod_l+0x10e>
 8006e64:	2601      	movs	r6, #1
 8006e66:	4f66      	ldr	r7, [pc, #408]	; (8007000 <_strtod_l+0x2d0>)
 8006e68:	4276      	negs	r6, r6
 8006e6a:	e7e8      	b.n	8006e3e <_strtod_l+0x10e>
 8006e6c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006e6e:	1c5a      	adds	r2, r3, #1
 8006e70:	921f      	str	r2, [sp, #124]	; 0x7c
 8006e72:	785b      	ldrb	r3, [r3, #1]
 8006e74:	2b30      	cmp	r3, #48	; 0x30
 8006e76:	d0f9      	beq.n	8006e6c <_strtod_l+0x13c>
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d0a0      	beq.n	8006dbe <_strtod_l+0x8e>
 8006e7c:	2301      	movs	r3, #1
 8006e7e:	930a      	str	r3, [sp, #40]	; 0x28
 8006e80:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006e82:	220a      	movs	r2, #10
 8006e84:	9310      	str	r3, [sp, #64]	; 0x40
 8006e86:	2300      	movs	r3, #0
 8006e88:	930f      	str	r3, [sp, #60]	; 0x3c
 8006e8a:	930b      	str	r3, [sp, #44]	; 0x2c
 8006e8c:	9309      	str	r3, [sp, #36]	; 0x24
 8006e8e:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8006e90:	7805      	ldrb	r5, [r0, #0]
 8006e92:	002b      	movs	r3, r5
 8006e94:	3b30      	subs	r3, #48	; 0x30
 8006e96:	b2d9      	uxtb	r1, r3
 8006e98:	2909      	cmp	r1, #9
 8006e9a:	d927      	bls.n	8006eec <_strtod_l+0x1bc>
 8006e9c:	0022      	movs	r2, r4
 8006e9e:	9907      	ldr	r1, [sp, #28]
 8006ea0:	f003 fb5a 	bl	800a558 <strncmp>
 8006ea4:	2800      	cmp	r0, #0
 8006ea6:	d033      	beq.n	8006f10 <_strtod_l+0x1e0>
 8006ea8:	2000      	movs	r0, #0
 8006eaa:	002b      	movs	r3, r5
 8006eac:	4684      	mov	ip, r0
 8006eae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006eb0:	900c      	str	r0, [sp, #48]	; 0x30
 8006eb2:	9206      	str	r2, [sp, #24]
 8006eb4:	2220      	movs	r2, #32
 8006eb6:	0019      	movs	r1, r3
 8006eb8:	4391      	bics	r1, r2
 8006eba:	000a      	movs	r2, r1
 8006ebc:	2100      	movs	r1, #0
 8006ebe:	9107      	str	r1, [sp, #28]
 8006ec0:	2a45      	cmp	r2, #69	; 0x45
 8006ec2:	d000      	beq.n	8006ec6 <_strtod_l+0x196>
 8006ec4:	e0c5      	b.n	8007052 <_strtod_l+0x322>
 8006ec6:	9b06      	ldr	r3, [sp, #24]
 8006ec8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006eca:	4303      	orrs	r3, r0
 8006ecc:	4313      	orrs	r3, r2
 8006ece:	428b      	cmp	r3, r1
 8006ed0:	d094      	beq.n	8006dfc <_strtod_l+0xcc>
 8006ed2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006ed4:	9308      	str	r3, [sp, #32]
 8006ed6:	3301      	adds	r3, #1
 8006ed8:	931f      	str	r3, [sp, #124]	; 0x7c
 8006eda:	9b08      	ldr	r3, [sp, #32]
 8006edc:	785b      	ldrb	r3, [r3, #1]
 8006ede:	2b2b      	cmp	r3, #43	; 0x2b
 8006ee0:	d076      	beq.n	8006fd0 <_strtod_l+0x2a0>
 8006ee2:	000c      	movs	r4, r1
 8006ee4:	2b2d      	cmp	r3, #45	; 0x2d
 8006ee6:	d179      	bne.n	8006fdc <_strtod_l+0x2ac>
 8006ee8:	2401      	movs	r4, #1
 8006eea:	e072      	b.n	8006fd2 <_strtod_l+0x2a2>
 8006eec:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006eee:	2908      	cmp	r1, #8
 8006ef0:	dc09      	bgt.n	8006f06 <_strtod_l+0x1d6>
 8006ef2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006ef4:	4351      	muls	r1, r2
 8006ef6:	185b      	adds	r3, r3, r1
 8006ef8:	930b      	str	r3, [sp, #44]	; 0x2c
 8006efa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006efc:	3001      	adds	r0, #1
 8006efe:	3301      	adds	r3, #1
 8006f00:	9309      	str	r3, [sp, #36]	; 0x24
 8006f02:	901f      	str	r0, [sp, #124]	; 0x7c
 8006f04:	e7c3      	b.n	8006e8e <_strtod_l+0x15e>
 8006f06:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006f08:	4351      	muls	r1, r2
 8006f0a:	185b      	adds	r3, r3, r1
 8006f0c:	930f      	str	r3, [sp, #60]	; 0x3c
 8006f0e:	e7f4      	b.n	8006efa <_strtod_l+0x1ca>
 8006f10:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006f12:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006f14:	191c      	adds	r4, r3, r4
 8006f16:	941f      	str	r4, [sp, #124]	; 0x7c
 8006f18:	7823      	ldrb	r3, [r4, #0]
 8006f1a:	2a00      	cmp	r2, #0
 8006f1c:	d039      	beq.n	8006f92 <_strtod_l+0x262>
 8006f1e:	900c      	str	r0, [sp, #48]	; 0x30
 8006f20:	9206      	str	r2, [sp, #24]
 8006f22:	001a      	movs	r2, r3
 8006f24:	3a30      	subs	r2, #48	; 0x30
 8006f26:	2a09      	cmp	r2, #9
 8006f28:	d912      	bls.n	8006f50 <_strtod_l+0x220>
 8006f2a:	2201      	movs	r2, #1
 8006f2c:	4694      	mov	ip, r2
 8006f2e:	e7c1      	b.n	8006eb4 <_strtod_l+0x184>
 8006f30:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006f32:	3001      	adds	r0, #1
 8006f34:	1c5a      	adds	r2, r3, #1
 8006f36:	921f      	str	r2, [sp, #124]	; 0x7c
 8006f38:	785b      	ldrb	r3, [r3, #1]
 8006f3a:	2b30      	cmp	r3, #48	; 0x30
 8006f3c:	d0f8      	beq.n	8006f30 <_strtod_l+0x200>
 8006f3e:	001a      	movs	r2, r3
 8006f40:	3a31      	subs	r2, #49	; 0x31
 8006f42:	2a08      	cmp	r2, #8
 8006f44:	d83f      	bhi.n	8006fc6 <_strtod_l+0x296>
 8006f46:	900c      	str	r0, [sp, #48]	; 0x30
 8006f48:	2000      	movs	r0, #0
 8006f4a:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8006f4c:	9006      	str	r0, [sp, #24]
 8006f4e:	9210      	str	r2, [sp, #64]	; 0x40
 8006f50:	001a      	movs	r2, r3
 8006f52:	1c41      	adds	r1, r0, #1
 8006f54:	3a30      	subs	r2, #48	; 0x30
 8006f56:	2b30      	cmp	r3, #48	; 0x30
 8006f58:	d015      	beq.n	8006f86 <_strtod_l+0x256>
 8006f5a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006f5c:	185b      	adds	r3, r3, r1
 8006f5e:	210a      	movs	r1, #10
 8006f60:	930c      	str	r3, [sp, #48]	; 0x30
 8006f62:	9b06      	ldr	r3, [sp, #24]
 8006f64:	18c4      	adds	r4, r0, r3
 8006f66:	42a3      	cmp	r3, r4
 8006f68:	d115      	bne.n	8006f96 <_strtod_l+0x266>
 8006f6a:	9906      	ldr	r1, [sp, #24]
 8006f6c:	9b06      	ldr	r3, [sp, #24]
 8006f6e:	3101      	adds	r1, #1
 8006f70:	1809      	adds	r1, r1, r0
 8006f72:	181b      	adds	r3, r3, r0
 8006f74:	9106      	str	r1, [sp, #24]
 8006f76:	2b08      	cmp	r3, #8
 8006f78:	dc1b      	bgt.n	8006fb2 <_strtod_l+0x282>
 8006f7a:	230a      	movs	r3, #10
 8006f7c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006f7e:	434b      	muls	r3, r1
 8006f80:	2100      	movs	r1, #0
 8006f82:	18d3      	adds	r3, r2, r3
 8006f84:	930b      	str	r3, [sp, #44]	; 0x2c
 8006f86:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006f88:	0008      	movs	r0, r1
 8006f8a:	1c5a      	adds	r2, r3, #1
 8006f8c:	921f      	str	r2, [sp, #124]	; 0x7c
 8006f8e:	785b      	ldrb	r3, [r3, #1]
 8006f90:	e7c7      	b.n	8006f22 <_strtod_l+0x1f2>
 8006f92:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006f94:	e7d1      	b.n	8006f3a <_strtod_l+0x20a>
 8006f96:	2b08      	cmp	r3, #8
 8006f98:	dc04      	bgt.n	8006fa4 <_strtod_l+0x274>
 8006f9a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8006f9c:	434d      	muls	r5, r1
 8006f9e:	950b      	str	r5, [sp, #44]	; 0x2c
 8006fa0:	3301      	adds	r3, #1
 8006fa2:	e7e0      	b.n	8006f66 <_strtod_l+0x236>
 8006fa4:	1c5d      	adds	r5, r3, #1
 8006fa6:	2d10      	cmp	r5, #16
 8006fa8:	dcfa      	bgt.n	8006fa0 <_strtod_l+0x270>
 8006faa:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006fac:	434d      	muls	r5, r1
 8006fae:	950f      	str	r5, [sp, #60]	; 0x3c
 8006fb0:	e7f6      	b.n	8006fa0 <_strtod_l+0x270>
 8006fb2:	9b06      	ldr	r3, [sp, #24]
 8006fb4:	2100      	movs	r1, #0
 8006fb6:	2b10      	cmp	r3, #16
 8006fb8:	dce5      	bgt.n	8006f86 <_strtod_l+0x256>
 8006fba:	230a      	movs	r3, #10
 8006fbc:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8006fbe:	4343      	muls	r3, r0
 8006fc0:	18d3      	adds	r3, r2, r3
 8006fc2:	930f      	str	r3, [sp, #60]	; 0x3c
 8006fc4:	e7df      	b.n	8006f86 <_strtod_l+0x256>
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	920c      	str	r2, [sp, #48]	; 0x30
 8006fca:	9206      	str	r2, [sp, #24]
 8006fcc:	3201      	adds	r2, #1
 8006fce:	e7ad      	b.n	8006f2c <_strtod_l+0x1fc>
 8006fd0:	2400      	movs	r4, #0
 8006fd2:	9b08      	ldr	r3, [sp, #32]
 8006fd4:	3302      	adds	r3, #2
 8006fd6:	931f      	str	r3, [sp, #124]	; 0x7c
 8006fd8:	9b08      	ldr	r3, [sp, #32]
 8006fda:	789b      	ldrb	r3, [r3, #2]
 8006fdc:	001a      	movs	r2, r3
 8006fde:	3a30      	subs	r2, #48	; 0x30
 8006fe0:	2a09      	cmp	r2, #9
 8006fe2:	d913      	bls.n	800700c <_strtod_l+0x2dc>
 8006fe4:	9a08      	ldr	r2, [sp, #32]
 8006fe6:	921f      	str	r2, [sp, #124]	; 0x7c
 8006fe8:	2200      	movs	r2, #0
 8006fea:	e031      	b.n	8007050 <_strtod_l+0x320>
 8006fec:	0800b668 	.word	0x0800b668
 8006ff0:	0800b41c 	.word	0x0800b41c
 8006ff4:	ffefffff 	.word	0xffefffff
 8006ff8:	00000433 	.word	0x00000433
 8006ffc:	7ff00000 	.word	0x7ff00000
 8007000:	7fffffff 	.word	0x7fffffff
 8007004:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007006:	1c5a      	adds	r2, r3, #1
 8007008:	921f      	str	r2, [sp, #124]	; 0x7c
 800700a:	785b      	ldrb	r3, [r3, #1]
 800700c:	2b30      	cmp	r3, #48	; 0x30
 800700e:	d0f9      	beq.n	8007004 <_strtod_l+0x2d4>
 8007010:	2200      	movs	r2, #0
 8007012:	9207      	str	r2, [sp, #28]
 8007014:	001a      	movs	r2, r3
 8007016:	3a31      	subs	r2, #49	; 0x31
 8007018:	2a08      	cmp	r2, #8
 800701a:	d81a      	bhi.n	8007052 <_strtod_l+0x322>
 800701c:	3b30      	subs	r3, #48	; 0x30
 800701e:	001a      	movs	r2, r3
 8007020:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007022:	9307      	str	r3, [sp, #28]
 8007024:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007026:	1c59      	adds	r1, r3, #1
 8007028:	911f      	str	r1, [sp, #124]	; 0x7c
 800702a:	785b      	ldrb	r3, [r3, #1]
 800702c:	001d      	movs	r5, r3
 800702e:	3d30      	subs	r5, #48	; 0x30
 8007030:	2d09      	cmp	r5, #9
 8007032:	d939      	bls.n	80070a8 <_strtod_l+0x378>
 8007034:	9d07      	ldr	r5, [sp, #28]
 8007036:	1b49      	subs	r1, r1, r5
 8007038:	4db0      	ldr	r5, [pc, #704]	; (80072fc <_strtod_l+0x5cc>)
 800703a:	9507      	str	r5, [sp, #28]
 800703c:	2908      	cmp	r1, #8
 800703e:	dc03      	bgt.n	8007048 <_strtod_l+0x318>
 8007040:	9207      	str	r2, [sp, #28]
 8007042:	42aa      	cmp	r2, r5
 8007044:	dd00      	ble.n	8007048 <_strtod_l+0x318>
 8007046:	9507      	str	r5, [sp, #28]
 8007048:	2c00      	cmp	r4, #0
 800704a:	d002      	beq.n	8007052 <_strtod_l+0x322>
 800704c:	9a07      	ldr	r2, [sp, #28]
 800704e:	4252      	negs	r2, r2
 8007050:	9207      	str	r2, [sp, #28]
 8007052:	9a06      	ldr	r2, [sp, #24]
 8007054:	2a00      	cmp	r2, #0
 8007056:	d14b      	bne.n	80070f0 <_strtod_l+0x3c0>
 8007058:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800705a:	4310      	orrs	r0, r2
 800705c:	d000      	beq.n	8007060 <_strtod_l+0x330>
 800705e:	e6ae      	b.n	8006dbe <_strtod_l+0x8e>
 8007060:	4662      	mov	r2, ip
 8007062:	2a00      	cmp	r2, #0
 8007064:	d000      	beq.n	8007068 <_strtod_l+0x338>
 8007066:	e6c9      	b.n	8006dfc <_strtod_l+0xcc>
 8007068:	2b69      	cmp	r3, #105	; 0x69
 800706a:	d025      	beq.n	80070b8 <_strtod_l+0x388>
 800706c:	dc21      	bgt.n	80070b2 <_strtod_l+0x382>
 800706e:	2b49      	cmp	r3, #73	; 0x49
 8007070:	d022      	beq.n	80070b8 <_strtod_l+0x388>
 8007072:	2b4e      	cmp	r3, #78	; 0x4e
 8007074:	d000      	beq.n	8007078 <_strtod_l+0x348>
 8007076:	e6c1      	b.n	8006dfc <_strtod_l+0xcc>
 8007078:	49a1      	ldr	r1, [pc, #644]	; (8007300 <_strtod_l+0x5d0>)
 800707a:	a81f      	add	r0, sp, #124	; 0x7c
 800707c:	f001 fe8a 	bl	8008d94 <__match>
 8007080:	2800      	cmp	r0, #0
 8007082:	d100      	bne.n	8007086 <_strtod_l+0x356>
 8007084:	e6ba      	b.n	8006dfc <_strtod_l+0xcc>
 8007086:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007088:	781b      	ldrb	r3, [r3, #0]
 800708a:	2b28      	cmp	r3, #40	; 0x28
 800708c:	d12a      	bne.n	80070e4 <_strtod_l+0x3b4>
 800708e:	499d      	ldr	r1, [pc, #628]	; (8007304 <_strtod_l+0x5d4>)
 8007090:	aa22      	add	r2, sp, #136	; 0x88
 8007092:	a81f      	add	r0, sp, #124	; 0x7c
 8007094:	f001 fe92 	bl	8008dbc <__hexnan>
 8007098:	2805      	cmp	r0, #5
 800709a:	d123      	bne.n	80070e4 <_strtod_l+0x3b4>
 800709c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800709e:	4a9a      	ldr	r2, [pc, #616]	; (8007308 <_strtod_l+0x5d8>)
 80070a0:	9e22      	ldr	r6, [sp, #136]	; 0x88
 80070a2:	431a      	orrs	r2, r3
 80070a4:	0017      	movs	r7, r2
 80070a6:	e68a      	b.n	8006dbe <_strtod_l+0x8e>
 80070a8:	210a      	movs	r1, #10
 80070aa:	434a      	muls	r2, r1
 80070ac:	18d2      	adds	r2, r2, r3
 80070ae:	3a30      	subs	r2, #48	; 0x30
 80070b0:	e7b8      	b.n	8007024 <_strtod_l+0x2f4>
 80070b2:	2b6e      	cmp	r3, #110	; 0x6e
 80070b4:	d0e0      	beq.n	8007078 <_strtod_l+0x348>
 80070b6:	e6a1      	b.n	8006dfc <_strtod_l+0xcc>
 80070b8:	4994      	ldr	r1, [pc, #592]	; (800730c <_strtod_l+0x5dc>)
 80070ba:	a81f      	add	r0, sp, #124	; 0x7c
 80070bc:	f001 fe6a 	bl	8008d94 <__match>
 80070c0:	2800      	cmp	r0, #0
 80070c2:	d100      	bne.n	80070c6 <_strtod_l+0x396>
 80070c4:	e69a      	b.n	8006dfc <_strtod_l+0xcc>
 80070c6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80070c8:	4991      	ldr	r1, [pc, #580]	; (8007310 <_strtod_l+0x5e0>)
 80070ca:	3b01      	subs	r3, #1
 80070cc:	a81f      	add	r0, sp, #124	; 0x7c
 80070ce:	931f      	str	r3, [sp, #124]	; 0x7c
 80070d0:	f001 fe60 	bl	8008d94 <__match>
 80070d4:	2800      	cmp	r0, #0
 80070d6:	d102      	bne.n	80070de <_strtod_l+0x3ae>
 80070d8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80070da:	3301      	adds	r3, #1
 80070dc:	931f      	str	r3, [sp, #124]	; 0x7c
 80070de:	2600      	movs	r6, #0
 80070e0:	4f89      	ldr	r7, [pc, #548]	; (8007308 <_strtod_l+0x5d8>)
 80070e2:	e66c      	b.n	8006dbe <_strtod_l+0x8e>
 80070e4:	488b      	ldr	r0, [pc, #556]	; (8007314 <_strtod_l+0x5e4>)
 80070e6:	f003 f9e3 	bl	800a4b0 <nan>
 80070ea:	0006      	movs	r6, r0
 80070ec:	000f      	movs	r7, r1
 80070ee:	e666      	b.n	8006dbe <_strtod_l+0x8e>
 80070f0:	9b07      	ldr	r3, [sp, #28]
 80070f2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80070f4:	1a9b      	subs	r3, r3, r2
 80070f6:	930a      	str	r3, [sp, #40]	; 0x28
 80070f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d101      	bne.n	8007102 <_strtod_l+0x3d2>
 80070fe:	9b06      	ldr	r3, [sp, #24]
 8007100:	9309      	str	r3, [sp, #36]	; 0x24
 8007102:	9c06      	ldr	r4, [sp, #24]
 8007104:	2c10      	cmp	r4, #16
 8007106:	dd00      	ble.n	800710a <_strtod_l+0x3da>
 8007108:	2410      	movs	r4, #16
 800710a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800710c:	f7fb fcd4 	bl	8002ab8 <__aeabi_ui2d>
 8007110:	9b06      	ldr	r3, [sp, #24]
 8007112:	0006      	movs	r6, r0
 8007114:	000f      	movs	r7, r1
 8007116:	2b09      	cmp	r3, #9
 8007118:	dd15      	ble.n	8007146 <_strtod_l+0x416>
 800711a:	0022      	movs	r2, r4
 800711c:	4b7e      	ldr	r3, [pc, #504]	; (8007318 <_strtod_l+0x5e8>)
 800711e:	3a09      	subs	r2, #9
 8007120:	00d2      	lsls	r2, r2, #3
 8007122:	189b      	adds	r3, r3, r2
 8007124:	681a      	ldr	r2, [r3, #0]
 8007126:	685b      	ldr	r3, [r3, #4]
 8007128:	f7fa fe44 	bl	8001db4 <__aeabi_dmul>
 800712c:	0006      	movs	r6, r0
 800712e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8007130:	000f      	movs	r7, r1
 8007132:	f7fb fcc1 	bl	8002ab8 <__aeabi_ui2d>
 8007136:	0002      	movs	r2, r0
 8007138:	000b      	movs	r3, r1
 800713a:	0030      	movs	r0, r6
 800713c:	0039      	movs	r1, r7
 800713e:	f7f9 fefb 	bl	8000f38 <__aeabi_dadd>
 8007142:	0006      	movs	r6, r0
 8007144:	000f      	movs	r7, r1
 8007146:	9b06      	ldr	r3, [sp, #24]
 8007148:	2b0f      	cmp	r3, #15
 800714a:	dc39      	bgt.n	80071c0 <_strtod_l+0x490>
 800714c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800714e:	2b00      	cmp	r3, #0
 8007150:	d100      	bne.n	8007154 <_strtod_l+0x424>
 8007152:	e634      	b.n	8006dbe <_strtod_l+0x8e>
 8007154:	dd24      	ble.n	80071a0 <_strtod_l+0x470>
 8007156:	2b16      	cmp	r3, #22
 8007158:	dc09      	bgt.n	800716e <_strtod_l+0x43e>
 800715a:	496f      	ldr	r1, [pc, #444]	; (8007318 <_strtod_l+0x5e8>)
 800715c:	00db      	lsls	r3, r3, #3
 800715e:	18c9      	adds	r1, r1, r3
 8007160:	0032      	movs	r2, r6
 8007162:	6808      	ldr	r0, [r1, #0]
 8007164:	6849      	ldr	r1, [r1, #4]
 8007166:	003b      	movs	r3, r7
 8007168:	f7fa fe24 	bl	8001db4 <__aeabi_dmul>
 800716c:	e7bd      	b.n	80070ea <_strtod_l+0x3ba>
 800716e:	2325      	movs	r3, #37	; 0x25
 8007170:	9a06      	ldr	r2, [sp, #24]
 8007172:	1a9b      	subs	r3, r3, r2
 8007174:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007176:	4293      	cmp	r3, r2
 8007178:	db22      	blt.n	80071c0 <_strtod_l+0x490>
 800717a:	240f      	movs	r4, #15
 800717c:	9b06      	ldr	r3, [sp, #24]
 800717e:	4d66      	ldr	r5, [pc, #408]	; (8007318 <_strtod_l+0x5e8>)
 8007180:	1ae4      	subs	r4, r4, r3
 8007182:	00e1      	lsls	r1, r4, #3
 8007184:	1869      	adds	r1, r5, r1
 8007186:	0032      	movs	r2, r6
 8007188:	6808      	ldr	r0, [r1, #0]
 800718a:	6849      	ldr	r1, [r1, #4]
 800718c:	003b      	movs	r3, r7
 800718e:	f7fa fe11 	bl	8001db4 <__aeabi_dmul>
 8007192:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007194:	1b1c      	subs	r4, r3, r4
 8007196:	00e4      	lsls	r4, r4, #3
 8007198:	192c      	adds	r4, r5, r4
 800719a:	6822      	ldr	r2, [r4, #0]
 800719c:	6863      	ldr	r3, [r4, #4]
 800719e:	e7e3      	b.n	8007168 <_strtod_l+0x438>
 80071a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80071a2:	3316      	adds	r3, #22
 80071a4:	db0c      	blt.n	80071c0 <_strtod_l+0x490>
 80071a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80071a8:	9a07      	ldr	r2, [sp, #28]
 80071aa:	0030      	movs	r0, r6
 80071ac:	1a9a      	subs	r2, r3, r2
 80071ae:	4b5a      	ldr	r3, [pc, #360]	; (8007318 <_strtod_l+0x5e8>)
 80071b0:	00d2      	lsls	r2, r2, #3
 80071b2:	189b      	adds	r3, r3, r2
 80071b4:	0039      	movs	r1, r7
 80071b6:	681a      	ldr	r2, [r3, #0]
 80071b8:	685b      	ldr	r3, [r3, #4]
 80071ba:	f7fa f9f9 	bl	80015b0 <__aeabi_ddiv>
 80071be:	e794      	b.n	80070ea <_strtod_l+0x3ba>
 80071c0:	9b06      	ldr	r3, [sp, #24]
 80071c2:	1b1c      	subs	r4, r3, r4
 80071c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80071c6:	18e4      	adds	r4, r4, r3
 80071c8:	2c00      	cmp	r4, #0
 80071ca:	dd72      	ble.n	80072b2 <_strtod_l+0x582>
 80071cc:	230f      	movs	r3, #15
 80071ce:	0021      	movs	r1, r4
 80071d0:	4019      	ands	r1, r3
 80071d2:	421c      	tst	r4, r3
 80071d4:	d00a      	beq.n	80071ec <_strtod_l+0x4bc>
 80071d6:	00cb      	lsls	r3, r1, #3
 80071d8:	494f      	ldr	r1, [pc, #316]	; (8007318 <_strtod_l+0x5e8>)
 80071da:	0032      	movs	r2, r6
 80071dc:	18c9      	adds	r1, r1, r3
 80071de:	6808      	ldr	r0, [r1, #0]
 80071e0:	6849      	ldr	r1, [r1, #4]
 80071e2:	003b      	movs	r3, r7
 80071e4:	f7fa fde6 	bl	8001db4 <__aeabi_dmul>
 80071e8:	0006      	movs	r6, r0
 80071ea:	000f      	movs	r7, r1
 80071ec:	230f      	movs	r3, #15
 80071ee:	439c      	bics	r4, r3
 80071f0:	d04a      	beq.n	8007288 <_strtod_l+0x558>
 80071f2:	3326      	adds	r3, #38	; 0x26
 80071f4:	33ff      	adds	r3, #255	; 0xff
 80071f6:	429c      	cmp	r4, r3
 80071f8:	dd22      	ble.n	8007240 <_strtod_l+0x510>
 80071fa:	2300      	movs	r3, #0
 80071fc:	9306      	str	r3, [sp, #24]
 80071fe:	9307      	str	r3, [sp, #28]
 8007200:	930b      	str	r3, [sp, #44]	; 0x2c
 8007202:	9309      	str	r3, [sp, #36]	; 0x24
 8007204:	2322      	movs	r3, #34	; 0x22
 8007206:	2600      	movs	r6, #0
 8007208:	9a05      	ldr	r2, [sp, #20]
 800720a:	4f3f      	ldr	r7, [pc, #252]	; (8007308 <_strtod_l+0x5d8>)
 800720c:	6013      	str	r3, [r2, #0]
 800720e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007210:	42b3      	cmp	r3, r6
 8007212:	d100      	bne.n	8007216 <_strtod_l+0x4e6>
 8007214:	e5d3      	b.n	8006dbe <_strtod_l+0x8e>
 8007216:	9920      	ldr	r1, [sp, #128]	; 0x80
 8007218:	9805      	ldr	r0, [sp, #20]
 800721a:	f001 ff03 	bl	8009024 <_Bfree>
 800721e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007220:	9805      	ldr	r0, [sp, #20]
 8007222:	f001 feff 	bl	8009024 <_Bfree>
 8007226:	9907      	ldr	r1, [sp, #28]
 8007228:	9805      	ldr	r0, [sp, #20]
 800722a:	f001 fefb 	bl	8009024 <_Bfree>
 800722e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007230:	9805      	ldr	r0, [sp, #20]
 8007232:	f001 fef7 	bl	8009024 <_Bfree>
 8007236:	9906      	ldr	r1, [sp, #24]
 8007238:	9805      	ldr	r0, [sp, #20]
 800723a:	f001 fef3 	bl	8009024 <_Bfree>
 800723e:	e5be      	b.n	8006dbe <_strtod_l+0x8e>
 8007240:	2300      	movs	r3, #0
 8007242:	0030      	movs	r0, r6
 8007244:	0039      	movs	r1, r7
 8007246:	4d35      	ldr	r5, [pc, #212]	; (800731c <_strtod_l+0x5ec>)
 8007248:	1124      	asrs	r4, r4, #4
 800724a:	9308      	str	r3, [sp, #32]
 800724c:	2c01      	cmp	r4, #1
 800724e:	dc1e      	bgt.n	800728e <_strtod_l+0x55e>
 8007250:	2b00      	cmp	r3, #0
 8007252:	d001      	beq.n	8007258 <_strtod_l+0x528>
 8007254:	0006      	movs	r6, r0
 8007256:	000f      	movs	r7, r1
 8007258:	4b31      	ldr	r3, [pc, #196]	; (8007320 <_strtod_l+0x5f0>)
 800725a:	0032      	movs	r2, r6
 800725c:	18ff      	adds	r7, r7, r3
 800725e:	9b08      	ldr	r3, [sp, #32]
 8007260:	00dd      	lsls	r5, r3, #3
 8007262:	4b2e      	ldr	r3, [pc, #184]	; (800731c <_strtod_l+0x5ec>)
 8007264:	195d      	adds	r5, r3, r5
 8007266:	6828      	ldr	r0, [r5, #0]
 8007268:	6869      	ldr	r1, [r5, #4]
 800726a:	003b      	movs	r3, r7
 800726c:	f7fa fda2 	bl	8001db4 <__aeabi_dmul>
 8007270:	4b25      	ldr	r3, [pc, #148]	; (8007308 <_strtod_l+0x5d8>)
 8007272:	4a2c      	ldr	r2, [pc, #176]	; (8007324 <_strtod_l+0x5f4>)
 8007274:	0006      	movs	r6, r0
 8007276:	400b      	ands	r3, r1
 8007278:	4293      	cmp	r3, r2
 800727a:	d8be      	bhi.n	80071fa <_strtod_l+0x4ca>
 800727c:	4a2a      	ldr	r2, [pc, #168]	; (8007328 <_strtod_l+0x5f8>)
 800727e:	4293      	cmp	r3, r2
 8007280:	d913      	bls.n	80072aa <_strtod_l+0x57a>
 8007282:	2601      	movs	r6, #1
 8007284:	4f29      	ldr	r7, [pc, #164]	; (800732c <_strtod_l+0x5fc>)
 8007286:	4276      	negs	r6, r6
 8007288:	2300      	movs	r3, #0
 800728a:	9308      	str	r3, [sp, #32]
 800728c:	e087      	b.n	800739e <_strtod_l+0x66e>
 800728e:	2201      	movs	r2, #1
 8007290:	4214      	tst	r4, r2
 8007292:	d004      	beq.n	800729e <_strtod_l+0x56e>
 8007294:	682a      	ldr	r2, [r5, #0]
 8007296:	686b      	ldr	r3, [r5, #4]
 8007298:	f7fa fd8c 	bl	8001db4 <__aeabi_dmul>
 800729c:	2301      	movs	r3, #1
 800729e:	9a08      	ldr	r2, [sp, #32]
 80072a0:	1064      	asrs	r4, r4, #1
 80072a2:	3201      	adds	r2, #1
 80072a4:	9208      	str	r2, [sp, #32]
 80072a6:	3508      	adds	r5, #8
 80072a8:	e7d0      	b.n	800724c <_strtod_l+0x51c>
 80072aa:	23d4      	movs	r3, #212	; 0xd4
 80072ac:	049b      	lsls	r3, r3, #18
 80072ae:	18cf      	adds	r7, r1, r3
 80072b0:	e7ea      	b.n	8007288 <_strtod_l+0x558>
 80072b2:	2c00      	cmp	r4, #0
 80072b4:	d0e8      	beq.n	8007288 <_strtod_l+0x558>
 80072b6:	4264      	negs	r4, r4
 80072b8:	220f      	movs	r2, #15
 80072ba:	0023      	movs	r3, r4
 80072bc:	4013      	ands	r3, r2
 80072be:	4214      	tst	r4, r2
 80072c0:	d00a      	beq.n	80072d8 <_strtod_l+0x5a8>
 80072c2:	00da      	lsls	r2, r3, #3
 80072c4:	4b14      	ldr	r3, [pc, #80]	; (8007318 <_strtod_l+0x5e8>)
 80072c6:	0030      	movs	r0, r6
 80072c8:	189b      	adds	r3, r3, r2
 80072ca:	0039      	movs	r1, r7
 80072cc:	681a      	ldr	r2, [r3, #0]
 80072ce:	685b      	ldr	r3, [r3, #4]
 80072d0:	f7fa f96e 	bl	80015b0 <__aeabi_ddiv>
 80072d4:	0006      	movs	r6, r0
 80072d6:	000f      	movs	r7, r1
 80072d8:	1124      	asrs	r4, r4, #4
 80072da:	d0d5      	beq.n	8007288 <_strtod_l+0x558>
 80072dc:	2c1f      	cmp	r4, #31
 80072de:	dd27      	ble.n	8007330 <_strtod_l+0x600>
 80072e0:	2300      	movs	r3, #0
 80072e2:	9306      	str	r3, [sp, #24]
 80072e4:	9307      	str	r3, [sp, #28]
 80072e6:	930b      	str	r3, [sp, #44]	; 0x2c
 80072e8:	9309      	str	r3, [sp, #36]	; 0x24
 80072ea:	2322      	movs	r3, #34	; 0x22
 80072ec:	9a05      	ldr	r2, [sp, #20]
 80072ee:	2600      	movs	r6, #0
 80072f0:	6013      	str	r3, [r2, #0]
 80072f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80072f4:	2700      	movs	r7, #0
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d18d      	bne.n	8007216 <_strtod_l+0x4e6>
 80072fa:	e560      	b.n	8006dbe <_strtod_l+0x8e>
 80072fc:	00004e1f 	.word	0x00004e1f
 8007300:	0800b3f1 	.word	0x0800b3f1
 8007304:	0800b430 	.word	0x0800b430
 8007308:	7ff00000 	.word	0x7ff00000
 800730c:	0800b3e9 	.word	0x0800b3e9
 8007310:	0800b574 	.word	0x0800b574
 8007314:	0800b83b 	.word	0x0800b83b
 8007318:	0800b700 	.word	0x0800b700
 800731c:	0800b6d8 	.word	0x0800b6d8
 8007320:	fcb00000 	.word	0xfcb00000
 8007324:	7ca00000 	.word	0x7ca00000
 8007328:	7c900000 	.word	0x7c900000
 800732c:	7fefffff 	.word	0x7fefffff
 8007330:	2310      	movs	r3, #16
 8007332:	0022      	movs	r2, r4
 8007334:	401a      	ands	r2, r3
 8007336:	9208      	str	r2, [sp, #32]
 8007338:	421c      	tst	r4, r3
 800733a:	d001      	beq.n	8007340 <_strtod_l+0x610>
 800733c:	335a      	adds	r3, #90	; 0x5a
 800733e:	9308      	str	r3, [sp, #32]
 8007340:	0030      	movs	r0, r6
 8007342:	0039      	movs	r1, r7
 8007344:	2300      	movs	r3, #0
 8007346:	4dc5      	ldr	r5, [pc, #788]	; (800765c <_strtod_l+0x92c>)
 8007348:	2201      	movs	r2, #1
 800734a:	4214      	tst	r4, r2
 800734c:	d004      	beq.n	8007358 <_strtod_l+0x628>
 800734e:	682a      	ldr	r2, [r5, #0]
 8007350:	686b      	ldr	r3, [r5, #4]
 8007352:	f7fa fd2f 	bl	8001db4 <__aeabi_dmul>
 8007356:	2301      	movs	r3, #1
 8007358:	1064      	asrs	r4, r4, #1
 800735a:	3508      	adds	r5, #8
 800735c:	2c00      	cmp	r4, #0
 800735e:	d1f3      	bne.n	8007348 <_strtod_l+0x618>
 8007360:	2b00      	cmp	r3, #0
 8007362:	d001      	beq.n	8007368 <_strtod_l+0x638>
 8007364:	0006      	movs	r6, r0
 8007366:	000f      	movs	r7, r1
 8007368:	9b08      	ldr	r3, [sp, #32]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d00f      	beq.n	800738e <_strtod_l+0x65e>
 800736e:	236b      	movs	r3, #107	; 0x6b
 8007370:	007a      	lsls	r2, r7, #1
 8007372:	0d52      	lsrs	r2, r2, #21
 8007374:	0039      	movs	r1, r7
 8007376:	1a9b      	subs	r3, r3, r2
 8007378:	2b00      	cmp	r3, #0
 800737a:	dd08      	ble.n	800738e <_strtod_l+0x65e>
 800737c:	2b1f      	cmp	r3, #31
 800737e:	dc00      	bgt.n	8007382 <_strtod_l+0x652>
 8007380:	e124      	b.n	80075cc <_strtod_l+0x89c>
 8007382:	2600      	movs	r6, #0
 8007384:	2b34      	cmp	r3, #52	; 0x34
 8007386:	dc00      	bgt.n	800738a <_strtod_l+0x65a>
 8007388:	e119      	b.n	80075be <_strtod_l+0x88e>
 800738a:	27dc      	movs	r7, #220	; 0xdc
 800738c:	04bf      	lsls	r7, r7, #18
 800738e:	2200      	movs	r2, #0
 8007390:	2300      	movs	r3, #0
 8007392:	0030      	movs	r0, r6
 8007394:	0039      	movs	r1, r7
 8007396:	f7f9 f85f 	bl	8000458 <__aeabi_dcmpeq>
 800739a:	2800      	cmp	r0, #0
 800739c:	d1a0      	bne.n	80072e0 <_strtod_l+0x5b0>
 800739e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80073a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80073a2:	9300      	str	r3, [sp, #0]
 80073a4:	9910      	ldr	r1, [sp, #64]	; 0x40
 80073a6:	9b06      	ldr	r3, [sp, #24]
 80073a8:	9805      	ldr	r0, [sp, #20]
 80073aa:	f001 fea3 	bl	80090f4 <__s2b>
 80073ae:	900b      	str	r0, [sp, #44]	; 0x2c
 80073b0:	2800      	cmp	r0, #0
 80073b2:	d100      	bne.n	80073b6 <_strtod_l+0x686>
 80073b4:	e721      	b.n	80071fa <_strtod_l+0x4ca>
 80073b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80073b8:	9907      	ldr	r1, [sp, #28]
 80073ba:	17da      	asrs	r2, r3, #31
 80073bc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80073be:	1a5b      	subs	r3, r3, r1
 80073c0:	401a      	ands	r2, r3
 80073c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80073c4:	9215      	str	r2, [sp, #84]	; 0x54
 80073c6:	43db      	mvns	r3, r3
 80073c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80073ca:	17db      	asrs	r3, r3, #31
 80073cc:	401a      	ands	r2, r3
 80073ce:	2300      	movs	r3, #0
 80073d0:	921a      	str	r2, [sp, #104]	; 0x68
 80073d2:	9306      	str	r3, [sp, #24]
 80073d4:	9307      	str	r3, [sp, #28]
 80073d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80073d8:	9805      	ldr	r0, [sp, #20]
 80073da:	6859      	ldr	r1, [r3, #4]
 80073dc:	f001 fdde 	bl	8008f9c <_Balloc>
 80073e0:	9009      	str	r0, [sp, #36]	; 0x24
 80073e2:	2800      	cmp	r0, #0
 80073e4:	d100      	bne.n	80073e8 <_strtod_l+0x6b8>
 80073e6:	e70d      	b.n	8007204 <_strtod_l+0x4d4>
 80073e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80073ea:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80073ec:	691b      	ldr	r3, [r3, #16]
 80073ee:	310c      	adds	r1, #12
 80073f0:	1c9a      	adds	r2, r3, #2
 80073f2:	0092      	lsls	r2, r2, #2
 80073f4:	300c      	adds	r0, #12
 80073f6:	930c      	str	r3, [sp, #48]	; 0x30
 80073f8:	f001 fdc7 	bl	8008f8a <memcpy>
 80073fc:	ab22      	add	r3, sp, #136	; 0x88
 80073fe:	9301      	str	r3, [sp, #4]
 8007400:	ab21      	add	r3, sp, #132	; 0x84
 8007402:	9300      	str	r3, [sp, #0]
 8007404:	0032      	movs	r2, r6
 8007406:	003b      	movs	r3, r7
 8007408:	9805      	ldr	r0, [sp, #20]
 800740a:	9612      	str	r6, [sp, #72]	; 0x48
 800740c:	9713      	str	r7, [sp, #76]	; 0x4c
 800740e:	f002 f9bd 	bl	800978c <__d2b>
 8007412:	9020      	str	r0, [sp, #128]	; 0x80
 8007414:	2800      	cmp	r0, #0
 8007416:	d100      	bne.n	800741a <_strtod_l+0x6ea>
 8007418:	e6f4      	b.n	8007204 <_strtod_l+0x4d4>
 800741a:	2101      	movs	r1, #1
 800741c:	9805      	ldr	r0, [sp, #20]
 800741e:	f001 fefd 	bl	800921c <__i2b>
 8007422:	9007      	str	r0, [sp, #28]
 8007424:	2800      	cmp	r0, #0
 8007426:	d100      	bne.n	800742a <_strtod_l+0x6fa>
 8007428:	e6ec      	b.n	8007204 <_strtod_l+0x4d4>
 800742a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800742c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800742e:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8007430:	1ad4      	subs	r4, r2, r3
 8007432:	2b00      	cmp	r3, #0
 8007434:	db01      	blt.n	800743a <_strtod_l+0x70a>
 8007436:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 8007438:	195d      	adds	r5, r3, r5
 800743a:	9908      	ldr	r1, [sp, #32]
 800743c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800743e:	1a5b      	subs	r3, r3, r1
 8007440:	2136      	movs	r1, #54	; 0x36
 8007442:	189b      	adds	r3, r3, r2
 8007444:	1a8a      	subs	r2, r1, r2
 8007446:	4986      	ldr	r1, [pc, #536]	; (8007660 <_strtod_l+0x930>)
 8007448:	2001      	movs	r0, #1
 800744a:	468c      	mov	ip, r1
 800744c:	2100      	movs	r1, #0
 800744e:	3b01      	subs	r3, #1
 8007450:	9110      	str	r1, [sp, #64]	; 0x40
 8007452:	9014      	str	r0, [sp, #80]	; 0x50
 8007454:	4563      	cmp	r3, ip
 8007456:	da07      	bge.n	8007468 <_strtod_l+0x738>
 8007458:	4661      	mov	r1, ip
 800745a:	1ac9      	subs	r1, r1, r3
 800745c:	1a52      	subs	r2, r2, r1
 800745e:	291f      	cmp	r1, #31
 8007460:	dd00      	ble.n	8007464 <_strtod_l+0x734>
 8007462:	e0b8      	b.n	80075d6 <_strtod_l+0x8a6>
 8007464:	4088      	lsls	r0, r1
 8007466:	9014      	str	r0, [sp, #80]	; 0x50
 8007468:	18ab      	adds	r3, r5, r2
 800746a:	930c      	str	r3, [sp, #48]	; 0x30
 800746c:	18a4      	adds	r4, r4, r2
 800746e:	9b08      	ldr	r3, [sp, #32]
 8007470:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007472:	191c      	adds	r4, r3, r4
 8007474:	002b      	movs	r3, r5
 8007476:	4295      	cmp	r5, r2
 8007478:	dd00      	ble.n	800747c <_strtod_l+0x74c>
 800747a:	0013      	movs	r3, r2
 800747c:	42a3      	cmp	r3, r4
 800747e:	dd00      	ble.n	8007482 <_strtod_l+0x752>
 8007480:	0023      	movs	r3, r4
 8007482:	2b00      	cmp	r3, #0
 8007484:	dd04      	ble.n	8007490 <_strtod_l+0x760>
 8007486:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007488:	1ae4      	subs	r4, r4, r3
 800748a:	1ad2      	subs	r2, r2, r3
 800748c:	920c      	str	r2, [sp, #48]	; 0x30
 800748e:	1aed      	subs	r5, r5, r3
 8007490:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007492:	2b00      	cmp	r3, #0
 8007494:	dd17      	ble.n	80074c6 <_strtod_l+0x796>
 8007496:	001a      	movs	r2, r3
 8007498:	9907      	ldr	r1, [sp, #28]
 800749a:	9805      	ldr	r0, [sp, #20]
 800749c:	f001 ff84 	bl	80093a8 <__pow5mult>
 80074a0:	9007      	str	r0, [sp, #28]
 80074a2:	2800      	cmp	r0, #0
 80074a4:	d100      	bne.n	80074a8 <_strtod_l+0x778>
 80074a6:	e6ad      	b.n	8007204 <_strtod_l+0x4d4>
 80074a8:	0001      	movs	r1, r0
 80074aa:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80074ac:	9805      	ldr	r0, [sp, #20]
 80074ae:	f001 fecb 	bl	8009248 <__multiply>
 80074b2:	900f      	str	r0, [sp, #60]	; 0x3c
 80074b4:	2800      	cmp	r0, #0
 80074b6:	d100      	bne.n	80074ba <_strtod_l+0x78a>
 80074b8:	e6a4      	b.n	8007204 <_strtod_l+0x4d4>
 80074ba:	9920      	ldr	r1, [sp, #128]	; 0x80
 80074bc:	9805      	ldr	r0, [sp, #20]
 80074be:	f001 fdb1 	bl	8009024 <_Bfree>
 80074c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80074c4:	9320      	str	r3, [sp, #128]	; 0x80
 80074c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	dd00      	ble.n	80074ce <_strtod_l+0x79e>
 80074cc:	e089      	b.n	80075e2 <_strtod_l+0x8b2>
 80074ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	dd08      	ble.n	80074e6 <_strtod_l+0x7b6>
 80074d4:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80074d6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80074d8:	9805      	ldr	r0, [sp, #20]
 80074da:	f001 ff65 	bl	80093a8 <__pow5mult>
 80074de:	9009      	str	r0, [sp, #36]	; 0x24
 80074e0:	2800      	cmp	r0, #0
 80074e2:	d100      	bne.n	80074e6 <_strtod_l+0x7b6>
 80074e4:	e68e      	b.n	8007204 <_strtod_l+0x4d4>
 80074e6:	2c00      	cmp	r4, #0
 80074e8:	dd08      	ble.n	80074fc <_strtod_l+0x7cc>
 80074ea:	0022      	movs	r2, r4
 80074ec:	9909      	ldr	r1, [sp, #36]	; 0x24
 80074ee:	9805      	ldr	r0, [sp, #20]
 80074f0:	f001 ffb6 	bl	8009460 <__lshift>
 80074f4:	9009      	str	r0, [sp, #36]	; 0x24
 80074f6:	2800      	cmp	r0, #0
 80074f8:	d100      	bne.n	80074fc <_strtod_l+0x7cc>
 80074fa:	e683      	b.n	8007204 <_strtod_l+0x4d4>
 80074fc:	2d00      	cmp	r5, #0
 80074fe:	dd08      	ble.n	8007512 <_strtod_l+0x7e2>
 8007500:	002a      	movs	r2, r5
 8007502:	9907      	ldr	r1, [sp, #28]
 8007504:	9805      	ldr	r0, [sp, #20]
 8007506:	f001 ffab 	bl	8009460 <__lshift>
 800750a:	9007      	str	r0, [sp, #28]
 800750c:	2800      	cmp	r0, #0
 800750e:	d100      	bne.n	8007512 <_strtod_l+0x7e2>
 8007510:	e678      	b.n	8007204 <_strtod_l+0x4d4>
 8007512:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007514:	9920      	ldr	r1, [sp, #128]	; 0x80
 8007516:	9805      	ldr	r0, [sp, #20]
 8007518:	f002 f82c 	bl	8009574 <__mdiff>
 800751c:	9006      	str	r0, [sp, #24]
 800751e:	2800      	cmp	r0, #0
 8007520:	d100      	bne.n	8007524 <_strtod_l+0x7f4>
 8007522:	e66f      	b.n	8007204 <_strtod_l+0x4d4>
 8007524:	2200      	movs	r2, #0
 8007526:	68c3      	ldr	r3, [r0, #12]
 8007528:	9907      	ldr	r1, [sp, #28]
 800752a:	60c2      	str	r2, [r0, #12]
 800752c:	930f      	str	r3, [sp, #60]	; 0x3c
 800752e:	f002 f805 	bl	800953c <__mcmp>
 8007532:	2800      	cmp	r0, #0
 8007534:	da5f      	bge.n	80075f6 <_strtod_l+0x8c6>
 8007536:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007538:	4333      	orrs	r3, r6
 800753a:	d000      	beq.n	800753e <_strtod_l+0x80e>
 800753c:	e08a      	b.n	8007654 <_strtod_l+0x924>
 800753e:	033b      	lsls	r3, r7, #12
 8007540:	d000      	beq.n	8007544 <_strtod_l+0x814>
 8007542:	e087      	b.n	8007654 <_strtod_l+0x924>
 8007544:	22d6      	movs	r2, #214	; 0xd6
 8007546:	4b47      	ldr	r3, [pc, #284]	; (8007664 <_strtod_l+0x934>)
 8007548:	04d2      	lsls	r2, r2, #19
 800754a:	403b      	ands	r3, r7
 800754c:	4293      	cmp	r3, r2
 800754e:	d800      	bhi.n	8007552 <_strtod_l+0x822>
 8007550:	e080      	b.n	8007654 <_strtod_l+0x924>
 8007552:	9b06      	ldr	r3, [sp, #24]
 8007554:	695b      	ldr	r3, [r3, #20]
 8007556:	930a      	str	r3, [sp, #40]	; 0x28
 8007558:	2b00      	cmp	r3, #0
 800755a:	d104      	bne.n	8007566 <_strtod_l+0x836>
 800755c:	9b06      	ldr	r3, [sp, #24]
 800755e:	691b      	ldr	r3, [r3, #16]
 8007560:	930a      	str	r3, [sp, #40]	; 0x28
 8007562:	2b01      	cmp	r3, #1
 8007564:	dd76      	ble.n	8007654 <_strtod_l+0x924>
 8007566:	9906      	ldr	r1, [sp, #24]
 8007568:	2201      	movs	r2, #1
 800756a:	9805      	ldr	r0, [sp, #20]
 800756c:	f001 ff78 	bl	8009460 <__lshift>
 8007570:	9907      	ldr	r1, [sp, #28]
 8007572:	9006      	str	r0, [sp, #24]
 8007574:	f001 ffe2 	bl	800953c <__mcmp>
 8007578:	2800      	cmp	r0, #0
 800757a:	dd6b      	ble.n	8007654 <_strtod_l+0x924>
 800757c:	9908      	ldr	r1, [sp, #32]
 800757e:	003b      	movs	r3, r7
 8007580:	4a38      	ldr	r2, [pc, #224]	; (8007664 <_strtod_l+0x934>)
 8007582:	2900      	cmp	r1, #0
 8007584:	d100      	bne.n	8007588 <_strtod_l+0x858>
 8007586:	e092      	b.n	80076ae <_strtod_l+0x97e>
 8007588:	0011      	movs	r1, r2
 800758a:	20d6      	movs	r0, #214	; 0xd6
 800758c:	4039      	ands	r1, r7
 800758e:	04c0      	lsls	r0, r0, #19
 8007590:	4281      	cmp	r1, r0
 8007592:	dd00      	ble.n	8007596 <_strtod_l+0x866>
 8007594:	e08b      	b.n	80076ae <_strtod_l+0x97e>
 8007596:	23dc      	movs	r3, #220	; 0xdc
 8007598:	049b      	lsls	r3, r3, #18
 800759a:	4299      	cmp	r1, r3
 800759c:	dc00      	bgt.n	80075a0 <_strtod_l+0x870>
 800759e:	e6a4      	b.n	80072ea <_strtod_l+0x5ba>
 80075a0:	0030      	movs	r0, r6
 80075a2:	0039      	movs	r1, r7
 80075a4:	2200      	movs	r2, #0
 80075a6:	4b30      	ldr	r3, [pc, #192]	; (8007668 <_strtod_l+0x938>)
 80075a8:	f7fa fc04 	bl	8001db4 <__aeabi_dmul>
 80075ac:	0006      	movs	r6, r0
 80075ae:	000f      	movs	r7, r1
 80075b0:	4308      	orrs	r0, r1
 80075b2:	d000      	beq.n	80075b6 <_strtod_l+0x886>
 80075b4:	e62f      	b.n	8007216 <_strtod_l+0x4e6>
 80075b6:	2322      	movs	r3, #34	; 0x22
 80075b8:	9a05      	ldr	r2, [sp, #20]
 80075ba:	6013      	str	r3, [r2, #0]
 80075bc:	e62b      	b.n	8007216 <_strtod_l+0x4e6>
 80075be:	234b      	movs	r3, #75	; 0x4b
 80075c0:	1a9a      	subs	r2, r3, r2
 80075c2:	3b4c      	subs	r3, #76	; 0x4c
 80075c4:	4093      	lsls	r3, r2
 80075c6:	4019      	ands	r1, r3
 80075c8:	000f      	movs	r7, r1
 80075ca:	e6e0      	b.n	800738e <_strtod_l+0x65e>
 80075cc:	2201      	movs	r2, #1
 80075ce:	4252      	negs	r2, r2
 80075d0:	409a      	lsls	r2, r3
 80075d2:	4016      	ands	r6, r2
 80075d4:	e6db      	b.n	800738e <_strtod_l+0x65e>
 80075d6:	4925      	ldr	r1, [pc, #148]	; (800766c <_strtod_l+0x93c>)
 80075d8:	1acb      	subs	r3, r1, r3
 80075da:	0001      	movs	r1, r0
 80075dc:	4099      	lsls	r1, r3
 80075de:	9110      	str	r1, [sp, #64]	; 0x40
 80075e0:	e741      	b.n	8007466 <_strtod_l+0x736>
 80075e2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80075e4:	9920      	ldr	r1, [sp, #128]	; 0x80
 80075e6:	9805      	ldr	r0, [sp, #20]
 80075e8:	f001 ff3a 	bl	8009460 <__lshift>
 80075ec:	9020      	str	r0, [sp, #128]	; 0x80
 80075ee:	2800      	cmp	r0, #0
 80075f0:	d000      	beq.n	80075f4 <_strtod_l+0x8c4>
 80075f2:	e76c      	b.n	80074ce <_strtod_l+0x79e>
 80075f4:	e606      	b.n	8007204 <_strtod_l+0x4d4>
 80075f6:	970c      	str	r7, [sp, #48]	; 0x30
 80075f8:	2800      	cmp	r0, #0
 80075fa:	d176      	bne.n	80076ea <_strtod_l+0x9ba>
 80075fc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80075fe:	033b      	lsls	r3, r7, #12
 8007600:	0b1b      	lsrs	r3, r3, #12
 8007602:	2a00      	cmp	r2, #0
 8007604:	d038      	beq.n	8007678 <_strtod_l+0x948>
 8007606:	4a1a      	ldr	r2, [pc, #104]	; (8007670 <_strtod_l+0x940>)
 8007608:	4293      	cmp	r3, r2
 800760a:	d138      	bne.n	800767e <_strtod_l+0x94e>
 800760c:	2201      	movs	r2, #1
 800760e:	9b08      	ldr	r3, [sp, #32]
 8007610:	4252      	negs	r2, r2
 8007612:	0031      	movs	r1, r6
 8007614:	0010      	movs	r0, r2
 8007616:	2b00      	cmp	r3, #0
 8007618:	d00b      	beq.n	8007632 <_strtod_l+0x902>
 800761a:	24d4      	movs	r4, #212	; 0xd4
 800761c:	4b11      	ldr	r3, [pc, #68]	; (8007664 <_strtod_l+0x934>)
 800761e:	0010      	movs	r0, r2
 8007620:	403b      	ands	r3, r7
 8007622:	04e4      	lsls	r4, r4, #19
 8007624:	42a3      	cmp	r3, r4
 8007626:	d804      	bhi.n	8007632 <_strtod_l+0x902>
 8007628:	306c      	adds	r0, #108	; 0x6c
 800762a:	0d1b      	lsrs	r3, r3, #20
 800762c:	1ac3      	subs	r3, r0, r3
 800762e:	409a      	lsls	r2, r3
 8007630:	0010      	movs	r0, r2
 8007632:	4281      	cmp	r1, r0
 8007634:	d123      	bne.n	800767e <_strtod_l+0x94e>
 8007636:	4b0f      	ldr	r3, [pc, #60]	; (8007674 <_strtod_l+0x944>)
 8007638:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800763a:	429a      	cmp	r2, r3
 800763c:	d102      	bne.n	8007644 <_strtod_l+0x914>
 800763e:	1c4b      	adds	r3, r1, #1
 8007640:	d100      	bne.n	8007644 <_strtod_l+0x914>
 8007642:	e5df      	b.n	8007204 <_strtod_l+0x4d4>
 8007644:	4b07      	ldr	r3, [pc, #28]	; (8007664 <_strtod_l+0x934>)
 8007646:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007648:	2600      	movs	r6, #0
 800764a:	401a      	ands	r2, r3
 800764c:	0013      	movs	r3, r2
 800764e:	2280      	movs	r2, #128	; 0x80
 8007650:	0352      	lsls	r2, r2, #13
 8007652:	189f      	adds	r7, r3, r2
 8007654:	9b08      	ldr	r3, [sp, #32]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d1a2      	bne.n	80075a0 <_strtod_l+0x870>
 800765a:	e5dc      	b.n	8007216 <_strtod_l+0x4e6>
 800765c:	0800b448 	.word	0x0800b448
 8007660:	fffffc02 	.word	0xfffffc02
 8007664:	7ff00000 	.word	0x7ff00000
 8007668:	39500000 	.word	0x39500000
 800766c:	fffffbe2 	.word	0xfffffbe2
 8007670:	000fffff 	.word	0x000fffff
 8007674:	7fefffff 	.word	0x7fefffff
 8007678:	4333      	orrs	r3, r6
 800767a:	d100      	bne.n	800767e <_strtod_l+0x94e>
 800767c:	e77e      	b.n	800757c <_strtod_l+0x84c>
 800767e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007680:	2b00      	cmp	r3, #0
 8007682:	d01d      	beq.n	80076c0 <_strtod_l+0x990>
 8007684:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007686:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007688:	4213      	tst	r3, r2
 800768a:	d0e3      	beq.n	8007654 <_strtod_l+0x924>
 800768c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800768e:	0030      	movs	r0, r6
 8007690:	0039      	movs	r1, r7
 8007692:	9a08      	ldr	r2, [sp, #32]
 8007694:	2b00      	cmp	r3, #0
 8007696:	d017      	beq.n	80076c8 <_strtod_l+0x998>
 8007698:	f7ff fb32 	bl	8006d00 <sulp>
 800769c:	0002      	movs	r2, r0
 800769e:	000b      	movs	r3, r1
 80076a0:	9812      	ldr	r0, [sp, #72]	; 0x48
 80076a2:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80076a4:	f7f9 fc48 	bl	8000f38 <__aeabi_dadd>
 80076a8:	0006      	movs	r6, r0
 80076aa:	000f      	movs	r7, r1
 80076ac:	e7d2      	b.n	8007654 <_strtod_l+0x924>
 80076ae:	2601      	movs	r6, #1
 80076b0:	4013      	ands	r3, r2
 80076b2:	4a99      	ldr	r2, [pc, #612]	; (8007918 <_strtod_l+0xbe8>)
 80076b4:	4276      	negs	r6, r6
 80076b6:	189b      	adds	r3, r3, r2
 80076b8:	4a98      	ldr	r2, [pc, #608]	; (800791c <_strtod_l+0xbec>)
 80076ba:	431a      	orrs	r2, r3
 80076bc:	0017      	movs	r7, r2
 80076be:	e7c9      	b.n	8007654 <_strtod_l+0x924>
 80076c0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80076c2:	4233      	tst	r3, r6
 80076c4:	d0c6      	beq.n	8007654 <_strtod_l+0x924>
 80076c6:	e7e1      	b.n	800768c <_strtod_l+0x95c>
 80076c8:	f7ff fb1a 	bl	8006d00 <sulp>
 80076cc:	0002      	movs	r2, r0
 80076ce:	000b      	movs	r3, r1
 80076d0:	9812      	ldr	r0, [sp, #72]	; 0x48
 80076d2:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80076d4:	f7fa fdda 	bl	800228c <__aeabi_dsub>
 80076d8:	2200      	movs	r2, #0
 80076da:	2300      	movs	r3, #0
 80076dc:	0006      	movs	r6, r0
 80076de:	000f      	movs	r7, r1
 80076e0:	f7f8 feba 	bl	8000458 <__aeabi_dcmpeq>
 80076e4:	2800      	cmp	r0, #0
 80076e6:	d0b5      	beq.n	8007654 <_strtod_l+0x924>
 80076e8:	e5ff      	b.n	80072ea <_strtod_l+0x5ba>
 80076ea:	9907      	ldr	r1, [sp, #28]
 80076ec:	9806      	ldr	r0, [sp, #24]
 80076ee:	f002 f8b1 	bl	8009854 <__ratio>
 80076f2:	2380      	movs	r3, #128	; 0x80
 80076f4:	2200      	movs	r2, #0
 80076f6:	05db      	lsls	r3, r3, #23
 80076f8:	0004      	movs	r4, r0
 80076fa:	000d      	movs	r5, r1
 80076fc:	f7f8 febc 	bl	8000478 <__aeabi_dcmple>
 8007700:	2800      	cmp	r0, #0
 8007702:	d075      	beq.n	80077f0 <_strtod_l+0xac0>
 8007704:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007706:	2b00      	cmp	r3, #0
 8007708:	d047      	beq.n	800779a <_strtod_l+0xa6a>
 800770a:	2300      	movs	r3, #0
 800770c:	4c84      	ldr	r4, [pc, #528]	; (8007920 <_strtod_l+0xbf0>)
 800770e:	2500      	movs	r5, #0
 8007710:	9310      	str	r3, [sp, #64]	; 0x40
 8007712:	9411      	str	r4, [sp, #68]	; 0x44
 8007714:	4c82      	ldr	r4, [pc, #520]	; (8007920 <_strtod_l+0xbf0>)
 8007716:	4a83      	ldr	r2, [pc, #524]	; (8007924 <_strtod_l+0xbf4>)
 8007718:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800771a:	4013      	ands	r3, r2
 800771c:	9314      	str	r3, [sp, #80]	; 0x50
 800771e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007720:	4b81      	ldr	r3, [pc, #516]	; (8007928 <_strtod_l+0xbf8>)
 8007722:	429a      	cmp	r2, r3
 8007724:	d000      	beq.n	8007728 <_strtod_l+0x9f8>
 8007726:	e0ac      	b.n	8007882 <_strtod_l+0xb52>
 8007728:	4a80      	ldr	r2, [pc, #512]	; (800792c <_strtod_l+0xbfc>)
 800772a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800772c:	4694      	mov	ip, r2
 800772e:	4463      	add	r3, ip
 8007730:	001f      	movs	r7, r3
 8007732:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007734:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007736:	0030      	movs	r0, r6
 8007738:	0039      	movs	r1, r7
 800773a:	920c      	str	r2, [sp, #48]	; 0x30
 800773c:	930d      	str	r3, [sp, #52]	; 0x34
 800773e:	f001 ffb1 	bl	80096a4 <__ulp>
 8007742:	0002      	movs	r2, r0
 8007744:	000b      	movs	r3, r1
 8007746:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007748:	990d      	ldr	r1, [sp, #52]	; 0x34
 800774a:	f7fa fb33 	bl	8001db4 <__aeabi_dmul>
 800774e:	0032      	movs	r2, r6
 8007750:	003b      	movs	r3, r7
 8007752:	f7f9 fbf1 	bl	8000f38 <__aeabi_dadd>
 8007756:	4a73      	ldr	r2, [pc, #460]	; (8007924 <_strtod_l+0xbf4>)
 8007758:	4b75      	ldr	r3, [pc, #468]	; (8007930 <_strtod_l+0xc00>)
 800775a:	0006      	movs	r6, r0
 800775c:	400a      	ands	r2, r1
 800775e:	429a      	cmp	r2, r3
 8007760:	d95e      	bls.n	8007820 <_strtod_l+0xaf0>
 8007762:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007764:	4b73      	ldr	r3, [pc, #460]	; (8007934 <_strtod_l+0xc04>)
 8007766:	429a      	cmp	r2, r3
 8007768:	d103      	bne.n	8007772 <_strtod_l+0xa42>
 800776a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800776c:	3301      	adds	r3, #1
 800776e:	d100      	bne.n	8007772 <_strtod_l+0xa42>
 8007770:	e548      	b.n	8007204 <_strtod_l+0x4d4>
 8007772:	2601      	movs	r6, #1
 8007774:	4f6f      	ldr	r7, [pc, #444]	; (8007934 <_strtod_l+0xc04>)
 8007776:	4276      	negs	r6, r6
 8007778:	9920      	ldr	r1, [sp, #128]	; 0x80
 800777a:	9805      	ldr	r0, [sp, #20]
 800777c:	f001 fc52 	bl	8009024 <_Bfree>
 8007780:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007782:	9805      	ldr	r0, [sp, #20]
 8007784:	f001 fc4e 	bl	8009024 <_Bfree>
 8007788:	9907      	ldr	r1, [sp, #28]
 800778a:	9805      	ldr	r0, [sp, #20]
 800778c:	f001 fc4a 	bl	8009024 <_Bfree>
 8007790:	9906      	ldr	r1, [sp, #24]
 8007792:	9805      	ldr	r0, [sp, #20]
 8007794:	f001 fc46 	bl	8009024 <_Bfree>
 8007798:	e61d      	b.n	80073d6 <_strtod_l+0x6a6>
 800779a:	2e00      	cmp	r6, #0
 800779c:	d11c      	bne.n	80077d8 <_strtod_l+0xaa8>
 800779e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80077a0:	031b      	lsls	r3, r3, #12
 80077a2:	d11f      	bne.n	80077e4 <_strtod_l+0xab4>
 80077a4:	2200      	movs	r2, #0
 80077a6:	0020      	movs	r0, r4
 80077a8:	0029      	movs	r1, r5
 80077aa:	4b5d      	ldr	r3, [pc, #372]	; (8007920 <_strtod_l+0xbf0>)
 80077ac:	f7f8 fe5a 	bl	8000464 <__aeabi_dcmplt>
 80077b0:	2800      	cmp	r0, #0
 80077b2:	d11a      	bne.n	80077ea <_strtod_l+0xaba>
 80077b4:	0020      	movs	r0, r4
 80077b6:	0029      	movs	r1, r5
 80077b8:	2200      	movs	r2, #0
 80077ba:	4b5f      	ldr	r3, [pc, #380]	; (8007938 <_strtod_l+0xc08>)
 80077bc:	f7fa fafa 	bl	8001db4 <__aeabi_dmul>
 80077c0:	0005      	movs	r5, r0
 80077c2:	000c      	movs	r4, r1
 80077c4:	2380      	movs	r3, #128	; 0x80
 80077c6:	061b      	lsls	r3, r3, #24
 80077c8:	18e3      	adds	r3, r4, r3
 80077ca:	951c      	str	r5, [sp, #112]	; 0x70
 80077cc:	931d      	str	r3, [sp, #116]	; 0x74
 80077ce:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80077d0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80077d2:	9210      	str	r2, [sp, #64]	; 0x40
 80077d4:	9311      	str	r3, [sp, #68]	; 0x44
 80077d6:	e79e      	b.n	8007716 <_strtod_l+0x9e6>
 80077d8:	2e01      	cmp	r6, #1
 80077da:	d103      	bne.n	80077e4 <_strtod_l+0xab4>
 80077dc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d100      	bne.n	80077e4 <_strtod_l+0xab4>
 80077e2:	e582      	b.n	80072ea <_strtod_l+0x5ba>
 80077e4:	2300      	movs	r3, #0
 80077e6:	4c55      	ldr	r4, [pc, #340]	; (800793c <_strtod_l+0xc0c>)
 80077e8:	e791      	b.n	800770e <_strtod_l+0x9de>
 80077ea:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80077ec:	4c52      	ldr	r4, [pc, #328]	; (8007938 <_strtod_l+0xc08>)
 80077ee:	e7e9      	b.n	80077c4 <_strtod_l+0xa94>
 80077f0:	2200      	movs	r2, #0
 80077f2:	0020      	movs	r0, r4
 80077f4:	0029      	movs	r1, r5
 80077f6:	4b50      	ldr	r3, [pc, #320]	; (8007938 <_strtod_l+0xc08>)
 80077f8:	f7fa fadc 	bl	8001db4 <__aeabi_dmul>
 80077fc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80077fe:	0005      	movs	r5, r0
 8007800:	000b      	movs	r3, r1
 8007802:	000c      	movs	r4, r1
 8007804:	2a00      	cmp	r2, #0
 8007806:	d107      	bne.n	8007818 <_strtod_l+0xae8>
 8007808:	2280      	movs	r2, #128	; 0x80
 800780a:	0612      	lsls	r2, r2, #24
 800780c:	188b      	adds	r3, r1, r2
 800780e:	9016      	str	r0, [sp, #88]	; 0x58
 8007810:	9317      	str	r3, [sp, #92]	; 0x5c
 8007812:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007814:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007816:	e7dc      	b.n	80077d2 <_strtod_l+0xaa2>
 8007818:	0002      	movs	r2, r0
 800781a:	9216      	str	r2, [sp, #88]	; 0x58
 800781c:	9317      	str	r3, [sp, #92]	; 0x5c
 800781e:	e7f8      	b.n	8007812 <_strtod_l+0xae2>
 8007820:	23d4      	movs	r3, #212	; 0xd4
 8007822:	049b      	lsls	r3, r3, #18
 8007824:	18cf      	adds	r7, r1, r3
 8007826:	9b08      	ldr	r3, [sp, #32]
 8007828:	2b00      	cmp	r3, #0
 800782a:	d1a5      	bne.n	8007778 <_strtod_l+0xa48>
 800782c:	4b3d      	ldr	r3, [pc, #244]	; (8007924 <_strtod_l+0xbf4>)
 800782e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007830:	403b      	ands	r3, r7
 8007832:	429a      	cmp	r2, r3
 8007834:	d1a0      	bne.n	8007778 <_strtod_l+0xa48>
 8007836:	0028      	movs	r0, r5
 8007838:	0021      	movs	r1, r4
 800783a:	f7f8 fe59 	bl	80004f0 <__aeabi_d2lz>
 800783e:	f7f8 fe93 	bl	8000568 <__aeabi_l2d>
 8007842:	0002      	movs	r2, r0
 8007844:	000b      	movs	r3, r1
 8007846:	0028      	movs	r0, r5
 8007848:	0021      	movs	r1, r4
 800784a:	f7fa fd1f 	bl	800228c <__aeabi_dsub>
 800784e:	033b      	lsls	r3, r7, #12
 8007850:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007852:	0b1b      	lsrs	r3, r3, #12
 8007854:	4333      	orrs	r3, r6
 8007856:	4313      	orrs	r3, r2
 8007858:	0004      	movs	r4, r0
 800785a:	000d      	movs	r5, r1
 800785c:	4a38      	ldr	r2, [pc, #224]	; (8007940 <_strtod_l+0xc10>)
 800785e:	2b00      	cmp	r3, #0
 8007860:	d055      	beq.n	800790e <_strtod_l+0xbde>
 8007862:	4b38      	ldr	r3, [pc, #224]	; (8007944 <_strtod_l+0xc14>)
 8007864:	f7f8 fdfe 	bl	8000464 <__aeabi_dcmplt>
 8007868:	2800      	cmp	r0, #0
 800786a:	d000      	beq.n	800786e <_strtod_l+0xb3e>
 800786c:	e4d3      	b.n	8007216 <_strtod_l+0x4e6>
 800786e:	0020      	movs	r0, r4
 8007870:	0029      	movs	r1, r5
 8007872:	4a35      	ldr	r2, [pc, #212]	; (8007948 <_strtod_l+0xc18>)
 8007874:	4b30      	ldr	r3, [pc, #192]	; (8007938 <_strtod_l+0xc08>)
 8007876:	f7f8 fe09 	bl	800048c <__aeabi_dcmpgt>
 800787a:	2800      	cmp	r0, #0
 800787c:	d100      	bne.n	8007880 <_strtod_l+0xb50>
 800787e:	e77b      	b.n	8007778 <_strtod_l+0xa48>
 8007880:	e4c9      	b.n	8007216 <_strtod_l+0x4e6>
 8007882:	9b08      	ldr	r3, [sp, #32]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d02b      	beq.n	80078e0 <_strtod_l+0xbb0>
 8007888:	23d4      	movs	r3, #212	; 0xd4
 800788a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800788c:	04db      	lsls	r3, r3, #19
 800788e:	429a      	cmp	r2, r3
 8007890:	d826      	bhi.n	80078e0 <_strtod_l+0xbb0>
 8007892:	0028      	movs	r0, r5
 8007894:	0021      	movs	r1, r4
 8007896:	4a2d      	ldr	r2, [pc, #180]	; (800794c <_strtod_l+0xc1c>)
 8007898:	4b2d      	ldr	r3, [pc, #180]	; (8007950 <_strtod_l+0xc20>)
 800789a:	f7f8 fded 	bl	8000478 <__aeabi_dcmple>
 800789e:	2800      	cmp	r0, #0
 80078a0:	d017      	beq.n	80078d2 <_strtod_l+0xba2>
 80078a2:	0028      	movs	r0, r5
 80078a4:	0021      	movs	r1, r4
 80078a6:	f7f8 fe05 	bl	80004b4 <__aeabi_d2uiz>
 80078aa:	2800      	cmp	r0, #0
 80078ac:	d100      	bne.n	80078b0 <_strtod_l+0xb80>
 80078ae:	3001      	adds	r0, #1
 80078b0:	f7fb f902 	bl	8002ab8 <__aeabi_ui2d>
 80078b4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80078b6:	0005      	movs	r5, r0
 80078b8:	000b      	movs	r3, r1
 80078ba:	000c      	movs	r4, r1
 80078bc:	2a00      	cmp	r2, #0
 80078be:	d122      	bne.n	8007906 <_strtod_l+0xbd6>
 80078c0:	2280      	movs	r2, #128	; 0x80
 80078c2:	0612      	lsls	r2, r2, #24
 80078c4:	188b      	adds	r3, r1, r2
 80078c6:	9018      	str	r0, [sp, #96]	; 0x60
 80078c8:	9319      	str	r3, [sp, #100]	; 0x64
 80078ca:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80078cc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80078ce:	9210      	str	r2, [sp, #64]	; 0x40
 80078d0:	9311      	str	r3, [sp, #68]	; 0x44
 80078d2:	22d6      	movs	r2, #214	; 0xd6
 80078d4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80078d6:	04d2      	lsls	r2, r2, #19
 80078d8:	189b      	adds	r3, r3, r2
 80078da:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80078dc:	1a9b      	subs	r3, r3, r2
 80078de:	9311      	str	r3, [sp, #68]	; 0x44
 80078e0:	9812      	ldr	r0, [sp, #72]	; 0x48
 80078e2:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80078e4:	9e10      	ldr	r6, [sp, #64]	; 0x40
 80078e6:	9f11      	ldr	r7, [sp, #68]	; 0x44
 80078e8:	f001 fedc 	bl	80096a4 <__ulp>
 80078ec:	0002      	movs	r2, r0
 80078ee:	000b      	movs	r3, r1
 80078f0:	0030      	movs	r0, r6
 80078f2:	0039      	movs	r1, r7
 80078f4:	f7fa fa5e 	bl	8001db4 <__aeabi_dmul>
 80078f8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80078fa:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80078fc:	f7f9 fb1c 	bl	8000f38 <__aeabi_dadd>
 8007900:	0006      	movs	r6, r0
 8007902:	000f      	movs	r7, r1
 8007904:	e78f      	b.n	8007826 <_strtod_l+0xaf6>
 8007906:	0002      	movs	r2, r0
 8007908:	9218      	str	r2, [sp, #96]	; 0x60
 800790a:	9319      	str	r3, [sp, #100]	; 0x64
 800790c:	e7dd      	b.n	80078ca <_strtod_l+0xb9a>
 800790e:	4b11      	ldr	r3, [pc, #68]	; (8007954 <_strtod_l+0xc24>)
 8007910:	f7f8 fda8 	bl	8000464 <__aeabi_dcmplt>
 8007914:	e7b1      	b.n	800787a <_strtod_l+0xb4a>
 8007916:	46c0      	nop			; (mov r8, r8)
 8007918:	fff00000 	.word	0xfff00000
 800791c:	000fffff 	.word	0x000fffff
 8007920:	3ff00000 	.word	0x3ff00000
 8007924:	7ff00000 	.word	0x7ff00000
 8007928:	7fe00000 	.word	0x7fe00000
 800792c:	fcb00000 	.word	0xfcb00000
 8007930:	7c9fffff 	.word	0x7c9fffff
 8007934:	7fefffff 	.word	0x7fefffff
 8007938:	3fe00000 	.word	0x3fe00000
 800793c:	bff00000 	.word	0xbff00000
 8007940:	94a03595 	.word	0x94a03595
 8007944:	3fdfffff 	.word	0x3fdfffff
 8007948:	35afe535 	.word	0x35afe535
 800794c:	ffc00000 	.word	0xffc00000
 8007950:	41dfffff 	.word	0x41dfffff
 8007954:	3fcfffff 	.word	0x3fcfffff

08007958 <_strtod_r>:
 8007958:	b510      	push	{r4, lr}
 800795a:	4b02      	ldr	r3, [pc, #8]	; (8007964 <_strtod_r+0xc>)
 800795c:	f7ff f9e8 	bl	8006d30 <_strtod_l>
 8007960:	bd10      	pop	{r4, pc}
 8007962:	46c0      	nop			; (mov r8, r8)
 8007964:	200000a8 	.word	0x200000a8

08007968 <_strtol_l.constprop.0>:
 8007968:	b5f0      	push	{r4, r5, r6, r7, lr}
 800796a:	b087      	sub	sp, #28
 800796c:	001e      	movs	r6, r3
 800796e:	9005      	str	r0, [sp, #20]
 8007970:	9101      	str	r1, [sp, #4]
 8007972:	9202      	str	r2, [sp, #8]
 8007974:	2b01      	cmp	r3, #1
 8007976:	d045      	beq.n	8007a04 <_strtol_l.constprop.0+0x9c>
 8007978:	000b      	movs	r3, r1
 800797a:	2e24      	cmp	r6, #36	; 0x24
 800797c:	d842      	bhi.n	8007a04 <_strtol_l.constprop.0+0x9c>
 800797e:	4a3f      	ldr	r2, [pc, #252]	; (8007a7c <_strtol_l.constprop.0+0x114>)
 8007980:	2108      	movs	r1, #8
 8007982:	4694      	mov	ip, r2
 8007984:	001a      	movs	r2, r3
 8007986:	4660      	mov	r0, ip
 8007988:	7814      	ldrb	r4, [r2, #0]
 800798a:	3301      	adds	r3, #1
 800798c:	5d00      	ldrb	r0, [r0, r4]
 800798e:	001d      	movs	r5, r3
 8007990:	0007      	movs	r7, r0
 8007992:	400f      	ands	r7, r1
 8007994:	4208      	tst	r0, r1
 8007996:	d1f5      	bne.n	8007984 <_strtol_l.constprop.0+0x1c>
 8007998:	2c2d      	cmp	r4, #45	; 0x2d
 800799a:	d13a      	bne.n	8007a12 <_strtol_l.constprop.0+0xaa>
 800799c:	2701      	movs	r7, #1
 800799e:	781c      	ldrb	r4, [r3, #0]
 80079a0:	1c95      	adds	r5, r2, #2
 80079a2:	2e00      	cmp	r6, #0
 80079a4:	d065      	beq.n	8007a72 <_strtol_l.constprop.0+0x10a>
 80079a6:	2e10      	cmp	r6, #16
 80079a8:	d109      	bne.n	80079be <_strtol_l.constprop.0+0x56>
 80079aa:	2c30      	cmp	r4, #48	; 0x30
 80079ac:	d107      	bne.n	80079be <_strtol_l.constprop.0+0x56>
 80079ae:	2220      	movs	r2, #32
 80079b0:	782b      	ldrb	r3, [r5, #0]
 80079b2:	4393      	bics	r3, r2
 80079b4:	2b58      	cmp	r3, #88	; 0x58
 80079b6:	d157      	bne.n	8007a68 <_strtol_l.constprop.0+0x100>
 80079b8:	2610      	movs	r6, #16
 80079ba:	786c      	ldrb	r4, [r5, #1]
 80079bc:	3502      	adds	r5, #2
 80079be:	4b30      	ldr	r3, [pc, #192]	; (8007a80 <_strtol_l.constprop.0+0x118>)
 80079c0:	0031      	movs	r1, r6
 80079c2:	18fb      	adds	r3, r7, r3
 80079c4:	0018      	movs	r0, r3
 80079c6:	9303      	str	r3, [sp, #12]
 80079c8:	f7f8 fc46 	bl	8000258 <__aeabi_uidivmod>
 80079cc:	2300      	movs	r3, #0
 80079ce:	2201      	movs	r2, #1
 80079d0:	4684      	mov	ip, r0
 80079d2:	0018      	movs	r0, r3
 80079d4:	9104      	str	r1, [sp, #16]
 80079d6:	4252      	negs	r2, r2
 80079d8:	0021      	movs	r1, r4
 80079da:	3930      	subs	r1, #48	; 0x30
 80079dc:	2909      	cmp	r1, #9
 80079de:	d81d      	bhi.n	8007a1c <_strtol_l.constprop.0+0xb4>
 80079e0:	000c      	movs	r4, r1
 80079e2:	42a6      	cmp	r6, r4
 80079e4:	dd28      	ble.n	8007a38 <_strtol_l.constprop.0+0xd0>
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	db24      	blt.n	8007a34 <_strtol_l.constprop.0+0xcc>
 80079ea:	0013      	movs	r3, r2
 80079ec:	4584      	cmp	ip, r0
 80079ee:	d306      	bcc.n	80079fe <_strtol_l.constprop.0+0x96>
 80079f0:	d102      	bne.n	80079f8 <_strtol_l.constprop.0+0x90>
 80079f2:	9904      	ldr	r1, [sp, #16]
 80079f4:	42a1      	cmp	r1, r4
 80079f6:	db02      	blt.n	80079fe <_strtol_l.constprop.0+0x96>
 80079f8:	2301      	movs	r3, #1
 80079fa:	4370      	muls	r0, r6
 80079fc:	1820      	adds	r0, r4, r0
 80079fe:	782c      	ldrb	r4, [r5, #0]
 8007a00:	3501      	adds	r5, #1
 8007a02:	e7e9      	b.n	80079d8 <_strtol_l.constprop.0+0x70>
 8007a04:	f7fe fa24 	bl	8005e50 <__errno>
 8007a08:	2316      	movs	r3, #22
 8007a0a:	6003      	str	r3, [r0, #0]
 8007a0c:	2000      	movs	r0, #0
 8007a0e:	b007      	add	sp, #28
 8007a10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007a12:	2c2b      	cmp	r4, #43	; 0x2b
 8007a14:	d1c5      	bne.n	80079a2 <_strtol_l.constprop.0+0x3a>
 8007a16:	781c      	ldrb	r4, [r3, #0]
 8007a18:	1c95      	adds	r5, r2, #2
 8007a1a:	e7c2      	b.n	80079a2 <_strtol_l.constprop.0+0x3a>
 8007a1c:	0021      	movs	r1, r4
 8007a1e:	3941      	subs	r1, #65	; 0x41
 8007a20:	2919      	cmp	r1, #25
 8007a22:	d801      	bhi.n	8007a28 <_strtol_l.constprop.0+0xc0>
 8007a24:	3c37      	subs	r4, #55	; 0x37
 8007a26:	e7dc      	b.n	80079e2 <_strtol_l.constprop.0+0x7a>
 8007a28:	0021      	movs	r1, r4
 8007a2a:	3961      	subs	r1, #97	; 0x61
 8007a2c:	2919      	cmp	r1, #25
 8007a2e:	d803      	bhi.n	8007a38 <_strtol_l.constprop.0+0xd0>
 8007a30:	3c57      	subs	r4, #87	; 0x57
 8007a32:	e7d6      	b.n	80079e2 <_strtol_l.constprop.0+0x7a>
 8007a34:	0013      	movs	r3, r2
 8007a36:	e7e2      	b.n	80079fe <_strtol_l.constprop.0+0x96>
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	da09      	bge.n	8007a50 <_strtol_l.constprop.0+0xe8>
 8007a3c:	2322      	movs	r3, #34	; 0x22
 8007a3e:	9a05      	ldr	r2, [sp, #20]
 8007a40:	9803      	ldr	r0, [sp, #12]
 8007a42:	6013      	str	r3, [r2, #0]
 8007a44:	9b02      	ldr	r3, [sp, #8]
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d0e1      	beq.n	8007a0e <_strtol_l.constprop.0+0xa6>
 8007a4a:	1e6b      	subs	r3, r5, #1
 8007a4c:	9301      	str	r3, [sp, #4]
 8007a4e:	e007      	b.n	8007a60 <_strtol_l.constprop.0+0xf8>
 8007a50:	2f00      	cmp	r7, #0
 8007a52:	d000      	beq.n	8007a56 <_strtol_l.constprop.0+0xee>
 8007a54:	4240      	negs	r0, r0
 8007a56:	9a02      	ldr	r2, [sp, #8]
 8007a58:	2a00      	cmp	r2, #0
 8007a5a:	d0d8      	beq.n	8007a0e <_strtol_l.constprop.0+0xa6>
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d1f4      	bne.n	8007a4a <_strtol_l.constprop.0+0xe2>
 8007a60:	9b02      	ldr	r3, [sp, #8]
 8007a62:	9a01      	ldr	r2, [sp, #4]
 8007a64:	601a      	str	r2, [r3, #0]
 8007a66:	e7d2      	b.n	8007a0e <_strtol_l.constprop.0+0xa6>
 8007a68:	2430      	movs	r4, #48	; 0x30
 8007a6a:	2e00      	cmp	r6, #0
 8007a6c:	d1a7      	bne.n	80079be <_strtol_l.constprop.0+0x56>
 8007a6e:	3608      	adds	r6, #8
 8007a70:	e7a5      	b.n	80079be <_strtol_l.constprop.0+0x56>
 8007a72:	2c30      	cmp	r4, #48	; 0x30
 8007a74:	d09b      	beq.n	80079ae <_strtol_l.constprop.0+0x46>
 8007a76:	260a      	movs	r6, #10
 8007a78:	e7a1      	b.n	80079be <_strtol_l.constprop.0+0x56>
 8007a7a:	46c0      	nop			; (mov r8, r8)
 8007a7c:	0800b471 	.word	0x0800b471
 8007a80:	7fffffff 	.word	0x7fffffff

08007a84 <_strtol_r>:
 8007a84:	b510      	push	{r4, lr}
 8007a86:	f7ff ff6f 	bl	8007968 <_strtol_l.constprop.0>
 8007a8a:	bd10      	pop	{r4, pc}

08007a8c <_write_r>:
 8007a8c:	b570      	push	{r4, r5, r6, lr}
 8007a8e:	0004      	movs	r4, r0
 8007a90:	0008      	movs	r0, r1
 8007a92:	0011      	movs	r1, r2
 8007a94:	001a      	movs	r2, r3
 8007a96:	2300      	movs	r3, #0
 8007a98:	4d05      	ldr	r5, [pc, #20]	; (8007ab0 <_write_r+0x24>)
 8007a9a:	602b      	str	r3, [r5, #0]
 8007a9c:	f7fb fd1f 	bl	80034de <_write>
 8007aa0:	1c43      	adds	r3, r0, #1
 8007aa2:	d103      	bne.n	8007aac <_write_r+0x20>
 8007aa4:	682b      	ldr	r3, [r5, #0]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d000      	beq.n	8007aac <_write_r+0x20>
 8007aaa:	6023      	str	r3, [r4, #0]
 8007aac:	bd70      	pop	{r4, r5, r6, pc}
 8007aae:	46c0      	nop			; (mov r8, r8)
 8007ab0:	20000934 	.word	0x20000934

08007ab4 <_close_r>:
 8007ab4:	2300      	movs	r3, #0
 8007ab6:	b570      	push	{r4, r5, r6, lr}
 8007ab8:	4d06      	ldr	r5, [pc, #24]	; (8007ad4 <_close_r+0x20>)
 8007aba:	0004      	movs	r4, r0
 8007abc:	0008      	movs	r0, r1
 8007abe:	602b      	str	r3, [r5, #0]
 8007ac0:	f7fb fd29 	bl	8003516 <_close>
 8007ac4:	1c43      	adds	r3, r0, #1
 8007ac6:	d103      	bne.n	8007ad0 <_close_r+0x1c>
 8007ac8:	682b      	ldr	r3, [r5, #0]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d000      	beq.n	8007ad0 <_close_r+0x1c>
 8007ace:	6023      	str	r3, [r4, #0]
 8007ad0:	bd70      	pop	{r4, r5, r6, pc}
 8007ad2:	46c0      	nop			; (mov r8, r8)
 8007ad4:	20000934 	.word	0x20000934

08007ad8 <quorem>:
 8007ad8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007ada:	0006      	movs	r6, r0
 8007adc:	690b      	ldr	r3, [r1, #16]
 8007ade:	6932      	ldr	r2, [r6, #16]
 8007ae0:	b087      	sub	sp, #28
 8007ae2:	2000      	movs	r0, #0
 8007ae4:	9103      	str	r1, [sp, #12]
 8007ae6:	429a      	cmp	r2, r3
 8007ae8:	db65      	blt.n	8007bb6 <quorem+0xde>
 8007aea:	3b01      	subs	r3, #1
 8007aec:	009c      	lsls	r4, r3, #2
 8007aee:	9300      	str	r3, [sp, #0]
 8007af0:	000b      	movs	r3, r1
 8007af2:	3314      	adds	r3, #20
 8007af4:	9305      	str	r3, [sp, #20]
 8007af6:	191b      	adds	r3, r3, r4
 8007af8:	9304      	str	r3, [sp, #16]
 8007afa:	0033      	movs	r3, r6
 8007afc:	3314      	adds	r3, #20
 8007afe:	9302      	str	r3, [sp, #8]
 8007b00:	191c      	adds	r4, r3, r4
 8007b02:	9b04      	ldr	r3, [sp, #16]
 8007b04:	6827      	ldr	r7, [r4, #0]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	0038      	movs	r0, r7
 8007b0a:	1c5d      	adds	r5, r3, #1
 8007b0c:	0029      	movs	r1, r5
 8007b0e:	9301      	str	r3, [sp, #4]
 8007b10:	f7f8 fb1c 	bl	800014c <__udivsi3>
 8007b14:	9001      	str	r0, [sp, #4]
 8007b16:	42af      	cmp	r7, r5
 8007b18:	d324      	bcc.n	8007b64 <quorem+0x8c>
 8007b1a:	2500      	movs	r5, #0
 8007b1c:	46ac      	mov	ip, r5
 8007b1e:	9802      	ldr	r0, [sp, #8]
 8007b20:	9f05      	ldr	r7, [sp, #20]
 8007b22:	cf08      	ldmia	r7!, {r3}
 8007b24:	9a01      	ldr	r2, [sp, #4]
 8007b26:	b299      	uxth	r1, r3
 8007b28:	4351      	muls	r1, r2
 8007b2a:	0c1b      	lsrs	r3, r3, #16
 8007b2c:	4353      	muls	r3, r2
 8007b2e:	1949      	adds	r1, r1, r5
 8007b30:	0c0a      	lsrs	r2, r1, #16
 8007b32:	189b      	adds	r3, r3, r2
 8007b34:	6802      	ldr	r2, [r0, #0]
 8007b36:	b289      	uxth	r1, r1
 8007b38:	b292      	uxth	r2, r2
 8007b3a:	4462      	add	r2, ip
 8007b3c:	1a52      	subs	r2, r2, r1
 8007b3e:	6801      	ldr	r1, [r0, #0]
 8007b40:	0c1d      	lsrs	r5, r3, #16
 8007b42:	0c09      	lsrs	r1, r1, #16
 8007b44:	b29b      	uxth	r3, r3
 8007b46:	1acb      	subs	r3, r1, r3
 8007b48:	1411      	asrs	r1, r2, #16
 8007b4a:	185b      	adds	r3, r3, r1
 8007b4c:	1419      	asrs	r1, r3, #16
 8007b4e:	b292      	uxth	r2, r2
 8007b50:	041b      	lsls	r3, r3, #16
 8007b52:	431a      	orrs	r2, r3
 8007b54:	9b04      	ldr	r3, [sp, #16]
 8007b56:	468c      	mov	ip, r1
 8007b58:	c004      	stmia	r0!, {r2}
 8007b5a:	42bb      	cmp	r3, r7
 8007b5c:	d2e1      	bcs.n	8007b22 <quorem+0x4a>
 8007b5e:	6823      	ldr	r3, [r4, #0]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d030      	beq.n	8007bc6 <quorem+0xee>
 8007b64:	0030      	movs	r0, r6
 8007b66:	9903      	ldr	r1, [sp, #12]
 8007b68:	f001 fce8 	bl	800953c <__mcmp>
 8007b6c:	2800      	cmp	r0, #0
 8007b6e:	db21      	blt.n	8007bb4 <quorem+0xdc>
 8007b70:	0030      	movs	r0, r6
 8007b72:	2400      	movs	r4, #0
 8007b74:	9b01      	ldr	r3, [sp, #4]
 8007b76:	9903      	ldr	r1, [sp, #12]
 8007b78:	3301      	adds	r3, #1
 8007b7a:	9301      	str	r3, [sp, #4]
 8007b7c:	3014      	adds	r0, #20
 8007b7e:	3114      	adds	r1, #20
 8007b80:	6803      	ldr	r3, [r0, #0]
 8007b82:	c920      	ldmia	r1!, {r5}
 8007b84:	b29a      	uxth	r2, r3
 8007b86:	1914      	adds	r4, r2, r4
 8007b88:	b2aa      	uxth	r2, r5
 8007b8a:	1aa2      	subs	r2, r4, r2
 8007b8c:	0c1b      	lsrs	r3, r3, #16
 8007b8e:	0c2d      	lsrs	r5, r5, #16
 8007b90:	1414      	asrs	r4, r2, #16
 8007b92:	1b5b      	subs	r3, r3, r5
 8007b94:	191b      	adds	r3, r3, r4
 8007b96:	141c      	asrs	r4, r3, #16
 8007b98:	b292      	uxth	r2, r2
 8007b9a:	041b      	lsls	r3, r3, #16
 8007b9c:	4313      	orrs	r3, r2
 8007b9e:	c008      	stmia	r0!, {r3}
 8007ba0:	9b04      	ldr	r3, [sp, #16]
 8007ba2:	428b      	cmp	r3, r1
 8007ba4:	d2ec      	bcs.n	8007b80 <quorem+0xa8>
 8007ba6:	9b00      	ldr	r3, [sp, #0]
 8007ba8:	9a02      	ldr	r2, [sp, #8]
 8007baa:	009b      	lsls	r3, r3, #2
 8007bac:	18d3      	adds	r3, r2, r3
 8007bae:	681a      	ldr	r2, [r3, #0]
 8007bb0:	2a00      	cmp	r2, #0
 8007bb2:	d015      	beq.n	8007be0 <quorem+0x108>
 8007bb4:	9801      	ldr	r0, [sp, #4]
 8007bb6:	b007      	add	sp, #28
 8007bb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007bba:	6823      	ldr	r3, [r4, #0]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d106      	bne.n	8007bce <quorem+0xf6>
 8007bc0:	9b00      	ldr	r3, [sp, #0]
 8007bc2:	3b01      	subs	r3, #1
 8007bc4:	9300      	str	r3, [sp, #0]
 8007bc6:	9b02      	ldr	r3, [sp, #8]
 8007bc8:	3c04      	subs	r4, #4
 8007bca:	42a3      	cmp	r3, r4
 8007bcc:	d3f5      	bcc.n	8007bba <quorem+0xe2>
 8007bce:	9b00      	ldr	r3, [sp, #0]
 8007bd0:	6133      	str	r3, [r6, #16]
 8007bd2:	e7c7      	b.n	8007b64 <quorem+0x8c>
 8007bd4:	681a      	ldr	r2, [r3, #0]
 8007bd6:	2a00      	cmp	r2, #0
 8007bd8:	d106      	bne.n	8007be8 <quorem+0x110>
 8007bda:	9a00      	ldr	r2, [sp, #0]
 8007bdc:	3a01      	subs	r2, #1
 8007bde:	9200      	str	r2, [sp, #0]
 8007be0:	9a02      	ldr	r2, [sp, #8]
 8007be2:	3b04      	subs	r3, #4
 8007be4:	429a      	cmp	r2, r3
 8007be6:	d3f5      	bcc.n	8007bd4 <quorem+0xfc>
 8007be8:	9b00      	ldr	r3, [sp, #0]
 8007bea:	6133      	str	r3, [r6, #16]
 8007bec:	e7e2      	b.n	8007bb4 <quorem+0xdc>
	...

08007bf0 <_dtoa_r>:
 8007bf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007bf2:	b09d      	sub	sp, #116	; 0x74
 8007bf4:	9202      	str	r2, [sp, #8]
 8007bf6:	9303      	str	r3, [sp, #12]
 8007bf8:	9b02      	ldr	r3, [sp, #8]
 8007bfa:	9c03      	ldr	r4, [sp, #12]
 8007bfc:	9308      	str	r3, [sp, #32]
 8007bfe:	9409      	str	r4, [sp, #36]	; 0x24
 8007c00:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8007c02:	0007      	movs	r7, r0
 8007c04:	9d25      	ldr	r5, [sp, #148]	; 0x94
 8007c06:	2c00      	cmp	r4, #0
 8007c08:	d10e      	bne.n	8007c28 <_dtoa_r+0x38>
 8007c0a:	2010      	movs	r0, #16
 8007c0c:	f001 f996 	bl	8008f3c <malloc>
 8007c10:	1e02      	subs	r2, r0, #0
 8007c12:	6278      	str	r0, [r7, #36]	; 0x24
 8007c14:	d104      	bne.n	8007c20 <_dtoa_r+0x30>
 8007c16:	21ea      	movs	r1, #234	; 0xea
 8007c18:	4bc7      	ldr	r3, [pc, #796]	; (8007f38 <_dtoa_r+0x348>)
 8007c1a:	48c8      	ldr	r0, [pc, #800]	; (8007f3c <_dtoa_r+0x34c>)
 8007c1c:	f002 fd88 	bl	800a730 <__assert_func>
 8007c20:	6044      	str	r4, [r0, #4]
 8007c22:	6084      	str	r4, [r0, #8]
 8007c24:	6004      	str	r4, [r0, #0]
 8007c26:	60c4      	str	r4, [r0, #12]
 8007c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c2a:	6819      	ldr	r1, [r3, #0]
 8007c2c:	2900      	cmp	r1, #0
 8007c2e:	d00a      	beq.n	8007c46 <_dtoa_r+0x56>
 8007c30:	685a      	ldr	r2, [r3, #4]
 8007c32:	2301      	movs	r3, #1
 8007c34:	4093      	lsls	r3, r2
 8007c36:	604a      	str	r2, [r1, #4]
 8007c38:	608b      	str	r3, [r1, #8]
 8007c3a:	0038      	movs	r0, r7
 8007c3c:	f001 f9f2 	bl	8009024 <_Bfree>
 8007c40:	2200      	movs	r2, #0
 8007c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c44:	601a      	str	r2, [r3, #0]
 8007c46:	9b03      	ldr	r3, [sp, #12]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	da20      	bge.n	8007c8e <_dtoa_r+0x9e>
 8007c4c:	2301      	movs	r3, #1
 8007c4e:	602b      	str	r3, [r5, #0]
 8007c50:	9b03      	ldr	r3, [sp, #12]
 8007c52:	005b      	lsls	r3, r3, #1
 8007c54:	085b      	lsrs	r3, r3, #1
 8007c56:	9309      	str	r3, [sp, #36]	; 0x24
 8007c58:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007c5a:	4bb9      	ldr	r3, [pc, #740]	; (8007f40 <_dtoa_r+0x350>)
 8007c5c:	4ab8      	ldr	r2, [pc, #736]	; (8007f40 <_dtoa_r+0x350>)
 8007c5e:	402b      	ands	r3, r5
 8007c60:	4293      	cmp	r3, r2
 8007c62:	d117      	bne.n	8007c94 <_dtoa_r+0xa4>
 8007c64:	4bb7      	ldr	r3, [pc, #732]	; (8007f44 <_dtoa_r+0x354>)
 8007c66:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007c68:	0328      	lsls	r0, r5, #12
 8007c6a:	6013      	str	r3, [r2, #0]
 8007c6c:	9b02      	ldr	r3, [sp, #8]
 8007c6e:	0b00      	lsrs	r0, r0, #12
 8007c70:	4318      	orrs	r0, r3
 8007c72:	d101      	bne.n	8007c78 <_dtoa_r+0x88>
 8007c74:	f000 fdbf 	bl	80087f6 <_dtoa_r+0xc06>
 8007c78:	48b3      	ldr	r0, [pc, #716]	; (8007f48 <_dtoa_r+0x358>)
 8007c7a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007c7c:	9006      	str	r0, [sp, #24]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d002      	beq.n	8007c88 <_dtoa_r+0x98>
 8007c82:	4bb2      	ldr	r3, [pc, #712]	; (8007f4c <_dtoa_r+0x35c>)
 8007c84:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007c86:	6013      	str	r3, [r2, #0]
 8007c88:	9806      	ldr	r0, [sp, #24]
 8007c8a:	b01d      	add	sp, #116	; 0x74
 8007c8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007c8e:	2300      	movs	r3, #0
 8007c90:	602b      	str	r3, [r5, #0]
 8007c92:	e7e1      	b.n	8007c58 <_dtoa_r+0x68>
 8007c94:	9b08      	ldr	r3, [sp, #32]
 8007c96:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8007c98:	9312      	str	r3, [sp, #72]	; 0x48
 8007c9a:	9413      	str	r4, [sp, #76]	; 0x4c
 8007c9c:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007c9e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	f7f8 fbd8 	bl	8000458 <__aeabi_dcmpeq>
 8007ca8:	1e04      	subs	r4, r0, #0
 8007caa:	d009      	beq.n	8007cc0 <_dtoa_r+0xd0>
 8007cac:	2301      	movs	r3, #1
 8007cae:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007cb0:	6013      	str	r3, [r2, #0]
 8007cb2:	4ba7      	ldr	r3, [pc, #668]	; (8007f50 <_dtoa_r+0x360>)
 8007cb4:	9306      	str	r3, [sp, #24]
 8007cb6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d0e5      	beq.n	8007c88 <_dtoa_r+0x98>
 8007cbc:	4ba5      	ldr	r3, [pc, #660]	; (8007f54 <_dtoa_r+0x364>)
 8007cbe:	e7e1      	b.n	8007c84 <_dtoa_r+0x94>
 8007cc0:	ab1a      	add	r3, sp, #104	; 0x68
 8007cc2:	9301      	str	r3, [sp, #4]
 8007cc4:	ab1b      	add	r3, sp, #108	; 0x6c
 8007cc6:	9300      	str	r3, [sp, #0]
 8007cc8:	0038      	movs	r0, r7
 8007cca:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007ccc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007cce:	f001 fd5d 	bl	800978c <__d2b>
 8007cd2:	006e      	lsls	r6, r5, #1
 8007cd4:	9005      	str	r0, [sp, #20]
 8007cd6:	0d76      	lsrs	r6, r6, #21
 8007cd8:	d100      	bne.n	8007cdc <_dtoa_r+0xec>
 8007cda:	e07c      	b.n	8007dd6 <_dtoa_r+0x1e6>
 8007cdc:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007cde:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007ce0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007ce2:	4a9d      	ldr	r2, [pc, #628]	; (8007f58 <_dtoa_r+0x368>)
 8007ce4:	031b      	lsls	r3, r3, #12
 8007ce6:	0b1b      	lsrs	r3, r3, #12
 8007ce8:	431a      	orrs	r2, r3
 8007cea:	0011      	movs	r1, r2
 8007cec:	4b9b      	ldr	r3, [pc, #620]	; (8007f5c <_dtoa_r+0x36c>)
 8007cee:	9418      	str	r4, [sp, #96]	; 0x60
 8007cf0:	18f6      	adds	r6, r6, r3
 8007cf2:	2200      	movs	r2, #0
 8007cf4:	4b9a      	ldr	r3, [pc, #616]	; (8007f60 <_dtoa_r+0x370>)
 8007cf6:	f7fa fac9 	bl	800228c <__aeabi_dsub>
 8007cfa:	4a9a      	ldr	r2, [pc, #616]	; (8007f64 <_dtoa_r+0x374>)
 8007cfc:	4b9a      	ldr	r3, [pc, #616]	; (8007f68 <_dtoa_r+0x378>)
 8007cfe:	f7fa f859 	bl	8001db4 <__aeabi_dmul>
 8007d02:	4a9a      	ldr	r2, [pc, #616]	; (8007f6c <_dtoa_r+0x37c>)
 8007d04:	4b9a      	ldr	r3, [pc, #616]	; (8007f70 <_dtoa_r+0x380>)
 8007d06:	f7f9 f917 	bl	8000f38 <__aeabi_dadd>
 8007d0a:	0004      	movs	r4, r0
 8007d0c:	0030      	movs	r0, r6
 8007d0e:	000d      	movs	r5, r1
 8007d10:	f7fa fea2 	bl	8002a58 <__aeabi_i2d>
 8007d14:	4a97      	ldr	r2, [pc, #604]	; (8007f74 <_dtoa_r+0x384>)
 8007d16:	4b98      	ldr	r3, [pc, #608]	; (8007f78 <_dtoa_r+0x388>)
 8007d18:	f7fa f84c 	bl	8001db4 <__aeabi_dmul>
 8007d1c:	0002      	movs	r2, r0
 8007d1e:	000b      	movs	r3, r1
 8007d20:	0020      	movs	r0, r4
 8007d22:	0029      	movs	r1, r5
 8007d24:	f7f9 f908 	bl	8000f38 <__aeabi_dadd>
 8007d28:	0004      	movs	r4, r0
 8007d2a:	000d      	movs	r5, r1
 8007d2c:	f7fa fe5e 	bl	80029ec <__aeabi_d2iz>
 8007d30:	2200      	movs	r2, #0
 8007d32:	9002      	str	r0, [sp, #8]
 8007d34:	2300      	movs	r3, #0
 8007d36:	0020      	movs	r0, r4
 8007d38:	0029      	movs	r1, r5
 8007d3a:	f7f8 fb93 	bl	8000464 <__aeabi_dcmplt>
 8007d3e:	2800      	cmp	r0, #0
 8007d40:	d00b      	beq.n	8007d5a <_dtoa_r+0x16a>
 8007d42:	9802      	ldr	r0, [sp, #8]
 8007d44:	f7fa fe88 	bl	8002a58 <__aeabi_i2d>
 8007d48:	002b      	movs	r3, r5
 8007d4a:	0022      	movs	r2, r4
 8007d4c:	f7f8 fb84 	bl	8000458 <__aeabi_dcmpeq>
 8007d50:	4243      	negs	r3, r0
 8007d52:	4158      	adcs	r0, r3
 8007d54:	9b02      	ldr	r3, [sp, #8]
 8007d56:	1a1b      	subs	r3, r3, r0
 8007d58:	9302      	str	r3, [sp, #8]
 8007d5a:	2301      	movs	r3, #1
 8007d5c:	9316      	str	r3, [sp, #88]	; 0x58
 8007d5e:	9b02      	ldr	r3, [sp, #8]
 8007d60:	2b16      	cmp	r3, #22
 8007d62:	d80f      	bhi.n	8007d84 <_dtoa_r+0x194>
 8007d64:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007d66:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007d68:	00da      	lsls	r2, r3, #3
 8007d6a:	4b84      	ldr	r3, [pc, #528]	; (8007f7c <_dtoa_r+0x38c>)
 8007d6c:	189b      	adds	r3, r3, r2
 8007d6e:	681a      	ldr	r2, [r3, #0]
 8007d70:	685b      	ldr	r3, [r3, #4]
 8007d72:	f7f8 fb77 	bl	8000464 <__aeabi_dcmplt>
 8007d76:	2800      	cmp	r0, #0
 8007d78:	d049      	beq.n	8007e0e <_dtoa_r+0x21e>
 8007d7a:	9b02      	ldr	r3, [sp, #8]
 8007d7c:	3b01      	subs	r3, #1
 8007d7e:	9302      	str	r3, [sp, #8]
 8007d80:	2300      	movs	r3, #0
 8007d82:	9316      	str	r3, [sp, #88]	; 0x58
 8007d84:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8007d86:	1b9e      	subs	r6, r3, r6
 8007d88:	2300      	movs	r3, #0
 8007d8a:	930a      	str	r3, [sp, #40]	; 0x28
 8007d8c:	0033      	movs	r3, r6
 8007d8e:	3b01      	subs	r3, #1
 8007d90:	930d      	str	r3, [sp, #52]	; 0x34
 8007d92:	d504      	bpl.n	8007d9e <_dtoa_r+0x1ae>
 8007d94:	2301      	movs	r3, #1
 8007d96:	1b9b      	subs	r3, r3, r6
 8007d98:	930a      	str	r3, [sp, #40]	; 0x28
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	930d      	str	r3, [sp, #52]	; 0x34
 8007d9e:	9b02      	ldr	r3, [sp, #8]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	db36      	blt.n	8007e12 <_dtoa_r+0x222>
 8007da4:	9a02      	ldr	r2, [sp, #8]
 8007da6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007da8:	4694      	mov	ip, r2
 8007daa:	4463      	add	r3, ip
 8007dac:	930d      	str	r3, [sp, #52]	; 0x34
 8007dae:	2300      	movs	r3, #0
 8007db0:	9215      	str	r2, [sp, #84]	; 0x54
 8007db2:	930e      	str	r3, [sp, #56]	; 0x38
 8007db4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007db6:	2401      	movs	r4, #1
 8007db8:	2b09      	cmp	r3, #9
 8007dba:	d864      	bhi.n	8007e86 <_dtoa_r+0x296>
 8007dbc:	2b05      	cmp	r3, #5
 8007dbe:	dd02      	ble.n	8007dc6 <_dtoa_r+0x1d6>
 8007dc0:	2400      	movs	r4, #0
 8007dc2:	3b04      	subs	r3, #4
 8007dc4:	9322      	str	r3, [sp, #136]	; 0x88
 8007dc6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007dc8:	1e98      	subs	r0, r3, #2
 8007dca:	2803      	cmp	r0, #3
 8007dcc:	d864      	bhi.n	8007e98 <_dtoa_r+0x2a8>
 8007dce:	f7f8 f9a9 	bl	8000124 <__gnu_thumb1_case_uqi>
 8007dd2:	3829      	.short	0x3829
 8007dd4:	5836      	.short	0x5836
 8007dd6:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8007dd8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8007dda:	189e      	adds	r6, r3, r2
 8007ddc:	4b68      	ldr	r3, [pc, #416]	; (8007f80 <_dtoa_r+0x390>)
 8007dde:	18f2      	adds	r2, r6, r3
 8007de0:	2a20      	cmp	r2, #32
 8007de2:	dd0f      	ble.n	8007e04 <_dtoa_r+0x214>
 8007de4:	2340      	movs	r3, #64	; 0x40
 8007de6:	1a9b      	subs	r3, r3, r2
 8007de8:	409d      	lsls	r5, r3
 8007dea:	4b66      	ldr	r3, [pc, #408]	; (8007f84 <_dtoa_r+0x394>)
 8007dec:	9802      	ldr	r0, [sp, #8]
 8007dee:	18f3      	adds	r3, r6, r3
 8007df0:	40d8      	lsrs	r0, r3
 8007df2:	4328      	orrs	r0, r5
 8007df4:	f7fa fe60 	bl	8002ab8 <__aeabi_ui2d>
 8007df8:	2301      	movs	r3, #1
 8007dfa:	4c63      	ldr	r4, [pc, #396]	; (8007f88 <_dtoa_r+0x398>)
 8007dfc:	3e01      	subs	r6, #1
 8007dfe:	1909      	adds	r1, r1, r4
 8007e00:	9318      	str	r3, [sp, #96]	; 0x60
 8007e02:	e776      	b.n	8007cf2 <_dtoa_r+0x102>
 8007e04:	2320      	movs	r3, #32
 8007e06:	9802      	ldr	r0, [sp, #8]
 8007e08:	1a9b      	subs	r3, r3, r2
 8007e0a:	4098      	lsls	r0, r3
 8007e0c:	e7f2      	b.n	8007df4 <_dtoa_r+0x204>
 8007e0e:	9016      	str	r0, [sp, #88]	; 0x58
 8007e10:	e7b8      	b.n	8007d84 <_dtoa_r+0x194>
 8007e12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e14:	9a02      	ldr	r2, [sp, #8]
 8007e16:	1a9b      	subs	r3, r3, r2
 8007e18:	930a      	str	r3, [sp, #40]	; 0x28
 8007e1a:	4253      	negs	r3, r2
 8007e1c:	930e      	str	r3, [sp, #56]	; 0x38
 8007e1e:	2300      	movs	r3, #0
 8007e20:	9315      	str	r3, [sp, #84]	; 0x54
 8007e22:	e7c7      	b.n	8007db4 <_dtoa_r+0x1c4>
 8007e24:	2300      	movs	r3, #0
 8007e26:	930f      	str	r3, [sp, #60]	; 0x3c
 8007e28:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007e2a:	930c      	str	r3, [sp, #48]	; 0x30
 8007e2c:	9307      	str	r3, [sp, #28]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	dc13      	bgt.n	8007e5a <_dtoa_r+0x26a>
 8007e32:	2301      	movs	r3, #1
 8007e34:	001a      	movs	r2, r3
 8007e36:	930c      	str	r3, [sp, #48]	; 0x30
 8007e38:	9307      	str	r3, [sp, #28]
 8007e3a:	9223      	str	r2, [sp, #140]	; 0x8c
 8007e3c:	e00d      	b.n	8007e5a <_dtoa_r+0x26a>
 8007e3e:	2301      	movs	r3, #1
 8007e40:	e7f1      	b.n	8007e26 <_dtoa_r+0x236>
 8007e42:	2300      	movs	r3, #0
 8007e44:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8007e46:	930f      	str	r3, [sp, #60]	; 0x3c
 8007e48:	4694      	mov	ip, r2
 8007e4a:	9b02      	ldr	r3, [sp, #8]
 8007e4c:	4463      	add	r3, ip
 8007e4e:	930c      	str	r3, [sp, #48]	; 0x30
 8007e50:	3301      	adds	r3, #1
 8007e52:	9307      	str	r3, [sp, #28]
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	dc00      	bgt.n	8007e5a <_dtoa_r+0x26a>
 8007e58:	2301      	movs	r3, #1
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007e5e:	6042      	str	r2, [r0, #4]
 8007e60:	3204      	adds	r2, #4
 8007e62:	0015      	movs	r5, r2
 8007e64:	3514      	adds	r5, #20
 8007e66:	6841      	ldr	r1, [r0, #4]
 8007e68:	429d      	cmp	r5, r3
 8007e6a:	d919      	bls.n	8007ea0 <_dtoa_r+0x2b0>
 8007e6c:	0038      	movs	r0, r7
 8007e6e:	f001 f895 	bl	8008f9c <_Balloc>
 8007e72:	9006      	str	r0, [sp, #24]
 8007e74:	2800      	cmp	r0, #0
 8007e76:	d117      	bne.n	8007ea8 <_dtoa_r+0x2b8>
 8007e78:	21d5      	movs	r1, #213	; 0xd5
 8007e7a:	0002      	movs	r2, r0
 8007e7c:	4b43      	ldr	r3, [pc, #268]	; (8007f8c <_dtoa_r+0x39c>)
 8007e7e:	0049      	lsls	r1, r1, #1
 8007e80:	e6cb      	b.n	8007c1a <_dtoa_r+0x2a>
 8007e82:	2301      	movs	r3, #1
 8007e84:	e7de      	b.n	8007e44 <_dtoa_r+0x254>
 8007e86:	2300      	movs	r3, #0
 8007e88:	940f      	str	r4, [sp, #60]	; 0x3c
 8007e8a:	9322      	str	r3, [sp, #136]	; 0x88
 8007e8c:	3b01      	subs	r3, #1
 8007e8e:	930c      	str	r3, [sp, #48]	; 0x30
 8007e90:	9307      	str	r3, [sp, #28]
 8007e92:	2200      	movs	r2, #0
 8007e94:	3313      	adds	r3, #19
 8007e96:	e7d0      	b.n	8007e3a <_dtoa_r+0x24a>
 8007e98:	2301      	movs	r3, #1
 8007e9a:	930f      	str	r3, [sp, #60]	; 0x3c
 8007e9c:	3b02      	subs	r3, #2
 8007e9e:	e7f6      	b.n	8007e8e <_dtoa_r+0x29e>
 8007ea0:	3101      	adds	r1, #1
 8007ea2:	6041      	str	r1, [r0, #4]
 8007ea4:	0052      	lsls	r2, r2, #1
 8007ea6:	e7dc      	b.n	8007e62 <_dtoa_r+0x272>
 8007ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eaa:	9a06      	ldr	r2, [sp, #24]
 8007eac:	601a      	str	r2, [r3, #0]
 8007eae:	9b07      	ldr	r3, [sp, #28]
 8007eb0:	2b0e      	cmp	r3, #14
 8007eb2:	d900      	bls.n	8007eb6 <_dtoa_r+0x2c6>
 8007eb4:	e0eb      	b.n	800808e <_dtoa_r+0x49e>
 8007eb6:	2c00      	cmp	r4, #0
 8007eb8:	d100      	bne.n	8007ebc <_dtoa_r+0x2cc>
 8007eba:	e0e8      	b.n	800808e <_dtoa_r+0x49e>
 8007ebc:	9b02      	ldr	r3, [sp, #8]
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	dd68      	ble.n	8007f94 <_dtoa_r+0x3a4>
 8007ec2:	001a      	movs	r2, r3
 8007ec4:	210f      	movs	r1, #15
 8007ec6:	4b2d      	ldr	r3, [pc, #180]	; (8007f7c <_dtoa_r+0x38c>)
 8007ec8:	400a      	ands	r2, r1
 8007eca:	00d2      	lsls	r2, r2, #3
 8007ecc:	189b      	adds	r3, r3, r2
 8007ece:	681d      	ldr	r5, [r3, #0]
 8007ed0:	685e      	ldr	r6, [r3, #4]
 8007ed2:	9b02      	ldr	r3, [sp, #8]
 8007ed4:	111c      	asrs	r4, r3, #4
 8007ed6:	2302      	movs	r3, #2
 8007ed8:	9310      	str	r3, [sp, #64]	; 0x40
 8007eda:	9b02      	ldr	r3, [sp, #8]
 8007edc:	05db      	lsls	r3, r3, #23
 8007ede:	d50b      	bpl.n	8007ef8 <_dtoa_r+0x308>
 8007ee0:	4b2b      	ldr	r3, [pc, #172]	; (8007f90 <_dtoa_r+0x3a0>)
 8007ee2:	400c      	ands	r4, r1
 8007ee4:	6a1a      	ldr	r2, [r3, #32]
 8007ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ee8:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007eea:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007eec:	f7f9 fb60 	bl	80015b0 <__aeabi_ddiv>
 8007ef0:	2303      	movs	r3, #3
 8007ef2:	9008      	str	r0, [sp, #32]
 8007ef4:	9109      	str	r1, [sp, #36]	; 0x24
 8007ef6:	9310      	str	r3, [sp, #64]	; 0x40
 8007ef8:	4b25      	ldr	r3, [pc, #148]	; (8007f90 <_dtoa_r+0x3a0>)
 8007efa:	9314      	str	r3, [sp, #80]	; 0x50
 8007efc:	2c00      	cmp	r4, #0
 8007efe:	d108      	bne.n	8007f12 <_dtoa_r+0x322>
 8007f00:	9808      	ldr	r0, [sp, #32]
 8007f02:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007f04:	002a      	movs	r2, r5
 8007f06:	0033      	movs	r3, r6
 8007f08:	f7f9 fb52 	bl	80015b0 <__aeabi_ddiv>
 8007f0c:	9008      	str	r0, [sp, #32]
 8007f0e:	9109      	str	r1, [sp, #36]	; 0x24
 8007f10:	e05c      	b.n	8007fcc <_dtoa_r+0x3dc>
 8007f12:	2301      	movs	r3, #1
 8007f14:	421c      	tst	r4, r3
 8007f16:	d00b      	beq.n	8007f30 <_dtoa_r+0x340>
 8007f18:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007f1a:	0028      	movs	r0, r5
 8007f1c:	3301      	adds	r3, #1
 8007f1e:	9310      	str	r3, [sp, #64]	; 0x40
 8007f20:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007f22:	0031      	movs	r1, r6
 8007f24:	681a      	ldr	r2, [r3, #0]
 8007f26:	685b      	ldr	r3, [r3, #4]
 8007f28:	f7f9 ff44 	bl	8001db4 <__aeabi_dmul>
 8007f2c:	0005      	movs	r5, r0
 8007f2e:	000e      	movs	r6, r1
 8007f30:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007f32:	1064      	asrs	r4, r4, #1
 8007f34:	3308      	adds	r3, #8
 8007f36:	e7e0      	b.n	8007efa <_dtoa_r+0x30a>
 8007f38:	0800b57e 	.word	0x0800b57e
 8007f3c:	0800b595 	.word	0x0800b595
 8007f40:	7ff00000 	.word	0x7ff00000
 8007f44:	0000270f 	.word	0x0000270f
 8007f48:	0800b57a 	.word	0x0800b57a
 8007f4c:	0800b57d 	.word	0x0800b57d
 8007f50:	0800b7e9 	.word	0x0800b7e9
 8007f54:	0800b7ea 	.word	0x0800b7ea
 8007f58:	3ff00000 	.word	0x3ff00000
 8007f5c:	fffffc01 	.word	0xfffffc01
 8007f60:	3ff80000 	.word	0x3ff80000
 8007f64:	636f4361 	.word	0x636f4361
 8007f68:	3fd287a7 	.word	0x3fd287a7
 8007f6c:	8b60c8b3 	.word	0x8b60c8b3
 8007f70:	3fc68a28 	.word	0x3fc68a28
 8007f74:	509f79fb 	.word	0x509f79fb
 8007f78:	3fd34413 	.word	0x3fd34413
 8007f7c:	0800b700 	.word	0x0800b700
 8007f80:	00000432 	.word	0x00000432
 8007f84:	00000412 	.word	0x00000412
 8007f88:	fe100000 	.word	0xfe100000
 8007f8c:	0800b5f0 	.word	0x0800b5f0
 8007f90:	0800b6d8 	.word	0x0800b6d8
 8007f94:	2302      	movs	r3, #2
 8007f96:	9310      	str	r3, [sp, #64]	; 0x40
 8007f98:	9b02      	ldr	r3, [sp, #8]
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d016      	beq.n	8007fcc <_dtoa_r+0x3dc>
 8007f9e:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007fa0:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007fa2:	425c      	negs	r4, r3
 8007fa4:	230f      	movs	r3, #15
 8007fa6:	4ab6      	ldr	r2, [pc, #728]	; (8008280 <_dtoa_r+0x690>)
 8007fa8:	4023      	ands	r3, r4
 8007faa:	00db      	lsls	r3, r3, #3
 8007fac:	18d3      	adds	r3, r2, r3
 8007fae:	681a      	ldr	r2, [r3, #0]
 8007fb0:	685b      	ldr	r3, [r3, #4]
 8007fb2:	f7f9 feff 	bl	8001db4 <__aeabi_dmul>
 8007fb6:	2601      	movs	r6, #1
 8007fb8:	2300      	movs	r3, #0
 8007fba:	9008      	str	r0, [sp, #32]
 8007fbc:	9109      	str	r1, [sp, #36]	; 0x24
 8007fbe:	4db1      	ldr	r5, [pc, #708]	; (8008284 <_dtoa_r+0x694>)
 8007fc0:	1124      	asrs	r4, r4, #4
 8007fc2:	2c00      	cmp	r4, #0
 8007fc4:	d000      	beq.n	8007fc8 <_dtoa_r+0x3d8>
 8007fc6:	e094      	b.n	80080f2 <_dtoa_r+0x502>
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d19f      	bne.n	8007f0c <_dtoa_r+0x31c>
 8007fcc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d100      	bne.n	8007fd4 <_dtoa_r+0x3e4>
 8007fd2:	e09b      	b.n	800810c <_dtoa_r+0x51c>
 8007fd4:	9c08      	ldr	r4, [sp, #32]
 8007fd6:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007fd8:	2200      	movs	r2, #0
 8007fda:	0020      	movs	r0, r4
 8007fdc:	0029      	movs	r1, r5
 8007fde:	4baa      	ldr	r3, [pc, #680]	; (8008288 <_dtoa_r+0x698>)
 8007fe0:	f7f8 fa40 	bl	8000464 <__aeabi_dcmplt>
 8007fe4:	2800      	cmp	r0, #0
 8007fe6:	d100      	bne.n	8007fea <_dtoa_r+0x3fa>
 8007fe8:	e090      	b.n	800810c <_dtoa_r+0x51c>
 8007fea:	9b07      	ldr	r3, [sp, #28]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d100      	bne.n	8007ff2 <_dtoa_r+0x402>
 8007ff0:	e08c      	b.n	800810c <_dtoa_r+0x51c>
 8007ff2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	dd46      	ble.n	8008086 <_dtoa_r+0x496>
 8007ff8:	9b02      	ldr	r3, [sp, #8]
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	0020      	movs	r0, r4
 8007ffe:	0029      	movs	r1, r5
 8008000:	1e5e      	subs	r6, r3, #1
 8008002:	4ba2      	ldr	r3, [pc, #648]	; (800828c <_dtoa_r+0x69c>)
 8008004:	f7f9 fed6 	bl	8001db4 <__aeabi_dmul>
 8008008:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800800a:	9008      	str	r0, [sp, #32]
 800800c:	9109      	str	r1, [sp, #36]	; 0x24
 800800e:	3301      	adds	r3, #1
 8008010:	9310      	str	r3, [sp, #64]	; 0x40
 8008012:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008014:	9810      	ldr	r0, [sp, #64]	; 0x40
 8008016:	9c08      	ldr	r4, [sp, #32]
 8008018:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800801a:	9314      	str	r3, [sp, #80]	; 0x50
 800801c:	f7fa fd1c 	bl	8002a58 <__aeabi_i2d>
 8008020:	0022      	movs	r2, r4
 8008022:	002b      	movs	r3, r5
 8008024:	f7f9 fec6 	bl	8001db4 <__aeabi_dmul>
 8008028:	2200      	movs	r2, #0
 800802a:	4b99      	ldr	r3, [pc, #612]	; (8008290 <_dtoa_r+0x6a0>)
 800802c:	f7f8 ff84 	bl	8000f38 <__aeabi_dadd>
 8008030:	9010      	str	r0, [sp, #64]	; 0x40
 8008032:	9111      	str	r1, [sp, #68]	; 0x44
 8008034:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008036:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008038:	9208      	str	r2, [sp, #32]
 800803a:	9309      	str	r3, [sp, #36]	; 0x24
 800803c:	4a95      	ldr	r2, [pc, #596]	; (8008294 <_dtoa_r+0x6a4>)
 800803e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008040:	4694      	mov	ip, r2
 8008042:	4463      	add	r3, ip
 8008044:	9317      	str	r3, [sp, #92]	; 0x5c
 8008046:	9309      	str	r3, [sp, #36]	; 0x24
 8008048:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800804a:	2b00      	cmp	r3, #0
 800804c:	d161      	bne.n	8008112 <_dtoa_r+0x522>
 800804e:	2200      	movs	r2, #0
 8008050:	0020      	movs	r0, r4
 8008052:	0029      	movs	r1, r5
 8008054:	4b90      	ldr	r3, [pc, #576]	; (8008298 <_dtoa_r+0x6a8>)
 8008056:	f7fa f919 	bl	800228c <__aeabi_dsub>
 800805a:	9a08      	ldr	r2, [sp, #32]
 800805c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800805e:	0004      	movs	r4, r0
 8008060:	000d      	movs	r5, r1
 8008062:	f7f8 fa13 	bl	800048c <__aeabi_dcmpgt>
 8008066:	2800      	cmp	r0, #0
 8008068:	d000      	beq.n	800806c <_dtoa_r+0x47c>
 800806a:	e2af      	b.n	80085cc <_dtoa_r+0x9dc>
 800806c:	488b      	ldr	r0, [pc, #556]	; (800829c <_dtoa_r+0x6ac>)
 800806e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008070:	4684      	mov	ip, r0
 8008072:	4461      	add	r1, ip
 8008074:	000b      	movs	r3, r1
 8008076:	0020      	movs	r0, r4
 8008078:	0029      	movs	r1, r5
 800807a:	9a08      	ldr	r2, [sp, #32]
 800807c:	f7f8 f9f2 	bl	8000464 <__aeabi_dcmplt>
 8008080:	2800      	cmp	r0, #0
 8008082:	d000      	beq.n	8008086 <_dtoa_r+0x496>
 8008084:	e29f      	b.n	80085c6 <_dtoa_r+0x9d6>
 8008086:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008088:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800808a:	9308      	str	r3, [sp, #32]
 800808c:	9409      	str	r4, [sp, #36]	; 0x24
 800808e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008090:	2b00      	cmp	r3, #0
 8008092:	da00      	bge.n	8008096 <_dtoa_r+0x4a6>
 8008094:	e172      	b.n	800837c <_dtoa_r+0x78c>
 8008096:	9a02      	ldr	r2, [sp, #8]
 8008098:	2a0e      	cmp	r2, #14
 800809a:	dd00      	ble.n	800809e <_dtoa_r+0x4ae>
 800809c:	e16e      	b.n	800837c <_dtoa_r+0x78c>
 800809e:	4b78      	ldr	r3, [pc, #480]	; (8008280 <_dtoa_r+0x690>)
 80080a0:	00d2      	lsls	r2, r2, #3
 80080a2:	189b      	adds	r3, r3, r2
 80080a4:	685c      	ldr	r4, [r3, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	930a      	str	r3, [sp, #40]	; 0x28
 80080aa:	940b      	str	r4, [sp, #44]	; 0x2c
 80080ac:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	db00      	blt.n	80080b4 <_dtoa_r+0x4c4>
 80080b2:	e0f7      	b.n	80082a4 <_dtoa_r+0x6b4>
 80080b4:	9b07      	ldr	r3, [sp, #28]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	dd00      	ble.n	80080bc <_dtoa_r+0x4cc>
 80080ba:	e0f3      	b.n	80082a4 <_dtoa_r+0x6b4>
 80080bc:	d000      	beq.n	80080c0 <_dtoa_r+0x4d0>
 80080be:	e282      	b.n	80085c6 <_dtoa_r+0x9d6>
 80080c0:	980a      	ldr	r0, [sp, #40]	; 0x28
 80080c2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80080c4:	2200      	movs	r2, #0
 80080c6:	4b74      	ldr	r3, [pc, #464]	; (8008298 <_dtoa_r+0x6a8>)
 80080c8:	f7f9 fe74 	bl	8001db4 <__aeabi_dmul>
 80080cc:	9a08      	ldr	r2, [sp, #32]
 80080ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080d0:	f7f8 f9e6 	bl	80004a0 <__aeabi_dcmpge>
 80080d4:	9e07      	ldr	r6, [sp, #28]
 80080d6:	0035      	movs	r5, r6
 80080d8:	2800      	cmp	r0, #0
 80080da:	d000      	beq.n	80080de <_dtoa_r+0x4ee>
 80080dc:	e259      	b.n	8008592 <_dtoa_r+0x9a2>
 80080de:	9b06      	ldr	r3, [sp, #24]
 80080e0:	9a06      	ldr	r2, [sp, #24]
 80080e2:	3301      	adds	r3, #1
 80080e4:	9308      	str	r3, [sp, #32]
 80080e6:	2331      	movs	r3, #49	; 0x31
 80080e8:	7013      	strb	r3, [r2, #0]
 80080ea:	9b02      	ldr	r3, [sp, #8]
 80080ec:	3301      	adds	r3, #1
 80080ee:	9302      	str	r3, [sp, #8]
 80080f0:	e254      	b.n	800859c <_dtoa_r+0x9ac>
 80080f2:	4234      	tst	r4, r6
 80080f4:	d007      	beq.n	8008106 <_dtoa_r+0x516>
 80080f6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80080f8:	3301      	adds	r3, #1
 80080fa:	9310      	str	r3, [sp, #64]	; 0x40
 80080fc:	682a      	ldr	r2, [r5, #0]
 80080fe:	686b      	ldr	r3, [r5, #4]
 8008100:	f7f9 fe58 	bl	8001db4 <__aeabi_dmul>
 8008104:	0033      	movs	r3, r6
 8008106:	1064      	asrs	r4, r4, #1
 8008108:	3508      	adds	r5, #8
 800810a:	e75a      	b.n	8007fc2 <_dtoa_r+0x3d2>
 800810c:	9e02      	ldr	r6, [sp, #8]
 800810e:	9b07      	ldr	r3, [sp, #28]
 8008110:	e780      	b.n	8008014 <_dtoa_r+0x424>
 8008112:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008114:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008116:	1e5a      	subs	r2, r3, #1
 8008118:	4b59      	ldr	r3, [pc, #356]	; (8008280 <_dtoa_r+0x690>)
 800811a:	00d2      	lsls	r2, r2, #3
 800811c:	189b      	adds	r3, r3, r2
 800811e:	681a      	ldr	r2, [r3, #0]
 8008120:	685b      	ldr	r3, [r3, #4]
 8008122:	2900      	cmp	r1, #0
 8008124:	d051      	beq.n	80081ca <_dtoa_r+0x5da>
 8008126:	2000      	movs	r0, #0
 8008128:	495d      	ldr	r1, [pc, #372]	; (80082a0 <_dtoa_r+0x6b0>)
 800812a:	f7f9 fa41 	bl	80015b0 <__aeabi_ddiv>
 800812e:	9a08      	ldr	r2, [sp, #32]
 8008130:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008132:	f7fa f8ab 	bl	800228c <__aeabi_dsub>
 8008136:	9a06      	ldr	r2, [sp, #24]
 8008138:	9b06      	ldr	r3, [sp, #24]
 800813a:	4694      	mov	ip, r2
 800813c:	9317      	str	r3, [sp, #92]	; 0x5c
 800813e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008140:	9010      	str	r0, [sp, #64]	; 0x40
 8008142:	9111      	str	r1, [sp, #68]	; 0x44
 8008144:	4463      	add	r3, ip
 8008146:	9319      	str	r3, [sp, #100]	; 0x64
 8008148:	0029      	movs	r1, r5
 800814a:	0020      	movs	r0, r4
 800814c:	f7fa fc4e 	bl	80029ec <__aeabi_d2iz>
 8008150:	9014      	str	r0, [sp, #80]	; 0x50
 8008152:	f7fa fc81 	bl	8002a58 <__aeabi_i2d>
 8008156:	0002      	movs	r2, r0
 8008158:	000b      	movs	r3, r1
 800815a:	0020      	movs	r0, r4
 800815c:	0029      	movs	r1, r5
 800815e:	f7fa f895 	bl	800228c <__aeabi_dsub>
 8008162:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008164:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008166:	3301      	adds	r3, #1
 8008168:	9308      	str	r3, [sp, #32]
 800816a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800816c:	0004      	movs	r4, r0
 800816e:	3330      	adds	r3, #48	; 0x30
 8008170:	7013      	strb	r3, [r2, #0]
 8008172:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008174:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008176:	000d      	movs	r5, r1
 8008178:	f7f8 f974 	bl	8000464 <__aeabi_dcmplt>
 800817c:	2800      	cmp	r0, #0
 800817e:	d175      	bne.n	800826c <_dtoa_r+0x67c>
 8008180:	0022      	movs	r2, r4
 8008182:	002b      	movs	r3, r5
 8008184:	2000      	movs	r0, #0
 8008186:	4940      	ldr	r1, [pc, #256]	; (8008288 <_dtoa_r+0x698>)
 8008188:	f7fa f880 	bl	800228c <__aeabi_dsub>
 800818c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800818e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008190:	f7f8 f968 	bl	8000464 <__aeabi_dcmplt>
 8008194:	2800      	cmp	r0, #0
 8008196:	d000      	beq.n	800819a <_dtoa_r+0x5aa>
 8008198:	e0d2      	b.n	8008340 <_dtoa_r+0x750>
 800819a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800819c:	9a08      	ldr	r2, [sp, #32]
 800819e:	4293      	cmp	r3, r2
 80081a0:	d100      	bne.n	80081a4 <_dtoa_r+0x5b4>
 80081a2:	e770      	b.n	8008086 <_dtoa_r+0x496>
 80081a4:	9810      	ldr	r0, [sp, #64]	; 0x40
 80081a6:	9911      	ldr	r1, [sp, #68]	; 0x44
 80081a8:	2200      	movs	r2, #0
 80081aa:	4b38      	ldr	r3, [pc, #224]	; (800828c <_dtoa_r+0x69c>)
 80081ac:	f7f9 fe02 	bl	8001db4 <__aeabi_dmul>
 80081b0:	4b36      	ldr	r3, [pc, #216]	; (800828c <_dtoa_r+0x69c>)
 80081b2:	9010      	str	r0, [sp, #64]	; 0x40
 80081b4:	9111      	str	r1, [sp, #68]	; 0x44
 80081b6:	2200      	movs	r2, #0
 80081b8:	0020      	movs	r0, r4
 80081ba:	0029      	movs	r1, r5
 80081bc:	f7f9 fdfa 	bl	8001db4 <__aeabi_dmul>
 80081c0:	9b08      	ldr	r3, [sp, #32]
 80081c2:	0004      	movs	r4, r0
 80081c4:	000d      	movs	r5, r1
 80081c6:	9317      	str	r3, [sp, #92]	; 0x5c
 80081c8:	e7be      	b.n	8008148 <_dtoa_r+0x558>
 80081ca:	9808      	ldr	r0, [sp, #32]
 80081cc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80081ce:	f7f9 fdf1 	bl	8001db4 <__aeabi_dmul>
 80081d2:	9a06      	ldr	r2, [sp, #24]
 80081d4:	9b06      	ldr	r3, [sp, #24]
 80081d6:	4694      	mov	ip, r2
 80081d8:	9308      	str	r3, [sp, #32]
 80081da:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80081dc:	9010      	str	r0, [sp, #64]	; 0x40
 80081de:	9111      	str	r1, [sp, #68]	; 0x44
 80081e0:	4463      	add	r3, ip
 80081e2:	9319      	str	r3, [sp, #100]	; 0x64
 80081e4:	0029      	movs	r1, r5
 80081e6:	0020      	movs	r0, r4
 80081e8:	f7fa fc00 	bl	80029ec <__aeabi_d2iz>
 80081ec:	9017      	str	r0, [sp, #92]	; 0x5c
 80081ee:	f7fa fc33 	bl	8002a58 <__aeabi_i2d>
 80081f2:	0002      	movs	r2, r0
 80081f4:	000b      	movs	r3, r1
 80081f6:	0020      	movs	r0, r4
 80081f8:	0029      	movs	r1, r5
 80081fa:	f7fa f847 	bl	800228c <__aeabi_dsub>
 80081fe:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008200:	9a08      	ldr	r2, [sp, #32]
 8008202:	3330      	adds	r3, #48	; 0x30
 8008204:	7013      	strb	r3, [r2, #0]
 8008206:	0013      	movs	r3, r2
 8008208:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800820a:	3301      	adds	r3, #1
 800820c:	0004      	movs	r4, r0
 800820e:	000d      	movs	r5, r1
 8008210:	9308      	str	r3, [sp, #32]
 8008212:	4293      	cmp	r3, r2
 8008214:	d12c      	bne.n	8008270 <_dtoa_r+0x680>
 8008216:	9810      	ldr	r0, [sp, #64]	; 0x40
 8008218:	9911      	ldr	r1, [sp, #68]	; 0x44
 800821a:	9a06      	ldr	r2, [sp, #24]
 800821c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800821e:	4694      	mov	ip, r2
 8008220:	4463      	add	r3, ip
 8008222:	2200      	movs	r2, #0
 8008224:	9308      	str	r3, [sp, #32]
 8008226:	4b1e      	ldr	r3, [pc, #120]	; (80082a0 <_dtoa_r+0x6b0>)
 8008228:	f7f8 fe86 	bl	8000f38 <__aeabi_dadd>
 800822c:	0002      	movs	r2, r0
 800822e:	000b      	movs	r3, r1
 8008230:	0020      	movs	r0, r4
 8008232:	0029      	movs	r1, r5
 8008234:	f7f8 f92a 	bl	800048c <__aeabi_dcmpgt>
 8008238:	2800      	cmp	r0, #0
 800823a:	d000      	beq.n	800823e <_dtoa_r+0x64e>
 800823c:	e080      	b.n	8008340 <_dtoa_r+0x750>
 800823e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008240:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008242:	2000      	movs	r0, #0
 8008244:	4916      	ldr	r1, [pc, #88]	; (80082a0 <_dtoa_r+0x6b0>)
 8008246:	f7fa f821 	bl	800228c <__aeabi_dsub>
 800824a:	0002      	movs	r2, r0
 800824c:	000b      	movs	r3, r1
 800824e:	0020      	movs	r0, r4
 8008250:	0029      	movs	r1, r5
 8008252:	f7f8 f907 	bl	8000464 <__aeabi_dcmplt>
 8008256:	2800      	cmp	r0, #0
 8008258:	d100      	bne.n	800825c <_dtoa_r+0x66c>
 800825a:	e714      	b.n	8008086 <_dtoa_r+0x496>
 800825c:	9b08      	ldr	r3, [sp, #32]
 800825e:	001a      	movs	r2, r3
 8008260:	3a01      	subs	r2, #1
 8008262:	9208      	str	r2, [sp, #32]
 8008264:	7812      	ldrb	r2, [r2, #0]
 8008266:	2a30      	cmp	r2, #48	; 0x30
 8008268:	d0f8      	beq.n	800825c <_dtoa_r+0x66c>
 800826a:	9308      	str	r3, [sp, #32]
 800826c:	9602      	str	r6, [sp, #8]
 800826e:	e055      	b.n	800831c <_dtoa_r+0x72c>
 8008270:	2200      	movs	r2, #0
 8008272:	4b06      	ldr	r3, [pc, #24]	; (800828c <_dtoa_r+0x69c>)
 8008274:	f7f9 fd9e 	bl	8001db4 <__aeabi_dmul>
 8008278:	0004      	movs	r4, r0
 800827a:	000d      	movs	r5, r1
 800827c:	e7b2      	b.n	80081e4 <_dtoa_r+0x5f4>
 800827e:	46c0      	nop			; (mov r8, r8)
 8008280:	0800b700 	.word	0x0800b700
 8008284:	0800b6d8 	.word	0x0800b6d8
 8008288:	3ff00000 	.word	0x3ff00000
 800828c:	40240000 	.word	0x40240000
 8008290:	401c0000 	.word	0x401c0000
 8008294:	fcc00000 	.word	0xfcc00000
 8008298:	40140000 	.word	0x40140000
 800829c:	7cc00000 	.word	0x7cc00000
 80082a0:	3fe00000 	.word	0x3fe00000
 80082a4:	9b07      	ldr	r3, [sp, #28]
 80082a6:	9e06      	ldr	r6, [sp, #24]
 80082a8:	3b01      	subs	r3, #1
 80082aa:	199b      	adds	r3, r3, r6
 80082ac:	930c      	str	r3, [sp, #48]	; 0x30
 80082ae:	9c08      	ldr	r4, [sp, #32]
 80082b0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80082b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80082b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80082b6:	0020      	movs	r0, r4
 80082b8:	0029      	movs	r1, r5
 80082ba:	f7f9 f979 	bl	80015b0 <__aeabi_ddiv>
 80082be:	f7fa fb95 	bl	80029ec <__aeabi_d2iz>
 80082c2:	9007      	str	r0, [sp, #28]
 80082c4:	f7fa fbc8 	bl	8002a58 <__aeabi_i2d>
 80082c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80082ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80082cc:	f7f9 fd72 	bl	8001db4 <__aeabi_dmul>
 80082d0:	0002      	movs	r2, r0
 80082d2:	000b      	movs	r3, r1
 80082d4:	0020      	movs	r0, r4
 80082d6:	0029      	movs	r1, r5
 80082d8:	f7f9 ffd8 	bl	800228c <__aeabi_dsub>
 80082dc:	0033      	movs	r3, r6
 80082de:	9a07      	ldr	r2, [sp, #28]
 80082e0:	3601      	adds	r6, #1
 80082e2:	3230      	adds	r2, #48	; 0x30
 80082e4:	701a      	strb	r2, [r3, #0]
 80082e6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80082e8:	9608      	str	r6, [sp, #32]
 80082ea:	429a      	cmp	r2, r3
 80082ec:	d139      	bne.n	8008362 <_dtoa_r+0x772>
 80082ee:	0002      	movs	r2, r0
 80082f0:	000b      	movs	r3, r1
 80082f2:	f7f8 fe21 	bl	8000f38 <__aeabi_dadd>
 80082f6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80082f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80082fa:	0004      	movs	r4, r0
 80082fc:	000d      	movs	r5, r1
 80082fe:	f7f8 f8c5 	bl	800048c <__aeabi_dcmpgt>
 8008302:	2800      	cmp	r0, #0
 8008304:	d11b      	bne.n	800833e <_dtoa_r+0x74e>
 8008306:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008308:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800830a:	0020      	movs	r0, r4
 800830c:	0029      	movs	r1, r5
 800830e:	f7f8 f8a3 	bl	8000458 <__aeabi_dcmpeq>
 8008312:	2800      	cmp	r0, #0
 8008314:	d002      	beq.n	800831c <_dtoa_r+0x72c>
 8008316:	9b07      	ldr	r3, [sp, #28]
 8008318:	07db      	lsls	r3, r3, #31
 800831a:	d410      	bmi.n	800833e <_dtoa_r+0x74e>
 800831c:	0038      	movs	r0, r7
 800831e:	9905      	ldr	r1, [sp, #20]
 8008320:	f000 fe80 	bl	8009024 <_Bfree>
 8008324:	2300      	movs	r3, #0
 8008326:	9a08      	ldr	r2, [sp, #32]
 8008328:	9802      	ldr	r0, [sp, #8]
 800832a:	7013      	strb	r3, [r2, #0]
 800832c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800832e:	3001      	adds	r0, #1
 8008330:	6018      	str	r0, [r3, #0]
 8008332:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008334:	2b00      	cmp	r3, #0
 8008336:	d100      	bne.n	800833a <_dtoa_r+0x74a>
 8008338:	e4a6      	b.n	8007c88 <_dtoa_r+0x98>
 800833a:	601a      	str	r2, [r3, #0]
 800833c:	e4a4      	b.n	8007c88 <_dtoa_r+0x98>
 800833e:	9e02      	ldr	r6, [sp, #8]
 8008340:	9b08      	ldr	r3, [sp, #32]
 8008342:	9308      	str	r3, [sp, #32]
 8008344:	3b01      	subs	r3, #1
 8008346:	781a      	ldrb	r2, [r3, #0]
 8008348:	2a39      	cmp	r2, #57	; 0x39
 800834a:	d106      	bne.n	800835a <_dtoa_r+0x76a>
 800834c:	9a06      	ldr	r2, [sp, #24]
 800834e:	429a      	cmp	r2, r3
 8008350:	d1f7      	bne.n	8008342 <_dtoa_r+0x752>
 8008352:	2230      	movs	r2, #48	; 0x30
 8008354:	9906      	ldr	r1, [sp, #24]
 8008356:	3601      	adds	r6, #1
 8008358:	700a      	strb	r2, [r1, #0]
 800835a:	781a      	ldrb	r2, [r3, #0]
 800835c:	3201      	adds	r2, #1
 800835e:	701a      	strb	r2, [r3, #0]
 8008360:	e784      	b.n	800826c <_dtoa_r+0x67c>
 8008362:	2200      	movs	r2, #0
 8008364:	4baa      	ldr	r3, [pc, #680]	; (8008610 <_dtoa_r+0xa20>)
 8008366:	f7f9 fd25 	bl	8001db4 <__aeabi_dmul>
 800836a:	2200      	movs	r2, #0
 800836c:	2300      	movs	r3, #0
 800836e:	0004      	movs	r4, r0
 8008370:	000d      	movs	r5, r1
 8008372:	f7f8 f871 	bl	8000458 <__aeabi_dcmpeq>
 8008376:	2800      	cmp	r0, #0
 8008378:	d09b      	beq.n	80082b2 <_dtoa_r+0x6c2>
 800837a:	e7cf      	b.n	800831c <_dtoa_r+0x72c>
 800837c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800837e:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8008380:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008382:	2d00      	cmp	r5, #0
 8008384:	d012      	beq.n	80083ac <_dtoa_r+0x7bc>
 8008386:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008388:	2a01      	cmp	r2, #1
 800838a:	dc66      	bgt.n	800845a <_dtoa_r+0x86a>
 800838c:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800838e:	2a00      	cmp	r2, #0
 8008390:	d05d      	beq.n	800844e <_dtoa_r+0x85e>
 8008392:	4aa0      	ldr	r2, [pc, #640]	; (8008614 <_dtoa_r+0xa24>)
 8008394:	189b      	adds	r3, r3, r2
 8008396:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008398:	2101      	movs	r1, #1
 800839a:	18d2      	adds	r2, r2, r3
 800839c:	920a      	str	r2, [sp, #40]	; 0x28
 800839e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80083a0:	0038      	movs	r0, r7
 80083a2:	18d3      	adds	r3, r2, r3
 80083a4:	930d      	str	r3, [sp, #52]	; 0x34
 80083a6:	f000 ff39 	bl	800921c <__i2b>
 80083aa:	0005      	movs	r5, r0
 80083ac:	2c00      	cmp	r4, #0
 80083ae:	dd0e      	ble.n	80083ce <_dtoa_r+0x7de>
 80083b0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	dd0b      	ble.n	80083ce <_dtoa_r+0x7de>
 80083b6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80083b8:	0023      	movs	r3, r4
 80083ba:	4294      	cmp	r4, r2
 80083bc:	dd00      	ble.n	80083c0 <_dtoa_r+0x7d0>
 80083be:	0013      	movs	r3, r2
 80083c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80083c2:	1ae4      	subs	r4, r4, r3
 80083c4:	1ad2      	subs	r2, r2, r3
 80083c6:	920a      	str	r2, [sp, #40]	; 0x28
 80083c8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80083ca:	1ad3      	subs	r3, r2, r3
 80083cc:	930d      	str	r3, [sp, #52]	; 0x34
 80083ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d01f      	beq.n	8008414 <_dtoa_r+0x824>
 80083d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d054      	beq.n	8008484 <_dtoa_r+0x894>
 80083da:	2e00      	cmp	r6, #0
 80083dc:	dd11      	ble.n	8008402 <_dtoa_r+0x812>
 80083de:	0029      	movs	r1, r5
 80083e0:	0032      	movs	r2, r6
 80083e2:	0038      	movs	r0, r7
 80083e4:	f000 ffe0 	bl	80093a8 <__pow5mult>
 80083e8:	9a05      	ldr	r2, [sp, #20]
 80083ea:	0001      	movs	r1, r0
 80083ec:	0005      	movs	r5, r0
 80083ee:	0038      	movs	r0, r7
 80083f0:	f000 ff2a 	bl	8009248 <__multiply>
 80083f4:	9905      	ldr	r1, [sp, #20]
 80083f6:	9014      	str	r0, [sp, #80]	; 0x50
 80083f8:	0038      	movs	r0, r7
 80083fa:	f000 fe13 	bl	8009024 <_Bfree>
 80083fe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008400:	9305      	str	r3, [sp, #20]
 8008402:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008404:	1b9a      	subs	r2, r3, r6
 8008406:	42b3      	cmp	r3, r6
 8008408:	d004      	beq.n	8008414 <_dtoa_r+0x824>
 800840a:	0038      	movs	r0, r7
 800840c:	9905      	ldr	r1, [sp, #20]
 800840e:	f000 ffcb 	bl	80093a8 <__pow5mult>
 8008412:	9005      	str	r0, [sp, #20]
 8008414:	2101      	movs	r1, #1
 8008416:	0038      	movs	r0, r7
 8008418:	f000 ff00 	bl	800921c <__i2b>
 800841c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800841e:	0006      	movs	r6, r0
 8008420:	2b00      	cmp	r3, #0
 8008422:	dd31      	ble.n	8008488 <_dtoa_r+0x898>
 8008424:	001a      	movs	r2, r3
 8008426:	0001      	movs	r1, r0
 8008428:	0038      	movs	r0, r7
 800842a:	f000 ffbd 	bl	80093a8 <__pow5mult>
 800842e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008430:	0006      	movs	r6, r0
 8008432:	2b01      	cmp	r3, #1
 8008434:	dd2d      	ble.n	8008492 <_dtoa_r+0x8a2>
 8008436:	2300      	movs	r3, #0
 8008438:	930e      	str	r3, [sp, #56]	; 0x38
 800843a:	6933      	ldr	r3, [r6, #16]
 800843c:	3303      	adds	r3, #3
 800843e:	009b      	lsls	r3, r3, #2
 8008440:	18f3      	adds	r3, r6, r3
 8008442:	6858      	ldr	r0, [r3, #4]
 8008444:	f000 fea2 	bl	800918c <__hi0bits>
 8008448:	2320      	movs	r3, #32
 800844a:	1a18      	subs	r0, r3, r0
 800844c:	e039      	b.n	80084c2 <_dtoa_r+0x8d2>
 800844e:	2336      	movs	r3, #54	; 0x36
 8008450:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008452:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8008454:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008456:	1a9b      	subs	r3, r3, r2
 8008458:	e79d      	b.n	8008396 <_dtoa_r+0x7a6>
 800845a:	9b07      	ldr	r3, [sp, #28]
 800845c:	1e5e      	subs	r6, r3, #1
 800845e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008460:	42b3      	cmp	r3, r6
 8008462:	db07      	blt.n	8008474 <_dtoa_r+0x884>
 8008464:	1b9e      	subs	r6, r3, r6
 8008466:	9b07      	ldr	r3, [sp, #28]
 8008468:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800846a:	2b00      	cmp	r3, #0
 800846c:	da93      	bge.n	8008396 <_dtoa_r+0x7a6>
 800846e:	1ae4      	subs	r4, r4, r3
 8008470:	2300      	movs	r3, #0
 8008472:	e790      	b.n	8008396 <_dtoa_r+0x7a6>
 8008474:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008476:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008478:	1af3      	subs	r3, r6, r3
 800847a:	18d3      	adds	r3, r2, r3
 800847c:	960e      	str	r6, [sp, #56]	; 0x38
 800847e:	9315      	str	r3, [sp, #84]	; 0x54
 8008480:	2600      	movs	r6, #0
 8008482:	e7f0      	b.n	8008466 <_dtoa_r+0x876>
 8008484:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008486:	e7c0      	b.n	800840a <_dtoa_r+0x81a>
 8008488:	2300      	movs	r3, #0
 800848a:	930e      	str	r3, [sp, #56]	; 0x38
 800848c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800848e:	2b01      	cmp	r3, #1
 8008490:	dc13      	bgt.n	80084ba <_dtoa_r+0x8ca>
 8008492:	2300      	movs	r3, #0
 8008494:	930e      	str	r3, [sp, #56]	; 0x38
 8008496:	9b08      	ldr	r3, [sp, #32]
 8008498:	2b00      	cmp	r3, #0
 800849a:	d10e      	bne.n	80084ba <_dtoa_r+0x8ca>
 800849c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800849e:	031b      	lsls	r3, r3, #12
 80084a0:	d10b      	bne.n	80084ba <_dtoa_r+0x8ca>
 80084a2:	4b5d      	ldr	r3, [pc, #372]	; (8008618 <_dtoa_r+0xa28>)
 80084a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80084a6:	4213      	tst	r3, r2
 80084a8:	d007      	beq.n	80084ba <_dtoa_r+0x8ca>
 80084aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80084ac:	3301      	adds	r3, #1
 80084ae:	930a      	str	r3, [sp, #40]	; 0x28
 80084b0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80084b2:	3301      	adds	r3, #1
 80084b4:	930d      	str	r3, [sp, #52]	; 0x34
 80084b6:	2301      	movs	r3, #1
 80084b8:	930e      	str	r3, [sp, #56]	; 0x38
 80084ba:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80084bc:	2001      	movs	r0, #1
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d1bb      	bne.n	800843a <_dtoa_r+0x84a>
 80084c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80084c4:	221f      	movs	r2, #31
 80084c6:	1818      	adds	r0, r3, r0
 80084c8:	0003      	movs	r3, r0
 80084ca:	4013      	ands	r3, r2
 80084cc:	4210      	tst	r0, r2
 80084ce:	d046      	beq.n	800855e <_dtoa_r+0x96e>
 80084d0:	3201      	adds	r2, #1
 80084d2:	1ad2      	subs	r2, r2, r3
 80084d4:	2a04      	cmp	r2, #4
 80084d6:	dd3f      	ble.n	8008558 <_dtoa_r+0x968>
 80084d8:	221c      	movs	r2, #28
 80084da:	1ad3      	subs	r3, r2, r3
 80084dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80084de:	18e4      	adds	r4, r4, r3
 80084e0:	18d2      	adds	r2, r2, r3
 80084e2:	920a      	str	r2, [sp, #40]	; 0x28
 80084e4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80084e6:	18d3      	adds	r3, r2, r3
 80084e8:	930d      	str	r3, [sp, #52]	; 0x34
 80084ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	dd05      	ble.n	80084fc <_dtoa_r+0x90c>
 80084f0:	001a      	movs	r2, r3
 80084f2:	0038      	movs	r0, r7
 80084f4:	9905      	ldr	r1, [sp, #20]
 80084f6:	f000 ffb3 	bl	8009460 <__lshift>
 80084fa:	9005      	str	r0, [sp, #20]
 80084fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80084fe:	2b00      	cmp	r3, #0
 8008500:	dd05      	ble.n	800850e <_dtoa_r+0x91e>
 8008502:	0031      	movs	r1, r6
 8008504:	001a      	movs	r2, r3
 8008506:	0038      	movs	r0, r7
 8008508:	f000 ffaa 	bl	8009460 <__lshift>
 800850c:	0006      	movs	r6, r0
 800850e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008510:	2b00      	cmp	r3, #0
 8008512:	d026      	beq.n	8008562 <_dtoa_r+0x972>
 8008514:	0031      	movs	r1, r6
 8008516:	9805      	ldr	r0, [sp, #20]
 8008518:	f001 f810 	bl	800953c <__mcmp>
 800851c:	2800      	cmp	r0, #0
 800851e:	da20      	bge.n	8008562 <_dtoa_r+0x972>
 8008520:	9b02      	ldr	r3, [sp, #8]
 8008522:	220a      	movs	r2, #10
 8008524:	3b01      	subs	r3, #1
 8008526:	9302      	str	r3, [sp, #8]
 8008528:	0038      	movs	r0, r7
 800852a:	2300      	movs	r3, #0
 800852c:	9905      	ldr	r1, [sp, #20]
 800852e:	f000 fd9d 	bl	800906c <__multadd>
 8008532:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008534:	9005      	str	r0, [sp, #20]
 8008536:	2b00      	cmp	r3, #0
 8008538:	d100      	bne.n	800853c <_dtoa_r+0x94c>
 800853a:	e166      	b.n	800880a <_dtoa_r+0xc1a>
 800853c:	2300      	movs	r3, #0
 800853e:	0029      	movs	r1, r5
 8008540:	220a      	movs	r2, #10
 8008542:	0038      	movs	r0, r7
 8008544:	f000 fd92 	bl	800906c <__multadd>
 8008548:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800854a:	0005      	movs	r5, r0
 800854c:	2b00      	cmp	r3, #0
 800854e:	dc47      	bgt.n	80085e0 <_dtoa_r+0x9f0>
 8008550:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008552:	2b02      	cmp	r3, #2
 8008554:	dc0d      	bgt.n	8008572 <_dtoa_r+0x982>
 8008556:	e043      	b.n	80085e0 <_dtoa_r+0x9f0>
 8008558:	2a04      	cmp	r2, #4
 800855a:	d0c6      	beq.n	80084ea <_dtoa_r+0x8fa>
 800855c:	0013      	movs	r3, r2
 800855e:	331c      	adds	r3, #28
 8008560:	e7bc      	b.n	80084dc <_dtoa_r+0x8ec>
 8008562:	9b07      	ldr	r3, [sp, #28]
 8008564:	2b00      	cmp	r3, #0
 8008566:	dc35      	bgt.n	80085d4 <_dtoa_r+0x9e4>
 8008568:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800856a:	2b02      	cmp	r3, #2
 800856c:	dd32      	ble.n	80085d4 <_dtoa_r+0x9e4>
 800856e:	9b07      	ldr	r3, [sp, #28]
 8008570:	930c      	str	r3, [sp, #48]	; 0x30
 8008572:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008574:	2b00      	cmp	r3, #0
 8008576:	d10c      	bne.n	8008592 <_dtoa_r+0x9a2>
 8008578:	0031      	movs	r1, r6
 800857a:	2205      	movs	r2, #5
 800857c:	0038      	movs	r0, r7
 800857e:	f000 fd75 	bl	800906c <__multadd>
 8008582:	0006      	movs	r6, r0
 8008584:	0001      	movs	r1, r0
 8008586:	9805      	ldr	r0, [sp, #20]
 8008588:	f000 ffd8 	bl	800953c <__mcmp>
 800858c:	2800      	cmp	r0, #0
 800858e:	dd00      	ble.n	8008592 <_dtoa_r+0x9a2>
 8008590:	e5a5      	b.n	80080de <_dtoa_r+0x4ee>
 8008592:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008594:	43db      	mvns	r3, r3
 8008596:	9302      	str	r3, [sp, #8]
 8008598:	9b06      	ldr	r3, [sp, #24]
 800859a:	9308      	str	r3, [sp, #32]
 800859c:	2400      	movs	r4, #0
 800859e:	0031      	movs	r1, r6
 80085a0:	0038      	movs	r0, r7
 80085a2:	f000 fd3f 	bl	8009024 <_Bfree>
 80085a6:	2d00      	cmp	r5, #0
 80085a8:	d100      	bne.n	80085ac <_dtoa_r+0x9bc>
 80085aa:	e6b7      	b.n	800831c <_dtoa_r+0x72c>
 80085ac:	2c00      	cmp	r4, #0
 80085ae:	d005      	beq.n	80085bc <_dtoa_r+0x9cc>
 80085b0:	42ac      	cmp	r4, r5
 80085b2:	d003      	beq.n	80085bc <_dtoa_r+0x9cc>
 80085b4:	0021      	movs	r1, r4
 80085b6:	0038      	movs	r0, r7
 80085b8:	f000 fd34 	bl	8009024 <_Bfree>
 80085bc:	0029      	movs	r1, r5
 80085be:	0038      	movs	r0, r7
 80085c0:	f000 fd30 	bl	8009024 <_Bfree>
 80085c4:	e6aa      	b.n	800831c <_dtoa_r+0x72c>
 80085c6:	2600      	movs	r6, #0
 80085c8:	0035      	movs	r5, r6
 80085ca:	e7e2      	b.n	8008592 <_dtoa_r+0x9a2>
 80085cc:	9602      	str	r6, [sp, #8]
 80085ce:	9e14      	ldr	r6, [sp, #80]	; 0x50
 80085d0:	0035      	movs	r5, r6
 80085d2:	e584      	b.n	80080de <_dtoa_r+0x4ee>
 80085d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d100      	bne.n	80085dc <_dtoa_r+0x9ec>
 80085da:	e0ce      	b.n	800877a <_dtoa_r+0xb8a>
 80085dc:	9b07      	ldr	r3, [sp, #28]
 80085de:	930c      	str	r3, [sp, #48]	; 0x30
 80085e0:	2c00      	cmp	r4, #0
 80085e2:	dd05      	ble.n	80085f0 <_dtoa_r+0xa00>
 80085e4:	0029      	movs	r1, r5
 80085e6:	0022      	movs	r2, r4
 80085e8:	0038      	movs	r0, r7
 80085ea:	f000 ff39 	bl	8009460 <__lshift>
 80085ee:	0005      	movs	r5, r0
 80085f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80085f2:	0028      	movs	r0, r5
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d022      	beq.n	800863e <_dtoa_r+0xa4e>
 80085f8:	0038      	movs	r0, r7
 80085fa:	6869      	ldr	r1, [r5, #4]
 80085fc:	f000 fcce 	bl	8008f9c <_Balloc>
 8008600:	1e04      	subs	r4, r0, #0
 8008602:	d10f      	bne.n	8008624 <_dtoa_r+0xa34>
 8008604:	0002      	movs	r2, r0
 8008606:	4b05      	ldr	r3, [pc, #20]	; (800861c <_dtoa_r+0xa2c>)
 8008608:	4905      	ldr	r1, [pc, #20]	; (8008620 <_dtoa_r+0xa30>)
 800860a:	f7ff fb06 	bl	8007c1a <_dtoa_r+0x2a>
 800860e:	46c0      	nop			; (mov r8, r8)
 8008610:	40240000 	.word	0x40240000
 8008614:	00000433 	.word	0x00000433
 8008618:	7ff00000 	.word	0x7ff00000
 800861c:	0800b5f0 	.word	0x0800b5f0
 8008620:	000002ea 	.word	0x000002ea
 8008624:	0029      	movs	r1, r5
 8008626:	692b      	ldr	r3, [r5, #16]
 8008628:	310c      	adds	r1, #12
 800862a:	1c9a      	adds	r2, r3, #2
 800862c:	0092      	lsls	r2, r2, #2
 800862e:	300c      	adds	r0, #12
 8008630:	f000 fcab 	bl	8008f8a <memcpy>
 8008634:	2201      	movs	r2, #1
 8008636:	0021      	movs	r1, r4
 8008638:	0038      	movs	r0, r7
 800863a:	f000 ff11 	bl	8009460 <__lshift>
 800863e:	9b06      	ldr	r3, [sp, #24]
 8008640:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008642:	930a      	str	r3, [sp, #40]	; 0x28
 8008644:	3b01      	subs	r3, #1
 8008646:	189b      	adds	r3, r3, r2
 8008648:	2201      	movs	r2, #1
 800864a:	002c      	movs	r4, r5
 800864c:	0005      	movs	r5, r0
 800864e:	9314      	str	r3, [sp, #80]	; 0x50
 8008650:	9b08      	ldr	r3, [sp, #32]
 8008652:	4013      	ands	r3, r2
 8008654:	930f      	str	r3, [sp, #60]	; 0x3c
 8008656:	0031      	movs	r1, r6
 8008658:	9805      	ldr	r0, [sp, #20]
 800865a:	f7ff fa3d 	bl	8007ad8 <quorem>
 800865e:	0003      	movs	r3, r0
 8008660:	0021      	movs	r1, r4
 8008662:	3330      	adds	r3, #48	; 0x30
 8008664:	900d      	str	r0, [sp, #52]	; 0x34
 8008666:	9805      	ldr	r0, [sp, #20]
 8008668:	9307      	str	r3, [sp, #28]
 800866a:	f000 ff67 	bl	800953c <__mcmp>
 800866e:	002a      	movs	r2, r5
 8008670:	900e      	str	r0, [sp, #56]	; 0x38
 8008672:	0031      	movs	r1, r6
 8008674:	0038      	movs	r0, r7
 8008676:	f000 ff7d 	bl	8009574 <__mdiff>
 800867a:	68c3      	ldr	r3, [r0, #12]
 800867c:	9008      	str	r0, [sp, #32]
 800867e:	9310      	str	r3, [sp, #64]	; 0x40
 8008680:	2301      	movs	r3, #1
 8008682:	930c      	str	r3, [sp, #48]	; 0x30
 8008684:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008686:	2b00      	cmp	r3, #0
 8008688:	d104      	bne.n	8008694 <_dtoa_r+0xaa4>
 800868a:	0001      	movs	r1, r0
 800868c:	9805      	ldr	r0, [sp, #20]
 800868e:	f000 ff55 	bl	800953c <__mcmp>
 8008692:	900c      	str	r0, [sp, #48]	; 0x30
 8008694:	0038      	movs	r0, r7
 8008696:	9908      	ldr	r1, [sp, #32]
 8008698:	f000 fcc4 	bl	8009024 <_Bfree>
 800869c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800869e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80086a0:	3301      	adds	r3, #1
 80086a2:	9308      	str	r3, [sp, #32]
 80086a4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80086a6:	4313      	orrs	r3, r2
 80086a8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80086aa:	4313      	orrs	r3, r2
 80086ac:	d10c      	bne.n	80086c8 <_dtoa_r+0xad8>
 80086ae:	9b07      	ldr	r3, [sp, #28]
 80086b0:	2b39      	cmp	r3, #57	; 0x39
 80086b2:	d026      	beq.n	8008702 <_dtoa_r+0xb12>
 80086b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	dd02      	ble.n	80086c0 <_dtoa_r+0xad0>
 80086ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80086bc:	3331      	adds	r3, #49	; 0x31
 80086be:	9307      	str	r3, [sp, #28]
 80086c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80086c2:	9a07      	ldr	r2, [sp, #28]
 80086c4:	701a      	strb	r2, [r3, #0]
 80086c6:	e76a      	b.n	800859e <_dtoa_r+0x9ae>
 80086c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	db04      	blt.n	80086d8 <_dtoa_r+0xae8>
 80086ce:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80086d0:	4313      	orrs	r3, r2
 80086d2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80086d4:	4313      	orrs	r3, r2
 80086d6:	d11f      	bne.n	8008718 <_dtoa_r+0xb28>
 80086d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80086da:	2b00      	cmp	r3, #0
 80086dc:	ddf0      	ble.n	80086c0 <_dtoa_r+0xad0>
 80086de:	9905      	ldr	r1, [sp, #20]
 80086e0:	2201      	movs	r2, #1
 80086e2:	0038      	movs	r0, r7
 80086e4:	f000 febc 	bl	8009460 <__lshift>
 80086e8:	0031      	movs	r1, r6
 80086ea:	9005      	str	r0, [sp, #20]
 80086ec:	f000 ff26 	bl	800953c <__mcmp>
 80086f0:	2800      	cmp	r0, #0
 80086f2:	dc03      	bgt.n	80086fc <_dtoa_r+0xb0c>
 80086f4:	d1e4      	bne.n	80086c0 <_dtoa_r+0xad0>
 80086f6:	9b07      	ldr	r3, [sp, #28]
 80086f8:	07db      	lsls	r3, r3, #31
 80086fa:	d5e1      	bpl.n	80086c0 <_dtoa_r+0xad0>
 80086fc:	9b07      	ldr	r3, [sp, #28]
 80086fe:	2b39      	cmp	r3, #57	; 0x39
 8008700:	d1db      	bne.n	80086ba <_dtoa_r+0xaca>
 8008702:	2339      	movs	r3, #57	; 0x39
 8008704:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008706:	7013      	strb	r3, [r2, #0]
 8008708:	9b08      	ldr	r3, [sp, #32]
 800870a:	9308      	str	r3, [sp, #32]
 800870c:	3b01      	subs	r3, #1
 800870e:	781a      	ldrb	r2, [r3, #0]
 8008710:	2a39      	cmp	r2, #57	; 0x39
 8008712:	d068      	beq.n	80087e6 <_dtoa_r+0xbf6>
 8008714:	3201      	adds	r2, #1
 8008716:	e7d5      	b.n	80086c4 <_dtoa_r+0xad4>
 8008718:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800871a:	2b00      	cmp	r3, #0
 800871c:	dd07      	ble.n	800872e <_dtoa_r+0xb3e>
 800871e:	9b07      	ldr	r3, [sp, #28]
 8008720:	2b39      	cmp	r3, #57	; 0x39
 8008722:	d0ee      	beq.n	8008702 <_dtoa_r+0xb12>
 8008724:	9b07      	ldr	r3, [sp, #28]
 8008726:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008728:	3301      	adds	r3, #1
 800872a:	7013      	strb	r3, [r2, #0]
 800872c:	e737      	b.n	800859e <_dtoa_r+0x9ae>
 800872e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008730:	9a07      	ldr	r2, [sp, #28]
 8008732:	701a      	strb	r2, [r3, #0]
 8008734:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008736:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008738:	4293      	cmp	r3, r2
 800873a:	d03e      	beq.n	80087ba <_dtoa_r+0xbca>
 800873c:	2300      	movs	r3, #0
 800873e:	220a      	movs	r2, #10
 8008740:	9905      	ldr	r1, [sp, #20]
 8008742:	0038      	movs	r0, r7
 8008744:	f000 fc92 	bl	800906c <__multadd>
 8008748:	2300      	movs	r3, #0
 800874a:	9005      	str	r0, [sp, #20]
 800874c:	220a      	movs	r2, #10
 800874e:	0021      	movs	r1, r4
 8008750:	0038      	movs	r0, r7
 8008752:	42ac      	cmp	r4, r5
 8008754:	d106      	bne.n	8008764 <_dtoa_r+0xb74>
 8008756:	f000 fc89 	bl	800906c <__multadd>
 800875a:	0004      	movs	r4, r0
 800875c:	0005      	movs	r5, r0
 800875e:	9b08      	ldr	r3, [sp, #32]
 8008760:	930a      	str	r3, [sp, #40]	; 0x28
 8008762:	e778      	b.n	8008656 <_dtoa_r+0xa66>
 8008764:	f000 fc82 	bl	800906c <__multadd>
 8008768:	0029      	movs	r1, r5
 800876a:	0004      	movs	r4, r0
 800876c:	2300      	movs	r3, #0
 800876e:	220a      	movs	r2, #10
 8008770:	0038      	movs	r0, r7
 8008772:	f000 fc7b 	bl	800906c <__multadd>
 8008776:	0005      	movs	r5, r0
 8008778:	e7f1      	b.n	800875e <_dtoa_r+0xb6e>
 800877a:	9b07      	ldr	r3, [sp, #28]
 800877c:	930c      	str	r3, [sp, #48]	; 0x30
 800877e:	2400      	movs	r4, #0
 8008780:	0031      	movs	r1, r6
 8008782:	9805      	ldr	r0, [sp, #20]
 8008784:	f7ff f9a8 	bl	8007ad8 <quorem>
 8008788:	9b06      	ldr	r3, [sp, #24]
 800878a:	3030      	adds	r0, #48	; 0x30
 800878c:	5518      	strb	r0, [r3, r4]
 800878e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008790:	3401      	adds	r4, #1
 8008792:	9007      	str	r0, [sp, #28]
 8008794:	42a3      	cmp	r3, r4
 8008796:	dd07      	ble.n	80087a8 <_dtoa_r+0xbb8>
 8008798:	2300      	movs	r3, #0
 800879a:	220a      	movs	r2, #10
 800879c:	0038      	movs	r0, r7
 800879e:	9905      	ldr	r1, [sp, #20]
 80087a0:	f000 fc64 	bl	800906c <__multadd>
 80087a4:	9005      	str	r0, [sp, #20]
 80087a6:	e7eb      	b.n	8008780 <_dtoa_r+0xb90>
 80087a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80087aa:	2001      	movs	r0, #1
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	dd00      	ble.n	80087b2 <_dtoa_r+0xbc2>
 80087b0:	0018      	movs	r0, r3
 80087b2:	2400      	movs	r4, #0
 80087b4:	9b06      	ldr	r3, [sp, #24]
 80087b6:	181b      	adds	r3, r3, r0
 80087b8:	9308      	str	r3, [sp, #32]
 80087ba:	9905      	ldr	r1, [sp, #20]
 80087bc:	2201      	movs	r2, #1
 80087be:	0038      	movs	r0, r7
 80087c0:	f000 fe4e 	bl	8009460 <__lshift>
 80087c4:	0031      	movs	r1, r6
 80087c6:	9005      	str	r0, [sp, #20]
 80087c8:	f000 feb8 	bl	800953c <__mcmp>
 80087cc:	2800      	cmp	r0, #0
 80087ce:	dc9b      	bgt.n	8008708 <_dtoa_r+0xb18>
 80087d0:	d102      	bne.n	80087d8 <_dtoa_r+0xbe8>
 80087d2:	9b07      	ldr	r3, [sp, #28]
 80087d4:	07db      	lsls	r3, r3, #31
 80087d6:	d497      	bmi.n	8008708 <_dtoa_r+0xb18>
 80087d8:	9b08      	ldr	r3, [sp, #32]
 80087da:	9308      	str	r3, [sp, #32]
 80087dc:	3b01      	subs	r3, #1
 80087de:	781a      	ldrb	r2, [r3, #0]
 80087e0:	2a30      	cmp	r2, #48	; 0x30
 80087e2:	d0fa      	beq.n	80087da <_dtoa_r+0xbea>
 80087e4:	e6db      	b.n	800859e <_dtoa_r+0x9ae>
 80087e6:	9a06      	ldr	r2, [sp, #24]
 80087e8:	429a      	cmp	r2, r3
 80087ea:	d18e      	bne.n	800870a <_dtoa_r+0xb1a>
 80087ec:	9b02      	ldr	r3, [sp, #8]
 80087ee:	3301      	adds	r3, #1
 80087f0:	9302      	str	r3, [sp, #8]
 80087f2:	2331      	movs	r3, #49	; 0x31
 80087f4:	e799      	b.n	800872a <_dtoa_r+0xb3a>
 80087f6:	4b09      	ldr	r3, [pc, #36]	; (800881c <_dtoa_r+0xc2c>)
 80087f8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80087fa:	9306      	str	r3, [sp, #24]
 80087fc:	4b08      	ldr	r3, [pc, #32]	; (8008820 <_dtoa_r+0xc30>)
 80087fe:	2a00      	cmp	r2, #0
 8008800:	d001      	beq.n	8008806 <_dtoa_r+0xc16>
 8008802:	f7ff fa3f 	bl	8007c84 <_dtoa_r+0x94>
 8008806:	f7ff fa3f 	bl	8007c88 <_dtoa_r+0x98>
 800880a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800880c:	2b00      	cmp	r3, #0
 800880e:	dcb6      	bgt.n	800877e <_dtoa_r+0xb8e>
 8008810:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008812:	2b02      	cmp	r3, #2
 8008814:	dd00      	ble.n	8008818 <_dtoa_r+0xc28>
 8008816:	e6ac      	b.n	8008572 <_dtoa_r+0x982>
 8008818:	e7b1      	b.n	800877e <_dtoa_r+0xb8e>
 800881a:	46c0      	nop			; (mov r8, r8)
 800881c:	0800b571 	.word	0x0800b571
 8008820:	0800b579 	.word	0x0800b579

08008824 <rshift>:
 8008824:	0002      	movs	r2, r0
 8008826:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008828:	6904      	ldr	r4, [r0, #16]
 800882a:	3214      	adds	r2, #20
 800882c:	0013      	movs	r3, r2
 800882e:	b085      	sub	sp, #20
 8008830:	114f      	asrs	r7, r1, #5
 8008832:	42bc      	cmp	r4, r7
 8008834:	dd31      	ble.n	800889a <rshift+0x76>
 8008836:	00bb      	lsls	r3, r7, #2
 8008838:	18d3      	adds	r3, r2, r3
 800883a:	261f      	movs	r6, #31
 800883c:	9301      	str	r3, [sp, #4]
 800883e:	000b      	movs	r3, r1
 8008840:	00a5      	lsls	r5, r4, #2
 8008842:	4033      	ands	r3, r6
 8008844:	1955      	adds	r5, r2, r5
 8008846:	9302      	str	r3, [sp, #8]
 8008848:	4231      	tst	r1, r6
 800884a:	d10c      	bne.n	8008866 <rshift+0x42>
 800884c:	0016      	movs	r6, r2
 800884e:	9901      	ldr	r1, [sp, #4]
 8008850:	428d      	cmp	r5, r1
 8008852:	d838      	bhi.n	80088c6 <rshift+0xa2>
 8008854:	9901      	ldr	r1, [sp, #4]
 8008856:	2300      	movs	r3, #0
 8008858:	3903      	subs	r1, #3
 800885a:	428d      	cmp	r5, r1
 800885c:	d301      	bcc.n	8008862 <rshift+0x3e>
 800885e:	1be3      	subs	r3, r4, r7
 8008860:	009b      	lsls	r3, r3, #2
 8008862:	18d3      	adds	r3, r2, r3
 8008864:	e019      	b.n	800889a <rshift+0x76>
 8008866:	2120      	movs	r1, #32
 8008868:	9b02      	ldr	r3, [sp, #8]
 800886a:	9e01      	ldr	r6, [sp, #4]
 800886c:	1acb      	subs	r3, r1, r3
 800886e:	9303      	str	r3, [sp, #12]
 8008870:	ce02      	ldmia	r6!, {r1}
 8008872:	9b02      	ldr	r3, [sp, #8]
 8008874:	4694      	mov	ip, r2
 8008876:	40d9      	lsrs	r1, r3
 8008878:	9100      	str	r1, [sp, #0]
 800887a:	42b5      	cmp	r5, r6
 800887c:	d816      	bhi.n	80088ac <rshift+0x88>
 800887e:	9e01      	ldr	r6, [sp, #4]
 8008880:	2300      	movs	r3, #0
 8008882:	3601      	adds	r6, #1
 8008884:	42b5      	cmp	r5, r6
 8008886:	d302      	bcc.n	800888e <rshift+0x6a>
 8008888:	1be3      	subs	r3, r4, r7
 800888a:	009b      	lsls	r3, r3, #2
 800888c:	3b04      	subs	r3, #4
 800888e:	9900      	ldr	r1, [sp, #0]
 8008890:	18d3      	adds	r3, r2, r3
 8008892:	6019      	str	r1, [r3, #0]
 8008894:	2900      	cmp	r1, #0
 8008896:	d000      	beq.n	800889a <rshift+0x76>
 8008898:	3304      	adds	r3, #4
 800889a:	1a99      	subs	r1, r3, r2
 800889c:	1089      	asrs	r1, r1, #2
 800889e:	6101      	str	r1, [r0, #16]
 80088a0:	4293      	cmp	r3, r2
 80088a2:	d101      	bne.n	80088a8 <rshift+0x84>
 80088a4:	2300      	movs	r3, #0
 80088a6:	6143      	str	r3, [r0, #20]
 80088a8:	b005      	add	sp, #20
 80088aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80088ac:	6833      	ldr	r3, [r6, #0]
 80088ae:	9903      	ldr	r1, [sp, #12]
 80088b0:	408b      	lsls	r3, r1
 80088b2:	9900      	ldr	r1, [sp, #0]
 80088b4:	4319      	orrs	r1, r3
 80088b6:	4663      	mov	r3, ip
 80088b8:	c302      	stmia	r3!, {r1}
 80088ba:	469c      	mov	ip, r3
 80088bc:	ce02      	ldmia	r6!, {r1}
 80088be:	9b02      	ldr	r3, [sp, #8]
 80088c0:	40d9      	lsrs	r1, r3
 80088c2:	9100      	str	r1, [sp, #0]
 80088c4:	e7d9      	b.n	800887a <rshift+0x56>
 80088c6:	c908      	ldmia	r1!, {r3}
 80088c8:	c608      	stmia	r6!, {r3}
 80088ca:	e7c1      	b.n	8008850 <rshift+0x2c>

080088cc <__hexdig_fun>:
 80088cc:	0002      	movs	r2, r0
 80088ce:	3a30      	subs	r2, #48	; 0x30
 80088d0:	0003      	movs	r3, r0
 80088d2:	2a09      	cmp	r2, #9
 80088d4:	d802      	bhi.n	80088dc <__hexdig_fun+0x10>
 80088d6:	3b20      	subs	r3, #32
 80088d8:	b2d8      	uxtb	r0, r3
 80088da:	4770      	bx	lr
 80088dc:	0002      	movs	r2, r0
 80088de:	3a61      	subs	r2, #97	; 0x61
 80088e0:	2a05      	cmp	r2, #5
 80088e2:	d801      	bhi.n	80088e8 <__hexdig_fun+0x1c>
 80088e4:	3b47      	subs	r3, #71	; 0x47
 80088e6:	e7f7      	b.n	80088d8 <__hexdig_fun+0xc>
 80088e8:	001a      	movs	r2, r3
 80088ea:	3a41      	subs	r2, #65	; 0x41
 80088ec:	2000      	movs	r0, #0
 80088ee:	2a05      	cmp	r2, #5
 80088f0:	d8f3      	bhi.n	80088da <__hexdig_fun+0xe>
 80088f2:	3b27      	subs	r3, #39	; 0x27
 80088f4:	e7f0      	b.n	80088d8 <__hexdig_fun+0xc>
	...

080088f8 <__gethex>:
 80088f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80088fa:	b08d      	sub	sp, #52	; 0x34
 80088fc:	930a      	str	r3, [sp, #40]	; 0x28
 80088fe:	4bbf      	ldr	r3, [pc, #764]	; (8008bfc <__gethex+0x304>)
 8008900:	9005      	str	r0, [sp, #20]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	9109      	str	r1, [sp, #36]	; 0x24
 8008906:	0018      	movs	r0, r3
 8008908:	9202      	str	r2, [sp, #8]
 800890a:	9307      	str	r3, [sp, #28]
 800890c:	f7f7 fc02 	bl	8000114 <strlen>
 8008910:	2202      	movs	r2, #2
 8008912:	9b07      	ldr	r3, [sp, #28]
 8008914:	4252      	negs	r2, r2
 8008916:	181b      	adds	r3, r3, r0
 8008918:	3b01      	subs	r3, #1
 800891a:	781b      	ldrb	r3, [r3, #0]
 800891c:	9003      	str	r0, [sp, #12]
 800891e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008920:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008922:	6819      	ldr	r1, [r3, #0]
 8008924:	1c8b      	adds	r3, r1, #2
 8008926:	1a52      	subs	r2, r2, r1
 8008928:	18d1      	adds	r1, r2, r3
 800892a:	9301      	str	r3, [sp, #4]
 800892c:	9108      	str	r1, [sp, #32]
 800892e:	9901      	ldr	r1, [sp, #4]
 8008930:	3301      	adds	r3, #1
 8008932:	7808      	ldrb	r0, [r1, #0]
 8008934:	2830      	cmp	r0, #48	; 0x30
 8008936:	d0f7      	beq.n	8008928 <__gethex+0x30>
 8008938:	f7ff ffc8 	bl	80088cc <__hexdig_fun>
 800893c:	2300      	movs	r3, #0
 800893e:	001c      	movs	r4, r3
 8008940:	9304      	str	r3, [sp, #16]
 8008942:	4298      	cmp	r0, r3
 8008944:	d11f      	bne.n	8008986 <__gethex+0x8e>
 8008946:	9a03      	ldr	r2, [sp, #12]
 8008948:	9907      	ldr	r1, [sp, #28]
 800894a:	9801      	ldr	r0, [sp, #4]
 800894c:	f001 fe04 	bl	800a558 <strncmp>
 8008950:	0007      	movs	r7, r0
 8008952:	42a0      	cmp	r0, r4
 8008954:	d000      	beq.n	8008958 <__gethex+0x60>
 8008956:	e06b      	b.n	8008a30 <__gethex+0x138>
 8008958:	9b01      	ldr	r3, [sp, #4]
 800895a:	9a03      	ldr	r2, [sp, #12]
 800895c:	5c98      	ldrb	r0, [r3, r2]
 800895e:	189d      	adds	r5, r3, r2
 8008960:	f7ff ffb4 	bl	80088cc <__hexdig_fun>
 8008964:	2301      	movs	r3, #1
 8008966:	9304      	str	r3, [sp, #16]
 8008968:	42a0      	cmp	r0, r4
 800896a:	d030      	beq.n	80089ce <__gethex+0xd6>
 800896c:	9501      	str	r5, [sp, #4]
 800896e:	9b01      	ldr	r3, [sp, #4]
 8008970:	7818      	ldrb	r0, [r3, #0]
 8008972:	2830      	cmp	r0, #48	; 0x30
 8008974:	d009      	beq.n	800898a <__gethex+0x92>
 8008976:	f7ff ffa9 	bl	80088cc <__hexdig_fun>
 800897a:	4242      	negs	r2, r0
 800897c:	4142      	adcs	r2, r0
 800897e:	2301      	movs	r3, #1
 8008980:	002c      	movs	r4, r5
 8008982:	9204      	str	r2, [sp, #16]
 8008984:	9308      	str	r3, [sp, #32]
 8008986:	9d01      	ldr	r5, [sp, #4]
 8008988:	e004      	b.n	8008994 <__gethex+0x9c>
 800898a:	9b01      	ldr	r3, [sp, #4]
 800898c:	3301      	adds	r3, #1
 800898e:	9301      	str	r3, [sp, #4]
 8008990:	e7ed      	b.n	800896e <__gethex+0x76>
 8008992:	3501      	adds	r5, #1
 8008994:	7828      	ldrb	r0, [r5, #0]
 8008996:	f7ff ff99 	bl	80088cc <__hexdig_fun>
 800899a:	1e07      	subs	r7, r0, #0
 800899c:	d1f9      	bne.n	8008992 <__gethex+0x9a>
 800899e:	0028      	movs	r0, r5
 80089a0:	9a03      	ldr	r2, [sp, #12]
 80089a2:	9907      	ldr	r1, [sp, #28]
 80089a4:	f001 fdd8 	bl	800a558 <strncmp>
 80089a8:	2800      	cmp	r0, #0
 80089aa:	d10e      	bne.n	80089ca <__gethex+0xd2>
 80089ac:	2c00      	cmp	r4, #0
 80089ae:	d107      	bne.n	80089c0 <__gethex+0xc8>
 80089b0:	9b03      	ldr	r3, [sp, #12]
 80089b2:	18ed      	adds	r5, r5, r3
 80089b4:	002c      	movs	r4, r5
 80089b6:	7828      	ldrb	r0, [r5, #0]
 80089b8:	f7ff ff88 	bl	80088cc <__hexdig_fun>
 80089bc:	2800      	cmp	r0, #0
 80089be:	d102      	bne.n	80089c6 <__gethex+0xce>
 80089c0:	1b64      	subs	r4, r4, r5
 80089c2:	00a7      	lsls	r7, r4, #2
 80089c4:	e003      	b.n	80089ce <__gethex+0xd6>
 80089c6:	3501      	adds	r5, #1
 80089c8:	e7f5      	b.n	80089b6 <__gethex+0xbe>
 80089ca:	2c00      	cmp	r4, #0
 80089cc:	d1f8      	bne.n	80089c0 <__gethex+0xc8>
 80089ce:	2220      	movs	r2, #32
 80089d0:	782b      	ldrb	r3, [r5, #0]
 80089d2:	002e      	movs	r6, r5
 80089d4:	4393      	bics	r3, r2
 80089d6:	2b50      	cmp	r3, #80	; 0x50
 80089d8:	d11d      	bne.n	8008a16 <__gethex+0x11e>
 80089da:	786b      	ldrb	r3, [r5, #1]
 80089dc:	2b2b      	cmp	r3, #43	; 0x2b
 80089de:	d02c      	beq.n	8008a3a <__gethex+0x142>
 80089e0:	2b2d      	cmp	r3, #45	; 0x2d
 80089e2:	d02e      	beq.n	8008a42 <__gethex+0x14a>
 80089e4:	2300      	movs	r3, #0
 80089e6:	1c6e      	adds	r6, r5, #1
 80089e8:	9306      	str	r3, [sp, #24]
 80089ea:	7830      	ldrb	r0, [r6, #0]
 80089ec:	f7ff ff6e 	bl	80088cc <__hexdig_fun>
 80089f0:	1e43      	subs	r3, r0, #1
 80089f2:	b2db      	uxtb	r3, r3
 80089f4:	2b18      	cmp	r3, #24
 80089f6:	d82b      	bhi.n	8008a50 <__gethex+0x158>
 80089f8:	3810      	subs	r0, #16
 80089fa:	0004      	movs	r4, r0
 80089fc:	7870      	ldrb	r0, [r6, #1]
 80089fe:	f7ff ff65 	bl	80088cc <__hexdig_fun>
 8008a02:	1e43      	subs	r3, r0, #1
 8008a04:	b2db      	uxtb	r3, r3
 8008a06:	3601      	adds	r6, #1
 8008a08:	2b18      	cmp	r3, #24
 8008a0a:	d91c      	bls.n	8008a46 <__gethex+0x14e>
 8008a0c:	9b06      	ldr	r3, [sp, #24]
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d000      	beq.n	8008a14 <__gethex+0x11c>
 8008a12:	4264      	negs	r4, r4
 8008a14:	193f      	adds	r7, r7, r4
 8008a16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a18:	601e      	str	r6, [r3, #0]
 8008a1a:	9b04      	ldr	r3, [sp, #16]
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d019      	beq.n	8008a54 <__gethex+0x15c>
 8008a20:	2600      	movs	r6, #0
 8008a22:	9b08      	ldr	r3, [sp, #32]
 8008a24:	42b3      	cmp	r3, r6
 8008a26:	d100      	bne.n	8008a2a <__gethex+0x132>
 8008a28:	3606      	adds	r6, #6
 8008a2a:	0030      	movs	r0, r6
 8008a2c:	b00d      	add	sp, #52	; 0x34
 8008a2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008a30:	2301      	movs	r3, #1
 8008a32:	2700      	movs	r7, #0
 8008a34:	9d01      	ldr	r5, [sp, #4]
 8008a36:	9304      	str	r3, [sp, #16]
 8008a38:	e7c9      	b.n	80089ce <__gethex+0xd6>
 8008a3a:	2300      	movs	r3, #0
 8008a3c:	9306      	str	r3, [sp, #24]
 8008a3e:	1cae      	adds	r6, r5, #2
 8008a40:	e7d3      	b.n	80089ea <__gethex+0xf2>
 8008a42:	2301      	movs	r3, #1
 8008a44:	e7fa      	b.n	8008a3c <__gethex+0x144>
 8008a46:	230a      	movs	r3, #10
 8008a48:	435c      	muls	r4, r3
 8008a4a:	1824      	adds	r4, r4, r0
 8008a4c:	3c10      	subs	r4, #16
 8008a4e:	e7d5      	b.n	80089fc <__gethex+0x104>
 8008a50:	002e      	movs	r6, r5
 8008a52:	e7e0      	b.n	8008a16 <__gethex+0x11e>
 8008a54:	9b01      	ldr	r3, [sp, #4]
 8008a56:	9904      	ldr	r1, [sp, #16]
 8008a58:	1aeb      	subs	r3, r5, r3
 8008a5a:	3b01      	subs	r3, #1
 8008a5c:	2b07      	cmp	r3, #7
 8008a5e:	dc0a      	bgt.n	8008a76 <__gethex+0x17e>
 8008a60:	9805      	ldr	r0, [sp, #20]
 8008a62:	f000 fa9b 	bl	8008f9c <_Balloc>
 8008a66:	1e04      	subs	r4, r0, #0
 8008a68:	d108      	bne.n	8008a7c <__gethex+0x184>
 8008a6a:	0002      	movs	r2, r0
 8008a6c:	21de      	movs	r1, #222	; 0xde
 8008a6e:	4b64      	ldr	r3, [pc, #400]	; (8008c00 <__gethex+0x308>)
 8008a70:	4864      	ldr	r0, [pc, #400]	; (8008c04 <__gethex+0x30c>)
 8008a72:	f001 fe5d 	bl	800a730 <__assert_func>
 8008a76:	3101      	adds	r1, #1
 8008a78:	105b      	asrs	r3, r3, #1
 8008a7a:	e7ef      	b.n	8008a5c <__gethex+0x164>
 8008a7c:	0003      	movs	r3, r0
 8008a7e:	3314      	adds	r3, #20
 8008a80:	9304      	str	r3, [sp, #16]
 8008a82:	9309      	str	r3, [sp, #36]	; 0x24
 8008a84:	2300      	movs	r3, #0
 8008a86:	001e      	movs	r6, r3
 8008a88:	9306      	str	r3, [sp, #24]
 8008a8a:	9b01      	ldr	r3, [sp, #4]
 8008a8c:	42ab      	cmp	r3, r5
 8008a8e:	d340      	bcc.n	8008b12 <__gethex+0x21a>
 8008a90:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008a92:	9b04      	ldr	r3, [sp, #16]
 8008a94:	c540      	stmia	r5!, {r6}
 8008a96:	1aed      	subs	r5, r5, r3
 8008a98:	10ad      	asrs	r5, r5, #2
 8008a9a:	0030      	movs	r0, r6
 8008a9c:	6125      	str	r5, [r4, #16]
 8008a9e:	f000 fb75 	bl	800918c <__hi0bits>
 8008aa2:	9b02      	ldr	r3, [sp, #8]
 8008aa4:	016d      	lsls	r5, r5, #5
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	1a2e      	subs	r6, r5, r0
 8008aaa:	9301      	str	r3, [sp, #4]
 8008aac:	429e      	cmp	r6, r3
 8008aae:	dd5a      	ble.n	8008b66 <__gethex+0x26e>
 8008ab0:	1af6      	subs	r6, r6, r3
 8008ab2:	0031      	movs	r1, r6
 8008ab4:	0020      	movs	r0, r4
 8008ab6:	f000 ff17 	bl	80098e8 <__any_on>
 8008aba:	1e05      	subs	r5, r0, #0
 8008abc:	d016      	beq.n	8008aec <__gethex+0x1f4>
 8008abe:	2501      	movs	r5, #1
 8008ac0:	211f      	movs	r1, #31
 8008ac2:	0028      	movs	r0, r5
 8008ac4:	1e73      	subs	r3, r6, #1
 8008ac6:	4019      	ands	r1, r3
 8008ac8:	4088      	lsls	r0, r1
 8008aca:	0001      	movs	r1, r0
 8008acc:	115a      	asrs	r2, r3, #5
 8008ace:	9804      	ldr	r0, [sp, #16]
 8008ad0:	0092      	lsls	r2, r2, #2
 8008ad2:	5812      	ldr	r2, [r2, r0]
 8008ad4:	420a      	tst	r2, r1
 8008ad6:	d009      	beq.n	8008aec <__gethex+0x1f4>
 8008ad8:	42ab      	cmp	r3, r5
 8008ada:	dd06      	ble.n	8008aea <__gethex+0x1f2>
 8008adc:	0020      	movs	r0, r4
 8008ade:	1eb1      	subs	r1, r6, #2
 8008ae0:	f000 ff02 	bl	80098e8 <__any_on>
 8008ae4:	3502      	adds	r5, #2
 8008ae6:	2800      	cmp	r0, #0
 8008ae8:	d100      	bne.n	8008aec <__gethex+0x1f4>
 8008aea:	2502      	movs	r5, #2
 8008aec:	0031      	movs	r1, r6
 8008aee:	0020      	movs	r0, r4
 8008af0:	f7ff fe98 	bl	8008824 <rshift>
 8008af4:	19bf      	adds	r7, r7, r6
 8008af6:	9b02      	ldr	r3, [sp, #8]
 8008af8:	689b      	ldr	r3, [r3, #8]
 8008afa:	9303      	str	r3, [sp, #12]
 8008afc:	42bb      	cmp	r3, r7
 8008afe:	da42      	bge.n	8008b86 <__gethex+0x28e>
 8008b00:	0021      	movs	r1, r4
 8008b02:	9805      	ldr	r0, [sp, #20]
 8008b04:	f000 fa8e 	bl	8009024 <_Bfree>
 8008b08:	2300      	movs	r3, #0
 8008b0a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008b0c:	26a3      	movs	r6, #163	; 0xa3
 8008b0e:	6013      	str	r3, [r2, #0]
 8008b10:	e78b      	b.n	8008a2a <__gethex+0x132>
 8008b12:	1e6b      	subs	r3, r5, #1
 8008b14:	9308      	str	r3, [sp, #32]
 8008b16:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008b18:	781b      	ldrb	r3, [r3, #0]
 8008b1a:	4293      	cmp	r3, r2
 8008b1c:	d014      	beq.n	8008b48 <__gethex+0x250>
 8008b1e:	9b06      	ldr	r3, [sp, #24]
 8008b20:	2b20      	cmp	r3, #32
 8008b22:	d104      	bne.n	8008b2e <__gethex+0x236>
 8008b24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b26:	c340      	stmia	r3!, {r6}
 8008b28:	2600      	movs	r6, #0
 8008b2a:	9309      	str	r3, [sp, #36]	; 0x24
 8008b2c:	9606      	str	r6, [sp, #24]
 8008b2e:	9b08      	ldr	r3, [sp, #32]
 8008b30:	7818      	ldrb	r0, [r3, #0]
 8008b32:	f7ff fecb 	bl	80088cc <__hexdig_fun>
 8008b36:	230f      	movs	r3, #15
 8008b38:	4018      	ands	r0, r3
 8008b3a:	9b06      	ldr	r3, [sp, #24]
 8008b3c:	9d08      	ldr	r5, [sp, #32]
 8008b3e:	4098      	lsls	r0, r3
 8008b40:	3304      	adds	r3, #4
 8008b42:	4306      	orrs	r6, r0
 8008b44:	9306      	str	r3, [sp, #24]
 8008b46:	e7a0      	b.n	8008a8a <__gethex+0x192>
 8008b48:	2301      	movs	r3, #1
 8008b4a:	9a03      	ldr	r2, [sp, #12]
 8008b4c:	1a9d      	subs	r5, r3, r2
 8008b4e:	9b08      	ldr	r3, [sp, #32]
 8008b50:	195d      	adds	r5, r3, r5
 8008b52:	9b01      	ldr	r3, [sp, #4]
 8008b54:	429d      	cmp	r5, r3
 8008b56:	d3e2      	bcc.n	8008b1e <__gethex+0x226>
 8008b58:	0028      	movs	r0, r5
 8008b5a:	9907      	ldr	r1, [sp, #28]
 8008b5c:	f001 fcfc 	bl	800a558 <strncmp>
 8008b60:	2800      	cmp	r0, #0
 8008b62:	d1dc      	bne.n	8008b1e <__gethex+0x226>
 8008b64:	e791      	b.n	8008a8a <__gethex+0x192>
 8008b66:	9b01      	ldr	r3, [sp, #4]
 8008b68:	2500      	movs	r5, #0
 8008b6a:	429e      	cmp	r6, r3
 8008b6c:	dac3      	bge.n	8008af6 <__gethex+0x1fe>
 8008b6e:	1b9e      	subs	r6, r3, r6
 8008b70:	0021      	movs	r1, r4
 8008b72:	0032      	movs	r2, r6
 8008b74:	9805      	ldr	r0, [sp, #20]
 8008b76:	f000 fc73 	bl	8009460 <__lshift>
 8008b7a:	0003      	movs	r3, r0
 8008b7c:	3314      	adds	r3, #20
 8008b7e:	0004      	movs	r4, r0
 8008b80:	1bbf      	subs	r7, r7, r6
 8008b82:	9304      	str	r3, [sp, #16]
 8008b84:	e7b7      	b.n	8008af6 <__gethex+0x1fe>
 8008b86:	9b02      	ldr	r3, [sp, #8]
 8008b88:	685e      	ldr	r6, [r3, #4]
 8008b8a:	42be      	cmp	r6, r7
 8008b8c:	dd71      	ble.n	8008c72 <__gethex+0x37a>
 8008b8e:	9b01      	ldr	r3, [sp, #4]
 8008b90:	1bf6      	subs	r6, r6, r7
 8008b92:	42b3      	cmp	r3, r6
 8008b94:	dc38      	bgt.n	8008c08 <__gethex+0x310>
 8008b96:	9b02      	ldr	r3, [sp, #8]
 8008b98:	68db      	ldr	r3, [r3, #12]
 8008b9a:	2b02      	cmp	r3, #2
 8008b9c:	d026      	beq.n	8008bec <__gethex+0x2f4>
 8008b9e:	2b03      	cmp	r3, #3
 8008ba0:	d028      	beq.n	8008bf4 <__gethex+0x2fc>
 8008ba2:	2b01      	cmp	r3, #1
 8008ba4:	d119      	bne.n	8008bda <__gethex+0x2e2>
 8008ba6:	9b01      	ldr	r3, [sp, #4]
 8008ba8:	42b3      	cmp	r3, r6
 8008baa:	d116      	bne.n	8008bda <__gethex+0x2e2>
 8008bac:	2b01      	cmp	r3, #1
 8008bae:	d10d      	bne.n	8008bcc <__gethex+0x2d4>
 8008bb0:	9b02      	ldr	r3, [sp, #8]
 8008bb2:	2662      	movs	r6, #98	; 0x62
 8008bb4:	685b      	ldr	r3, [r3, #4]
 8008bb6:	9301      	str	r3, [sp, #4]
 8008bb8:	9a01      	ldr	r2, [sp, #4]
 8008bba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008bbc:	601a      	str	r2, [r3, #0]
 8008bbe:	2301      	movs	r3, #1
 8008bc0:	9a04      	ldr	r2, [sp, #16]
 8008bc2:	6123      	str	r3, [r4, #16]
 8008bc4:	6013      	str	r3, [r2, #0]
 8008bc6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008bc8:	601c      	str	r4, [r3, #0]
 8008bca:	e72e      	b.n	8008a2a <__gethex+0x132>
 8008bcc:	9901      	ldr	r1, [sp, #4]
 8008bce:	0020      	movs	r0, r4
 8008bd0:	3901      	subs	r1, #1
 8008bd2:	f000 fe89 	bl	80098e8 <__any_on>
 8008bd6:	2800      	cmp	r0, #0
 8008bd8:	d1ea      	bne.n	8008bb0 <__gethex+0x2b8>
 8008bda:	0021      	movs	r1, r4
 8008bdc:	9805      	ldr	r0, [sp, #20]
 8008bde:	f000 fa21 	bl	8009024 <_Bfree>
 8008be2:	2300      	movs	r3, #0
 8008be4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008be6:	2650      	movs	r6, #80	; 0x50
 8008be8:	6013      	str	r3, [r2, #0]
 8008bea:	e71e      	b.n	8008a2a <__gethex+0x132>
 8008bec:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d1f3      	bne.n	8008bda <__gethex+0x2e2>
 8008bf2:	e7dd      	b.n	8008bb0 <__gethex+0x2b8>
 8008bf4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d1da      	bne.n	8008bb0 <__gethex+0x2b8>
 8008bfa:	e7ee      	b.n	8008bda <__gethex+0x2e2>
 8008bfc:	0800b668 	.word	0x0800b668
 8008c00:	0800b5f0 	.word	0x0800b5f0
 8008c04:	0800b601 	.word	0x0800b601
 8008c08:	1e77      	subs	r7, r6, #1
 8008c0a:	2d00      	cmp	r5, #0
 8008c0c:	d12f      	bne.n	8008c6e <__gethex+0x376>
 8008c0e:	2f00      	cmp	r7, #0
 8008c10:	d004      	beq.n	8008c1c <__gethex+0x324>
 8008c12:	0039      	movs	r1, r7
 8008c14:	0020      	movs	r0, r4
 8008c16:	f000 fe67 	bl	80098e8 <__any_on>
 8008c1a:	0005      	movs	r5, r0
 8008c1c:	231f      	movs	r3, #31
 8008c1e:	117a      	asrs	r2, r7, #5
 8008c20:	401f      	ands	r7, r3
 8008c22:	3b1e      	subs	r3, #30
 8008c24:	40bb      	lsls	r3, r7
 8008c26:	9904      	ldr	r1, [sp, #16]
 8008c28:	0092      	lsls	r2, r2, #2
 8008c2a:	5852      	ldr	r2, [r2, r1]
 8008c2c:	421a      	tst	r2, r3
 8008c2e:	d001      	beq.n	8008c34 <__gethex+0x33c>
 8008c30:	2302      	movs	r3, #2
 8008c32:	431d      	orrs	r5, r3
 8008c34:	9b01      	ldr	r3, [sp, #4]
 8008c36:	0031      	movs	r1, r6
 8008c38:	1b9b      	subs	r3, r3, r6
 8008c3a:	2602      	movs	r6, #2
 8008c3c:	0020      	movs	r0, r4
 8008c3e:	9301      	str	r3, [sp, #4]
 8008c40:	f7ff fdf0 	bl	8008824 <rshift>
 8008c44:	9b02      	ldr	r3, [sp, #8]
 8008c46:	685f      	ldr	r7, [r3, #4]
 8008c48:	2d00      	cmp	r5, #0
 8008c4a:	d041      	beq.n	8008cd0 <__gethex+0x3d8>
 8008c4c:	9b02      	ldr	r3, [sp, #8]
 8008c4e:	68db      	ldr	r3, [r3, #12]
 8008c50:	2b02      	cmp	r3, #2
 8008c52:	d010      	beq.n	8008c76 <__gethex+0x37e>
 8008c54:	2b03      	cmp	r3, #3
 8008c56:	d012      	beq.n	8008c7e <__gethex+0x386>
 8008c58:	2b01      	cmp	r3, #1
 8008c5a:	d106      	bne.n	8008c6a <__gethex+0x372>
 8008c5c:	07aa      	lsls	r2, r5, #30
 8008c5e:	d504      	bpl.n	8008c6a <__gethex+0x372>
 8008c60:	9a04      	ldr	r2, [sp, #16]
 8008c62:	6810      	ldr	r0, [r2, #0]
 8008c64:	4305      	orrs	r5, r0
 8008c66:	421d      	tst	r5, r3
 8008c68:	d10c      	bne.n	8008c84 <__gethex+0x38c>
 8008c6a:	2310      	movs	r3, #16
 8008c6c:	e02f      	b.n	8008cce <__gethex+0x3d6>
 8008c6e:	2501      	movs	r5, #1
 8008c70:	e7d4      	b.n	8008c1c <__gethex+0x324>
 8008c72:	2601      	movs	r6, #1
 8008c74:	e7e8      	b.n	8008c48 <__gethex+0x350>
 8008c76:	2301      	movs	r3, #1
 8008c78:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008c7a:	1a9b      	subs	r3, r3, r2
 8008c7c:	9313      	str	r3, [sp, #76]	; 0x4c
 8008c7e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d0f2      	beq.n	8008c6a <__gethex+0x372>
 8008c84:	6923      	ldr	r3, [r4, #16]
 8008c86:	2000      	movs	r0, #0
 8008c88:	9303      	str	r3, [sp, #12]
 8008c8a:	009b      	lsls	r3, r3, #2
 8008c8c:	9304      	str	r3, [sp, #16]
 8008c8e:	0023      	movs	r3, r4
 8008c90:	9a04      	ldr	r2, [sp, #16]
 8008c92:	3314      	adds	r3, #20
 8008c94:	1899      	adds	r1, r3, r2
 8008c96:	681a      	ldr	r2, [r3, #0]
 8008c98:	1c55      	adds	r5, r2, #1
 8008c9a:	d01e      	beq.n	8008cda <__gethex+0x3e2>
 8008c9c:	3201      	adds	r2, #1
 8008c9e:	601a      	str	r2, [r3, #0]
 8008ca0:	0023      	movs	r3, r4
 8008ca2:	3314      	adds	r3, #20
 8008ca4:	2e02      	cmp	r6, #2
 8008ca6:	d140      	bne.n	8008d2a <__gethex+0x432>
 8008ca8:	9a02      	ldr	r2, [sp, #8]
 8008caa:	9901      	ldr	r1, [sp, #4]
 8008cac:	6812      	ldr	r2, [r2, #0]
 8008cae:	3a01      	subs	r2, #1
 8008cb0:	428a      	cmp	r2, r1
 8008cb2:	d10b      	bne.n	8008ccc <__gethex+0x3d4>
 8008cb4:	114a      	asrs	r2, r1, #5
 8008cb6:	211f      	movs	r1, #31
 8008cb8:	9801      	ldr	r0, [sp, #4]
 8008cba:	0092      	lsls	r2, r2, #2
 8008cbc:	4001      	ands	r1, r0
 8008cbe:	2001      	movs	r0, #1
 8008cc0:	0005      	movs	r5, r0
 8008cc2:	408d      	lsls	r5, r1
 8008cc4:	58d3      	ldr	r3, [r2, r3]
 8008cc6:	422b      	tst	r3, r5
 8008cc8:	d000      	beq.n	8008ccc <__gethex+0x3d4>
 8008cca:	2601      	movs	r6, #1
 8008ccc:	2320      	movs	r3, #32
 8008cce:	431e      	orrs	r6, r3
 8008cd0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008cd2:	601c      	str	r4, [r3, #0]
 8008cd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008cd6:	601f      	str	r7, [r3, #0]
 8008cd8:	e6a7      	b.n	8008a2a <__gethex+0x132>
 8008cda:	c301      	stmia	r3!, {r0}
 8008cdc:	4299      	cmp	r1, r3
 8008cde:	d8da      	bhi.n	8008c96 <__gethex+0x39e>
 8008ce0:	9b03      	ldr	r3, [sp, #12]
 8008ce2:	68a2      	ldr	r2, [r4, #8]
 8008ce4:	4293      	cmp	r3, r2
 8008ce6:	db17      	blt.n	8008d18 <__gethex+0x420>
 8008ce8:	6863      	ldr	r3, [r4, #4]
 8008cea:	9805      	ldr	r0, [sp, #20]
 8008cec:	1c59      	adds	r1, r3, #1
 8008cee:	f000 f955 	bl	8008f9c <_Balloc>
 8008cf2:	1e05      	subs	r5, r0, #0
 8008cf4:	d103      	bne.n	8008cfe <__gethex+0x406>
 8008cf6:	0002      	movs	r2, r0
 8008cf8:	2184      	movs	r1, #132	; 0x84
 8008cfa:	4b1c      	ldr	r3, [pc, #112]	; (8008d6c <__gethex+0x474>)
 8008cfc:	e6b8      	b.n	8008a70 <__gethex+0x178>
 8008cfe:	0021      	movs	r1, r4
 8008d00:	6923      	ldr	r3, [r4, #16]
 8008d02:	310c      	adds	r1, #12
 8008d04:	1c9a      	adds	r2, r3, #2
 8008d06:	0092      	lsls	r2, r2, #2
 8008d08:	300c      	adds	r0, #12
 8008d0a:	f000 f93e 	bl	8008f8a <memcpy>
 8008d0e:	0021      	movs	r1, r4
 8008d10:	9805      	ldr	r0, [sp, #20]
 8008d12:	f000 f987 	bl	8009024 <_Bfree>
 8008d16:	002c      	movs	r4, r5
 8008d18:	6923      	ldr	r3, [r4, #16]
 8008d1a:	1c5a      	adds	r2, r3, #1
 8008d1c:	6122      	str	r2, [r4, #16]
 8008d1e:	2201      	movs	r2, #1
 8008d20:	3304      	adds	r3, #4
 8008d22:	009b      	lsls	r3, r3, #2
 8008d24:	18e3      	adds	r3, r4, r3
 8008d26:	605a      	str	r2, [r3, #4]
 8008d28:	e7ba      	b.n	8008ca0 <__gethex+0x3a8>
 8008d2a:	6922      	ldr	r2, [r4, #16]
 8008d2c:	9903      	ldr	r1, [sp, #12]
 8008d2e:	428a      	cmp	r2, r1
 8008d30:	dd09      	ble.n	8008d46 <__gethex+0x44e>
 8008d32:	2101      	movs	r1, #1
 8008d34:	0020      	movs	r0, r4
 8008d36:	f7ff fd75 	bl	8008824 <rshift>
 8008d3a:	9b02      	ldr	r3, [sp, #8]
 8008d3c:	3701      	adds	r7, #1
 8008d3e:	689b      	ldr	r3, [r3, #8]
 8008d40:	42bb      	cmp	r3, r7
 8008d42:	dac2      	bge.n	8008cca <__gethex+0x3d2>
 8008d44:	e6dc      	b.n	8008b00 <__gethex+0x208>
 8008d46:	221f      	movs	r2, #31
 8008d48:	9d01      	ldr	r5, [sp, #4]
 8008d4a:	9901      	ldr	r1, [sp, #4]
 8008d4c:	2601      	movs	r6, #1
 8008d4e:	4015      	ands	r5, r2
 8008d50:	4211      	tst	r1, r2
 8008d52:	d0bb      	beq.n	8008ccc <__gethex+0x3d4>
 8008d54:	9a04      	ldr	r2, [sp, #16]
 8008d56:	189b      	adds	r3, r3, r2
 8008d58:	3b04      	subs	r3, #4
 8008d5a:	6818      	ldr	r0, [r3, #0]
 8008d5c:	f000 fa16 	bl	800918c <__hi0bits>
 8008d60:	2320      	movs	r3, #32
 8008d62:	1b5d      	subs	r5, r3, r5
 8008d64:	42a8      	cmp	r0, r5
 8008d66:	dbe4      	blt.n	8008d32 <__gethex+0x43a>
 8008d68:	e7b0      	b.n	8008ccc <__gethex+0x3d4>
 8008d6a:	46c0      	nop			; (mov r8, r8)
 8008d6c:	0800b5f0 	.word	0x0800b5f0

08008d70 <L_shift>:
 8008d70:	2308      	movs	r3, #8
 8008d72:	b570      	push	{r4, r5, r6, lr}
 8008d74:	2520      	movs	r5, #32
 8008d76:	1a9a      	subs	r2, r3, r2
 8008d78:	0092      	lsls	r2, r2, #2
 8008d7a:	1aad      	subs	r5, r5, r2
 8008d7c:	6843      	ldr	r3, [r0, #4]
 8008d7e:	6806      	ldr	r6, [r0, #0]
 8008d80:	001c      	movs	r4, r3
 8008d82:	40ac      	lsls	r4, r5
 8008d84:	40d3      	lsrs	r3, r2
 8008d86:	4334      	orrs	r4, r6
 8008d88:	6004      	str	r4, [r0, #0]
 8008d8a:	6043      	str	r3, [r0, #4]
 8008d8c:	3004      	adds	r0, #4
 8008d8e:	4288      	cmp	r0, r1
 8008d90:	d3f4      	bcc.n	8008d7c <L_shift+0xc>
 8008d92:	bd70      	pop	{r4, r5, r6, pc}

08008d94 <__match>:
 8008d94:	b530      	push	{r4, r5, lr}
 8008d96:	6803      	ldr	r3, [r0, #0]
 8008d98:	780c      	ldrb	r4, [r1, #0]
 8008d9a:	3301      	adds	r3, #1
 8008d9c:	2c00      	cmp	r4, #0
 8008d9e:	d102      	bne.n	8008da6 <__match+0x12>
 8008da0:	6003      	str	r3, [r0, #0]
 8008da2:	2001      	movs	r0, #1
 8008da4:	bd30      	pop	{r4, r5, pc}
 8008da6:	781a      	ldrb	r2, [r3, #0]
 8008da8:	0015      	movs	r5, r2
 8008daa:	3d41      	subs	r5, #65	; 0x41
 8008dac:	2d19      	cmp	r5, #25
 8008dae:	d800      	bhi.n	8008db2 <__match+0x1e>
 8008db0:	3220      	adds	r2, #32
 8008db2:	3101      	adds	r1, #1
 8008db4:	42a2      	cmp	r2, r4
 8008db6:	d0ef      	beq.n	8008d98 <__match+0x4>
 8008db8:	2000      	movs	r0, #0
 8008dba:	e7f3      	b.n	8008da4 <__match+0x10>

08008dbc <__hexnan>:
 8008dbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008dbe:	680b      	ldr	r3, [r1, #0]
 8008dc0:	b08b      	sub	sp, #44	; 0x2c
 8008dc2:	9201      	str	r2, [sp, #4]
 8008dc4:	9901      	ldr	r1, [sp, #4]
 8008dc6:	115a      	asrs	r2, r3, #5
 8008dc8:	0092      	lsls	r2, r2, #2
 8008dca:	188a      	adds	r2, r1, r2
 8008dcc:	9202      	str	r2, [sp, #8]
 8008dce:	0019      	movs	r1, r3
 8008dd0:	221f      	movs	r2, #31
 8008dd2:	4011      	ands	r1, r2
 8008dd4:	9008      	str	r0, [sp, #32]
 8008dd6:	9106      	str	r1, [sp, #24]
 8008dd8:	4213      	tst	r3, r2
 8008dda:	d002      	beq.n	8008de2 <__hexnan+0x26>
 8008ddc:	9b02      	ldr	r3, [sp, #8]
 8008dde:	3304      	adds	r3, #4
 8008de0:	9302      	str	r3, [sp, #8]
 8008de2:	9b02      	ldr	r3, [sp, #8]
 8008de4:	2500      	movs	r5, #0
 8008de6:	1f1e      	subs	r6, r3, #4
 8008de8:	0037      	movs	r7, r6
 8008dea:	0034      	movs	r4, r6
 8008dec:	9b08      	ldr	r3, [sp, #32]
 8008dee:	6035      	str	r5, [r6, #0]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	9507      	str	r5, [sp, #28]
 8008df4:	9305      	str	r3, [sp, #20]
 8008df6:	9503      	str	r5, [sp, #12]
 8008df8:	9b05      	ldr	r3, [sp, #20]
 8008dfa:	3301      	adds	r3, #1
 8008dfc:	9309      	str	r3, [sp, #36]	; 0x24
 8008dfe:	9b05      	ldr	r3, [sp, #20]
 8008e00:	785b      	ldrb	r3, [r3, #1]
 8008e02:	9304      	str	r3, [sp, #16]
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d028      	beq.n	8008e5a <__hexnan+0x9e>
 8008e08:	9804      	ldr	r0, [sp, #16]
 8008e0a:	f7ff fd5f 	bl	80088cc <__hexdig_fun>
 8008e0e:	2800      	cmp	r0, #0
 8008e10:	d154      	bne.n	8008ebc <__hexnan+0x100>
 8008e12:	9b04      	ldr	r3, [sp, #16]
 8008e14:	2b20      	cmp	r3, #32
 8008e16:	d819      	bhi.n	8008e4c <__hexnan+0x90>
 8008e18:	9b03      	ldr	r3, [sp, #12]
 8008e1a:	9a07      	ldr	r2, [sp, #28]
 8008e1c:	4293      	cmp	r3, r2
 8008e1e:	dd12      	ble.n	8008e46 <__hexnan+0x8a>
 8008e20:	42bc      	cmp	r4, r7
 8008e22:	d206      	bcs.n	8008e32 <__hexnan+0x76>
 8008e24:	2d07      	cmp	r5, #7
 8008e26:	dc04      	bgt.n	8008e32 <__hexnan+0x76>
 8008e28:	002a      	movs	r2, r5
 8008e2a:	0039      	movs	r1, r7
 8008e2c:	0020      	movs	r0, r4
 8008e2e:	f7ff ff9f 	bl	8008d70 <L_shift>
 8008e32:	9b01      	ldr	r3, [sp, #4]
 8008e34:	2508      	movs	r5, #8
 8008e36:	429c      	cmp	r4, r3
 8008e38:	d905      	bls.n	8008e46 <__hexnan+0x8a>
 8008e3a:	1f27      	subs	r7, r4, #4
 8008e3c:	2500      	movs	r5, #0
 8008e3e:	003c      	movs	r4, r7
 8008e40:	9b03      	ldr	r3, [sp, #12]
 8008e42:	603d      	str	r5, [r7, #0]
 8008e44:	9307      	str	r3, [sp, #28]
 8008e46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e48:	9305      	str	r3, [sp, #20]
 8008e4a:	e7d5      	b.n	8008df8 <__hexnan+0x3c>
 8008e4c:	9b04      	ldr	r3, [sp, #16]
 8008e4e:	2b29      	cmp	r3, #41	; 0x29
 8008e50:	d159      	bne.n	8008f06 <__hexnan+0x14a>
 8008e52:	9b05      	ldr	r3, [sp, #20]
 8008e54:	9a08      	ldr	r2, [sp, #32]
 8008e56:	3302      	adds	r3, #2
 8008e58:	6013      	str	r3, [r2, #0]
 8008e5a:	9b03      	ldr	r3, [sp, #12]
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d052      	beq.n	8008f06 <__hexnan+0x14a>
 8008e60:	42bc      	cmp	r4, r7
 8008e62:	d206      	bcs.n	8008e72 <__hexnan+0xb6>
 8008e64:	2d07      	cmp	r5, #7
 8008e66:	dc04      	bgt.n	8008e72 <__hexnan+0xb6>
 8008e68:	002a      	movs	r2, r5
 8008e6a:	0039      	movs	r1, r7
 8008e6c:	0020      	movs	r0, r4
 8008e6e:	f7ff ff7f 	bl	8008d70 <L_shift>
 8008e72:	9b01      	ldr	r3, [sp, #4]
 8008e74:	429c      	cmp	r4, r3
 8008e76:	d935      	bls.n	8008ee4 <__hexnan+0x128>
 8008e78:	001a      	movs	r2, r3
 8008e7a:	0023      	movs	r3, r4
 8008e7c:	cb02      	ldmia	r3!, {r1}
 8008e7e:	c202      	stmia	r2!, {r1}
 8008e80:	429e      	cmp	r6, r3
 8008e82:	d2fb      	bcs.n	8008e7c <__hexnan+0xc0>
 8008e84:	9b02      	ldr	r3, [sp, #8]
 8008e86:	1c61      	adds	r1, r4, #1
 8008e88:	1eda      	subs	r2, r3, #3
 8008e8a:	2304      	movs	r3, #4
 8008e8c:	4291      	cmp	r1, r2
 8008e8e:	d805      	bhi.n	8008e9c <__hexnan+0xe0>
 8008e90:	9b02      	ldr	r3, [sp, #8]
 8008e92:	3b04      	subs	r3, #4
 8008e94:	1b1b      	subs	r3, r3, r4
 8008e96:	089b      	lsrs	r3, r3, #2
 8008e98:	3301      	adds	r3, #1
 8008e9a:	009b      	lsls	r3, r3, #2
 8008e9c:	9a01      	ldr	r2, [sp, #4]
 8008e9e:	18d3      	adds	r3, r2, r3
 8008ea0:	2200      	movs	r2, #0
 8008ea2:	c304      	stmia	r3!, {r2}
 8008ea4:	429e      	cmp	r6, r3
 8008ea6:	d2fc      	bcs.n	8008ea2 <__hexnan+0xe6>
 8008ea8:	6833      	ldr	r3, [r6, #0]
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d104      	bne.n	8008eb8 <__hexnan+0xfc>
 8008eae:	9b01      	ldr	r3, [sp, #4]
 8008eb0:	429e      	cmp	r6, r3
 8008eb2:	d126      	bne.n	8008f02 <__hexnan+0x146>
 8008eb4:	2301      	movs	r3, #1
 8008eb6:	6033      	str	r3, [r6, #0]
 8008eb8:	2005      	movs	r0, #5
 8008eba:	e025      	b.n	8008f08 <__hexnan+0x14c>
 8008ebc:	9b03      	ldr	r3, [sp, #12]
 8008ebe:	3501      	adds	r5, #1
 8008ec0:	3301      	adds	r3, #1
 8008ec2:	9303      	str	r3, [sp, #12]
 8008ec4:	2d08      	cmp	r5, #8
 8008ec6:	dd06      	ble.n	8008ed6 <__hexnan+0x11a>
 8008ec8:	9b01      	ldr	r3, [sp, #4]
 8008eca:	429c      	cmp	r4, r3
 8008ecc:	d9bb      	bls.n	8008e46 <__hexnan+0x8a>
 8008ece:	2300      	movs	r3, #0
 8008ed0:	2501      	movs	r5, #1
 8008ed2:	3c04      	subs	r4, #4
 8008ed4:	6023      	str	r3, [r4, #0]
 8008ed6:	220f      	movs	r2, #15
 8008ed8:	6823      	ldr	r3, [r4, #0]
 8008eda:	4010      	ands	r0, r2
 8008edc:	011b      	lsls	r3, r3, #4
 8008ede:	4318      	orrs	r0, r3
 8008ee0:	6020      	str	r0, [r4, #0]
 8008ee2:	e7b0      	b.n	8008e46 <__hexnan+0x8a>
 8008ee4:	9b06      	ldr	r3, [sp, #24]
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d0de      	beq.n	8008ea8 <__hexnan+0xec>
 8008eea:	2120      	movs	r1, #32
 8008eec:	9a06      	ldr	r2, [sp, #24]
 8008eee:	9b02      	ldr	r3, [sp, #8]
 8008ef0:	1a89      	subs	r1, r1, r2
 8008ef2:	2201      	movs	r2, #1
 8008ef4:	4252      	negs	r2, r2
 8008ef6:	40ca      	lsrs	r2, r1
 8008ef8:	3b04      	subs	r3, #4
 8008efa:	6819      	ldr	r1, [r3, #0]
 8008efc:	400a      	ands	r2, r1
 8008efe:	601a      	str	r2, [r3, #0]
 8008f00:	e7d2      	b.n	8008ea8 <__hexnan+0xec>
 8008f02:	3e04      	subs	r6, #4
 8008f04:	e7d0      	b.n	8008ea8 <__hexnan+0xec>
 8008f06:	2004      	movs	r0, #4
 8008f08:	b00b      	add	sp, #44	; 0x2c
 8008f0a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008f0c <_localeconv_r>:
 8008f0c:	4800      	ldr	r0, [pc, #0]	; (8008f10 <_localeconv_r+0x4>)
 8008f0e:	4770      	bx	lr
 8008f10:	20000198 	.word	0x20000198

08008f14 <_lseek_r>:
 8008f14:	b570      	push	{r4, r5, r6, lr}
 8008f16:	0004      	movs	r4, r0
 8008f18:	0008      	movs	r0, r1
 8008f1a:	0011      	movs	r1, r2
 8008f1c:	001a      	movs	r2, r3
 8008f1e:	2300      	movs	r3, #0
 8008f20:	4d05      	ldr	r5, [pc, #20]	; (8008f38 <_lseek_r+0x24>)
 8008f22:	602b      	str	r3, [r5, #0]
 8008f24:	f7fa fb18 	bl	8003558 <_lseek>
 8008f28:	1c43      	adds	r3, r0, #1
 8008f2a:	d103      	bne.n	8008f34 <_lseek_r+0x20>
 8008f2c:	682b      	ldr	r3, [r5, #0]
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d000      	beq.n	8008f34 <_lseek_r+0x20>
 8008f32:	6023      	str	r3, [r4, #0]
 8008f34:	bd70      	pop	{r4, r5, r6, pc}
 8008f36:	46c0      	nop			; (mov r8, r8)
 8008f38:	20000934 	.word	0x20000934

08008f3c <malloc>:
 8008f3c:	b510      	push	{r4, lr}
 8008f3e:	4b03      	ldr	r3, [pc, #12]	; (8008f4c <malloc+0x10>)
 8008f40:	0001      	movs	r1, r0
 8008f42:	6818      	ldr	r0, [r3, #0]
 8008f44:	f000 fd8c 	bl	8009a60 <_malloc_r>
 8008f48:	bd10      	pop	{r4, pc}
 8008f4a:	46c0      	nop			; (mov r8, r8)
 8008f4c:	20000040 	.word	0x20000040

08008f50 <__ascii_mbtowc>:
 8008f50:	b082      	sub	sp, #8
 8008f52:	2900      	cmp	r1, #0
 8008f54:	d100      	bne.n	8008f58 <__ascii_mbtowc+0x8>
 8008f56:	a901      	add	r1, sp, #4
 8008f58:	1e10      	subs	r0, r2, #0
 8008f5a:	d006      	beq.n	8008f6a <__ascii_mbtowc+0x1a>
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d006      	beq.n	8008f6e <__ascii_mbtowc+0x1e>
 8008f60:	7813      	ldrb	r3, [r2, #0]
 8008f62:	600b      	str	r3, [r1, #0]
 8008f64:	7810      	ldrb	r0, [r2, #0]
 8008f66:	1e43      	subs	r3, r0, #1
 8008f68:	4198      	sbcs	r0, r3
 8008f6a:	b002      	add	sp, #8
 8008f6c:	4770      	bx	lr
 8008f6e:	2002      	movs	r0, #2
 8008f70:	4240      	negs	r0, r0
 8008f72:	e7fa      	b.n	8008f6a <__ascii_mbtowc+0x1a>

08008f74 <memchr>:
 8008f74:	b2c9      	uxtb	r1, r1
 8008f76:	1882      	adds	r2, r0, r2
 8008f78:	4290      	cmp	r0, r2
 8008f7a:	d101      	bne.n	8008f80 <memchr+0xc>
 8008f7c:	2000      	movs	r0, #0
 8008f7e:	4770      	bx	lr
 8008f80:	7803      	ldrb	r3, [r0, #0]
 8008f82:	428b      	cmp	r3, r1
 8008f84:	d0fb      	beq.n	8008f7e <memchr+0xa>
 8008f86:	3001      	adds	r0, #1
 8008f88:	e7f6      	b.n	8008f78 <memchr+0x4>

08008f8a <memcpy>:
 8008f8a:	2300      	movs	r3, #0
 8008f8c:	b510      	push	{r4, lr}
 8008f8e:	429a      	cmp	r2, r3
 8008f90:	d100      	bne.n	8008f94 <memcpy+0xa>
 8008f92:	bd10      	pop	{r4, pc}
 8008f94:	5ccc      	ldrb	r4, [r1, r3]
 8008f96:	54c4      	strb	r4, [r0, r3]
 8008f98:	3301      	adds	r3, #1
 8008f9a:	e7f8      	b.n	8008f8e <memcpy+0x4>

08008f9c <_Balloc>:
 8008f9c:	b570      	push	{r4, r5, r6, lr}
 8008f9e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008fa0:	0006      	movs	r6, r0
 8008fa2:	000c      	movs	r4, r1
 8008fa4:	2d00      	cmp	r5, #0
 8008fa6:	d10e      	bne.n	8008fc6 <_Balloc+0x2a>
 8008fa8:	2010      	movs	r0, #16
 8008faa:	f7ff ffc7 	bl	8008f3c <malloc>
 8008fae:	1e02      	subs	r2, r0, #0
 8008fb0:	6270      	str	r0, [r6, #36]	; 0x24
 8008fb2:	d104      	bne.n	8008fbe <_Balloc+0x22>
 8008fb4:	2166      	movs	r1, #102	; 0x66
 8008fb6:	4b19      	ldr	r3, [pc, #100]	; (800901c <_Balloc+0x80>)
 8008fb8:	4819      	ldr	r0, [pc, #100]	; (8009020 <_Balloc+0x84>)
 8008fba:	f001 fbb9 	bl	800a730 <__assert_func>
 8008fbe:	6045      	str	r5, [r0, #4]
 8008fc0:	6085      	str	r5, [r0, #8]
 8008fc2:	6005      	str	r5, [r0, #0]
 8008fc4:	60c5      	str	r5, [r0, #12]
 8008fc6:	6a75      	ldr	r5, [r6, #36]	; 0x24
 8008fc8:	68eb      	ldr	r3, [r5, #12]
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d013      	beq.n	8008ff6 <_Balloc+0x5a>
 8008fce:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008fd0:	00a2      	lsls	r2, r4, #2
 8008fd2:	68db      	ldr	r3, [r3, #12]
 8008fd4:	189b      	adds	r3, r3, r2
 8008fd6:	6818      	ldr	r0, [r3, #0]
 8008fd8:	2800      	cmp	r0, #0
 8008fda:	d118      	bne.n	800900e <_Balloc+0x72>
 8008fdc:	2101      	movs	r1, #1
 8008fde:	000d      	movs	r5, r1
 8008fe0:	40a5      	lsls	r5, r4
 8008fe2:	1d6a      	adds	r2, r5, #5
 8008fe4:	0030      	movs	r0, r6
 8008fe6:	0092      	lsls	r2, r2, #2
 8008fe8:	f000 fca1 	bl	800992e <_calloc_r>
 8008fec:	2800      	cmp	r0, #0
 8008fee:	d00c      	beq.n	800900a <_Balloc+0x6e>
 8008ff0:	6044      	str	r4, [r0, #4]
 8008ff2:	6085      	str	r5, [r0, #8]
 8008ff4:	e00d      	b.n	8009012 <_Balloc+0x76>
 8008ff6:	2221      	movs	r2, #33	; 0x21
 8008ff8:	2104      	movs	r1, #4
 8008ffa:	0030      	movs	r0, r6
 8008ffc:	f000 fc97 	bl	800992e <_calloc_r>
 8009000:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8009002:	60e8      	str	r0, [r5, #12]
 8009004:	68db      	ldr	r3, [r3, #12]
 8009006:	2b00      	cmp	r3, #0
 8009008:	d1e1      	bne.n	8008fce <_Balloc+0x32>
 800900a:	2000      	movs	r0, #0
 800900c:	bd70      	pop	{r4, r5, r6, pc}
 800900e:	6802      	ldr	r2, [r0, #0]
 8009010:	601a      	str	r2, [r3, #0]
 8009012:	2300      	movs	r3, #0
 8009014:	6103      	str	r3, [r0, #16]
 8009016:	60c3      	str	r3, [r0, #12]
 8009018:	e7f8      	b.n	800900c <_Balloc+0x70>
 800901a:	46c0      	nop			; (mov r8, r8)
 800901c:	0800b57e 	.word	0x0800b57e
 8009020:	0800b67c 	.word	0x0800b67c

08009024 <_Bfree>:
 8009024:	b570      	push	{r4, r5, r6, lr}
 8009026:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009028:	0005      	movs	r5, r0
 800902a:	000c      	movs	r4, r1
 800902c:	2e00      	cmp	r6, #0
 800902e:	d10e      	bne.n	800904e <_Bfree+0x2a>
 8009030:	2010      	movs	r0, #16
 8009032:	f7ff ff83 	bl	8008f3c <malloc>
 8009036:	1e02      	subs	r2, r0, #0
 8009038:	6268      	str	r0, [r5, #36]	; 0x24
 800903a:	d104      	bne.n	8009046 <_Bfree+0x22>
 800903c:	218a      	movs	r1, #138	; 0x8a
 800903e:	4b09      	ldr	r3, [pc, #36]	; (8009064 <_Bfree+0x40>)
 8009040:	4809      	ldr	r0, [pc, #36]	; (8009068 <_Bfree+0x44>)
 8009042:	f001 fb75 	bl	800a730 <__assert_func>
 8009046:	6046      	str	r6, [r0, #4]
 8009048:	6086      	str	r6, [r0, #8]
 800904a:	6006      	str	r6, [r0, #0]
 800904c:	60c6      	str	r6, [r0, #12]
 800904e:	2c00      	cmp	r4, #0
 8009050:	d007      	beq.n	8009062 <_Bfree+0x3e>
 8009052:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009054:	6862      	ldr	r2, [r4, #4]
 8009056:	68db      	ldr	r3, [r3, #12]
 8009058:	0092      	lsls	r2, r2, #2
 800905a:	189b      	adds	r3, r3, r2
 800905c:	681a      	ldr	r2, [r3, #0]
 800905e:	6022      	str	r2, [r4, #0]
 8009060:	601c      	str	r4, [r3, #0]
 8009062:	bd70      	pop	{r4, r5, r6, pc}
 8009064:	0800b57e 	.word	0x0800b57e
 8009068:	0800b67c 	.word	0x0800b67c

0800906c <__multadd>:
 800906c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800906e:	000e      	movs	r6, r1
 8009070:	9001      	str	r0, [sp, #4]
 8009072:	000c      	movs	r4, r1
 8009074:	001d      	movs	r5, r3
 8009076:	2000      	movs	r0, #0
 8009078:	690f      	ldr	r7, [r1, #16]
 800907a:	3614      	adds	r6, #20
 800907c:	6833      	ldr	r3, [r6, #0]
 800907e:	3001      	adds	r0, #1
 8009080:	b299      	uxth	r1, r3
 8009082:	4351      	muls	r1, r2
 8009084:	0c1b      	lsrs	r3, r3, #16
 8009086:	4353      	muls	r3, r2
 8009088:	1949      	adds	r1, r1, r5
 800908a:	0c0d      	lsrs	r5, r1, #16
 800908c:	195b      	adds	r3, r3, r5
 800908e:	0c1d      	lsrs	r5, r3, #16
 8009090:	b289      	uxth	r1, r1
 8009092:	041b      	lsls	r3, r3, #16
 8009094:	185b      	adds	r3, r3, r1
 8009096:	c608      	stmia	r6!, {r3}
 8009098:	4287      	cmp	r7, r0
 800909a:	dcef      	bgt.n	800907c <__multadd+0x10>
 800909c:	2d00      	cmp	r5, #0
 800909e:	d022      	beq.n	80090e6 <__multadd+0x7a>
 80090a0:	68a3      	ldr	r3, [r4, #8]
 80090a2:	42bb      	cmp	r3, r7
 80090a4:	dc19      	bgt.n	80090da <__multadd+0x6e>
 80090a6:	6863      	ldr	r3, [r4, #4]
 80090a8:	9801      	ldr	r0, [sp, #4]
 80090aa:	1c59      	adds	r1, r3, #1
 80090ac:	f7ff ff76 	bl	8008f9c <_Balloc>
 80090b0:	1e06      	subs	r6, r0, #0
 80090b2:	d105      	bne.n	80090c0 <__multadd+0x54>
 80090b4:	0002      	movs	r2, r0
 80090b6:	21b5      	movs	r1, #181	; 0xb5
 80090b8:	4b0c      	ldr	r3, [pc, #48]	; (80090ec <__multadd+0x80>)
 80090ba:	480d      	ldr	r0, [pc, #52]	; (80090f0 <__multadd+0x84>)
 80090bc:	f001 fb38 	bl	800a730 <__assert_func>
 80090c0:	0021      	movs	r1, r4
 80090c2:	6923      	ldr	r3, [r4, #16]
 80090c4:	310c      	adds	r1, #12
 80090c6:	1c9a      	adds	r2, r3, #2
 80090c8:	0092      	lsls	r2, r2, #2
 80090ca:	300c      	adds	r0, #12
 80090cc:	f7ff ff5d 	bl	8008f8a <memcpy>
 80090d0:	0021      	movs	r1, r4
 80090d2:	9801      	ldr	r0, [sp, #4]
 80090d4:	f7ff ffa6 	bl	8009024 <_Bfree>
 80090d8:	0034      	movs	r4, r6
 80090da:	1d3b      	adds	r3, r7, #4
 80090dc:	009b      	lsls	r3, r3, #2
 80090de:	18e3      	adds	r3, r4, r3
 80090e0:	605d      	str	r5, [r3, #4]
 80090e2:	1c7b      	adds	r3, r7, #1
 80090e4:	6123      	str	r3, [r4, #16]
 80090e6:	0020      	movs	r0, r4
 80090e8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80090ea:	46c0      	nop			; (mov r8, r8)
 80090ec:	0800b5f0 	.word	0x0800b5f0
 80090f0:	0800b67c 	.word	0x0800b67c

080090f4 <__s2b>:
 80090f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80090f6:	0006      	movs	r6, r0
 80090f8:	0018      	movs	r0, r3
 80090fa:	000c      	movs	r4, r1
 80090fc:	3008      	adds	r0, #8
 80090fe:	2109      	movs	r1, #9
 8009100:	9301      	str	r3, [sp, #4]
 8009102:	0015      	movs	r5, r2
 8009104:	f7f7 f8ac 	bl	8000260 <__divsi3>
 8009108:	2301      	movs	r3, #1
 800910a:	2100      	movs	r1, #0
 800910c:	4283      	cmp	r3, r0
 800910e:	db0a      	blt.n	8009126 <__s2b+0x32>
 8009110:	0030      	movs	r0, r6
 8009112:	f7ff ff43 	bl	8008f9c <_Balloc>
 8009116:	1e01      	subs	r1, r0, #0
 8009118:	d108      	bne.n	800912c <__s2b+0x38>
 800911a:	0002      	movs	r2, r0
 800911c:	4b19      	ldr	r3, [pc, #100]	; (8009184 <__s2b+0x90>)
 800911e:	481a      	ldr	r0, [pc, #104]	; (8009188 <__s2b+0x94>)
 8009120:	31ce      	adds	r1, #206	; 0xce
 8009122:	f001 fb05 	bl	800a730 <__assert_func>
 8009126:	005b      	lsls	r3, r3, #1
 8009128:	3101      	adds	r1, #1
 800912a:	e7ef      	b.n	800910c <__s2b+0x18>
 800912c:	9b08      	ldr	r3, [sp, #32]
 800912e:	6143      	str	r3, [r0, #20]
 8009130:	2301      	movs	r3, #1
 8009132:	6103      	str	r3, [r0, #16]
 8009134:	2d09      	cmp	r5, #9
 8009136:	dd18      	ble.n	800916a <__s2b+0x76>
 8009138:	0023      	movs	r3, r4
 800913a:	3309      	adds	r3, #9
 800913c:	001f      	movs	r7, r3
 800913e:	9300      	str	r3, [sp, #0]
 8009140:	1964      	adds	r4, r4, r5
 8009142:	783b      	ldrb	r3, [r7, #0]
 8009144:	220a      	movs	r2, #10
 8009146:	0030      	movs	r0, r6
 8009148:	3b30      	subs	r3, #48	; 0x30
 800914a:	f7ff ff8f 	bl	800906c <__multadd>
 800914e:	3701      	adds	r7, #1
 8009150:	0001      	movs	r1, r0
 8009152:	42a7      	cmp	r7, r4
 8009154:	d1f5      	bne.n	8009142 <__s2b+0x4e>
 8009156:	002c      	movs	r4, r5
 8009158:	9b00      	ldr	r3, [sp, #0]
 800915a:	3c08      	subs	r4, #8
 800915c:	191c      	adds	r4, r3, r4
 800915e:	002f      	movs	r7, r5
 8009160:	9b01      	ldr	r3, [sp, #4]
 8009162:	429f      	cmp	r7, r3
 8009164:	db04      	blt.n	8009170 <__s2b+0x7c>
 8009166:	0008      	movs	r0, r1
 8009168:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800916a:	2509      	movs	r5, #9
 800916c:	340a      	adds	r4, #10
 800916e:	e7f6      	b.n	800915e <__s2b+0x6a>
 8009170:	1b63      	subs	r3, r4, r5
 8009172:	5ddb      	ldrb	r3, [r3, r7]
 8009174:	220a      	movs	r2, #10
 8009176:	0030      	movs	r0, r6
 8009178:	3b30      	subs	r3, #48	; 0x30
 800917a:	f7ff ff77 	bl	800906c <__multadd>
 800917e:	3701      	adds	r7, #1
 8009180:	0001      	movs	r1, r0
 8009182:	e7ed      	b.n	8009160 <__s2b+0x6c>
 8009184:	0800b5f0 	.word	0x0800b5f0
 8009188:	0800b67c 	.word	0x0800b67c

0800918c <__hi0bits>:
 800918c:	0003      	movs	r3, r0
 800918e:	0c02      	lsrs	r2, r0, #16
 8009190:	2000      	movs	r0, #0
 8009192:	4282      	cmp	r2, r0
 8009194:	d101      	bne.n	800919a <__hi0bits+0xe>
 8009196:	041b      	lsls	r3, r3, #16
 8009198:	3010      	adds	r0, #16
 800919a:	0e1a      	lsrs	r2, r3, #24
 800919c:	d101      	bne.n	80091a2 <__hi0bits+0x16>
 800919e:	3008      	adds	r0, #8
 80091a0:	021b      	lsls	r3, r3, #8
 80091a2:	0f1a      	lsrs	r2, r3, #28
 80091a4:	d101      	bne.n	80091aa <__hi0bits+0x1e>
 80091a6:	3004      	adds	r0, #4
 80091a8:	011b      	lsls	r3, r3, #4
 80091aa:	0f9a      	lsrs	r2, r3, #30
 80091ac:	d101      	bne.n	80091b2 <__hi0bits+0x26>
 80091ae:	3002      	adds	r0, #2
 80091b0:	009b      	lsls	r3, r3, #2
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	db03      	blt.n	80091be <__hi0bits+0x32>
 80091b6:	3001      	adds	r0, #1
 80091b8:	005b      	lsls	r3, r3, #1
 80091ba:	d400      	bmi.n	80091be <__hi0bits+0x32>
 80091bc:	2020      	movs	r0, #32
 80091be:	4770      	bx	lr

080091c0 <__lo0bits>:
 80091c0:	6803      	ldr	r3, [r0, #0]
 80091c2:	0002      	movs	r2, r0
 80091c4:	2107      	movs	r1, #7
 80091c6:	0018      	movs	r0, r3
 80091c8:	4008      	ands	r0, r1
 80091ca:	420b      	tst	r3, r1
 80091cc:	d00d      	beq.n	80091ea <__lo0bits+0x2a>
 80091ce:	3906      	subs	r1, #6
 80091d0:	2000      	movs	r0, #0
 80091d2:	420b      	tst	r3, r1
 80091d4:	d105      	bne.n	80091e2 <__lo0bits+0x22>
 80091d6:	3002      	adds	r0, #2
 80091d8:	4203      	tst	r3, r0
 80091da:	d003      	beq.n	80091e4 <__lo0bits+0x24>
 80091dc:	40cb      	lsrs	r3, r1
 80091de:	0008      	movs	r0, r1
 80091e0:	6013      	str	r3, [r2, #0]
 80091e2:	4770      	bx	lr
 80091e4:	089b      	lsrs	r3, r3, #2
 80091e6:	6013      	str	r3, [r2, #0]
 80091e8:	e7fb      	b.n	80091e2 <__lo0bits+0x22>
 80091ea:	b299      	uxth	r1, r3
 80091ec:	2900      	cmp	r1, #0
 80091ee:	d101      	bne.n	80091f4 <__lo0bits+0x34>
 80091f0:	2010      	movs	r0, #16
 80091f2:	0c1b      	lsrs	r3, r3, #16
 80091f4:	b2d9      	uxtb	r1, r3
 80091f6:	2900      	cmp	r1, #0
 80091f8:	d101      	bne.n	80091fe <__lo0bits+0x3e>
 80091fa:	3008      	adds	r0, #8
 80091fc:	0a1b      	lsrs	r3, r3, #8
 80091fe:	0719      	lsls	r1, r3, #28
 8009200:	d101      	bne.n	8009206 <__lo0bits+0x46>
 8009202:	3004      	adds	r0, #4
 8009204:	091b      	lsrs	r3, r3, #4
 8009206:	0799      	lsls	r1, r3, #30
 8009208:	d101      	bne.n	800920e <__lo0bits+0x4e>
 800920a:	3002      	adds	r0, #2
 800920c:	089b      	lsrs	r3, r3, #2
 800920e:	07d9      	lsls	r1, r3, #31
 8009210:	d4e9      	bmi.n	80091e6 <__lo0bits+0x26>
 8009212:	3001      	adds	r0, #1
 8009214:	085b      	lsrs	r3, r3, #1
 8009216:	d1e6      	bne.n	80091e6 <__lo0bits+0x26>
 8009218:	2020      	movs	r0, #32
 800921a:	e7e2      	b.n	80091e2 <__lo0bits+0x22>

0800921c <__i2b>:
 800921c:	b510      	push	{r4, lr}
 800921e:	000c      	movs	r4, r1
 8009220:	2101      	movs	r1, #1
 8009222:	f7ff febb 	bl	8008f9c <_Balloc>
 8009226:	2800      	cmp	r0, #0
 8009228:	d106      	bne.n	8009238 <__i2b+0x1c>
 800922a:	21a0      	movs	r1, #160	; 0xa0
 800922c:	0002      	movs	r2, r0
 800922e:	4b04      	ldr	r3, [pc, #16]	; (8009240 <__i2b+0x24>)
 8009230:	4804      	ldr	r0, [pc, #16]	; (8009244 <__i2b+0x28>)
 8009232:	0049      	lsls	r1, r1, #1
 8009234:	f001 fa7c 	bl	800a730 <__assert_func>
 8009238:	2301      	movs	r3, #1
 800923a:	6144      	str	r4, [r0, #20]
 800923c:	6103      	str	r3, [r0, #16]
 800923e:	bd10      	pop	{r4, pc}
 8009240:	0800b5f0 	.word	0x0800b5f0
 8009244:	0800b67c 	.word	0x0800b67c

08009248 <__multiply>:
 8009248:	b5f0      	push	{r4, r5, r6, r7, lr}
 800924a:	690b      	ldr	r3, [r1, #16]
 800924c:	0014      	movs	r4, r2
 800924e:	6912      	ldr	r2, [r2, #16]
 8009250:	000d      	movs	r5, r1
 8009252:	b089      	sub	sp, #36	; 0x24
 8009254:	4293      	cmp	r3, r2
 8009256:	da01      	bge.n	800925c <__multiply+0x14>
 8009258:	0025      	movs	r5, r4
 800925a:	000c      	movs	r4, r1
 800925c:	692f      	ldr	r7, [r5, #16]
 800925e:	6926      	ldr	r6, [r4, #16]
 8009260:	6869      	ldr	r1, [r5, #4]
 8009262:	19bb      	adds	r3, r7, r6
 8009264:	9302      	str	r3, [sp, #8]
 8009266:	68ab      	ldr	r3, [r5, #8]
 8009268:	19ba      	adds	r2, r7, r6
 800926a:	4293      	cmp	r3, r2
 800926c:	da00      	bge.n	8009270 <__multiply+0x28>
 800926e:	3101      	adds	r1, #1
 8009270:	f7ff fe94 	bl	8008f9c <_Balloc>
 8009274:	9001      	str	r0, [sp, #4]
 8009276:	2800      	cmp	r0, #0
 8009278:	d106      	bne.n	8009288 <__multiply+0x40>
 800927a:	215e      	movs	r1, #94	; 0x5e
 800927c:	0002      	movs	r2, r0
 800927e:	4b48      	ldr	r3, [pc, #288]	; (80093a0 <__multiply+0x158>)
 8009280:	4848      	ldr	r0, [pc, #288]	; (80093a4 <__multiply+0x15c>)
 8009282:	31ff      	adds	r1, #255	; 0xff
 8009284:	f001 fa54 	bl	800a730 <__assert_func>
 8009288:	9b01      	ldr	r3, [sp, #4]
 800928a:	2200      	movs	r2, #0
 800928c:	3314      	adds	r3, #20
 800928e:	469c      	mov	ip, r3
 8009290:	19bb      	adds	r3, r7, r6
 8009292:	009b      	lsls	r3, r3, #2
 8009294:	4463      	add	r3, ip
 8009296:	9303      	str	r3, [sp, #12]
 8009298:	4663      	mov	r3, ip
 800929a:	9903      	ldr	r1, [sp, #12]
 800929c:	428b      	cmp	r3, r1
 800929e:	d32c      	bcc.n	80092fa <__multiply+0xb2>
 80092a0:	002b      	movs	r3, r5
 80092a2:	0022      	movs	r2, r4
 80092a4:	3314      	adds	r3, #20
 80092a6:	00bf      	lsls	r7, r7, #2
 80092a8:	3214      	adds	r2, #20
 80092aa:	9306      	str	r3, [sp, #24]
 80092ac:	00b6      	lsls	r6, r6, #2
 80092ae:	19db      	adds	r3, r3, r7
 80092b0:	9304      	str	r3, [sp, #16]
 80092b2:	1993      	adds	r3, r2, r6
 80092b4:	9307      	str	r3, [sp, #28]
 80092b6:	2304      	movs	r3, #4
 80092b8:	9305      	str	r3, [sp, #20]
 80092ba:	002b      	movs	r3, r5
 80092bc:	9904      	ldr	r1, [sp, #16]
 80092be:	3315      	adds	r3, #21
 80092c0:	9200      	str	r2, [sp, #0]
 80092c2:	4299      	cmp	r1, r3
 80092c4:	d305      	bcc.n	80092d2 <__multiply+0x8a>
 80092c6:	1b4b      	subs	r3, r1, r5
 80092c8:	3b15      	subs	r3, #21
 80092ca:	089b      	lsrs	r3, r3, #2
 80092cc:	3301      	adds	r3, #1
 80092ce:	009b      	lsls	r3, r3, #2
 80092d0:	9305      	str	r3, [sp, #20]
 80092d2:	9b07      	ldr	r3, [sp, #28]
 80092d4:	9a00      	ldr	r2, [sp, #0]
 80092d6:	429a      	cmp	r2, r3
 80092d8:	d311      	bcc.n	80092fe <__multiply+0xb6>
 80092da:	9b02      	ldr	r3, [sp, #8]
 80092dc:	2b00      	cmp	r3, #0
 80092de:	dd06      	ble.n	80092ee <__multiply+0xa6>
 80092e0:	9b03      	ldr	r3, [sp, #12]
 80092e2:	3b04      	subs	r3, #4
 80092e4:	9303      	str	r3, [sp, #12]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	9300      	str	r3, [sp, #0]
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d053      	beq.n	8009396 <__multiply+0x14e>
 80092ee:	9b01      	ldr	r3, [sp, #4]
 80092f0:	9a02      	ldr	r2, [sp, #8]
 80092f2:	0018      	movs	r0, r3
 80092f4:	611a      	str	r2, [r3, #16]
 80092f6:	b009      	add	sp, #36	; 0x24
 80092f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80092fa:	c304      	stmia	r3!, {r2}
 80092fc:	e7cd      	b.n	800929a <__multiply+0x52>
 80092fe:	9b00      	ldr	r3, [sp, #0]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	b298      	uxth	r0, r3
 8009304:	2800      	cmp	r0, #0
 8009306:	d01b      	beq.n	8009340 <__multiply+0xf8>
 8009308:	4667      	mov	r7, ip
 800930a:	2400      	movs	r4, #0
 800930c:	9e06      	ldr	r6, [sp, #24]
 800930e:	ce02      	ldmia	r6!, {r1}
 8009310:	683a      	ldr	r2, [r7, #0]
 8009312:	b28b      	uxth	r3, r1
 8009314:	4343      	muls	r3, r0
 8009316:	b292      	uxth	r2, r2
 8009318:	189b      	adds	r3, r3, r2
 800931a:	191b      	adds	r3, r3, r4
 800931c:	0c0c      	lsrs	r4, r1, #16
 800931e:	4344      	muls	r4, r0
 8009320:	683a      	ldr	r2, [r7, #0]
 8009322:	0c11      	lsrs	r1, r2, #16
 8009324:	1861      	adds	r1, r4, r1
 8009326:	0c1c      	lsrs	r4, r3, #16
 8009328:	1909      	adds	r1, r1, r4
 800932a:	0c0c      	lsrs	r4, r1, #16
 800932c:	b29b      	uxth	r3, r3
 800932e:	0409      	lsls	r1, r1, #16
 8009330:	430b      	orrs	r3, r1
 8009332:	c708      	stmia	r7!, {r3}
 8009334:	9b04      	ldr	r3, [sp, #16]
 8009336:	42b3      	cmp	r3, r6
 8009338:	d8e9      	bhi.n	800930e <__multiply+0xc6>
 800933a:	4663      	mov	r3, ip
 800933c:	9a05      	ldr	r2, [sp, #20]
 800933e:	509c      	str	r4, [r3, r2]
 8009340:	9b00      	ldr	r3, [sp, #0]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	0c1e      	lsrs	r6, r3, #16
 8009346:	d020      	beq.n	800938a <__multiply+0x142>
 8009348:	4663      	mov	r3, ip
 800934a:	002c      	movs	r4, r5
 800934c:	4660      	mov	r0, ip
 800934e:	2700      	movs	r7, #0
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	3414      	adds	r4, #20
 8009354:	6822      	ldr	r2, [r4, #0]
 8009356:	b29b      	uxth	r3, r3
 8009358:	b291      	uxth	r1, r2
 800935a:	4371      	muls	r1, r6
 800935c:	6802      	ldr	r2, [r0, #0]
 800935e:	0c12      	lsrs	r2, r2, #16
 8009360:	1889      	adds	r1, r1, r2
 8009362:	19cf      	adds	r7, r1, r7
 8009364:	0439      	lsls	r1, r7, #16
 8009366:	430b      	orrs	r3, r1
 8009368:	6003      	str	r3, [r0, #0]
 800936a:	cc02      	ldmia	r4!, {r1}
 800936c:	6843      	ldr	r3, [r0, #4]
 800936e:	0c09      	lsrs	r1, r1, #16
 8009370:	4371      	muls	r1, r6
 8009372:	b29b      	uxth	r3, r3
 8009374:	0c3f      	lsrs	r7, r7, #16
 8009376:	18cb      	adds	r3, r1, r3
 8009378:	9a04      	ldr	r2, [sp, #16]
 800937a:	19db      	adds	r3, r3, r7
 800937c:	0c1f      	lsrs	r7, r3, #16
 800937e:	3004      	adds	r0, #4
 8009380:	42a2      	cmp	r2, r4
 8009382:	d8e7      	bhi.n	8009354 <__multiply+0x10c>
 8009384:	4662      	mov	r2, ip
 8009386:	9905      	ldr	r1, [sp, #20]
 8009388:	5053      	str	r3, [r2, r1]
 800938a:	9b00      	ldr	r3, [sp, #0]
 800938c:	3304      	adds	r3, #4
 800938e:	9300      	str	r3, [sp, #0]
 8009390:	2304      	movs	r3, #4
 8009392:	449c      	add	ip, r3
 8009394:	e79d      	b.n	80092d2 <__multiply+0x8a>
 8009396:	9b02      	ldr	r3, [sp, #8]
 8009398:	3b01      	subs	r3, #1
 800939a:	9302      	str	r3, [sp, #8]
 800939c:	e79d      	b.n	80092da <__multiply+0x92>
 800939e:	46c0      	nop			; (mov r8, r8)
 80093a0:	0800b5f0 	.word	0x0800b5f0
 80093a4:	0800b67c 	.word	0x0800b67c

080093a8 <__pow5mult>:
 80093a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80093aa:	2303      	movs	r3, #3
 80093ac:	0015      	movs	r5, r2
 80093ae:	0007      	movs	r7, r0
 80093b0:	000e      	movs	r6, r1
 80093b2:	401a      	ands	r2, r3
 80093b4:	421d      	tst	r5, r3
 80093b6:	d008      	beq.n	80093ca <__pow5mult+0x22>
 80093b8:	4925      	ldr	r1, [pc, #148]	; (8009450 <__pow5mult+0xa8>)
 80093ba:	3a01      	subs	r2, #1
 80093bc:	0092      	lsls	r2, r2, #2
 80093be:	5852      	ldr	r2, [r2, r1]
 80093c0:	2300      	movs	r3, #0
 80093c2:	0031      	movs	r1, r6
 80093c4:	f7ff fe52 	bl	800906c <__multadd>
 80093c8:	0006      	movs	r6, r0
 80093ca:	10ad      	asrs	r5, r5, #2
 80093cc:	d03d      	beq.n	800944a <__pow5mult+0xa2>
 80093ce:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 80093d0:	2c00      	cmp	r4, #0
 80093d2:	d10f      	bne.n	80093f4 <__pow5mult+0x4c>
 80093d4:	2010      	movs	r0, #16
 80093d6:	f7ff fdb1 	bl	8008f3c <malloc>
 80093da:	1e02      	subs	r2, r0, #0
 80093dc:	6278      	str	r0, [r7, #36]	; 0x24
 80093de:	d105      	bne.n	80093ec <__pow5mult+0x44>
 80093e0:	21d7      	movs	r1, #215	; 0xd7
 80093e2:	4b1c      	ldr	r3, [pc, #112]	; (8009454 <__pow5mult+0xac>)
 80093e4:	481c      	ldr	r0, [pc, #112]	; (8009458 <__pow5mult+0xb0>)
 80093e6:	0049      	lsls	r1, r1, #1
 80093e8:	f001 f9a2 	bl	800a730 <__assert_func>
 80093ec:	6044      	str	r4, [r0, #4]
 80093ee:	6084      	str	r4, [r0, #8]
 80093f0:	6004      	str	r4, [r0, #0]
 80093f2:	60c4      	str	r4, [r0, #12]
 80093f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093f6:	689c      	ldr	r4, [r3, #8]
 80093f8:	9301      	str	r3, [sp, #4]
 80093fa:	2c00      	cmp	r4, #0
 80093fc:	d108      	bne.n	8009410 <__pow5mult+0x68>
 80093fe:	0038      	movs	r0, r7
 8009400:	4916      	ldr	r1, [pc, #88]	; (800945c <__pow5mult+0xb4>)
 8009402:	f7ff ff0b 	bl	800921c <__i2b>
 8009406:	9b01      	ldr	r3, [sp, #4]
 8009408:	0004      	movs	r4, r0
 800940a:	6098      	str	r0, [r3, #8]
 800940c:	2300      	movs	r3, #0
 800940e:	6003      	str	r3, [r0, #0]
 8009410:	2301      	movs	r3, #1
 8009412:	421d      	tst	r5, r3
 8009414:	d00a      	beq.n	800942c <__pow5mult+0x84>
 8009416:	0031      	movs	r1, r6
 8009418:	0022      	movs	r2, r4
 800941a:	0038      	movs	r0, r7
 800941c:	f7ff ff14 	bl	8009248 <__multiply>
 8009420:	0031      	movs	r1, r6
 8009422:	9001      	str	r0, [sp, #4]
 8009424:	0038      	movs	r0, r7
 8009426:	f7ff fdfd 	bl	8009024 <_Bfree>
 800942a:	9e01      	ldr	r6, [sp, #4]
 800942c:	106d      	asrs	r5, r5, #1
 800942e:	d00c      	beq.n	800944a <__pow5mult+0xa2>
 8009430:	6820      	ldr	r0, [r4, #0]
 8009432:	2800      	cmp	r0, #0
 8009434:	d107      	bne.n	8009446 <__pow5mult+0x9e>
 8009436:	0022      	movs	r2, r4
 8009438:	0021      	movs	r1, r4
 800943a:	0038      	movs	r0, r7
 800943c:	f7ff ff04 	bl	8009248 <__multiply>
 8009440:	2300      	movs	r3, #0
 8009442:	6020      	str	r0, [r4, #0]
 8009444:	6003      	str	r3, [r0, #0]
 8009446:	0004      	movs	r4, r0
 8009448:	e7e2      	b.n	8009410 <__pow5mult+0x68>
 800944a:	0030      	movs	r0, r6
 800944c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800944e:	46c0      	nop			; (mov r8, r8)
 8009450:	0800b7c8 	.word	0x0800b7c8
 8009454:	0800b57e 	.word	0x0800b57e
 8009458:	0800b67c 	.word	0x0800b67c
 800945c:	00000271 	.word	0x00000271

08009460 <__lshift>:
 8009460:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009462:	000c      	movs	r4, r1
 8009464:	0017      	movs	r7, r2
 8009466:	6923      	ldr	r3, [r4, #16]
 8009468:	1155      	asrs	r5, r2, #5
 800946a:	b087      	sub	sp, #28
 800946c:	18eb      	adds	r3, r5, r3
 800946e:	9302      	str	r3, [sp, #8]
 8009470:	3301      	adds	r3, #1
 8009472:	9301      	str	r3, [sp, #4]
 8009474:	6849      	ldr	r1, [r1, #4]
 8009476:	68a3      	ldr	r3, [r4, #8]
 8009478:	9004      	str	r0, [sp, #16]
 800947a:	9a01      	ldr	r2, [sp, #4]
 800947c:	4293      	cmp	r3, r2
 800947e:	db10      	blt.n	80094a2 <__lshift+0x42>
 8009480:	9804      	ldr	r0, [sp, #16]
 8009482:	f7ff fd8b 	bl	8008f9c <_Balloc>
 8009486:	2300      	movs	r3, #0
 8009488:	0002      	movs	r2, r0
 800948a:	0006      	movs	r6, r0
 800948c:	0019      	movs	r1, r3
 800948e:	3214      	adds	r2, #20
 8009490:	4298      	cmp	r0, r3
 8009492:	d10c      	bne.n	80094ae <__lshift+0x4e>
 8009494:	21da      	movs	r1, #218	; 0xda
 8009496:	0002      	movs	r2, r0
 8009498:	4b26      	ldr	r3, [pc, #152]	; (8009534 <__lshift+0xd4>)
 800949a:	4827      	ldr	r0, [pc, #156]	; (8009538 <__lshift+0xd8>)
 800949c:	31ff      	adds	r1, #255	; 0xff
 800949e:	f001 f947 	bl	800a730 <__assert_func>
 80094a2:	3101      	adds	r1, #1
 80094a4:	005b      	lsls	r3, r3, #1
 80094a6:	e7e8      	b.n	800947a <__lshift+0x1a>
 80094a8:	0098      	lsls	r0, r3, #2
 80094aa:	5011      	str	r1, [r2, r0]
 80094ac:	3301      	adds	r3, #1
 80094ae:	42ab      	cmp	r3, r5
 80094b0:	dbfa      	blt.n	80094a8 <__lshift+0x48>
 80094b2:	43eb      	mvns	r3, r5
 80094b4:	17db      	asrs	r3, r3, #31
 80094b6:	401d      	ands	r5, r3
 80094b8:	211f      	movs	r1, #31
 80094ba:	0023      	movs	r3, r4
 80094bc:	0038      	movs	r0, r7
 80094be:	00ad      	lsls	r5, r5, #2
 80094c0:	1955      	adds	r5, r2, r5
 80094c2:	6922      	ldr	r2, [r4, #16]
 80094c4:	3314      	adds	r3, #20
 80094c6:	0092      	lsls	r2, r2, #2
 80094c8:	4008      	ands	r0, r1
 80094ca:	4684      	mov	ip, r0
 80094cc:	189a      	adds	r2, r3, r2
 80094ce:	420f      	tst	r7, r1
 80094d0:	d02a      	beq.n	8009528 <__lshift+0xc8>
 80094d2:	3101      	adds	r1, #1
 80094d4:	1a09      	subs	r1, r1, r0
 80094d6:	9105      	str	r1, [sp, #20]
 80094d8:	2100      	movs	r1, #0
 80094da:	9503      	str	r5, [sp, #12]
 80094dc:	4667      	mov	r7, ip
 80094de:	6818      	ldr	r0, [r3, #0]
 80094e0:	40b8      	lsls	r0, r7
 80094e2:	4301      	orrs	r1, r0
 80094e4:	9803      	ldr	r0, [sp, #12]
 80094e6:	c002      	stmia	r0!, {r1}
 80094e8:	cb02      	ldmia	r3!, {r1}
 80094ea:	9003      	str	r0, [sp, #12]
 80094ec:	9805      	ldr	r0, [sp, #20]
 80094ee:	40c1      	lsrs	r1, r0
 80094f0:	429a      	cmp	r2, r3
 80094f2:	d8f3      	bhi.n	80094dc <__lshift+0x7c>
 80094f4:	0020      	movs	r0, r4
 80094f6:	3015      	adds	r0, #21
 80094f8:	2304      	movs	r3, #4
 80094fa:	4282      	cmp	r2, r0
 80094fc:	d304      	bcc.n	8009508 <__lshift+0xa8>
 80094fe:	1b13      	subs	r3, r2, r4
 8009500:	3b15      	subs	r3, #21
 8009502:	089b      	lsrs	r3, r3, #2
 8009504:	3301      	adds	r3, #1
 8009506:	009b      	lsls	r3, r3, #2
 8009508:	50e9      	str	r1, [r5, r3]
 800950a:	2900      	cmp	r1, #0
 800950c:	d002      	beq.n	8009514 <__lshift+0xb4>
 800950e:	9b02      	ldr	r3, [sp, #8]
 8009510:	3302      	adds	r3, #2
 8009512:	9301      	str	r3, [sp, #4]
 8009514:	9b01      	ldr	r3, [sp, #4]
 8009516:	9804      	ldr	r0, [sp, #16]
 8009518:	3b01      	subs	r3, #1
 800951a:	0021      	movs	r1, r4
 800951c:	6133      	str	r3, [r6, #16]
 800951e:	f7ff fd81 	bl	8009024 <_Bfree>
 8009522:	0030      	movs	r0, r6
 8009524:	b007      	add	sp, #28
 8009526:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009528:	cb02      	ldmia	r3!, {r1}
 800952a:	c502      	stmia	r5!, {r1}
 800952c:	429a      	cmp	r2, r3
 800952e:	d8fb      	bhi.n	8009528 <__lshift+0xc8>
 8009530:	e7f0      	b.n	8009514 <__lshift+0xb4>
 8009532:	46c0      	nop			; (mov r8, r8)
 8009534:	0800b5f0 	.word	0x0800b5f0
 8009538:	0800b67c 	.word	0x0800b67c

0800953c <__mcmp>:
 800953c:	6902      	ldr	r2, [r0, #16]
 800953e:	690b      	ldr	r3, [r1, #16]
 8009540:	b530      	push	{r4, r5, lr}
 8009542:	0004      	movs	r4, r0
 8009544:	1ad0      	subs	r0, r2, r3
 8009546:	429a      	cmp	r2, r3
 8009548:	d10d      	bne.n	8009566 <__mcmp+0x2a>
 800954a:	009b      	lsls	r3, r3, #2
 800954c:	3414      	adds	r4, #20
 800954e:	3114      	adds	r1, #20
 8009550:	18e2      	adds	r2, r4, r3
 8009552:	18c9      	adds	r1, r1, r3
 8009554:	3a04      	subs	r2, #4
 8009556:	3904      	subs	r1, #4
 8009558:	6815      	ldr	r5, [r2, #0]
 800955a:	680b      	ldr	r3, [r1, #0]
 800955c:	429d      	cmp	r5, r3
 800955e:	d003      	beq.n	8009568 <__mcmp+0x2c>
 8009560:	2001      	movs	r0, #1
 8009562:	429d      	cmp	r5, r3
 8009564:	d303      	bcc.n	800956e <__mcmp+0x32>
 8009566:	bd30      	pop	{r4, r5, pc}
 8009568:	4294      	cmp	r4, r2
 800956a:	d3f3      	bcc.n	8009554 <__mcmp+0x18>
 800956c:	e7fb      	b.n	8009566 <__mcmp+0x2a>
 800956e:	4240      	negs	r0, r0
 8009570:	e7f9      	b.n	8009566 <__mcmp+0x2a>
	...

08009574 <__mdiff>:
 8009574:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009576:	000e      	movs	r6, r1
 8009578:	0007      	movs	r7, r0
 800957a:	0011      	movs	r1, r2
 800957c:	0030      	movs	r0, r6
 800957e:	b087      	sub	sp, #28
 8009580:	0014      	movs	r4, r2
 8009582:	f7ff ffdb 	bl	800953c <__mcmp>
 8009586:	1e05      	subs	r5, r0, #0
 8009588:	d110      	bne.n	80095ac <__mdiff+0x38>
 800958a:	0001      	movs	r1, r0
 800958c:	0038      	movs	r0, r7
 800958e:	f7ff fd05 	bl	8008f9c <_Balloc>
 8009592:	1e02      	subs	r2, r0, #0
 8009594:	d104      	bne.n	80095a0 <__mdiff+0x2c>
 8009596:	4b40      	ldr	r3, [pc, #256]	; (8009698 <__mdiff+0x124>)
 8009598:	4940      	ldr	r1, [pc, #256]	; (800969c <__mdiff+0x128>)
 800959a:	4841      	ldr	r0, [pc, #260]	; (80096a0 <__mdiff+0x12c>)
 800959c:	f001 f8c8 	bl	800a730 <__assert_func>
 80095a0:	2301      	movs	r3, #1
 80095a2:	6145      	str	r5, [r0, #20]
 80095a4:	6103      	str	r3, [r0, #16]
 80095a6:	0010      	movs	r0, r2
 80095a8:	b007      	add	sp, #28
 80095aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80095ac:	2301      	movs	r3, #1
 80095ae:	9301      	str	r3, [sp, #4]
 80095b0:	2800      	cmp	r0, #0
 80095b2:	db04      	blt.n	80095be <__mdiff+0x4a>
 80095b4:	0023      	movs	r3, r4
 80095b6:	0034      	movs	r4, r6
 80095b8:	001e      	movs	r6, r3
 80095ba:	2300      	movs	r3, #0
 80095bc:	9301      	str	r3, [sp, #4]
 80095be:	0038      	movs	r0, r7
 80095c0:	6861      	ldr	r1, [r4, #4]
 80095c2:	f7ff fceb 	bl	8008f9c <_Balloc>
 80095c6:	1e02      	subs	r2, r0, #0
 80095c8:	d103      	bne.n	80095d2 <__mdiff+0x5e>
 80095ca:	2190      	movs	r1, #144	; 0x90
 80095cc:	4b32      	ldr	r3, [pc, #200]	; (8009698 <__mdiff+0x124>)
 80095ce:	0089      	lsls	r1, r1, #2
 80095d0:	e7e3      	b.n	800959a <__mdiff+0x26>
 80095d2:	9b01      	ldr	r3, [sp, #4]
 80095d4:	2700      	movs	r7, #0
 80095d6:	60c3      	str	r3, [r0, #12]
 80095d8:	6920      	ldr	r0, [r4, #16]
 80095da:	3414      	adds	r4, #20
 80095dc:	9401      	str	r4, [sp, #4]
 80095de:	9b01      	ldr	r3, [sp, #4]
 80095e0:	0084      	lsls	r4, r0, #2
 80095e2:	191b      	adds	r3, r3, r4
 80095e4:	0034      	movs	r4, r6
 80095e6:	9302      	str	r3, [sp, #8]
 80095e8:	6933      	ldr	r3, [r6, #16]
 80095ea:	3414      	adds	r4, #20
 80095ec:	0099      	lsls	r1, r3, #2
 80095ee:	1863      	adds	r3, r4, r1
 80095f0:	9303      	str	r3, [sp, #12]
 80095f2:	0013      	movs	r3, r2
 80095f4:	3314      	adds	r3, #20
 80095f6:	469c      	mov	ip, r3
 80095f8:	9305      	str	r3, [sp, #20]
 80095fa:	9b01      	ldr	r3, [sp, #4]
 80095fc:	9304      	str	r3, [sp, #16]
 80095fe:	9b04      	ldr	r3, [sp, #16]
 8009600:	cc02      	ldmia	r4!, {r1}
 8009602:	cb20      	ldmia	r3!, {r5}
 8009604:	9304      	str	r3, [sp, #16]
 8009606:	b2ab      	uxth	r3, r5
 8009608:	19df      	adds	r7, r3, r7
 800960a:	b28b      	uxth	r3, r1
 800960c:	1afb      	subs	r3, r7, r3
 800960e:	0c09      	lsrs	r1, r1, #16
 8009610:	0c2d      	lsrs	r5, r5, #16
 8009612:	1a6d      	subs	r5, r5, r1
 8009614:	1419      	asrs	r1, r3, #16
 8009616:	186d      	adds	r5, r5, r1
 8009618:	4661      	mov	r1, ip
 800961a:	142f      	asrs	r7, r5, #16
 800961c:	b29b      	uxth	r3, r3
 800961e:	042d      	lsls	r5, r5, #16
 8009620:	432b      	orrs	r3, r5
 8009622:	c108      	stmia	r1!, {r3}
 8009624:	9b03      	ldr	r3, [sp, #12]
 8009626:	468c      	mov	ip, r1
 8009628:	42a3      	cmp	r3, r4
 800962a:	d8e8      	bhi.n	80095fe <__mdiff+0x8a>
 800962c:	0031      	movs	r1, r6
 800962e:	9c03      	ldr	r4, [sp, #12]
 8009630:	3115      	adds	r1, #21
 8009632:	2304      	movs	r3, #4
 8009634:	428c      	cmp	r4, r1
 8009636:	d304      	bcc.n	8009642 <__mdiff+0xce>
 8009638:	1ba3      	subs	r3, r4, r6
 800963a:	3b15      	subs	r3, #21
 800963c:	089b      	lsrs	r3, r3, #2
 800963e:	3301      	adds	r3, #1
 8009640:	009b      	lsls	r3, r3, #2
 8009642:	9901      	ldr	r1, [sp, #4]
 8009644:	18cc      	adds	r4, r1, r3
 8009646:	9905      	ldr	r1, [sp, #20]
 8009648:	0026      	movs	r6, r4
 800964a:	18cb      	adds	r3, r1, r3
 800964c:	469c      	mov	ip, r3
 800964e:	9902      	ldr	r1, [sp, #8]
 8009650:	428e      	cmp	r6, r1
 8009652:	d310      	bcc.n	8009676 <__mdiff+0x102>
 8009654:	9e02      	ldr	r6, [sp, #8]
 8009656:	1ee1      	subs	r1, r4, #3
 8009658:	2500      	movs	r5, #0
 800965a:	428e      	cmp	r6, r1
 800965c:	d304      	bcc.n	8009668 <__mdiff+0xf4>
 800965e:	0031      	movs	r1, r6
 8009660:	3103      	adds	r1, #3
 8009662:	1b0c      	subs	r4, r1, r4
 8009664:	08a4      	lsrs	r4, r4, #2
 8009666:	00a5      	lsls	r5, r4, #2
 8009668:	195b      	adds	r3, r3, r5
 800966a:	3b04      	subs	r3, #4
 800966c:	6819      	ldr	r1, [r3, #0]
 800966e:	2900      	cmp	r1, #0
 8009670:	d00f      	beq.n	8009692 <__mdiff+0x11e>
 8009672:	6110      	str	r0, [r2, #16]
 8009674:	e797      	b.n	80095a6 <__mdiff+0x32>
 8009676:	ce02      	ldmia	r6!, {r1}
 8009678:	b28d      	uxth	r5, r1
 800967a:	19ed      	adds	r5, r5, r7
 800967c:	0c0f      	lsrs	r7, r1, #16
 800967e:	1429      	asrs	r1, r5, #16
 8009680:	1879      	adds	r1, r7, r1
 8009682:	140f      	asrs	r7, r1, #16
 8009684:	b2ad      	uxth	r5, r5
 8009686:	0409      	lsls	r1, r1, #16
 8009688:	430d      	orrs	r5, r1
 800968a:	4661      	mov	r1, ip
 800968c:	c120      	stmia	r1!, {r5}
 800968e:	468c      	mov	ip, r1
 8009690:	e7dd      	b.n	800964e <__mdiff+0xda>
 8009692:	3801      	subs	r0, #1
 8009694:	e7e9      	b.n	800966a <__mdiff+0xf6>
 8009696:	46c0      	nop			; (mov r8, r8)
 8009698:	0800b5f0 	.word	0x0800b5f0
 800969c:	00000232 	.word	0x00000232
 80096a0:	0800b67c 	.word	0x0800b67c

080096a4 <__ulp>:
 80096a4:	4b0f      	ldr	r3, [pc, #60]	; (80096e4 <__ulp+0x40>)
 80096a6:	4019      	ands	r1, r3
 80096a8:	4b0f      	ldr	r3, [pc, #60]	; (80096e8 <__ulp+0x44>)
 80096aa:	18c9      	adds	r1, r1, r3
 80096ac:	2900      	cmp	r1, #0
 80096ae:	dd04      	ble.n	80096ba <__ulp+0x16>
 80096b0:	2200      	movs	r2, #0
 80096b2:	000b      	movs	r3, r1
 80096b4:	0010      	movs	r0, r2
 80096b6:	0019      	movs	r1, r3
 80096b8:	4770      	bx	lr
 80096ba:	4249      	negs	r1, r1
 80096bc:	2200      	movs	r2, #0
 80096be:	2300      	movs	r3, #0
 80096c0:	1509      	asrs	r1, r1, #20
 80096c2:	2913      	cmp	r1, #19
 80096c4:	dc04      	bgt.n	80096d0 <__ulp+0x2c>
 80096c6:	2080      	movs	r0, #128	; 0x80
 80096c8:	0300      	lsls	r0, r0, #12
 80096ca:	4108      	asrs	r0, r1
 80096cc:	0003      	movs	r3, r0
 80096ce:	e7f1      	b.n	80096b4 <__ulp+0x10>
 80096d0:	3914      	subs	r1, #20
 80096d2:	2001      	movs	r0, #1
 80096d4:	291e      	cmp	r1, #30
 80096d6:	dc02      	bgt.n	80096de <__ulp+0x3a>
 80096d8:	2080      	movs	r0, #128	; 0x80
 80096da:	0600      	lsls	r0, r0, #24
 80096dc:	40c8      	lsrs	r0, r1
 80096de:	0002      	movs	r2, r0
 80096e0:	e7e8      	b.n	80096b4 <__ulp+0x10>
 80096e2:	46c0      	nop			; (mov r8, r8)
 80096e4:	7ff00000 	.word	0x7ff00000
 80096e8:	fcc00000 	.word	0xfcc00000

080096ec <__b2d>:
 80096ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80096ee:	0006      	movs	r6, r0
 80096f0:	6903      	ldr	r3, [r0, #16]
 80096f2:	3614      	adds	r6, #20
 80096f4:	009b      	lsls	r3, r3, #2
 80096f6:	18f3      	adds	r3, r6, r3
 80096f8:	1f1d      	subs	r5, r3, #4
 80096fa:	682c      	ldr	r4, [r5, #0]
 80096fc:	000f      	movs	r7, r1
 80096fe:	0020      	movs	r0, r4
 8009700:	9301      	str	r3, [sp, #4]
 8009702:	f7ff fd43 	bl	800918c <__hi0bits>
 8009706:	2320      	movs	r3, #32
 8009708:	1a1b      	subs	r3, r3, r0
 800970a:	491f      	ldr	r1, [pc, #124]	; (8009788 <__b2d+0x9c>)
 800970c:	603b      	str	r3, [r7, #0]
 800970e:	280a      	cmp	r0, #10
 8009710:	dc16      	bgt.n	8009740 <__b2d+0x54>
 8009712:	230b      	movs	r3, #11
 8009714:	0027      	movs	r7, r4
 8009716:	1a1b      	subs	r3, r3, r0
 8009718:	40df      	lsrs	r7, r3
 800971a:	4339      	orrs	r1, r7
 800971c:	469c      	mov	ip, r3
 800971e:	000b      	movs	r3, r1
 8009720:	2100      	movs	r1, #0
 8009722:	42ae      	cmp	r6, r5
 8009724:	d202      	bcs.n	800972c <__b2d+0x40>
 8009726:	9901      	ldr	r1, [sp, #4]
 8009728:	3908      	subs	r1, #8
 800972a:	6809      	ldr	r1, [r1, #0]
 800972c:	3015      	adds	r0, #21
 800972e:	4084      	lsls	r4, r0
 8009730:	4660      	mov	r0, ip
 8009732:	40c1      	lsrs	r1, r0
 8009734:	430c      	orrs	r4, r1
 8009736:	0022      	movs	r2, r4
 8009738:	0010      	movs	r0, r2
 800973a:	0019      	movs	r1, r3
 800973c:	b003      	add	sp, #12
 800973e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009740:	2700      	movs	r7, #0
 8009742:	42ae      	cmp	r6, r5
 8009744:	d202      	bcs.n	800974c <__b2d+0x60>
 8009746:	9d01      	ldr	r5, [sp, #4]
 8009748:	3d08      	subs	r5, #8
 800974a:	682f      	ldr	r7, [r5, #0]
 800974c:	230b      	movs	r3, #11
 800974e:	425b      	negs	r3, r3
 8009750:	469c      	mov	ip, r3
 8009752:	4484      	add	ip, r0
 8009754:	280b      	cmp	r0, #11
 8009756:	d013      	beq.n	8009780 <__b2d+0x94>
 8009758:	4663      	mov	r3, ip
 800975a:	2020      	movs	r0, #32
 800975c:	409c      	lsls	r4, r3
 800975e:	1ac0      	subs	r0, r0, r3
 8009760:	003b      	movs	r3, r7
 8009762:	40c3      	lsrs	r3, r0
 8009764:	431c      	orrs	r4, r3
 8009766:	4321      	orrs	r1, r4
 8009768:	000b      	movs	r3, r1
 800976a:	2100      	movs	r1, #0
 800976c:	42b5      	cmp	r5, r6
 800976e:	d901      	bls.n	8009774 <__b2d+0x88>
 8009770:	3d04      	subs	r5, #4
 8009772:	6829      	ldr	r1, [r5, #0]
 8009774:	4664      	mov	r4, ip
 8009776:	40c1      	lsrs	r1, r0
 8009778:	40a7      	lsls	r7, r4
 800977a:	430f      	orrs	r7, r1
 800977c:	003a      	movs	r2, r7
 800977e:	e7db      	b.n	8009738 <__b2d+0x4c>
 8009780:	4321      	orrs	r1, r4
 8009782:	000b      	movs	r3, r1
 8009784:	e7fa      	b.n	800977c <__b2d+0x90>
 8009786:	46c0      	nop			; (mov r8, r8)
 8009788:	3ff00000 	.word	0x3ff00000

0800978c <__d2b>:
 800978c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800978e:	2101      	movs	r1, #1
 8009790:	0014      	movs	r4, r2
 8009792:	001e      	movs	r6, r3
 8009794:	9f08      	ldr	r7, [sp, #32]
 8009796:	f7ff fc01 	bl	8008f9c <_Balloc>
 800979a:	1e05      	subs	r5, r0, #0
 800979c:	d105      	bne.n	80097aa <__d2b+0x1e>
 800979e:	0002      	movs	r2, r0
 80097a0:	4b26      	ldr	r3, [pc, #152]	; (800983c <__d2b+0xb0>)
 80097a2:	4927      	ldr	r1, [pc, #156]	; (8009840 <__d2b+0xb4>)
 80097a4:	4827      	ldr	r0, [pc, #156]	; (8009844 <__d2b+0xb8>)
 80097a6:	f000 ffc3 	bl	800a730 <__assert_func>
 80097aa:	0333      	lsls	r3, r6, #12
 80097ac:	0076      	lsls	r6, r6, #1
 80097ae:	0b1b      	lsrs	r3, r3, #12
 80097b0:	0d76      	lsrs	r6, r6, #21
 80097b2:	d124      	bne.n	80097fe <__d2b+0x72>
 80097b4:	9301      	str	r3, [sp, #4]
 80097b6:	2c00      	cmp	r4, #0
 80097b8:	d027      	beq.n	800980a <__d2b+0x7e>
 80097ba:	4668      	mov	r0, sp
 80097bc:	9400      	str	r4, [sp, #0]
 80097be:	f7ff fcff 	bl	80091c0 <__lo0bits>
 80097c2:	9c00      	ldr	r4, [sp, #0]
 80097c4:	2800      	cmp	r0, #0
 80097c6:	d01e      	beq.n	8009806 <__d2b+0x7a>
 80097c8:	9b01      	ldr	r3, [sp, #4]
 80097ca:	2120      	movs	r1, #32
 80097cc:	001a      	movs	r2, r3
 80097ce:	1a09      	subs	r1, r1, r0
 80097d0:	408a      	lsls	r2, r1
 80097d2:	40c3      	lsrs	r3, r0
 80097d4:	4322      	orrs	r2, r4
 80097d6:	616a      	str	r2, [r5, #20]
 80097d8:	9301      	str	r3, [sp, #4]
 80097da:	9c01      	ldr	r4, [sp, #4]
 80097dc:	61ac      	str	r4, [r5, #24]
 80097de:	1e63      	subs	r3, r4, #1
 80097e0:	419c      	sbcs	r4, r3
 80097e2:	3401      	adds	r4, #1
 80097e4:	612c      	str	r4, [r5, #16]
 80097e6:	2e00      	cmp	r6, #0
 80097e8:	d018      	beq.n	800981c <__d2b+0x90>
 80097ea:	4b17      	ldr	r3, [pc, #92]	; (8009848 <__d2b+0xbc>)
 80097ec:	18f6      	adds	r6, r6, r3
 80097ee:	2335      	movs	r3, #53	; 0x35
 80097f0:	1836      	adds	r6, r6, r0
 80097f2:	1a18      	subs	r0, r3, r0
 80097f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80097f6:	603e      	str	r6, [r7, #0]
 80097f8:	6018      	str	r0, [r3, #0]
 80097fa:	0028      	movs	r0, r5
 80097fc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80097fe:	2280      	movs	r2, #128	; 0x80
 8009800:	0352      	lsls	r2, r2, #13
 8009802:	4313      	orrs	r3, r2
 8009804:	e7d6      	b.n	80097b4 <__d2b+0x28>
 8009806:	616c      	str	r4, [r5, #20]
 8009808:	e7e7      	b.n	80097da <__d2b+0x4e>
 800980a:	a801      	add	r0, sp, #4
 800980c:	f7ff fcd8 	bl	80091c0 <__lo0bits>
 8009810:	2401      	movs	r4, #1
 8009812:	9b01      	ldr	r3, [sp, #4]
 8009814:	612c      	str	r4, [r5, #16]
 8009816:	616b      	str	r3, [r5, #20]
 8009818:	3020      	adds	r0, #32
 800981a:	e7e4      	b.n	80097e6 <__d2b+0x5a>
 800981c:	4b0b      	ldr	r3, [pc, #44]	; (800984c <__d2b+0xc0>)
 800981e:	18c0      	adds	r0, r0, r3
 8009820:	4b0b      	ldr	r3, [pc, #44]	; (8009850 <__d2b+0xc4>)
 8009822:	6038      	str	r0, [r7, #0]
 8009824:	18e3      	adds	r3, r4, r3
 8009826:	009b      	lsls	r3, r3, #2
 8009828:	18eb      	adds	r3, r5, r3
 800982a:	6958      	ldr	r0, [r3, #20]
 800982c:	f7ff fcae 	bl	800918c <__hi0bits>
 8009830:	0164      	lsls	r4, r4, #5
 8009832:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009834:	1a24      	subs	r4, r4, r0
 8009836:	601c      	str	r4, [r3, #0]
 8009838:	e7df      	b.n	80097fa <__d2b+0x6e>
 800983a:	46c0      	nop			; (mov r8, r8)
 800983c:	0800b5f0 	.word	0x0800b5f0
 8009840:	0000030a 	.word	0x0000030a
 8009844:	0800b67c 	.word	0x0800b67c
 8009848:	fffffbcd 	.word	0xfffffbcd
 800984c:	fffffbce 	.word	0xfffffbce
 8009850:	3fffffff 	.word	0x3fffffff

08009854 <__ratio>:
 8009854:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009856:	b087      	sub	sp, #28
 8009858:	000f      	movs	r7, r1
 800985a:	a904      	add	r1, sp, #16
 800985c:	0006      	movs	r6, r0
 800985e:	f7ff ff45 	bl	80096ec <__b2d>
 8009862:	9000      	str	r0, [sp, #0]
 8009864:	9101      	str	r1, [sp, #4]
 8009866:	9c00      	ldr	r4, [sp, #0]
 8009868:	9d01      	ldr	r5, [sp, #4]
 800986a:	0038      	movs	r0, r7
 800986c:	a905      	add	r1, sp, #20
 800986e:	f7ff ff3d 	bl	80096ec <__b2d>
 8009872:	9002      	str	r0, [sp, #8]
 8009874:	9103      	str	r1, [sp, #12]
 8009876:	9a02      	ldr	r2, [sp, #8]
 8009878:	9b03      	ldr	r3, [sp, #12]
 800987a:	6931      	ldr	r1, [r6, #16]
 800987c:	6938      	ldr	r0, [r7, #16]
 800987e:	9e05      	ldr	r6, [sp, #20]
 8009880:	1a08      	subs	r0, r1, r0
 8009882:	9904      	ldr	r1, [sp, #16]
 8009884:	0140      	lsls	r0, r0, #5
 8009886:	1b89      	subs	r1, r1, r6
 8009888:	1841      	adds	r1, r0, r1
 800988a:	0508      	lsls	r0, r1, #20
 800988c:	2900      	cmp	r1, #0
 800988e:	dd07      	ble.n	80098a0 <__ratio+0x4c>
 8009890:	9901      	ldr	r1, [sp, #4]
 8009892:	1845      	adds	r5, r0, r1
 8009894:	0020      	movs	r0, r4
 8009896:	0029      	movs	r1, r5
 8009898:	f7f7 fe8a 	bl	80015b0 <__aeabi_ddiv>
 800989c:	b007      	add	sp, #28
 800989e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80098a0:	9903      	ldr	r1, [sp, #12]
 80098a2:	1a0b      	subs	r3, r1, r0
 80098a4:	e7f6      	b.n	8009894 <__ratio+0x40>

080098a6 <__copybits>:
 80098a6:	b570      	push	{r4, r5, r6, lr}
 80098a8:	0014      	movs	r4, r2
 80098aa:	0005      	movs	r5, r0
 80098ac:	3901      	subs	r1, #1
 80098ae:	6913      	ldr	r3, [r2, #16]
 80098b0:	1149      	asrs	r1, r1, #5
 80098b2:	3101      	adds	r1, #1
 80098b4:	0089      	lsls	r1, r1, #2
 80098b6:	3414      	adds	r4, #20
 80098b8:	009b      	lsls	r3, r3, #2
 80098ba:	1841      	adds	r1, r0, r1
 80098bc:	18e3      	adds	r3, r4, r3
 80098be:	42a3      	cmp	r3, r4
 80098c0:	d80d      	bhi.n	80098de <__copybits+0x38>
 80098c2:	0014      	movs	r4, r2
 80098c4:	3411      	adds	r4, #17
 80098c6:	2500      	movs	r5, #0
 80098c8:	429c      	cmp	r4, r3
 80098ca:	d803      	bhi.n	80098d4 <__copybits+0x2e>
 80098cc:	1a9b      	subs	r3, r3, r2
 80098ce:	3b11      	subs	r3, #17
 80098d0:	089b      	lsrs	r3, r3, #2
 80098d2:	009d      	lsls	r5, r3, #2
 80098d4:	2300      	movs	r3, #0
 80098d6:	1940      	adds	r0, r0, r5
 80098d8:	4281      	cmp	r1, r0
 80098da:	d803      	bhi.n	80098e4 <__copybits+0x3e>
 80098dc:	bd70      	pop	{r4, r5, r6, pc}
 80098de:	cc40      	ldmia	r4!, {r6}
 80098e0:	c540      	stmia	r5!, {r6}
 80098e2:	e7ec      	b.n	80098be <__copybits+0x18>
 80098e4:	c008      	stmia	r0!, {r3}
 80098e6:	e7f7      	b.n	80098d8 <__copybits+0x32>

080098e8 <__any_on>:
 80098e8:	0002      	movs	r2, r0
 80098ea:	6900      	ldr	r0, [r0, #16]
 80098ec:	b510      	push	{r4, lr}
 80098ee:	3214      	adds	r2, #20
 80098f0:	114b      	asrs	r3, r1, #5
 80098f2:	4298      	cmp	r0, r3
 80098f4:	db13      	blt.n	800991e <__any_on+0x36>
 80098f6:	dd0c      	ble.n	8009912 <__any_on+0x2a>
 80098f8:	241f      	movs	r4, #31
 80098fa:	0008      	movs	r0, r1
 80098fc:	4020      	ands	r0, r4
 80098fe:	4221      	tst	r1, r4
 8009900:	d007      	beq.n	8009912 <__any_on+0x2a>
 8009902:	0099      	lsls	r1, r3, #2
 8009904:	588c      	ldr	r4, [r1, r2]
 8009906:	0021      	movs	r1, r4
 8009908:	40c1      	lsrs	r1, r0
 800990a:	4081      	lsls	r1, r0
 800990c:	2001      	movs	r0, #1
 800990e:	428c      	cmp	r4, r1
 8009910:	d104      	bne.n	800991c <__any_on+0x34>
 8009912:	009b      	lsls	r3, r3, #2
 8009914:	18d3      	adds	r3, r2, r3
 8009916:	4293      	cmp	r3, r2
 8009918:	d803      	bhi.n	8009922 <__any_on+0x3a>
 800991a:	2000      	movs	r0, #0
 800991c:	bd10      	pop	{r4, pc}
 800991e:	0003      	movs	r3, r0
 8009920:	e7f7      	b.n	8009912 <__any_on+0x2a>
 8009922:	3b04      	subs	r3, #4
 8009924:	6819      	ldr	r1, [r3, #0]
 8009926:	2900      	cmp	r1, #0
 8009928:	d0f5      	beq.n	8009916 <__any_on+0x2e>
 800992a:	2001      	movs	r0, #1
 800992c:	e7f6      	b.n	800991c <__any_on+0x34>

0800992e <_calloc_r>:
 800992e:	b570      	push	{r4, r5, r6, lr}
 8009930:	0c13      	lsrs	r3, r2, #16
 8009932:	0c0d      	lsrs	r5, r1, #16
 8009934:	d11e      	bne.n	8009974 <_calloc_r+0x46>
 8009936:	2b00      	cmp	r3, #0
 8009938:	d10c      	bne.n	8009954 <_calloc_r+0x26>
 800993a:	b289      	uxth	r1, r1
 800993c:	b294      	uxth	r4, r2
 800993e:	434c      	muls	r4, r1
 8009940:	0021      	movs	r1, r4
 8009942:	f000 f88d 	bl	8009a60 <_malloc_r>
 8009946:	1e05      	subs	r5, r0, #0
 8009948:	d01b      	beq.n	8009982 <_calloc_r+0x54>
 800994a:	0022      	movs	r2, r4
 800994c:	2100      	movs	r1, #0
 800994e:	f7fc faa9 	bl	8005ea4 <memset>
 8009952:	e016      	b.n	8009982 <_calloc_r+0x54>
 8009954:	1c1d      	adds	r5, r3, #0
 8009956:	1c0b      	adds	r3, r1, #0
 8009958:	b292      	uxth	r2, r2
 800995a:	b289      	uxth	r1, r1
 800995c:	b29c      	uxth	r4, r3
 800995e:	4351      	muls	r1, r2
 8009960:	b2ab      	uxth	r3, r5
 8009962:	4363      	muls	r3, r4
 8009964:	0c0c      	lsrs	r4, r1, #16
 8009966:	191c      	adds	r4, r3, r4
 8009968:	0c22      	lsrs	r2, r4, #16
 800996a:	d107      	bne.n	800997c <_calloc_r+0x4e>
 800996c:	0424      	lsls	r4, r4, #16
 800996e:	b289      	uxth	r1, r1
 8009970:	430c      	orrs	r4, r1
 8009972:	e7e5      	b.n	8009940 <_calloc_r+0x12>
 8009974:	2b00      	cmp	r3, #0
 8009976:	d101      	bne.n	800997c <_calloc_r+0x4e>
 8009978:	1c13      	adds	r3, r2, #0
 800997a:	e7ed      	b.n	8009958 <_calloc_r+0x2a>
 800997c:	230c      	movs	r3, #12
 800997e:	2500      	movs	r5, #0
 8009980:	6003      	str	r3, [r0, #0]
 8009982:	0028      	movs	r0, r5
 8009984:	bd70      	pop	{r4, r5, r6, pc}
	...

08009988 <_free_r>:
 8009988:	b570      	push	{r4, r5, r6, lr}
 800998a:	0005      	movs	r5, r0
 800998c:	2900      	cmp	r1, #0
 800998e:	d010      	beq.n	80099b2 <_free_r+0x2a>
 8009990:	1f0c      	subs	r4, r1, #4
 8009992:	6823      	ldr	r3, [r4, #0]
 8009994:	2b00      	cmp	r3, #0
 8009996:	da00      	bge.n	800999a <_free_r+0x12>
 8009998:	18e4      	adds	r4, r4, r3
 800999a:	0028      	movs	r0, r5
 800999c:	f001 f8da 	bl	800ab54 <__malloc_lock>
 80099a0:	4a1d      	ldr	r2, [pc, #116]	; (8009a18 <_free_r+0x90>)
 80099a2:	6813      	ldr	r3, [r2, #0]
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d105      	bne.n	80099b4 <_free_r+0x2c>
 80099a8:	6063      	str	r3, [r4, #4]
 80099aa:	6014      	str	r4, [r2, #0]
 80099ac:	0028      	movs	r0, r5
 80099ae:	f001 f8d9 	bl	800ab64 <__malloc_unlock>
 80099b2:	bd70      	pop	{r4, r5, r6, pc}
 80099b4:	42a3      	cmp	r3, r4
 80099b6:	d908      	bls.n	80099ca <_free_r+0x42>
 80099b8:	6821      	ldr	r1, [r4, #0]
 80099ba:	1860      	adds	r0, r4, r1
 80099bc:	4283      	cmp	r3, r0
 80099be:	d1f3      	bne.n	80099a8 <_free_r+0x20>
 80099c0:	6818      	ldr	r0, [r3, #0]
 80099c2:	685b      	ldr	r3, [r3, #4]
 80099c4:	1841      	adds	r1, r0, r1
 80099c6:	6021      	str	r1, [r4, #0]
 80099c8:	e7ee      	b.n	80099a8 <_free_r+0x20>
 80099ca:	001a      	movs	r2, r3
 80099cc:	685b      	ldr	r3, [r3, #4]
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d001      	beq.n	80099d6 <_free_r+0x4e>
 80099d2:	42a3      	cmp	r3, r4
 80099d4:	d9f9      	bls.n	80099ca <_free_r+0x42>
 80099d6:	6811      	ldr	r1, [r2, #0]
 80099d8:	1850      	adds	r0, r2, r1
 80099da:	42a0      	cmp	r0, r4
 80099dc:	d10b      	bne.n	80099f6 <_free_r+0x6e>
 80099de:	6820      	ldr	r0, [r4, #0]
 80099e0:	1809      	adds	r1, r1, r0
 80099e2:	1850      	adds	r0, r2, r1
 80099e4:	6011      	str	r1, [r2, #0]
 80099e6:	4283      	cmp	r3, r0
 80099e8:	d1e0      	bne.n	80099ac <_free_r+0x24>
 80099ea:	6818      	ldr	r0, [r3, #0]
 80099ec:	685b      	ldr	r3, [r3, #4]
 80099ee:	1841      	adds	r1, r0, r1
 80099f0:	6011      	str	r1, [r2, #0]
 80099f2:	6053      	str	r3, [r2, #4]
 80099f4:	e7da      	b.n	80099ac <_free_r+0x24>
 80099f6:	42a0      	cmp	r0, r4
 80099f8:	d902      	bls.n	8009a00 <_free_r+0x78>
 80099fa:	230c      	movs	r3, #12
 80099fc:	602b      	str	r3, [r5, #0]
 80099fe:	e7d5      	b.n	80099ac <_free_r+0x24>
 8009a00:	6821      	ldr	r1, [r4, #0]
 8009a02:	1860      	adds	r0, r4, r1
 8009a04:	4283      	cmp	r3, r0
 8009a06:	d103      	bne.n	8009a10 <_free_r+0x88>
 8009a08:	6818      	ldr	r0, [r3, #0]
 8009a0a:	685b      	ldr	r3, [r3, #4]
 8009a0c:	1841      	adds	r1, r0, r1
 8009a0e:	6021      	str	r1, [r4, #0]
 8009a10:	6063      	str	r3, [r4, #4]
 8009a12:	6054      	str	r4, [r2, #4]
 8009a14:	e7ca      	b.n	80099ac <_free_r+0x24>
 8009a16:	46c0      	nop			; (mov r8, r8)
 8009a18:	2000092c 	.word	0x2000092c

08009a1c <sbrk_aligned>:
 8009a1c:	b570      	push	{r4, r5, r6, lr}
 8009a1e:	4e0f      	ldr	r6, [pc, #60]	; (8009a5c <sbrk_aligned+0x40>)
 8009a20:	000d      	movs	r5, r1
 8009a22:	6831      	ldr	r1, [r6, #0]
 8009a24:	0004      	movs	r4, r0
 8009a26:	2900      	cmp	r1, #0
 8009a28:	d102      	bne.n	8009a30 <sbrk_aligned+0x14>
 8009a2a:	f000 fd47 	bl	800a4bc <_sbrk_r>
 8009a2e:	6030      	str	r0, [r6, #0]
 8009a30:	0029      	movs	r1, r5
 8009a32:	0020      	movs	r0, r4
 8009a34:	f000 fd42 	bl	800a4bc <_sbrk_r>
 8009a38:	1c43      	adds	r3, r0, #1
 8009a3a:	d00a      	beq.n	8009a52 <sbrk_aligned+0x36>
 8009a3c:	2303      	movs	r3, #3
 8009a3e:	1cc5      	adds	r5, r0, #3
 8009a40:	439d      	bics	r5, r3
 8009a42:	42a8      	cmp	r0, r5
 8009a44:	d007      	beq.n	8009a56 <sbrk_aligned+0x3a>
 8009a46:	1a29      	subs	r1, r5, r0
 8009a48:	0020      	movs	r0, r4
 8009a4a:	f000 fd37 	bl	800a4bc <_sbrk_r>
 8009a4e:	1c43      	adds	r3, r0, #1
 8009a50:	d101      	bne.n	8009a56 <sbrk_aligned+0x3a>
 8009a52:	2501      	movs	r5, #1
 8009a54:	426d      	negs	r5, r5
 8009a56:	0028      	movs	r0, r5
 8009a58:	bd70      	pop	{r4, r5, r6, pc}
 8009a5a:	46c0      	nop			; (mov r8, r8)
 8009a5c:	20000930 	.word	0x20000930

08009a60 <_malloc_r>:
 8009a60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009a62:	2203      	movs	r2, #3
 8009a64:	1ccb      	adds	r3, r1, #3
 8009a66:	4393      	bics	r3, r2
 8009a68:	3308      	adds	r3, #8
 8009a6a:	0006      	movs	r6, r0
 8009a6c:	001f      	movs	r7, r3
 8009a6e:	2b0c      	cmp	r3, #12
 8009a70:	d232      	bcs.n	8009ad8 <_malloc_r+0x78>
 8009a72:	270c      	movs	r7, #12
 8009a74:	42b9      	cmp	r1, r7
 8009a76:	d831      	bhi.n	8009adc <_malloc_r+0x7c>
 8009a78:	0030      	movs	r0, r6
 8009a7a:	f001 f86b 	bl	800ab54 <__malloc_lock>
 8009a7e:	4d32      	ldr	r5, [pc, #200]	; (8009b48 <_malloc_r+0xe8>)
 8009a80:	682b      	ldr	r3, [r5, #0]
 8009a82:	001c      	movs	r4, r3
 8009a84:	2c00      	cmp	r4, #0
 8009a86:	d12e      	bne.n	8009ae6 <_malloc_r+0x86>
 8009a88:	0039      	movs	r1, r7
 8009a8a:	0030      	movs	r0, r6
 8009a8c:	f7ff ffc6 	bl	8009a1c <sbrk_aligned>
 8009a90:	0004      	movs	r4, r0
 8009a92:	1c43      	adds	r3, r0, #1
 8009a94:	d11e      	bne.n	8009ad4 <_malloc_r+0x74>
 8009a96:	682c      	ldr	r4, [r5, #0]
 8009a98:	0025      	movs	r5, r4
 8009a9a:	2d00      	cmp	r5, #0
 8009a9c:	d14a      	bne.n	8009b34 <_malloc_r+0xd4>
 8009a9e:	6823      	ldr	r3, [r4, #0]
 8009aa0:	0029      	movs	r1, r5
 8009aa2:	18e3      	adds	r3, r4, r3
 8009aa4:	0030      	movs	r0, r6
 8009aa6:	9301      	str	r3, [sp, #4]
 8009aa8:	f000 fd08 	bl	800a4bc <_sbrk_r>
 8009aac:	9b01      	ldr	r3, [sp, #4]
 8009aae:	4283      	cmp	r3, r0
 8009ab0:	d143      	bne.n	8009b3a <_malloc_r+0xda>
 8009ab2:	6823      	ldr	r3, [r4, #0]
 8009ab4:	3703      	adds	r7, #3
 8009ab6:	1aff      	subs	r7, r7, r3
 8009ab8:	2303      	movs	r3, #3
 8009aba:	439f      	bics	r7, r3
 8009abc:	3708      	adds	r7, #8
 8009abe:	2f0c      	cmp	r7, #12
 8009ac0:	d200      	bcs.n	8009ac4 <_malloc_r+0x64>
 8009ac2:	270c      	movs	r7, #12
 8009ac4:	0039      	movs	r1, r7
 8009ac6:	0030      	movs	r0, r6
 8009ac8:	f7ff ffa8 	bl	8009a1c <sbrk_aligned>
 8009acc:	1c43      	adds	r3, r0, #1
 8009ace:	d034      	beq.n	8009b3a <_malloc_r+0xda>
 8009ad0:	6823      	ldr	r3, [r4, #0]
 8009ad2:	19df      	adds	r7, r3, r7
 8009ad4:	6027      	str	r7, [r4, #0]
 8009ad6:	e013      	b.n	8009b00 <_malloc_r+0xa0>
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	dacb      	bge.n	8009a74 <_malloc_r+0x14>
 8009adc:	230c      	movs	r3, #12
 8009ade:	2500      	movs	r5, #0
 8009ae0:	6033      	str	r3, [r6, #0]
 8009ae2:	0028      	movs	r0, r5
 8009ae4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009ae6:	6822      	ldr	r2, [r4, #0]
 8009ae8:	1bd1      	subs	r1, r2, r7
 8009aea:	d420      	bmi.n	8009b2e <_malloc_r+0xce>
 8009aec:	290b      	cmp	r1, #11
 8009aee:	d917      	bls.n	8009b20 <_malloc_r+0xc0>
 8009af0:	19e2      	adds	r2, r4, r7
 8009af2:	6027      	str	r7, [r4, #0]
 8009af4:	42a3      	cmp	r3, r4
 8009af6:	d111      	bne.n	8009b1c <_malloc_r+0xbc>
 8009af8:	602a      	str	r2, [r5, #0]
 8009afa:	6863      	ldr	r3, [r4, #4]
 8009afc:	6011      	str	r1, [r2, #0]
 8009afe:	6053      	str	r3, [r2, #4]
 8009b00:	0030      	movs	r0, r6
 8009b02:	0025      	movs	r5, r4
 8009b04:	f001 f82e 	bl	800ab64 <__malloc_unlock>
 8009b08:	2207      	movs	r2, #7
 8009b0a:	350b      	adds	r5, #11
 8009b0c:	1d23      	adds	r3, r4, #4
 8009b0e:	4395      	bics	r5, r2
 8009b10:	1aea      	subs	r2, r5, r3
 8009b12:	429d      	cmp	r5, r3
 8009b14:	d0e5      	beq.n	8009ae2 <_malloc_r+0x82>
 8009b16:	1b5b      	subs	r3, r3, r5
 8009b18:	50a3      	str	r3, [r4, r2]
 8009b1a:	e7e2      	b.n	8009ae2 <_malloc_r+0x82>
 8009b1c:	605a      	str	r2, [r3, #4]
 8009b1e:	e7ec      	b.n	8009afa <_malloc_r+0x9a>
 8009b20:	6862      	ldr	r2, [r4, #4]
 8009b22:	42a3      	cmp	r3, r4
 8009b24:	d101      	bne.n	8009b2a <_malloc_r+0xca>
 8009b26:	602a      	str	r2, [r5, #0]
 8009b28:	e7ea      	b.n	8009b00 <_malloc_r+0xa0>
 8009b2a:	605a      	str	r2, [r3, #4]
 8009b2c:	e7e8      	b.n	8009b00 <_malloc_r+0xa0>
 8009b2e:	0023      	movs	r3, r4
 8009b30:	6864      	ldr	r4, [r4, #4]
 8009b32:	e7a7      	b.n	8009a84 <_malloc_r+0x24>
 8009b34:	002c      	movs	r4, r5
 8009b36:	686d      	ldr	r5, [r5, #4]
 8009b38:	e7af      	b.n	8009a9a <_malloc_r+0x3a>
 8009b3a:	230c      	movs	r3, #12
 8009b3c:	0030      	movs	r0, r6
 8009b3e:	6033      	str	r3, [r6, #0]
 8009b40:	f001 f810 	bl	800ab64 <__malloc_unlock>
 8009b44:	e7cd      	b.n	8009ae2 <_malloc_r+0x82>
 8009b46:	46c0      	nop			; (mov r8, r8)
 8009b48:	2000092c 	.word	0x2000092c

08009b4c <__ssputs_r>:
 8009b4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009b4e:	688e      	ldr	r6, [r1, #8]
 8009b50:	b085      	sub	sp, #20
 8009b52:	0007      	movs	r7, r0
 8009b54:	000c      	movs	r4, r1
 8009b56:	9203      	str	r2, [sp, #12]
 8009b58:	9301      	str	r3, [sp, #4]
 8009b5a:	429e      	cmp	r6, r3
 8009b5c:	d83c      	bhi.n	8009bd8 <__ssputs_r+0x8c>
 8009b5e:	2390      	movs	r3, #144	; 0x90
 8009b60:	898a      	ldrh	r2, [r1, #12]
 8009b62:	00db      	lsls	r3, r3, #3
 8009b64:	421a      	tst	r2, r3
 8009b66:	d034      	beq.n	8009bd2 <__ssputs_r+0x86>
 8009b68:	6909      	ldr	r1, [r1, #16]
 8009b6a:	6823      	ldr	r3, [r4, #0]
 8009b6c:	6960      	ldr	r0, [r4, #20]
 8009b6e:	1a5b      	subs	r3, r3, r1
 8009b70:	9302      	str	r3, [sp, #8]
 8009b72:	2303      	movs	r3, #3
 8009b74:	4343      	muls	r3, r0
 8009b76:	0fdd      	lsrs	r5, r3, #31
 8009b78:	18ed      	adds	r5, r5, r3
 8009b7a:	9b01      	ldr	r3, [sp, #4]
 8009b7c:	9802      	ldr	r0, [sp, #8]
 8009b7e:	3301      	adds	r3, #1
 8009b80:	181b      	adds	r3, r3, r0
 8009b82:	106d      	asrs	r5, r5, #1
 8009b84:	42ab      	cmp	r3, r5
 8009b86:	d900      	bls.n	8009b8a <__ssputs_r+0x3e>
 8009b88:	001d      	movs	r5, r3
 8009b8a:	0553      	lsls	r3, r2, #21
 8009b8c:	d532      	bpl.n	8009bf4 <__ssputs_r+0xa8>
 8009b8e:	0029      	movs	r1, r5
 8009b90:	0038      	movs	r0, r7
 8009b92:	f7ff ff65 	bl	8009a60 <_malloc_r>
 8009b96:	1e06      	subs	r6, r0, #0
 8009b98:	d109      	bne.n	8009bae <__ssputs_r+0x62>
 8009b9a:	230c      	movs	r3, #12
 8009b9c:	603b      	str	r3, [r7, #0]
 8009b9e:	2340      	movs	r3, #64	; 0x40
 8009ba0:	2001      	movs	r0, #1
 8009ba2:	89a2      	ldrh	r2, [r4, #12]
 8009ba4:	4240      	negs	r0, r0
 8009ba6:	4313      	orrs	r3, r2
 8009ba8:	81a3      	strh	r3, [r4, #12]
 8009baa:	b005      	add	sp, #20
 8009bac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009bae:	9a02      	ldr	r2, [sp, #8]
 8009bb0:	6921      	ldr	r1, [r4, #16]
 8009bb2:	f7ff f9ea 	bl	8008f8a <memcpy>
 8009bb6:	89a3      	ldrh	r3, [r4, #12]
 8009bb8:	4a14      	ldr	r2, [pc, #80]	; (8009c0c <__ssputs_r+0xc0>)
 8009bba:	401a      	ands	r2, r3
 8009bbc:	2380      	movs	r3, #128	; 0x80
 8009bbe:	4313      	orrs	r3, r2
 8009bc0:	81a3      	strh	r3, [r4, #12]
 8009bc2:	9b02      	ldr	r3, [sp, #8]
 8009bc4:	6126      	str	r6, [r4, #16]
 8009bc6:	18f6      	adds	r6, r6, r3
 8009bc8:	6026      	str	r6, [r4, #0]
 8009bca:	6165      	str	r5, [r4, #20]
 8009bcc:	9e01      	ldr	r6, [sp, #4]
 8009bce:	1aed      	subs	r5, r5, r3
 8009bd0:	60a5      	str	r5, [r4, #8]
 8009bd2:	9b01      	ldr	r3, [sp, #4]
 8009bd4:	429e      	cmp	r6, r3
 8009bd6:	d900      	bls.n	8009bda <__ssputs_r+0x8e>
 8009bd8:	9e01      	ldr	r6, [sp, #4]
 8009bda:	0032      	movs	r2, r6
 8009bdc:	9903      	ldr	r1, [sp, #12]
 8009bde:	6820      	ldr	r0, [r4, #0]
 8009be0:	f000 ffa5 	bl	800ab2e <memmove>
 8009be4:	68a3      	ldr	r3, [r4, #8]
 8009be6:	2000      	movs	r0, #0
 8009be8:	1b9b      	subs	r3, r3, r6
 8009bea:	60a3      	str	r3, [r4, #8]
 8009bec:	6823      	ldr	r3, [r4, #0]
 8009bee:	199e      	adds	r6, r3, r6
 8009bf0:	6026      	str	r6, [r4, #0]
 8009bf2:	e7da      	b.n	8009baa <__ssputs_r+0x5e>
 8009bf4:	002a      	movs	r2, r5
 8009bf6:	0038      	movs	r0, r7
 8009bf8:	f000 ffbc 	bl	800ab74 <_realloc_r>
 8009bfc:	1e06      	subs	r6, r0, #0
 8009bfe:	d1e0      	bne.n	8009bc2 <__ssputs_r+0x76>
 8009c00:	0038      	movs	r0, r7
 8009c02:	6921      	ldr	r1, [r4, #16]
 8009c04:	f7ff fec0 	bl	8009988 <_free_r>
 8009c08:	e7c7      	b.n	8009b9a <__ssputs_r+0x4e>
 8009c0a:	46c0      	nop			; (mov r8, r8)
 8009c0c:	fffffb7f 	.word	0xfffffb7f

08009c10 <_svfiprintf_r>:
 8009c10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009c12:	b0a1      	sub	sp, #132	; 0x84
 8009c14:	9003      	str	r0, [sp, #12]
 8009c16:	001d      	movs	r5, r3
 8009c18:	898b      	ldrh	r3, [r1, #12]
 8009c1a:	000f      	movs	r7, r1
 8009c1c:	0016      	movs	r6, r2
 8009c1e:	061b      	lsls	r3, r3, #24
 8009c20:	d511      	bpl.n	8009c46 <_svfiprintf_r+0x36>
 8009c22:	690b      	ldr	r3, [r1, #16]
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d10e      	bne.n	8009c46 <_svfiprintf_r+0x36>
 8009c28:	2140      	movs	r1, #64	; 0x40
 8009c2a:	f7ff ff19 	bl	8009a60 <_malloc_r>
 8009c2e:	6038      	str	r0, [r7, #0]
 8009c30:	6138      	str	r0, [r7, #16]
 8009c32:	2800      	cmp	r0, #0
 8009c34:	d105      	bne.n	8009c42 <_svfiprintf_r+0x32>
 8009c36:	230c      	movs	r3, #12
 8009c38:	9a03      	ldr	r2, [sp, #12]
 8009c3a:	3801      	subs	r0, #1
 8009c3c:	6013      	str	r3, [r2, #0]
 8009c3e:	b021      	add	sp, #132	; 0x84
 8009c40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009c42:	2340      	movs	r3, #64	; 0x40
 8009c44:	617b      	str	r3, [r7, #20]
 8009c46:	2300      	movs	r3, #0
 8009c48:	ac08      	add	r4, sp, #32
 8009c4a:	6163      	str	r3, [r4, #20]
 8009c4c:	3320      	adds	r3, #32
 8009c4e:	7663      	strb	r3, [r4, #25]
 8009c50:	3310      	adds	r3, #16
 8009c52:	76a3      	strb	r3, [r4, #26]
 8009c54:	9507      	str	r5, [sp, #28]
 8009c56:	0035      	movs	r5, r6
 8009c58:	782b      	ldrb	r3, [r5, #0]
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d001      	beq.n	8009c62 <_svfiprintf_r+0x52>
 8009c5e:	2b25      	cmp	r3, #37	; 0x25
 8009c60:	d147      	bne.n	8009cf2 <_svfiprintf_r+0xe2>
 8009c62:	1bab      	subs	r3, r5, r6
 8009c64:	9305      	str	r3, [sp, #20]
 8009c66:	42b5      	cmp	r5, r6
 8009c68:	d00c      	beq.n	8009c84 <_svfiprintf_r+0x74>
 8009c6a:	0032      	movs	r2, r6
 8009c6c:	0039      	movs	r1, r7
 8009c6e:	9803      	ldr	r0, [sp, #12]
 8009c70:	f7ff ff6c 	bl	8009b4c <__ssputs_r>
 8009c74:	1c43      	adds	r3, r0, #1
 8009c76:	d100      	bne.n	8009c7a <_svfiprintf_r+0x6a>
 8009c78:	e0ae      	b.n	8009dd8 <_svfiprintf_r+0x1c8>
 8009c7a:	6962      	ldr	r2, [r4, #20]
 8009c7c:	9b05      	ldr	r3, [sp, #20]
 8009c7e:	4694      	mov	ip, r2
 8009c80:	4463      	add	r3, ip
 8009c82:	6163      	str	r3, [r4, #20]
 8009c84:	782b      	ldrb	r3, [r5, #0]
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d100      	bne.n	8009c8c <_svfiprintf_r+0x7c>
 8009c8a:	e0a5      	b.n	8009dd8 <_svfiprintf_r+0x1c8>
 8009c8c:	2201      	movs	r2, #1
 8009c8e:	2300      	movs	r3, #0
 8009c90:	4252      	negs	r2, r2
 8009c92:	6062      	str	r2, [r4, #4]
 8009c94:	a904      	add	r1, sp, #16
 8009c96:	3254      	adds	r2, #84	; 0x54
 8009c98:	1852      	adds	r2, r2, r1
 8009c9a:	1c6e      	adds	r6, r5, #1
 8009c9c:	6023      	str	r3, [r4, #0]
 8009c9e:	60e3      	str	r3, [r4, #12]
 8009ca0:	60a3      	str	r3, [r4, #8]
 8009ca2:	7013      	strb	r3, [r2, #0]
 8009ca4:	65a3      	str	r3, [r4, #88]	; 0x58
 8009ca6:	2205      	movs	r2, #5
 8009ca8:	7831      	ldrb	r1, [r6, #0]
 8009caa:	4854      	ldr	r0, [pc, #336]	; (8009dfc <_svfiprintf_r+0x1ec>)
 8009cac:	f7ff f962 	bl	8008f74 <memchr>
 8009cb0:	1c75      	adds	r5, r6, #1
 8009cb2:	2800      	cmp	r0, #0
 8009cb4:	d11f      	bne.n	8009cf6 <_svfiprintf_r+0xe6>
 8009cb6:	6822      	ldr	r2, [r4, #0]
 8009cb8:	06d3      	lsls	r3, r2, #27
 8009cba:	d504      	bpl.n	8009cc6 <_svfiprintf_r+0xb6>
 8009cbc:	2353      	movs	r3, #83	; 0x53
 8009cbe:	a904      	add	r1, sp, #16
 8009cc0:	185b      	adds	r3, r3, r1
 8009cc2:	2120      	movs	r1, #32
 8009cc4:	7019      	strb	r1, [r3, #0]
 8009cc6:	0713      	lsls	r3, r2, #28
 8009cc8:	d504      	bpl.n	8009cd4 <_svfiprintf_r+0xc4>
 8009cca:	2353      	movs	r3, #83	; 0x53
 8009ccc:	a904      	add	r1, sp, #16
 8009cce:	185b      	adds	r3, r3, r1
 8009cd0:	212b      	movs	r1, #43	; 0x2b
 8009cd2:	7019      	strb	r1, [r3, #0]
 8009cd4:	7833      	ldrb	r3, [r6, #0]
 8009cd6:	2b2a      	cmp	r3, #42	; 0x2a
 8009cd8:	d016      	beq.n	8009d08 <_svfiprintf_r+0xf8>
 8009cda:	0035      	movs	r5, r6
 8009cdc:	2100      	movs	r1, #0
 8009cde:	200a      	movs	r0, #10
 8009ce0:	68e3      	ldr	r3, [r4, #12]
 8009ce2:	782a      	ldrb	r2, [r5, #0]
 8009ce4:	1c6e      	adds	r6, r5, #1
 8009ce6:	3a30      	subs	r2, #48	; 0x30
 8009ce8:	2a09      	cmp	r2, #9
 8009cea:	d94e      	bls.n	8009d8a <_svfiprintf_r+0x17a>
 8009cec:	2900      	cmp	r1, #0
 8009cee:	d111      	bne.n	8009d14 <_svfiprintf_r+0x104>
 8009cf0:	e017      	b.n	8009d22 <_svfiprintf_r+0x112>
 8009cf2:	3501      	adds	r5, #1
 8009cf4:	e7b0      	b.n	8009c58 <_svfiprintf_r+0x48>
 8009cf6:	4b41      	ldr	r3, [pc, #260]	; (8009dfc <_svfiprintf_r+0x1ec>)
 8009cf8:	6822      	ldr	r2, [r4, #0]
 8009cfa:	1ac0      	subs	r0, r0, r3
 8009cfc:	2301      	movs	r3, #1
 8009cfe:	4083      	lsls	r3, r0
 8009d00:	4313      	orrs	r3, r2
 8009d02:	002e      	movs	r6, r5
 8009d04:	6023      	str	r3, [r4, #0]
 8009d06:	e7ce      	b.n	8009ca6 <_svfiprintf_r+0x96>
 8009d08:	9b07      	ldr	r3, [sp, #28]
 8009d0a:	1d19      	adds	r1, r3, #4
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	9107      	str	r1, [sp, #28]
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	db01      	blt.n	8009d18 <_svfiprintf_r+0x108>
 8009d14:	930b      	str	r3, [sp, #44]	; 0x2c
 8009d16:	e004      	b.n	8009d22 <_svfiprintf_r+0x112>
 8009d18:	425b      	negs	r3, r3
 8009d1a:	60e3      	str	r3, [r4, #12]
 8009d1c:	2302      	movs	r3, #2
 8009d1e:	4313      	orrs	r3, r2
 8009d20:	6023      	str	r3, [r4, #0]
 8009d22:	782b      	ldrb	r3, [r5, #0]
 8009d24:	2b2e      	cmp	r3, #46	; 0x2e
 8009d26:	d10a      	bne.n	8009d3e <_svfiprintf_r+0x12e>
 8009d28:	786b      	ldrb	r3, [r5, #1]
 8009d2a:	2b2a      	cmp	r3, #42	; 0x2a
 8009d2c:	d135      	bne.n	8009d9a <_svfiprintf_r+0x18a>
 8009d2e:	9b07      	ldr	r3, [sp, #28]
 8009d30:	3502      	adds	r5, #2
 8009d32:	1d1a      	adds	r2, r3, #4
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	9207      	str	r2, [sp, #28]
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	db2b      	blt.n	8009d94 <_svfiprintf_r+0x184>
 8009d3c:	9309      	str	r3, [sp, #36]	; 0x24
 8009d3e:	4e30      	ldr	r6, [pc, #192]	; (8009e00 <_svfiprintf_r+0x1f0>)
 8009d40:	2203      	movs	r2, #3
 8009d42:	0030      	movs	r0, r6
 8009d44:	7829      	ldrb	r1, [r5, #0]
 8009d46:	f7ff f915 	bl	8008f74 <memchr>
 8009d4a:	2800      	cmp	r0, #0
 8009d4c:	d006      	beq.n	8009d5c <_svfiprintf_r+0x14c>
 8009d4e:	2340      	movs	r3, #64	; 0x40
 8009d50:	1b80      	subs	r0, r0, r6
 8009d52:	4083      	lsls	r3, r0
 8009d54:	6822      	ldr	r2, [r4, #0]
 8009d56:	3501      	adds	r5, #1
 8009d58:	4313      	orrs	r3, r2
 8009d5a:	6023      	str	r3, [r4, #0]
 8009d5c:	7829      	ldrb	r1, [r5, #0]
 8009d5e:	2206      	movs	r2, #6
 8009d60:	4828      	ldr	r0, [pc, #160]	; (8009e04 <_svfiprintf_r+0x1f4>)
 8009d62:	1c6e      	adds	r6, r5, #1
 8009d64:	7621      	strb	r1, [r4, #24]
 8009d66:	f7ff f905 	bl	8008f74 <memchr>
 8009d6a:	2800      	cmp	r0, #0
 8009d6c:	d03c      	beq.n	8009de8 <_svfiprintf_r+0x1d8>
 8009d6e:	4b26      	ldr	r3, [pc, #152]	; (8009e08 <_svfiprintf_r+0x1f8>)
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d125      	bne.n	8009dc0 <_svfiprintf_r+0x1b0>
 8009d74:	2207      	movs	r2, #7
 8009d76:	9b07      	ldr	r3, [sp, #28]
 8009d78:	3307      	adds	r3, #7
 8009d7a:	4393      	bics	r3, r2
 8009d7c:	3308      	adds	r3, #8
 8009d7e:	9307      	str	r3, [sp, #28]
 8009d80:	6963      	ldr	r3, [r4, #20]
 8009d82:	9a04      	ldr	r2, [sp, #16]
 8009d84:	189b      	adds	r3, r3, r2
 8009d86:	6163      	str	r3, [r4, #20]
 8009d88:	e765      	b.n	8009c56 <_svfiprintf_r+0x46>
 8009d8a:	4343      	muls	r3, r0
 8009d8c:	0035      	movs	r5, r6
 8009d8e:	2101      	movs	r1, #1
 8009d90:	189b      	adds	r3, r3, r2
 8009d92:	e7a6      	b.n	8009ce2 <_svfiprintf_r+0xd2>
 8009d94:	2301      	movs	r3, #1
 8009d96:	425b      	negs	r3, r3
 8009d98:	e7d0      	b.n	8009d3c <_svfiprintf_r+0x12c>
 8009d9a:	2300      	movs	r3, #0
 8009d9c:	200a      	movs	r0, #10
 8009d9e:	001a      	movs	r2, r3
 8009da0:	3501      	adds	r5, #1
 8009da2:	6063      	str	r3, [r4, #4]
 8009da4:	7829      	ldrb	r1, [r5, #0]
 8009da6:	1c6e      	adds	r6, r5, #1
 8009da8:	3930      	subs	r1, #48	; 0x30
 8009daa:	2909      	cmp	r1, #9
 8009dac:	d903      	bls.n	8009db6 <_svfiprintf_r+0x1a6>
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d0c5      	beq.n	8009d3e <_svfiprintf_r+0x12e>
 8009db2:	9209      	str	r2, [sp, #36]	; 0x24
 8009db4:	e7c3      	b.n	8009d3e <_svfiprintf_r+0x12e>
 8009db6:	4342      	muls	r2, r0
 8009db8:	0035      	movs	r5, r6
 8009dba:	2301      	movs	r3, #1
 8009dbc:	1852      	adds	r2, r2, r1
 8009dbe:	e7f1      	b.n	8009da4 <_svfiprintf_r+0x194>
 8009dc0:	ab07      	add	r3, sp, #28
 8009dc2:	9300      	str	r3, [sp, #0]
 8009dc4:	003a      	movs	r2, r7
 8009dc6:	0021      	movs	r1, r4
 8009dc8:	4b10      	ldr	r3, [pc, #64]	; (8009e0c <_svfiprintf_r+0x1fc>)
 8009dca:	9803      	ldr	r0, [sp, #12]
 8009dcc:	f7fc f91c 	bl	8006008 <_printf_float>
 8009dd0:	9004      	str	r0, [sp, #16]
 8009dd2:	9b04      	ldr	r3, [sp, #16]
 8009dd4:	3301      	adds	r3, #1
 8009dd6:	d1d3      	bne.n	8009d80 <_svfiprintf_r+0x170>
 8009dd8:	89bb      	ldrh	r3, [r7, #12]
 8009dda:	980d      	ldr	r0, [sp, #52]	; 0x34
 8009ddc:	065b      	lsls	r3, r3, #25
 8009dde:	d400      	bmi.n	8009de2 <_svfiprintf_r+0x1d2>
 8009de0:	e72d      	b.n	8009c3e <_svfiprintf_r+0x2e>
 8009de2:	2001      	movs	r0, #1
 8009de4:	4240      	negs	r0, r0
 8009de6:	e72a      	b.n	8009c3e <_svfiprintf_r+0x2e>
 8009de8:	ab07      	add	r3, sp, #28
 8009dea:	9300      	str	r3, [sp, #0]
 8009dec:	003a      	movs	r2, r7
 8009dee:	0021      	movs	r1, r4
 8009df0:	4b06      	ldr	r3, [pc, #24]	; (8009e0c <_svfiprintf_r+0x1fc>)
 8009df2:	9803      	ldr	r0, [sp, #12]
 8009df4:	f7fc fbba 	bl	800656c <_printf_i>
 8009df8:	e7ea      	b.n	8009dd0 <_svfiprintf_r+0x1c0>
 8009dfa:	46c0      	nop			; (mov r8, r8)
 8009dfc:	0800b7d4 	.word	0x0800b7d4
 8009e00:	0800b7da 	.word	0x0800b7da
 8009e04:	0800b7de 	.word	0x0800b7de
 8009e08:	08006009 	.word	0x08006009
 8009e0c:	08009b4d 	.word	0x08009b4d

08009e10 <_sungetc_r>:
 8009e10:	b570      	push	{r4, r5, r6, lr}
 8009e12:	0014      	movs	r4, r2
 8009e14:	1c4b      	adds	r3, r1, #1
 8009e16:	d103      	bne.n	8009e20 <_sungetc_r+0x10>
 8009e18:	2501      	movs	r5, #1
 8009e1a:	426d      	negs	r5, r5
 8009e1c:	0028      	movs	r0, r5
 8009e1e:	bd70      	pop	{r4, r5, r6, pc}
 8009e20:	8993      	ldrh	r3, [r2, #12]
 8009e22:	2220      	movs	r2, #32
 8009e24:	4393      	bics	r3, r2
 8009e26:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8009e28:	81a3      	strh	r3, [r4, #12]
 8009e2a:	b2ce      	uxtb	r6, r1
 8009e2c:	6863      	ldr	r3, [r4, #4]
 8009e2e:	b2cd      	uxtb	r5, r1
 8009e30:	2a00      	cmp	r2, #0
 8009e32:	d010      	beq.n	8009e56 <_sungetc_r+0x46>
 8009e34:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8009e36:	429a      	cmp	r2, r3
 8009e38:	dd07      	ble.n	8009e4a <_sungetc_r+0x3a>
 8009e3a:	6823      	ldr	r3, [r4, #0]
 8009e3c:	3b01      	subs	r3, #1
 8009e3e:	6023      	str	r3, [r4, #0]
 8009e40:	701e      	strb	r6, [r3, #0]
 8009e42:	6863      	ldr	r3, [r4, #4]
 8009e44:	3301      	adds	r3, #1
 8009e46:	6063      	str	r3, [r4, #4]
 8009e48:	e7e8      	b.n	8009e1c <_sungetc_r+0xc>
 8009e4a:	0021      	movs	r1, r4
 8009e4c:	f000 fc24 	bl	800a698 <__submore>
 8009e50:	2800      	cmp	r0, #0
 8009e52:	d0f2      	beq.n	8009e3a <_sungetc_r+0x2a>
 8009e54:	e7e0      	b.n	8009e18 <_sungetc_r+0x8>
 8009e56:	6921      	ldr	r1, [r4, #16]
 8009e58:	6822      	ldr	r2, [r4, #0]
 8009e5a:	2900      	cmp	r1, #0
 8009e5c:	d007      	beq.n	8009e6e <_sungetc_r+0x5e>
 8009e5e:	4291      	cmp	r1, r2
 8009e60:	d205      	bcs.n	8009e6e <_sungetc_r+0x5e>
 8009e62:	1e51      	subs	r1, r2, #1
 8009e64:	7808      	ldrb	r0, [r1, #0]
 8009e66:	42a8      	cmp	r0, r5
 8009e68:	d101      	bne.n	8009e6e <_sungetc_r+0x5e>
 8009e6a:	6021      	str	r1, [r4, #0]
 8009e6c:	e7ea      	b.n	8009e44 <_sungetc_r+0x34>
 8009e6e:	6423      	str	r3, [r4, #64]	; 0x40
 8009e70:	0023      	movs	r3, r4
 8009e72:	3344      	adds	r3, #68	; 0x44
 8009e74:	6363      	str	r3, [r4, #52]	; 0x34
 8009e76:	2303      	movs	r3, #3
 8009e78:	63a3      	str	r3, [r4, #56]	; 0x38
 8009e7a:	0023      	movs	r3, r4
 8009e7c:	3346      	adds	r3, #70	; 0x46
 8009e7e:	63e2      	str	r2, [r4, #60]	; 0x3c
 8009e80:	701e      	strb	r6, [r3, #0]
 8009e82:	6023      	str	r3, [r4, #0]
 8009e84:	2301      	movs	r3, #1
 8009e86:	e7de      	b.n	8009e46 <_sungetc_r+0x36>

08009e88 <__ssrefill_r>:
 8009e88:	b510      	push	{r4, lr}
 8009e8a:	000c      	movs	r4, r1
 8009e8c:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8009e8e:	2900      	cmp	r1, #0
 8009e90:	d00e      	beq.n	8009eb0 <__ssrefill_r+0x28>
 8009e92:	0023      	movs	r3, r4
 8009e94:	3344      	adds	r3, #68	; 0x44
 8009e96:	4299      	cmp	r1, r3
 8009e98:	d001      	beq.n	8009e9e <__ssrefill_r+0x16>
 8009e9a:	f7ff fd75 	bl	8009988 <_free_r>
 8009e9e:	2000      	movs	r0, #0
 8009ea0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009ea2:	6360      	str	r0, [r4, #52]	; 0x34
 8009ea4:	6063      	str	r3, [r4, #4]
 8009ea6:	4283      	cmp	r3, r0
 8009ea8:	d002      	beq.n	8009eb0 <__ssrefill_r+0x28>
 8009eaa:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009eac:	6023      	str	r3, [r4, #0]
 8009eae:	bd10      	pop	{r4, pc}
 8009eb0:	6923      	ldr	r3, [r4, #16]
 8009eb2:	2001      	movs	r0, #1
 8009eb4:	6023      	str	r3, [r4, #0]
 8009eb6:	2300      	movs	r3, #0
 8009eb8:	89a2      	ldrh	r2, [r4, #12]
 8009eba:	6063      	str	r3, [r4, #4]
 8009ebc:	3320      	adds	r3, #32
 8009ebe:	4313      	orrs	r3, r2
 8009ec0:	81a3      	strh	r3, [r4, #12]
 8009ec2:	4240      	negs	r0, r0
 8009ec4:	e7f3      	b.n	8009eae <__ssrefill_r+0x26>
	...

08009ec8 <__ssvfiscanf_r>:
 8009ec8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009eca:	4cb8      	ldr	r4, [pc, #736]	; (800a1ac <__ssvfiscanf_r+0x2e4>)
 8009ecc:	0006      	movs	r6, r0
 8009ece:	44a5      	add	sp, r4
 8009ed0:	000c      	movs	r4, r1
 8009ed2:	2100      	movs	r1, #0
 8009ed4:	9146      	str	r1, [sp, #280]	; 0x118
 8009ed6:	9147      	str	r1, [sp, #284]	; 0x11c
 8009ed8:	a903      	add	r1, sp, #12
 8009eda:	9148      	str	r1, [sp, #288]	; 0x120
 8009edc:	21be      	movs	r1, #190	; 0xbe
 8009ede:	48b4      	ldr	r0, [pc, #720]	; (800a1b0 <__ssvfiscanf_r+0x2e8>)
 8009ee0:	0049      	lsls	r1, r1, #1
 8009ee2:	ad43      	add	r5, sp, #268	; 0x10c
 8009ee4:	5068      	str	r0, [r5, r1]
 8009ee6:	25c0      	movs	r5, #192	; 0xc0
 8009ee8:	49b2      	ldr	r1, [pc, #712]	; (800a1b4 <__ssvfiscanf_r+0x2ec>)
 8009eea:	006d      	lsls	r5, r5, #1
 8009eec:	a843      	add	r0, sp, #268	; 0x10c
 8009eee:	5141      	str	r1, [r0, r5]
 8009ef0:	9302      	str	r3, [sp, #8]
 8009ef2:	7813      	ldrb	r3, [r2, #0]
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d100      	bne.n	8009efa <__ssvfiscanf_r+0x32>
 8009ef8:	e155      	b.n	800a1a6 <__ssvfiscanf_r+0x2de>
 8009efa:	49af      	ldr	r1, [pc, #700]	; (800a1b8 <__ssvfiscanf_r+0x2f0>)
 8009efc:	2508      	movs	r5, #8
 8009efe:	5cc8      	ldrb	r0, [r1, r3]
 8009f00:	2108      	movs	r1, #8
 8009f02:	1c57      	adds	r7, r2, #1
 8009f04:	4001      	ands	r1, r0
 8009f06:	4228      	tst	r0, r5
 8009f08:	d020      	beq.n	8009f4c <__ssvfiscanf_r+0x84>
 8009f0a:	6863      	ldr	r3, [r4, #4]
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	dd12      	ble.n	8009f36 <__ssvfiscanf_r+0x6e>
 8009f10:	6823      	ldr	r3, [r4, #0]
 8009f12:	49a9      	ldr	r1, [pc, #676]	; (800a1b8 <__ssvfiscanf_r+0x2f0>)
 8009f14:	781a      	ldrb	r2, [r3, #0]
 8009f16:	5c8a      	ldrb	r2, [r1, r2]
 8009f18:	2108      	movs	r1, #8
 8009f1a:	420a      	tst	r2, r1
 8009f1c:	d101      	bne.n	8009f22 <__ssvfiscanf_r+0x5a>
 8009f1e:	003a      	movs	r2, r7
 8009f20:	e7e7      	b.n	8009ef2 <__ssvfiscanf_r+0x2a>
 8009f22:	9a47      	ldr	r2, [sp, #284]	; 0x11c
 8009f24:	3301      	adds	r3, #1
 8009f26:	9200      	str	r2, [sp, #0]
 8009f28:	3201      	adds	r2, #1
 8009f2a:	9247      	str	r2, [sp, #284]	; 0x11c
 8009f2c:	6862      	ldr	r2, [r4, #4]
 8009f2e:	6023      	str	r3, [r4, #0]
 8009f30:	3a01      	subs	r2, #1
 8009f32:	6062      	str	r2, [r4, #4]
 8009f34:	e7e9      	b.n	8009f0a <__ssvfiscanf_r+0x42>
 8009f36:	22c0      	movs	r2, #192	; 0xc0
 8009f38:	ab43      	add	r3, sp, #268	; 0x10c
 8009f3a:	0052      	lsls	r2, r2, #1
 8009f3c:	589b      	ldr	r3, [r3, r2]
 8009f3e:	0021      	movs	r1, r4
 8009f40:	0030      	movs	r0, r6
 8009f42:	9300      	str	r3, [sp, #0]
 8009f44:	4798      	blx	r3
 8009f46:	2800      	cmp	r0, #0
 8009f48:	d0e2      	beq.n	8009f10 <__ssvfiscanf_r+0x48>
 8009f4a:	e7e8      	b.n	8009f1e <__ssvfiscanf_r+0x56>
 8009f4c:	001d      	movs	r5, r3
 8009f4e:	2b25      	cmp	r3, #37	; 0x25
 8009f50:	d164      	bne.n	800a01c <__ssvfiscanf_r+0x154>
 8009f52:	9145      	str	r1, [sp, #276]	; 0x114
 8009f54:	9143      	str	r1, [sp, #268]	; 0x10c
 8009f56:	7853      	ldrb	r3, [r2, #1]
 8009f58:	2b2a      	cmp	r3, #42	; 0x2a
 8009f5a:	d102      	bne.n	8009f62 <__ssvfiscanf_r+0x9a>
 8009f5c:	3b1a      	subs	r3, #26
 8009f5e:	9343      	str	r3, [sp, #268]	; 0x10c
 8009f60:	1c97      	adds	r7, r2, #2
 8009f62:	003d      	movs	r5, r7
 8009f64:	220a      	movs	r2, #10
 8009f66:	7829      	ldrb	r1, [r5, #0]
 8009f68:	1c6b      	adds	r3, r5, #1
 8009f6a:	9300      	str	r3, [sp, #0]
 8009f6c:	000b      	movs	r3, r1
 8009f6e:	3b30      	subs	r3, #48	; 0x30
 8009f70:	2b09      	cmp	r3, #9
 8009f72:	d91f      	bls.n	8009fb4 <__ssvfiscanf_r+0xec>
 8009f74:	4f91      	ldr	r7, [pc, #580]	; (800a1bc <__ssvfiscanf_r+0x2f4>)
 8009f76:	2203      	movs	r2, #3
 8009f78:	0038      	movs	r0, r7
 8009f7a:	f7fe fffb 	bl	8008f74 <memchr>
 8009f7e:	2800      	cmp	r0, #0
 8009f80:	d007      	beq.n	8009f92 <__ssvfiscanf_r+0xca>
 8009f82:	2301      	movs	r3, #1
 8009f84:	1bc0      	subs	r0, r0, r7
 8009f86:	4083      	lsls	r3, r0
 8009f88:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 8009f8a:	9d00      	ldr	r5, [sp, #0]
 8009f8c:	4313      	orrs	r3, r2
 8009f8e:	9201      	str	r2, [sp, #4]
 8009f90:	9343      	str	r3, [sp, #268]	; 0x10c
 8009f92:	1c6f      	adds	r7, r5, #1
 8009f94:	782d      	ldrb	r5, [r5, #0]
 8009f96:	2d78      	cmp	r5, #120	; 0x78
 8009f98:	d807      	bhi.n	8009faa <__ssvfiscanf_r+0xe2>
 8009f9a:	2d57      	cmp	r5, #87	; 0x57
 8009f9c:	d812      	bhi.n	8009fc4 <__ssvfiscanf_r+0xfc>
 8009f9e:	2d25      	cmp	r5, #37	; 0x25
 8009fa0:	d03c      	beq.n	800a01c <__ssvfiscanf_r+0x154>
 8009fa2:	d836      	bhi.n	800a012 <__ssvfiscanf_r+0x14a>
 8009fa4:	2d00      	cmp	r5, #0
 8009fa6:	d100      	bne.n	8009faa <__ssvfiscanf_r+0xe2>
 8009fa8:	e0fa      	b.n	800a1a0 <__ssvfiscanf_r+0x2d8>
 8009faa:	2303      	movs	r3, #3
 8009fac:	9349      	str	r3, [sp, #292]	; 0x124
 8009fae:	3307      	adds	r3, #7
 8009fb0:	9344      	str	r3, [sp, #272]	; 0x110
 8009fb2:	e06d      	b.n	800a090 <__ssvfiscanf_r+0x1c8>
 8009fb4:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8009fb6:	9d00      	ldr	r5, [sp, #0]
 8009fb8:	9301      	str	r3, [sp, #4]
 8009fba:	4353      	muls	r3, r2
 8009fbc:	3b30      	subs	r3, #48	; 0x30
 8009fbe:	185b      	adds	r3, r3, r1
 8009fc0:	9345      	str	r3, [sp, #276]	; 0x114
 8009fc2:	e7d0      	b.n	8009f66 <__ssvfiscanf_r+0x9e>
 8009fc4:	0028      	movs	r0, r5
 8009fc6:	3858      	subs	r0, #88	; 0x58
 8009fc8:	2820      	cmp	r0, #32
 8009fca:	d8ee      	bhi.n	8009faa <__ssvfiscanf_r+0xe2>
 8009fcc:	f7f6 f8b4 	bl	8000138 <__gnu_thumb1_case_shi>
 8009fd0:	ffed0051 	.word	0xffed0051
 8009fd4:	0087ffed 	.word	0x0087ffed
 8009fd8:	ffedffed 	.word	0xffedffed
 8009fdc:	ffedffed 	.word	0xffedffed
 8009fe0:	ffedffed 	.word	0xffedffed
 8009fe4:	0095ffed 	.word	0x0095ffed
 8009fe8:	0024007d 	.word	0x0024007d
 8009fec:	00240024 	.word	0x00240024
 8009ff0:	007fffed 	.word	0x007fffed
 8009ff4:	ffedffed 	.word	0xffedffed
 8009ff8:	ffedffed 	.word	0xffedffed
 8009ffc:	0083009f 	.word	0x0083009f
 800a000:	ffed004b 	.word	0xffed004b
 800a004:	009dffed 	.word	0x009dffed
 800a008:	007dffed 	.word	0x007dffed
 800a00c:	ffedffed 	.word	0xffedffed
 800a010:	0051      	.short	0x0051
 800a012:	3d45      	subs	r5, #69	; 0x45
 800a014:	2d02      	cmp	r5, #2
 800a016:	d8c8      	bhi.n	8009faa <__ssvfiscanf_r+0xe2>
 800a018:	2305      	movs	r3, #5
 800a01a:	e06c      	b.n	800a0f6 <__ssvfiscanf_r+0x22e>
 800a01c:	6863      	ldr	r3, [r4, #4]
 800a01e:	2b00      	cmp	r3, #0
 800a020:	dd0e      	ble.n	800a040 <__ssvfiscanf_r+0x178>
 800a022:	6823      	ldr	r3, [r4, #0]
 800a024:	781a      	ldrb	r2, [r3, #0]
 800a026:	42aa      	cmp	r2, r5
 800a028:	d000      	beq.n	800a02c <__ssvfiscanf_r+0x164>
 800a02a:	e0bc      	b.n	800a1a6 <__ssvfiscanf_r+0x2de>
 800a02c:	3301      	adds	r3, #1
 800a02e:	6862      	ldr	r2, [r4, #4]
 800a030:	6023      	str	r3, [r4, #0]
 800a032:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800a034:	3a01      	subs	r2, #1
 800a036:	9300      	str	r3, [sp, #0]
 800a038:	3301      	adds	r3, #1
 800a03a:	6062      	str	r2, [r4, #4]
 800a03c:	9347      	str	r3, [sp, #284]	; 0x11c
 800a03e:	e76e      	b.n	8009f1e <__ssvfiscanf_r+0x56>
 800a040:	22c0      	movs	r2, #192	; 0xc0
 800a042:	ab43      	add	r3, sp, #268	; 0x10c
 800a044:	0052      	lsls	r2, r2, #1
 800a046:	589b      	ldr	r3, [r3, r2]
 800a048:	0021      	movs	r1, r4
 800a04a:	0030      	movs	r0, r6
 800a04c:	9300      	str	r3, [sp, #0]
 800a04e:	4798      	blx	r3
 800a050:	2800      	cmp	r0, #0
 800a052:	d0e6      	beq.n	800a022 <__ssvfiscanf_r+0x15a>
 800a054:	9846      	ldr	r0, [sp, #280]	; 0x118
 800a056:	2800      	cmp	r0, #0
 800a058:	d000      	beq.n	800a05c <__ssvfiscanf_r+0x194>
 800a05a:	e09d      	b.n	800a198 <__ssvfiscanf_r+0x2d0>
 800a05c:	3801      	subs	r0, #1
 800a05e:	23a5      	movs	r3, #165	; 0xa5
 800a060:	009b      	lsls	r3, r3, #2
 800a062:	449d      	add	sp, r3
 800a064:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a066:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800a068:	9300      	str	r3, [sp, #0]
 800a06a:	2320      	movs	r3, #32
 800a06c:	9a00      	ldr	r2, [sp, #0]
 800a06e:	4313      	orrs	r3, r2
 800a070:	9343      	str	r3, [sp, #268]	; 0x10c
 800a072:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800a074:	9300      	str	r3, [sp, #0]
 800a076:	2380      	movs	r3, #128	; 0x80
 800a078:	9a00      	ldr	r2, [sp, #0]
 800a07a:	009b      	lsls	r3, r3, #2
 800a07c:	4313      	orrs	r3, r2
 800a07e:	9343      	str	r3, [sp, #268]	; 0x10c
 800a080:	2310      	movs	r3, #16
 800a082:	9344      	str	r3, [sp, #272]	; 0x110
 800a084:	236e      	movs	r3, #110	; 0x6e
 800a086:	42ab      	cmp	r3, r5
 800a088:	41ad      	sbcs	r5, r5
 800a08a:	426d      	negs	r5, r5
 800a08c:	3503      	adds	r5, #3
 800a08e:	9549      	str	r5, [sp, #292]	; 0x124
 800a090:	6863      	ldr	r3, [r4, #4]
 800a092:	2b00      	cmp	r3, #0
 800a094:	dd4a      	ble.n	800a12c <__ssvfiscanf_r+0x264>
 800a096:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800a098:	9300      	str	r3, [sp, #0]
 800a09a:	065b      	lsls	r3, r3, #25
 800a09c:	d406      	bmi.n	800a0ac <__ssvfiscanf_r+0x1e4>
 800a09e:	6823      	ldr	r3, [r4, #0]
 800a0a0:	4945      	ldr	r1, [pc, #276]	; (800a1b8 <__ssvfiscanf_r+0x2f0>)
 800a0a2:	781a      	ldrb	r2, [r3, #0]
 800a0a4:	5c8a      	ldrb	r2, [r1, r2]
 800a0a6:	2108      	movs	r1, #8
 800a0a8:	420a      	tst	r2, r1
 800a0aa:	d14a      	bne.n	800a142 <__ssvfiscanf_r+0x27a>
 800a0ac:	9b49      	ldr	r3, [sp, #292]	; 0x124
 800a0ae:	2b02      	cmp	r3, #2
 800a0b0:	dc5e      	bgt.n	800a170 <__ssvfiscanf_r+0x2a8>
 800a0b2:	0022      	movs	r2, r4
 800a0b4:	0030      	movs	r0, r6
 800a0b6:	ab02      	add	r3, sp, #8
 800a0b8:	a943      	add	r1, sp, #268	; 0x10c
 800a0ba:	f000 f883 	bl	800a1c4 <_scanf_chars>
 800a0be:	2801      	cmp	r0, #1
 800a0c0:	d071      	beq.n	800a1a6 <__ssvfiscanf_r+0x2de>
 800a0c2:	2802      	cmp	r0, #2
 800a0c4:	d000      	beq.n	800a0c8 <__ssvfiscanf_r+0x200>
 800a0c6:	e72a      	b.n	8009f1e <__ssvfiscanf_r+0x56>
 800a0c8:	e7c4      	b.n	800a054 <__ssvfiscanf_r+0x18c>
 800a0ca:	230a      	movs	r3, #10
 800a0cc:	e7d9      	b.n	800a082 <__ssvfiscanf_r+0x1ba>
 800a0ce:	2300      	movs	r3, #0
 800a0d0:	2503      	movs	r5, #3
 800a0d2:	9344      	str	r3, [sp, #272]	; 0x110
 800a0d4:	e7db      	b.n	800a08e <__ssvfiscanf_r+0x1c6>
 800a0d6:	2308      	movs	r3, #8
 800a0d8:	2504      	movs	r5, #4
 800a0da:	9344      	str	r3, [sp, #272]	; 0x110
 800a0dc:	e7d7      	b.n	800a08e <__ssvfiscanf_r+0x1c6>
 800a0de:	0039      	movs	r1, r7
 800a0e0:	a803      	add	r0, sp, #12
 800a0e2:	f000 f9fd 	bl	800a4e0 <__sccl>
 800a0e6:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800a0e8:	0007      	movs	r7, r0
 800a0ea:	9300      	str	r3, [sp, #0]
 800a0ec:	2340      	movs	r3, #64	; 0x40
 800a0ee:	9a00      	ldr	r2, [sp, #0]
 800a0f0:	4313      	orrs	r3, r2
 800a0f2:	9343      	str	r3, [sp, #268]	; 0x10c
 800a0f4:	2301      	movs	r3, #1
 800a0f6:	9349      	str	r3, [sp, #292]	; 0x124
 800a0f8:	e7ca      	b.n	800a090 <__ssvfiscanf_r+0x1c8>
 800a0fa:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800a0fc:	9300      	str	r3, [sp, #0]
 800a0fe:	2340      	movs	r3, #64	; 0x40
 800a100:	9a00      	ldr	r2, [sp, #0]
 800a102:	4313      	orrs	r3, r2
 800a104:	9343      	str	r3, [sp, #268]	; 0x10c
 800a106:	2300      	movs	r3, #0
 800a108:	e7f5      	b.n	800a0f6 <__ssvfiscanf_r+0x22e>
 800a10a:	2302      	movs	r3, #2
 800a10c:	e7f3      	b.n	800a0f6 <__ssvfiscanf_r+0x22e>
 800a10e:	9843      	ldr	r0, [sp, #268]	; 0x10c
 800a110:	06c3      	lsls	r3, r0, #27
 800a112:	d500      	bpl.n	800a116 <__ssvfiscanf_r+0x24e>
 800a114:	e703      	b.n	8009f1e <__ssvfiscanf_r+0x56>
 800a116:	9b02      	ldr	r3, [sp, #8]
 800a118:	9a47      	ldr	r2, [sp, #284]	; 0x11c
 800a11a:	1d19      	adds	r1, r3, #4
 800a11c:	9102      	str	r1, [sp, #8]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	07c5      	lsls	r5, r0, #31
 800a122:	d501      	bpl.n	800a128 <__ssvfiscanf_r+0x260>
 800a124:	801a      	strh	r2, [r3, #0]
 800a126:	e6fa      	b.n	8009f1e <__ssvfiscanf_r+0x56>
 800a128:	601a      	str	r2, [r3, #0]
 800a12a:	e6f8      	b.n	8009f1e <__ssvfiscanf_r+0x56>
 800a12c:	22c0      	movs	r2, #192	; 0xc0
 800a12e:	ab43      	add	r3, sp, #268	; 0x10c
 800a130:	0052      	lsls	r2, r2, #1
 800a132:	589b      	ldr	r3, [r3, r2]
 800a134:	0021      	movs	r1, r4
 800a136:	0030      	movs	r0, r6
 800a138:	9300      	str	r3, [sp, #0]
 800a13a:	4798      	blx	r3
 800a13c:	2800      	cmp	r0, #0
 800a13e:	d0aa      	beq.n	800a096 <__ssvfiscanf_r+0x1ce>
 800a140:	e788      	b.n	800a054 <__ssvfiscanf_r+0x18c>
 800a142:	9a47      	ldr	r2, [sp, #284]	; 0x11c
 800a144:	9200      	str	r2, [sp, #0]
 800a146:	3201      	adds	r2, #1
 800a148:	9247      	str	r2, [sp, #284]	; 0x11c
 800a14a:	6862      	ldr	r2, [r4, #4]
 800a14c:	3a01      	subs	r2, #1
 800a14e:	6062      	str	r2, [r4, #4]
 800a150:	2a00      	cmp	r2, #0
 800a152:	dd02      	ble.n	800a15a <__ssvfiscanf_r+0x292>
 800a154:	3301      	adds	r3, #1
 800a156:	6023      	str	r3, [r4, #0]
 800a158:	e7a1      	b.n	800a09e <__ssvfiscanf_r+0x1d6>
 800a15a:	22c0      	movs	r2, #192	; 0xc0
 800a15c:	ab43      	add	r3, sp, #268	; 0x10c
 800a15e:	0052      	lsls	r2, r2, #1
 800a160:	589b      	ldr	r3, [r3, r2]
 800a162:	0021      	movs	r1, r4
 800a164:	0030      	movs	r0, r6
 800a166:	9300      	str	r3, [sp, #0]
 800a168:	4798      	blx	r3
 800a16a:	2800      	cmp	r0, #0
 800a16c:	d097      	beq.n	800a09e <__ssvfiscanf_r+0x1d6>
 800a16e:	e771      	b.n	800a054 <__ssvfiscanf_r+0x18c>
 800a170:	2b04      	cmp	r3, #4
 800a172:	dc06      	bgt.n	800a182 <__ssvfiscanf_r+0x2ba>
 800a174:	0022      	movs	r2, r4
 800a176:	0030      	movs	r0, r6
 800a178:	ab02      	add	r3, sp, #8
 800a17a:	a943      	add	r1, sp, #268	; 0x10c
 800a17c:	f000 f880 	bl	800a280 <_scanf_i>
 800a180:	e79d      	b.n	800a0be <__ssvfiscanf_r+0x1f6>
 800a182:	4b0f      	ldr	r3, [pc, #60]	; (800a1c0 <__ssvfiscanf_r+0x2f8>)
 800a184:	2b00      	cmp	r3, #0
 800a186:	d100      	bne.n	800a18a <__ssvfiscanf_r+0x2c2>
 800a188:	e6c9      	b.n	8009f1e <__ssvfiscanf_r+0x56>
 800a18a:	0022      	movs	r2, r4
 800a18c:	0030      	movs	r0, r6
 800a18e:	ab02      	add	r3, sp, #8
 800a190:	a943      	add	r1, sp, #268	; 0x10c
 800a192:	f7fc fafd 	bl	8006790 <_scanf_float>
 800a196:	e792      	b.n	800a0be <__ssvfiscanf_r+0x1f6>
 800a198:	89a3      	ldrh	r3, [r4, #12]
 800a19a:	065b      	lsls	r3, r3, #25
 800a19c:	d400      	bmi.n	800a1a0 <__ssvfiscanf_r+0x2d8>
 800a19e:	e75e      	b.n	800a05e <__ssvfiscanf_r+0x196>
 800a1a0:	2001      	movs	r0, #1
 800a1a2:	4240      	negs	r0, r0
 800a1a4:	e75b      	b.n	800a05e <__ssvfiscanf_r+0x196>
 800a1a6:	9846      	ldr	r0, [sp, #280]	; 0x118
 800a1a8:	e759      	b.n	800a05e <__ssvfiscanf_r+0x196>
 800a1aa:	46c0      	nop			; (mov r8, r8)
 800a1ac:	fffffd6c 	.word	0xfffffd6c
 800a1b0:	08009e11 	.word	0x08009e11
 800a1b4:	08009e89 	.word	0x08009e89
 800a1b8:	0800b471 	.word	0x0800b471
 800a1bc:	0800b7da 	.word	0x0800b7da
 800a1c0:	08006791 	.word	0x08006791

0800a1c4 <_scanf_chars>:
 800a1c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a1c6:	0015      	movs	r5, r2
 800a1c8:	688a      	ldr	r2, [r1, #8]
 800a1ca:	000c      	movs	r4, r1
 800a1cc:	9001      	str	r0, [sp, #4]
 800a1ce:	2a00      	cmp	r2, #0
 800a1d0:	d105      	bne.n	800a1de <_scanf_chars+0x1a>
 800a1d2:	6989      	ldr	r1, [r1, #24]
 800a1d4:	3201      	adds	r2, #1
 800a1d6:	2900      	cmp	r1, #0
 800a1d8:	d000      	beq.n	800a1dc <_scanf_chars+0x18>
 800a1da:	3a02      	subs	r2, #2
 800a1dc:	60a2      	str	r2, [r4, #8]
 800a1de:	6822      	ldr	r2, [r4, #0]
 800a1e0:	06d2      	lsls	r2, r2, #27
 800a1e2:	d403      	bmi.n	800a1ec <_scanf_chars+0x28>
 800a1e4:	681a      	ldr	r2, [r3, #0]
 800a1e6:	1d11      	adds	r1, r2, #4
 800a1e8:	6019      	str	r1, [r3, #0]
 800a1ea:	6817      	ldr	r7, [r2, #0]
 800a1ec:	2600      	movs	r6, #0
 800a1ee:	69a0      	ldr	r0, [r4, #24]
 800a1f0:	2800      	cmp	r0, #0
 800a1f2:	d013      	beq.n	800a21c <_scanf_chars+0x58>
 800a1f4:	2801      	cmp	r0, #1
 800a1f6:	d108      	bne.n	800a20a <_scanf_chars+0x46>
 800a1f8:	682b      	ldr	r3, [r5, #0]
 800a1fa:	6962      	ldr	r2, [r4, #20]
 800a1fc:	781b      	ldrb	r3, [r3, #0]
 800a1fe:	5cd3      	ldrb	r3, [r2, r3]
 800a200:	2b00      	cmp	r3, #0
 800a202:	d10b      	bne.n	800a21c <_scanf_chars+0x58>
 800a204:	2e00      	cmp	r6, #0
 800a206:	d038      	beq.n	800a27a <_scanf_chars+0xb6>
 800a208:	e026      	b.n	800a258 <_scanf_chars+0x94>
 800a20a:	2802      	cmp	r0, #2
 800a20c:	d124      	bne.n	800a258 <_scanf_chars+0x94>
 800a20e:	682b      	ldr	r3, [r5, #0]
 800a210:	4a1a      	ldr	r2, [pc, #104]	; (800a27c <_scanf_chars+0xb8>)
 800a212:	781b      	ldrb	r3, [r3, #0]
 800a214:	5cd3      	ldrb	r3, [r2, r3]
 800a216:	2208      	movs	r2, #8
 800a218:	4213      	tst	r3, r2
 800a21a:	d11d      	bne.n	800a258 <_scanf_chars+0x94>
 800a21c:	2210      	movs	r2, #16
 800a21e:	6823      	ldr	r3, [r4, #0]
 800a220:	3601      	adds	r6, #1
 800a222:	4213      	tst	r3, r2
 800a224:	d103      	bne.n	800a22e <_scanf_chars+0x6a>
 800a226:	682b      	ldr	r3, [r5, #0]
 800a228:	781b      	ldrb	r3, [r3, #0]
 800a22a:	703b      	strb	r3, [r7, #0]
 800a22c:	3701      	adds	r7, #1
 800a22e:	682a      	ldr	r2, [r5, #0]
 800a230:	686b      	ldr	r3, [r5, #4]
 800a232:	3201      	adds	r2, #1
 800a234:	602a      	str	r2, [r5, #0]
 800a236:	68a2      	ldr	r2, [r4, #8]
 800a238:	3b01      	subs	r3, #1
 800a23a:	3a01      	subs	r2, #1
 800a23c:	606b      	str	r3, [r5, #4]
 800a23e:	60a2      	str	r2, [r4, #8]
 800a240:	2a00      	cmp	r2, #0
 800a242:	d009      	beq.n	800a258 <_scanf_chars+0x94>
 800a244:	2b00      	cmp	r3, #0
 800a246:	dcd2      	bgt.n	800a1ee <_scanf_chars+0x2a>
 800a248:	23c0      	movs	r3, #192	; 0xc0
 800a24a:	005b      	lsls	r3, r3, #1
 800a24c:	0029      	movs	r1, r5
 800a24e:	58e3      	ldr	r3, [r4, r3]
 800a250:	9801      	ldr	r0, [sp, #4]
 800a252:	4798      	blx	r3
 800a254:	2800      	cmp	r0, #0
 800a256:	d0ca      	beq.n	800a1ee <_scanf_chars+0x2a>
 800a258:	6822      	ldr	r2, [r4, #0]
 800a25a:	2310      	movs	r3, #16
 800a25c:	0011      	movs	r1, r2
 800a25e:	4019      	ands	r1, r3
 800a260:	421a      	tst	r2, r3
 800a262:	d106      	bne.n	800a272 <_scanf_chars+0xae>
 800a264:	68e3      	ldr	r3, [r4, #12]
 800a266:	3301      	adds	r3, #1
 800a268:	60e3      	str	r3, [r4, #12]
 800a26a:	69a3      	ldr	r3, [r4, #24]
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d000      	beq.n	800a272 <_scanf_chars+0xae>
 800a270:	7039      	strb	r1, [r7, #0]
 800a272:	2000      	movs	r0, #0
 800a274:	6923      	ldr	r3, [r4, #16]
 800a276:	199e      	adds	r6, r3, r6
 800a278:	6126      	str	r6, [r4, #16]
 800a27a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a27c:	0800b471 	.word	0x0800b471

0800a280 <_scanf_i>:
 800a280:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a282:	000c      	movs	r4, r1
 800a284:	b08d      	sub	sp, #52	; 0x34
 800a286:	9302      	str	r3, [sp, #8]
 800a288:	4b79      	ldr	r3, [pc, #484]	; (800a470 <_scanf_i+0x1f0>)
 800a28a:	0016      	movs	r6, r2
 800a28c:	9005      	str	r0, [sp, #20]
 800a28e:	aa09      	add	r2, sp, #36	; 0x24
 800a290:	cb23      	ldmia	r3!, {r0, r1, r5}
 800a292:	c223      	stmia	r2!, {r0, r1, r5}
 800a294:	4b77      	ldr	r3, [pc, #476]	; (800a474 <_scanf_i+0x1f4>)
 800a296:	9306      	str	r3, [sp, #24]
 800a298:	69a3      	ldr	r3, [r4, #24]
 800a29a:	2b03      	cmp	r3, #3
 800a29c:	d001      	beq.n	800a2a2 <_scanf_i+0x22>
 800a29e:	4b76      	ldr	r3, [pc, #472]	; (800a478 <_scanf_i+0x1f8>)
 800a2a0:	9306      	str	r3, [sp, #24]
 800a2a2:	22ae      	movs	r2, #174	; 0xae
 800a2a4:	2000      	movs	r0, #0
 800a2a6:	68a3      	ldr	r3, [r4, #8]
 800a2a8:	0052      	lsls	r2, r2, #1
 800a2aa:	1e59      	subs	r1, r3, #1
 800a2ac:	9004      	str	r0, [sp, #16]
 800a2ae:	4291      	cmp	r1, r2
 800a2b0:	d905      	bls.n	800a2be <_scanf_i+0x3e>
 800a2b2:	3b5e      	subs	r3, #94	; 0x5e
 800a2b4:	3bff      	subs	r3, #255	; 0xff
 800a2b6:	9304      	str	r3, [sp, #16]
 800a2b8:	235e      	movs	r3, #94	; 0x5e
 800a2ba:	33ff      	adds	r3, #255	; 0xff
 800a2bc:	60a3      	str	r3, [r4, #8]
 800a2be:	0023      	movs	r3, r4
 800a2c0:	331c      	adds	r3, #28
 800a2c2:	9301      	str	r3, [sp, #4]
 800a2c4:	23d0      	movs	r3, #208	; 0xd0
 800a2c6:	2700      	movs	r7, #0
 800a2c8:	6822      	ldr	r2, [r4, #0]
 800a2ca:	011b      	lsls	r3, r3, #4
 800a2cc:	4313      	orrs	r3, r2
 800a2ce:	6023      	str	r3, [r4, #0]
 800a2d0:	9b01      	ldr	r3, [sp, #4]
 800a2d2:	9303      	str	r3, [sp, #12]
 800a2d4:	6833      	ldr	r3, [r6, #0]
 800a2d6:	a809      	add	r0, sp, #36	; 0x24
 800a2d8:	7819      	ldrb	r1, [r3, #0]
 800a2da:	00bb      	lsls	r3, r7, #2
 800a2dc:	2202      	movs	r2, #2
 800a2de:	5818      	ldr	r0, [r3, r0]
 800a2e0:	f7fe fe48 	bl	8008f74 <memchr>
 800a2e4:	2800      	cmp	r0, #0
 800a2e6:	d02b      	beq.n	800a340 <_scanf_i+0xc0>
 800a2e8:	2f01      	cmp	r7, #1
 800a2ea:	d162      	bne.n	800a3b2 <_scanf_i+0x132>
 800a2ec:	6863      	ldr	r3, [r4, #4]
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d106      	bne.n	800a300 <_scanf_i+0x80>
 800a2f2:	3308      	adds	r3, #8
 800a2f4:	6822      	ldr	r2, [r4, #0]
 800a2f6:	6063      	str	r3, [r4, #4]
 800a2f8:	33f9      	adds	r3, #249	; 0xf9
 800a2fa:	33ff      	adds	r3, #255	; 0xff
 800a2fc:	4313      	orrs	r3, r2
 800a2fe:	6023      	str	r3, [r4, #0]
 800a300:	4b5e      	ldr	r3, [pc, #376]	; (800a47c <_scanf_i+0x1fc>)
 800a302:	6822      	ldr	r2, [r4, #0]
 800a304:	4013      	ands	r3, r2
 800a306:	6023      	str	r3, [r4, #0]
 800a308:	68a3      	ldr	r3, [r4, #8]
 800a30a:	1e5a      	subs	r2, r3, #1
 800a30c:	60a2      	str	r2, [r4, #8]
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d016      	beq.n	800a340 <_scanf_i+0xc0>
 800a312:	6833      	ldr	r3, [r6, #0]
 800a314:	1c5a      	adds	r2, r3, #1
 800a316:	6032      	str	r2, [r6, #0]
 800a318:	781b      	ldrb	r3, [r3, #0]
 800a31a:	9a03      	ldr	r2, [sp, #12]
 800a31c:	7013      	strb	r3, [r2, #0]
 800a31e:	6873      	ldr	r3, [r6, #4]
 800a320:	1c55      	adds	r5, r2, #1
 800a322:	3b01      	subs	r3, #1
 800a324:	6073      	str	r3, [r6, #4]
 800a326:	9503      	str	r5, [sp, #12]
 800a328:	2b00      	cmp	r3, #0
 800a32a:	dc09      	bgt.n	800a340 <_scanf_i+0xc0>
 800a32c:	23c0      	movs	r3, #192	; 0xc0
 800a32e:	005b      	lsls	r3, r3, #1
 800a330:	58e3      	ldr	r3, [r4, r3]
 800a332:	0031      	movs	r1, r6
 800a334:	9805      	ldr	r0, [sp, #20]
 800a336:	9307      	str	r3, [sp, #28]
 800a338:	4798      	blx	r3
 800a33a:	2800      	cmp	r0, #0
 800a33c:	d000      	beq.n	800a340 <_scanf_i+0xc0>
 800a33e:	e081      	b.n	800a444 <_scanf_i+0x1c4>
 800a340:	3701      	adds	r7, #1
 800a342:	2f03      	cmp	r7, #3
 800a344:	d1c6      	bne.n	800a2d4 <_scanf_i+0x54>
 800a346:	6863      	ldr	r3, [r4, #4]
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d101      	bne.n	800a350 <_scanf_i+0xd0>
 800a34c:	330a      	adds	r3, #10
 800a34e:	6063      	str	r3, [r4, #4]
 800a350:	2110      	movs	r1, #16
 800a352:	2700      	movs	r7, #0
 800a354:	6863      	ldr	r3, [r4, #4]
 800a356:	6960      	ldr	r0, [r4, #20]
 800a358:	1ac9      	subs	r1, r1, r3
 800a35a:	4b49      	ldr	r3, [pc, #292]	; (800a480 <_scanf_i+0x200>)
 800a35c:	18c9      	adds	r1, r1, r3
 800a35e:	f000 f8bf 	bl	800a4e0 <__sccl>
 800a362:	9d03      	ldr	r5, [sp, #12]
 800a364:	68a3      	ldr	r3, [r4, #8]
 800a366:	6822      	ldr	r2, [r4, #0]
 800a368:	9303      	str	r3, [sp, #12]
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d041      	beq.n	800a3f2 <_scanf_i+0x172>
 800a36e:	6831      	ldr	r1, [r6, #0]
 800a370:	6963      	ldr	r3, [r4, #20]
 800a372:	7808      	ldrb	r0, [r1, #0]
 800a374:	5c1b      	ldrb	r3, [r3, r0]
 800a376:	2b00      	cmp	r3, #0
 800a378:	d03b      	beq.n	800a3f2 <_scanf_i+0x172>
 800a37a:	2830      	cmp	r0, #48	; 0x30
 800a37c:	d129      	bne.n	800a3d2 <_scanf_i+0x152>
 800a37e:	2380      	movs	r3, #128	; 0x80
 800a380:	011b      	lsls	r3, r3, #4
 800a382:	421a      	tst	r2, r3
 800a384:	d025      	beq.n	800a3d2 <_scanf_i+0x152>
 800a386:	9b04      	ldr	r3, [sp, #16]
 800a388:	3701      	adds	r7, #1
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d005      	beq.n	800a39a <_scanf_i+0x11a>
 800a38e:	001a      	movs	r2, r3
 800a390:	9b03      	ldr	r3, [sp, #12]
 800a392:	3a01      	subs	r2, #1
 800a394:	3301      	adds	r3, #1
 800a396:	9204      	str	r2, [sp, #16]
 800a398:	60a3      	str	r3, [r4, #8]
 800a39a:	6873      	ldr	r3, [r6, #4]
 800a39c:	3b01      	subs	r3, #1
 800a39e:	6073      	str	r3, [r6, #4]
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	dd1d      	ble.n	800a3e0 <_scanf_i+0x160>
 800a3a4:	6833      	ldr	r3, [r6, #0]
 800a3a6:	3301      	adds	r3, #1
 800a3a8:	6033      	str	r3, [r6, #0]
 800a3aa:	68a3      	ldr	r3, [r4, #8]
 800a3ac:	3b01      	subs	r3, #1
 800a3ae:	60a3      	str	r3, [r4, #8]
 800a3b0:	e7d8      	b.n	800a364 <_scanf_i+0xe4>
 800a3b2:	2f02      	cmp	r7, #2
 800a3b4:	d1a8      	bne.n	800a308 <_scanf_i+0x88>
 800a3b6:	21c0      	movs	r1, #192	; 0xc0
 800a3b8:	2380      	movs	r3, #128	; 0x80
 800a3ba:	6822      	ldr	r2, [r4, #0]
 800a3bc:	00c9      	lsls	r1, r1, #3
 800a3be:	4011      	ands	r1, r2
 800a3c0:	009b      	lsls	r3, r3, #2
 800a3c2:	4299      	cmp	r1, r3
 800a3c4:	d1bf      	bne.n	800a346 <_scanf_i+0xc6>
 800a3c6:	3bf1      	subs	r3, #241	; 0xf1
 800a3c8:	3bff      	subs	r3, #255	; 0xff
 800a3ca:	6063      	str	r3, [r4, #4]
 800a3cc:	33f0      	adds	r3, #240	; 0xf0
 800a3ce:	4313      	orrs	r3, r2
 800a3d0:	e799      	b.n	800a306 <_scanf_i+0x86>
 800a3d2:	4b2c      	ldr	r3, [pc, #176]	; (800a484 <_scanf_i+0x204>)
 800a3d4:	4013      	ands	r3, r2
 800a3d6:	6023      	str	r3, [r4, #0]
 800a3d8:	780b      	ldrb	r3, [r1, #0]
 800a3da:	702b      	strb	r3, [r5, #0]
 800a3dc:	3501      	adds	r5, #1
 800a3de:	e7dc      	b.n	800a39a <_scanf_i+0x11a>
 800a3e0:	23c0      	movs	r3, #192	; 0xc0
 800a3e2:	005b      	lsls	r3, r3, #1
 800a3e4:	58e3      	ldr	r3, [r4, r3]
 800a3e6:	0031      	movs	r1, r6
 800a3e8:	9805      	ldr	r0, [sp, #20]
 800a3ea:	9303      	str	r3, [sp, #12]
 800a3ec:	4798      	blx	r3
 800a3ee:	2800      	cmp	r0, #0
 800a3f0:	d0db      	beq.n	800a3aa <_scanf_i+0x12a>
 800a3f2:	6823      	ldr	r3, [r4, #0]
 800a3f4:	05db      	lsls	r3, r3, #23
 800a3f6:	d50e      	bpl.n	800a416 <_scanf_i+0x196>
 800a3f8:	9b01      	ldr	r3, [sp, #4]
 800a3fa:	429d      	cmp	r5, r3
 800a3fc:	d907      	bls.n	800a40e <_scanf_i+0x18e>
 800a3fe:	23be      	movs	r3, #190	; 0xbe
 800a400:	3d01      	subs	r5, #1
 800a402:	005b      	lsls	r3, r3, #1
 800a404:	0032      	movs	r2, r6
 800a406:	7829      	ldrb	r1, [r5, #0]
 800a408:	58e3      	ldr	r3, [r4, r3]
 800a40a:	9805      	ldr	r0, [sp, #20]
 800a40c:	4798      	blx	r3
 800a40e:	9b01      	ldr	r3, [sp, #4]
 800a410:	2001      	movs	r0, #1
 800a412:	429d      	cmp	r5, r3
 800a414:	d029      	beq.n	800a46a <_scanf_i+0x1ea>
 800a416:	6821      	ldr	r1, [r4, #0]
 800a418:	2310      	movs	r3, #16
 800a41a:	000a      	movs	r2, r1
 800a41c:	401a      	ands	r2, r3
 800a41e:	4219      	tst	r1, r3
 800a420:	d11c      	bne.n	800a45c <_scanf_i+0x1dc>
 800a422:	702a      	strb	r2, [r5, #0]
 800a424:	6863      	ldr	r3, [r4, #4]
 800a426:	9901      	ldr	r1, [sp, #4]
 800a428:	9805      	ldr	r0, [sp, #20]
 800a42a:	9e06      	ldr	r6, [sp, #24]
 800a42c:	47b0      	blx	r6
 800a42e:	9b02      	ldr	r3, [sp, #8]
 800a430:	6821      	ldr	r1, [r4, #0]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	068a      	lsls	r2, r1, #26
 800a436:	d507      	bpl.n	800a448 <_scanf_i+0x1c8>
 800a438:	1d1a      	adds	r2, r3, #4
 800a43a:	9902      	ldr	r1, [sp, #8]
 800a43c:	600a      	str	r2, [r1, #0]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	6018      	str	r0, [r3, #0]
 800a442:	e008      	b.n	800a456 <_scanf_i+0x1d6>
 800a444:	2700      	movs	r7, #0
 800a446:	e7d4      	b.n	800a3f2 <_scanf_i+0x172>
 800a448:	1d1a      	adds	r2, r3, #4
 800a44a:	07ce      	lsls	r6, r1, #31
 800a44c:	d5f5      	bpl.n	800a43a <_scanf_i+0x1ba>
 800a44e:	9902      	ldr	r1, [sp, #8]
 800a450:	600a      	str	r2, [r1, #0]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	8018      	strh	r0, [r3, #0]
 800a456:	68e3      	ldr	r3, [r4, #12]
 800a458:	3301      	adds	r3, #1
 800a45a:	60e3      	str	r3, [r4, #12]
 800a45c:	2000      	movs	r0, #0
 800a45e:	9b01      	ldr	r3, [sp, #4]
 800a460:	1aed      	subs	r5, r5, r3
 800a462:	6923      	ldr	r3, [r4, #16]
 800a464:	19ef      	adds	r7, r5, r7
 800a466:	19df      	adds	r7, r3, r7
 800a468:	6127      	str	r7, [r4, #16]
 800a46a:	b00d      	add	sp, #52	; 0x34
 800a46c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a46e:	46c0      	nop			; (mov r8, r8)
 800a470:	0800b24c 	.word	0x0800b24c
 800a474:	08007a85 	.word	0x08007a85
 800a478:	0800a691 	.word	0x0800a691
 800a47c:	fffffaff 	.word	0xfffffaff
 800a480:	0800b7ee 	.word	0x0800b7ee
 800a484:	fffff6ff 	.word	0xfffff6ff

0800a488 <_read_r>:
 800a488:	b570      	push	{r4, r5, r6, lr}
 800a48a:	0004      	movs	r4, r0
 800a48c:	0008      	movs	r0, r1
 800a48e:	0011      	movs	r1, r2
 800a490:	001a      	movs	r2, r3
 800a492:	2300      	movs	r3, #0
 800a494:	4d05      	ldr	r5, [pc, #20]	; (800a4ac <_read_r+0x24>)
 800a496:	602b      	str	r3, [r5, #0]
 800a498:	f7f9 f804 	bl	80034a4 <_read>
 800a49c:	1c43      	adds	r3, r0, #1
 800a49e:	d103      	bne.n	800a4a8 <_read_r+0x20>
 800a4a0:	682b      	ldr	r3, [r5, #0]
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d000      	beq.n	800a4a8 <_read_r+0x20>
 800a4a6:	6023      	str	r3, [r4, #0]
 800a4a8:	bd70      	pop	{r4, r5, r6, pc}
 800a4aa:	46c0      	nop			; (mov r8, r8)
 800a4ac:	20000934 	.word	0x20000934

0800a4b0 <nan>:
 800a4b0:	2000      	movs	r0, #0
 800a4b2:	4901      	ldr	r1, [pc, #4]	; (800a4b8 <nan+0x8>)
 800a4b4:	4770      	bx	lr
 800a4b6:	46c0      	nop			; (mov r8, r8)
 800a4b8:	7ff80000 	.word	0x7ff80000

0800a4bc <_sbrk_r>:
 800a4bc:	2300      	movs	r3, #0
 800a4be:	b570      	push	{r4, r5, r6, lr}
 800a4c0:	4d06      	ldr	r5, [pc, #24]	; (800a4dc <_sbrk_r+0x20>)
 800a4c2:	0004      	movs	r4, r0
 800a4c4:	0008      	movs	r0, r1
 800a4c6:	602b      	str	r3, [r5, #0]
 800a4c8:	f7f9 f852 	bl	8003570 <_sbrk>
 800a4cc:	1c43      	adds	r3, r0, #1
 800a4ce:	d103      	bne.n	800a4d8 <_sbrk_r+0x1c>
 800a4d0:	682b      	ldr	r3, [r5, #0]
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d000      	beq.n	800a4d8 <_sbrk_r+0x1c>
 800a4d6:	6023      	str	r3, [r4, #0]
 800a4d8:	bd70      	pop	{r4, r5, r6, pc}
 800a4da:	46c0      	nop			; (mov r8, r8)
 800a4dc:	20000934 	.word	0x20000934

0800a4e0 <__sccl>:
 800a4e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a4e2:	780b      	ldrb	r3, [r1, #0]
 800a4e4:	0004      	movs	r4, r0
 800a4e6:	2b5e      	cmp	r3, #94	; 0x5e
 800a4e8:	d00c      	beq.n	800a504 <__sccl+0x24>
 800a4ea:	1c48      	adds	r0, r1, #1
 800a4ec:	2100      	movs	r1, #0
 800a4ee:	0022      	movs	r2, r4
 800a4f0:	1c65      	adds	r5, r4, #1
 800a4f2:	35ff      	adds	r5, #255	; 0xff
 800a4f4:	7011      	strb	r1, [r2, #0]
 800a4f6:	3201      	adds	r2, #1
 800a4f8:	42aa      	cmp	r2, r5
 800a4fa:	d1fb      	bne.n	800a4f4 <__sccl+0x14>
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d105      	bne.n	800a50c <__sccl+0x2c>
 800a500:	3801      	subs	r0, #1
 800a502:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a504:	784b      	ldrb	r3, [r1, #1]
 800a506:	1c88      	adds	r0, r1, #2
 800a508:	2101      	movs	r1, #1
 800a50a:	e7f0      	b.n	800a4ee <__sccl+0xe>
 800a50c:	2201      	movs	r2, #1
 800a50e:	262d      	movs	r6, #45	; 0x2d
 800a510:	4051      	eors	r1, r2
 800a512:	0002      	movs	r2, r0
 800a514:	54e1      	strb	r1, [r4, r3]
 800a516:	7815      	ldrb	r5, [r2, #0]
 800a518:	1c50      	adds	r0, r2, #1
 800a51a:	2d2d      	cmp	r5, #45	; 0x2d
 800a51c:	d009      	beq.n	800a532 <__sccl+0x52>
 800a51e:	2d5d      	cmp	r5, #93	; 0x5d
 800a520:	d0ef      	beq.n	800a502 <__sccl+0x22>
 800a522:	2d00      	cmp	r5, #0
 800a524:	d101      	bne.n	800a52a <__sccl+0x4a>
 800a526:	0010      	movs	r0, r2
 800a528:	e7eb      	b.n	800a502 <__sccl+0x22>
 800a52a:	002b      	movs	r3, r5
 800a52c:	e7f1      	b.n	800a512 <__sccl+0x32>
 800a52e:	0033      	movs	r3, r6
 800a530:	e7ef      	b.n	800a512 <__sccl+0x32>
 800a532:	7855      	ldrb	r5, [r2, #1]
 800a534:	2d5d      	cmp	r5, #93	; 0x5d
 800a536:	d0fa      	beq.n	800a52e <__sccl+0x4e>
 800a538:	42ab      	cmp	r3, r5
 800a53a:	dcf8      	bgt.n	800a52e <__sccl+0x4e>
 800a53c:	0018      	movs	r0, r3
 800a53e:	3202      	adds	r2, #2
 800a540:	3001      	adds	r0, #1
 800a542:	5421      	strb	r1, [r4, r0]
 800a544:	4285      	cmp	r5, r0
 800a546:	dcfb      	bgt.n	800a540 <__sccl+0x60>
 800a548:	2000      	movs	r0, #0
 800a54a:	1c5f      	adds	r7, r3, #1
 800a54c:	42ab      	cmp	r3, r5
 800a54e:	da01      	bge.n	800a554 <__sccl+0x74>
 800a550:	1ae8      	subs	r0, r5, r3
 800a552:	3801      	subs	r0, #1
 800a554:	183b      	adds	r3, r7, r0
 800a556:	e7de      	b.n	800a516 <__sccl+0x36>

0800a558 <strncmp>:
 800a558:	b530      	push	{r4, r5, lr}
 800a55a:	0005      	movs	r5, r0
 800a55c:	1e10      	subs	r0, r2, #0
 800a55e:	d008      	beq.n	800a572 <strncmp+0x1a>
 800a560:	2400      	movs	r4, #0
 800a562:	3a01      	subs	r2, #1
 800a564:	5d2b      	ldrb	r3, [r5, r4]
 800a566:	5d08      	ldrb	r0, [r1, r4]
 800a568:	4283      	cmp	r3, r0
 800a56a:	d101      	bne.n	800a570 <strncmp+0x18>
 800a56c:	4294      	cmp	r4, r2
 800a56e:	d101      	bne.n	800a574 <strncmp+0x1c>
 800a570:	1a18      	subs	r0, r3, r0
 800a572:	bd30      	pop	{r4, r5, pc}
 800a574:	3401      	adds	r4, #1
 800a576:	2b00      	cmp	r3, #0
 800a578:	d1f4      	bne.n	800a564 <strncmp+0xc>
 800a57a:	e7f9      	b.n	800a570 <strncmp+0x18>

0800a57c <_strtoul_l.constprop.0>:
 800a57c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a57e:	b087      	sub	sp, #28
 800a580:	9202      	str	r2, [sp, #8]
 800a582:	4a42      	ldr	r2, [pc, #264]	; (800a68c <_strtoul_l.constprop.0+0x110>)
 800a584:	001e      	movs	r6, r3
 800a586:	9101      	str	r1, [sp, #4]
 800a588:	000b      	movs	r3, r1
 800a58a:	4694      	mov	ip, r2
 800a58c:	2108      	movs	r1, #8
 800a58e:	9005      	str	r0, [sp, #20]
 800a590:	001a      	movs	r2, r3
 800a592:	4660      	mov	r0, ip
 800a594:	7814      	ldrb	r4, [r2, #0]
 800a596:	3301      	adds	r3, #1
 800a598:	5d00      	ldrb	r0, [r0, r4]
 800a59a:	001d      	movs	r5, r3
 800a59c:	0007      	movs	r7, r0
 800a59e:	400f      	ands	r7, r1
 800a5a0:	4208      	tst	r0, r1
 800a5a2:	d1f5      	bne.n	800a590 <_strtoul_l.constprop.0+0x14>
 800a5a4:	2c2d      	cmp	r4, #45	; 0x2d
 800a5a6:	d13a      	bne.n	800a61e <_strtoul_l.constprop.0+0xa2>
 800a5a8:	2701      	movs	r7, #1
 800a5aa:	781c      	ldrb	r4, [r3, #0]
 800a5ac:	1c95      	adds	r5, r2, #2
 800a5ae:	2e00      	cmp	r6, #0
 800a5b0:	d067      	beq.n	800a682 <_strtoul_l.constprop.0+0x106>
 800a5b2:	2e10      	cmp	r6, #16
 800a5b4:	d109      	bne.n	800a5ca <_strtoul_l.constprop.0+0x4e>
 800a5b6:	2c30      	cmp	r4, #48	; 0x30
 800a5b8:	d107      	bne.n	800a5ca <_strtoul_l.constprop.0+0x4e>
 800a5ba:	2220      	movs	r2, #32
 800a5bc:	782b      	ldrb	r3, [r5, #0]
 800a5be:	4393      	bics	r3, r2
 800a5c0:	2b58      	cmp	r3, #88	; 0x58
 800a5c2:	d159      	bne.n	800a678 <_strtoul_l.constprop.0+0xfc>
 800a5c4:	2610      	movs	r6, #16
 800a5c6:	786c      	ldrb	r4, [r5, #1]
 800a5c8:	3502      	adds	r5, #2
 800a5ca:	2001      	movs	r0, #1
 800a5cc:	0031      	movs	r1, r6
 800a5ce:	4240      	negs	r0, r0
 800a5d0:	f7f5 fdbc 	bl	800014c <__udivsi3>
 800a5d4:	9003      	str	r0, [sp, #12]
 800a5d6:	2001      	movs	r0, #1
 800a5d8:	0031      	movs	r1, r6
 800a5da:	4240      	negs	r0, r0
 800a5dc:	f7f5 fe3c 	bl	8000258 <__aeabi_uidivmod>
 800a5e0:	2300      	movs	r3, #0
 800a5e2:	9104      	str	r1, [sp, #16]
 800a5e4:	2101      	movs	r1, #1
 800a5e6:	2201      	movs	r2, #1
 800a5e8:	0018      	movs	r0, r3
 800a5ea:	468c      	mov	ip, r1
 800a5ec:	4252      	negs	r2, r2
 800a5ee:	0021      	movs	r1, r4
 800a5f0:	3930      	subs	r1, #48	; 0x30
 800a5f2:	2909      	cmp	r1, #9
 800a5f4:	d818      	bhi.n	800a628 <_strtoul_l.constprop.0+0xac>
 800a5f6:	000c      	movs	r4, r1
 800a5f8:	42a6      	cmp	r6, r4
 800a5fa:	dd23      	ble.n	800a644 <_strtoul_l.constprop.0+0xc8>
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	db1f      	blt.n	800a640 <_strtoul_l.constprop.0+0xc4>
 800a600:	9903      	ldr	r1, [sp, #12]
 800a602:	0013      	movs	r3, r2
 800a604:	4281      	cmp	r1, r0
 800a606:	d307      	bcc.n	800a618 <_strtoul_l.constprop.0+0x9c>
 800a608:	d103      	bne.n	800a612 <_strtoul_l.constprop.0+0x96>
 800a60a:	9904      	ldr	r1, [sp, #16]
 800a60c:	0013      	movs	r3, r2
 800a60e:	42a1      	cmp	r1, r4
 800a610:	db02      	blt.n	800a618 <_strtoul_l.constprop.0+0x9c>
 800a612:	4663      	mov	r3, ip
 800a614:	4370      	muls	r0, r6
 800a616:	1820      	adds	r0, r4, r0
 800a618:	782c      	ldrb	r4, [r5, #0]
 800a61a:	3501      	adds	r5, #1
 800a61c:	e7e7      	b.n	800a5ee <_strtoul_l.constprop.0+0x72>
 800a61e:	2c2b      	cmp	r4, #43	; 0x2b
 800a620:	d1c5      	bne.n	800a5ae <_strtoul_l.constprop.0+0x32>
 800a622:	781c      	ldrb	r4, [r3, #0]
 800a624:	1c95      	adds	r5, r2, #2
 800a626:	e7c2      	b.n	800a5ae <_strtoul_l.constprop.0+0x32>
 800a628:	0021      	movs	r1, r4
 800a62a:	3941      	subs	r1, #65	; 0x41
 800a62c:	2919      	cmp	r1, #25
 800a62e:	d801      	bhi.n	800a634 <_strtoul_l.constprop.0+0xb8>
 800a630:	3c37      	subs	r4, #55	; 0x37
 800a632:	e7e1      	b.n	800a5f8 <_strtoul_l.constprop.0+0x7c>
 800a634:	0021      	movs	r1, r4
 800a636:	3961      	subs	r1, #97	; 0x61
 800a638:	2919      	cmp	r1, #25
 800a63a:	d803      	bhi.n	800a644 <_strtoul_l.constprop.0+0xc8>
 800a63c:	3c57      	subs	r4, #87	; 0x57
 800a63e:	e7db      	b.n	800a5f8 <_strtoul_l.constprop.0+0x7c>
 800a640:	0013      	movs	r3, r2
 800a642:	e7e9      	b.n	800a618 <_strtoul_l.constprop.0+0x9c>
 800a644:	2b00      	cmp	r3, #0
 800a646:	da09      	bge.n	800a65c <_strtoul_l.constprop.0+0xe0>
 800a648:	2322      	movs	r3, #34	; 0x22
 800a64a:	2001      	movs	r0, #1
 800a64c:	9a05      	ldr	r2, [sp, #20]
 800a64e:	4240      	negs	r0, r0
 800a650:	6013      	str	r3, [r2, #0]
 800a652:	9b02      	ldr	r3, [sp, #8]
 800a654:	2b00      	cmp	r3, #0
 800a656:	d109      	bne.n	800a66c <_strtoul_l.constprop.0+0xf0>
 800a658:	b007      	add	sp, #28
 800a65a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a65c:	2f00      	cmp	r7, #0
 800a65e:	d000      	beq.n	800a662 <_strtoul_l.constprop.0+0xe6>
 800a660:	4240      	negs	r0, r0
 800a662:	9a02      	ldr	r2, [sp, #8]
 800a664:	2a00      	cmp	r2, #0
 800a666:	d0f7      	beq.n	800a658 <_strtoul_l.constprop.0+0xdc>
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d001      	beq.n	800a670 <_strtoul_l.constprop.0+0xf4>
 800a66c:	1e6b      	subs	r3, r5, #1
 800a66e:	9301      	str	r3, [sp, #4]
 800a670:	9b02      	ldr	r3, [sp, #8]
 800a672:	9a01      	ldr	r2, [sp, #4]
 800a674:	601a      	str	r2, [r3, #0]
 800a676:	e7ef      	b.n	800a658 <_strtoul_l.constprop.0+0xdc>
 800a678:	2430      	movs	r4, #48	; 0x30
 800a67a:	2e00      	cmp	r6, #0
 800a67c:	d1a5      	bne.n	800a5ca <_strtoul_l.constprop.0+0x4e>
 800a67e:	3608      	adds	r6, #8
 800a680:	e7a3      	b.n	800a5ca <_strtoul_l.constprop.0+0x4e>
 800a682:	2c30      	cmp	r4, #48	; 0x30
 800a684:	d099      	beq.n	800a5ba <_strtoul_l.constprop.0+0x3e>
 800a686:	260a      	movs	r6, #10
 800a688:	e79f      	b.n	800a5ca <_strtoul_l.constprop.0+0x4e>
 800a68a:	46c0      	nop			; (mov r8, r8)
 800a68c:	0800b471 	.word	0x0800b471

0800a690 <_strtoul_r>:
 800a690:	b510      	push	{r4, lr}
 800a692:	f7ff ff73 	bl	800a57c <_strtoul_l.constprop.0>
 800a696:	bd10      	pop	{r4, pc}

0800a698 <__submore>:
 800a698:	000b      	movs	r3, r1
 800a69a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a69c:	6b4d      	ldr	r5, [r1, #52]	; 0x34
 800a69e:	3344      	adds	r3, #68	; 0x44
 800a6a0:	000c      	movs	r4, r1
 800a6a2:	429d      	cmp	r5, r3
 800a6a4:	d11c      	bne.n	800a6e0 <__submore+0x48>
 800a6a6:	2680      	movs	r6, #128	; 0x80
 800a6a8:	00f6      	lsls	r6, r6, #3
 800a6aa:	0031      	movs	r1, r6
 800a6ac:	f7ff f9d8 	bl	8009a60 <_malloc_r>
 800a6b0:	2800      	cmp	r0, #0
 800a6b2:	d102      	bne.n	800a6ba <__submore+0x22>
 800a6b4:	2001      	movs	r0, #1
 800a6b6:	4240      	negs	r0, r0
 800a6b8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a6ba:	0023      	movs	r3, r4
 800a6bc:	6360      	str	r0, [r4, #52]	; 0x34
 800a6be:	63a6      	str	r6, [r4, #56]	; 0x38
 800a6c0:	3346      	adds	r3, #70	; 0x46
 800a6c2:	781a      	ldrb	r2, [r3, #0]
 800a6c4:	4b10      	ldr	r3, [pc, #64]	; (800a708 <__submore+0x70>)
 800a6c6:	54c2      	strb	r2, [r0, r3]
 800a6c8:	0023      	movs	r3, r4
 800a6ca:	3345      	adds	r3, #69	; 0x45
 800a6cc:	781a      	ldrb	r2, [r3, #0]
 800a6ce:	4b0f      	ldr	r3, [pc, #60]	; (800a70c <__submore+0x74>)
 800a6d0:	54c2      	strb	r2, [r0, r3]
 800a6d2:	782a      	ldrb	r2, [r5, #0]
 800a6d4:	4b0e      	ldr	r3, [pc, #56]	; (800a710 <__submore+0x78>)
 800a6d6:	54c2      	strb	r2, [r0, r3]
 800a6d8:	18c0      	adds	r0, r0, r3
 800a6da:	6020      	str	r0, [r4, #0]
 800a6dc:	2000      	movs	r0, #0
 800a6de:	e7eb      	b.n	800a6b8 <__submore+0x20>
 800a6e0:	6b8e      	ldr	r6, [r1, #56]	; 0x38
 800a6e2:	0029      	movs	r1, r5
 800a6e4:	0073      	lsls	r3, r6, #1
 800a6e6:	001a      	movs	r2, r3
 800a6e8:	9301      	str	r3, [sp, #4]
 800a6ea:	f000 fa43 	bl	800ab74 <_realloc_r>
 800a6ee:	1e05      	subs	r5, r0, #0
 800a6f0:	d0e0      	beq.n	800a6b4 <__submore+0x1c>
 800a6f2:	1987      	adds	r7, r0, r6
 800a6f4:	0001      	movs	r1, r0
 800a6f6:	0032      	movs	r2, r6
 800a6f8:	0038      	movs	r0, r7
 800a6fa:	f7fe fc46 	bl	8008f8a <memcpy>
 800a6fe:	9b01      	ldr	r3, [sp, #4]
 800a700:	6027      	str	r7, [r4, #0]
 800a702:	6365      	str	r5, [r4, #52]	; 0x34
 800a704:	63a3      	str	r3, [r4, #56]	; 0x38
 800a706:	e7e9      	b.n	800a6dc <__submore+0x44>
 800a708:	000003ff 	.word	0x000003ff
 800a70c:	000003fe 	.word	0x000003fe
 800a710:	000003fd 	.word	0x000003fd

0800a714 <__ascii_wctomb>:
 800a714:	0003      	movs	r3, r0
 800a716:	1e08      	subs	r0, r1, #0
 800a718:	d005      	beq.n	800a726 <__ascii_wctomb+0x12>
 800a71a:	2aff      	cmp	r2, #255	; 0xff
 800a71c:	d904      	bls.n	800a728 <__ascii_wctomb+0x14>
 800a71e:	228a      	movs	r2, #138	; 0x8a
 800a720:	2001      	movs	r0, #1
 800a722:	601a      	str	r2, [r3, #0]
 800a724:	4240      	negs	r0, r0
 800a726:	4770      	bx	lr
 800a728:	2001      	movs	r0, #1
 800a72a:	700a      	strb	r2, [r1, #0]
 800a72c:	e7fb      	b.n	800a726 <__ascii_wctomb+0x12>
	...

0800a730 <__assert_func>:
 800a730:	b530      	push	{r4, r5, lr}
 800a732:	0014      	movs	r4, r2
 800a734:	001a      	movs	r2, r3
 800a736:	4b09      	ldr	r3, [pc, #36]	; (800a75c <__assert_func+0x2c>)
 800a738:	0005      	movs	r5, r0
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	b085      	sub	sp, #20
 800a73e:	68d8      	ldr	r0, [r3, #12]
 800a740:	4b07      	ldr	r3, [pc, #28]	; (800a760 <__assert_func+0x30>)
 800a742:	2c00      	cmp	r4, #0
 800a744:	d101      	bne.n	800a74a <__assert_func+0x1a>
 800a746:	4b07      	ldr	r3, [pc, #28]	; (800a764 <__assert_func+0x34>)
 800a748:	001c      	movs	r4, r3
 800a74a:	9301      	str	r3, [sp, #4]
 800a74c:	9100      	str	r1, [sp, #0]
 800a74e:	002b      	movs	r3, r5
 800a750:	4905      	ldr	r1, [pc, #20]	; (800a768 <__assert_func+0x38>)
 800a752:	9402      	str	r4, [sp, #8]
 800a754:	f000 f9b8 	bl	800aac8 <fiprintf>
 800a758:	f000 fc6a 	bl	800b030 <abort>
 800a75c:	20000040 	.word	0x20000040
 800a760:	0800b800 	.word	0x0800b800
 800a764:	0800b83b 	.word	0x0800b83b
 800a768:	0800b80d 	.word	0x0800b80d

0800a76c <__sflush_r>:
 800a76c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a76e:	898b      	ldrh	r3, [r1, #12]
 800a770:	0005      	movs	r5, r0
 800a772:	000c      	movs	r4, r1
 800a774:	071a      	lsls	r2, r3, #28
 800a776:	d45f      	bmi.n	800a838 <__sflush_r+0xcc>
 800a778:	684a      	ldr	r2, [r1, #4]
 800a77a:	2a00      	cmp	r2, #0
 800a77c:	dc04      	bgt.n	800a788 <__sflush_r+0x1c>
 800a77e:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800a780:	2a00      	cmp	r2, #0
 800a782:	dc01      	bgt.n	800a788 <__sflush_r+0x1c>
 800a784:	2000      	movs	r0, #0
 800a786:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a788:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800a78a:	2f00      	cmp	r7, #0
 800a78c:	d0fa      	beq.n	800a784 <__sflush_r+0x18>
 800a78e:	2200      	movs	r2, #0
 800a790:	2180      	movs	r1, #128	; 0x80
 800a792:	682e      	ldr	r6, [r5, #0]
 800a794:	602a      	str	r2, [r5, #0]
 800a796:	001a      	movs	r2, r3
 800a798:	0149      	lsls	r1, r1, #5
 800a79a:	400a      	ands	r2, r1
 800a79c:	420b      	tst	r3, r1
 800a79e:	d034      	beq.n	800a80a <__sflush_r+0x9e>
 800a7a0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a7a2:	89a3      	ldrh	r3, [r4, #12]
 800a7a4:	075b      	lsls	r3, r3, #29
 800a7a6:	d506      	bpl.n	800a7b6 <__sflush_r+0x4a>
 800a7a8:	6863      	ldr	r3, [r4, #4]
 800a7aa:	1ac0      	subs	r0, r0, r3
 800a7ac:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d001      	beq.n	800a7b6 <__sflush_r+0x4a>
 800a7b2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a7b4:	1ac0      	subs	r0, r0, r3
 800a7b6:	0002      	movs	r2, r0
 800a7b8:	6a21      	ldr	r1, [r4, #32]
 800a7ba:	2300      	movs	r3, #0
 800a7bc:	0028      	movs	r0, r5
 800a7be:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800a7c0:	47b8      	blx	r7
 800a7c2:	89a1      	ldrh	r1, [r4, #12]
 800a7c4:	1c43      	adds	r3, r0, #1
 800a7c6:	d106      	bne.n	800a7d6 <__sflush_r+0x6a>
 800a7c8:	682b      	ldr	r3, [r5, #0]
 800a7ca:	2b1d      	cmp	r3, #29
 800a7cc:	d831      	bhi.n	800a832 <__sflush_r+0xc6>
 800a7ce:	4a2c      	ldr	r2, [pc, #176]	; (800a880 <__sflush_r+0x114>)
 800a7d0:	40da      	lsrs	r2, r3
 800a7d2:	07d3      	lsls	r3, r2, #31
 800a7d4:	d52d      	bpl.n	800a832 <__sflush_r+0xc6>
 800a7d6:	2300      	movs	r3, #0
 800a7d8:	6063      	str	r3, [r4, #4]
 800a7da:	6923      	ldr	r3, [r4, #16]
 800a7dc:	6023      	str	r3, [r4, #0]
 800a7de:	04cb      	lsls	r3, r1, #19
 800a7e0:	d505      	bpl.n	800a7ee <__sflush_r+0x82>
 800a7e2:	1c43      	adds	r3, r0, #1
 800a7e4:	d102      	bne.n	800a7ec <__sflush_r+0x80>
 800a7e6:	682b      	ldr	r3, [r5, #0]
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d100      	bne.n	800a7ee <__sflush_r+0x82>
 800a7ec:	6560      	str	r0, [r4, #84]	; 0x54
 800a7ee:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a7f0:	602e      	str	r6, [r5, #0]
 800a7f2:	2900      	cmp	r1, #0
 800a7f4:	d0c6      	beq.n	800a784 <__sflush_r+0x18>
 800a7f6:	0023      	movs	r3, r4
 800a7f8:	3344      	adds	r3, #68	; 0x44
 800a7fa:	4299      	cmp	r1, r3
 800a7fc:	d002      	beq.n	800a804 <__sflush_r+0x98>
 800a7fe:	0028      	movs	r0, r5
 800a800:	f7ff f8c2 	bl	8009988 <_free_r>
 800a804:	2000      	movs	r0, #0
 800a806:	6360      	str	r0, [r4, #52]	; 0x34
 800a808:	e7bd      	b.n	800a786 <__sflush_r+0x1a>
 800a80a:	2301      	movs	r3, #1
 800a80c:	0028      	movs	r0, r5
 800a80e:	6a21      	ldr	r1, [r4, #32]
 800a810:	47b8      	blx	r7
 800a812:	1c43      	adds	r3, r0, #1
 800a814:	d1c5      	bne.n	800a7a2 <__sflush_r+0x36>
 800a816:	682b      	ldr	r3, [r5, #0]
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d0c2      	beq.n	800a7a2 <__sflush_r+0x36>
 800a81c:	2b1d      	cmp	r3, #29
 800a81e:	d001      	beq.n	800a824 <__sflush_r+0xb8>
 800a820:	2b16      	cmp	r3, #22
 800a822:	d101      	bne.n	800a828 <__sflush_r+0xbc>
 800a824:	602e      	str	r6, [r5, #0]
 800a826:	e7ad      	b.n	800a784 <__sflush_r+0x18>
 800a828:	2340      	movs	r3, #64	; 0x40
 800a82a:	89a2      	ldrh	r2, [r4, #12]
 800a82c:	4313      	orrs	r3, r2
 800a82e:	81a3      	strh	r3, [r4, #12]
 800a830:	e7a9      	b.n	800a786 <__sflush_r+0x1a>
 800a832:	2340      	movs	r3, #64	; 0x40
 800a834:	430b      	orrs	r3, r1
 800a836:	e7fa      	b.n	800a82e <__sflush_r+0xc2>
 800a838:	690f      	ldr	r7, [r1, #16]
 800a83a:	2f00      	cmp	r7, #0
 800a83c:	d0a2      	beq.n	800a784 <__sflush_r+0x18>
 800a83e:	680a      	ldr	r2, [r1, #0]
 800a840:	600f      	str	r7, [r1, #0]
 800a842:	1bd2      	subs	r2, r2, r7
 800a844:	9201      	str	r2, [sp, #4]
 800a846:	2200      	movs	r2, #0
 800a848:	079b      	lsls	r3, r3, #30
 800a84a:	d100      	bne.n	800a84e <__sflush_r+0xe2>
 800a84c:	694a      	ldr	r2, [r1, #20]
 800a84e:	60a2      	str	r2, [r4, #8]
 800a850:	9b01      	ldr	r3, [sp, #4]
 800a852:	2b00      	cmp	r3, #0
 800a854:	dc00      	bgt.n	800a858 <__sflush_r+0xec>
 800a856:	e795      	b.n	800a784 <__sflush_r+0x18>
 800a858:	003a      	movs	r2, r7
 800a85a:	0028      	movs	r0, r5
 800a85c:	9b01      	ldr	r3, [sp, #4]
 800a85e:	6a21      	ldr	r1, [r4, #32]
 800a860:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a862:	47b0      	blx	r6
 800a864:	2800      	cmp	r0, #0
 800a866:	dc06      	bgt.n	800a876 <__sflush_r+0x10a>
 800a868:	2340      	movs	r3, #64	; 0x40
 800a86a:	2001      	movs	r0, #1
 800a86c:	89a2      	ldrh	r2, [r4, #12]
 800a86e:	4240      	negs	r0, r0
 800a870:	4313      	orrs	r3, r2
 800a872:	81a3      	strh	r3, [r4, #12]
 800a874:	e787      	b.n	800a786 <__sflush_r+0x1a>
 800a876:	9b01      	ldr	r3, [sp, #4]
 800a878:	183f      	adds	r7, r7, r0
 800a87a:	1a1b      	subs	r3, r3, r0
 800a87c:	9301      	str	r3, [sp, #4]
 800a87e:	e7e7      	b.n	800a850 <__sflush_r+0xe4>
 800a880:	20400001 	.word	0x20400001

0800a884 <_fflush_r>:
 800a884:	690b      	ldr	r3, [r1, #16]
 800a886:	b570      	push	{r4, r5, r6, lr}
 800a888:	0005      	movs	r5, r0
 800a88a:	000c      	movs	r4, r1
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d102      	bne.n	800a896 <_fflush_r+0x12>
 800a890:	2500      	movs	r5, #0
 800a892:	0028      	movs	r0, r5
 800a894:	bd70      	pop	{r4, r5, r6, pc}
 800a896:	2800      	cmp	r0, #0
 800a898:	d004      	beq.n	800a8a4 <_fflush_r+0x20>
 800a89a:	6983      	ldr	r3, [r0, #24]
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d101      	bne.n	800a8a4 <_fflush_r+0x20>
 800a8a0:	f000 f892 	bl	800a9c8 <__sinit>
 800a8a4:	4b14      	ldr	r3, [pc, #80]	; (800a8f8 <_fflush_r+0x74>)
 800a8a6:	429c      	cmp	r4, r3
 800a8a8:	d11b      	bne.n	800a8e2 <_fflush_r+0x5e>
 800a8aa:	686c      	ldr	r4, [r5, #4]
 800a8ac:	220c      	movs	r2, #12
 800a8ae:	5ea3      	ldrsh	r3, [r4, r2]
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d0ed      	beq.n	800a890 <_fflush_r+0xc>
 800a8b4:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a8b6:	07d2      	lsls	r2, r2, #31
 800a8b8:	d404      	bmi.n	800a8c4 <_fflush_r+0x40>
 800a8ba:	059b      	lsls	r3, r3, #22
 800a8bc:	d402      	bmi.n	800a8c4 <_fflush_r+0x40>
 800a8be:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a8c0:	f000 f933 	bl	800ab2a <__retarget_lock_acquire_recursive>
 800a8c4:	0028      	movs	r0, r5
 800a8c6:	0021      	movs	r1, r4
 800a8c8:	f7ff ff50 	bl	800a76c <__sflush_r>
 800a8cc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a8ce:	0005      	movs	r5, r0
 800a8d0:	07db      	lsls	r3, r3, #31
 800a8d2:	d4de      	bmi.n	800a892 <_fflush_r+0xe>
 800a8d4:	89a3      	ldrh	r3, [r4, #12]
 800a8d6:	059b      	lsls	r3, r3, #22
 800a8d8:	d4db      	bmi.n	800a892 <_fflush_r+0xe>
 800a8da:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a8dc:	f000 f926 	bl	800ab2c <__retarget_lock_release_recursive>
 800a8e0:	e7d7      	b.n	800a892 <_fflush_r+0xe>
 800a8e2:	4b06      	ldr	r3, [pc, #24]	; (800a8fc <_fflush_r+0x78>)
 800a8e4:	429c      	cmp	r4, r3
 800a8e6:	d101      	bne.n	800a8ec <_fflush_r+0x68>
 800a8e8:	68ac      	ldr	r4, [r5, #8]
 800a8ea:	e7df      	b.n	800a8ac <_fflush_r+0x28>
 800a8ec:	4b04      	ldr	r3, [pc, #16]	; (800a900 <_fflush_r+0x7c>)
 800a8ee:	429c      	cmp	r4, r3
 800a8f0:	d1dc      	bne.n	800a8ac <_fflush_r+0x28>
 800a8f2:	68ec      	ldr	r4, [r5, #12]
 800a8f4:	e7da      	b.n	800a8ac <_fflush_r+0x28>
 800a8f6:	46c0      	nop			; (mov r8, r8)
 800a8f8:	0800b85c 	.word	0x0800b85c
 800a8fc:	0800b87c 	.word	0x0800b87c
 800a900:	0800b83c 	.word	0x0800b83c

0800a904 <std>:
 800a904:	2300      	movs	r3, #0
 800a906:	b510      	push	{r4, lr}
 800a908:	0004      	movs	r4, r0
 800a90a:	6003      	str	r3, [r0, #0]
 800a90c:	6043      	str	r3, [r0, #4]
 800a90e:	6083      	str	r3, [r0, #8]
 800a910:	8181      	strh	r1, [r0, #12]
 800a912:	6643      	str	r3, [r0, #100]	; 0x64
 800a914:	0019      	movs	r1, r3
 800a916:	81c2      	strh	r2, [r0, #14]
 800a918:	6103      	str	r3, [r0, #16]
 800a91a:	6143      	str	r3, [r0, #20]
 800a91c:	6183      	str	r3, [r0, #24]
 800a91e:	2208      	movs	r2, #8
 800a920:	305c      	adds	r0, #92	; 0x5c
 800a922:	f7fb fabf 	bl	8005ea4 <memset>
 800a926:	4b05      	ldr	r3, [pc, #20]	; (800a93c <std+0x38>)
 800a928:	6224      	str	r4, [r4, #32]
 800a92a:	6263      	str	r3, [r4, #36]	; 0x24
 800a92c:	4b04      	ldr	r3, [pc, #16]	; (800a940 <std+0x3c>)
 800a92e:	62a3      	str	r3, [r4, #40]	; 0x28
 800a930:	4b04      	ldr	r3, [pc, #16]	; (800a944 <std+0x40>)
 800a932:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a934:	4b04      	ldr	r3, [pc, #16]	; (800a948 <std+0x44>)
 800a936:	6323      	str	r3, [r4, #48]	; 0x30
 800a938:	bd10      	pop	{r4, pc}
 800a93a:	46c0      	nop			; (mov r8, r8)
 800a93c:	08006c39 	.word	0x08006c39
 800a940:	08006c65 	.word	0x08006c65
 800a944:	08006c9d 	.word	0x08006c9d
 800a948:	08006cc9 	.word	0x08006cc9

0800a94c <_cleanup_r>:
 800a94c:	b510      	push	{r4, lr}
 800a94e:	4902      	ldr	r1, [pc, #8]	; (800a958 <_cleanup_r+0xc>)
 800a950:	f000 f8ca 	bl	800aae8 <_fwalk_reent>
 800a954:	bd10      	pop	{r4, pc}
 800a956:	46c0      	nop			; (mov r8, r8)
 800a958:	0800a885 	.word	0x0800a885

0800a95c <__sfmoreglue>:
 800a95c:	b570      	push	{r4, r5, r6, lr}
 800a95e:	2568      	movs	r5, #104	; 0x68
 800a960:	1e4a      	subs	r2, r1, #1
 800a962:	4355      	muls	r5, r2
 800a964:	000e      	movs	r6, r1
 800a966:	0029      	movs	r1, r5
 800a968:	3174      	adds	r1, #116	; 0x74
 800a96a:	f7ff f879 	bl	8009a60 <_malloc_r>
 800a96e:	1e04      	subs	r4, r0, #0
 800a970:	d008      	beq.n	800a984 <__sfmoreglue+0x28>
 800a972:	2100      	movs	r1, #0
 800a974:	002a      	movs	r2, r5
 800a976:	6001      	str	r1, [r0, #0]
 800a978:	6046      	str	r6, [r0, #4]
 800a97a:	300c      	adds	r0, #12
 800a97c:	60a0      	str	r0, [r4, #8]
 800a97e:	3268      	adds	r2, #104	; 0x68
 800a980:	f7fb fa90 	bl	8005ea4 <memset>
 800a984:	0020      	movs	r0, r4
 800a986:	bd70      	pop	{r4, r5, r6, pc}

0800a988 <__sfp_lock_acquire>:
 800a988:	b510      	push	{r4, lr}
 800a98a:	4802      	ldr	r0, [pc, #8]	; (800a994 <__sfp_lock_acquire+0xc>)
 800a98c:	f000 f8cd 	bl	800ab2a <__retarget_lock_acquire_recursive>
 800a990:	bd10      	pop	{r4, pc}
 800a992:	46c0      	nop			; (mov r8, r8)
 800a994:	20000939 	.word	0x20000939

0800a998 <__sfp_lock_release>:
 800a998:	b510      	push	{r4, lr}
 800a99a:	4802      	ldr	r0, [pc, #8]	; (800a9a4 <__sfp_lock_release+0xc>)
 800a99c:	f000 f8c6 	bl	800ab2c <__retarget_lock_release_recursive>
 800a9a0:	bd10      	pop	{r4, pc}
 800a9a2:	46c0      	nop			; (mov r8, r8)
 800a9a4:	20000939 	.word	0x20000939

0800a9a8 <__sinit_lock_acquire>:
 800a9a8:	b510      	push	{r4, lr}
 800a9aa:	4802      	ldr	r0, [pc, #8]	; (800a9b4 <__sinit_lock_acquire+0xc>)
 800a9ac:	f000 f8bd 	bl	800ab2a <__retarget_lock_acquire_recursive>
 800a9b0:	bd10      	pop	{r4, pc}
 800a9b2:	46c0      	nop			; (mov r8, r8)
 800a9b4:	2000093a 	.word	0x2000093a

0800a9b8 <__sinit_lock_release>:
 800a9b8:	b510      	push	{r4, lr}
 800a9ba:	4802      	ldr	r0, [pc, #8]	; (800a9c4 <__sinit_lock_release+0xc>)
 800a9bc:	f000 f8b6 	bl	800ab2c <__retarget_lock_release_recursive>
 800a9c0:	bd10      	pop	{r4, pc}
 800a9c2:	46c0      	nop			; (mov r8, r8)
 800a9c4:	2000093a 	.word	0x2000093a

0800a9c8 <__sinit>:
 800a9c8:	b513      	push	{r0, r1, r4, lr}
 800a9ca:	0004      	movs	r4, r0
 800a9cc:	f7ff ffec 	bl	800a9a8 <__sinit_lock_acquire>
 800a9d0:	69a3      	ldr	r3, [r4, #24]
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d002      	beq.n	800a9dc <__sinit+0x14>
 800a9d6:	f7ff ffef 	bl	800a9b8 <__sinit_lock_release>
 800a9da:	bd13      	pop	{r0, r1, r4, pc}
 800a9dc:	64a3      	str	r3, [r4, #72]	; 0x48
 800a9de:	64e3      	str	r3, [r4, #76]	; 0x4c
 800a9e0:	6523      	str	r3, [r4, #80]	; 0x50
 800a9e2:	4b13      	ldr	r3, [pc, #76]	; (800aa30 <__sinit+0x68>)
 800a9e4:	4a13      	ldr	r2, [pc, #76]	; (800aa34 <__sinit+0x6c>)
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	62a2      	str	r2, [r4, #40]	; 0x28
 800a9ea:	9301      	str	r3, [sp, #4]
 800a9ec:	42a3      	cmp	r3, r4
 800a9ee:	d101      	bne.n	800a9f4 <__sinit+0x2c>
 800a9f0:	2301      	movs	r3, #1
 800a9f2:	61a3      	str	r3, [r4, #24]
 800a9f4:	0020      	movs	r0, r4
 800a9f6:	f000 f81f 	bl	800aa38 <__sfp>
 800a9fa:	6060      	str	r0, [r4, #4]
 800a9fc:	0020      	movs	r0, r4
 800a9fe:	f000 f81b 	bl	800aa38 <__sfp>
 800aa02:	60a0      	str	r0, [r4, #8]
 800aa04:	0020      	movs	r0, r4
 800aa06:	f000 f817 	bl	800aa38 <__sfp>
 800aa0a:	2200      	movs	r2, #0
 800aa0c:	2104      	movs	r1, #4
 800aa0e:	60e0      	str	r0, [r4, #12]
 800aa10:	6860      	ldr	r0, [r4, #4]
 800aa12:	f7ff ff77 	bl	800a904 <std>
 800aa16:	2201      	movs	r2, #1
 800aa18:	2109      	movs	r1, #9
 800aa1a:	68a0      	ldr	r0, [r4, #8]
 800aa1c:	f7ff ff72 	bl	800a904 <std>
 800aa20:	2202      	movs	r2, #2
 800aa22:	2112      	movs	r1, #18
 800aa24:	68e0      	ldr	r0, [r4, #12]
 800aa26:	f7ff ff6d 	bl	800a904 <std>
 800aa2a:	2301      	movs	r3, #1
 800aa2c:	61a3      	str	r3, [r4, #24]
 800aa2e:	e7d2      	b.n	800a9d6 <__sinit+0xe>
 800aa30:	0800b3e0 	.word	0x0800b3e0
 800aa34:	0800a94d 	.word	0x0800a94d

0800aa38 <__sfp>:
 800aa38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa3a:	0007      	movs	r7, r0
 800aa3c:	f7ff ffa4 	bl	800a988 <__sfp_lock_acquire>
 800aa40:	4b1f      	ldr	r3, [pc, #124]	; (800aac0 <__sfp+0x88>)
 800aa42:	681e      	ldr	r6, [r3, #0]
 800aa44:	69b3      	ldr	r3, [r6, #24]
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d102      	bne.n	800aa50 <__sfp+0x18>
 800aa4a:	0030      	movs	r0, r6
 800aa4c:	f7ff ffbc 	bl	800a9c8 <__sinit>
 800aa50:	3648      	adds	r6, #72	; 0x48
 800aa52:	68b4      	ldr	r4, [r6, #8]
 800aa54:	6873      	ldr	r3, [r6, #4]
 800aa56:	3b01      	subs	r3, #1
 800aa58:	d504      	bpl.n	800aa64 <__sfp+0x2c>
 800aa5a:	6833      	ldr	r3, [r6, #0]
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d022      	beq.n	800aaa6 <__sfp+0x6e>
 800aa60:	6836      	ldr	r6, [r6, #0]
 800aa62:	e7f6      	b.n	800aa52 <__sfp+0x1a>
 800aa64:	220c      	movs	r2, #12
 800aa66:	5ea5      	ldrsh	r5, [r4, r2]
 800aa68:	2d00      	cmp	r5, #0
 800aa6a:	d11a      	bne.n	800aaa2 <__sfp+0x6a>
 800aa6c:	0020      	movs	r0, r4
 800aa6e:	4b15      	ldr	r3, [pc, #84]	; (800aac4 <__sfp+0x8c>)
 800aa70:	3058      	adds	r0, #88	; 0x58
 800aa72:	60e3      	str	r3, [r4, #12]
 800aa74:	6665      	str	r5, [r4, #100]	; 0x64
 800aa76:	f000 f857 	bl	800ab28 <__retarget_lock_init_recursive>
 800aa7a:	f7ff ff8d 	bl	800a998 <__sfp_lock_release>
 800aa7e:	0020      	movs	r0, r4
 800aa80:	2208      	movs	r2, #8
 800aa82:	0029      	movs	r1, r5
 800aa84:	6025      	str	r5, [r4, #0]
 800aa86:	60a5      	str	r5, [r4, #8]
 800aa88:	6065      	str	r5, [r4, #4]
 800aa8a:	6125      	str	r5, [r4, #16]
 800aa8c:	6165      	str	r5, [r4, #20]
 800aa8e:	61a5      	str	r5, [r4, #24]
 800aa90:	305c      	adds	r0, #92	; 0x5c
 800aa92:	f7fb fa07 	bl	8005ea4 <memset>
 800aa96:	6365      	str	r5, [r4, #52]	; 0x34
 800aa98:	63a5      	str	r5, [r4, #56]	; 0x38
 800aa9a:	64a5      	str	r5, [r4, #72]	; 0x48
 800aa9c:	64e5      	str	r5, [r4, #76]	; 0x4c
 800aa9e:	0020      	movs	r0, r4
 800aaa0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aaa2:	3468      	adds	r4, #104	; 0x68
 800aaa4:	e7d7      	b.n	800aa56 <__sfp+0x1e>
 800aaa6:	2104      	movs	r1, #4
 800aaa8:	0038      	movs	r0, r7
 800aaaa:	f7ff ff57 	bl	800a95c <__sfmoreglue>
 800aaae:	1e04      	subs	r4, r0, #0
 800aab0:	6030      	str	r0, [r6, #0]
 800aab2:	d1d5      	bne.n	800aa60 <__sfp+0x28>
 800aab4:	f7ff ff70 	bl	800a998 <__sfp_lock_release>
 800aab8:	230c      	movs	r3, #12
 800aaba:	603b      	str	r3, [r7, #0]
 800aabc:	e7ef      	b.n	800aa9e <__sfp+0x66>
 800aabe:	46c0      	nop			; (mov r8, r8)
 800aac0:	0800b3e0 	.word	0x0800b3e0
 800aac4:	ffff0001 	.word	0xffff0001

0800aac8 <fiprintf>:
 800aac8:	b40e      	push	{r1, r2, r3}
 800aaca:	b503      	push	{r0, r1, lr}
 800aacc:	0001      	movs	r1, r0
 800aace:	ab03      	add	r3, sp, #12
 800aad0:	4804      	ldr	r0, [pc, #16]	; (800aae4 <fiprintf+0x1c>)
 800aad2:	cb04      	ldmia	r3!, {r2}
 800aad4:	6800      	ldr	r0, [r0, #0]
 800aad6:	9301      	str	r3, [sp, #4]
 800aad8:	f000 f8a2 	bl	800ac20 <_vfiprintf_r>
 800aadc:	b002      	add	sp, #8
 800aade:	bc08      	pop	{r3}
 800aae0:	b003      	add	sp, #12
 800aae2:	4718      	bx	r3
 800aae4:	20000040 	.word	0x20000040

0800aae8 <_fwalk_reent>:
 800aae8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aaea:	0004      	movs	r4, r0
 800aaec:	0006      	movs	r6, r0
 800aaee:	2700      	movs	r7, #0
 800aaf0:	9101      	str	r1, [sp, #4]
 800aaf2:	3448      	adds	r4, #72	; 0x48
 800aaf4:	6863      	ldr	r3, [r4, #4]
 800aaf6:	68a5      	ldr	r5, [r4, #8]
 800aaf8:	9300      	str	r3, [sp, #0]
 800aafa:	9b00      	ldr	r3, [sp, #0]
 800aafc:	3b01      	subs	r3, #1
 800aafe:	9300      	str	r3, [sp, #0]
 800ab00:	d504      	bpl.n	800ab0c <_fwalk_reent+0x24>
 800ab02:	6824      	ldr	r4, [r4, #0]
 800ab04:	2c00      	cmp	r4, #0
 800ab06:	d1f5      	bne.n	800aaf4 <_fwalk_reent+0xc>
 800ab08:	0038      	movs	r0, r7
 800ab0a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ab0c:	89ab      	ldrh	r3, [r5, #12]
 800ab0e:	2b01      	cmp	r3, #1
 800ab10:	d908      	bls.n	800ab24 <_fwalk_reent+0x3c>
 800ab12:	220e      	movs	r2, #14
 800ab14:	5eab      	ldrsh	r3, [r5, r2]
 800ab16:	3301      	adds	r3, #1
 800ab18:	d004      	beq.n	800ab24 <_fwalk_reent+0x3c>
 800ab1a:	0029      	movs	r1, r5
 800ab1c:	0030      	movs	r0, r6
 800ab1e:	9b01      	ldr	r3, [sp, #4]
 800ab20:	4798      	blx	r3
 800ab22:	4307      	orrs	r7, r0
 800ab24:	3568      	adds	r5, #104	; 0x68
 800ab26:	e7e8      	b.n	800aafa <_fwalk_reent+0x12>

0800ab28 <__retarget_lock_init_recursive>:
 800ab28:	4770      	bx	lr

0800ab2a <__retarget_lock_acquire_recursive>:
 800ab2a:	4770      	bx	lr

0800ab2c <__retarget_lock_release_recursive>:
 800ab2c:	4770      	bx	lr

0800ab2e <memmove>:
 800ab2e:	b510      	push	{r4, lr}
 800ab30:	4288      	cmp	r0, r1
 800ab32:	d902      	bls.n	800ab3a <memmove+0xc>
 800ab34:	188b      	adds	r3, r1, r2
 800ab36:	4298      	cmp	r0, r3
 800ab38:	d303      	bcc.n	800ab42 <memmove+0x14>
 800ab3a:	2300      	movs	r3, #0
 800ab3c:	e007      	b.n	800ab4e <memmove+0x20>
 800ab3e:	5c8b      	ldrb	r3, [r1, r2]
 800ab40:	5483      	strb	r3, [r0, r2]
 800ab42:	3a01      	subs	r2, #1
 800ab44:	d2fb      	bcs.n	800ab3e <memmove+0x10>
 800ab46:	bd10      	pop	{r4, pc}
 800ab48:	5ccc      	ldrb	r4, [r1, r3]
 800ab4a:	54c4      	strb	r4, [r0, r3]
 800ab4c:	3301      	adds	r3, #1
 800ab4e:	429a      	cmp	r2, r3
 800ab50:	d1fa      	bne.n	800ab48 <memmove+0x1a>
 800ab52:	e7f8      	b.n	800ab46 <memmove+0x18>

0800ab54 <__malloc_lock>:
 800ab54:	b510      	push	{r4, lr}
 800ab56:	4802      	ldr	r0, [pc, #8]	; (800ab60 <__malloc_lock+0xc>)
 800ab58:	f7ff ffe7 	bl	800ab2a <__retarget_lock_acquire_recursive>
 800ab5c:	bd10      	pop	{r4, pc}
 800ab5e:	46c0      	nop			; (mov r8, r8)
 800ab60:	20000938 	.word	0x20000938

0800ab64 <__malloc_unlock>:
 800ab64:	b510      	push	{r4, lr}
 800ab66:	4802      	ldr	r0, [pc, #8]	; (800ab70 <__malloc_unlock+0xc>)
 800ab68:	f7ff ffe0 	bl	800ab2c <__retarget_lock_release_recursive>
 800ab6c:	bd10      	pop	{r4, pc}
 800ab6e:	46c0      	nop			; (mov r8, r8)
 800ab70:	20000938 	.word	0x20000938

0800ab74 <_realloc_r>:
 800ab74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ab76:	0007      	movs	r7, r0
 800ab78:	000e      	movs	r6, r1
 800ab7a:	0014      	movs	r4, r2
 800ab7c:	2900      	cmp	r1, #0
 800ab7e:	d105      	bne.n	800ab8c <_realloc_r+0x18>
 800ab80:	0011      	movs	r1, r2
 800ab82:	f7fe ff6d 	bl	8009a60 <_malloc_r>
 800ab86:	0005      	movs	r5, r0
 800ab88:	0028      	movs	r0, r5
 800ab8a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ab8c:	2a00      	cmp	r2, #0
 800ab8e:	d103      	bne.n	800ab98 <_realloc_r+0x24>
 800ab90:	f7fe fefa 	bl	8009988 <_free_r>
 800ab94:	0025      	movs	r5, r4
 800ab96:	e7f7      	b.n	800ab88 <_realloc_r+0x14>
 800ab98:	f000 fabe 	bl	800b118 <_malloc_usable_size_r>
 800ab9c:	9001      	str	r0, [sp, #4]
 800ab9e:	4284      	cmp	r4, r0
 800aba0:	d803      	bhi.n	800abaa <_realloc_r+0x36>
 800aba2:	0035      	movs	r5, r6
 800aba4:	0843      	lsrs	r3, r0, #1
 800aba6:	42a3      	cmp	r3, r4
 800aba8:	d3ee      	bcc.n	800ab88 <_realloc_r+0x14>
 800abaa:	0021      	movs	r1, r4
 800abac:	0038      	movs	r0, r7
 800abae:	f7fe ff57 	bl	8009a60 <_malloc_r>
 800abb2:	1e05      	subs	r5, r0, #0
 800abb4:	d0e8      	beq.n	800ab88 <_realloc_r+0x14>
 800abb6:	9b01      	ldr	r3, [sp, #4]
 800abb8:	0022      	movs	r2, r4
 800abba:	429c      	cmp	r4, r3
 800abbc:	d900      	bls.n	800abc0 <_realloc_r+0x4c>
 800abbe:	001a      	movs	r2, r3
 800abc0:	0031      	movs	r1, r6
 800abc2:	0028      	movs	r0, r5
 800abc4:	f7fe f9e1 	bl	8008f8a <memcpy>
 800abc8:	0031      	movs	r1, r6
 800abca:	0038      	movs	r0, r7
 800abcc:	f7fe fedc 	bl	8009988 <_free_r>
 800abd0:	e7da      	b.n	800ab88 <_realloc_r+0x14>

0800abd2 <__sfputc_r>:
 800abd2:	6893      	ldr	r3, [r2, #8]
 800abd4:	b510      	push	{r4, lr}
 800abd6:	3b01      	subs	r3, #1
 800abd8:	6093      	str	r3, [r2, #8]
 800abda:	2b00      	cmp	r3, #0
 800abdc:	da04      	bge.n	800abe8 <__sfputc_r+0x16>
 800abde:	6994      	ldr	r4, [r2, #24]
 800abe0:	42a3      	cmp	r3, r4
 800abe2:	db07      	blt.n	800abf4 <__sfputc_r+0x22>
 800abe4:	290a      	cmp	r1, #10
 800abe6:	d005      	beq.n	800abf4 <__sfputc_r+0x22>
 800abe8:	6813      	ldr	r3, [r2, #0]
 800abea:	1c58      	adds	r0, r3, #1
 800abec:	6010      	str	r0, [r2, #0]
 800abee:	7019      	strb	r1, [r3, #0]
 800abf0:	0008      	movs	r0, r1
 800abf2:	bd10      	pop	{r4, pc}
 800abf4:	f000 f94e 	bl	800ae94 <__swbuf_r>
 800abf8:	0001      	movs	r1, r0
 800abfa:	e7f9      	b.n	800abf0 <__sfputc_r+0x1e>

0800abfc <__sfputs_r>:
 800abfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abfe:	0006      	movs	r6, r0
 800ac00:	000f      	movs	r7, r1
 800ac02:	0014      	movs	r4, r2
 800ac04:	18d5      	adds	r5, r2, r3
 800ac06:	42ac      	cmp	r4, r5
 800ac08:	d101      	bne.n	800ac0e <__sfputs_r+0x12>
 800ac0a:	2000      	movs	r0, #0
 800ac0c:	e007      	b.n	800ac1e <__sfputs_r+0x22>
 800ac0e:	7821      	ldrb	r1, [r4, #0]
 800ac10:	003a      	movs	r2, r7
 800ac12:	0030      	movs	r0, r6
 800ac14:	f7ff ffdd 	bl	800abd2 <__sfputc_r>
 800ac18:	3401      	adds	r4, #1
 800ac1a:	1c43      	adds	r3, r0, #1
 800ac1c:	d1f3      	bne.n	800ac06 <__sfputs_r+0xa>
 800ac1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ac20 <_vfiprintf_r>:
 800ac20:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ac22:	b0a1      	sub	sp, #132	; 0x84
 800ac24:	0006      	movs	r6, r0
 800ac26:	000c      	movs	r4, r1
 800ac28:	001f      	movs	r7, r3
 800ac2a:	9203      	str	r2, [sp, #12]
 800ac2c:	2800      	cmp	r0, #0
 800ac2e:	d004      	beq.n	800ac3a <_vfiprintf_r+0x1a>
 800ac30:	6983      	ldr	r3, [r0, #24]
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d101      	bne.n	800ac3a <_vfiprintf_r+0x1a>
 800ac36:	f7ff fec7 	bl	800a9c8 <__sinit>
 800ac3a:	4b8e      	ldr	r3, [pc, #568]	; (800ae74 <_vfiprintf_r+0x254>)
 800ac3c:	429c      	cmp	r4, r3
 800ac3e:	d11c      	bne.n	800ac7a <_vfiprintf_r+0x5a>
 800ac40:	6874      	ldr	r4, [r6, #4]
 800ac42:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ac44:	07db      	lsls	r3, r3, #31
 800ac46:	d405      	bmi.n	800ac54 <_vfiprintf_r+0x34>
 800ac48:	89a3      	ldrh	r3, [r4, #12]
 800ac4a:	059b      	lsls	r3, r3, #22
 800ac4c:	d402      	bmi.n	800ac54 <_vfiprintf_r+0x34>
 800ac4e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ac50:	f7ff ff6b 	bl	800ab2a <__retarget_lock_acquire_recursive>
 800ac54:	89a3      	ldrh	r3, [r4, #12]
 800ac56:	071b      	lsls	r3, r3, #28
 800ac58:	d502      	bpl.n	800ac60 <_vfiprintf_r+0x40>
 800ac5a:	6923      	ldr	r3, [r4, #16]
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d11d      	bne.n	800ac9c <_vfiprintf_r+0x7c>
 800ac60:	0021      	movs	r1, r4
 800ac62:	0030      	movs	r0, r6
 800ac64:	f000 f96c 	bl	800af40 <__swsetup_r>
 800ac68:	2800      	cmp	r0, #0
 800ac6a:	d017      	beq.n	800ac9c <_vfiprintf_r+0x7c>
 800ac6c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ac6e:	07db      	lsls	r3, r3, #31
 800ac70:	d50d      	bpl.n	800ac8e <_vfiprintf_r+0x6e>
 800ac72:	2001      	movs	r0, #1
 800ac74:	4240      	negs	r0, r0
 800ac76:	b021      	add	sp, #132	; 0x84
 800ac78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ac7a:	4b7f      	ldr	r3, [pc, #508]	; (800ae78 <_vfiprintf_r+0x258>)
 800ac7c:	429c      	cmp	r4, r3
 800ac7e:	d101      	bne.n	800ac84 <_vfiprintf_r+0x64>
 800ac80:	68b4      	ldr	r4, [r6, #8]
 800ac82:	e7de      	b.n	800ac42 <_vfiprintf_r+0x22>
 800ac84:	4b7d      	ldr	r3, [pc, #500]	; (800ae7c <_vfiprintf_r+0x25c>)
 800ac86:	429c      	cmp	r4, r3
 800ac88:	d1db      	bne.n	800ac42 <_vfiprintf_r+0x22>
 800ac8a:	68f4      	ldr	r4, [r6, #12]
 800ac8c:	e7d9      	b.n	800ac42 <_vfiprintf_r+0x22>
 800ac8e:	89a3      	ldrh	r3, [r4, #12]
 800ac90:	059b      	lsls	r3, r3, #22
 800ac92:	d4ee      	bmi.n	800ac72 <_vfiprintf_r+0x52>
 800ac94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ac96:	f7ff ff49 	bl	800ab2c <__retarget_lock_release_recursive>
 800ac9a:	e7ea      	b.n	800ac72 <_vfiprintf_r+0x52>
 800ac9c:	2300      	movs	r3, #0
 800ac9e:	ad08      	add	r5, sp, #32
 800aca0:	616b      	str	r3, [r5, #20]
 800aca2:	3320      	adds	r3, #32
 800aca4:	766b      	strb	r3, [r5, #25]
 800aca6:	3310      	adds	r3, #16
 800aca8:	76ab      	strb	r3, [r5, #26]
 800acaa:	9707      	str	r7, [sp, #28]
 800acac:	9f03      	ldr	r7, [sp, #12]
 800acae:	783b      	ldrb	r3, [r7, #0]
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d001      	beq.n	800acb8 <_vfiprintf_r+0x98>
 800acb4:	2b25      	cmp	r3, #37	; 0x25
 800acb6:	d14e      	bne.n	800ad56 <_vfiprintf_r+0x136>
 800acb8:	9b03      	ldr	r3, [sp, #12]
 800acba:	1afb      	subs	r3, r7, r3
 800acbc:	9305      	str	r3, [sp, #20]
 800acbe:	9b03      	ldr	r3, [sp, #12]
 800acc0:	429f      	cmp	r7, r3
 800acc2:	d00d      	beq.n	800ace0 <_vfiprintf_r+0xc0>
 800acc4:	9b05      	ldr	r3, [sp, #20]
 800acc6:	0021      	movs	r1, r4
 800acc8:	0030      	movs	r0, r6
 800acca:	9a03      	ldr	r2, [sp, #12]
 800accc:	f7ff ff96 	bl	800abfc <__sfputs_r>
 800acd0:	1c43      	adds	r3, r0, #1
 800acd2:	d100      	bne.n	800acd6 <_vfiprintf_r+0xb6>
 800acd4:	e0b5      	b.n	800ae42 <_vfiprintf_r+0x222>
 800acd6:	696a      	ldr	r2, [r5, #20]
 800acd8:	9b05      	ldr	r3, [sp, #20]
 800acda:	4694      	mov	ip, r2
 800acdc:	4463      	add	r3, ip
 800acde:	616b      	str	r3, [r5, #20]
 800ace0:	783b      	ldrb	r3, [r7, #0]
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d100      	bne.n	800ace8 <_vfiprintf_r+0xc8>
 800ace6:	e0ac      	b.n	800ae42 <_vfiprintf_r+0x222>
 800ace8:	2201      	movs	r2, #1
 800acea:	1c7b      	adds	r3, r7, #1
 800acec:	9303      	str	r3, [sp, #12]
 800acee:	2300      	movs	r3, #0
 800acf0:	4252      	negs	r2, r2
 800acf2:	606a      	str	r2, [r5, #4]
 800acf4:	a904      	add	r1, sp, #16
 800acf6:	3254      	adds	r2, #84	; 0x54
 800acf8:	1852      	adds	r2, r2, r1
 800acfa:	602b      	str	r3, [r5, #0]
 800acfc:	60eb      	str	r3, [r5, #12]
 800acfe:	60ab      	str	r3, [r5, #8]
 800ad00:	7013      	strb	r3, [r2, #0]
 800ad02:	65ab      	str	r3, [r5, #88]	; 0x58
 800ad04:	9b03      	ldr	r3, [sp, #12]
 800ad06:	2205      	movs	r2, #5
 800ad08:	7819      	ldrb	r1, [r3, #0]
 800ad0a:	485d      	ldr	r0, [pc, #372]	; (800ae80 <_vfiprintf_r+0x260>)
 800ad0c:	f7fe f932 	bl	8008f74 <memchr>
 800ad10:	9b03      	ldr	r3, [sp, #12]
 800ad12:	1c5f      	adds	r7, r3, #1
 800ad14:	2800      	cmp	r0, #0
 800ad16:	d120      	bne.n	800ad5a <_vfiprintf_r+0x13a>
 800ad18:	682a      	ldr	r2, [r5, #0]
 800ad1a:	06d3      	lsls	r3, r2, #27
 800ad1c:	d504      	bpl.n	800ad28 <_vfiprintf_r+0x108>
 800ad1e:	2353      	movs	r3, #83	; 0x53
 800ad20:	a904      	add	r1, sp, #16
 800ad22:	185b      	adds	r3, r3, r1
 800ad24:	2120      	movs	r1, #32
 800ad26:	7019      	strb	r1, [r3, #0]
 800ad28:	0713      	lsls	r3, r2, #28
 800ad2a:	d504      	bpl.n	800ad36 <_vfiprintf_r+0x116>
 800ad2c:	2353      	movs	r3, #83	; 0x53
 800ad2e:	a904      	add	r1, sp, #16
 800ad30:	185b      	adds	r3, r3, r1
 800ad32:	212b      	movs	r1, #43	; 0x2b
 800ad34:	7019      	strb	r1, [r3, #0]
 800ad36:	9b03      	ldr	r3, [sp, #12]
 800ad38:	781b      	ldrb	r3, [r3, #0]
 800ad3a:	2b2a      	cmp	r3, #42	; 0x2a
 800ad3c:	d016      	beq.n	800ad6c <_vfiprintf_r+0x14c>
 800ad3e:	2100      	movs	r1, #0
 800ad40:	68eb      	ldr	r3, [r5, #12]
 800ad42:	9f03      	ldr	r7, [sp, #12]
 800ad44:	783a      	ldrb	r2, [r7, #0]
 800ad46:	1c78      	adds	r0, r7, #1
 800ad48:	3a30      	subs	r2, #48	; 0x30
 800ad4a:	4684      	mov	ip, r0
 800ad4c:	2a09      	cmp	r2, #9
 800ad4e:	d94f      	bls.n	800adf0 <_vfiprintf_r+0x1d0>
 800ad50:	2900      	cmp	r1, #0
 800ad52:	d111      	bne.n	800ad78 <_vfiprintf_r+0x158>
 800ad54:	e017      	b.n	800ad86 <_vfiprintf_r+0x166>
 800ad56:	3701      	adds	r7, #1
 800ad58:	e7a9      	b.n	800acae <_vfiprintf_r+0x8e>
 800ad5a:	4b49      	ldr	r3, [pc, #292]	; (800ae80 <_vfiprintf_r+0x260>)
 800ad5c:	682a      	ldr	r2, [r5, #0]
 800ad5e:	1ac0      	subs	r0, r0, r3
 800ad60:	2301      	movs	r3, #1
 800ad62:	4083      	lsls	r3, r0
 800ad64:	4313      	orrs	r3, r2
 800ad66:	602b      	str	r3, [r5, #0]
 800ad68:	9703      	str	r7, [sp, #12]
 800ad6a:	e7cb      	b.n	800ad04 <_vfiprintf_r+0xe4>
 800ad6c:	9b07      	ldr	r3, [sp, #28]
 800ad6e:	1d19      	adds	r1, r3, #4
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	9107      	str	r1, [sp, #28]
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	db01      	blt.n	800ad7c <_vfiprintf_r+0x15c>
 800ad78:	930b      	str	r3, [sp, #44]	; 0x2c
 800ad7a:	e004      	b.n	800ad86 <_vfiprintf_r+0x166>
 800ad7c:	425b      	negs	r3, r3
 800ad7e:	60eb      	str	r3, [r5, #12]
 800ad80:	2302      	movs	r3, #2
 800ad82:	4313      	orrs	r3, r2
 800ad84:	602b      	str	r3, [r5, #0]
 800ad86:	783b      	ldrb	r3, [r7, #0]
 800ad88:	2b2e      	cmp	r3, #46	; 0x2e
 800ad8a:	d10a      	bne.n	800ada2 <_vfiprintf_r+0x182>
 800ad8c:	787b      	ldrb	r3, [r7, #1]
 800ad8e:	2b2a      	cmp	r3, #42	; 0x2a
 800ad90:	d137      	bne.n	800ae02 <_vfiprintf_r+0x1e2>
 800ad92:	9b07      	ldr	r3, [sp, #28]
 800ad94:	3702      	adds	r7, #2
 800ad96:	1d1a      	adds	r2, r3, #4
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	9207      	str	r2, [sp, #28]
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	db2d      	blt.n	800adfc <_vfiprintf_r+0x1dc>
 800ada0:	9309      	str	r3, [sp, #36]	; 0x24
 800ada2:	2203      	movs	r2, #3
 800ada4:	7839      	ldrb	r1, [r7, #0]
 800ada6:	4837      	ldr	r0, [pc, #220]	; (800ae84 <_vfiprintf_r+0x264>)
 800ada8:	f7fe f8e4 	bl	8008f74 <memchr>
 800adac:	2800      	cmp	r0, #0
 800adae:	d007      	beq.n	800adc0 <_vfiprintf_r+0x1a0>
 800adb0:	4b34      	ldr	r3, [pc, #208]	; (800ae84 <_vfiprintf_r+0x264>)
 800adb2:	682a      	ldr	r2, [r5, #0]
 800adb4:	1ac0      	subs	r0, r0, r3
 800adb6:	2340      	movs	r3, #64	; 0x40
 800adb8:	4083      	lsls	r3, r0
 800adba:	4313      	orrs	r3, r2
 800adbc:	3701      	adds	r7, #1
 800adbe:	602b      	str	r3, [r5, #0]
 800adc0:	7839      	ldrb	r1, [r7, #0]
 800adc2:	1c7b      	adds	r3, r7, #1
 800adc4:	2206      	movs	r2, #6
 800adc6:	4830      	ldr	r0, [pc, #192]	; (800ae88 <_vfiprintf_r+0x268>)
 800adc8:	9303      	str	r3, [sp, #12]
 800adca:	7629      	strb	r1, [r5, #24]
 800adcc:	f7fe f8d2 	bl	8008f74 <memchr>
 800add0:	2800      	cmp	r0, #0
 800add2:	d045      	beq.n	800ae60 <_vfiprintf_r+0x240>
 800add4:	4b2d      	ldr	r3, [pc, #180]	; (800ae8c <_vfiprintf_r+0x26c>)
 800add6:	2b00      	cmp	r3, #0
 800add8:	d127      	bne.n	800ae2a <_vfiprintf_r+0x20a>
 800adda:	2207      	movs	r2, #7
 800addc:	9b07      	ldr	r3, [sp, #28]
 800adde:	3307      	adds	r3, #7
 800ade0:	4393      	bics	r3, r2
 800ade2:	3308      	adds	r3, #8
 800ade4:	9307      	str	r3, [sp, #28]
 800ade6:	696b      	ldr	r3, [r5, #20]
 800ade8:	9a04      	ldr	r2, [sp, #16]
 800adea:	189b      	adds	r3, r3, r2
 800adec:	616b      	str	r3, [r5, #20]
 800adee:	e75d      	b.n	800acac <_vfiprintf_r+0x8c>
 800adf0:	210a      	movs	r1, #10
 800adf2:	434b      	muls	r3, r1
 800adf4:	4667      	mov	r7, ip
 800adf6:	189b      	adds	r3, r3, r2
 800adf8:	3909      	subs	r1, #9
 800adfa:	e7a3      	b.n	800ad44 <_vfiprintf_r+0x124>
 800adfc:	2301      	movs	r3, #1
 800adfe:	425b      	negs	r3, r3
 800ae00:	e7ce      	b.n	800ada0 <_vfiprintf_r+0x180>
 800ae02:	2300      	movs	r3, #0
 800ae04:	001a      	movs	r2, r3
 800ae06:	3701      	adds	r7, #1
 800ae08:	606b      	str	r3, [r5, #4]
 800ae0a:	7839      	ldrb	r1, [r7, #0]
 800ae0c:	1c78      	adds	r0, r7, #1
 800ae0e:	3930      	subs	r1, #48	; 0x30
 800ae10:	4684      	mov	ip, r0
 800ae12:	2909      	cmp	r1, #9
 800ae14:	d903      	bls.n	800ae1e <_vfiprintf_r+0x1fe>
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d0c3      	beq.n	800ada2 <_vfiprintf_r+0x182>
 800ae1a:	9209      	str	r2, [sp, #36]	; 0x24
 800ae1c:	e7c1      	b.n	800ada2 <_vfiprintf_r+0x182>
 800ae1e:	230a      	movs	r3, #10
 800ae20:	435a      	muls	r2, r3
 800ae22:	4667      	mov	r7, ip
 800ae24:	1852      	adds	r2, r2, r1
 800ae26:	3b09      	subs	r3, #9
 800ae28:	e7ef      	b.n	800ae0a <_vfiprintf_r+0x1ea>
 800ae2a:	ab07      	add	r3, sp, #28
 800ae2c:	9300      	str	r3, [sp, #0]
 800ae2e:	0022      	movs	r2, r4
 800ae30:	0029      	movs	r1, r5
 800ae32:	0030      	movs	r0, r6
 800ae34:	4b16      	ldr	r3, [pc, #88]	; (800ae90 <_vfiprintf_r+0x270>)
 800ae36:	f7fb f8e7 	bl	8006008 <_printf_float>
 800ae3a:	9004      	str	r0, [sp, #16]
 800ae3c:	9b04      	ldr	r3, [sp, #16]
 800ae3e:	3301      	adds	r3, #1
 800ae40:	d1d1      	bne.n	800ade6 <_vfiprintf_r+0x1c6>
 800ae42:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ae44:	07db      	lsls	r3, r3, #31
 800ae46:	d405      	bmi.n	800ae54 <_vfiprintf_r+0x234>
 800ae48:	89a3      	ldrh	r3, [r4, #12]
 800ae4a:	059b      	lsls	r3, r3, #22
 800ae4c:	d402      	bmi.n	800ae54 <_vfiprintf_r+0x234>
 800ae4e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ae50:	f7ff fe6c 	bl	800ab2c <__retarget_lock_release_recursive>
 800ae54:	89a3      	ldrh	r3, [r4, #12]
 800ae56:	065b      	lsls	r3, r3, #25
 800ae58:	d500      	bpl.n	800ae5c <_vfiprintf_r+0x23c>
 800ae5a:	e70a      	b.n	800ac72 <_vfiprintf_r+0x52>
 800ae5c:	980d      	ldr	r0, [sp, #52]	; 0x34
 800ae5e:	e70a      	b.n	800ac76 <_vfiprintf_r+0x56>
 800ae60:	ab07      	add	r3, sp, #28
 800ae62:	9300      	str	r3, [sp, #0]
 800ae64:	0022      	movs	r2, r4
 800ae66:	0029      	movs	r1, r5
 800ae68:	0030      	movs	r0, r6
 800ae6a:	4b09      	ldr	r3, [pc, #36]	; (800ae90 <_vfiprintf_r+0x270>)
 800ae6c:	f7fb fb7e 	bl	800656c <_printf_i>
 800ae70:	e7e3      	b.n	800ae3a <_vfiprintf_r+0x21a>
 800ae72:	46c0      	nop			; (mov r8, r8)
 800ae74:	0800b85c 	.word	0x0800b85c
 800ae78:	0800b87c 	.word	0x0800b87c
 800ae7c:	0800b83c 	.word	0x0800b83c
 800ae80:	0800b7d4 	.word	0x0800b7d4
 800ae84:	0800b7da 	.word	0x0800b7da
 800ae88:	0800b7de 	.word	0x0800b7de
 800ae8c:	08006009 	.word	0x08006009
 800ae90:	0800abfd 	.word	0x0800abfd

0800ae94 <__swbuf_r>:
 800ae94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae96:	0005      	movs	r5, r0
 800ae98:	000e      	movs	r6, r1
 800ae9a:	0014      	movs	r4, r2
 800ae9c:	2800      	cmp	r0, #0
 800ae9e:	d004      	beq.n	800aeaa <__swbuf_r+0x16>
 800aea0:	6983      	ldr	r3, [r0, #24]
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d101      	bne.n	800aeaa <__swbuf_r+0x16>
 800aea6:	f7ff fd8f 	bl	800a9c8 <__sinit>
 800aeaa:	4b22      	ldr	r3, [pc, #136]	; (800af34 <__swbuf_r+0xa0>)
 800aeac:	429c      	cmp	r4, r3
 800aeae:	d12e      	bne.n	800af0e <__swbuf_r+0x7a>
 800aeb0:	686c      	ldr	r4, [r5, #4]
 800aeb2:	69a3      	ldr	r3, [r4, #24]
 800aeb4:	60a3      	str	r3, [r4, #8]
 800aeb6:	89a3      	ldrh	r3, [r4, #12]
 800aeb8:	071b      	lsls	r3, r3, #28
 800aeba:	d532      	bpl.n	800af22 <__swbuf_r+0x8e>
 800aebc:	6923      	ldr	r3, [r4, #16]
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d02f      	beq.n	800af22 <__swbuf_r+0x8e>
 800aec2:	6823      	ldr	r3, [r4, #0]
 800aec4:	6922      	ldr	r2, [r4, #16]
 800aec6:	b2f7      	uxtb	r7, r6
 800aec8:	1a98      	subs	r0, r3, r2
 800aeca:	6963      	ldr	r3, [r4, #20]
 800aecc:	b2f6      	uxtb	r6, r6
 800aece:	4283      	cmp	r3, r0
 800aed0:	dc05      	bgt.n	800aede <__swbuf_r+0x4a>
 800aed2:	0021      	movs	r1, r4
 800aed4:	0028      	movs	r0, r5
 800aed6:	f7ff fcd5 	bl	800a884 <_fflush_r>
 800aeda:	2800      	cmp	r0, #0
 800aedc:	d127      	bne.n	800af2e <__swbuf_r+0x9a>
 800aede:	68a3      	ldr	r3, [r4, #8]
 800aee0:	3001      	adds	r0, #1
 800aee2:	3b01      	subs	r3, #1
 800aee4:	60a3      	str	r3, [r4, #8]
 800aee6:	6823      	ldr	r3, [r4, #0]
 800aee8:	1c5a      	adds	r2, r3, #1
 800aeea:	6022      	str	r2, [r4, #0]
 800aeec:	701f      	strb	r7, [r3, #0]
 800aeee:	6963      	ldr	r3, [r4, #20]
 800aef0:	4283      	cmp	r3, r0
 800aef2:	d004      	beq.n	800aefe <__swbuf_r+0x6a>
 800aef4:	89a3      	ldrh	r3, [r4, #12]
 800aef6:	07db      	lsls	r3, r3, #31
 800aef8:	d507      	bpl.n	800af0a <__swbuf_r+0x76>
 800aefa:	2e0a      	cmp	r6, #10
 800aefc:	d105      	bne.n	800af0a <__swbuf_r+0x76>
 800aefe:	0021      	movs	r1, r4
 800af00:	0028      	movs	r0, r5
 800af02:	f7ff fcbf 	bl	800a884 <_fflush_r>
 800af06:	2800      	cmp	r0, #0
 800af08:	d111      	bne.n	800af2e <__swbuf_r+0x9a>
 800af0a:	0030      	movs	r0, r6
 800af0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800af0e:	4b0a      	ldr	r3, [pc, #40]	; (800af38 <__swbuf_r+0xa4>)
 800af10:	429c      	cmp	r4, r3
 800af12:	d101      	bne.n	800af18 <__swbuf_r+0x84>
 800af14:	68ac      	ldr	r4, [r5, #8]
 800af16:	e7cc      	b.n	800aeb2 <__swbuf_r+0x1e>
 800af18:	4b08      	ldr	r3, [pc, #32]	; (800af3c <__swbuf_r+0xa8>)
 800af1a:	429c      	cmp	r4, r3
 800af1c:	d1c9      	bne.n	800aeb2 <__swbuf_r+0x1e>
 800af1e:	68ec      	ldr	r4, [r5, #12]
 800af20:	e7c7      	b.n	800aeb2 <__swbuf_r+0x1e>
 800af22:	0021      	movs	r1, r4
 800af24:	0028      	movs	r0, r5
 800af26:	f000 f80b 	bl	800af40 <__swsetup_r>
 800af2a:	2800      	cmp	r0, #0
 800af2c:	d0c9      	beq.n	800aec2 <__swbuf_r+0x2e>
 800af2e:	2601      	movs	r6, #1
 800af30:	4276      	negs	r6, r6
 800af32:	e7ea      	b.n	800af0a <__swbuf_r+0x76>
 800af34:	0800b85c 	.word	0x0800b85c
 800af38:	0800b87c 	.word	0x0800b87c
 800af3c:	0800b83c 	.word	0x0800b83c

0800af40 <__swsetup_r>:
 800af40:	4b37      	ldr	r3, [pc, #220]	; (800b020 <__swsetup_r+0xe0>)
 800af42:	b570      	push	{r4, r5, r6, lr}
 800af44:	681d      	ldr	r5, [r3, #0]
 800af46:	0006      	movs	r6, r0
 800af48:	000c      	movs	r4, r1
 800af4a:	2d00      	cmp	r5, #0
 800af4c:	d005      	beq.n	800af5a <__swsetup_r+0x1a>
 800af4e:	69ab      	ldr	r3, [r5, #24]
 800af50:	2b00      	cmp	r3, #0
 800af52:	d102      	bne.n	800af5a <__swsetup_r+0x1a>
 800af54:	0028      	movs	r0, r5
 800af56:	f7ff fd37 	bl	800a9c8 <__sinit>
 800af5a:	4b32      	ldr	r3, [pc, #200]	; (800b024 <__swsetup_r+0xe4>)
 800af5c:	429c      	cmp	r4, r3
 800af5e:	d10f      	bne.n	800af80 <__swsetup_r+0x40>
 800af60:	686c      	ldr	r4, [r5, #4]
 800af62:	230c      	movs	r3, #12
 800af64:	5ee2      	ldrsh	r2, [r4, r3]
 800af66:	b293      	uxth	r3, r2
 800af68:	0711      	lsls	r1, r2, #28
 800af6a:	d42d      	bmi.n	800afc8 <__swsetup_r+0x88>
 800af6c:	06d9      	lsls	r1, r3, #27
 800af6e:	d411      	bmi.n	800af94 <__swsetup_r+0x54>
 800af70:	2309      	movs	r3, #9
 800af72:	2001      	movs	r0, #1
 800af74:	6033      	str	r3, [r6, #0]
 800af76:	3337      	adds	r3, #55	; 0x37
 800af78:	4313      	orrs	r3, r2
 800af7a:	81a3      	strh	r3, [r4, #12]
 800af7c:	4240      	negs	r0, r0
 800af7e:	bd70      	pop	{r4, r5, r6, pc}
 800af80:	4b29      	ldr	r3, [pc, #164]	; (800b028 <__swsetup_r+0xe8>)
 800af82:	429c      	cmp	r4, r3
 800af84:	d101      	bne.n	800af8a <__swsetup_r+0x4a>
 800af86:	68ac      	ldr	r4, [r5, #8]
 800af88:	e7eb      	b.n	800af62 <__swsetup_r+0x22>
 800af8a:	4b28      	ldr	r3, [pc, #160]	; (800b02c <__swsetup_r+0xec>)
 800af8c:	429c      	cmp	r4, r3
 800af8e:	d1e8      	bne.n	800af62 <__swsetup_r+0x22>
 800af90:	68ec      	ldr	r4, [r5, #12]
 800af92:	e7e6      	b.n	800af62 <__swsetup_r+0x22>
 800af94:	075b      	lsls	r3, r3, #29
 800af96:	d513      	bpl.n	800afc0 <__swsetup_r+0x80>
 800af98:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800af9a:	2900      	cmp	r1, #0
 800af9c:	d008      	beq.n	800afb0 <__swsetup_r+0x70>
 800af9e:	0023      	movs	r3, r4
 800afa0:	3344      	adds	r3, #68	; 0x44
 800afa2:	4299      	cmp	r1, r3
 800afa4:	d002      	beq.n	800afac <__swsetup_r+0x6c>
 800afa6:	0030      	movs	r0, r6
 800afa8:	f7fe fcee 	bl	8009988 <_free_r>
 800afac:	2300      	movs	r3, #0
 800afae:	6363      	str	r3, [r4, #52]	; 0x34
 800afb0:	2224      	movs	r2, #36	; 0x24
 800afb2:	89a3      	ldrh	r3, [r4, #12]
 800afb4:	4393      	bics	r3, r2
 800afb6:	81a3      	strh	r3, [r4, #12]
 800afb8:	2300      	movs	r3, #0
 800afba:	6063      	str	r3, [r4, #4]
 800afbc:	6923      	ldr	r3, [r4, #16]
 800afbe:	6023      	str	r3, [r4, #0]
 800afc0:	2308      	movs	r3, #8
 800afc2:	89a2      	ldrh	r2, [r4, #12]
 800afc4:	4313      	orrs	r3, r2
 800afc6:	81a3      	strh	r3, [r4, #12]
 800afc8:	6923      	ldr	r3, [r4, #16]
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d10b      	bne.n	800afe6 <__swsetup_r+0xa6>
 800afce:	21a0      	movs	r1, #160	; 0xa0
 800afd0:	2280      	movs	r2, #128	; 0x80
 800afd2:	89a3      	ldrh	r3, [r4, #12]
 800afd4:	0089      	lsls	r1, r1, #2
 800afd6:	0092      	lsls	r2, r2, #2
 800afd8:	400b      	ands	r3, r1
 800afda:	4293      	cmp	r3, r2
 800afdc:	d003      	beq.n	800afe6 <__swsetup_r+0xa6>
 800afde:	0021      	movs	r1, r4
 800afe0:	0030      	movs	r0, r6
 800afe2:	f000 f855 	bl	800b090 <__smakebuf_r>
 800afe6:	220c      	movs	r2, #12
 800afe8:	5ea3      	ldrsh	r3, [r4, r2]
 800afea:	2001      	movs	r0, #1
 800afec:	001a      	movs	r2, r3
 800afee:	b299      	uxth	r1, r3
 800aff0:	4002      	ands	r2, r0
 800aff2:	4203      	tst	r3, r0
 800aff4:	d00f      	beq.n	800b016 <__swsetup_r+0xd6>
 800aff6:	2200      	movs	r2, #0
 800aff8:	60a2      	str	r2, [r4, #8]
 800affa:	6962      	ldr	r2, [r4, #20]
 800affc:	4252      	negs	r2, r2
 800affe:	61a2      	str	r2, [r4, #24]
 800b000:	2000      	movs	r0, #0
 800b002:	6922      	ldr	r2, [r4, #16]
 800b004:	4282      	cmp	r2, r0
 800b006:	d1ba      	bne.n	800af7e <__swsetup_r+0x3e>
 800b008:	060a      	lsls	r2, r1, #24
 800b00a:	d5b8      	bpl.n	800af7e <__swsetup_r+0x3e>
 800b00c:	2240      	movs	r2, #64	; 0x40
 800b00e:	4313      	orrs	r3, r2
 800b010:	81a3      	strh	r3, [r4, #12]
 800b012:	3801      	subs	r0, #1
 800b014:	e7b3      	b.n	800af7e <__swsetup_r+0x3e>
 800b016:	0788      	lsls	r0, r1, #30
 800b018:	d400      	bmi.n	800b01c <__swsetup_r+0xdc>
 800b01a:	6962      	ldr	r2, [r4, #20]
 800b01c:	60a2      	str	r2, [r4, #8]
 800b01e:	e7ef      	b.n	800b000 <__swsetup_r+0xc0>
 800b020:	20000040 	.word	0x20000040
 800b024:	0800b85c 	.word	0x0800b85c
 800b028:	0800b87c 	.word	0x0800b87c
 800b02c:	0800b83c 	.word	0x0800b83c

0800b030 <abort>:
 800b030:	2006      	movs	r0, #6
 800b032:	b510      	push	{r4, lr}
 800b034:	f000 f8a2 	bl	800b17c <raise>
 800b038:	2001      	movs	r0, #1
 800b03a:	f7f8 fa27 	bl	800348c <_exit>
	...

0800b040 <__swhatbuf_r>:
 800b040:	b570      	push	{r4, r5, r6, lr}
 800b042:	000e      	movs	r6, r1
 800b044:	001d      	movs	r5, r3
 800b046:	230e      	movs	r3, #14
 800b048:	5ec9      	ldrsh	r1, [r1, r3]
 800b04a:	0014      	movs	r4, r2
 800b04c:	b096      	sub	sp, #88	; 0x58
 800b04e:	2900      	cmp	r1, #0
 800b050:	da08      	bge.n	800b064 <__swhatbuf_r+0x24>
 800b052:	220c      	movs	r2, #12
 800b054:	5eb3      	ldrsh	r3, [r6, r2]
 800b056:	2200      	movs	r2, #0
 800b058:	602a      	str	r2, [r5, #0]
 800b05a:	061b      	lsls	r3, r3, #24
 800b05c:	d411      	bmi.n	800b082 <__swhatbuf_r+0x42>
 800b05e:	2380      	movs	r3, #128	; 0x80
 800b060:	00db      	lsls	r3, r3, #3
 800b062:	e00f      	b.n	800b084 <__swhatbuf_r+0x44>
 800b064:	466a      	mov	r2, sp
 800b066:	f000 f8a9 	bl	800b1bc <_fstat_r>
 800b06a:	2800      	cmp	r0, #0
 800b06c:	dbf1      	blt.n	800b052 <__swhatbuf_r+0x12>
 800b06e:	23f0      	movs	r3, #240	; 0xf0
 800b070:	9901      	ldr	r1, [sp, #4]
 800b072:	021b      	lsls	r3, r3, #8
 800b074:	4019      	ands	r1, r3
 800b076:	4b05      	ldr	r3, [pc, #20]	; (800b08c <__swhatbuf_r+0x4c>)
 800b078:	18c9      	adds	r1, r1, r3
 800b07a:	424b      	negs	r3, r1
 800b07c:	4159      	adcs	r1, r3
 800b07e:	6029      	str	r1, [r5, #0]
 800b080:	e7ed      	b.n	800b05e <__swhatbuf_r+0x1e>
 800b082:	2340      	movs	r3, #64	; 0x40
 800b084:	2000      	movs	r0, #0
 800b086:	6023      	str	r3, [r4, #0]
 800b088:	b016      	add	sp, #88	; 0x58
 800b08a:	bd70      	pop	{r4, r5, r6, pc}
 800b08c:	ffffe000 	.word	0xffffe000

0800b090 <__smakebuf_r>:
 800b090:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b092:	2602      	movs	r6, #2
 800b094:	898b      	ldrh	r3, [r1, #12]
 800b096:	0005      	movs	r5, r0
 800b098:	000c      	movs	r4, r1
 800b09a:	4233      	tst	r3, r6
 800b09c:	d006      	beq.n	800b0ac <__smakebuf_r+0x1c>
 800b09e:	0023      	movs	r3, r4
 800b0a0:	3347      	adds	r3, #71	; 0x47
 800b0a2:	6023      	str	r3, [r4, #0]
 800b0a4:	6123      	str	r3, [r4, #16]
 800b0a6:	2301      	movs	r3, #1
 800b0a8:	6163      	str	r3, [r4, #20]
 800b0aa:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800b0ac:	466a      	mov	r2, sp
 800b0ae:	ab01      	add	r3, sp, #4
 800b0b0:	f7ff ffc6 	bl	800b040 <__swhatbuf_r>
 800b0b4:	9900      	ldr	r1, [sp, #0]
 800b0b6:	0007      	movs	r7, r0
 800b0b8:	0028      	movs	r0, r5
 800b0ba:	f7fe fcd1 	bl	8009a60 <_malloc_r>
 800b0be:	2800      	cmp	r0, #0
 800b0c0:	d108      	bne.n	800b0d4 <__smakebuf_r+0x44>
 800b0c2:	220c      	movs	r2, #12
 800b0c4:	5ea3      	ldrsh	r3, [r4, r2]
 800b0c6:	059a      	lsls	r2, r3, #22
 800b0c8:	d4ef      	bmi.n	800b0aa <__smakebuf_r+0x1a>
 800b0ca:	2203      	movs	r2, #3
 800b0cc:	4393      	bics	r3, r2
 800b0ce:	431e      	orrs	r6, r3
 800b0d0:	81a6      	strh	r6, [r4, #12]
 800b0d2:	e7e4      	b.n	800b09e <__smakebuf_r+0xe>
 800b0d4:	4b0f      	ldr	r3, [pc, #60]	; (800b114 <__smakebuf_r+0x84>)
 800b0d6:	62ab      	str	r3, [r5, #40]	; 0x28
 800b0d8:	2380      	movs	r3, #128	; 0x80
 800b0da:	89a2      	ldrh	r2, [r4, #12]
 800b0dc:	6020      	str	r0, [r4, #0]
 800b0de:	4313      	orrs	r3, r2
 800b0e0:	81a3      	strh	r3, [r4, #12]
 800b0e2:	9b00      	ldr	r3, [sp, #0]
 800b0e4:	6120      	str	r0, [r4, #16]
 800b0e6:	6163      	str	r3, [r4, #20]
 800b0e8:	9b01      	ldr	r3, [sp, #4]
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d00d      	beq.n	800b10a <__smakebuf_r+0x7a>
 800b0ee:	0028      	movs	r0, r5
 800b0f0:	230e      	movs	r3, #14
 800b0f2:	5ee1      	ldrsh	r1, [r4, r3]
 800b0f4:	f000 f874 	bl	800b1e0 <_isatty_r>
 800b0f8:	2800      	cmp	r0, #0
 800b0fa:	d006      	beq.n	800b10a <__smakebuf_r+0x7a>
 800b0fc:	2203      	movs	r2, #3
 800b0fe:	89a3      	ldrh	r3, [r4, #12]
 800b100:	4393      	bics	r3, r2
 800b102:	001a      	movs	r2, r3
 800b104:	2301      	movs	r3, #1
 800b106:	4313      	orrs	r3, r2
 800b108:	81a3      	strh	r3, [r4, #12]
 800b10a:	89a0      	ldrh	r0, [r4, #12]
 800b10c:	4307      	orrs	r7, r0
 800b10e:	81a7      	strh	r7, [r4, #12]
 800b110:	e7cb      	b.n	800b0aa <__smakebuf_r+0x1a>
 800b112:	46c0      	nop			; (mov r8, r8)
 800b114:	0800a94d 	.word	0x0800a94d

0800b118 <_malloc_usable_size_r>:
 800b118:	1f0b      	subs	r3, r1, #4
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	1f18      	subs	r0, r3, #4
 800b11e:	2b00      	cmp	r3, #0
 800b120:	da01      	bge.n	800b126 <_malloc_usable_size_r+0xe>
 800b122:	580b      	ldr	r3, [r1, r0]
 800b124:	18c0      	adds	r0, r0, r3
 800b126:	4770      	bx	lr

0800b128 <_raise_r>:
 800b128:	b570      	push	{r4, r5, r6, lr}
 800b12a:	0004      	movs	r4, r0
 800b12c:	000d      	movs	r5, r1
 800b12e:	291f      	cmp	r1, #31
 800b130:	d904      	bls.n	800b13c <_raise_r+0x14>
 800b132:	2316      	movs	r3, #22
 800b134:	6003      	str	r3, [r0, #0]
 800b136:	2001      	movs	r0, #1
 800b138:	4240      	negs	r0, r0
 800b13a:	bd70      	pop	{r4, r5, r6, pc}
 800b13c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d004      	beq.n	800b14c <_raise_r+0x24>
 800b142:	008a      	lsls	r2, r1, #2
 800b144:	189b      	adds	r3, r3, r2
 800b146:	681a      	ldr	r2, [r3, #0]
 800b148:	2a00      	cmp	r2, #0
 800b14a:	d108      	bne.n	800b15e <_raise_r+0x36>
 800b14c:	0020      	movs	r0, r4
 800b14e:	f000 f831 	bl	800b1b4 <_getpid_r>
 800b152:	002a      	movs	r2, r5
 800b154:	0001      	movs	r1, r0
 800b156:	0020      	movs	r0, r4
 800b158:	f000 f81a 	bl	800b190 <_kill_r>
 800b15c:	e7ed      	b.n	800b13a <_raise_r+0x12>
 800b15e:	2000      	movs	r0, #0
 800b160:	2a01      	cmp	r2, #1
 800b162:	d0ea      	beq.n	800b13a <_raise_r+0x12>
 800b164:	1c51      	adds	r1, r2, #1
 800b166:	d103      	bne.n	800b170 <_raise_r+0x48>
 800b168:	2316      	movs	r3, #22
 800b16a:	3001      	adds	r0, #1
 800b16c:	6023      	str	r3, [r4, #0]
 800b16e:	e7e4      	b.n	800b13a <_raise_r+0x12>
 800b170:	2400      	movs	r4, #0
 800b172:	0028      	movs	r0, r5
 800b174:	601c      	str	r4, [r3, #0]
 800b176:	4790      	blx	r2
 800b178:	0020      	movs	r0, r4
 800b17a:	e7de      	b.n	800b13a <_raise_r+0x12>

0800b17c <raise>:
 800b17c:	b510      	push	{r4, lr}
 800b17e:	4b03      	ldr	r3, [pc, #12]	; (800b18c <raise+0x10>)
 800b180:	0001      	movs	r1, r0
 800b182:	6818      	ldr	r0, [r3, #0]
 800b184:	f7ff ffd0 	bl	800b128 <_raise_r>
 800b188:	bd10      	pop	{r4, pc}
 800b18a:	46c0      	nop			; (mov r8, r8)
 800b18c:	20000040 	.word	0x20000040

0800b190 <_kill_r>:
 800b190:	2300      	movs	r3, #0
 800b192:	b570      	push	{r4, r5, r6, lr}
 800b194:	4d06      	ldr	r5, [pc, #24]	; (800b1b0 <_kill_r+0x20>)
 800b196:	0004      	movs	r4, r0
 800b198:	0008      	movs	r0, r1
 800b19a:	0011      	movs	r1, r2
 800b19c:	602b      	str	r3, [r5, #0]
 800b19e:	f7f8 f965 	bl	800346c <_kill>
 800b1a2:	1c43      	adds	r3, r0, #1
 800b1a4:	d103      	bne.n	800b1ae <_kill_r+0x1e>
 800b1a6:	682b      	ldr	r3, [r5, #0]
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d000      	beq.n	800b1ae <_kill_r+0x1e>
 800b1ac:	6023      	str	r3, [r4, #0]
 800b1ae:	bd70      	pop	{r4, r5, r6, pc}
 800b1b0:	20000934 	.word	0x20000934

0800b1b4 <_getpid_r>:
 800b1b4:	b510      	push	{r4, lr}
 800b1b6:	f7f8 f953 	bl	8003460 <_getpid>
 800b1ba:	bd10      	pop	{r4, pc}

0800b1bc <_fstat_r>:
 800b1bc:	2300      	movs	r3, #0
 800b1be:	b570      	push	{r4, r5, r6, lr}
 800b1c0:	4d06      	ldr	r5, [pc, #24]	; (800b1dc <_fstat_r+0x20>)
 800b1c2:	0004      	movs	r4, r0
 800b1c4:	0008      	movs	r0, r1
 800b1c6:	0011      	movs	r1, r2
 800b1c8:	602b      	str	r3, [r5, #0]
 800b1ca:	f7f8 f9ae 	bl	800352a <_fstat>
 800b1ce:	1c43      	adds	r3, r0, #1
 800b1d0:	d103      	bne.n	800b1da <_fstat_r+0x1e>
 800b1d2:	682b      	ldr	r3, [r5, #0]
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d000      	beq.n	800b1da <_fstat_r+0x1e>
 800b1d8:	6023      	str	r3, [r4, #0]
 800b1da:	bd70      	pop	{r4, r5, r6, pc}
 800b1dc:	20000934 	.word	0x20000934

0800b1e0 <_isatty_r>:
 800b1e0:	2300      	movs	r3, #0
 800b1e2:	b570      	push	{r4, r5, r6, lr}
 800b1e4:	4d06      	ldr	r5, [pc, #24]	; (800b200 <_isatty_r+0x20>)
 800b1e6:	0004      	movs	r4, r0
 800b1e8:	0008      	movs	r0, r1
 800b1ea:	602b      	str	r3, [r5, #0]
 800b1ec:	f7f8 f9ab 	bl	8003546 <_isatty>
 800b1f0:	1c43      	adds	r3, r0, #1
 800b1f2:	d103      	bne.n	800b1fc <_isatty_r+0x1c>
 800b1f4:	682b      	ldr	r3, [r5, #0]
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d000      	beq.n	800b1fc <_isatty_r+0x1c>
 800b1fa:	6023      	str	r3, [r4, #0]
 800b1fc:	bd70      	pop	{r4, r5, r6, pc}
 800b1fe:	46c0      	nop			; (mov r8, r8)
 800b200:	20000934 	.word	0x20000934

0800b204 <_init>:
 800b204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b206:	46c0      	nop			; (mov r8, r8)
 800b208:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b20a:	bc08      	pop	{r3}
 800b20c:	469e      	mov	lr, r3
 800b20e:	4770      	bx	lr

0800b210 <_fini>:
 800b210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b212:	46c0      	nop			; (mov r8, r8)
 800b214:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b216:	bc08      	pop	{r3}
 800b218:	469e      	mov	lr, r3
 800b21a:	4770      	bx	lr
